module Maps.SUITE(erlps__all__0, erlps__suite__0,
                  erlps__t_update_with_3__1, erlps__t_update_with_4__1,
                  erlps__t_get_3__1, erlps__t_filter_2__1, erlps__t_fold_3__1,
                  erlps__t_map_2__1, erlps__t_size_1__1, erlps__t_iterator_1__1,
                  erlps__t_put_opt__1, erlps__t_merge_opt__1,
                  erlps__t_with_2__1, erlps__t_without_2__1,
                  erlps__t_intersect__1, erlps__t_intersect_with__1,
                  erlps__t_merge_with__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..))
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)


erlps__suite__0 :: ErlangFun
erlps__suite__0 [] =
  let   
    tail_0 =
      (ErlangTuple
         [(ErlangAtom "ct_hooks"), (ErlangCons (ErlangAtom "ts_install_cth") ErlangEmptyList)])
  in let tup_el_8 = (ErlangTuple [(ErlangAtom "minutes"), (ErlangInt 1)])
  in let tail_6 = (ErlangTuple [(ErlangAtom "timetrap"), tup_el_8])
  in (ErlangCons tail_0 (ErlangCons tail_6 ErlangEmptyList))
erlps__suite__0 args =
  (EXC.badarity (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__all__0 :: ErlangFun
erlps__all__0 [] =
  (ErlangCons (ErlangAtom "t_update_with_3")
     (ErlangCons (ErlangAtom "t_update_with_4")
        (ErlangCons (ErlangAtom "t_get_3")
           (ErlangCons (ErlangAtom "t_filter_2")
              (ErlangCons (ErlangAtom "t_fold_3")
                 (ErlangCons (ErlangAtom "t_map_2")
                    (ErlangCons (ErlangAtom "t_size_1")
                       (ErlangCons (ErlangAtom "t_iterator_1")
                          (ErlangCons (ErlangAtom "t_put_opt")
                             (ErlangCons (ErlangAtom "t_merge_opt")
                                (ErlangCons (ErlangAtom "t_with_2")
                                   (ErlangCons (ErlangAtom "t_without_2")
                                      (ErlangCons (ErlangAtom "t_intersect")
                                         (ErlangCons (ErlangAtom "t_intersect_with")
                                            (ErlangCons (ErlangAtom "t_merge_with")
                                               ErlangEmptyList)))))))))))))))
erlps__all__0 args =
  (EXC.badarity (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_update_with_3__1 :: ErlangFun
erlps__t_update_with_3__1 [config_0] | (isEList config_0) =
  let   
    v2_8 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt 118) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 97) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 108) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 117) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 101) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 50) (ErlangInt 8) 1 BIN.Big)]))
  in let v3_9 = (make_string "value3")
  in let key_12 = (make_string "key3")
  in let
    map_16 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "key1") (ErlangAtom "value1")),
             (Tup.Tuple (ErlangAtom "key2") v2_8), (Tup.Tuple key_12 v3_9)]))
  in let
    fun_28 =
      (ErlangFun 1
         let
           lambda_17 [v_19] =
             let tail_24 = (ErlangTuple [v_19, v_19])
             in
               (ErlangCons v_19
                  (ErlangCons v_19 (ErlangCons tail_24 ErlangEmptyList)))
           lambda_17 [arg_18] = (EXC.function_clause unit)
           lambda_17 args = (EXC.badarity (ErlangFun 1 lambda_17) args)
         in lambda_17)
  in let
    match_expr_37 =
      (BIF.do_remote_fun_call "Maps" "erlps__update_with__3" [(ErlangAtom "key1"), fun_28, map_16])
  in
    case match_expr_37 of
      (ErlangMap map_32) | (DM.Just (ErlangCons v1_33 (ErlangCons v1_34 (ErlangCons (ErlangTuple [v1_35,
                                                                                                  v1_36]) ErlangEmptyList)))) <-
                             ((Map.lookup (ErlangAtom "key1") map_32))
                         , (v1_33 == (ErlangAtom "value1"))
                         , (v1_34 == (ErlangAtom "value1"))
                         , (v1_35 == (ErlangAtom "value1"))
                         , (v1_36 == (ErlangAtom "value1")) ->
        let
          match_expr_46 =
            (BIF.do_remote_fun_call "Maps" "erlps__update_with__3" [(ErlangAtom "key2"), fun_28, map_16])
        in
          case match_expr_46 of
            (ErlangMap map_41) | (DM.Just (ErlangCons v2_42 (ErlangCons v2_43 (ErlangCons (ErlangTuple [v2_44,
                                                                                                        v2_45]) ErlangEmptyList)))) <-
                                   ((Map.lookup (ErlangAtom "key2") map_41))
                               , (v2_42 == v2_8)
                               , (v2_43 == v2_8)
                               , (v2_44 == v2_8)
                               , (v2_45 == v2_8) ->
              let    arg_47 = (make_string "key3")
              in let
                match_expr_55 =
                  (BIF.do_remote_fun_call "Maps" "erlps__update_with__3" [arg_47, fun_28, map_16])
              in
                case match_expr_55 of
                  (ErlangMap map_50) | (DM.Just (ErlangCons v3_51 (ErlangCons v3_52 (ErlangCons (ErlangTuple [v3_53,
                                                                                                              v3_54]) ErlangEmptyList)))) <-
                                         ((Map.lookup (make_string "key3") map_50))
                                     , (v3_51 == v3_9)
                                     , (v3_52 == v3_9)
                                     , (v3_53 == v3_9)
                                     , (v3_54 == v3_9) ->
                    let
                      match_expr_76 =
                        (EXC.tryCatch
                           (\ _ ->
                              let arg_61 = (erlps__id__1 [(ErlangAtom "a")])
                              in
                                (BIF.do_remote_fun_call "Maps" "erlps__update_with__3"
                                   [(ErlangCons (ErlangAtom "a")
                                       (ErlangCons (ErlangAtom "b")
                                          ErlangEmptyList)),
                                    arg_61, (ErlangAtom "b")]))
                           (\ ex_65 ->
                              case ex_65 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_66, _]) ->
                                  payload_66
                                (ErlangTuple [(ErlangAtom "error"), payload_67,
                                              stack_68]) ->
                                  let
                                    tup_el_70 =
                                      (ErlangTuple [payload_67, stack_68])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_70])
                                (ErlangTuple [(ErlangAtom "exit"), payload_73, _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_73])
                                ex_65 -> (EXC.raise ex_65)))
                    in
                      case match_expr_76 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangAtom "b")]),
                                                    _])]) ->
                          let
                            match_expr_97 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      arg_82 = (erlps__id__1 [(ErlangAtom "a")])
                                    in let arg_84 = (ErlangMap Map.empty)
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__update_with__3"
                                         [(ErlangCons (ErlangAtom "a")
                                             (ErlangCons (ErlangAtom "b")
                                                ErlangEmptyList)),
                                          arg_82, arg_84]))
                                 (\ ex_86 ->
                                    case ex_86 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_87,
                                                    _]) ->
                                        payload_87
                                      (ErlangTuple [(ErlangAtom "error"), payload_88,
                                                    stack_89]) ->
                                        let
                                          tup_el_91 =
                                            (ErlangTuple [payload_88, stack_89])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_91])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_94,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_94])
                                      ex_86 -> (EXC.raise ex_86)))
                          in
                            case match_expr_97 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangAtom "badarg"),
                                                          _])]) ->
                                let
                                  match_expr_117 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let arg_104 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__update_with__3"
                                               [(ErlangCons (ErlangAtom "a")
                                                   (ErlangCons (ErlangAtom "b")
                                                      ErlangEmptyList)),
                                                fun_28, arg_104]))
                                       (\ ex_106 ->
                                          case ex_106 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_107, _]) ->
                                              payload_107
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_108,
                                                          stack_109]) ->
                                              let
                                                tup_el_111 =
                                                  (ErlangTuple
                                                     [payload_108, stack_109])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_111])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_114, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_114])
                                            ex_106 -> (EXC.raise ex_106)))
                                in
                                  case match_expr_117 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangTuple [(ErlangAtom "badkey"),
                                                                              (ErlangCons (ErlangAtom "a") (ErlangCons (ErlangAtom "b") ErlangEmptyList))]),
                                                                _])]) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_117)
                              _ -> (EXC.badmatch match_expr_97)
                        _ -> (EXC.badmatch match_expr_76)
                  _ -> (EXC.badmatch match_expr_55)
            _ -> (EXC.badmatch match_expr_46)
      _ -> (EXC.badmatch match_expr_37)
erlps__t_update_with_3__1 [arg_118] = (EXC.function_clause unit)
erlps__t_update_with_3__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_update_with_4__1 :: ErlangFun
erlps__t_update_with_4__1 [config_0] | (isEList config_0) =
  let   
    v2_8 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt 118) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 97) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 108) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 117) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 101) (ErlangInt 8) 1 BIN.Big),
             (BIN.from_int (ErlangInt 50) (ErlangInt 8) 1 BIN.Big)]))
  in let v3_9 = (make_string "value3")
  in let key_12 = (make_string "key3")
  in let
    map_16 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "key1") (ErlangAtom "value1")),
             (Tup.Tuple (ErlangAtom "key2") v2_8), (Tup.Tuple key_12 v3_9)]))
  in let
    fun_28 =
      (ErlangFun 1
         let
           lambda_17 [v_19] =
             let tail_24 = (ErlangTuple [v_19, v_19])
             in
               (ErlangCons v_19
                  (ErlangCons v_19 (ErlangCons tail_24 ErlangEmptyList)))
           lambda_17 [arg_18] = (EXC.function_clause unit)
           lambda_17 args = (EXC.badarity (ErlangFun 1 lambda_17) args)
         in lambda_17)
  in let
    match_expr_39 =
      (BIF.do_remote_fun_call "Maps" "erlps__update_with__4"
         [(ErlangAtom "key1"), fun_28, (ErlangInt 3), map_16])
  in
    case match_expr_39 of
      (ErlangMap map_34) | (DM.Just (ErlangCons v1_35 (ErlangCons v1_36 (ErlangCons (ErlangTuple [v1_37,
                                                                                                  v1_38]) ErlangEmptyList)))) <-
                             ((Map.lookup (ErlangAtom "key1") map_34))
                         , (v1_35 == (ErlangAtom "value1"))
                         , (v1_36 == (ErlangAtom "value1"))
                         , (v1_37 == (ErlangAtom "value1"))
                         , (v1_38 == (ErlangAtom "value1")) ->
        let
          match_expr_49 =
            (BIF.do_remote_fun_call "Maps" "erlps__update_with__4"
               [(ErlangAtom "key2"), fun_28, (ErlangInt 3), map_16])
        in
          case match_expr_49 of
            (ErlangMap map_44) | (DM.Just (ErlangCons v2_45 (ErlangCons v2_46 (ErlangCons (ErlangTuple [v2_47,
                                                                                                        v2_48]) ErlangEmptyList)))) <-
                                   ((Map.lookup (ErlangAtom "key2") map_44))
                               , (v2_45 == v2_8)
                               , (v2_46 == v2_8)
                               , (v2_47 == v2_8)
                               , (v2_48 == v2_8) ->
              let    arg_50 = (make_string "key3")
              in let
                match_expr_59 =
                  (BIF.do_remote_fun_call "Maps" "erlps__update_with__4"
                     [arg_50, fun_28, (ErlangInt 3), map_16])
              in
                case match_expr_59 of
                  (ErlangMap map_54) | (DM.Just (ErlangCons v3_55 (ErlangCons v3_56 (ErlangCons (ErlangTuple [v3_57,
                                                                                                              v3_58]) ErlangEmptyList)))) <-
                                         ((Map.lookup (make_string "key3") map_54))
                                     , (v3_55 == v3_9)
                                     , (v3_56 == v3_9)
                                     , (v3_57 == v3_9)
                                     , (v3_58 == v3_9) ->
                    let
                      match_expr_66 =
                        (BIF.do_remote_fun_call "Maps" "erlps__update_with__4"
                           [(ErlangAtom "key3"), fun_28, (ErlangInt 3), map_16])
                    in
                      case match_expr_66 of
                        (ErlangMap map_64) | (DM.Just init_65) <-
                                               ((Map.lookup (ErlangAtom "key3")
                                                   map_64))
                                           , (init_65 == (ErlangInt 3)) ->
                          let
                            match_expr_87 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let arg_72 = (erlps__id__1 [(ErlangAtom "a")])
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__update_with__3"
                                         [(ErlangCons (ErlangAtom "a")
                                             (ErlangCons (ErlangAtom "b")
                                                ErlangEmptyList)),
                                          arg_72, (ErlangAtom "b")]))
                                 (\ ex_76 ->
                                    case ex_76 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_77,
                                                    _]) ->
                                        payload_77
                                      (ErlangTuple [(ErlangAtom "error"), payload_78,
                                                    stack_79]) ->
                                        let
                                          tup_el_81 =
                                            (ErlangTuple [payload_78, stack_79])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_81])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_84,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_84])
                                      ex_76 -> (EXC.raise ex_76)))
                          in
                            case match_expr_87 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                        (ErlangAtom "b")]),
                                                          _])]) ->
                                let
                                  match_expr_108 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let   
                                            arg_93 =
                                              (erlps__id__1 [(ErlangAtom "a")])
                                          in let arg_95 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__update_with__3"
                                               [(ErlangCons (ErlangAtom "a")
                                                   (ErlangCons (ErlangAtom "b")
                                                      ErlangEmptyList)),
                                                arg_93, arg_95]))
                                       (\ ex_97 ->
                                          case ex_97 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_98, _]) ->
                                              payload_98
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_99,
                                                          stack_100]) ->
                                              let
                                                tup_el_102 =
                                                  (ErlangTuple
                                                     [payload_99, stack_100])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_102])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_105, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_105])
                                            ex_97 -> (EXC.raise ex_97)))
                                in
                                  case match_expr_108 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangAtom "badarg"),
                                                                _])]) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_108)
                              _ -> (EXC.badmatch match_expr_87)
                        _ -> (EXC.badmatch match_expr_66)
                  _ -> (EXC.badmatch match_expr_59)
            _ -> (EXC.badmatch match_expr_49)
      _ -> (EXC.badmatch match_expr_39)
erlps__t_update_with_4__1 [arg_109] = (EXC.function_clause unit)
erlps__t_update_with_4__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_get_3__1 :: ErlangFun
erlps__t_get_3__1 [config_0] | (isEList config_0) =
  let   
    map_5 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "key1") (ErlangAtom "value1")),
             (Tup.Tuple (ErlangAtom "key2") (ErlangAtom "value2"))]))
  in let defaultvalue_6 = (make_string "Default value")
  in let
    match_expr_10 =
      (BIF.do_remote_fun_call "Maps" "erlps__get__3"
         [(ErlangAtom "key1"), map_5, defaultvalue_6])
  in
    case match_expr_10 of
      (ErlangAtom "value1") ->
        let
          match_expr_14 =
            (BIF.do_remote_fun_call "Maps" "erlps__get__3"
               [(ErlangAtom "key2"), map_5, defaultvalue_6])
        in
          case match_expr_14 of
            (ErlangAtom "value2") ->
              let
                match_expr_19 =
                  (BIF.do_remote_fun_call "Maps" "erlps__get__3"
                     [(ErlangAtom "key3"), map_5, defaultvalue_6])
              in
                case match_expr_19 of
                  defaultvalue_18 | (defaultvalue_18 == defaultvalue_6) ->
                    let
                      match_expr_40 =
                        (EXC.tryCatch
                           (\ _ ->
                              let arg_25 = (erlps__id__1 [(ErlangAtom "a")])
                              in
                                (BIF.do_remote_fun_call "Maps" "erlps__get__3"
                                   [(ErlangCons (ErlangAtom "a")
                                       (ErlangCons (ErlangAtom "b")
                                          ErlangEmptyList)),
                                    arg_25, (ErlangAtom "def")]))
                           (\ ex_29 ->
                              case ex_29 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_30, _]) ->
                                  payload_30
                                (ErlangTuple [(ErlangAtom "error"), payload_31,
                                              stack_32]) ->
                                  let
                                    tup_el_34 =
                                      (ErlangTuple [payload_31, stack_32])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_34])
                                (ErlangTuple [(ErlangAtom "exit"), payload_37, _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_37])
                                ex_29 -> (EXC.raise ex_29)))
                    in
                      case match_expr_40 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangAtom "a")]),
                                                    _])]) ->
                          (ErlangAtom "ok")
                        _ -> (EXC.badmatch match_expr_40)
                  _ -> (EXC.badmatch match_expr_19)
            _ -> (EXC.badmatch match_expr_14)
      _ -> (EXC.badmatch match_expr_10)
erlps__t_get_3__1 [arg_41] = (EXC.function_clause unit)
erlps__t_get_3__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_without_2__1 :: ErlangFun
erlps__t_without_2__1 [_config_0] =
  let   
    lc_src_21 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 100)])
  in let
    arg_20 =
      (flmap
         (\ lc_25 ->
            case lc_25 of
              i_24 ->
                let    tup_el_27 = (ErlangTuple [(ErlangAtom "k"), i_24])
                in let tup_el_30 = (ErlangTuple [(ErlangAtom "v"), i_24])
                in let lc_ret_26 = (ErlangTuple [tup_el_27, tup_el_30])
                in (ErlangCons lc_ret_26 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_21)
  in let m0_33 = (BIF.maps__from_list__1 [arg_20])
  in let
    lop_36 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 100)])
  in let
    lc_src_35 =
      (BIF.erlang__op_unAppend
         [lop_36,
          (ErlangCons (ErlangInt 11)
             (ErlangCons (ErlangInt 22)
                (ErlangCons (ErlangInt 33)
                   (ErlangCons (ErlangInt 44)
                      (ErlangCons (ErlangInt 55)
                         (ErlangCons (ErlangInt 66)
                            (ErlangCons (ErlangInt 77)
                               (ErlangCons (ErlangInt 88)
                                  (ErlangCons (ErlangInt 99)
                                     ErlangEmptyList)))))))))])
  in let
    arg_34 =
      (flmap
         (\ lc_41 ->
            case lc_41 of
              i_40 ->
                let    tup_el_43 = (ErlangTuple [(ErlangAtom "k"), i_40])
                in let tup_el_46 = (ErlangTuple [(ErlangAtom "v"), i_40])
                in let lc_ret_42 = (ErlangTuple [tup_el_43, tup_el_46])
                in (ErlangCons lc_ret_42 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_35)
  in let m1_49 = (BIF.maps__from_list__1 [arg_34])
  in let
    arg_50 =
      (flmap
         (\ lc_53 ->
            case lc_53 of
              i_52 ->
                let lc_ret_54 = (ErlangTuple [(ErlangAtom "k"), i_52])
                in (ErlangCons lc_ret_54 ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons (ErlangInt 11)
            (ErlangCons (ErlangInt 22)
               (ErlangCons (ErlangInt 33)
                  (ErlangCons (ErlangInt 44)
                     (ErlangCons (ErlangInt 55)
                        (ErlangCons (ErlangInt 66)
                           (ErlangCons (ErlangInt 77)
                              (ErlangCons (ErlangInt 88)
                                 (ErlangCons (ErlangInt 99)
                                    ErlangEmptyList))))))))))
  in let
    match_expr_59 = (BIF.do_remote_fun_call "Maps" "erlps__without__2" [arg_50, m0_33])
  in
    case match_expr_59 of
      m1_58 | (m1_58 == m1_49) ->
        let
          match_expr_79 =
            (EXC.tryCatch
               (\ _ ->
                  let arg_65 = (erlps__id__1 [(ErlangAtom "a")])
                  in
                    (BIF.do_remote_fun_call "Maps" "erlps__without__2"
                       [(ErlangCons (ErlangAtom "a")
                           (ErlangCons (ErlangAtom "b") ErlangEmptyList)),
                        arg_65]))
               (\ ex_68 ->
                  case ex_68 of
                    (ErlangTuple [(ErlangAtom "throw"), payload_69, _]) -> payload_69
                    (ErlangTuple [(ErlangAtom "error"), payload_70, stack_71]) ->
                      let tup_el_73 = (ErlangTuple [payload_70, stack_71])
                      in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_73])
                    (ErlangTuple [(ErlangAtom "exit"), payload_76, _]) ->
                      (ErlangTuple [(ErlangAtom "EXIT"), payload_76])
                    ex_68 -> (EXC.raise ex_68)))
        in
          case match_expr_79 of
            (ErlangTuple [(ErlangAtom "EXIT"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                      (ErlangAtom "a")]),
                                        _])]) ->
              let
                match_expr_97 =
                  (EXC.tryCatch
                     (\ _ ->
                        let   
                          arg_80 =
                            (ErlangTuple [(ErlangAtom "a"), (ErlangAtom "b")])
                        in let arg_83 = (erlps__id__1 [(ErlangAtom "a")])
                        in (BIF.do_remote_fun_call "Maps" "erlps__without__2" [arg_80, arg_83]))
                     (\ ex_86 ->
                        case ex_86 of
                          (ErlangTuple [(ErlangAtom "throw"), payload_87, _]) ->
                            payload_87
                          (ErlangTuple [(ErlangAtom "error"), payload_88,
                                        stack_89]) ->
                            let tup_el_91 = (ErlangTuple [payload_88, stack_89])
                            in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_91])
                          (ErlangTuple [(ErlangAtom "exit"), payload_94, _]) ->
                            (ErlangTuple [(ErlangAtom "EXIT"), payload_94])
                          ex_86 -> (EXC.raise ex_86)))
              in
                case match_expr_97 of
                  (ErlangTuple [(ErlangAtom "EXIT"),
                                (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                            (ErlangAtom "a")]),
                                              _])]) ->
                    let
                      match_expr_116 =
                        (EXC.tryCatch
                           (\ _ ->
                              let    tup_el_101 = (ErlangBinary (BIN.concat []))
                              in let
                                arg_99 =
                                  (ErlangTuple
                                     [(ErlangInt 0), tup_el_101,
                                      (ErlangInt 97)])
                              in
                                (BIF.do_remote_fun_call "Maps" "erlps__without__2"
                                   [ErlangEmptyList, arg_99]))
                           (\ ex_104 ->
                              case ex_104 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_105,
                                              _]) ->
                                  payload_105
                                (ErlangTuple [(ErlangAtom "error"), payload_106,
                                              stack_107]) ->
                                  let
                                    tup_el_109 =
                                      (ErlangTuple [payload_106, stack_107])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_109])
                                (ErlangTuple [(ErlangAtom "exit"), payload_112,
                                              _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_112])
                                ex_104 -> (EXC.raise ex_104)))
                    in
                      case match_expr_116 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangTuple [(ErlangInt 0),
                                                                                (ErlangBinary bin_e_115),
                                                                                (ErlangInt 97)])]),
                                                    _])]) | (BIN.empty
                                                               bin_e_115) ->
                          let
                            match_expr_143 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      tail_120 =
                                        (BIF.erlang__op_neg [(ErlangInt 20)])
                                    in let
                                      tail_123 =
                                        (BIF.erlang__op_neg [(ErlangInt 8)])
                                    in let
                                      tup_el_128 =
                                        (ErlangBinary (BIN.concat []))
                                    in let
                                      arg_126 =
                                        (ErlangTuple
                                           [(ErlangInt 0), tup_el_128,
                                            (ErlangInt 97)])
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__without__2"
                                         [(ErlangCons (ErlangAtom "false")
                                             (ErlangCons tail_120
                                                (ErlangCons tail_123
                                                   ErlangEmptyList))),
                                          arg_126]))
                                 (\ ex_131 ->
                                    case ex_131 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_132,
                                                    _]) ->
                                        payload_132
                                      (ErlangTuple [(ErlangAtom "error"), payload_133,
                                                    stack_134]) ->
                                        let
                                          tup_el_136 =
                                            (ErlangTuple
                                               [payload_133, stack_134])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_136])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_139,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_139])
                                      ex_131 -> (EXC.raise ex_131)))
                          in
                            case match_expr_143 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                        (ErlangTuple [(ErlangInt 0),
                                                                                      (ErlangBinary bin_e_142),
                                                                                      (ErlangInt 97)])]),
                                                          _])]) | (BIN.empty
                                                                     bin_e_142) ->
                                let
                                  match_expr_158 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let arg_145 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__without__2"
                                               [(ErlangAtom "a"), arg_145]))
                                       (\ ex_147 ->
                                          case ex_147 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_148, _]) ->
                                              payload_148
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_149,
                                                          stack_150]) ->
                                              let
                                                tup_el_152 =
                                                  (ErlangTuple
                                                     [payload_149, stack_150])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_152])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_155, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_155])
                                            ex_147 -> (EXC.raise ex_147)))
                                in
                                  case match_expr_158 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangAtom "badarg"),
                                                                _])]) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_158)
                              _ -> (EXC.badmatch match_expr_143)
                        _ -> (EXC.badmatch match_expr_116)
                  _ -> (EXC.badmatch match_expr_97)
            _ -> (EXC.badmatch match_expr_79)
      _ -> (EXC.badmatch match_expr_59)
erlps__t_without_2__1 [arg_159] = (EXC.function_clause unit)
erlps__t_without_2__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_with_2__1 :: ErlangFun
erlps__t_with_2__1 [_config_0] =
  let   
    lc_src_21 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 100)])
  in let
    arg_20 =
      (flmap
         (\ lc_25 ->
            case lc_25 of
              i_24 ->
                let    tup_el_27 = (ErlangTuple [(ErlangAtom "k"), i_24])
                in let tup_el_30 = (ErlangTuple [(ErlangAtom "v"), i_24])
                in let lc_ret_26 = (ErlangTuple [tup_el_27, tup_el_30])
                in (ErlangCons lc_ret_26 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_21)
  in let m0_33 = (BIF.maps__from_list__1 [arg_20])
  in let
    arg_34 =
      (flmap
         (\ lc_37 ->
            case lc_37 of
              i_36 ->
                let    tup_el_39 = (ErlangTuple [(ErlangAtom "k"), i_36])
                in let tup_el_42 = (ErlangTuple [(ErlangAtom "v"), i_36])
                in let lc_ret_38 = (ErlangTuple [tup_el_39, tup_el_42])
                in (ErlangCons lc_ret_38 ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons (ErlangInt 11)
            (ErlangCons (ErlangInt 22)
               (ErlangCons (ErlangInt 33)
                  (ErlangCons (ErlangInt 44)
                     (ErlangCons (ErlangInt 55)
                        (ErlangCons (ErlangInt 66)
                           (ErlangCons (ErlangInt 77)
                              (ErlangCons (ErlangInt 88)
                                 (ErlangCons (ErlangInt 99)
                                    ErlangEmptyList))))))))))
  in let m1_45 = (BIF.maps__from_list__1 [arg_34])
  in let
    arg_46 =
      (flmap
         (\ lc_49 ->
            case lc_49 of
              i_48 ->
                let lc_ret_50 = (ErlangTuple [(ErlangAtom "k"), i_48])
                in (ErlangCons lc_ret_50 ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons (ErlangInt 11)
            (ErlangCons (ErlangInt 22)
               (ErlangCons (ErlangInt 33)
                  (ErlangCons (ErlangInt 44)
                     (ErlangCons (ErlangInt 55)
                        (ErlangCons (ErlangInt 66)
                           (ErlangCons (ErlangInt 77)
                              (ErlangCons (ErlangInt 88)
                                 (ErlangCons (ErlangInt 99)
                                    ErlangEmptyList))))))))))
  in let
    match_expr_55 = (BIF.do_remote_fun_call "Maps" "erlps__with__2" [arg_46, m0_33])
  in
    case match_expr_55 of
      m1_54 | (m1_54 == m1_45) ->
        let
          match_expr_75 =
            (EXC.tryCatch
               (\ _ ->
                  let arg_61 = (erlps__id__1 [(ErlangAtom "a")])
                  in
                    (BIF.do_remote_fun_call "Maps" "erlps__with__2"
                       [(ErlangCons (ErlangAtom "a")
                           (ErlangCons (ErlangAtom "b") ErlangEmptyList)),
                        arg_61]))
               (\ ex_64 ->
                  case ex_64 of
                    (ErlangTuple [(ErlangAtom "throw"), payload_65, _]) -> payload_65
                    (ErlangTuple [(ErlangAtom "error"), payload_66, stack_67]) ->
                      let tup_el_69 = (ErlangTuple [payload_66, stack_67])
                      in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_69])
                    (ErlangTuple [(ErlangAtom "exit"), payload_72, _]) ->
                      (ErlangTuple [(ErlangAtom "EXIT"), payload_72])
                    ex_64 -> (EXC.raise ex_64)))
        in
          case match_expr_75 of
            (ErlangTuple [(ErlangAtom "EXIT"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                      (ErlangAtom "a")]),
                                        _])]) ->
              let
                match_expr_93 =
                  (EXC.tryCatch
                     (\ _ ->
                        let   
                          arg_76 =
                            (ErlangTuple [(ErlangAtom "a"), (ErlangAtom "b")])
                        in let arg_79 = (erlps__id__1 [(ErlangAtom "a")])
                        in (BIF.do_remote_fun_call "Maps" "erlps__with__2" [arg_76, arg_79]))
                     (\ ex_82 ->
                        case ex_82 of
                          (ErlangTuple [(ErlangAtom "throw"), payload_83, _]) ->
                            payload_83
                          (ErlangTuple [(ErlangAtom "error"), payload_84,
                                        stack_85]) ->
                            let tup_el_87 = (ErlangTuple [payload_84, stack_85])
                            in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_87])
                          (ErlangTuple [(ErlangAtom "exit"), payload_90, _]) ->
                            (ErlangTuple [(ErlangAtom "EXIT"), payload_90])
                          ex_82 -> (EXC.raise ex_82)))
              in
                case match_expr_93 of
                  (ErlangTuple [(ErlangAtom "EXIT"),
                                (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                            (ErlangAtom "a")]),
                                              _])]) ->
                    let
                      match_expr_112 =
                        (EXC.tryCatch
                           (\ _ ->
                              let    tup_el_97 = (ErlangBinary (BIN.concat []))
                              in let
                                arg_95 =
                                  (ErlangTuple
                                     [(ErlangInt 0), tup_el_97, (ErlangInt 97)])
                              in
                                (BIF.do_remote_fun_call "Maps" "erlps__with__2"
                                   [ErlangEmptyList, arg_95]))
                           (\ ex_100 ->
                              case ex_100 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_101,
                                              _]) ->
                                  payload_101
                                (ErlangTuple [(ErlangAtom "error"), payload_102,
                                              stack_103]) ->
                                  let
                                    tup_el_105 =
                                      (ErlangTuple [payload_102, stack_103])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_105])
                                (ErlangTuple [(ErlangAtom "exit"), payload_108,
                                              _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_108])
                                ex_100 -> (EXC.raise ex_100)))
                    in
                      case match_expr_112 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangTuple [(ErlangInt 0),
                                                                                (ErlangBinary bin_e_111),
                                                                                (ErlangInt 97)])]),
                                                    _])]) | (BIN.empty
                                                               bin_e_111) ->
                          let
                            match_expr_139 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      tail_116 =
                                        (BIF.erlang__op_neg [(ErlangInt 20)])
                                    in let
                                      tail_119 =
                                        (BIF.erlang__op_neg [(ErlangInt 8)])
                                    in let
                                      tup_el_124 =
                                        (ErlangBinary (BIN.concat []))
                                    in let
                                      arg_122 =
                                        (ErlangTuple
                                           [(ErlangInt 0), tup_el_124,
                                            (ErlangInt 97)])
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__with__2"
                                         [(ErlangCons (ErlangAtom "false")
                                             (ErlangCons tail_116
                                                (ErlangCons tail_119
                                                   ErlangEmptyList))),
                                          arg_122]))
                                 (\ ex_127 ->
                                    case ex_127 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_128,
                                                    _]) ->
                                        payload_128
                                      (ErlangTuple [(ErlangAtom "error"), payload_129,
                                                    stack_130]) ->
                                        let
                                          tup_el_132 =
                                            (ErlangTuple
                                               [payload_129, stack_130])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_132])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_135,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_135])
                                      ex_127 -> (EXC.raise ex_127)))
                          in
                            case match_expr_139 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                        (ErlangTuple [(ErlangInt 0),
                                                                                      (ErlangBinary bin_e_138),
                                                                                      (ErlangInt 97)])]),
                                                          _])]) | (BIN.empty
                                                                     bin_e_138) ->
                                let
                                  match_expr_154 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let arg_141 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__with__2"
                                               [(ErlangAtom "a"), arg_141]))
                                       (\ ex_143 ->
                                          case ex_143 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_144, _]) ->
                                              payload_144
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_145,
                                                          stack_146]) ->
                                              let
                                                tup_el_148 =
                                                  (ErlangTuple
                                                     [payload_145, stack_146])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_148])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_151, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_151])
                                            ex_143 -> (EXC.raise ex_143)))
                                in
                                  case match_expr_154 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangAtom "badarg"),
                                                                _])]) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_154)
                              _ -> (EXC.badmatch match_expr_139)
                        _ -> (EXC.badmatch match_expr_112)
                  _ -> (EXC.badmatch match_expr_93)
            _ -> (EXC.badmatch match_expr_75)
      _ -> (EXC.badmatch match_expr_55)
erlps__t_with_2__1 [arg_155] = (EXC.function_clause unit)
erlps__t_with_2__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_filter_2__1 :: ErlangFun
erlps__t_filter_2__1 [config_0] | (isEList config_0) =
  let    key_4 = (make_string "a")
  in let key_5 = (make_string "b")
  in let key_6 = (make_string "c")
  in let
    m_13 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "a") (ErlangInt 2)),
             (Tup.Tuple (ErlangAtom "b") (ErlangInt 3)),
             (Tup.Tuple (ErlangAtom "c") (ErlangInt 4)),
             (Tup.Tuple key_4 (ErlangInt 1)), (Tup.Tuple key_5 (ErlangInt 2)),
             (Tup.Tuple key_6 (ErlangInt 4))]))
  in let
    pred1_26 =
      (ErlangFun 2
         let
           lambda_14 [k_17, v_18] =
             let    lop_19 = (BIF.erlang__is_atom__1 [k_17])
             in let lop_22 = (BIF.erlang__op_rem_strict [v_18, (ErlangInt 2)])
             in let rop_21 = (BIF.erlang__op_exactEq [lop_22, (ErlangInt 0)])
             in (BIF.erlang__op_andalso [lop_19, rop_21])
           lambda_14 [arg_15, arg_16] = (EXC.function_clause unit)
           lambda_14 args = (EXC.badarity (ErlangFun 2 lambda_14) args)
         in lambda_14)
  in let
    pred2_39 =
      (ErlangFun 2
         let
           lambda_27 [k_30, v_31] =
             let    lop_32 = (BIF.erlang__is_list__1 [k_30])
             in let lop_35 = (BIF.erlang__op_rem_strict [v_31, (ErlangInt 2)])
             in let rop_34 = (BIF.erlang__op_exactEq [lop_35, (ErlangInt 0)])
             in (BIF.erlang__op_andalso [lop_32, rop_34])
           lambda_27 [arg_28, arg_29] = (EXC.function_clause unit)
           lambda_27 args = (EXC.badarity (ErlangFun 2 lambda_27) args)
         in lambda_27)
  in let
    match_expr_43 = (BIF.do_remote_fun_call "Maps" "erlps__filter__2" [pred1_26, m_13])
  in
    case match_expr_43 of
      (ErlangMap map_42) | (DM.Just (ErlangInt 4)) <-
                             ((Map.lookup (ErlangAtom "c") map_42))
                         , (DM.Just (ErlangInt 2)) <-
                             ((Map.lookup (ErlangAtom "a") map_42)) ->
        let match_expr_47 = (BIF.do_remote_fun_call "Maps" "erlps__filter__2" [pred2_39, m_13])
        in
          case match_expr_47 of
            (ErlangMap map_46) | (DM.Just (ErlangInt 4)) <-
                                   ((Map.lookup (make_string "c") map_46))
                               , (DM.Just (ErlangInt 2)) <-
                                   ((Map.lookup (make_string "b") map_46)) ->
              let    arg_49 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m_13])
              in let
                match_expr_52 = (BIF.do_remote_fun_call "Maps" "erlps__filter__2" [pred1_26, arg_49])
              in
                case match_expr_52 of
                  (ErlangMap map_51) | (DM.Just (ErlangInt 4)) <-
                                         ((Map.lookup (ErlangAtom "c") map_51))
                                     , (DM.Just (ErlangInt 2)) <-
                                         ((Map.lookup (ErlangAtom "a") map_51)) ->
                    let    arg_54 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m_13])
                    in let
                      match_expr_57 =
                        (BIF.do_remote_fun_call "Maps" "erlps__filter__2" [pred2_39, arg_54])
                    in
                      case match_expr_57 of
                        (ErlangMap map_56) | (DM.Just (ErlangInt 4)) <-
                                               ((Map.lookup (make_string "c")
                                                   map_56))
                                           , (DM.Just (ErlangInt 2)) <-
                                               ((Map.lookup (make_string "b")
                                                   map_56)) ->
                          let
                            match_expr_76 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      arg_58 =
                                        (ErlangFun 2
                                           let
                                             lambda_59 [_, _] = (ErlangAtom "ok")
                                             lambda_59 [arg_60, arg_61] =
                                               (EXC.function_clause unit)
                                             lambda_59 args =
                                               (EXC.badarity
                                                  (ErlangFun 2 lambda_59) args)
                                           in lambda_59)
                                    in let
                                      arg_62 = (erlps__id__1 [(ErlangAtom "a")])
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__filter__2"
                                         [arg_58, arg_62]))
                                 (\ ex_65 ->
                                    case ex_65 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_66,
                                                    _]) ->
                                        payload_66
                                      (ErlangTuple [(ErlangAtom "error"), payload_67,
                                                    stack_68]) ->
                                        let
                                          tup_el_70 =
                                            (ErlangTuple [payload_67, stack_68])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_70])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_73,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_73])
                                      ex_65 -> (EXC.raise ex_65)))
                          in
                            case match_expr_76 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                        (ErlangAtom "a")]),
                                                          _])]) ->
                                let
                                  match_expr_92 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let   
                                            arg_78 =
                                              (ErlangBinary (BIN.concat []))
                                          in let
                                            arg_77 = (erlps__id__1 [arg_78])
                                          in let arg_79 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__filter__2"
                                               [arg_77, arg_79]))
                                       (\ ex_81 ->
                                          case ex_81 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_82, _]) ->
                                              payload_82
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_83,
                                                          stack_84]) ->
                                              let
                                                tup_el_86 =
                                                  (ErlangTuple
                                                     [payload_83, stack_84])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_86])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_89, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_89])
                                            ex_81 -> (EXC.raise ex_81)))
                                in
                                  case match_expr_92 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangAtom "badarg"),
                                                                _])]) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_92)
                              _ -> (EXC.badmatch match_expr_76)
                        _ -> (EXC.badmatch match_expr_57)
                  _ -> (EXC.badmatch match_expr_52)
            _ -> (EXC.badmatch match_expr_47)
      _ -> (EXC.badmatch match_expr_43)
erlps__t_filter_2__1 [arg_93] = (EXC.function_clause unit)
erlps__t_filter_2__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_fold_3__1 :: ErlangFun
erlps__t_fold_3__1 [config_0] | (isEList config_0) =
  let   
    vs_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 200)])
  in let
    arg_4 =
      (flmap
         (\ lc_7 ->
            case lc_7 of
              i_6 ->
                let    tup_el_9 = (ErlangTuple [(ErlangAtom "k"), i_6])
                in let lc_ret_8 = (ErlangTuple [tup_el_9, i_6])
                in (ErlangCons lc_ret_8 ErlangEmptyList)
              _ -> ErlangEmptyList)
         vs_3)
  in let m0_13 = (BIF.maps__from_list__1 [arg_4])
  in
    case m0_13 of
      (ErlangMap map_14) | (DM.Just (ErlangInt 200)) <-
                             ((Map.lookup
                                 (ErlangTuple [(ErlangAtom "k"), (ErlangInt 200)])
                                 map_14))
                         , (DM.Just (ErlangInt 1)) <-
                             ((Map.lookup
                                 (ErlangTuple [(ErlangAtom "k"), (ErlangInt 1)])
                                 map_14)) ->
        let    tot0_21 = (BIF.do_remote_fun_call "Lists" "erlps__sum__1" [vs_3])
        in let
          arg_22 =
            (ErlangFun 3
               let
                 lambda_23 [(ErlangTuple [(ErlangAtom "k"), _]), v_27, a_28] =
                   (BIF.erlang__op_plus [a_28, v_27])
                 lambda_23 [arg_24, arg_25, arg_26] = (EXC.function_clause unit)
                 lambda_23 args = (EXC.badarity (ErlangFun 3 lambda_23) args)
               in lambda_23)
        in let
          tot1_33 =
            (BIF.do_remote_fun_call "Maps" "erlps__fold__3" [arg_22, (ErlangInt 0), m0_13])
        in let
          match_expr_36 = (BIF.erlang__op_exactEq [tot0_21, tot1_33])
        in
          case match_expr_36 of
            (ErlangAtom "true") ->
              let   
                arg_37 =
                  (ErlangFun 3
                     let
                       lambda_38 [(ErlangTuple [(ErlangAtom "k"), _]), v_42, a_43]
                         =
                         (BIF.erlang__op_plus [a_43, v_42])
                       lambda_38 [arg_39, arg_40, arg_41] =
                         (EXC.function_clause unit)
                       lambda_38 args =
                         (EXC.badarity (ErlangFun 3 lambda_38) args)
                     in lambda_38)
              in let arg_47 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m0_13])
              in let
                tot2_49 =
                  (BIF.do_remote_fun_call "Maps" "erlps__fold__3" [arg_37, (ErlangInt 0), arg_47])
              in let
                match_expr_52 = (BIF.erlang__op_exactEq [tot0_21, tot2_49])
              in
                case match_expr_52 of
                  (ErlangAtom "true") ->
                    let
                      match_expr_73 =
                        (EXC.tryCatch
                           (\ _ ->
                              let   
                                arg_53 =
                                  (ErlangFun 3
                                     let
                                       lambda_54 [_, _, _] = (ErlangAtom "ok")
                                       lambda_54 [arg_55, arg_56, arg_57] =
                                         (EXC.function_clause unit)
                                       lambda_54 args =
                                         (EXC.badarity (ErlangFun 3 lambda_54)
                                            args)
                                     in lambda_54)
                              in let arg_59 = (erlps__id__1 [(ErlangAtom "a")])
                              in
                                (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
                                   [arg_53, (ErlangInt 0), arg_59]))
                           (\ ex_62 ->
                              case ex_62 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_63, _]) ->
                                  payload_63
                                (ErlangTuple [(ErlangAtom "error"), payload_64,
                                              stack_65]) ->
                                  let
                                    tup_el_67 =
                                      (ErlangTuple [payload_64, stack_65])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_67])
                                (ErlangTuple [(ErlangAtom "exit"), payload_70, _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_70])
                                ex_62 -> (EXC.raise ex_62)))
                    in
                      case match_expr_73 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangAtom "a")]),
                                                    _])]) ->
                          let
                            match_expr_90 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      arg_75 = (ErlangBinary (BIN.concat []))
                                    in let arg_74 = (erlps__id__1 [arg_75])
                                    in let arg_77 = (ErlangMap Map.empty)
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
                                         [arg_74, (ErlangInt 0), arg_77]))
                                 (\ ex_79 ->
                                    case ex_79 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_80,
                                                    _]) ->
                                        payload_80
                                      (ErlangTuple [(ErlangAtom "error"), payload_81,
                                                    stack_82]) ->
                                        let
                                          tup_el_84 =
                                            (ErlangTuple [payload_81, stack_82])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_84])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_87,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_87])
                                      ex_79 -> (EXC.raise ex_79)))
                          in
                            case match_expr_90 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangAtom "badarg"),
                                                          _])]) ->
                                (ErlangAtom "ok")
                              _ -> (EXC.badmatch match_expr_90)
                        _ -> (EXC.badmatch match_expr_73)
                  _ -> (EXC.badmatch match_expr_52)
            _ -> (EXC.badmatch match_expr_36)
      _ -> (EXC.badmatch m0_13)
erlps__t_fold_3__1 [arg_91] = (EXC.function_clause unit)
erlps__t_fold_3__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_map_2__1 :: ErlangFun
erlps__t_map_2__1 [config_0] | (isEList config_0) =
  let   
    vs_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 200)])
  in let
    arg_4 =
      (flmap
         (\ lc_7 ->
            case lc_7 of
              i_6 ->
                let    tup_el_9 = (ErlangTuple [(ErlangAtom "k"), i_6])
                in let lc_ret_8 = (ErlangTuple [tup_el_9, i_6])
                in (ErlangCons lc_ret_8 ErlangEmptyList)
              _ -> ErlangEmptyList)
         vs_3)
  in let m0_13 = (BIF.maps__from_list__1 [arg_4])
  in
    case m0_13 of
      (ErlangMap map_14) | (DM.Just (ErlangInt 200)) <-
                             ((Map.lookup
                                 (ErlangTuple [(ErlangAtom "k"), (ErlangInt 200)])
                                 map_14))
                         , (DM.Just (ErlangInt 1)) <-
                             ((Map.lookup
                                 (ErlangTuple [(ErlangAtom "k"), (ErlangInt 1)])
                                 map_14)) ->
        let   
          arg_20 =
            (ErlangFun 2
               let
                 lambda_21 [(ErlangTuple [(ErlangAtom "k"), _]), v_24] =
                   (BIF.erlang__op_plus [v_24, (ErlangInt 42)])
                 lambda_21 [arg_22, arg_23] = (EXC.function_clause unit)
                 lambda_21 args = (EXC.badarity (ErlangFun 2 lambda_21) args)
               in lambda_21)
        in let m1_28 = (BIF.do_remote_fun_call "Maps" "erlps__map__2" [arg_20, m0_13])
        in
          case m1_28 of
            (ErlangMap map_29) | (DM.Just (ErlangInt 242)) <-
                                   ((Map.lookup
                                       (ErlangTuple
                                          [(ErlangAtom "k"), (ErlangInt 200)])
                                       map_29))
                               , (DM.Just (ErlangInt 43)) <-
                                   ((Map.lookup
                                       (ErlangTuple
                                          [(ErlangAtom "k"), (ErlangInt 1)])
                                       map_29)) ->
              let   
                arg_35 =
                  (ErlangFun 2
                     let
                       lambda_36 [(ErlangTuple [(ErlangAtom "k"), _]), v_39] =
                         (BIF.erlang__op_plus [v_39, (ErlangInt 42)])
                       lambda_36 [arg_37, arg_38] = (EXC.function_clause unit)
                       lambda_36 args =
                         (EXC.badarity (ErlangFun 2 lambda_36) args)
                     in lambda_36)
              in let arg_42 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m0_13])
              in let m2_44 = (BIF.do_remote_fun_call "Maps" "erlps__map__2" [arg_35, arg_42])
              in
                case m2_44 of
                  (ErlangMap map_45) | (DM.Just (ErlangInt 242)) <-
                                         ((Map.lookup
                                             (ErlangTuple
                                                [(ErlangAtom "k"),
                                                 (ErlangInt 200)])
                                             map_45))
                                     , (DM.Just (ErlangInt 43)) <-
                                         ((Map.lookup
                                             (ErlangTuple
                                                [(ErlangAtom "k"), (ErlangInt 1)])
                                             map_45)) ->
                    let
                      match_expr_69 =
                        (EXC.tryCatch
                           (\ _ ->
                              let   
                                arg_51 =
                                  (ErlangFun 2
                                     let
                                       lambda_52 [_, _] = (ErlangAtom "ok")
                                       lambda_52 [arg_53, arg_54] =
                                         (EXC.function_clause unit)
                                       lambda_52 args =
                                         (EXC.badarity (ErlangFun 2 lambda_52)
                                            args)
                                     in lambda_52)
                              in let arg_55 = (erlps__id__1 [(ErlangAtom "a")])
                              in (BIF.do_remote_fun_call "Maps" "erlps__map__2" [arg_51, arg_55]))
                           (\ ex_58 ->
                              case ex_58 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_59, _]) ->
                                  payload_59
                                (ErlangTuple [(ErlangAtom "error"), payload_60,
                                              stack_61]) ->
                                  let
                                    tup_el_63 =
                                      (ErlangTuple [payload_60, stack_61])
                                  in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_63])
                                (ErlangTuple [(ErlangAtom "exit"), payload_66, _]) ->
                                  (ErlangTuple [(ErlangAtom "EXIT"), payload_66])
                                ex_58 -> (EXC.raise ex_58)))
                    in
                      case match_expr_69 of
                        (ErlangTuple [(ErlangAtom "EXIT"),
                                      (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                  (ErlangAtom "a")]),
                                                    _])]) ->
                          let
                            match_expr_85 =
                              (EXC.tryCatch
                                 (\ _ ->
                                    let   
                                      arg_71 = (ErlangBinary (BIN.concat []))
                                    in let arg_70 = (erlps__id__1 [arg_71])
                                    in let arg_72 = (ErlangMap Map.empty)
                                    in
                                      (BIF.do_remote_fun_call "Maps" "erlps__map__2"
                                         [arg_70, arg_72]))
                                 (\ ex_74 ->
                                    case ex_74 of
                                      (ErlangTuple [(ErlangAtom "throw"), payload_75,
                                                    _]) ->
                                        payload_75
                                      (ErlangTuple [(ErlangAtom "error"), payload_76,
                                                    stack_77]) ->
                                        let
                                          tup_el_79 =
                                            (ErlangTuple [payload_76, stack_77])
                                        in
                                          (ErlangTuple
                                             [(ErlangAtom "EXIT"), tup_el_79])
                                      (ErlangTuple [(ErlangAtom "exit"), payload_82,
                                                    _]) ->
                                        (ErlangTuple
                                           [(ErlangAtom "EXIT"), payload_82])
                                      ex_74 -> (EXC.raise ex_74)))
                          in
                            case match_expr_85 of
                              (ErlangTuple [(ErlangAtom "EXIT"),
                                            (ErlangTuple [(ErlangAtom "badarg"),
                                                          _])]) ->
                                (ErlangAtom "ok")
                              _ -> (EXC.badmatch match_expr_85)
                        _ -> (EXC.badmatch match_expr_69)
                  _ -> (EXC.badmatch m2_44)
            _ -> (EXC.badmatch m1_28)
      _ -> (EXC.badmatch m0_13)
erlps__t_map_2__1 [arg_86] = (EXC.function_clause unit)
erlps__t_map_2__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_iterator_1__1 :: ErlangFun
erlps__t_iterator_1__1 [config_0] | (isEList config_0) =
  let   
    m0_5 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "a") (ErlangInt 1)),
             (Tup.Tuple (ErlangAtom "b") (ErlangInt 2))]))
  in let i0_7 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m0_5])
  in let match_expr_12 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i0_7])
  in
    case match_expr_12 of
      (ErlangTuple [k1_9, v1_10, i1_11]) ->
        let match_expr_17 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i1_11])
        in
          case match_expr_17 of
            (ErlangTuple [k2_14, v2_15, i2_16]) ->
              let match_expr_19 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i2_16])
              in
                case match_expr_19 of
                  (ErlangAtom "none") ->
                    let    tail_21 = (ErlangTuple [k1_9, v1_10])
                    in let tail_25 = (ErlangTuple [k2_14, v2_15])
                    in let
                      kvlist_29 =
                        (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                           [(ErlangCons tail_21
                               (ErlangCons tail_25 ErlangEmptyList))])
                    in let arg_30 = (BIF.maps__to_list__1 [m0_5])
                    in let match_expr_33 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_30])
                    in
                      case match_expr_33 of
                        kvlist_32 | (kvlist_32 == kvlist_29) ->
                          let   
                            vs2_36 =
                              (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                 [(ErlangInt 1), (ErlangInt 200)])
                          in let
                            arg_37 =
                              (flmap
                                 (\ lc_40 ->
                                    case lc_40 of
                                      i_39 ->
                                        let   
                                          tup_el_42 =
                                            (ErlangTuple [(ErlangAtom "k"), i_39])
                                        in let
                                          lc_ret_41 =
                                            (ErlangTuple [tup_el_42, i_39])
                                        in
                                          (ErlangCons lc_ret_41 ErlangEmptyList)
                                      _ -> ErlangEmptyList)
                                 vs2_36)
                          in let m2_46 = (BIF.maps__from_list__1 [arg_37])
                          in let arg_48 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m2_46])
                          in let arg_47 = (erlps__iter_kv__1 [arg_48])
                          in let
                            kvlist2_50 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_47])
                          in let arg_51 = (BIF.maps__to_list__1 [m2_46])
                          in let
                            match_expr_54 =
                              (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_51])
                          in
                            case match_expr_54 of
                              kvlist2_53 | (kvlist2_53 == kvlist2_50) ->
                                let   
                                  vs3_57 =
                                    (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                       [(ErlangInt 1), (ErlangInt 10000)])
                                in let
                                  arg_58 =
                                    (flmap
                                       (\ lc_61 ->
                                          case lc_61 of
                                            i_60 ->
                                              let   
                                                tup_el_63 =
                                                  (ErlangTuple
                                                     [(ErlangAtom "k"), i_60])
                                              in let
                                                lc_ret_62 =
                                                  (ErlangTuple
                                                     [tup_el_63, i_60])
                                              in
                                                (ErlangCons lc_ret_62
                                                   ErlangEmptyList)
                                            _ -> ErlangEmptyList)
                                       vs3_57)
                                in let m3_67 = (BIF.maps__from_list__1 [arg_58])
                                in let
                                  arg_69 = (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [m3_67])
                                in let arg_68 = (erlps__iter_kv__1 [arg_69])
                                in let
                                  kvlist3_71 =
                                    (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_68])
                                in let arg_72 = (BIF.maps__to_list__1 [m3_67])
                                in let
                                  match_expr_75 =
                                    (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_72])
                                in
                                  case match_expr_75 of
                                    kvlist3_74 | (kvlist3_74 == kvlist3_71) ->
                                      (ErlangAtom "ok")
                                    _ -> (EXC.badmatch match_expr_75)
                              _ -> (EXC.badmatch match_expr_54)
                        _ -> (EXC.badmatch match_expr_33)
                  _ -> (EXC.badmatch match_expr_19)
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_12)
erlps__t_iterator_1__1 [arg_76] = (EXC.function_clause unit)
erlps__t_iterator_1__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iter_kv__1 :: ErlangFun
erlps__iter_kv__1 [i_0] =
  let case_1 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i_0])
  in
    case case_1 of
      (ErlangAtom "none") -> ErlangEmptyList
      (ErlangTuple [k_3, v_4, ni_5]) ->
        let    tail_6 = (ErlangTuple [k_3, v_4])
        in let head_9 = (erlps__iter_kv__1 [ni_5])
        in (ErlangCons tail_6 head_9)
      something_else -> (EXC.case_clause something_else)
erlps__iter_kv__1 [arg_11] = (EXC.function_clause unit)
erlps__iter_kv__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_put_opt__1 :: ErlangFun
erlps__t_put_opt__1 [config_0] | (isEList config_0) =
  let   
    arg_1 = (ErlangMap (Map.singleton (ErlangAtom "complex") (ErlangAtom "map")))
  in let value_4 = (erlps__id__1 [arg_1])
  in let arg_5 = (ErlangMap (Map.singleton (ErlangAtom "a") value_4))
  in let map_8 = (erlps__id__1 [arg_5])
  in let
    lop_9 = (BIF.maps__put__3 [(ErlangAtom "a"), value_4, map_8])
  in let match_expr_14 = (BIF.erlang__op_exactEq [lop_9, map_8])
  in
    case match_expr_14 of
      (ErlangAtom "true") -> (ErlangAtom "ok")
      _ -> (EXC.badmatch match_expr_14)
erlps__t_put_opt__1 [arg_15] = (EXC.function_clause unit)
erlps__t_put_opt__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_merge_opt__1 :: ErlangFun
erlps__t_merge_opt__1 [config_0] | (isEList config_0) =
  let   
    arg_1 = (ErlangMap (Map.singleton (ErlangAtom "a") (ErlangInt 1)))
  in let small_4 = (erlps__id__1 [arg_1])
  in let arg_6 = (ErlangMap Map.empty)
  in let lop_5 = (BIF.maps__merge__2 [arg_6, small_4])
  in let match_expr_9 = (BIF.erlang__op_exactEq [lop_5, small_4])
  in
    case match_expr_9 of
      (ErlangAtom "true") ->
        let    arg_12 = (ErlangMap Map.empty)
        in let lop_10 = (BIF.maps__merge__2 [small_4, arg_12])
        in let match_expr_14 = (BIF.erlang__op_exactEq [lop_10, small_4])
        in
          case match_expr_14 of
            (ErlangAtom "true") ->
              let    lop_15 = (BIF.maps__merge__2 [small_4, small_4])
              in let match_expr_19 = (BIF.erlang__op_exactEq [lop_15, small_4])
              in
                case match_expr_19 of
                  (ErlangAtom "true") ->
                    let   
                      lc_src_21 =
                        (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                           [(ErlangInt 1), (ErlangInt 200)])
                    in let
                      arg_20 =
                        (flmap
                           (\ lc_25 ->
                              case lc_25 of
                                i_24 ->
                                  let lc_ret_26 = (ErlangTuple [i_24, i_24])
                                  in (ErlangCons lc_ret_26 ErlangEmptyList)
                                _ -> ErlangEmptyList)
                           lc_src_21)
                    in let large_29 = (BIF.maps__from_list__1 [arg_20])
                    in let arg_31 = (ErlangMap Map.empty)
                    in let lop_30 = (BIF.maps__merge__2 [arg_31, large_29])
                    in let
                      match_expr_34 =
                        (BIF.erlang__op_exactEq [lop_30, large_29])
                    in
                      case match_expr_34 of
                        (ErlangAtom "true") ->
                          let    arg_37 = (ErlangMap Map.empty)
                          in let
                            lop_35 = (BIF.maps__merge__2 [large_29, arg_37])
                          in let
                            match_expr_39 =
                              (BIF.erlang__op_exactEq [lop_35, large_29])
                          in
                            case match_expr_39 of
                              (ErlangAtom "true") ->
                                let   
                                  lop_40 =
                                    (BIF.maps__merge__2 [large_29, large_29])
                                in let
                                  match_expr_44 =
                                    (BIF.erlang__op_exactEq [lop_40, large_29])
                                in
                                  case match_expr_44 of
                                    (ErlangAtom "true") ->
                                      let   
                                        list_48 =
                                          (erlps__id__1
                                             [(ErlangCons (ErlangAtom "a")
                                                 (ErlangAtom "b"))])
                                      in let
                                        match_expr_63 =
                                          (EXC.tryCatch
                                             (\ _ ->
                                                (BIF.maps__merge__2
                                                   [list_48, list_48]))
                                             (\ ex_52 ->
                                                case ex_52 of
                                                  (ErlangTuple [(ErlangAtom "throw"),
                                                                payload_53,
                                                                _]) ->
                                                    payload_53
                                                  (ErlangTuple [(ErlangAtom "error"),
                                                                payload_54,
                                                                stack_55]) ->
                                                    let
                                                      tup_el_57 =
                                                        (ErlangTuple
                                                           [payload_54,
                                                            stack_55])
                                                    in
                                                      (ErlangTuple
                                                         [(ErlangAtom "EXIT"),
                                                          tup_el_57])
                                                  (ErlangTuple [(ErlangAtom "exit"),
                                                                payload_60,
                                                                _]) ->
                                                    (ErlangTuple
                                                       [(ErlangAtom "EXIT"),
                                                        payload_60])
                                                  ex_52 -> (EXC.raise ex_52)))
                                      in
                                        case match_expr_63 of
                                          (ErlangTuple [(ErlangAtom "EXIT"),
                                                        (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                    (ErlangCons (ErlangAtom "a") (ErlangAtom "b"))]),
                                                                      _])]) ->
                                            (ErlangAtom "ok")
                                          _ -> (EXC.badmatch match_expr_63)
                                    _ -> (EXC.badmatch match_expr_44)
                              _ -> (EXC.badmatch match_expr_39)
                        _ -> (EXC.badmatch match_expr_34)
                  _ -> (EXC.badmatch match_expr_19)
            _ -> (EXC.badmatch match_expr_14)
      _ -> (EXC.badmatch match_expr_9)
erlps__t_merge_opt__1 [arg_64] = (EXC.function_clause unit)
erlps__t_merge_opt__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__random_map__2 :: ErlangFun
erlps__random_map__2 [sizeconstant_0, initseed_1] =
  let   
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [_, (ErlangTuple [map_6, seed_7])] =
             let    k_10 = (BIF.erlang__op_plus [seed_7, (ErlangInt 1)])
             in let v_13 = (BIF.erlang__op_plus [seed_7, (ErlangInt 2)])
             in let map_ext_18 = (ErlangMap (Map.singleton k_10 v_13))
             in let tup_el_14 = (BIF.maps__merge__2 [map_6, map_ext_18])
             in let tup_el_19 = (BIF.erlang__op_plus [seed_7, (ErlangInt 5)])
             in (ErlangTuple [tup_el_14, tup_el_19])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in let tup_el_23 = (ErlangMap Map.empty)
  in let arg_22 = (ErlangTuple [tup_el_23, (ErlangInt 1)])
  in let
    arg_25 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), sizeconstant_0])
  in let
    match_expr_29 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3" [arg_2, arg_22, arg_25])
  in
    case match_expr_29 of
      (ErlangTuple [ret_28, _]) -> ret_28
      _ -> (EXC.badmatch match_expr_29)
erlps__random_map__2 [arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__random_map__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_map_combiners_same_small__3 :: ErlangFun
erlps__check_map_combiners_same_small__3 [mapcombiner1_0,
                                          mapcombiner2_1, seed_2]
  =
  let   
    arg_3 =
      (ErlangFun 1
         let
           lambda_4 [sizeconstant_6] =
             let   
               arg_7 =
                 (ErlangFun 1
                    let
                      lambda_8 [seedmult_10] =
                        let   
                          rop_15 =
                            (BIF.erlang__op_mult
                               [(ErlangInt 100000), seedmult_10])
                        in let
                          lop_13 =
                            (BIF.erlang__op_plus [sizeconstant_6, rop_15])
                        in let arg_12 = (BIF.erlang__op_plus [lop_13, seed_2])
                        in let
                          randmap1_19 =
                            (erlps__random_map__2 [sizeconstant_6, arg_12])
                        in let
                          rop_24 =
                            (BIF.erlang__op_mult
                               [(ErlangInt 200000), seedmult_10])
                        in let
                          lop_22 =
                            (BIF.erlang__op_plus [sizeconstant_6, rop_24])
                        in let arg_21 = (BIF.erlang__op_plus [lop_22, seed_2])
                        in let
                          randmap2_28 =
                            (erlps__random_map__2 [sizeconstant_6, arg_21])
                        in let
                          comb1res_32 =
                            (BIF.erlang__apply__2
                               [mapcombiner1_0,
                                (ErlangCons randmap1_19
                                   (ErlangCons randmap2_28 ErlangEmptyList))])
                        in let
                          comb2res_36 =
                            (BIF.erlang__apply__2
                               [mapcombiner2_1,
                                (ErlangCons randmap1_19
                                   (ErlangCons randmap2_28 ErlangEmptyList))])
                        in
                          case comb2res_36 of
                            comb1res_39 | (comb1res_39 == comb1res_32) ->
                              comb2res_36
                            _ -> (EXC.badmatch comb2res_36)
                      lambda_8 [arg_9] = (EXC.function_clause unit)
                      lambda_8 args = (EXC.badarity (ErlangFun 1 lambda_8) args)
                    in lambda_8)
             in let
               arg_41 =
                 (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 100)])
             in (BIF.do_remote_fun_call "Lists" "erlps__foreach__2" [arg_7, arg_41])
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in let
    arg_44 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 10)])
  in (BIF.do_remote_fun_call "Lists" "erlps__foreach__2" [arg_3, arg_44])
erlps__check_map_combiners_same_small__3 [arg_47, arg_48, arg_49]
  =
  (EXC.function_clause unit)
erlps__check_map_combiners_same_small__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_map_combiners_same_large__3 :: ErlangFun
erlps__check_map_combiners_same_large__3 [mapcombiner1_0,
                                          mapcombiner2_1, seed_2]
  =
  let   
    arg_3 =
      (ErlangFun 1
         let
           lambda_4 [sizeconstant_6] =
             let    arg_8 = (BIF.erlang__op_plus [sizeconstant_6, seed_2])
             in let
               randmap1_11 = (erlps__random_map__2 [sizeconstant_6, arg_8])
             in let arg_13 = (BIF.erlang__op_plus [sizeconstant_6, seed_2])
             in let
               randmap2_16 = (erlps__random_map__2 [sizeconstant_6, arg_13])
             in let
               comb1res_20 =
                 (BIF.erlang__apply__2
                    [mapcombiner1_0,
                     (ErlangCons randmap1_11
                        (ErlangCons randmap2_16 ErlangEmptyList))])
             in let
               comb2res_24 =
                 (BIF.erlang__apply__2
                    [mapcombiner2_1,
                     (ErlangCons randmap1_11
                        (ErlangCons randmap2_16 ErlangEmptyList))])
             in
               case comb2res_24 of
                 comb1res_27 | (comb1res_27 == comb1res_20) -> comb2res_24
                 _ -> (EXC.badmatch comb2res_24)
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in let
    _ =
      (BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
         [arg_3,
          (ErlangCons (ErlangInt 1000)
             (ErlangCons (ErlangInt 10000) ErlangEmptyList))])
  in (ErlangAtom "ok")
erlps__check_map_combiners_same_large__3 [arg_34, arg_35, arg_36]
  =
  (EXC.function_clause unit)
erlps__check_map_combiners_same_large__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_merge_with__1 :: ErlangFun
erlps__t_merge_with__1 [config_0] | (isEList config_0) =
  let   
    small_5 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 1)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 3))]))
  in let
    large_12 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 3)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 2)),
             (Tup.Tuple (ErlangInt 10) (ErlangInt 10))]))
  in let
    arg_13 =
      (ErlangFun 3
         let
           lambda_14 [(ErlangInt 1), (ErlangInt 1), (ErlangInt 3)] =
             (ErlangTuple [(ErlangInt 1), (ErlangInt 3)])
           lambda_14 [(ErlangInt 2), (ErlangInt 3), (ErlangInt 2)] =
             (ErlangTuple [(ErlangInt 3), (ErlangInt 2)])
           lambda_14 [arg_15, arg_16, arg_17] = (EXC.function_clause unit)
           lambda_14 args = (EXC.badarity (ErlangFun 3 lambda_14) args)
         in lambda_14)
  in let
    match_expr_25 =
      (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3" [arg_13, small_5, large_12])
  in
    case match_expr_25 of
      (ErlangMap map_24) | (DM.Just (ErlangInt 10)) <-
                             ((Map.lookup (ErlangInt 10) map_24))
                         , (DM.Just (ErlangTuple [(ErlangInt 3),
                                                  (ErlangInt 2)])) <-
                             ((Map.lookup (ErlangInt 2) map_24))
                         , (DM.Just (ErlangTuple [(ErlangInt 1),
                                                  (ErlangInt 3)])) <-
                             ((Map.lookup (ErlangInt 1) map_24)) ->
        let   
          arg_26 =
            (ErlangFun 3
               let
                 lambda_27 [(ErlangInt 1), v1_31, v2_32] =
                   (ErlangTuple [v1_31, v2_32])
                 lambda_27 [(ErlangInt 2), v1_35, v2_36] =
                   (ErlangTuple [v1_35, v2_36])
                 lambda_27 [arg_28, arg_29, arg_30] = (EXC.function_clause unit)
                 lambda_27 args = (EXC.badarity (ErlangFun 3 lambda_27) args)
               in lambda_27)
        in let
          match_expr_42 =
            (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3" [arg_26, large_12, small_5])
        in
          case match_expr_42 of
            (ErlangMap map_41) | (DM.Just (ErlangInt 10)) <-
                                   ((Map.lookup (ErlangInt 10) map_41))
                               , (DM.Just (ErlangTuple [(ErlangInt 2),
                                                        (ErlangInt 3)])) <-
                                   ((Map.lookup (ErlangInt 2) map_41))
                               , (DM.Just (ErlangTuple [(ErlangInt 3),
                                                        (ErlangInt 1)])) <-
                                   ((Map.lookup (ErlangInt 1) map_41)) ->
              let   
                arg_43 =
                  (ErlangFun 3
                     let
                       lambda_44 [(ErlangInt 1), v1_48, v2_49] =
                         (ErlangTuple [v2_49, v1_48])
                       lambda_44 [(ErlangInt 2), v1_52, v2_53] =
                         (ErlangTuple [v2_53, v1_52])
                       lambda_44 [arg_45, arg_46, arg_47] =
                         (EXC.function_clause unit)
                       lambda_44 args =
                         (EXC.badarity (ErlangFun 3 lambda_44) args)
                     in lambda_44)
              in let
                match_expr_59 =
                  (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3" [arg_43, small_5, large_12])
              in
                case match_expr_59 of
                  (ErlangMap map_58) | (DM.Just (ErlangInt 10)) <-
                                         ((Map.lookup (ErlangInt 10) map_58))
                                     , (DM.Just (ErlangTuple [(ErlangInt 2),
                                                              (ErlangInt 3)])) <-
                                         ((Map.lookup (ErlangInt 2) map_58))
                                     , (DM.Just (ErlangTuple [(ErlangInt 3),
                                                              (ErlangInt 1)])) <-
                                         ((Map.lookup (ErlangInt 1) map_58)) ->
                    let   
                      defaultcombiner_65 =
                        (ErlangFun 3
                           let
                             lambda_60 [_, _, v2_64] = v2_64
                             lambda_60 [arg_61, arg_62, arg_63] =
                               (EXC.function_clause unit)
                             lambda_60 args =
                               (EXC.badarity (ErlangFun 3 lambda_60) args)
                           in lambda_60)
                    in let
                      merge2frommerge3_74 =
                        (ErlangFun 2
                           let
                             lambda_66 [m1_69, m2_70] =
                               (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
                                  [defaultcombiner_65, m1_69, m2_70])
                             lambda_66 [arg_67, arg_68] =
                               (EXC.function_clause unit)
                             lambda_66 args =
                               (EXC.badarity (ErlangFun 2 lambda_66) args)
                           in lambda_66)
                    in let
                      arg_75 =
                        (BIF.erlang__make_fun__3
                           [(ErlangAtom "maps"), (ErlangAtom "merge"), (ErlangInt 2)])
                    in let
                      _ =
                        (erlps__check_map_combiners_same_small__3
                           [arg_75, merge2frommerge3_74, (ErlangInt 1)])
                    in let
                      arg_81 =
                        (BIF.erlang__make_fun__3
                           [(ErlangAtom "maps"), (ErlangAtom "merge"), (ErlangInt 2)])
                    in let
                      _ =
                        (erlps__check_map_combiners_same_large__3
                           [arg_81, merge2frommerge3_74, (ErlangInt 2)])
                    in let
                      mergefromukeymerge_103 =
                        (ErlangFun 2
                           let
                             lambda_87 [m1_90, m2_91] =
                               let    arg_92 = (BIF.maps__to_list__1 [m1_90])
                               in let
                                 l1_94 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_92])
                               in let arg_95 = (BIF.maps__to_list__1 [m2_91])
                               in let
                                 l2_97 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_95])
                               in let
                                 reslist_101 =
                                   (BIF.do_remote_fun_call "Lists" "erlps__ukeymerge__3"
                                      [(ErlangInt 1), l2_97, l1_94])
                               in (BIF.maps__from_list__1 [reslist_101])
                             lambda_87 [arg_88, arg_89] =
                               (EXC.function_clause unit)
                             lambda_87 args =
                               (EXC.badarity (ErlangFun 2 lambda_87) args)
                           in lambda_87)
                    in let
                      _ =
                        (erlps__check_map_combiners_same_small__3
                           [mergefromukeymerge_103, merge2frommerge3_74,
                            (ErlangInt 3)])
                    in let
                      _ =
                        (erlps__check_map_combiners_same_large__3
                           [mergefromukeymerge_103, merge2frommerge3_74,
                            (ErlangInt 4)])
                    in let
                      arg_110 =
                        (ErlangFun 3
                           let
                             lambda_111 [_k_115, _v1_116, _v2_117] =
                               (BIF.erlang__error__1 [(ErlangAtom "should_not_happen")])
                             lambda_111 [arg_112, arg_113, arg_114] =
                               (EXC.function_clause unit)
                             lambda_111 args =
                               (EXC.badarity (ErlangFun 3 lambda_111) args)
                           in lambda_111)
                    in let arg_120 = (ErlangMap Map.empty)
                    in let
                      match_expr_122 =
                        (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
                           [arg_110, large_12, arg_120])
                    in
                      case match_expr_122 of
                        large_121 | (large_121 == large_12) ->
                          let   
                            arg_123 =
                              (ErlangFun 3
                                 let
                                   lambda_124 [_k_128, _v1_129, _v2_130] =
                                     (BIF.erlang__error__1 [(ErlangAtom "should_not_happen")])
                                   lambda_124 [arg_125, arg_126, arg_127] =
                                     (EXC.function_clause unit)
                                   lambda_124 args =
                                     (EXC.badarity (ErlangFun 3 lambda_124)
                                        args)
                                 in lambda_124)
                          in let arg_132 = (ErlangMap Map.empty)
                          in let
                            match_expr_135 =
                              (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
                                 [arg_123, arg_132, large_12])
                          in
                            case match_expr_135 of
                              large_134 | (large_134 == large_12) ->
                                let   
                                  arg_136 =
                                    (ErlangFun 3
                                       let
                                         lambda_137 [_k_141, _v1_142, _v2_143] =
                                           (BIF.erlang__error__1
                                              [(ErlangAtom "should_not_happen")])
                                         lambda_137 [arg_138, arg_139, arg_140]
                                           =
                                           (EXC.function_clause unit)
                                         lambda_137 args =
                                           (EXC.badarity
                                              (ErlangFun 3 lambda_137) args)
                                       in lambda_137)
                                in let arg_145 = (ErlangMap Map.empty)
                                in let arg_146 = (ErlangMap Map.empty)
                                in let
                                  match_expr_148 =
                                    (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
                                       [arg_136, arg_145, arg_146])
                                in
                                  case match_expr_148 of
                                    (ErlangMap map_147) ->
                                      let
                                        match_expr_164 =
                                          (EXC.tryCatch
                                             (\ _ ->
                                                let   
                                                  arg_150 =
                                                    (ErlangMap Map.empty)
                                                in let
                                                  arg_151 =
                                                    (ErlangMap Map.empty)
                                                in
                                                  (BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
                                                     [(ErlangAtom "not_a_fun"), arg_150,
                                                      arg_151]))
                                             (\ ex_153 ->
                                                case ex_153 of
                                                  (ErlangTuple [(ErlangAtom "throw"),
                                                                payload_154,
                                                                _]) ->
                                                    payload_154
                                                  (ErlangTuple [(ErlangAtom "error"),
                                                                payload_155,
                                                                stack_156]) ->
                                                    let
                                                      tup_el_158 =
                                                        (ErlangTuple
                                                           [payload_155,
                                                            stack_156])
                                                    in
                                                      (ErlangTuple
                                                         [(ErlangAtom "EXIT"),
                                                          tup_el_158])
                                                  (ErlangTuple [(ErlangAtom "exit"),
                                                                payload_161,
                                                                _]) ->
                                                    (ErlangTuple
                                                       [(ErlangAtom "EXIT"),
                                                        payload_161])
                                                  ex_153 -> (EXC.raise ex_153)))
                                      in
                                        case match_expr_164 of
                                          (ErlangTuple [(ErlangAtom "EXIT"),
                                                        (ErlangTuple [(ErlangAtom "badarg"),
                                                                      _])]) ->
                                            let
                                              match_expr_188 =
                                                (EXC.tryCatch
                                                   (\ _ ->
                                                      let   
                                                        arg_165 =
                                                          (ErlangFun 3
                                                             let
                                                               lambda_166 [_k_170,
                                                                           _v1_171,
                                                                           _v2_172]
                                                                 =
                                                                 (BIF.erlang__error__1
                                                                    [(ErlangAtom
                                                                        "should_not_happen")])
                                                               lambda_166 [arg_167,
                                                                           arg_168,
                                                                           arg_169]
                                                                 =
                                                                 (EXC.function_clause
                                                                    unit)
                                                               lambda_166 args =
                                                                 (EXC.badarity
                                                                    (ErlangFun 3
                                                                       lambda_166)
                                                                    args)
                                                             in lambda_166)
                                                      in let
                                                        arg_175 =
                                                          (ErlangMap Map.empty)
                                                      in
                                                        (BIF.do_remote_fun_call
                                                           "Maps" "erlps__merge_with__3"
                                                           [arg_165,
                                                            (ErlangAtom "a"),
                                                            arg_175]))
                                                   (\ ex_177 ->
                                                      case ex_177 of
                                                        (ErlangTuple [(ErlangAtom "throw"),
                                                                      payload_178,
                                                                      _]) ->
                                                          payload_178
                                                        (ErlangTuple [(ErlangAtom "error"),
                                                                      payload_179,
                                                                      stack_180]) ->
                                                          let
                                                            tup_el_182 =
                                                              (ErlangTuple
                                                                 [payload_179,
                                                                  stack_180])
                                                          in
                                                            (ErlangTuple
                                                               [(ErlangAtom "EXIT"),
                                                                tup_el_182])
                                                        (ErlangTuple [(ErlangAtom "exit"),
                                                                      payload_185,
                                                                      _]) ->
                                                          (ErlangTuple
                                                             [(ErlangAtom "EXIT"),
                                                              payload_185])
                                                        ex_177 ->
                                                          (EXC.raise ex_177)))
                                            in
                                              case match_expr_188 of
                                                (ErlangTuple [(ErlangAtom "EXIT"),
                                                              (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                          (ErlangAtom "a")]),
                                                                            _])]) ->
                                                  let
                                                    match_expr_212 =
                                                      (EXC.tryCatch
                                                         (\ _ ->
                                                            let   
                                                              arg_189 =
                                                                (ErlangFun 3
                                                                   let
                                                                     lambda_190 [_k_194,
                                                                                 _v1_195,
                                                                                 _v2_196]
                                                                       =
                                                                       (BIF.erlang__error__1
                                                                          [(ErlangAtom
                                                                              "ok")])
                                                                     lambda_190 [arg_191,
                                                                                 arg_192,
                                                                                 arg_193]
                                                                       =
                                                                       (EXC.function_clause
                                                                          unit)
                                                                     lambda_190 args
                                                                       =
                                                                       (EXC.badarity
                                                                          (ErlangFun
                                                                             3
                                                                             lambda_190)
                                                                          args)
                                                                   in
                                                                     lambda_190)
                                                            in let
                                                              arg_198 =
                                                                (ErlangMap
                                                                   Map.empty)
                                                            in
                                                              (BIF.do_remote_fun_call
                                                                 "Maps" "erlps__merge_with__3"
                                                                 [arg_189,
                                                                  arg_198,
                                                                  (ErlangAtom
                                                                     "b")]))
                                                         (\ ex_201 ->
                                                            case ex_201 of
                                                              (ErlangTuple [(ErlangAtom "throw"),
                                                                            payload_202,
                                                                            _]) ->
                                                                payload_202
                                                              (ErlangTuple [(ErlangAtom "error"),
                                                                            payload_203,
                                                                            stack_204]) ->
                                                                let
                                                                  tup_el_206 =
                                                                    (ErlangTuple
                                                                       [payload_203,
                                                                        stack_204])
                                                                in
                                                                  (ErlangTuple
                                                                     [(ErlangAtom
                                                                         "EXIT"),
                                                                      tup_el_206])
                                                              (ErlangTuple [(ErlangAtom "exit"),
                                                                            payload_209,
                                                                            _]) ->
                                                                (ErlangTuple
                                                                   [(ErlangAtom
                                                                       "EXIT"),
                                                                    payload_209])
                                                              ex_201 ->
                                                                (EXC.raise
                                                                   ex_201)))
                                                  in
                                                    case match_expr_212 of
                                                      (ErlangTuple [(ErlangAtom "EXIT"),
                                                                    (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                (ErlangAtom "b")]),
                                                                                  _])]) ->
                                                        let
                                                          match_expr_236 =
                                                            (EXC.tryCatch
                                                               (\ _ ->
                                                                  let
                                                                    arg_213 =
                                                                      (ErlangFun
                                                                         3
                                                                         let
                                                                           lambda_214 [_k_218,
                                                                                       _v1_219,
                                                                                       _v2_220]
                                                                             =
                                                                             (BIF.erlang__error__1
                                                                                [(ErlangAtom
                                                                                    "ok")])
                                                                           lambda_214 [arg_215,
                                                                                       arg_216,
                                                                                       arg_217]
                                                                             =
                                                                             (EXC.function_clause
                                                                                unit)
                                                                           lambda_214 args
                                                                             =
                                                                             (EXC.badarity
                                                                                (ErlangFun
                                                                                   3
                                                                                   lambda_214)
                                                                                args)
                                                                         in
                                                                           lambda_214)
                                                                  in
                                                                    (BIF.do_remote_fun_call
                                                                       "Maps" "erlps__merge_with__3"
                                                                       [arg_213,
                                                                        (ErlangAtom
                                                                           "a"),
                                                                        (ErlangAtom
                                                                           "b")]))
                                                               (\ ex_225 ->
                                                                  case ex_225 of
                                                                    (ErlangTuple [(ErlangAtom "throw"),
                                                                                  payload_226,
                                                                                  _]) ->
                                                                      payload_226
                                                                    (ErlangTuple [(ErlangAtom "error"),
                                                                                  payload_227,
                                                                                  stack_228]) ->
                                                                      let
                                                                        tup_el_230 =
                                                                          (ErlangTuple
                                                                             [payload_227,
                                                                              stack_228])
                                                                      in
                                                                        (ErlangTuple
                                                                           [(ErlangAtom
                                                                               "EXIT"),
                                                                            tup_el_230])
                                                                    (ErlangTuple [(ErlangAtom "exit"),
                                                                                  payload_233,
                                                                                  _]) ->
                                                                      (ErlangTuple
                                                                         [(ErlangAtom
                                                                             "EXIT"),
                                                                          payload_233])
                                                                    ex_225 ->
                                                                      (EXC.raise
                                                                         ex_225)))
                                                        in
                                                          case match_expr_236 of
                                                            (ErlangTuple [(ErlangAtom "EXIT"),
                                                                          (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                      (ErlangAtom "a")]),
                                                                                        _])]) ->
                                                              (ErlangAtom "ok")
                                                            _ ->
                                                              (EXC.badmatch
                                                                 match_expr_236)
                                                      _ ->
                                                        (EXC.badmatch
                                                           match_expr_212)
                                                _ ->
                                                  (EXC.badmatch match_expr_188)
                                          _ -> (EXC.badmatch match_expr_164)
                                    _ -> (EXC.badmatch match_expr_148)
                              _ -> (EXC.badmatch match_expr_135)
                        _ -> (EXC.badmatch match_expr_122)
                  _ -> (EXC.badmatch match_expr_59)
            _ -> (EXC.badmatch match_expr_42)
      _ -> (EXC.badmatch match_expr_25)
erlps__t_merge_with__1 [arg_237] = (EXC.function_clause unit)
erlps__t_merge_with__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_intersect__1 :: ErlangFun
erlps__t_intersect__1 [config_0] | (isEList config_0) =
  let   
    small_5 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 1)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 3))]))
  in let
    large_12 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 3)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 2)),
             (Tup.Tuple (ErlangInt 10) (ErlangInt 10))]))
  in let
    match_expr_16 = (BIF.do_remote_fun_call "Maps" "erlps__intersect__2" [small_5, large_12])
  in
    case match_expr_16 of
      (ErlangMap map_15) | (DM.Just (ErlangInt 2)) <-
                             ((Map.lookup (ErlangInt 2) map_15))
                         , (DM.Just (ErlangInt 3)) <-
                             ((Map.lookup (ErlangInt 1) map_15)) ->
        let
          match_expr_20 = (BIF.do_remote_fun_call "Maps" "erlps__intersect__2" [large_12, small_5])
        in
          case match_expr_20 of
            (ErlangMap map_19) | (DM.Just (ErlangInt 3)) <-
                                   ((Map.lookup (ErlangInt 2) map_19))
                               , (DM.Just (ErlangInt 1)) <-
                                   ((Map.lookup (ErlangInt 1) map_19)) ->
              let   
                intersectfromgbsets_53 =
                  (ErlangFun 2
                     let
                       lambda_21 [m1_24, m2_25] =
                         let    map1keys_27 = (BIF.maps__keys__1 [m1_24])
                         in let map2keys_29 = (BIF.maps__keys__1 [m2_25])
                         in let
                           gbset1_31 =
                             (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1" [map1keys_27])
                         in let
                           gbset2_33 =
                             (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1" [map2keys_29])
                         in let
                           gbsetintersection_36 =
                             (BIF.do_remote_fun_call "Gb.Sets" "erlps__intersection__2" [gbset1_31, gbset2_33])
                         in let
                           intersectlist_38 =
                             (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [gbsetintersection_36])
                         in let
                           arg_39 =
                             (ErlangFun 2
                                let
                                  lambda_40 [key_43, sofar_44] =
                                    let   
                                      val_47 =
                                        (BIF.maps__get__2 [key_43, m2_25])
                                    in let
                                      map_ext_50 =
                                        (ErlangMap
                                           (Map.singleton key_43 val_47))
                                    in
                                      (BIF.maps__merge__2
                                         [sofar_44, map_ext_50])
                                  lambda_40 [arg_41, arg_42] =
                                    (EXC.function_clause unit)
                                  lambda_40 args =
                                    (EXC.badarity (ErlangFun 2 lambda_40) args)
                                in lambda_40)
                         in let arg_51 = (ErlangMap Map.empty)
                         in
                           (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
                              [arg_39, arg_51, intersectlist_38])
                       lambda_21 [arg_22, arg_23] = (EXC.function_clause unit)
                       lambda_21 args =
                         (EXC.badarity (ErlangFun 2 lambda_21) args)
                     in lambda_21)
              in let
                arg_54 =
                  (BIF.erlang__make_fun__3
                     [(ErlangAtom "maps"), (ErlangAtom "intersect"), (ErlangInt 2)])
              in let
                _ =
                  (erlps__check_map_combiners_same_small__3
                     [arg_54, intersectfromgbsets_53, (ErlangInt 11)])
              in let
                arg_60 =
                  (BIF.erlang__make_fun__3
                     [(ErlangAtom "maps"), (ErlangAtom "intersect"), (ErlangInt 2)])
              in let
                _ =
                  (erlps__check_map_combiners_same_large__3
                     [arg_60, intersectfromgbsets_53, (ErlangInt 13)])
              in let arg_67 = (ErlangMap Map.empty)
              in let
                match_expr_69 = (BIF.do_remote_fun_call "Maps" "erlps__intersect__2" [large_12, arg_67])
              in
                case match_expr_69 of
                  (ErlangMap map_68) ->
                    let    arg_70 = (ErlangMap Map.empty)
                    in let
                      match_expr_73 =
                        (BIF.do_remote_fun_call "Maps" "erlps__intersect__2" [arg_70, large_12])
                    in
                      case match_expr_73 of
                        (ErlangMap map_72) ->
                          let    arg_74 = (ErlangMap Map.empty)
                          in let arg_75 = (ErlangMap Map.empty)
                          in let
                            match_expr_77 =
                              (BIF.do_remote_fun_call "Maps" "erlps__intersect__2" [arg_74, arg_75])
                          in
                            case match_expr_77 of
                              (ErlangMap map_76) ->
                                let
                                  match_expr_92 =
                                    (EXC.tryCatch
                                       (\ _ ->
                                          let arg_79 = (ErlangMap Map.empty)
                                          in
                                            (BIF.do_remote_fun_call "Maps" "erlps__intersect__2"
                                               [(ErlangAtom "a"), arg_79]))
                                       (\ ex_81 ->
                                          case ex_81 of
                                            (ErlangTuple [(ErlangAtom "throw"),
                                                          payload_82, _]) ->
                                              payload_82
                                            (ErlangTuple [(ErlangAtom "error"),
                                                          payload_83,
                                                          stack_84]) ->
                                              let
                                                tup_el_86 =
                                                  (ErlangTuple
                                                     [payload_83, stack_84])
                                              in
                                                (ErlangTuple
                                                   [(ErlangAtom "EXIT"), tup_el_86])
                                            (ErlangTuple [(ErlangAtom "exit"),
                                                          payload_89, _]) ->
                                              (ErlangTuple
                                                 [(ErlangAtom "EXIT"), payload_89])
                                            ex_81 -> (EXC.raise ex_81)))
                                in
                                  case match_expr_92 of
                                    (ErlangTuple [(ErlangAtom "EXIT"),
                                                  (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                              (ErlangAtom "a")]),
                                                                _])]) ->
                                      let
                                        match_expr_107 =
                                          (EXC.tryCatch
                                             (\ _ ->
                                                let
                                                  arg_93 = (ErlangMap Map.empty)
                                                in
                                                  (BIF.do_remote_fun_call "Maps" "erlps__intersect__2"
                                                     [arg_93, (ErlangAtom "b")]))
                                             (\ ex_96 ->
                                                case ex_96 of
                                                  (ErlangTuple [(ErlangAtom "throw"),
                                                                payload_97,
                                                                _]) ->
                                                    payload_97
                                                  (ErlangTuple [(ErlangAtom "error"),
                                                                payload_98,
                                                                stack_99]) ->
                                                    let
                                                      tup_el_101 =
                                                        (ErlangTuple
                                                           [payload_98,
                                                            stack_99])
                                                    in
                                                      (ErlangTuple
                                                         [(ErlangAtom "EXIT"),
                                                          tup_el_101])
                                                  (ErlangTuple [(ErlangAtom "exit"),
                                                                payload_104,
                                                                _]) ->
                                                    (ErlangTuple
                                                       [(ErlangAtom "EXIT"),
                                                        payload_104])
                                                  ex_96 -> (EXC.raise ex_96)))
                                      in
                                        case match_expr_107 of
                                          (ErlangTuple [(ErlangAtom "EXIT"),
                                                        (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                    (ErlangAtom "b")]),
                                                                      _])]) ->
                                            let
                                              match_expr_122 =
                                                (EXC.tryCatch
                                                   (\ _ ->
                                                      (BIF.do_remote_fun_call "Maps"
                                                         "erlps__intersect__2"
                                                         [(ErlangAtom "a"),
                                                          (ErlangAtom "b")]))
                                                   (\ ex_111 ->
                                                      case ex_111 of
                                                        (ErlangTuple [(ErlangAtom "throw"),
                                                                      payload_112,
                                                                      _]) ->
                                                          payload_112
                                                        (ErlangTuple [(ErlangAtom "error"),
                                                                      payload_113,
                                                                      stack_114]) ->
                                                          let
                                                            tup_el_116 =
                                                              (ErlangTuple
                                                                 [payload_113,
                                                                  stack_114])
                                                          in
                                                            (ErlangTuple
                                                               [(ErlangAtom "EXIT"),
                                                                tup_el_116])
                                                        (ErlangTuple [(ErlangAtom "exit"),
                                                                      payload_119,
                                                                      _]) ->
                                                          (ErlangTuple
                                                             [(ErlangAtom "EXIT"),
                                                              payload_119])
                                                        ex_111 ->
                                                          (EXC.raise ex_111)))
                                            in
                                              case match_expr_122 of
                                                (ErlangTuple [(ErlangAtom "EXIT"),
                                                              (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                          (ErlangAtom "a")]),
                                                                            _])]) ->
                                                  (ErlangAtom "ok")
                                                _ ->
                                                  (EXC.badmatch match_expr_122)
                                          _ -> (EXC.badmatch match_expr_107)
                                    _ -> (EXC.badmatch match_expr_92)
                              _ -> (EXC.badmatch match_expr_77)
                        _ -> (EXC.badmatch match_expr_73)
                  _ -> (EXC.badmatch match_expr_69)
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_16)
erlps__t_intersect__1 [arg_123] = (EXC.function_clause unit)
erlps__t_intersect__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_intersect_with__1 :: ErlangFun
erlps__t_intersect_with__1 [config_0] | (isEList config_0) =
  let   
    small_5 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 1)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 3))]))
  in let
    large_12 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangInt 1) (ErlangInt 3)),
             (Tup.Tuple (ErlangInt 2) (ErlangInt 2)),
             (Tup.Tuple (ErlangInt 10) (ErlangInt 10))]))
  in let
    arg_13 =
      (ErlangFun 3
         let
           lambda_14 [(ErlangInt 1), (ErlangInt 1), (ErlangInt 3)] =
             (ErlangTuple [(ErlangInt 1), (ErlangInt 3)])
           lambda_14 [(ErlangInt 2), (ErlangInt 3), (ErlangInt 2)] =
             (ErlangTuple [(ErlangInt 3), (ErlangInt 2)])
           lambda_14 [arg_15, arg_16, arg_17] = (EXC.function_clause unit)
           lambda_14 args = (EXC.badarity (ErlangFun 3 lambda_14) args)
         in lambda_14)
  in let
    match_expr_25 =
      (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3" [arg_13, small_5, large_12])
  in
    case match_expr_25 of
      (ErlangMap map_24) | (DM.Just (ErlangTuple [(ErlangInt 3),
                                                  (ErlangInt 2)])) <-
                             ((Map.lookup (ErlangInt 2) map_24))
                         , (DM.Just (ErlangTuple [(ErlangInt 1),
                                                  (ErlangInt 3)])) <-
                             ((Map.lookup (ErlangInt 1) map_24)) ->
        let   
          arg_26 =
            (ErlangFun 3
               let
                 lambda_27 [(ErlangInt 1), v1_31, v2_32] =
                   (ErlangTuple [v1_31, v2_32])
                 lambda_27 [(ErlangInt 2), v1_35, v2_36] =
                   (ErlangTuple [v1_35, v2_36])
                 lambda_27 [arg_28, arg_29, arg_30] = (EXC.function_clause unit)
                 lambda_27 args = (EXC.badarity (ErlangFun 3 lambda_27) args)
               in lambda_27)
        in let
          match_expr_42 =
            (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3" [arg_26, large_12, small_5])
        in
          case match_expr_42 of
            (ErlangMap map_41) | (DM.Just (ErlangTuple [(ErlangInt 2),
                                                        (ErlangInt 3)])) <-
                                   ((Map.lookup (ErlangInt 2) map_41))
                               , (DM.Just (ErlangTuple [(ErlangInt 3),
                                                        (ErlangInt 1)])) <-
                                   ((Map.lookup (ErlangInt 1) map_41)) ->
              let   
                arg_43 =
                  (ErlangFun 3
                     let
                       lambda_44 [(ErlangInt 1), v1_48, v2_49] =
                         (ErlangTuple [v2_49, v1_48])
                       lambda_44 [(ErlangInt 2), v1_52, v2_53] =
                         (ErlangTuple [v2_53, v1_52])
                       lambda_44 [arg_45, arg_46, arg_47] =
                         (EXC.function_clause unit)
                       lambda_44 args =
                         (EXC.badarity (ErlangFun 3 lambda_44) args)
                     in lambda_44)
              in let
                match_expr_59 =
                  (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3" [arg_43, small_5, large_12])
              in
                case match_expr_59 of
                  (ErlangMap map_58) | (DM.Just (ErlangTuple [(ErlangInt 2),
                                                              (ErlangInt 3)])) <-
                                         ((Map.lookup (ErlangInt 2) map_58))
                                     , (DM.Just (ErlangTuple [(ErlangInt 3),
                                                              (ErlangInt 1)])) <-
                                         ((Map.lookup (ErlangInt 1) map_58)) ->
                    let   
                      defaultcombiner_65 =
                        (ErlangFun 3
                           let
                             lambda_60 [_, _, v2_64] = v2_64
                             lambda_60 [arg_61, arg_62, arg_63] =
                               (EXC.function_clause unit)
                             lambda_60 args =
                               (EXC.badarity (ErlangFun 3 lambda_60) args)
                           in lambda_60)
                    in let
                      intersect2fromintersect3_74 =
                        (ErlangFun 2
                           let
                             lambda_66 [m1_69, m2_70] =
                               (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3"
                                  [defaultcombiner_65, m1_69, m2_70])
                             lambda_66 [arg_67, arg_68] =
                               (EXC.function_clause unit)
                             lambda_66 args =
                               (EXC.badarity (ErlangFun 2 lambda_66) args)
                           in lambda_66)
                    in let
                      arg_75 =
                        (BIF.erlang__make_fun__3
                           [(ErlangAtom "maps"), (ErlangAtom "intersect"), (ErlangInt 2)])
                    in let
                      _ =
                        (erlps__check_map_combiners_same_small__3
                           [arg_75, intersect2fromintersect3_74, (ErlangInt 7)])
                    in let
                      arg_81 =
                        (BIF.erlang__make_fun__3
                           [(ErlangAtom "maps"), (ErlangAtom "intersect"), (ErlangInt 2)])
                    in let
                      _ =
                        (erlps__check_map_combiners_same_large__3
                           [arg_81, intersect2fromintersect3_74, (ErlangInt 8)])
                    in let
                      arg_87 =
                        (ErlangFun 3
                           let
                             lambda_88 [_k_92, _v1_93, _v2_94] =
                               (BIF.erlang__error__1 [(ErlangAtom "should_not_happen")])
                             lambda_88 [arg_89, arg_90, arg_91] =
                               (EXC.function_clause unit)
                             lambda_88 args =
                               (EXC.badarity (ErlangFun 3 lambda_88) args)
                           in lambda_88)
                    in let arg_97 = (ErlangMap Map.empty)
                    in let
                      match_expr_99 =
                        (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3" [arg_87, large_12, arg_97])
                    in
                      case match_expr_99 of
                        (ErlangMap map_98) ->
                          let   
                            arg_100 =
                              (ErlangFun 3
                                 let
                                   lambda_101 [_k_105, _v1_106, _v2_107] =
                                     (BIF.erlang__error__1 [(ErlangAtom "should_not_happen")])
                                   lambda_101 [arg_102, arg_103, arg_104] =
                                     (EXC.function_clause unit)
                                   lambda_101 args =
                                     (EXC.badarity (ErlangFun 3 lambda_101)
                                        args)
                                 in lambda_101)
                          in let arg_109 = (ErlangMap Map.empty)
                          in let
                            match_expr_112 =
                              (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3"
                                 [arg_100, arg_109, large_12])
                          in
                            case match_expr_112 of
                              (ErlangMap map_111) ->
                                let   
                                  arg_113 =
                                    (ErlangFun 3
                                       let
                                         lambda_114 [_k_118, _v1_119, _v2_120] =
                                           (BIF.erlang__error__1
                                              [(ErlangAtom "should_not_happen")])
                                         lambda_114 [arg_115, arg_116, arg_117]
                                           =
                                           (EXC.function_clause unit)
                                         lambda_114 args =
                                           (EXC.badarity
                                              (ErlangFun 3 lambda_114) args)
                                       in lambda_114)
                                in let arg_122 = (ErlangMap Map.empty)
                                in let arg_123 = (ErlangMap Map.empty)
                                in let
                                  match_expr_125 =
                                    (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3"
                                       [arg_113, arg_122, arg_123])
                                in
                                  case match_expr_125 of
                                    (ErlangMap map_124) ->
                                      let
                                        match_expr_141 =
                                          (EXC.tryCatch
                                             (\ _ ->
                                                let   
                                                  arg_127 =
                                                    (ErlangMap Map.empty)
                                                in let
                                                  arg_128 =
                                                    (ErlangMap Map.empty)
                                                in
                                                  (BIF.do_remote_fun_call "Maps" "erlps__intersect_with__3"
                                                     [(ErlangAtom "not_a_fun"), arg_127,
                                                      arg_128]))
                                             (\ ex_130 ->
                                                case ex_130 of
                                                  (ErlangTuple [(ErlangAtom "throw"),
                                                                payload_131,
                                                                _]) ->
                                                    payload_131
                                                  (ErlangTuple [(ErlangAtom "error"),
                                                                payload_132,
                                                                stack_133]) ->
                                                    let
                                                      tup_el_135 =
                                                        (ErlangTuple
                                                           [payload_132,
                                                            stack_133])
                                                    in
                                                      (ErlangTuple
                                                         [(ErlangAtom "EXIT"),
                                                          tup_el_135])
                                                  (ErlangTuple [(ErlangAtom "exit"),
                                                                payload_138,
                                                                _]) ->
                                                    (ErlangTuple
                                                       [(ErlangAtom "EXIT"),
                                                        payload_138])
                                                  ex_130 -> (EXC.raise ex_130)))
                                      in
                                        case match_expr_141 of
                                          (ErlangTuple [(ErlangAtom "EXIT"),
                                                        (ErlangTuple [(ErlangAtom "badarg"),
                                                                      _])]) ->
                                            let
                                              match_expr_165 =
                                                (EXC.tryCatch
                                                   (\ _ ->
                                                      let   
                                                        arg_142 =
                                                          (ErlangFun 3
                                                             let
                                                               lambda_143 [_k_147,
                                                                           _v1_148,
                                                                           _v2_149]
                                                                 =
                                                                 (BIF.erlang__error__1
                                                                    [(ErlangAtom
                                                                        "should_not_happen")])
                                                               lambda_143 [arg_144,
                                                                           arg_145,
                                                                           arg_146]
                                                                 =
                                                                 (EXC.function_clause
                                                                    unit)
                                                               lambda_143 args =
                                                                 (EXC.badarity
                                                                    (ErlangFun 3
                                                                       lambda_143)
                                                                    args)
                                                             in lambda_143)
                                                      in let
                                                        arg_152 =
                                                          (ErlangMap Map.empty)
                                                      in
                                                        (BIF.do_remote_fun_call
                                                           "Maps" "erlps__intersect_with__3"
                                                           [arg_142,
                                                            (ErlangAtom "a"),
                                                            arg_152]))
                                                   (\ ex_154 ->
                                                      case ex_154 of
                                                        (ErlangTuple [(ErlangAtom "throw"),
                                                                      payload_155,
                                                                      _]) ->
                                                          payload_155
                                                        (ErlangTuple [(ErlangAtom "error"),
                                                                      payload_156,
                                                                      stack_157]) ->
                                                          let
                                                            tup_el_159 =
                                                              (ErlangTuple
                                                                 [payload_156,
                                                                  stack_157])
                                                          in
                                                            (ErlangTuple
                                                               [(ErlangAtom "EXIT"),
                                                                tup_el_159])
                                                        (ErlangTuple [(ErlangAtom "exit"),
                                                                      payload_162,
                                                                      _]) ->
                                                          (ErlangTuple
                                                             [(ErlangAtom "EXIT"),
                                                              payload_162])
                                                        ex_154 ->
                                                          (EXC.raise ex_154)))
                                            in
                                              case match_expr_165 of
                                                (ErlangTuple [(ErlangAtom "EXIT"),
                                                              (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                          (ErlangAtom "a")]),
                                                                            _])]) ->
                                                  let
                                                    match_expr_189 =
                                                      (EXC.tryCatch
                                                         (\ _ ->
                                                            let   
                                                              arg_166 =
                                                                (ErlangFun 3
                                                                   let
                                                                     lambda_167 [_k_171,
                                                                                 _v1_172,
                                                                                 _v2_173]
                                                                       =
                                                                       (BIF.erlang__error__1
                                                                          [(ErlangAtom
                                                                              "ok")])
                                                                     lambda_167 [arg_168,
                                                                                 arg_169,
                                                                                 arg_170]
                                                                       =
                                                                       (EXC.function_clause
                                                                          unit)
                                                                     lambda_167 args
                                                                       =
                                                                       (EXC.badarity
                                                                          (ErlangFun
                                                                             3
                                                                             lambda_167)
                                                                          args)
                                                                   in
                                                                     lambda_167)
                                                            in let
                                                              arg_175 =
                                                                (ErlangMap
                                                                   Map.empty)
                                                            in
                                                              (BIF.do_remote_fun_call
                                                                 "Maps" "erlps__intersect_with__3"
                                                                 [arg_166,
                                                                  arg_175,
                                                                  (ErlangAtom
                                                                     "b")]))
                                                         (\ ex_178 ->
                                                            case ex_178 of
                                                              (ErlangTuple [(ErlangAtom "throw"),
                                                                            payload_179,
                                                                            _]) ->
                                                                payload_179
                                                              (ErlangTuple [(ErlangAtom "error"),
                                                                            payload_180,
                                                                            stack_181]) ->
                                                                let
                                                                  tup_el_183 =
                                                                    (ErlangTuple
                                                                       [payload_180,
                                                                        stack_181])
                                                                in
                                                                  (ErlangTuple
                                                                     [(ErlangAtom
                                                                         "EXIT"),
                                                                      tup_el_183])
                                                              (ErlangTuple [(ErlangAtom "exit"),
                                                                            payload_186,
                                                                            _]) ->
                                                                (ErlangTuple
                                                                   [(ErlangAtom
                                                                       "EXIT"),
                                                                    payload_186])
                                                              ex_178 ->
                                                                (EXC.raise
                                                                   ex_178)))
                                                  in
                                                    case match_expr_189 of
                                                      (ErlangTuple [(ErlangAtom "EXIT"),
                                                                    (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                (ErlangAtom "b")]),
                                                                                  _])]) ->
                                                        let
                                                          match_expr_213 =
                                                            (EXC.tryCatch
                                                               (\ _ ->
                                                                  let
                                                                    arg_190 =
                                                                      (ErlangFun
                                                                         3
                                                                         let
                                                                           lambda_191 [_k_195,
                                                                                       _v1_196,
                                                                                       _v2_197]
                                                                             =
                                                                             (BIF.erlang__error__1
                                                                                [(ErlangAtom
                                                                                    "ok")])
                                                                           lambda_191 [arg_192,
                                                                                       arg_193,
                                                                                       arg_194]
                                                                             =
                                                                             (EXC.function_clause
                                                                                unit)
                                                                           lambda_191 args
                                                                             =
                                                                             (EXC.badarity
                                                                                (ErlangFun
                                                                                   3
                                                                                   lambda_191)
                                                                                args)
                                                                         in
                                                                           lambda_191)
                                                                  in
                                                                    (BIF.do_remote_fun_call
                                                                       "Maps" "erlps__intersect_with__3"
                                                                       [arg_190,
                                                                        (ErlangAtom
                                                                           "a"),
                                                                        (ErlangAtom
                                                                           "b")]))
                                                               (\ ex_202 ->
                                                                  case ex_202 of
                                                                    (ErlangTuple [(ErlangAtom "throw"),
                                                                                  payload_203,
                                                                                  _]) ->
                                                                      payload_203
                                                                    (ErlangTuple [(ErlangAtom "error"),
                                                                                  payload_204,
                                                                                  stack_205]) ->
                                                                      let
                                                                        tup_el_207 =
                                                                          (ErlangTuple
                                                                             [payload_204,
                                                                              stack_205])
                                                                      in
                                                                        (ErlangTuple
                                                                           [(ErlangAtom
                                                                               "EXIT"),
                                                                            tup_el_207])
                                                                    (ErlangTuple [(ErlangAtom "exit"),
                                                                                  payload_210,
                                                                                  _]) ->
                                                                      (ErlangTuple
                                                                         [(ErlangAtom
                                                                             "EXIT"),
                                                                          payload_210])
                                                                    ex_202 ->
                                                                      (EXC.raise
                                                                         ex_202)))
                                                        in
                                                          case match_expr_213 of
                                                            (ErlangTuple [(ErlangAtom "EXIT"),
                                                                          (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                      (ErlangAtom "a")]),
                                                                                        _])]) ->
                                                              (ErlangAtom "ok")
                                                            _ ->
                                                              (EXC.badmatch
                                                                 match_expr_213)
                                                      _ ->
                                                        (EXC.badmatch
                                                           match_expr_189)
                                                _ ->
                                                  (EXC.badmatch match_expr_165)
                                          _ -> (EXC.badmatch match_expr_141)
                                    _ -> (EXC.badmatch match_expr_125)
                              _ -> (EXC.badmatch match_expr_112)
                        _ -> (EXC.badmatch match_expr_99)
                  _ -> (EXC.badmatch match_expr_59)
            _ -> (EXC.badmatch match_expr_42)
      _ -> (EXC.badmatch match_expr_25)
erlps__t_intersect_with__1 [arg_214] = (EXC.function_clause unit)
erlps__t_intersect_with__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__t_size_1__1 :: ErlangFun
erlps__t_size_1__1 [config_0] | (isEList config_0) =
  let    arg_1 = (ErlangMap Map.empty)
  in let match_expr_2 = (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_1])
  in
    case match_expr_2 of
      (ErlangInt 0) ->
        let   
          lc_src_5 =
            (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 10)])
        in let
          arg_4 =
            (flmap
               (\ lc_9 ->
                  case lc_9 of
                    i_8 ->
                      let    tup_el_12 = (make_string "k")
                      in let tup_el_11 = (ErlangTuple [tup_el_12, i_8])
                      in let lc_ret_10 = (ErlangTuple [tup_el_11, i_8])
                      in (ErlangCons lc_ret_10 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               lc_src_5)
        in let arg_3 = (BIF.maps__from_list__1 [arg_4])
        in let match_expr_15 = (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_3])
        in
          case match_expr_15 of
            (ErlangInt 10) ->
              let   
                lc_src_18 =
                  (BIF.do_remote_fun_call "Lists" "erlps__seq__2" [(ErlangInt 1), (ErlangInt 20)])
              in let
                arg_17 =
                  (flmap
                     (\ lc_22 ->
                        case lc_22 of
                          i_21 ->
                            let    tup_el_25 = (make_string "k")
                            in let tup_el_24 = (ErlangTuple [tup_el_25, i_21])
                            in let lc_ret_23 = (ErlangTuple [tup_el_24, i_21])
                            in (ErlangCons lc_ret_23 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     lc_src_18)
              in let arg_16 = (BIF.maps__from_list__1 [arg_17])
              in let match_expr_28 = (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_16])
              in
                case match_expr_28 of
                  (ErlangInt 20) ->
                    let   
                      lc_src_31 =
                        (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                           [(ErlangInt 1), (ErlangInt 30)])
                    in let
                      arg_30 =
                        (flmap
                           (\ lc_35 ->
                              case lc_35 of
                                i_34 ->
                                  let    tup_el_38 = (make_string "k")
                                  in let
                                    tup_el_37 = (ErlangTuple [tup_el_38, i_34])
                                  in let
                                    lc_ret_36 = (ErlangTuple [tup_el_37, i_34])
                                  in (ErlangCons lc_ret_36 ErlangEmptyList)
                                _ -> ErlangEmptyList)
                           lc_src_31)
                    in let arg_29 = (BIF.maps__from_list__1 [arg_30])
                    in let match_expr_41 = (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_29])
                    in
                      case match_expr_41 of
                        (ErlangInt 30) ->
                          let   
                            lc_src_44 =
                              (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                 [(ErlangInt 1), (ErlangInt 40)])
                          in let
                            arg_43 =
                              (flmap
                                 (\ lc_48 ->
                                    case lc_48 of
                                      i_47 ->
                                        let    tup_el_51 = (make_string "k")
                                        in let
                                          tup_el_50 =
                                            (ErlangTuple [tup_el_51, i_47])
                                        in let
                                          lc_ret_49 =
                                            (ErlangTuple [tup_el_50, i_47])
                                        in
                                          (ErlangCons lc_ret_49 ErlangEmptyList)
                                      _ -> ErlangEmptyList)
                                 lc_src_44)
                          in let arg_42 = (BIF.maps__from_list__1 [arg_43])
                          in let
                            match_expr_54 =
                              (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_42])
                          in
                            case match_expr_54 of
                              (ErlangInt 40) ->
                                let   
                                  lc_src_57 =
                                    (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                       [(ErlangInt 1), (ErlangInt 50)])
                                in let
                                  arg_56 =
                                    (flmap
                                       (\ lc_61 ->
                                          case lc_61 of
                                            i_60 ->
                                              let    tup_el_64 = (make_string "k")
                                              in let
                                                tup_el_63 =
                                                  (ErlangTuple
                                                     [tup_el_64, i_60])
                                              in let
                                                lc_ret_62 =
                                                  (ErlangTuple
                                                     [tup_el_63, i_60])
                                              in
                                                (ErlangCons lc_ret_62
                                                   ErlangEmptyList)
                                            _ -> ErlangEmptyList)
                                       lc_src_57)
                                in let
                                  arg_55 = (BIF.maps__from_list__1 [arg_56])
                                in let
                                  match_expr_67 =
                                    (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_55])
                                in
                                  case match_expr_67 of
                                    (ErlangInt 50) ->
                                      let   
                                        lc_src_70 =
                                          (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                             [(ErlangInt 1), (ErlangInt 60)])
                                      in let
                                        arg_69 =
                                          (flmap
                                             (\ lc_74 ->
                                                case lc_74 of
                                                  i_73 ->
                                                    let   
                                                      tup_el_77 =
                                                        (make_string "k")
                                                    in let
                                                      tup_el_76 =
                                                        (ErlangTuple
                                                           [tup_el_77, i_73])
                                                    in let
                                                      lc_ret_75 =
                                                        (ErlangTuple
                                                           [tup_el_76, i_73])
                                                    in
                                                      (ErlangCons lc_ret_75
                                                         ErlangEmptyList)
                                                  _ -> ErlangEmptyList)
                                             lc_src_70)
                                      in let
                                        arg_68 =
                                          (BIF.maps__from_list__1 [arg_69])
                                      in let
                                        match_expr_80 =
                                          (BIF.do_remote_fun_call "Maps" "erlps__size__1" [arg_68])
                                      in
                                        case match_expr_80 of
                                          (ErlangInt 60) ->
                                            let   
                                              lc_src_83 =
                                                (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
                                                   [(ErlangInt 1),
                                                    (ErlangInt 600)])
                                            in let
                                              arg_82 =
                                                (flmap
                                                   (\ lc_87 ->
                                                      case lc_87 of
                                                        i_86 ->
                                                          let   
                                                            tup_el_90 =
                                                              (make_string "k")
                                                          in let
                                                            tup_el_89 =
                                                              (ErlangTuple
                                                                 [tup_el_90,
                                                                  i_86])
                                                          in let
                                                            lc_ret_88 =
                                                              (ErlangTuple
                                                                 [tup_el_89,
                                                                  i_86])
                                                          in
                                                            (ErlangCons
                                                               lc_ret_88
                                                               ErlangEmptyList)
                                                        _ -> ErlangEmptyList)
                                                   lc_src_83)
                                            in let
                                              arg_81 =
                                                (BIF.maps__from_list__1
                                                   [arg_82])
                                            in let
                                              match_expr_93 =
                                                (BIF.do_remote_fun_call "Maps" "erlps__size__1"
                                                   [arg_81])
                                            in
                                              case match_expr_93 of
                                                (ErlangInt 600) ->
                                                  let
                                                    match_expr_108 =
                                                      (EXC.tryCatch
                                                         (\ _ ->
                                                            let
                                                              arg_94 =
                                                                (erlps__id__1
                                                                   [(ErlangAtom
                                                                       "a")])
                                                            in
                                                              (BIF.do_remote_fun_call
                                                                 "Maps" "erlps__size__1" [arg_94]))
                                                         (\ ex_97 ->
                                                            case ex_97 of
                                                              (ErlangTuple [(ErlangAtom "throw"),
                                                                            payload_98,
                                                                            _]) ->
                                                                payload_98
                                                              (ErlangTuple [(ErlangAtom "error"),
                                                                            payload_99,
                                                                            stack_100]) ->
                                                                let
                                                                  tup_el_102 =
                                                                    (ErlangTuple
                                                                       [payload_99,
                                                                        stack_100])
                                                                in
                                                                  (ErlangTuple
                                                                     [(ErlangAtom
                                                                         "EXIT"),
                                                                      tup_el_102])
                                                              (ErlangTuple [(ErlangAtom "exit"),
                                                                            payload_105,
                                                                            _]) ->
                                                                (ErlangTuple
                                                                   [(ErlangAtom
                                                                       "EXIT"),
                                                                    payload_105])
                                                              ex_97 ->
                                                                (EXC.raise
                                                                   ex_97)))
                                                  in
                                                    case match_expr_108 of
                                                      (ErlangTuple [(ErlangAtom "EXIT"),
                                                                    (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                (ErlangAtom "a")]),
                                                                                  _])]) ->
                                                        let
                                                          match_expr_124 =
                                                            (EXC.tryCatch
                                                               (\ _ ->
                                                                  let   
                                                                    arg_110 =
                                                                      (ErlangBinary
                                                                         (BIN.concat
                                                                            []))
                                                                  in let
                                                                    arg_109 =
                                                                      (erlps__id__1
                                                                         [arg_110])
                                                                  in
                                                                    (BIF.do_remote_fun_call
                                                                       "Maps" "erlps__size__1"
                                                                       [arg_109]))
                                                               (\ ex_112 ->
                                                                  case ex_112 of
                                                                    (ErlangTuple [(ErlangAtom "throw"),
                                                                                  payload_113,
                                                                                  _]) ->
                                                                      payload_113
                                                                    (ErlangTuple [(ErlangAtom "error"),
                                                                                  payload_114,
                                                                                  stack_115]) ->
                                                                      let
                                                                        tup_el_117 =
                                                                          (ErlangTuple
                                                                             [payload_114,
                                                                              stack_115])
                                                                      in
                                                                        (ErlangTuple
                                                                           [(ErlangAtom
                                                                               "EXIT"),
                                                                            tup_el_117])
                                                                    (ErlangTuple [(ErlangAtom "exit"),
                                                                                  payload_120,
                                                                                  _]) ->
                                                                      (ErlangTuple
                                                                         [(ErlangAtom
                                                                             "EXIT"),
                                                                          payload_120])
                                                                    ex_112 ->
                                                                      (EXC.raise
                                                                         ex_112)))
                                                        in
                                                          case match_expr_124 of
                                                            (ErlangTuple [(ErlangAtom "EXIT"),
                                                                          (ErlangTuple [(ErlangTuple [(ErlangAtom "badmap"),
                                                                                                      (ErlangBinary bin_e_123)]),
                                                                                        _])]) | (BIN.empty
                                                                                                   bin_e_123) ->
                                                              (ErlangAtom "ok")
                                                            _ ->
                                                              (EXC.badmatch
                                                                 match_expr_124)
                                                      _ ->
                                                        (EXC.badmatch
                                                           match_expr_108)
                                                _ ->
                                                  (EXC.badmatch match_expr_93)
                                          _ -> (EXC.badmatch match_expr_80)
                                    _ -> (EXC.badmatch match_expr_67)
                              _ -> (EXC.badmatch match_expr_54)
                        _ -> (EXC.badmatch match_expr_41)
                  _ -> (EXC.badmatch match_expr_28)
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_2)
erlps__t_size_1__1 [arg_125] = (EXC.function_clause unit)
erlps__t_size_1__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__id__1 :: ErlangFun
erlps__id__1 [i_0] = i_0
erlps__id__1 [arg_1] = (EXC.function_clause unit)
erlps__id__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)