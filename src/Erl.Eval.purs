module Erl.Eval(erlps__exprs__2, erlps__exprs__3,
                erlps__exprs__4, erlps__expr__2, erlps__expr__3, erlps__expr__4,
                erlps__expr__5, erlps__expr_list__2, erlps__expr_list__3,
                erlps__expr_list__4, erlps__new_bindings__0, erlps__bindings__1,
                erlps__binding__2, erlps__add_binding__3, erlps__del_binding__2,
                erlps__extended_parse_exprs__1, erlps__extended_parse_term__1,
                erlps__subst_values_for_vars__2, erlps__is_constant_expr__1,
                erlps__partial_eval__1, erlps__eval_str__1,
                erlps__match_clause__4, erlps__check_command__2,
                erlps__fun_data__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__exprs__2 :: ErlangFun
erlps__exprs__2 [exprs_0, bs_1] =
  let case_2 = (erlps__check_command__2 [exprs_0, bs_1])
  in
    case case_2 of
      (ErlangAtom "ok") ->
        (erlps__exprs__5
           [exprs_0, bs_1, (ErlangAtom "none"), (ErlangAtom "none"),
            (ErlangAtom "none")])
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangTuple [_line_10, _mod_11, error_12])]) ->
        let    arg_18 = (BIF.erlang__self__0 [])
        in let
          arg_17 =
            (BIF.erlang__process_info__2
               [arg_18, (ErlangAtom "current_stacktrace")])
        in let
          arg_15 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_17])
        in
          (BIF.erlang__raise__3 [(ErlangAtom "error"), error_12, arg_15])
      something_else -> (EXC.case_clause something_else)
erlps__exprs__2 [arg_20, arg_21] = (EXC.function_clause unit)
erlps__exprs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__3 :: ErlangFun
erlps__exprs__3 [exprs_0, bs_1, lf_2] =
  (erlps__exprs__5
     [exprs_0, bs_1, lf_2, (ErlangAtom "none"), (ErlangAtom "none")])
erlps__exprs__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__exprs__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__4 :: ErlangFun
erlps__exprs__4 [exprs_0, bs_1, lf_2, ef_3] =
  (erlps__exprs__5
     [exprs_0, bs_1, lf_2, ef_3, (ErlangAtom "none")])
erlps__exprs__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__exprs__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__5 :: ErlangFun
erlps__exprs__5 [(ErlangCons e_0 (ErlangEmptyList)), bs0_1, lf_2,
                 ef_3, rbs_4]
  =
  (erlps__expr__5 [e_0, bs0_1, lf_2, ef_3, rbs_4])
erlps__exprs__5 [(ErlangCons e_0 es_1), bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [e_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), _v_12, bs_13]) ->
        (erlps__exprs__5 [es_1, bs_13, lf_3, ef_4, rbs_5])
      _ -> (EXC.badmatch match_expr_14)
erlps__exprs__5 [arg_20, arg_21, arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__exprs__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__2 :: ErlangFun
erlps__expr__2 [e_0, bs_1] =
  let
    case_2 =
      (erlps__check_command__2
         [(ErlangCons e_0 ErlangEmptyList), bs_1])
  in
    case case_2 of
      (ErlangAtom "ok") ->
        (erlps__expr__5
           [e_0, bs_1, (ErlangAtom "none"), (ErlangAtom "none"),
            (ErlangAtom "none")])
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangTuple [_line_12, _mod_13, error_14])]) ->
        let    arg_20 = (BIF.erlang__self__0 [])
        in let
          arg_19 =
            (BIF.erlang__process_info__2
               [arg_20, (ErlangAtom "current_stacktrace")])
        in let
          arg_17 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_19])
        in
          (BIF.erlang__raise__3 [(ErlangAtom "error"), error_14, arg_17])
      something_else -> (EXC.case_clause something_else)
erlps__expr__2 [arg_22, arg_23] = (EXC.function_clause unit)
erlps__expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__3 :: ErlangFun
erlps__expr__3 [e_0, bs_1, lf_2] =
  (erlps__expr__5
     [e_0, bs_1, lf_2, (ErlangAtom "none"), (ErlangAtom "none")])
erlps__expr__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__expr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__4 :: ErlangFun
erlps__expr__4 [e_0, bs_1, lf_2, ef_3] =
  (erlps__expr__5 [e_0, bs_1, lf_2, ef_3, (ErlangAtom "none")])
erlps__expr__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__expr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_command__2 :: ErlangFun
erlps__check_command__2 [es_0, bs_1] =
  let    arg_9 = (erlps__bindings__1 [bs_1])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Erl.Lint" "erlps__exprs_opt__3"
         [es_0, arg_9,
          (ErlangCons (ErlangAtom "bitlevel_binaries")
             (ErlangCons (ErlangAtom "binary_comprehension")
                ErlangEmptyList))])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "ok"), _ws_12]) -> (ErlangAtom "ok")
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangCons (ErlangTuple [_file_13,
                                              (ErlangCons error_14 _)]) (ErlangEmptyList)),
                    _ws_15]) ->
        (ErlangTuple [(ErlangAtom "error"), error_14])
      something_else -> (EXC.case_clause something_else)
erlps__check_command__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__check_command__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_data__1 :: ErlangFun
erlps__fun_data__1 [f_0] | (isEFun f_0) =
  let
    case_1 = (BIF.erlang__fun_info__2 [f_0, (ErlangAtom "module")])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "module"), (ErlangAtom "erl_eval")]) ->
        let case_4 = (BIF.erlang__fun_info__2 [f_0, (ErlangAtom "env")])
        in
          case case_4 of
            (ErlangTuple [(ErlangAtom "env"),
                          (ErlangCons (ErlangTuple [fbs_7, _flf_8, _fef_9,
                                                    fcs_10]) (ErlangEmptyList))]) ->
              (ErlangTuple [(ErlangAtom "fun_data"), fbs_7, fcs_10])
            (ErlangTuple [(ErlangAtom "env"),
                          (ErlangCons (ErlangTuple [fbs_14, _flf_15, _fef_16,
                                                    fcs_17,
                                                    fname_18]) (ErlangEmptyList))]) ->
              (ErlangTuple
                 [(ErlangAtom "named_fun_data"), fbs_14, fname_18, fcs_17])
            something_else -> (EXC.case_clause something_else)
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__fun_data__1 [_t_0] = (ErlangAtom "false")
erlps__fun_data__1 [arg_1] = (EXC.function_clause unit)
erlps__fun_data__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__5 :: ErlangFun
erlps__expr__5 [(ErlangTuple [(ErlangAtom "var"), _, v_0]), bs_1,
                _lf_2, _ef_3, rbs_4]
  =
  let case_5 = (erlps__binding__2 [v_0, bs_1])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "value"), val_8]) ->
        (erlps__ret_expr__3 [val_8, bs_1, rbs_4])
      (ErlangAtom "unbound") ->
        let    arg_13 = (ErlangTuple [(ErlangAtom "unbound"), v_0])
        in let arg_19 = (BIF.erlang__self__0 [])
        in let
          arg_18 =
            (BIF.erlang__process_info__2
               [arg_19, (ErlangAtom "current_stacktrace")])
        in let
          arg_16 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_18])
        in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_13, arg_16])
      something_else -> (EXC.case_clause something_else)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "char"), _, c_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [c_0, bs_1, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "integer"), _, i_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [i_0, bs_1, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "float"), _, f_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [f_0, bs_1, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "atom"), _, a_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [a_0, bs_1, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "string"), _, s_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [s_0, bs_1, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "nil"), _]), bs_0,
                _lf_1, _ef_2, rbs_3]
  =
  (erlps__ret_expr__3 [ErlangEmptyList, bs_0, rbs_3])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "cons"), _, h0_0,
                              t0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [h0_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), h_11, bs1_12]) ->
        let
          match_expr_21 =
            (erlps__expr__5 [t0_1, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
        in
          case match_expr_21 of
            (ErlangTuple [(ErlangAtom "value"), t_19, bs2_20]) ->
              let arg_25 = (erlps__merge_bindings__2 [bs1_12, bs2_20])
              in (erlps__ret_expr__3 [(ErlangCons h_11 t_19), arg_25, rbs_5])
            _ -> (EXC.badmatch match_expr_21)
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "lc"), _, e_0, qs_1]),
                bs_2, lf_3, ef_4, rbs_5]
  =
  (erlps__eval_lc__6 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "bc"), _, e_0, qs_1]),
                bs_2, lf_3, ef_4, rbs_5]
  =
  (erlps__eval_bc__6 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "tuple"), _, es_0]),
                bs0_1, lf_2, ef_3, rbs_4]
  =
  let
    match_expr_11 = (erlps__expr_list__4 [es_0, bs0_1, lf_2, ef_3])
  in
    case match_expr_11 of
      (ErlangTuple [vs_9, bs_10]) ->
        let arg_12 = (BIF.erlang__list_to_tuple__1 [vs_9])
        in (erlps__ret_expr__3 [arg_12, bs_10, rbs_4])
      _ -> (EXC.badmatch match_expr_11)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "record_field"), _, _,
                              name_0, _]),
                _bs_1, _lf_2, _ef_3, _rbs_4]
  =
  let   
    arg_6 = (ErlangTuple [(ErlangAtom "undef_record"), name_0])
  in let arg_12 = (BIF.erlang__self__0 [])
  in let
    arg_11 =
      (BIF.erlang__process_info__2
         [arg_12, (ErlangAtom "current_stacktrace")])
  in let
    arg_9 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_11])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_6, arg_9])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "record_index"), _,
                              name_0, _]),
                _bs_1, _lf_2, _ef_3, _rbs_4]
  =
  let   
    arg_6 = (ErlangTuple [(ErlangAtom "undef_record"), name_0])
  in let arg_12 = (BIF.erlang__self__0 [])
  in let
    arg_11 =
      (BIF.erlang__process_info__2
         [arg_12, (ErlangAtom "current_stacktrace")])
  in let
    arg_9 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_11])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_6, arg_9])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "record"), _, name_0,
                              _]),
                _bs_1, _lf_2, _ef_3, _rbs_4]
  =
  let   
    arg_6 = (ErlangTuple [(ErlangAtom "undef_record"), name_0])
  in let arg_12 = (BIF.erlang__self__0 [])
  in let
    arg_11 =
      (BIF.erlang__process_info__2
         [arg_12, (ErlangAtom "current_stacktrace")])
  in let
    arg_9 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_11])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_6, arg_9])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "record"), _, _,
                              name_0, _]),
                _bs_1, _lf_2, _ef_3, _rbs_4]
  =
  let   
    arg_6 = (ErlangTuple [(ErlangAtom "undef_record"), name_0])
  in let arg_12 = (BIF.erlang__self__0 [])
  in let
    arg_11 =
      (BIF.erlang__process_info__2
         [arg_12, (ErlangAtom "current_stacktrace")])
  in let
    arg_9 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_11])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_6, arg_9])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "map"), _, binding_0,
                              es_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5
         [binding_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), map0_11, bs1_12]) ->
        let
          match_expr_20 =
            (erlps__eval_map_fields__4 [es_1, bs0_2, lf_3, ef_4])
        in
          case match_expr_20 of
            (ErlangTuple [vs_18, bs2_19]) ->
              let   
                match_expr_24 =
                  (BIF.maps__put__3
                     [(ErlangAtom "k"), (ErlangAtom "v"), map0_11])
              in let
                arg_25 =
                  (ErlangFun 2
                     let
                       lambda_26 [(ErlangTuple [(ErlangAtom "map_assoc"), k_29,
                                                v_30]),
                                  mi_31]
                         =
                         (BIF.maps__put__3 [k_29, v_30, mi_31])
                       lambda_26 [(ErlangTuple [(ErlangAtom "map_exact"), k_35,
                                                v_36]),
                                  mi_37]
                         =
                         (BIF.maps__update__3 [k_35, v_36, mi_37])
                       lambda_26 [arg_27, arg_28] = (EXC.function_clause unit)
                       lambda_26 args =
                         (EXC.badarity (ErlangFun 2 lambda_26) args)
                     in lambda_26)
              in let
                map1_43 =
                  (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
                     [arg_25, map0_11, vs_18])
              in let arg_45 = (erlps__merge_bindings__2 [bs2_19, bs1_12])
              in (erlps__ret_expr__3 [map1_43, arg_45, rbs_5])
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "map"), _, es_0]),
                bs0_1, lf_2, ef_3, rbs_4]
  =
  let
    match_expr_11 =
      (erlps__eval_map_fields__4 [es_0, bs0_1, lf_2, ef_3])
  in
    case match_expr_11 of
      (ErlangTuple [vs_9, bs_10]) ->
        let   
          arg_13 =
            (ErlangFun 2
               let
                 lambda_14 [(ErlangTuple [(ErlangAtom "map_assoc"), k_17,
                                          v_18]),
                            mi_19]
                   =
                   (BIF.maps__put__3 [k_17, v_18, mi_19])
                 lambda_14 [arg_15, arg_16] = (EXC.function_clause unit)
                 lambda_14 args = (EXC.badarity (ErlangFun 2 lambda_14) args)
               in lambda_14)
        in let
          arg_23 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
        in let
          arg_12 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_13, arg_23, vs_9])
        in (erlps__ret_expr__3 [arg_12, bs_10, rbs_4])
      _ -> (EXC.badmatch match_expr_11)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "block"), _, es_0]),
                bs_1, lf_2, ef_3, rbs_4]
  =
  (erlps__exprs__5 [es_0, bs_1, lf_2, ef_3, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "if"), _, cs_0]), bs_1,
                lf_2, ef_3, rbs_4]
  =
  (erlps__if_clauses__5 [cs_0, bs_1, lf_2, ef_3, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "case"), _, e_0,
                              cs_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [e_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), val_11, bs_12]) ->
        (erlps__case_clauses__6 [val_11, cs_1, bs_12, lf_3, ef_4, rbs_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "try"), _, b_0,
                              cases_1, catches_2, ab_3]),
                bs_4, lf_5, ef_6, rbs_7]
  =
  (erlps__try_clauses__8
     [b_0, cases_1, catches_2, ab_3, bs_4, lf_5, ef_6, rbs_7])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0]),
                bs_1, lf_2, ef_3, rbs_4]
  =
  (erlps__receive_clauses__5 [cs_0, bs_1, lf_2, ef_3, rbs_4])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0,
                              e_1, tb_2]),
                bs0_3, lf_4, ef_5, rbs_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [e_1, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), t_12, bs_13]) ->
        let arg_17 = (ErlangTuple [tb_2, bs_13])
        in
          (erlps__receive_clauses__7
             [t_12, cs_0, arg_17, bs0_3, lf_4, ef_5, rbs_6])
      _ -> (EXC.badmatch match_expr_14)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "fun"), _line_0,
                              (ErlangTuple [(ErlangAtom "function"), mod0_1,
                                            name0_2, arity0_3])]),
                bs0_4, lf_5, ef_6, rbs_7]
  =
  let
    match_expr_22 =
      (erlps__expr_list__4
         [(ErlangCons mod0_1
             (ErlangCons name0_2 (ErlangCons arity0_3 ErlangEmptyList))),
          bs0_4, lf_5, ef_6])
  in
    case match_expr_22 of
      (ErlangTuple [(ErlangCons mod_18 (ErlangCons name_19 (ErlangCons arity_20 (ErlangEmptyList)))),
                    bs_21]) ->
        let f_26 = (BIF.erlang__make_fun__3 [mod_18, name_19, arity_20])
        in (erlps__ret_expr__3 [f_26, bs_21, rbs_7])
      _ -> (EXC.badmatch match_expr_22)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "fun"), _line_0,
                              (ErlangTuple [(ErlangAtom "function"), name_1,
                                            arity_2])]),
                _bs0_3, _lf_4, _ef_5, _rbs_6]
  =
  let   
    head_10 =
      (ErlangTuple [(ErlangAtom "erl_eval"), name_1, arity_2])
  in let arg_17 = (BIF.erlang__self__0 [])
  in let
    arg_16 =
      (BIF.erlang__process_info__2
         [arg_17, (ErlangAtom "current_stacktrace")])
  in let
    tail_14 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_16])
  in
    (BIF.erlang__raise__3
       [(ErlangAtom "error"), (ErlangAtom "undef"),
        (ErlangCons head_10 tail_14)])
erlps__expr__5 [ex_2@(ErlangTuple [(ErlangAtom "fun"), line_0,
                                   (ErlangTuple [(ErlangAtom "clauses"),
                                                 cs_1])]),
                bs_3, lf_4, ef_5, rbs_6]
  =
  let
    match_expr_10 =
      (erlps__hide_calls__2 [ex_2, (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_10 of
      (ErlangTuple [ex1_9, _]) ->
        let
          match_expr_16 =
            (BIF.do_remote_fun_call "Erl.Lint" "erlps__used_vars__2"
               [(ErlangCons ex1_9 ErlangEmptyList), bs_3])
        in
          case match_expr_16 of
            (ErlangTuple [(ErlangAtom "ok"), used_15]) ->
              let   
                arg_17 =
                  (ErlangFun 2
                     let
                       lambda_18 [k_21, _v_22] =
                         (BIF.lists__member__2 [k_21, used_15])
                       lambda_18 [arg_19, arg_20] = (EXC.function_clause unit)
                       lambda_18 args =
                         (EXC.badarity (ErlangFun 2 lambda_18) args)
                     in lambda_18)
              in let
                en_26 =
                  (BIF.do_remote_fun_call "Orddict" "erlps__filter__2"
                     [arg_17, bs_3])
              in let info_31 = (ErlangTuple [en_26, lf_4, ef_5, cs_1])
              in let arg_35 = (BIF.erlang__hd__1 [cs_1])
              in let
                arg_33 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 3)), arg_35])
              in let case_32 = (BIF.erlang__length__1 [arg_33])
              in let
                f_977 =
                  case case_32 of
                    (ErlangInt num_37) | ((ErlangInt num_37) ==
                                            (ErlangInt (DBI.fromInt 0))) ->
                      (ErlangFun 0
                         let
                           lambda_38 [] =
                             (erlps__eval_fun__2 [ErlangEmptyList, info_31])
                           lambda_38 [] = (EXC.function_clause unit)
                           lambda_38 args =
                             (EXC.badarity (ErlangFun 0 lambda_38) args)
                         in lambda_38)
                    (ErlangInt num_41) | ((ErlangInt num_41) ==
                                            (ErlangInt (DBI.fromInt 1))) ->
                      (ErlangFun 1
                         let
                           lambda_42 [a_44] =
                             (erlps__eval_fun__2
                                [(ErlangCons a_44 ErlangEmptyList), info_31])
                           lambda_42 [arg_43] = (EXC.function_clause unit)
                           lambda_42 args =
                             (EXC.badarity (ErlangFun 1 lambda_42) args)
                         in lambda_42)
                    (ErlangInt num_49) | ((ErlangInt num_49) ==
                                            (ErlangInt (DBI.fromInt 2))) ->
                      (ErlangFun 2
                         let
                           lambda_50 [a_53, b_54] =
                             (erlps__eval_fun__2
                                [(ErlangCons a_53
                                    (ErlangCons b_54 ErlangEmptyList)),
                                 info_31])
                           lambda_50 [arg_51, arg_52] =
                             (EXC.function_clause unit)
                           lambda_50 args =
                             (EXC.badarity (ErlangFun 2 lambda_50) args)
                         in lambda_50)
                    (ErlangInt num_61) | ((ErlangInt num_61) ==
                                            (ErlangInt (DBI.fromInt 3))) ->
                      (ErlangFun 3
                         let
                           lambda_62 [a_66, b_67, c_68] =
                             (erlps__eval_fun__2
                                [(ErlangCons a_66
                                    (ErlangCons b_67
                                       (ErlangCons c_68 ErlangEmptyList))),
                                 info_31])
                           lambda_62 [arg_63, arg_64, arg_65] =
                             (EXC.function_clause unit)
                           lambda_62 args =
                             (EXC.badarity (ErlangFun 3 lambda_62) args)
                         in lambda_62)
                    (ErlangInt num_77) | ((ErlangInt num_77) ==
                                            (ErlangInt (DBI.fromInt 4))) ->
                      (ErlangFun 4
                         let
                           lambda_78 [a_83, b_84, c_85, d_86] =
                             (erlps__eval_fun__2
                                [(ErlangCons a_83
                                    (ErlangCons b_84
                                       (ErlangCons c_85
                                          (ErlangCons d_86 ErlangEmptyList)))),
                                 info_31])
                           lambda_78 [arg_79, arg_80, arg_81, arg_82] =
                             (EXC.function_clause unit)
                           lambda_78 args =
                             (EXC.badarity (ErlangFun 4 lambda_78) args)
                         in lambda_78)
                    (ErlangInt num_97) | ((ErlangInt num_97) ==
                                            (ErlangInt (DBI.fromInt 5))) ->
                      (ErlangFun 5
                         let
                           lambda_98 [a_104, b_105, c_106, d_107, e_108] =
                             (erlps__eval_fun__2
                                [(ErlangCons a_104
                                    (ErlangCons b_105
                                       (ErlangCons c_106
                                          (ErlangCons d_107
                                             (ErlangCons e_108
                                                ErlangEmptyList))))),
                                 info_31])
                           lambda_98 [arg_99, arg_100, arg_101, arg_102,
                                      arg_103]
                             =
                             (EXC.function_clause unit)
                           lambda_98 args =
                             (EXC.badarity (ErlangFun 5 lambda_98) args)
                         in lambda_98)
                    (ErlangInt num_121) | ((ErlangInt num_121) ==
                                             (ErlangInt (DBI.fromInt 6))) ->
                      (ErlangFun 6
                         let
                           lambda_122 [a_129, b_130, c_131, d_132, e_133, f_134]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_129
                                    (ErlangCons b_130
                                       (ErlangCons c_131
                                          (ErlangCons d_132
                                             (ErlangCons e_133
                                                (ErlangCons f_134
                                                   ErlangEmptyList)))))),
                                 info_31])
                           lambda_122 [arg_123, arg_124, arg_125, arg_126,
                                       arg_127, arg_128]
                             =
                             (EXC.function_clause unit)
                           lambda_122 args =
                             (EXC.badarity (ErlangFun 6 lambda_122) args)
                         in lambda_122)
                    (ErlangInt num_149) | ((ErlangInt num_149) ==
                                             (ErlangInt (DBI.fromInt 7))) ->
                      (ErlangFun 7
                         let
                           lambda_150 [a_158, b_159, c_160, d_161, e_162, f_163,
                                       g_164]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_158
                                    (ErlangCons b_159
                                       (ErlangCons c_160
                                          (ErlangCons d_161
                                             (ErlangCons e_162
                                                (ErlangCons f_163
                                                   (ErlangCons g_164
                                                      ErlangEmptyList))))))),
                                 info_31])
                           lambda_150 [arg_151, arg_152, arg_153, arg_154,
                                       arg_155, arg_156, arg_157]
                             =
                             (EXC.function_clause unit)
                           lambda_150 args =
                             (EXC.badarity (ErlangFun 7 lambda_150) args)
                         in lambda_150)
                    (ErlangInt num_181) | ((ErlangInt num_181) ==
                                             (ErlangInt (DBI.fromInt 8))) ->
                      (ErlangFun 8
                         let
                           lambda_182 [a_191, b_192, c_193, d_194, e_195, f_196,
                                       g_197, h_198]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_191
                                    (ErlangCons b_192
                                       (ErlangCons c_193
                                          (ErlangCons d_194
                                             (ErlangCons e_195
                                                (ErlangCons f_196
                                                   (ErlangCons g_197
                                                      (ErlangCons h_198
                                                         ErlangEmptyList)))))))),
                                 info_31])
                           lambda_182 [arg_183, arg_184, arg_185, arg_186,
                                       arg_187, arg_188, arg_189, arg_190]
                             =
                             (EXC.function_clause unit)
                           lambda_182 args =
                             (EXC.badarity (ErlangFun 8 lambda_182) args)
                         in lambda_182)
                    (ErlangInt num_217) | ((ErlangInt num_217) ==
                                             (ErlangInt (DBI.fromInt 9))) ->
                      (ErlangFun 9
                         let
                           lambda_218 [a_228, b_229, c_230, d_231, e_232, f_233,
                                       g_234, h_235, i_236]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_228
                                    (ErlangCons b_229
                                       (ErlangCons c_230
                                          (ErlangCons d_231
                                             (ErlangCons e_232
                                                (ErlangCons f_233
                                                   (ErlangCons g_234
                                                      (ErlangCons h_235
                                                         (ErlangCons i_236
                                                            ErlangEmptyList))))))))),
                                 info_31])
                           lambda_218 [arg_219, arg_220, arg_221, arg_222,
                                       arg_223, arg_224, arg_225, arg_226,
                                       arg_227]
                             =
                             (EXC.function_clause unit)
                           lambda_218 args =
                             (EXC.badarity (ErlangFun 9 lambda_218) args)
                         in lambda_218)
                    (ErlangInt num_257) | ((ErlangInt num_257) ==
                                             (ErlangInt (DBI.fromInt 10))) ->
                      (ErlangFun 10
                         let
                           lambda_258 [a_269, b_270, c_271, d_272, e_273, f_274,
                                       g_275, h_276, i_277, j_278]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_269
                                    (ErlangCons b_270
                                       (ErlangCons c_271
                                          (ErlangCons d_272
                                             (ErlangCons e_273
                                                (ErlangCons f_274
                                                   (ErlangCons g_275
                                                      (ErlangCons h_276
                                                         (ErlangCons i_277
                                                            (ErlangCons j_278
                                                               ErlangEmptyList)))))))))),
                                 info_31])
                           lambda_258 [arg_259, arg_260, arg_261, arg_262,
                                       arg_263, arg_264, arg_265, arg_266,
                                       arg_267, arg_268]
                             =
                             (EXC.function_clause unit)
                           lambda_258 args =
                             (EXC.badarity (ErlangFun 10 lambda_258) args)
                         in lambda_258)
                    (ErlangInt num_301) | ((ErlangInt num_301) ==
                                             (ErlangInt (DBI.fromInt 11))) ->
                      (ErlangFun 11
                         let
                           lambda_302 [a_314, b_315, c_316, d_317, e_318, f_319,
                                       g_320, h_321, i_322, j_323, k_324]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_314
                                    (ErlangCons b_315
                                       (ErlangCons c_316
                                          (ErlangCons d_317
                                             (ErlangCons e_318
                                                (ErlangCons f_319
                                                   (ErlangCons g_320
                                                      (ErlangCons h_321
                                                         (ErlangCons i_322
                                                            (ErlangCons j_323
                                                               (ErlangCons k_324
                                                                  ErlangEmptyList))))))))))),
                                 info_31])
                           lambda_302 [arg_303, arg_304, arg_305, arg_306,
                                       arg_307, arg_308, arg_309, arg_310,
                                       arg_311, arg_312, arg_313]
                             =
                             (EXC.function_clause unit)
                           lambda_302 args =
                             (EXC.badarity (ErlangFun 11 lambda_302) args)
                         in lambda_302)
                    (ErlangInt num_349) | ((ErlangInt num_349) ==
                                             (ErlangInt (DBI.fromInt 12))) ->
                      (ErlangFun 12
                         let
                           lambda_350 [a_363, b_364, c_365, d_366, e_367, f_368,
                                       g_369, h_370, i_371, j_372, k_373, l_374]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_363
                                    (ErlangCons b_364
                                       (ErlangCons c_365
                                          (ErlangCons d_366
                                             (ErlangCons e_367
                                                (ErlangCons f_368
                                                   (ErlangCons g_369
                                                      (ErlangCons h_370
                                                         (ErlangCons i_371
                                                            (ErlangCons j_372
                                                               (ErlangCons k_373
                                                                  (ErlangCons
                                                                     l_374
                                                                     ErlangEmptyList)))))))))))),
                                 info_31])
                           lambda_350 [arg_351, arg_352, arg_353, arg_354,
                                       arg_355, arg_356, arg_357, arg_358,
                                       arg_359, arg_360, arg_361, arg_362]
                             =
                             (EXC.function_clause unit)
                           lambda_350 args =
                             (EXC.badarity (ErlangFun 12 lambda_350) args)
                         in lambda_350)
                    (ErlangInt num_401) | ((ErlangInt num_401) ==
                                             (ErlangInt (DBI.fromInt 13))) ->
                      (ErlangFun 13
                         let
                           lambda_402 [a_416, b_417, c_418, d_419, e_420, f_421,
                                       g_422, h_423, i_424, j_425, k_426, l_427,
                                       m_428]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_416
                                    (ErlangCons b_417
                                       (ErlangCons c_418
                                          (ErlangCons d_419
                                             (ErlangCons e_420
                                                (ErlangCons f_421
                                                   (ErlangCons g_422
                                                      (ErlangCons h_423
                                                         (ErlangCons i_424
                                                            (ErlangCons j_425
                                                               (ErlangCons k_426
                                                                  (ErlangCons
                                                                     l_427
                                                                     (ErlangCons
                                                                        m_428
                                                                        ErlangEmptyList))))))))))))),
                                 info_31])
                           lambda_402 [arg_403, arg_404, arg_405, arg_406,
                                       arg_407, arg_408, arg_409, arg_410,
                                       arg_411, arg_412, arg_413, arg_414,
                                       arg_415]
                             =
                             (EXC.function_clause unit)
                           lambda_402 args =
                             (EXC.badarity (ErlangFun 13 lambda_402) args)
                         in lambda_402)
                    (ErlangInt num_457) | ((ErlangInt num_457) ==
                                             (ErlangInt (DBI.fromInt 14))) ->
                      (ErlangFun 14
                         let
                           lambda_458 [a_473, b_474, c_475, d_476, e_477, f_478,
                                       g_479, h_480, i_481, j_482, k_483, l_484,
                                       m_485, n_486]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_473
                                    (ErlangCons b_474
                                       (ErlangCons c_475
                                          (ErlangCons d_476
                                             (ErlangCons e_477
                                                (ErlangCons f_478
                                                   (ErlangCons g_479
                                                      (ErlangCons h_480
                                                         (ErlangCons i_481
                                                            (ErlangCons j_482
                                                               (ErlangCons k_483
                                                                  (ErlangCons
                                                                     l_484
                                                                     (ErlangCons
                                                                        m_485
                                                                        (ErlangCons
                                                                           n_486
                                                                           ErlangEmptyList)))))))))))))),
                                 info_31])
                           lambda_458 [arg_459, arg_460, arg_461, arg_462,
                                       arg_463, arg_464, arg_465, arg_466,
                                       arg_467, arg_468, arg_469, arg_470,
                                       arg_471, arg_472]
                             =
                             (EXC.function_clause unit)
                           lambda_458 args =
                             (EXC.badarity (ErlangFun 14 lambda_458) args)
                         in lambda_458)
                    (ErlangInt num_517) | ((ErlangInt num_517) ==
                                             (ErlangInt (DBI.fromInt 15))) ->
                      (ErlangFun 15
                         let
                           lambda_518 [a_534, b_535, c_536, d_537, e_538, f_539,
                                       g_540, h_541, i_542, j_543, k_544, l_545,
                                       m_546, n_547, o_548]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_534
                                    (ErlangCons b_535
                                       (ErlangCons c_536
                                          (ErlangCons d_537
                                             (ErlangCons e_538
                                                (ErlangCons f_539
                                                   (ErlangCons g_540
                                                      (ErlangCons h_541
                                                         (ErlangCons i_542
                                                            (ErlangCons j_543
                                                               (ErlangCons k_544
                                                                  (ErlangCons
                                                                     l_545
                                                                     (ErlangCons
                                                                        m_546
                                                                        (ErlangCons
                                                                           n_547
                                                                           (ErlangCons
                                                                              o_548
                                                                              ErlangEmptyList))))))))))))))),
                                 info_31])
                           lambda_518 [arg_519, arg_520, arg_521, arg_522,
                                       arg_523, arg_524, arg_525, arg_526,
                                       arg_527, arg_528, arg_529, arg_530,
                                       arg_531, arg_532, arg_533]
                             =
                             (EXC.function_clause unit)
                           lambda_518 args =
                             (EXC.badarity (ErlangFun 15 lambda_518) args)
                         in lambda_518)
                    (ErlangInt num_581) | ((ErlangInt num_581) ==
                                             (ErlangInt (DBI.fromInt 16))) ->
                      (ErlangFun 16
                         let
                           lambda_582 [a_599, b_600, c_601, d_602, e_603, f_604,
                                       g_605, h_606, i_607, j_608, k_609, l_610,
                                       m_611, n_612, o_613, p_614]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_599
                                    (ErlangCons b_600
                                       (ErlangCons c_601
                                          (ErlangCons d_602
                                             (ErlangCons e_603
                                                (ErlangCons f_604
                                                   (ErlangCons g_605
                                                      (ErlangCons h_606
                                                         (ErlangCons i_607
                                                            (ErlangCons j_608
                                                               (ErlangCons k_609
                                                                  (ErlangCons
                                                                     l_610
                                                                     (ErlangCons
                                                                        m_611
                                                                        (ErlangCons
                                                                           n_612
                                                                           (ErlangCons
                                                                              o_613
                                                                              (ErlangCons
                                                                                 p_614
                                                                                 ErlangEmptyList)))))))))))))))),
                                 info_31])
                           lambda_582 [arg_583, arg_584, arg_585, arg_586,
                                       arg_587, arg_588, arg_589, arg_590,
                                       arg_591, arg_592, arg_593, arg_594,
                                       arg_595, arg_596, arg_597, arg_598]
                             =
                             (EXC.function_clause unit)
                           lambda_582 args =
                             (EXC.badarity (ErlangFun 16 lambda_582) args)
                         in lambda_582)
                    (ErlangInt num_649) | ((ErlangInt num_649) ==
                                             (ErlangInt (DBI.fromInt 17))) ->
                      (ErlangFun 17
                         let
                           lambda_650 [a_668, b_669, c_670, d_671, e_672, f_673,
                                       g_674, h_675, i_676, j_677, k_678, l_679,
                                       m_680, n_681, o_682, p_683, q_684]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_668
                                    (ErlangCons b_669
                                       (ErlangCons c_670
                                          (ErlangCons d_671
                                             (ErlangCons e_672
                                                (ErlangCons f_673
                                                   (ErlangCons g_674
                                                      (ErlangCons h_675
                                                         (ErlangCons i_676
                                                            (ErlangCons j_677
                                                               (ErlangCons k_678
                                                                  (ErlangCons
                                                                     l_679
                                                                     (ErlangCons
                                                                        m_680
                                                                        (ErlangCons
                                                                           n_681
                                                                           (ErlangCons
                                                                              o_682
                                                                              (ErlangCons
                                                                                 p_683
                                                                                 (ErlangCons
                                                                                    q_684
                                                                                    ErlangEmptyList))))))))))))))))),
                                 info_31])
                           lambda_650 [arg_651, arg_652, arg_653, arg_654,
                                       arg_655, arg_656, arg_657, arg_658,
                                       arg_659, arg_660, arg_661, arg_662,
                                       arg_663, arg_664, arg_665, arg_666,
                                       arg_667]
                             =
                             (EXC.function_clause unit)
                           lambda_650 args =
                             (EXC.badarity (ErlangFun 17 lambda_650) args)
                         in lambda_650)
                    (ErlangInt num_721) | ((ErlangInt num_721) ==
                                             (ErlangInt (DBI.fromInt 18))) ->
                      (ErlangFun 18
                         let
                           lambda_722 [a_741, b_742, c_743, d_744, e_745, f_746,
                                       g_747, h_748, i_749, j_750, k_751, l_752,
                                       m_753, n_754, o_755, p_756, q_757, r_758]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_741
                                    (ErlangCons b_742
                                       (ErlangCons c_743
                                          (ErlangCons d_744
                                             (ErlangCons e_745
                                                (ErlangCons f_746
                                                   (ErlangCons g_747
                                                      (ErlangCons h_748
                                                         (ErlangCons i_749
                                                            (ErlangCons j_750
                                                               (ErlangCons k_751
                                                                  (ErlangCons
                                                                     l_752
                                                                     (ErlangCons
                                                                        m_753
                                                                        (ErlangCons
                                                                           n_754
                                                                           (ErlangCons
                                                                              o_755
                                                                              (ErlangCons
                                                                                 p_756
                                                                                 (ErlangCons
                                                                                    q_757
                                                                                    (ErlangCons
                                                                                       r_758
                                                                                       ErlangEmptyList)))))))))))))))))),
                                 info_31])
                           lambda_722 [arg_723, arg_724, arg_725, arg_726,
                                       arg_727, arg_728, arg_729, arg_730,
                                       arg_731, arg_732, arg_733, arg_734,
                                       arg_735, arg_736, arg_737, arg_738,
                                       arg_739, arg_740]
                             =
                             (EXC.function_clause unit)
                           lambda_722 args =
                             (EXC.badarity (ErlangFun 18 lambda_722) args)
                         in lambda_722)
                    (ErlangInt num_797) | ((ErlangInt num_797) ==
                                             (ErlangInt (DBI.fromInt 19))) ->
                      (ErlangFun 19
                         let
                           lambda_798 [a_818, b_819, c_820, d_821, e_822, f_823,
                                       g_824, h_825, i_826, j_827, k_828, l_829,
                                       m_830, n_831, o_832, p_833, q_834, r_835,
                                       s_836]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_818
                                    (ErlangCons b_819
                                       (ErlangCons c_820
                                          (ErlangCons d_821
                                             (ErlangCons e_822
                                                (ErlangCons f_823
                                                   (ErlangCons g_824
                                                      (ErlangCons h_825
                                                         (ErlangCons i_826
                                                            (ErlangCons j_827
                                                               (ErlangCons k_828
                                                                  (ErlangCons
                                                                     l_829
                                                                     (ErlangCons
                                                                        m_830
                                                                        (ErlangCons
                                                                           n_831
                                                                           (ErlangCons
                                                                              o_832
                                                                              (ErlangCons
                                                                                 p_833
                                                                                 (ErlangCons
                                                                                    q_834
                                                                                    (ErlangCons
                                                                                       r_835
                                                                                       (ErlangCons
                                                                                          s_836
                                                                                          ErlangEmptyList))))))))))))))))))),
                                 info_31])
                           lambda_798 [arg_799, arg_800, arg_801, arg_802,
                                       arg_803, arg_804, arg_805, arg_806,
                                       arg_807, arg_808, arg_809, arg_810,
                                       arg_811, arg_812, arg_813, arg_814,
                                       arg_815, arg_816, arg_817]
                             =
                             (EXC.function_clause unit)
                           lambda_798 args =
                             (EXC.badarity (ErlangFun 19 lambda_798) args)
                         in lambda_798)
                    (ErlangInt num_877) | ((ErlangInt num_877) ==
                                             (ErlangInt (DBI.fromInt 20))) ->
                      (ErlangFun 20
                         let
                           lambda_878 [a_899, b_900, c_901, d_902, e_903, f_904,
                                       g_905, h_906, i_907, j_908, k_909, l_910,
                                       m_911, n_912, o_913, p_914, q_915, r_916,
                                       s_917, t_918]
                             =
                             (erlps__eval_fun__2
                                [(ErlangCons a_899
                                    (ErlangCons b_900
                                       (ErlangCons c_901
                                          (ErlangCons d_902
                                             (ErlangCons e_903
                                                (ErlangCons f_904
                                                   (ErlangCons g_905
                                                      (ErlangCons h_906
                                                         (ErlangCons i_907
                                                            (ErlangCons j_908
                                                               (ErlangCons k_909
                                                                  (ErlangCons
                                                                     l_910
                                                                     (ErlangCons
                                                                        m_911
                                                                        (ErlangCons
                                                                           n_912
                                                                           (ErlangCons
                                                                              o_913
                                                                              (ErlangCons
                                                                                 p_914
                                                                                 (ErlangCons
                                                                                    q_915
                                                                                    (ErlangCons
                                                                                       r_916
                                                                                       (ErlangCons
                                                                                          s_917
                                                                                          (ErlangCons
                                                                                             t_918
                                                                                             ErlangEmptyList)))))))))))))))))))),
                                 info_31])
                           lambda_878 [arg_879, arg_880, arg_881, arg_882,
                                       arg_883, arg_884, arg_885, arg_886,
                                       arg_887, arg_888, arg_889, arg_890,
                                       arg_891, arg_892, arg_893, arg_894,
                                       arg_895, arg_896, arg_897, arg_898]
                             =
                             (EXC.function_clause unit)
                           lambda_878 args =
                             (EXC.badarity (ErlangFun 20 lambda_878) args)
                         in lambda_878)
                    _other_961 ->
                      let   
                        l_963 =
                          (BIF.do_remote_fun_call "Erl.Anno"
                             "erlps__location__1" [line_0])
                      in let tup_el_970 = (erlps__to_terms__1 [cs_1])
                      in let
                        tup_el_967 =
                          (ErlangTuple [(ErlangAtom "fun"), l_963, tup_el_970])
                      in let
                        arg_965 =
                          (ErlangTuple
                             [(ErlangAtom "argument_limit"), tup_el_967])
                      in let arg_975 = (BIF.erlang__self__0 [])
                      in let
                        arg_974 =
                          (BIF.erlang__process_info__2
                             [arg_975, (ErlangAtom "current_stacktrace")])
                      in let
                        arg_972 =
                          (BIF.erlang__element__2
                             [(ErlangInt (DBI.fromInt 2)), arg_974])
                      in
                        (BIF.erlang__raise__3
                           [(ErlangAtom "error"), arg_965, arg_972])
                    something_else -> (EXC.case_clause something_else)
              in (erlps__ret_expr__3 [f_977, bs_3, rbs_6])
            _ -> (EXC.badmatch match_expr_16)
      _ -> (EXC.badmatch match_expr_10)
erlps__expr__5 [ex_3@(ErlangTuple [(ErlangAtom "named_fun"),
                                   line_0, name_1, cs_2]),
                bs_4, lf_5, ef_6, rbs_7]
  =
  let
    match_expr_11 =
      (erlps__hide_calls__2 [ex_3, (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_11 of
      (ErlangTuple [ex1_10, _]) ->
        let
          match_expr_17 =
            (BIF.do_remote_fun_call "Erl.Lint" "erlps__used_vars__2"
               [(ErlangCons ex1_10 ErlangEmptyList), bs_4])
        in
          case match_expr_17 of
            (ErlangTuple [(ErlangAtom "ok"), used_16]) ->
              let   
                arg_18 =
                  (ErlangFun 2
                     let
                       lambda_19 [k_22, _v_23] =
                         (BIF.lists__member__2 [k_22, used_16])
                       lambda_19 [arg_20, arg_21] = (EXC.function_clause unit)
                       lambda_19 args =
                         (EXC.badarity (ErlangFun 2 lambda_19) args)
                     in lambda_19)
              in let
                en_27 =
                  (BIF.do_remote_fun_call "Orddict" "erlps__filter__2"
                     [arg_18, bs_4])
              in let info_33 = (ErlangTuple [en_27, lf_5, ef_6, cs_2, name_1])
              in let arg_37 = (BIF.erlang__hd__1 [cs_2])
              in let
                arg_35 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 3)), arg_37])
              in let case_34 = (BIF.erlang__length__1 [arg_35])
              in let
                f_1001 =
                  case case_34 of
                    (ErlangInt num_39) | ((ErlangInt num_39) ==
                                            (ErlangInt (DBI.fromInt 0))) ->
                      (ErlangFun 0
                         let
                           rf_40 [] =
                             let arg_42 = (ErlangFun 0 rf_40)
                             in
                               (erlps__eval_named_fun__3
                                  [ErlangEmptyList, arg_42, info_33])
                           rf_40 [] = (EXC.function_clause unit)
                           rf_40 args =
                             (EXC.badarity
                                (ErlangFun 0
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_40)
                    (ErlangInt num_44) | ((ErlangInt num_44) ==
                                            (ErlangInt (DBI.fromInt 1))) ->
                      (ErlangFun 1
                         let
                           rf_45 [a_47] =
                             let arg_51 = (ErlangFun 1 rf_45)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_47 ErlangEmptyList), arg_51,
                                   info_33])
                           rf_45 [arg_46] = (EXC.function_clause unit)
                           rf_45 args =
                             (EXC.badarity
                                (ErlangFun 1
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_45)
                    (ErlangInt num_53) | ((ErlangInt num_53) ==
                                            (ErlangInt (DBI.fromInt 2))) ->
                      (ErlangFun 2
                         let
                           rf_54 [a_57, b_58] =
                             let arg_64 = (ErlangFun 2 rf_54)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_57
                                      (ErlangCons b_58 ErlangEmptyList)),
                                   arg_64, info_33])
                           rf_54 [arg_55, arg_56] = (EXC.function_clause unit)
                           rf_54 args =
                             (EXC.badarity
                                (ErlangFun 2
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_54)
                    (ErlangInt num_66) | ((ErlangInt num_66) ==
                                            (ErlangInt (DBI.fromInt 3))) ->
                      (ErlangFun 3
                         let
                           rf_67 [a_71, b_72, c_73] =
                             let arg_81 = (ErlangFun 3 rf_67)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_71
                                      (ErlangCons b_72
                                         (ErlangCons c_73 ErlangEmptyList))),
                                   arg_81, info_33])
                           rf_67 [arg_68, arg_69, arg_70] =
                             (EXC.function_clause unit)
                           rf_67 args =
                             (EXC.badarity
                                (ErlangFun 3
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_67)
                    (ErlangInt num_83) | ((ErlangInt num_83) ==
                                            (ErlangInt (DBI.fromInt 4))) ->
                      (ErlangFun 4
                         let
                           rf_84 [a_89, b_90, c_91, d_92] =
                             let arg_102 = (ErlangFun 4 rf_84)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_89
                                      (ErlangCons b_90
                                         (ErlangCons c_91
                                            (ErlangCons d_92
                                               ErlangEmptyList)))),
                                   arg_102, info_33])
                           rf_84 [arg_85, arg_86, arg_87, arg_88] =
                             (EXC.function_clause unit)
                           rf_84 args =
                             (EXC.badarity
                                (ErlangFun 4
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_84)
                    (ErlangInt num_104) | ((ErlangInt num_104) ==
                                             (ErlangInt (DBI.fromInt 5))) ->
                      (ErlangFun 5
                         let
                           rf_105 [a_111, b_112, c_113, d_114, e_115] =
                             let arg_127 = (ErlangFun 5 rf_105)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_111
                                      (ErlangCons b_112
                                         (ErlangCons c_113
                                            (ErlangCons d_114
                                               (ErlangCons e_115
                                                  ErlangEmptyList))))),
                                   arg_127, info_33])
                           rf_105 [arg_106, arg_107, arg_108, arg_109, arg_110]
                             =
                             (EXC.function_clause unit)
                           rf_105 args =
                             (EXC.badarity
                                (ErlangFun 5
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_105)
                    (ErlangInt num_129) | ((ErlangInt num_129) ==
                                             (ErlangInt (DBI.fromInt 6))) ->
                      (ErlangFun 6
                         let
                           rf_130 [a_137, b_138, c_139, d_140, e_141, f_142] =
                             let arg_156 = (ErlangFun 6 rf_130)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_137
                                      (ErlangCons b_138
                                         (ErlangCons c_139
                                            (ErlangCons d_140
                                               (ErlangCons e_141
                                                  (ErlangCons f_142
                                                     ErlangEmptyList)))))),
                                   arg_156, info_33])
                           rf_130 [arg_131, arg_132, arg_133, arg_134, arg_135,
                                   arg_136]
                             =
                             (EXC.function_clause unit)
                           rf_130 args =
                             (EXC.badarity
                                (ErlangFun 6
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_130)
                    (ErlangInt num_158) | ((ErlangInt num_158) ==
                                             (ErlangInt (DBI.fromInt 7))) ->
                      (ErlangFun 7
                         let
                           rf_159 [a_167, b_168, c_169, d_170, e_171, f_172,
                                   g_173]
                             =
                             let arg_189 = (ErlangFun 7 rf_159)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_167
                                      (ErlangCons b_168
                                         (ErlangCons c_169
                                            (ErlangCons d_170
                                               (ErlangCons e_171
                                                  (ErlangCons f_172
                                                     (ErlangCons g_173
                                                        ErlangEmptyList))))))),
                                   arg_189, info_33])
                           rf_159 [arg_160, arg_161, arg_162, arg_163, arg_164,
                                   arg_165, arg_166]
                             =
                             (EXC.function_clause unit)
                           rf_159 args =
                             (EXC.badarity
                                (ErlangFun 7
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_159)
                    (ErlangInt num_191) | ((ErlangInt num_191) ==
                                             (ErlangInt (DBI.fromInt 8))) ->
                      (ErlangFun 8
                         let
                           rf_192 [a_201, b_202, c_203, d_204, e_205, f_206,
                                   g_207, h_208]
                             =
                             let arg_226 = (ErlangFun 8 rf_192)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_201
                                      (ErlangCons b_202
                                         (ErlangCons c_203
                                            (ErlangCons d_204
                                               (ErlangCons e_205
                                                  (ErlangCons f_206
                                                     (ErlangCons g_207
                                                        (ErlangCons h_208
                                                           ErlangEmptyList)))))))),
                                   arg_226, info_33])
                           rf_192 [arg_193, arg_194, arg_195, arg_196, arg_197,
                                   arg_198, arg_199, arg_200]
                             =
                             (EXC.function_clause unit)
                           rf_192 args =
                             (EXC.badarity
                                (ErlangFun 8
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_192)
                    (ErlangInt num_228) | ((ErlangInt num_228) ==
                                             (ErlangInt (DBI.fromInt 9))) ->
                      (ErlangFun 9
                         let
                           rf_229 [a_239, b_240, c_241, d_242, e_243, f_244,
                                   g_245, h_246, i_247]
                             =
                             let arg_267 = (ErlangFun 9 rf_229)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_239
                                      (ErlangCons b_240
                                         (ErlangCons c_241
                                            (ErlangCons d_242
                                               (ErlangCons e_243
                                                  (ErlangCons f_244
                                                     (ErlangCons g_245
                                                        (ErlangCons h_246
                                                           (ErlangCons i_247
                                                              ErlangEmptyList))))))))),
                                   arg_267, info_33])
                           rf_229 [arg_230, arg_231, arg_232, arg_233, arg_234,
                                   arg_235, arg_236, arg_237, arg_238]
                             =
                             (EXC.function_clause unit)
                           rf_229 args =
                             (EXC.badarity
                                (ErlangFun 9
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_229)
                    (ErlangInt num_269) | ((ErlangInt num_269) ==
                                             (ErlangInt (DBI.fromInt 10))) ->
                      (ErlangFun 10
                         let
                           rf_270 [a_281, b_282, c_283, d_284, e_285, f_286,
                                   g_287, h_288, i_289, j_290]
                             =
                             let arg_312 = (ErlangFun 10 rf_270)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_281
                                      (ErlangCons b_282
                                         (ErlangCons c_283
                                            (ErlangCons d_284
                                               (ErlangCons e_285
                                                  (ErlangCons f_286
                                                     (ErlangCons g_287
                                                        (ErlangCons h_288
                                                           (ErlangCons i_289
                                                              (ErlangCons j_290
                                                                 ErlangEmptyList)))))))))),
                                   arg_312, info_33])
                           rf_270 [arg_271, arg_272, arg_273, arg_274, arg_275,
                                   arg_276, arg_277, arg_278, arg_279, arg_280]
                             =
                             (EXC.function_clause unit)
                           rf_270 args =
                             (EXC.badarity
                                (ErlangFun 10
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_270)
                    (ErlangInt num_314) | ((ErlangInt num_314) ==
                                             (ErlangInt (DBI.fromInt 11))) ->
                      (ErlangFun 11
                         let
                           rf_315 [a_327, b_328, c_329, d_330, e_331, f_332,
                                   g_333, h_334, i_335, j_336, k_337]
                             =
                             let arg_361 = (ErlangFun 11 rf_315)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_327
                                      (ErlangCons b_328
                                         (ErlangCons c_329
                                            (ErlangCons d_330
                                               (ErlangCons e_331
                                                  (ErlangCons f_332
                                                     (ErlangCons g_333
                                                        (ErlangCons h_334
                                                           (ErlangCons i_335
                                                              (ErlangCons j_336
                                                                 (ErlangCons
                                                                    k_337
                                                                    ErlangEmptyList))))))))))),
                                   arg_361, info_33])
                           rf_315 [arg_316, arg_317, arg_318, arg_319, arg_320,
                                   arg_321, arg_322, arg_323, arg_324, arg_325,
                                   arg_326]
                             =
                             (EXC.function_clause unit)
                           rf_315 args =
                             (EXC.badarity
                                (ErlangFun 11
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_315)
                    (ErlangInt num_363) | ((ErlangInt num_363) ==
                                             (ErlangInt (DBI.fromInt 12))) ->
                      (ErlangFun 12
                         let
                           rf_364 [a_377, b_378, c_379, d_380, e_381, f_382,
                                   g_383, h_384, i_385, j_386, k_387, l_388]
                             =
                             let arg_414 = (ErlangFun 12 rf_364)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_377
                                      (ErlangCons b_378
                                         (ErlangCons c_379
                                            (ErlangCons d_380
                                               (ErlangCons e_381
                                                  (ErlangCons f_382
                                                     (ErlangCons g_383
                                                        (ErlangCons h_384
                                                           (ErlangCons i_385
                                                              (ErlangCons j_386
                                                                 (ErlangCons
                                                                    k_387
                                                                    (ErlangCons
                                                                       l_388
                                                                       ErlangEmptyList)))))))))))),
                                   arg_414, info_33])
                           rf_364 [arg_365, arg_366, arg_367, arg_368, arg_369,
                                   arg_370, arg_371, arg_372, arg_373, arg_374,
                                   arg_375, arg_376]
                             =
                             (EXC.function_clause unit)
                           rf_364 args =
                             (EXC.badarity
                                (ErlangFun 12
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_364)
                    (ErlangInt num_416) | ((ErlangInt num_416) ==
                                             (ErlangInt (DBI.fromInt 13))) ->
                      (ErlangFun 13
                         let
                           rf_417 [a_431, b_432, c_433, d_434, e_435, f_436,
                                   g_437, h_438, i_439, j_440, k_441, l_442,
                                   m_443]
                             =
                             let arg_471 = (ErlangFun 13 rf_417)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_431
                                      (ErlangCons b_432
                                         (ErlangCons c_433
                                            (ErlangCons d_434
                                               (ErlangCons e_435
                                                  (ErlangCons f_436
                                                     (ErlangCons g_437
                                                        (ErlangCons h_438
                                                           (ErlangCons i_439
                                                              (ErlangCons j_440
                                                                 (ErlangCons
                                                                    k_441
                                                                    (ErlangCons
                                                                       l_442
                                                                       (ErlangCons
                                                                          m_443
                                                                          ErlangEmptyList))))))))))))),
                                   arg_471, info_33])
                           rf_417 [arg_418, arg_419, arg_420, arg_421, arg_422,
                                   arg_423, arg_424, arg_425, arg_426, arg_427,
                                   arg_428, arg_429, arg_430]
                             =
                             (EXC.function_clause unit)
                           rf_417 args =
                             (EXC.badarity
                                (ErlangFun 13
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_417)
                    (ErlangInt num_473) | ((ErlangInt num_473) ==
                                             (ErlangInt (DBI.fromInt 14))) ->
                      (ErlangFun 14
                         let
                           rf_474 [a_489, b_490, c_491, d_492, e_493, f_494,
                                   g_495, h_496, i_497, j_498, k_499, l_500,
                                   m_501, n_502]
                             =
                             let arg_532 = (ErlangFun 14 rf_474)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_489
                                      (ErlangCons b_490
                                         (ErlangCons c_491
                                            (ErlangCons d_492
                                               (ErlangCons e_493
                                                  (ErlangCons f_494
                                                     (ErlangCons g_495
                                                        (ErlangCons h_496
                                                           (ErlangCons i_497
                                                              (ErlangCons j_498
                                                                 (ErlangCons
                                                                    k_499
                                                                    (ErlangCons
                                                                       l_500
                                                                       (ErlangCons
                                                                          m_501
                                                                          (ErlangCons
                                                                             n_502
                                                                             ErlangEmptyList)))))))))))))),
                                   arg_532, info_33])
                           rf_474 [arg_475, arg_476, arg_477, arg_478, arg_479,
                                   arg_480, arg_481, arg_482, arg_483, arg_484,
                                   arg_485, arg_486, arg_487, arg_488]
                             =
                             (EXC.function_clause unit)
                           rf_474 args =
                             (EXC.badarity
                                (ErlangFun 14
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_474)
                    (ErlangInt num_534) | ((ErlangInt num_534) ==
                                             (ErlangInt (DBI.fromInt 15))) ->
                      (ErlangFun 15
                         let
                           rf_535 [a_551, b_552, c_553, d_554, e_555, f_556,
                                   g_557, h_558, i_559, j_560, k_561, l_562,
                                   m_563, n_564, o_565]
                             =
                             let arg_597 = (ErlangFun 15 rf_535)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_551
                                      (ErlangCons b_552
                                         (ErlangCons c_553
                                            (ErlangCons d_554
                                               (ErlangCons e_555
                                                  (ErlangCons f_556
                                                     (ErlangCons g_557
                                                        (ErlangCons h_558
                                                           (ErlangCons i_559
                                                              (ErlangCons j_560
                                                                 (ErlangCons
                                                                    k_561
                                                                    (ErlangCons
                                                                       l_562
                                                                       (ErlangCons
                                                                          m_563
                                                                          (ErlangCons
                                                                             n_564
                                                                             (ErlangCons
                                                                                o_565
                                                                                ErlangEmptyList))))))))))))))),
                                   arg_597, info_33])
                           rf_535 [arg_536, arg_537, arg_538, arg_539, arg_540,
                                   arg_541, arg_542, arg_543, arg_544, arg_545,
                                   arg_546, arg_547, arg_548, arg_549, arg_550]
                             =
                             (EXC.function_clause unit)
                           rf_535 args =
                             (EXC.badarity
                                (ErlangFun 15
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_535)
                    (ErlangInt num_599) | ((ErlangInt num_599) ==
                                             (ErlangInt (DBI.fromInt 16))) ->
                      (ErlangFun 16
                         let
                           rf_600 [a_617, b_618, c_619, d_620, e_621, f_622,
                                   g_623, h_624, i_625, j_626, k_627, l_628,
                                   m_629, n_630, o_631, p_632]
                             =
                             let arg_666 = (ErlangFun 16 rf_600)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_617
                                      (ErlangCons b_618
                                         (ErlangCons c_619
                                            (ErlangCons d_620
                                               (ErlangCons e_621
                                                  (ErlangCons f_622
                                                     (ErlangCons g_623
                                                        (ErlangCons h_624
                                                           (ErlangCons i_625
                                                              (ErlangCons j_626
                                                                 (ErlangCons
                                                                    k_627
                                                                    (ErlangCons
                                                                       l_628
                                                                       (ErlangCons
                                                                          m_629
                                                                          (ErlangCons
                                                                             n_630
                                                                             (ErlangCons
                                                                                o_631
                                                                                (ErlangCons
                                                                                   p_632
                                                                                   ErlangEmptyList)))))))))))))))),
                                   arg_666, info_33])
                           rf_600 [arg_601, arg_602, arg_603, arg_604, arg_605,
                                   arg_606, arg_607, arg_608, arg_609, arg_610,
                                   arg_611, arg_612, arg_613, arg_614, arg_615,
                                   arg_616]
                             =
                             (EXC.function_clause unit)
                           rf_600 args =
                             (EXC.badarity
                                (ErlangFun 16
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_600)
                    (ErlangInt num_668) | ((ErlangInt num_668) ==
                                             (ErlangInt (DBI.fromInt 17))) ->
                      (ErlangFun 17
                         let
                           rf_669 [a_687, b_688, c_689, d_690, e_691, f_692,
                                   g_693, h_694, i_695, j_696, k_697, l_698,
                                   m_699, n_700, o_701, p_702, q_703]
                             =
                             let arg_739 = (ErlangFun 17 rf_669)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_687
                                      (ErlangCons b_688
                                         (ErlangCons c_689
                                            (ErlangCons d_690
                                               (ErlangCons e_691
                                                  (ErlangCons f_692
                                                     (ErlangCons g_693
                                                        (ErlangCons h_694
                                                           (ErlangCons i_695
                                                              (ErlangCons j_696
                                                                 (ErlangCons
                                                                    k_697
                                                                    (ErlangCons
                                                                       l_698
                                                                       (ErlangCons
                                                                          m_699
                                                                          (ErlangCons
                                                                             n_700
                                                                             (ErlangCons
                                                                                o_701
                                                                                (ErlangCons
                                                                                   p_702
                                                                                   (ErlangCons
                                                                                      q_703
                                                                                      ErlangEmptyList))))))))))))))))),
                                   arg_739, info_33])
                           rf_669 [arg_670, arg_671, arg_672, arg_673, arg_674,
                                   arg_675, arg_676, arg_677, arg_678, arg_679,
                                   arg_680, arg_681, arg_682, arg_683, arg_684,
                                   arg_685, arg_686]
                             =
                             (EXC.function_clause unit)
                           rf_669 args =
                             (EXC.badarity
                                (ErlangFun 17
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_669)
                    (ErlangInt num_741) | ((ErlangInt num_741) ==
                                             (ErlangInt (DBI.fromInt 18))) ->
                      (ErlangFun 18
                         let
                           rf_742 [a_761, b_762, c_763, d_764, e_765, f_766,
                                   g_767, h_768, i_769, j_770, k_771, l_772,
                                   m_773, n_774, o_775, p_776, q_777, r_778]
                             =
                             let arg_816 = (ErlangFun 18 rf_742)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_761
                                      (ErlangCons b_762
                                         (ErlangCons c_763
                                            (ErlangCons d_764
                                               (ErlangCons e_765
                                                  (ErlangCons f_766
                                                     (ErlangCons g_767
                                                        (ErlangCons h_768
                                                           (ErlangCons i_769
                                                              (ErlangCons j_770
                                                                 (ErlangCons
                                                                    k_771
                                                                    (ErlangCons
                                                                       l_772
                                                                       (ErlangCons
                                                                          m_773
                                                                          (ErlangCons
                                                                             n_774
                                                                             (ErlangCons
                                                                                o_775
                                                                                (ErlangCons
                                                                                   p_776
                                                                                   (ErlangCons
                                                                                      q_777
                                                                                      (ErlangCons
                                                                                         r_778
                                                                                         ErlangEmptyList)))))))))))))))))),
                                   arg_816, info_33])
                           rf_742 [arg_743, arg_744, arg_745, arg_746, arg_747,
                                   arg_748, arg_749, arg_750, arg_751, arg_752,
                                   arg_753, arg_754, arg_755, arg_756, arg_757,
                                   arg_758, arg_759, arg_760]
                             =
                             (EXC.function_clause unit)
                           rf_742 args =
                             (EXC.badarity
                                (ErlangFun 18
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_742)
                    (ErlangInt num_818) | ((ErlangInt num_818) ==
                                             (ErlangInt (DBI.fromInt 19))) ->
                      (ErlangFun 19
                         let
                           rf_819 [a_839, b_840, c_841, d_842, e_843, f_844,
                                   g_845, h_846, i_847, j_848, k_849, l_850,
                                   m_851, n_852, o_853, p_854, q_855, r_856,
                                   s_857]
                             =
                             let arg_897 = (ErlangFun 19 rf_819)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_839
                                      (ErlangCons b_840
                                         (ErlangCons c_841
                                            (ErlangCons d_842
                                               (ErlangCons e_843
                                                  (ErlangCons f_844
                                                     (ErlangCons g_845
                                                        (ErlangCons h_846
                                                           (ErlangCons i_847
                                                              (ErlangCons j_848
                                                                 (ErlangCons
                                                                    k_849
                                                                    (ErlangCons
                                                                       l_850
                                                                       (ErlangCons
                                                                          m_851
                                                                          (ErlangCons
                                                                             n_852
                                                                             (ErlangCons
                                                                                o_853
                                                                                (ErlangCons
                                                                                   p_854
                                                                                   (ErlangCons
                                                                                      q_855
                                                                                      (ErlangCons
                                                                                         r_856
                                                                                         (ErlangCons
                                                                                            s_857
                                                                                            ErlangEmptyList))))))))))))))))))),
                                   arg_897, info_33])
                           rf_819 [arg_820, arg_821, arg_822, arg_823, arg_824,
                                   arg_825, arg_826, arg_827, arg_828, arg_829,
                                   arg_830, arg_831, arg_832, arg_833, arg_834,
                                   arg_835, arg_836, arg_837, arg_838]
                             =
                             (EXC.function_clause unit)
                           rf_819 args =
                             (EXC.badarity
                                (ErlangFun 19
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_819)
                    (ErlangInt num_899) | ((ErlangInt num_899) ==
                                             (ErlangInt (DBI.fromInt 20))) ->
                      (ErlangFun 20
                         let
                           rf_900 [a_921, b_922, c_923, d_924, e_925, f_926,
                                   g_927, h_928, i_929, j_930, k_931, l_932,
                                   m_933, n_934, o_935, p_936, q_937, r_938,
                                   s_939, t_940]
                             =
                             let arg_982 = (ErlangFun 20 rf_900)
                             in
                               (erlps__eval_named_fun__3
                                  [(ErlangCons a_921
                                      (ErlangCons b_922
                                         (ErlangCons c_923
                                            (ErlangCons d_924
                                               (ErlangCons e_925
                                                  (ErlangCons f_926
                                                     (ErlangCons g_927
                                                        (ErlangCons h_928
                                                           (ErlangCons i_929
                                                              (ErlangCons j_930
                                                                 (ErlangCons
                                                                    k_931
                                                                    (ErlangCons
                                                                       l_932
                                                                       (ErlangCons
                                                                          m_933
                                                                          (ErlangCons
                                                                             n_934
                                                                             (ErlangCons
                                                                                o_935
                                                                                (ErlangCons
                                                                                   p_936
                                                                                   (ErlangCons
                                                                                      q_937
                                                                                      (ErlangCons
                                                                                         r_938
                                                                                         (ErlangCons
                                                                                            s_939
                                                                                            (ErlangCons
                                                                                               t_940
                                                                                               ErlangEmptyList)))))))))))))))))))),
                                   arg_982, info_33])
                           rf_900 [arg_901, arg_902, arg_903, arg_904, arg_905,
                                   arg_906, arg_907, arg_908, arg_909, arg_910,
                                   arg_911, arg_912, arg_913, arg_914, arg_915,
                                   arg_916, arg_917, arg_918, arg_919, arg_920]
                             =
                             (EXC.function_clause unit)
                           rf_900 args =
                             (EXC.badarity
                                (ErlangFun 20
                                   (\ _ -> (ErlangAtom "purs_tco_sucks")))
                                args)
                         in rf_900)
                    _other_984 ->
                      let   
                        l_986 =
                          (BIF.do_remote_fun_call "Erl.Anno"
                             "erlps__location__1" [line_0])
                      in let tup_el_994 = (erlps__to_terms__1 [cs_2])
                      in let
                        tup_el_990 =
                          (ErlangTuple
                             [(ErlangAtom "named_fun"), l_986, name_1,
                              tup_el_994])
                      in let
                        arg_988 =
                          (ErlangTuple
                             [(ErlangAtom "argument_limit"), tup_el_990])
                      in let arg_999 = (BIF.erlang__self__0 [])
                      in let
                        arg_998 =
                          (BIF.erlang__process_info__2
                             [arg_999, (ErlangAtom "current_stacktrace")])
                      in let
                        arg_996 =
                          (BIF.erlang__element__2
                             [(ErlangInt (DBI.fromInt 2)), arg_998])
                      in
                        (BIF.erlang__raise__3
                           [(ErlangAtom "error"), arg_988, arg_996])
                    something_else -> (EXC.case_clause something_else)
              in (erlps__ret_expr__3 [f_1001, bs_4, rbs_7])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_11)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "call"), _,
                              (ErlangTuple [(ErlangAtom "remote"), _,
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _,
                                                          (ErlangAtom "qlc")]),
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _,
                                                          (ErlangAtom "q")])]),
                              (ErlangCons lc_2@(ErlangTuple [(ErlangAtom "lc"),
                                                             _, _e_0,
                                                             _qs_1]) as0_3)]),
                bs0_4, lf_5, ef_6, rbs_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_40 = (BIF.erlang__length__1 [as0_3])
             in
               (BIF.erlang__op_lesserEq
                  [lop_40, (ErlangInt (DBI.fromInt 1))])))) =
  let    maxline_9 = (erlps__find_maxline__1 [lc_2])
  in let match_expr_14 = (erlps__hide_calls__2 [lc_2, maxline_9])
  in
    case match_expr_14 of
      (ErlangTuple [lc1_12, d_13]) ->
        let
          case_15 =
            (BIF.do_remote_fun_call "Qlc"
               "erlps__transform_from_evaluator__2" [lc1_12, bs0_4])
        in
          case case_15 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangAtom "call"), l_18, remote_19,
                                        (ErlangCons qlc_20 (ErlangEmptyList))])]) ->
              let   
                qlc1_24 = (erlps__unhide_calls__3 [qlc_20, maxline_9, d_13])
              in let
                arg_25 =
                  (ErlangTuple
                     [(ErlangAtom "call"), l_18, remote_19,
                      (ErlangCons qlc1_24 as0_3)])
              in (erlps__expr__5 [arg_25, bs0_4, lf_5, ef_6, rbs_7])
            (ErlangTuple [(ErlangAtom "not_ok"), error_36]) ->
              (erlps__ret_expr__3 [error_36, bs0_4, rbs_7])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_14)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "call"), l1_0,
                              (ErlangTuple [(ErlangAtom "remote"), l2_1,
                                            (ErlangTuple [(ErlangAtom "record_field"),
                                                          _,
                                                          (ErlangTuple [(ErlangAtom "atom"),
                                                                        _,
                                                                        (ErlangAtom "")]),
                                                          mod_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                              _,
                                                                              (ErlangAtom "qlc")])]),
                                            func_3@(ErlangTuple [(ErlangAtom "atom"),
                                                                 _,
                                                                 (ErlangAtom "q")])]),
                              as_7@(ErlangCons (ErlangTuple [(ErlangAtom "lc"),
                                                             _, _e_4,
                                                             _qs_5]) as0_6)]),
                bs_8, lf_9, ef_10, rbs_11]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_25 = (BIF.erlang__length__1 [as0_6])
             in
               (BIF.erlang__op_lesserEq
                  [lop_25, (ErlangInt (DBI.fromInt 1))])))) =
  let   
    tup_el_15 =
      (ErlangTuple [(ErlangAtom "remote"), l2_1, mod_2, func_3])
  in let
    arg_12 =
      (ErlangTuple [(ErlangAtom "call"), l1_0, tup_el_15, as_7])
  in (erlps__expr__5 [arg_12, bs_8, lf_9, ef_10, rbs_11])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "call"), _,
                              (ErlangTuple [(ErlangAtom "remote"), _, mod_0,
                                            func_1]),
                              as0_2]),
                bs0_3, lf_4, ef_5, rbs_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [mod_0, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), m_12, bs1_13]) ->
        let
          match_expr_22 =
            (erlps__expr__5 [func_1, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
        in
          case match_expr_22 of
            (ErlangTuple [(ErlangAtom "value"), f_20, bs2_21]) ->
              let    arg_24 = (erlps__merge_bindings__2 [bs1_13, bs2_21])
              in let
                match_expr_31 =
                  (erlps__expr_list__4 [as0_2, arg_24, lf_4, ef_5])
              in
                case match_expr_31 of
                  (ErlangTuple [as_29, bs3_30]) ->
                    let    lop_33 = (BIF.erlang__is_atom__1 [m_12])
                    in let
                      case_32 =
                        case lop_33 of
                          (ErlangAtom "false") -> (ErlangAtom "false")
                          (ErlangAtom "true") ->
                            let arg_37 = (BIF.erlang__length__1 [as_29])
                            in
                              (BIF.do_remote_fun_call "Erl.Internal"
                                 "erlps__bif__3" [m_12, f_20, arg_37])
                          _ -> (EXC.badarg1 lop_33)
                    in
                      case case_32 of
                        (ErlangAtom "true") ->
                          (erlps__bif__5 [f_20, as_29, bs3_30, ef_5, rbs_6])
                        (ErlangAtom "false") ->
                          (erlps__do_apply__6
                             [m_12, f_20, as_29, bs3_30, ef_5, rbs_6])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_31)
            _ -> (EXC.badmatch match_expr_22)
      _ -> (EXC.badmatch match_expr_14)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "call"), _,
                              (ErlangTuple [(ErlangAtom "atom"), _, func_0]),
                              as0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let    arg_8 = (BIF.erlang__length__1 [as0_1])
  in let
    case_6 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
         [func_0, arg_8])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          match_expr_16 = (erlps__expr_list__4 [as0_1, bs0_2, lf_3, ef_4])
        in
          case match_expr_16 of
            (ErlangTuple [as_14, bs_15]) ->
              (erlps__bif__5 [func_0, as_14, bs_15, ef_4, rbs_5])
            _ -> (EXC.badmatch match_expr_16)
      (ErlangAtom "false") ->
        (erlps__local_func__6 [func_0, as0_1, bs0_2, lf_3, ef_4, rbs_5])
      something_else -> (EXC.case_clause something_else)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "call"), _, func0_0,
                              as0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5
         [func0_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), func_11, bs1_12]) ->
        let
          match_expr_20 = (erlps__expr_list__4 [as0_1, bs1_12, lf_3, ef_4])
        in
          case match_expr_20 of
            (ErlangTuple [as_18, bs2_19]) ->
              case func_11 of
                (ErlangTuple [m_22, f_23]) | ((isEAtom m_22) &&
                                                (isEAtom f_23)) ->
                  let    arg_25 = (ErlangTuple [(ErlangAtom "badfun"), func_11])
                  in let arg_31 = (BIF.erlang__self__0 [])
                  in let
                    arg_30 =
                      (BIF.erlang__process_info__2
                         [arg_31, (ErlangAtom "current_stacktrace")])
                  in let
                    arg_28 =
                      (BIF.erlang__element__2
                         [(ErlangInt (DBI.fromInt 2)), arg_30])
                  in
                    (BIF.erlang__raise__3
                       [(ErlangAtom "error"), arg_25, arg_28])
                _ -> (erlps__do_apply__5 [func_11, as_18, bs2_19, ef_4, rbs_5])
                something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "catch"), _, expr_0]),
                bs0_1, lf_2, ef_3, rbs_4]
  =
  (EXC.tryOfCatch
     (\ _ ->
        (erlps__expr__5
           [expr_0, bs0_1, lf_2, ef_3, (ErlangAtom "none")]))
     (\ of_10 ->
        case of_10 of
          (ErlangTuple [(ErlangAtom "value"), v_12, bs_13]) ->
            (erlps__ret_expr__3 [v_12, bs_13, rbs_4])
          something_else -> (EXC.try_clause something_else))
     (\ ex_11 ->
        case ex_11 of
          (ErlangTuple [(ErlangAtom "throw"), term_17, _]) ->
            (erlps__ret_expr__3 [term_17, bs0_1, rbs_4])
          (ErlangTuple [(ErlangAtom "exit"), reason_21, _]) ->
            let arg_22 = (ErlangTuple [(ErlangAtom "EXIT"), reason_21])
            in (erlps__ret_expr__3 [arg_22, bs0_1, rbs_4])
          (ErlangTuple [(ErlangAtom "error"), reason_27, stacktrace_28]) ->
            let    tup_el_31 = (ErlangTuple [reason_27, stacktrace_28])
            in let arg_29 = (ErlangTuple [(ErlangAtom "EXIT"), tup_el_31])
            in (erlps__ret_expr__3 [arg_29, bs0_1, rbs_4])
          ex_11 -> (EXC.raise ex_11)))
erlps__expr__5 [(ErlangTuple [(ErlangAtom "match"), _, lhs_0,
                              rhs0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [rhs0_1, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), rhs_11, bs1_12]) ->
        let case_14 = (erlps__match__3 [lhs_0, rhs_11, bs1_12])
        in
          case case_14 of
            (ErlangTuple [(ErlangAtom "match"), bs_18]) ->
              (erlps__ret_expr__3 [rhs_11, bs_18, rbs_5])
            (ErlangAtom "nomatch") ->
              let    arg_23 = (ErlangTuple [(ErlangAtom "badmatch"), rhs_11])
              in let arg_29 = (BIF.erlang__self__0 [])
              in let
                arg_28 =
                  (BIF.erlang__process_info__2
                     [arg_29, (ErlangAtom "current_stacktrace")])
              in let
                arg_26 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_28])
              in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_23, arg_26])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "op"), _, op_0, a0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [a0_1, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), a_11, bs_12]) ->
        (erlps__eval_op__5 [op_0, a_11, bs_12, ef_4, rbs_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "op"), _,
                              (ErlangAtom "andalso"), l0_0, r0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [l0_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), l_11, bs1_12]) ->
        let
          v_31 =
            case l_11 of
              (ErlangAtom "true") ->
                let
                  match_expr_21 =
                    (erlps__expr__5
                       [r0_1, bs1_12, lf_3, ef_4, (ErlangAtom "none")])
                in
                  case match_expr_21 of
                    (ErlangTuple [(ErlangAtom "value"), r_20, _]) -> r_20
                    _ -> (EXC.badmatch match_expr_21)
              (ErlangAtom "false") -> (ErlangAtom "false")
              _ ->
                let    arg_23 = (ErlangTuple [(ErlangAtom "badarg"), l_11])
                in let arg_29 = (BIF.erlang__self__0 [])
                in let
                  arg_28 =
                    (BIF.erlang__process_info__2
                       [arg_29, (ErlangAtom "current_stacktrace")])
                in let
                  arg_26 =
                    (BIF.erlang__element__2
                       [(ErlangInt (DBI.fromInt 2)), arg_28])
                in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_23, arg_26])
              something_else -> (EXC.case_clause something_else)
        in (erlps__ret_expr__3 [v_31, bs1_12, rbs_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "op"), _,
                              (ErlangAtom "orelse"), l0_0, r0_1]),
                bs0_2, lf_3, ef_4, rbs_5]
  =
  let
    match_expr_13 =
      (erlps__expr__5 [l0_0, bs0_2, lf_3, ef_4, (ErlangAtom "none")])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "value"), l_11, bs1_12]) ->
        let
          v_31 =
            case l_11 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let
                  match_expr_21 =
                    (erlps__expr__5
                       [r0_1, bs1_12, lf_3, ef_4, (ErlangAtom "none")])
                in
                  case match_expr_21 of
                    (ErlangTuple [(ErlangAtom "value"), r_20, _]) -> r_20
                    _ -> (EXC.badmatch match_expr_21)
              _ ->
                let    arg_23 = (ErlangTuple [(ErlangAtom "badarg"), l_11])
                in let arg_29 = (BIF.erlang__self__0 [])
                in let
                  arg_28 =
                    (BIF.erlang__process_info__2
                       [arg_29, (ErlangAtom "current_stacktrace")])
                in let
                  arg_26 =
                    (BIF.erlang__element__2
                       [(ErlangInt (DBI.fromInt 2)), arg_28])
                in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_23, arg_26])
              something_else -> (EXC.case_clause something_else)
        in (erlps__ret_expr__3 [v_31, bs1_12, rbs_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "op"), _, op_0, l0_1,
                              r0_2]),
                bs0_3, lf_4, ef_5, rbs_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [l0_1, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), l_12, bs1_13]) ->
        let
          match_expr_22 =
            (erlps__expr__5 [r0_2, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
        in
          case match_expr_22 of
            (ErlangTuple [(ErlangAtom "value"), r_20, bs2_21]) ->
              let arg_26 = (erlps__merge_bindings__2 [bs1_13, bs2_21])
              in (erlps__eval_op__6 [op_0, l_12, r_20, arg_26, ef_5, rbs_6])
            _ -> (EXC.badmatch match_expr_22)
      _ -> (EXC.badmatch match_expr_14)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                bs0_1, lf_2, ef_3, rbs_4]
  =
  let   
    evalfun_15 =
      (ErlangFun 2
         let
           lambda_5 [e_8, b_9] =
             (erlps__expr__5 [e_8, b_9, lf_2, ef_3, (ErlangAtom "none")])
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    match_expr_21 =
      (BIF.do_remote_fun_call "Eval.Bits" "erlps__expr_grp__3"
         [fs_0, bs0_1, evalfun_15])
  in
    case match_expr_21 of
      (ErlangTuple [(ErlangAtom "value"), v_19, bs_20]) ->
        (erlps__ret_expr__3 [v_19, bs_20, rbs_4])
      _ -> (EXC.badmatch match_expr_21)
erlps__expr__5 [(ErlangTuple [(ErlangAtom "remote"), _, _, _]),
                _bs_0, _lf_1, _ef_2, _rbs_3]
  =
  let   
    arg_5 = (ErlangTuple [(ErlangAtom "badexpr"), (ErlangAtom ":")])
  in let arg_11 = (BIF.erlang__self__0 [])
  in let
    arg_10 =
      (BIF.erlang__process_info__2
         [arg_11, (ErlangAtom "current_stacktrace")])
  in let
    arg_8 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_10])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_5, arg_8])
erlps__expr__5 [(ErlangTuple [(ErlangAtom "value"), _, val_0]),
                bs_1, _lf_2, _ef_3, rbs_4]
  =
  (erlps__ret_expr__3 [val_0, bs_1, rbs_4])
erlps__expr__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__expr__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_maxline__1 :: ErlangFun
erlps__find_maxline__1 [lc_0] =
  let   
    _ =
      (BIF.erlang__put__2
         [(ErlangAtom "$erl_eval_max_line"), (ErlangInt (DBI.fromInt 0))])
  in let
    f_17 =
      (ErlangFun 1
         let
           lambda_3 [a_5] =
             let   
               l_7 = (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [a_5])
             in let lop_9 = (BIF.erlang__is_integer__1 [l_7])
             in let
               rop_13 = (BIF.erlang__get__1 [(ErlangAtom "$erl_eval_max_line")])
             in let rop_11 = (BIF.erlang__op_greater [l_7, rop_13])
             in let case_8 = (BIF.erlang__op_and [lop_9, rop_11])
             in
               case case_8 of
                 (ErlangAtom "true") ->
                   (BIF.erlang__put__2 [(ErlangAtom "$erl_eval_max_line"), l_7])
                 (ErlangAtom "false") -> (ErlangAtom "ok")
                 something_else -> (EXC.case_clause something_else)
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in let
    match_expr_20 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
         [f_17, lc_0])
  in (BIF.erlang__erase__1 [(ErlangAtom "$erl_eval_max_line")])
erlps__find_maxline__1 [arg_22] = (EXC.function_clause unit)
erlps__find_maxline__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hide_calls__2 :: ErlangFun
erlps__hide_calls__2 [lc_0, maxline_1] =
  let   
    lineid0_4 =
      (BIF.erlang__op_plus [maxline_1, (ErlangInt (DBI.fromInt 1))])
  in let arg_7 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let match_expr_10 = (erlps__hide__3 [lc_0, lineid0_4, arg_7])
  in
    case match_expr_10 of
      (ErlangTuple [nlc_8, _, d_9]) -> (ErlangTuple [nlc_8, d_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__hide_calls__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__hide_calls__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hide__3 :: ErlangFun
erlps__hide__3 [(ErlangTuple [(ErlangAtom "value"), l_0, v_1]),
                id_2, d_3]
  =
  let   
    a_5 = (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [id_2])
  in let
    tup_el_6 =
      (ErlangTuple [(ErlangAtom "atom"), a_5, (ErlangAtom "ok")])
  in let
    tup_el_10 =
      (BIF.erlang__op_plus [id_2, (ErlangInt (DBI.fromInt 1))])
  in let arg_15 = (ErlangTuple [(ErlangAtom "value"), l_0, v_1])
  in let tup_el_13 = (BIF.maps__put__3 [id_2, arg_15, d_3])
  in (ErlangTuple [tup_el_6, tup_el_10, tup_el_13])
erlps__hide__3 [(ErlangTuple [(ErlangAtom "call"), l_0,
                              atom_2@(ErlangTuple [(ErlangAtom "atom"), _,
                                                   n_1]),
                              args_3]),
                id0_4, d0_5]
  =
  let match_expr_12 = (erlps__hide__3 [args_3, id0_4, d0_5])
  in
    case match_expr_12 of
      (ErlangTuple [nargs_9, id_10, d_11]) ->
        let    arg_15 = (BIF.erlang__length__1 [args_3])
        in let
          case_13 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
               [n_1, arg_15])
        in let
          c_37 =
            case case_13 of
              (ErlangAtom "true") ->
                (ErlangTuple [(ErlangAtom "call"), l_0, atom_2, nargs_9])
              (ErlangAtom "false") ->
                let   
                  a_22 =
                    (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [id_10])
                in let
                  tup_el_28 =
                    (ErlangTuple [(ErlangAtom "atom"), l_0, (ErlangAtom "m")])
                in let
                  tup_el_32 =
                    (ErlangTuple [(ErlangAtom "atom"), l_0, (ErlangAtom "f")])
                in let
                  tup_el_25 =
                    (ErlangTuple
                       [(ErlangAtom "remote"), l_0, tup_el_28, tup_el_32])
                in (ErlangTuple [(ErlangAtom "call"), a_22, tup_el_25, nargs_9])
              something_else -> (EXC.case_clause something_else)
        in let
          tup_el_39 =
            (BIF.erlang__op_plus [id_10, (ErlangInt (DBI.fromInt 1))])
        in let arg_44 = (ErlangTuple [(ErlangAtom "call"), atom_2])
        in let tup_el_42 = (BIF.maps__put__3 [id_10, arg_44, d_11])
        in (ErlangTuple [c_37, tup_el_39, tup_el_42])
      _ -> (EXC.badmatch match_expr_12)
erlps__hide__3 [t0_0, id0_1, d0_2] | (isETuple t0_0) =
  let    arg_3 = (BIF.erlang__tuple_to_list__1 [t0_0])
  in let match_expr_10 = (erlps__hide__3 [arg_3, id0_1, d0_2])
  in
    case match_expr_10 of
      (ErlangTuple [l_7, id_8, d_9]) ->
        let tup_el_11 = (BIF.erlang__list_to_tuple__1 [l_7])
        in (ErlangTuple [tup_el_11, id_8, d_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__hide__3 [(ErlangCons e0_0 es0_1), id0_2, d0_3] =
  let match_expr_10 = (erlps__hide__3 [e0_0, id0_2, d0_3])
  in
    case match_expr_10 of
      (ErlangTuple [e_7, id1_8, d1_9]) ->
        let match_expr_17 = (erlps__hide__3 [es0_1, id1_8, d1_9])
        in
          case match_expr_17 of
            (ErlangTuple [es_14, id_15, d_16]) ->
              (ErlangTuple [(ErlangCons e_7 es_14), id_15, d_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_10)
erlps__hide__3 [e_0, id_1, d_2] = (ErlangTuple [e_0, id_1, d_2])
erlps__hide__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__hide__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unhide_calls__3 :: ErlangFun
erlps__unhide_calls__3 [e_1@(ErlangTuple [(ErlangAtom "atom"),
                                          a_0, (ErlangAtom "ok")]),
                        maxline_2, d_3]
  =
  let
    l_5 = (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [a_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt l_5 maxline_2) -> (BIF.erlang__map_get__2 [l_5, d_3])
      _ -> e_1
      _ -> (EXC.if_clause unit)
erlps__unhide_calls__3 [(ErlangTuple [(ErlangAtom "call"), a_0,
                                      f_4@(ErlangTuple [(ErlangAtom "remote"),
                                                        l_1,
                                                        (ErlangTuple [(ErlangAtom "atom"),
                                                                      l_2,
                                                                      (ErlangAtom "m")]),
                                                        (ErlangTuple [(ErlangAtom "atom"),
                                                                      l_3,
                                                                      (ErlangAtom "f")])]),
                                      args_5]),
                        maxline_6, d_7]
  | (l_2 == l_1)
  , (l_3 == l_1) =
  let
    line_9 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [a_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt line_9 maxline_6) ->
        let match_expr_13 = (BIF.erlang__map_get__2 [line_9, d_7])
        in
          case match_expr_13 of
            (ErlangTuple [(ErlangAtom "call"), atom_12]) ->
              let tup_el_17 = (erlps__unhide_calls__3 [args_5, maxline_6, d_7])
              in (ErlangTuple [(ErlangAtom "call"), l_1, atom_12, tup_el_17])
            _ -> (EXC.badmatch match_expr_13)
      _ ->
        let tup_el_24 = (erlps__unhide_calls__3 [args_5, maxline_6, d_7])
        in (ErlangTuple [(ErlangAtom "call"), a_0, f_4, tup_el_24])
      _ -> (EXC.if_clause unit)
erlps__unhide_calls__3 [t_0, maxline_1, d_2] | (isETuple t_0) =
  let    arg_4 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let arg_3 = (erlps__unhide_calls__3 [arg_4, maxline_1, d_2])
  in (BIF.erlang__list_to_tuple__1 [arg_3])
erlps__unhide_calls__3 [(ErlangCons e_0 es_1), maxline_2, d_3] =
  let    head_4 = (erlps__unhide_calls__3 [e_0, maxline_2, d_3])
  in let tail_8 = (erlps__unhide_calls__3 [es_1, maxline_2, d_3])
  in (ErlangCons head_4 tail_8)
erlps__unhide_calls__3 [e_0, _maxline_1, _d_2] = e_0
erlps__unhide_calls__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__unhide_calls__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__local_func__6 :: ErlangFun
erlps__local_func__6 [func_0, as0_1, bs0_2,
                      (ErlangTuple [(ErlangAtom "value"), f_3]), ef_4,
                      (ErlangAtom "value")]
  =
  let    arg_7 = (ErlangTuple [(ErlangAtom "value"), f_3])
  in let
    match_expr_13 = (erlps__expr_list__4 [as0_1, bs0_2, arg_7, ef_4])
  in
    case match_expr_13 of
      (ErlangTuple [as1_11, _bs1_12]) ->
        (BIF.erlang__apply__2
           [f_3, (ErlangCons func_0 (ErlangCons as1_11 ErlangEmptyList))])
      _ -> (EXC.badmatch match_expr_13)
erlps__local_func__6 [func_0, as0_1, bs0_2,
                      (ErlangTuple [(ErlangAtom "value"), f_3]), ef_4, rbs_5]
  =
  let    arg_8 = (ErlangTuple [(ErlangAtom "value"), f_3])
  in let
    match_expr_14 = (erlps__expr_list__4 [as0_1, bs0_2, arg_8, ef_4])
  in
    case match_expr_14 of
      (ErlangTuple [as1_12, bs1_13]) ->
        let
          arg_15 =
            (BIF.erlang__apply__2
               [f_3, (ErlangCons func_0 (ErlangCons as1_12 ErlangEmptyList))])
        in (erlps__ret_expr__3 [arg_15, bs1_13, rbs_5])
      _ -> (EXC.badmatch match_expr_14)
erlps__local_func__6 [func_0, as0_1, bs0_2,
                      (ErlangTuple [(ErlangAtom "value"), f_3, eas_4]), ef_5,
                      rbs_6]
  =
  let   
    fun_18 =
      (ErlangFun 2
         let
           lambda_7 [name_10, args_11] =
             (BIF.erlang__apply__2
                [f_3, (ErlangCons name_10 (ErlangCons args_11 eas_4))])
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let arg_22 = (ErlangTuple [(ErlangAtom "value"), fun_18])
  in
    (erlps__local_func__6
       [func_0, as0_1, bs0_2, arg_22, ef_5, rbs_6])
erlps__local_func__6 [func_0, as_1, bs_2,
                      (ErlangTuple [(ErlangAtom "eval"), f_3]), _ef_4, rbs_5]
  =
  let
    arg_6 =
      (BIF.erlang__apply__2
         [f_3,
          (ErlangCons func_0
             (ErlangCons as_1 (ErlangCons bs_2 ErlangEmptyList)))])
  in (erlps__local_func2__2 [arg_6, rbs_5])
erlps__local_func__6 [func_0, as_1, bs_2,
                      (ErlangTuple [(ErlangAtom "eval"), f_3, eas_4]), _ef_5,
                      rbs_6]
  =
  let
    arg_7 =
      (BIF.erlang__apply__2
         [f_3,
          (ErlangCons func_0 (ErlangCons as_1 (ErlangCons bs_2 eas_4)))])
  in (erlps__local_func2__2 [arg_7, rbs_6])
erlps__local_func__6 [func_0, as0_1, bs0_2,
                      (ErlangTuple [m_3, f_4]), ef_5, rbs_6]
  =
  let    arg_9 = (ErlangTuple [m_3, f_4])
  in let
    match_expr_15 = (erlps__expr_list__4 [as0_1, bs0_2, arg_9, ef_5])
  in
    case match_expr_15 of
      (ErlangTuple [as1_13, bs1_14]) ->
        let
          arg_16 =
            (BIF.erlang__apply__3
               [m_3, f_4,
                (ErlangCons func_0 (ErlangCons as1_13 ErlangEmptyList))])
        in (erlps__ret_expr__3 [arg_16, bs1_14, rbs_6])
      _ -> (EXC.badmatch match_expr_15)
erlps__local_func__6 [func_0, as_1, _bs_2,
                      (ErlangTuple [m_3, f_4, eas_5]), _ef_6, rbs_7]
  =
  let
    arg_8 =
      (BIF.erlang__apply__3
         [m_3, f_4, (ErlangCons func_0 (ErlangCons as_1 eas_5))])
  in (erlps__local_func2__2 [arg_8, rbs_7])
erlps__local_func__6 [func_0, as0_1, _bs0_2, (ErlangAtom "none"),
                      _ef_3, _rbs_4]
  =
  let    tup_el_11 = (BIF.erlang__length__1 [as0_1])
  in let
    head_8 =
      (ErlangTuple [(ErlangAtom "erl_eval"), func_0, tup_el_11])
  in let arg_16 = (BIF.erlang__self__0 [])
  in let
    arg_15 =
      (BIF.erlang__process_info__2
         [arg_16, (ErlangAtom "current_stacktrace")])
  in let
    tail_13 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_15])
  in
    (BIF.erlang__raise__3
       [(ErlangAtom "error"), (ErlangAtom "undef"),
        (ErlangCons head_8 tail_13)])
erlps__local_func__6 [arg_18, arg_19, arg_20, arg_21, arg_22,
                      arg_23]
  =
  (EXC.function_clause unit)
erlps__local_func__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__local_func2__2 :: ErlangFun
erlps__local_func2__2 [(ErlangTuple [(ErlangAtom "value"), v_0,
                                     bs_1]),
                       rbs_2]
  =
  (erlps__ret_expr__3 [v_0, bs_1, rbs_2])
erlps__local_func2__2 [(ErlangTuple [(ErlangAtom "eval"), f_0,
                                     as_1, bs_2]),
                       rbs_3]
  =
  (erlps__do_apply__5
     [f_0, as_1, bs_2, (ErlangAtom "none"), rbs_3])
erlps__local_func2__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__local_func2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bif__5 :: ErlangFun
erlps__bif__5 [(ErlangAtom "apply"),
               (ErlangCons (ErlangAtom "erlang") (ErlangCons (ErlangAtom "apply") (ErlangCons as_0 (ErlangEmptyList)))),
               bs_1, ef_2, rbs_3]
  =
  (erlps__bif__5 [(ErlangAtom "apply"), as_0, bs_1, ef_2, rbs_3])
erlps__bif__5 [(ErlangAtom "apply"),
               (ErlangCons m_0 (ErlangCons f_1 (ErlangCons as_2 (ErlangEmptyList)))),
               bs_3, ef_4, rbs_5]
  =
  (erlps__do_apply__6 [m_0, f_1, as_2, bs_3, ef_4, rbs_5])
erlps__bif__5 [(ErlangAtom "apply"),
               (ErlangCons f_0 (ErlangCons as_1 (ErlangEmptyList))), bs_2, ef_3,
               rbs_4]
  =
  (erlps__do_apply__5 [f_0, as_1, bs_2, ef_3, rbs_4])
erlps__bif__5 [name_0, as_1, bs_2, ef_3, rbs_4] =
  (erlps__do_apply__6
     [(ErlangAtom "erlang"), name_0, as_1, bs_2, ef_3, rbs_4])
erlps__bif__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__bif__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_apply__5 :: ErlangFun
erlps__do_apply__5 [func_2@(ErlangTuple [m_0, f_1]), as_3, bs0_4,
                    ef_5, rbs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_30 = (BIF.erlang__tuple_size__1 [m_0])
             in let
               lop_29 =
                 (BIF.erlang__op_greaterEq
                    [lop_30, (ErlangInt (DBI.fromInt 1))])
             in let
               lop_28 =
                 case lop_29 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       arg_33 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 1)), m_0])
                     in (BIF.erlang__is_atom__1 [arg_33])
                   _ -> (EXC.badarg1 lop_29)
             in
               case lop_28 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_atom__1 [f_1])
                 _ -> (EXC.badarg1 lop_28)))) =
  case ef_5 of
    (ErlangAtom "none") | ((==) rbs_6 (ErlangAtom "value")) ->
      (BIF.erlang__apply__3 [m_0, f_1, as_3])
    (ErlangAtom "none") ->
      let arg_11 = (BIF.erlang__apply__3 [m_0, f_1, as_3])
      in (erlps__ret_expr__3 [arg_11, bs0_4, rbs_6])
    (ErlangTuple [(ErlangAtom "value"), fun_17]) | ((==) rbs_6
                                                      (ErlangAtom "value")) ->
      (BIF.erlang__apply__2
         [fun_17, (ErlangCons func_2 (ErlangCons as_3 ErlangEmptyList))])
    (ErlangTuple [(ErlangAtom "value"), fun_21]) ->
      let
        arg_22 =
          (BIF.erlang__apply__2
             [fun_21, (ErlangCons func_2 (ErlangCons as_3 ErlangEmptyList))])
      in (erlps__ret_expr__3 [arg_22, bs0_4, rbs_6])
    something_else -> (EXC.case_clause something_else)
erlps__do_apply__5 [func_0, as_1, bs0_2, ef_3, rbs_4] =
  let   
    env_15 =
      case (ErlangAtom "true") of
        _ | (isEFun func_0) ->
          let   
            tup_el_6 =
              (BIF.erlang__fun_info__2 [func_0, (ErlangAtom "module")])
          in let
            tup_el_9 = (BIF.erlang__fun_info__2 [func_0, (ErlangAtom "env")])
          in let case_5 = (ErlangTuple [tup_el_6, tup_el_9])
          in
            case case_5 of
              (ErlangTuple [(ErlangTuple [(ErlangAtom "module"),
                                          (ErlangAtom "erl_eval")]),
                            (ErlangTuple [(ErlangAtom "env"),
                                          env1_12])]) | ((/=) env1_12
                                                           ErlangEmptyList) ->
                (ErlangTuple [(ErlangAtom "env"), env1_12])
              _ -> (ErlangAtom "no_env")
              something_else -> (EXC.case_clause something_else)
        _ -> (ErlangAtom "no_env")
        _ -> (EXC.if_clause unit)
  in let case_16 = (ErlangTuple [env_15, ef_3])
  in
    case case_16 of
      (ErlangTuple [(ErlangTuple [(ErlangAtom "env"),
                                  (ErlangCons (ErlangTuple [fbs_19, flf_20,
                                                            fef_21,
                                                            fcs_22]) (ErlangEmptyList))]),
                    _]) ->
        let   
          nrbs_23 =
            case (ErlangAtom "true") of
              _ | ((==) rbs_4 (ErlangAtom "none")) -> bs0_2
              _ -> rbs_4
              _ -> (EXC.if_clause unit)
        in let
          tup_el_25 =
            (BIF.erlang__fun_info__2 [func_0, (ErlangAtom "arity")])
        in let tup_el_28 = (BIF.erlang__length__1 [as_1])
        in let case_24 = (ErlangTuple [tup_el_25, tup_el_28])
        in
          case case_24 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "arity"), arity_30]),
                          arity_31]) | (arity_31 == arity_30) ->
              (erlps__eval_fun__6
                 [fcs_22, as_1, fbs_19, flf_20, fef_21, nrbs_23])
            _ ->
              let    tup_el_41 = (ErlangTuple [func_0, as_1])
              in let
                arg_39 = (ErlangTuple [(ErlangAtom "badarity"), tup_el_41])
              in let arg_47 = (BIF.erlang__self__0 [])
              in let
                arg_46 =
                  (BIF.erlang__process_info__2
                     [arg_47, (ErlangAtom "current_stacktrace")])
              in let
                arg_44 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_46])
              in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_39, arg_44])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangTuple [(ErlangAtom "env"),
                                  (ErlangCons (ErlangTuple [fbs_49, flf_50,
                                                            fef_51, fcs_52,
                                                            fname_53]) (ErlangEmptyList))]),
                    _]) ->
        let   
          nrbs_54 =
            case (ErlangAtom "true") of
              _ | ((==) rbs_4 (ErlangAtom "none")) -> bs0_2
              _ -> rbs_4
              _ -> (EXC.if_clause unit)
        in let
          tup_el_56 =
            (BIF.erlang__fun_info__2 [func_0, (ErlangAtom "arity")])
        in let tup_el_59 = (BIF.erlang__length__1 [as_1])
        in let case_55 = (ErlangTuple [tup_el_56, tup_el_59])
        in
          case case_55 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "arity"), arity_61]),
                          arity_62]) | (arity_62 == arity_61) ->
              (erlps__eval_named_fun__8
                 [fcs_52, as_1, fbs_49, flf_50, fef_51, fname_53, func_0,
                  nrbs_54])
            _ ->
              let    tup_el_74 = (ErlangTuple [func_0, as_1])
              in let
                arg_72 = (ErlangTuple [(ErlangAtom "badarity"), tup_el_74])
              in let arg_80 = (BIF.erlang__self__0 [])
              in let
                arg_79 =
                  (BIF.erlang__process_info__2
                     [arg_80, (ErlangAtom "current_stacktrace")])
              in let
                arg_77 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_79])
              in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_72, arg_77])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "no_env"),
                    (ErlangAtom "none")]) | ((==) rbs_4 (ErlangAtom "value")) ->
        (BIF.erlang__apply__2 [func_0, as_1])
      (ErlangTuple [(ErlangAtom "no_env"), (ErlangAtom "none")]) ->
        let arg_84 = (BIF.erlang__apply__2 [func_0, as_1])
        in (erlps__ret_expr__3 [arg_84, bs0_2, rbs_4])
      (ErlangTuple [(ErlangAtom "no_env"),
                    (ErlangTuple [(ErlangAtom "value"), f_89])]) | ((==) rbs_4
                                                                      (ErlangAtom
                                                                         "value")) ->
        (BIF.erlang__apply__2
           [f_89, (ErlangCons func_0 (ErlangCons as_1 ErlangEmptyList))])
      (ErlangTuple [(ErlangAtom "no_env"),
                    (ErlangTuple [(ErlangAtom "value"), f_93])]) ->
        let
          arg_94 =
            (BIF.erlang__apply__2
               [f_93, (ErlangCons func_0 (ErlangCons as_1 ErlangEmptyList))])
        in (erlps__ret_expr__3 [arg_94, bs0_2, rbs_4])
      something_else -> (EXC.case_clause something_else)
erlps__do_apply__5 [arg_100, arg_101, arg_102, arg_103, arg_104]
  =
  (EXC.function_clause unit)
erlps__do_apply__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_apply__6 :: ErlangFun
erlps__do_apply__6 [mod_0, func_1, as_2, bs0_3, ef_4, rbs_5] =
  case ef_4 of
    (ErlangAtom "none") | ((==) rbs_5 (ErlangAtom "value")) ->
      (BIF.erlang__apply__3 [mod_0, func_1, as_2])
    (ErlangAtom "none") ->
      let arg_10 = (BIF.erlang__apply__3 [mod_0, func_1, as_2])
      in (erlps__ret_expr__3 [arg_10, bs0_3, rbs_5])
    (ErlangTuple [(ErlangAtom "value"), f_16]) | ((==) rbs_5
                                                    (ErlangAtom "value")) ->
      let arg_17 = (ErlangTuple [mod_0, func_1])
      in
        (BIF.erlang__apply__2
           [f_16, (ErlangCons arg_17 (ErlangCons as_2 ErlangEmptyList))])
    (ErlangTuple [(ErlangAtom "value"), f_22]) ->
      let    arg_24 = (ErlangTuple [mod_0, func_1])
      in let
        arg_23 =
          (BIF.erlang__apply__2
             [f_22, (ErlangCons arg_24 (ErlangCons as_2 ErlangEmptyList))])
      in (erlps__ret_expr__3 [arg_23, bs0_3, rbs_5])
    something_else -> (EXC.case_clause something_else)
erlps__do_apply__6 [arg_31, arg_32, arg_33, arg_34, arg_35,
                    arg_36]
  =
  (EXC.function_clause unit)
erlps__do_apply__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_lc__6 :: ErlangFun
erlps__eval_lc__6 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5] =
  let   
    arg_7 =
      (erlps__eval_lc1__6
         [e_0, qs_1, bs_2, lf_3, ef_4, ErlangEmptyList])
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_7])
  in (erlps__ret_expr__3 [arg_6, bs_2, rbs_5])
erlps__eval_lc__6 [arg_16, arg_17, arg_18, arg_19, arg_20,
                   arg_21]
  =
  (EXC.function_clause unit)
erlps__eval_lc__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_lc1__6 :: ErlangFun
erlps__eval_lc1__6 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "generate"), _, p_1,
                                              l0_2]) qs_3),
                    bs0_4, lf_5, ef_6, acc0_7]
  =
  let
    match_expr_15 =
      (erlps__expr__5 [l0_2, bs0_4, lf_5, ef_6, (ErlangAtom "none")])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "value"), l1_13, _bs1_14]) ->
        let
          compfun_27 =
            (ErlangFun 2
               let
                 lambda_16 [bs_19, acc_20] =
                   (erlps__eval_lc1__6 [e_0, qs_3, bs_19, lf_5, ef_6, acc_20])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in
          (erlps__eval_generate__7
             [l1_13, p_1, bs0_4, lf_5, ef_6, compfun_27, acc0_7])
      _ -> (EXC.badmatch match_expr_15)
erlps__eval_lc1__6 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "b_generate"), _, p_1,
                                              l0_2]) qs_3),
                    bs0_4, lf_5, ef_6, acc0_7]
  =
  let
    match_expr_15 =
      (erlps__expr__5 [l0_2, bs0_4, lf_5, ef_6, (ErlangAtom "none")])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "value"), bin_13, _bs1_14]) ->
        let
          compfun_27 =
            (ErlangFun 2
               let
                 lambda_16 [bs_19, acc_20] =
                   (erlps__eval_lc1__6 [e_0, qs_3, bs_19, lf_5, ef_6, acc_20])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in
          (erlps__eval_b_generate__7
             [bin_13, p_1, bs0_4, lf_5, ef_6, compfun_27, acc0_7])
      _ -> (EXC.badmatch match_expr_15)
erlps__eval_lc1__6 [e_0, (ErlangCons f_1 qs_2), bs0_3, lf_4,
                    ef_5, acc_6]
  =
  let
    compfun_16 =
      (ErlangFun 1
         let
           lambda_7 [bs_9] =
             (erlps__eval_lc1__6 [e_0, qs_2, bs_9, lf_4, ef_5, acc_6])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in
    (erlps__eval_filter__6
       [f_1, bs0_3, lf_4, ef_5, compfun_16, acc_6])
erlps__eval_lc1__6 [e_0, (ErlangEmptyList), bs_1, lf_2, ef_3,
                    acc_4]
  =
  let
    match_expr_11 =
      (erlps__expr__5 [e_0, bs_1, lf_2, ef_3, (ErlangAtom "none")])
  in
    case match_expr_11 of
      (ErlangTuple [(ErlangAtom "value"), v_10, _]) ->
        (ErlangCons v_10 acc_4)
      _ -> (EXC.badmatch match_expr_11)
erlps__eval_lc1__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                    arg_19]
  =
  (EXC.function_clause unit)
erlps__eval_lc1__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_bc__6 :: ErlangFun
erlps__eval_bc__6 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5] =
  let    arg_12 = (ErlangBinary (BIN.concat []))
  in let
    arg_6 =
      (erlps__eval_bc1__6 [e_0, qs_1, bs_2, lf_3, ef_4, arg_12])
  in (erlps__ret_expr__3 [arg_6, bs_2, rbs_5])
erlps__eval_bc__6 [arg_15, arg_16, arg_17, arg_18, arg_19,
                   arg_20]
  =
  (EXC.function_clause unit)
erlps__eval_bc__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_bc1__6 :: ErlangFun
erlps__eval_bc1__6 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "b_generate"), _, p_1,
                                              l0_2]) qs_3),
                    bs0_4, lf_5, ef_6, acc0_7]
  =
  let
    match_expr_15 =
      (erlps__expr__5 [l0_2, bs0_4, lf_5, ef_6, (ErlangAtom "none")])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "value"), bin_13, _bs1_14]) ->
        let
          compfun_27 =
            (ErlangFun 2
               let
                 lambda_16 [bs_19, acc_20] =
                   (erlps__eval_bc1__6 [e_0, qs_3, bs_19, lf_5, ef_6, acc_20])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in
          (erlps__eval_b_generate__7
             [bin_13, p_1, bs0_4, lf_5, ef_6, compfun_27, acc0_7])
      _ -> (EXC.badmatch match_expr_15)
erlps__eval_bc1__6 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "generate"), _, p_1,
                                              l0_2]) qs_3),
                    bs0_4, lf_5, ef_6, acc0_7]
  =
  let
    match_expr_15 =
      (erlps__expr__5 [l0_2, bs0_4, lf_5, ef_6, (ErlangAtom "none")])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "value"), list_13, _bs1_14]) ->
        let
          compfun_27 =
            (ErlangFun 2
               let
                 lambda_16 [bs_19, acc_20] =
                   (erlps__eval_bc1__6 [e_0, qs_3, bs_19, lf_5, ef_6, acc_20])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in
          (erlps__eval_generate__7
             [list_13, p_1, bs0_4, lf_5, ef_6, compfun_27, acc0_7])
      _ -> (EXC.badmatch match_expr_15)
erlps__eval_bc1__6 [e_0, (ErlangCons f_1 qs_2), bs0_3, lf_4,
                    ef_5, acc_6]
  =
  let
    compfun_16 =
      (ErlangFun 1
         let
           lambda_7 [bs_9] =
             (erlps__eval_bc1__6 [e_0, qs_2, bs_9, lf_4, ef_5, acc_6])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in
    (erlps__eval_filter__6
       [f_1, bs0_3, lf_4, ef_5, compfun_16, acc_6])
erlps__eval_bc1__6 [e_0, (ErlangEmptyList), bs_1, lf_2, ef_3,
                    acc_4]
  =
  let
    match_expr_11 =
      (erlps__expr__5 [e_0, bs_1, lf_2, ef_3, (ErlangAtom "none")])
  in
    case match_expr_11 of
      (ErlangTuple [(ErlangAtom "value"), v_10, _]) ->
        (ErlangBinary
           (BIN.concat
              [(BIN.from_int acc_4 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.from_int v_10 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
      _ -> (EXC.badmatch match_expr_11)
erlps__eval_bc1__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                    arg_19]
  =
  (EXC.function_clause unit)
erlps__eval_bc1__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_generate__7 :: ErlangFun
erlps__eval_generate__7 [(ErlangCons v_0 rest_1), p_2, bs0_3,
                         lf_4, ef_5, compfun_6, acc_7]
  =
  let    arg_11 = (erlps__new_bindings__0 [])
  in let case_8 = (erlps__match__4 [p_2, v_0, arg_11, bs0_3])
  in
    case case_8 of
      (ErlangTuple [(ErlangAtom "match"), bsn_13]) ->
        let    bs2_16 = (erlps__add_bindings__2 [bsn_13, bs0_3])
        in let
          newacc_20 =
            (BIF.erlang__apply__2
               [compfun_6,
                (ErlangCons bs2_16 (ErlangCons acc_7 ErlangEmptyList))])
        in
          (erlps__eval_generate__7
             [rest_1, p_2, bs0_3, lf_4, ef_5, compfun_6, newacc_20])
      (ErlangAtom "nomatch") ->
        (erlps__eval_generate__7
           [rest_1, p_2, bs0_3, lf_4, ef_5, compfun_6, acc_7])
      something_else -> (EXC.case_clause something_else)
erlps__eval_generate__7 [(ErlangEmptyList), _p_0, _bs0_1, _lf_2,
                         _ef_3, _compfun_4, acc_5]
  =
  acc_5
erlps__eval_generate__7 [term_0, _p_1, _bs0_2, _lf_3, _ef_4,
                         _compfun_5, _acc_6]
  =
  let   
    arg_8 = (ErlangTuple [(ErlangAtom "bad_generator"), term_0])
  in let arg_14 = (BIF.erlang__self__0 [])
  in let
    arg_13 =
      (BIF.erlang__process_info__2
         [arg_14, (ErlangAtom "current_stacktrace")])
  in let
    arg_11 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_13])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_8, arg_11])
erlps__eval_generate__7 [arg_16, arg_17, arg_18, arg_19, arg_20,
                         arg_21, arg_22]
  =
  (EXC.function_clause unit)
erlps__eval_generate__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_b_generate__7 :: ErlangFun
erlps__eval_b_generate__7 [bin_3@(ErlangBinary bin_c_0), p_4,
                           bs0_5, lf_6, ef_7, compfun_8, acc_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  let    mfun_11 = (erlps__match_fun__1 [bs0_5])
  in let
    efun_22 =
      (ErlangFun 2
         let
           lambda_12 [exp_15, bs_16] =
             (erlps__expr__5 [exp_15, bs_16, lf_6, ef_7, (ErlangAtom "none")])
           lambda_12 [arg_13, arg_14] = (EXC.function_clause unit)
           lambda_12 args = (EXC.badarity (ErlangFun 2 lambda_12) args)
         in lambda_12)
  in let arg_26 = (erlps__new_bindings__0 [])
  in let
    case_23 =
      (BIF.do_remote_fun_call "Eval.Bits" "erlps__bin_gen__6"
         [p_4, bin_3, arg_26, bs0_5, mfun_11, efun_22])
  in
    case case_23 of
      (ErlangTuple [(ErlangAtom "match"), rest_30, bs1_31]) ->
        let    bs2_34 = (erlps__add_bindings__2 [bs1_31, bs0_5])
        in let
          newacc_38 =
            (BIF.erlang__apply__2
               [compfun_8,
                (ErlangCons bs2_34 (ErlangCons acc_9 ErlangEmptyList))])
        in
          (erlps__eval_b_generate__7
             [rest_30, p_4, bs0_5, lf_6, ef_7, compfun_8, newacc_38])
      (ErlangTuple [(ErlangAtom "nomatch"), rest_46]) ->
        (erlps__eval_b_generate__7
           [rest_46, p_4, bs0_5, lf_6, ef_7, compfun_8, acc_9])
      (ErlangAtom "done") -> acc_9
      something_else -> (EXC.case_clause something_else)
erlps__eval_b_generate__7 [term_0, _p_1, _bs0_2, _lf_3, _ef_4,
                           _compfun_5, _acc_6]
  =
  let   
    arg_8 = (ErlangTuple [(ErlangAtom "bad_generator"), term_0])
  in let arg_14 = (BIF.erlang__self__0 [])
  in let
    arg_13 =
      (BIF.erlang__process_info__2
         [arg_14, (ErlangAtom "current_stacktrace")])
  in let
    arg_11 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_13])
  in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_8, arg_11])
erlps__eval_b_generate__7 [arg_16, arg_17, arg_18, arg_19,
                           arg_20, arg_21, arg_22]
  =
  (EXC.function_clause unit)
erlps__eval_b_generate__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_filter__6 :: ErlangFun
erlps__eval_filter__6 [f_0, bs0_1, lf_2, ef_3, compfun_4, acc_5]
  =
  let
    case_6 =
      (BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_test__1"
         [f_0])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let case_8 = (erlps__guard_test__4 [f_0, bs0_1, lf_2, ef_3])
        in
          case case_8 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs1_13]) ->
              (BIF.erlang__apply__2
                 [compfun_4, (ErlangCons bs1_13 ErlangEmptyList)])
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              acc_5
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let
          case_16 =
            (erlps__expr__5 [f_0, bs0_1, lf_2, ef_3, (ErlangAtom "none")])
        in
          case case_16 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs1_22]) ->
              (BIF.erlang__apply__2
                 [compfun_4, (ErlangCons bs1_22 ErlangEmptyList)])
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              acc_5
            (ErlangTuple [(ErlangAtom "value"), v_25, _]) ->
              let    arg_27 = (ErlangTuple [(ErlangAtom "bad_filter"), v_25])
              in let arg_33 = (BIF.erlang__self__0 [])
              in let
                arg_32 =
                  (BIF.erlang__process_info__2
                     [arg_33, (ErlangAtom "current_stacktrace")])
              in let
                arg_30 =
                  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_32])
              in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_27, arg_30])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__eval_filter__6 [arg_35, arg_36, arg_37, arg_38, arg_39,
                       arg_40]
  =
  (EXC.function_clause unit)
erlps__eval_filter__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_map_fields__4 :: ErlangFun
erlps__eval_map_fields__4 [fs_0, bs_1, lf_2, ef_3] =
  (erlps__eval_map_fields__5
     [fs_0, bs_1, lf_2, ef_3, ErlangEmptyList])
erlps__eval_map_fields__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__eval_map_fields__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_map_fields__5 :: ErlangFun
erlps__eval_map_fields__5 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_assoc"),
                                                     _, k0_0, v0_1]) fs_2),
                           bs0_3, lf_4, ef_5, acc_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [k0_0, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), k1_12, bs1_13]) ->
        let
          match_expr_22 =
            (erlps__expr__5 [v0_1, bs1_13, lf_4, ef_5, (ErlangAtom "none")])
        in
          case match_expr_22 of
            (ErlangTuple [(ErlangAtom "value"), v1_20, bs2_21]) ->
              let
                head_28 = (ErlangTuple [(ErlangAtom "map_assoc"), k1_12, v1_20])
              in
                (erlps__eval_map_fields__5
                   [fs_2, bs2_21, lf_4, ef_5, (ErlangCons head_28 acc_6)])
            _ -> (EXC.badmatch match_expr_22)
      _ -> (EXC.badmatch match_expr_14)
erlps__eval_map_fields__5 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_exact"),
                                                     _, k0_0, v0_1]) fs_2),
                           bs0_3, lf_4, ef_5, acc_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [k0_0, bs0_3, lf_4, ef_5, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), k1_12, bs1_13]) ->
        let
          match_expr_22 =
            (erlps__expr__5 [v0_1, bs1_13, lf_4, ef_5, (ErlangAtom "none")])
        in
          case match_expr_22 of
            (ErlangTuple [(ErlangAtom "value"), v1_20, bs2_21]) ->
              let
                head_28 = (ErlangTuple [(ErlangAtom "map_exact"), k1_12, v1_20])
              in
                (erlps__eval_map_fields__5
                   [fs_2, bs2_21, lf_4, ef_5, (ErlangCons head_28 acc_6)])
            _ -> (EXC.badmatch match_expr_22)
      _ -> (EXC.badmatch match_expr_14)
erlps__eval_map_fields__5 [(ErlangEmptyList), bs_0, _lf_1, _ef_2,
                           acc_3]
  =
  let
    tup_el_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_3])
  in (ErlangTuple [tup_el_4, bs_0])
erlps__eval_map_fields__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__eval_map_fields__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ret_expr__3 :: ErlangFun
erlps__ret_expr__3 [v_0, _bs_1, (ErlangAtom "value")] = v_0
erlps__ret_expr__3 [v_0, bs_1, (ErlangAtom "none")] =
  (ErlangTuple [(ErlangAtom "value"), v_0, bs_1])
erlps__ret_expr__3 [v_0, _bs_1, rbs_2] | (isEList rbs_2) =
  (ErlangTuple [(ErlangAtom "value"), v_0, rbs_2])
erlps__ret_expr__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__ret_expr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_fun__2 :: ErlangFun
erlps__eval_fun__2 [as_0,
                    (ErlangTuple [bs0_1, lf_2, ef_3, cs_4])]
  =
  (erlps__eval_fun__6
     [cs_4, as_0, bs0_1, lf_2, ef_3, (ErlangAtom "value")])
erlps__eval_fun__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__eval_fun__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_fun__6 :: ErlangFun
erlps__eval_fun__6 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                              _, h_0, g_1, b_2]) cs_3),
                    as_4, bs0_5, lf_6, ef_7, rbs_8]
  =
  let    arg_12 = (erlps__new_bindings__0 [])
  in let case_9 = (erlps__match_list__4 [h_0, as_4, arg_12, bs0_5])
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "match"), bsn_14]) ->
        let    bs1_17 = (erlps__add_bindings__2 [bsn_14, bs0_5])
        in let case_18 = (erlps__guard__4 [g_1, bs1_17, lf_6, ef_7])
        in
          case case_18 of
            (ErlangAtom "true") ->
              (erlps__exprs__5 [b_2, bs1_17, lf_6, ef_7, rbs_8])
            (ErlangAtom "false") ->
              (erlps__eval_fun__6 [cs_3, as_4, bs0_5, lf_6, ef_7, rbs_8])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "nomatch") ->
        (erlps__eval_fun__6 [cs_3, as_4, bs0_5, lf_6, ef_7, rbs_8])
      something_else -> (EXC.case_clause something_else)
erlps__eval_fun__6 [(ErlangEmptyList), as_0, _bs_1, _lf_2, _ef_3,
                    _rbs_4]
  =
  let   
    head_8 =
      (ErlangTuple
         [(ErlangAtom "erl_eval"),
          (ErlangAtom "-inside-an-interpreted-fun-"), as_0])
  in let arg_15 = (BIF.erlang__self__0 [])
  in let
    arg_14 =
      (BIF.erlang__process_info__2
         [arg_15, (ErlangAtom "current_stacktrace")])
  in let
    tail_12 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_14])
  in
    (BIF.erlang__raise__3
       [(ErlangAtom "error"), (ErlangAtom "function_clause"),
        (ErlangCons head_8 tail_12)])
erlps__eval_fun__6 [arg_17, arg_18, arg_19, arg_20, arg_21,
                    arg_22]
  =
  (EXC.function_clause unit)
erlps__eval_fun__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_named_fun__3 :: ErlangFun
erlps__eval_named_fun__3 [as_0, fun_1,
                          (ErlangTuple [bs0_2, lf_3, ef_4, cs_5, name_6])]
  =
  (erlps__eval_named_fun__8
     [cs_5, as_0, bs0_2, lf_3, ef_4, name_6, fun_1,
      (ErlangAtom "value")])
erlps__eval_named_fun__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__eval_named_fun__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_named_fun__8 :: ErlangFun
erlps__eval_named_fun__8 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                    _, h_0, g_1, b_2]) cs_3),
                          as_4, bs0_5, lf_6, ef_7, name_8, fun_9, rbs_10]
  =
  let    bs1_14 = (erlps__add_binding__3 [name_8, fun_9, bs0_5])
  in let arg_18 = (erlps__new_bindings__0 [])
  in let
    case_15 = (erlps__match_list__4 [h_0, as_4, arg_18, bs1_14])
  in
    case case_15 of
      (ErlangTuple [(ErlangAtom "match"), bsn_20]) ->
        let    bs2_23 = (erlps__add_bindings__2 [bsn_20, bs1_14])
        in let case_24 = (erlps__guard__4 [g_1, bs2_23, lf_6, ef_7])
        in
          case case_24 of
            (ErlangAtom "true") ->
              (erlps__exprs__5 [b_2, bs2_23, lf_6, ef_7, rbs_10])
            (ErlangAtom "false") ->
              (erlps__eval_named_fun__8
                 [cs_3, as_4, bs0_5, lf_6, ef_7, name_8, fun_9, rbs_10])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "nomatch") ->
        (erlps__eval_named_fun__8
           [cs_3, as_4, bs0_5, lf_6, ef_7, name_8, fun_9, rbs_10])
      something_else -> (EXC.case_clause something_else)
erlps__eval_named_fun__8 [(ErlangEmptyList), as_0, _bs_1, _lf_2,
                          _ef_3, _name_4, _fun_5, _rbs_6]
  =
  let   
    head_10 =
      (ErlangTuple
         [(ErlangAtom "erl_eval"),
          (ErlangAtom "-inside-an-interpreted-fun-"), as_0])
  in let arg_17 = (BIF.erlang__self__0 [])
  in let
    arg_16 =
      (BIF.erlang__process_info__2
         [arg_17, (ErlangAtom "current_stacktrace")])
  in let
    tail_14 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_16])
  in
    (BIF.erlang__raise__3
       [(ErlangAtom "error"), (ErlangAtom "function_clause"),
        (ErlangCons head_10 tail_14)])
erlps__eval_named_fun__8 [arg_19, arg_20, arg_21, arg_22, arg_23,
                          arg_24, arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__eval_named_fun__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__2 :: ErlangFun
erlps__expr_list__2 [es_0, bs_1] =
  (erlps__expr_list__4
     [es_0, bs_1, (ErlangAtom "none"), (ErlangAtom "none")])
erlps__expr_list__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__expr_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__3 :: ErlangFun
erlps__expr_list__3 [es_0, bs_1, lf_2] =
  (erlps__expr_list__4 [es_0, bs_1, lf_2, (ErlangAtom "none")])
erlps__expr_list__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__expr_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__4 :: ErlangFun
erlps__expr_list__4 [es_0, bs_1, lf_2, ef_3] =
  (erlps__expr_list__6
     [es_0, ErlangEmptyList, bs_1, bs_1, lf_2, ef_3])
erlps__expr_list__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__expr_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__6 :: ErlangFun
erlps__expr_list__6 [(ErlangCons e_0 es_1), vs_2, bsorig_3,
                     bs0_4, lf_5, ef_6]
  =
  let
    match_expr_14 =
      (erlps__expr__5 [e_0, bsorig_3, lf_5, ef_6, (ErlangAtom "none")])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangAtom "value"), v_12, bs1_13]) ->
        let arg_20 = (erlps__merge_bindings__2 [bs1_13, bs0_4])
        in
          (erlps__expr_list__6
             [es_1, (ErlangCons v_12 vs_2), bsorig_3, arg_20, lf_5, ef_6])
      _ -> (EXC.badmatch match_expr_14)
erlps__expr_list__6 [(ErlangEmptyList), vs_0, _, bs_1, _lf_2,
                     _ef_3]
  =
  let
    tup_el_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [vs_0])
  in (ErlangTuple [tup_el_4, bs_1])
erlps__expr_list__6 [arg_7, arg_8, arg_9, arg_10, arg_11, arg_12]
  =
  (EXC.function_clause unit)
erlps__expr_list__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_op__6 :: ErlangFun
erlps__eval_op__6 [op_0, arg1_1, arg2_2, bs_3, ef_4, rbs_5] =
  (erlps__do_apply__6
     [(ErlangAtom "erlang"), op_0,
      (ErlangCons arg1_1 (ErlangCons arg2_2 ErlangEmptyList)), bs_3,
      ef_4, rbs_5])
erlps__eval_op__6 [arg_16, arg_17, arg_18, arg_19, arg_20,
                   arg_21]
  =
  (EXC.function_clause unit)
erlps__eval_op__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_op__5 :: ErlangFun
erlps__eval_op__5 [op_0, arg_1, bs_2, ef_3, rbs_4] =
  (erlps__do_apply__6
     [(ErlangAtom "erlang"), op_0, (ErlangCons arg_1 ErlangEmptyList),
      bs_2, ef_3, rbs_4])
erlps__eval_op__5 [arg_13, arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__eval_op__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__if_clauses__5 :: ErlangFun
erlps__if_clauses__5 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                _, (ErlangEmptyList), g_0,
                                                b_1]) cs_2),
                      bs_3, lf_4, ef_5, rbs_6]
  =
  let case_7 = (erlps__guard__4 [g_0, bs_3, lf_4, ef_5])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__exprs__5 [b_1, bs_3, lf_4, ef_5, rbs_6])
      (ErlangAtom "false") ->
        (erlps__if_clauses__5 [cs_2, bs_3, lf_4, ef_5, rbs_6])
      something_else -> (EXC.case_clause something_else)
erlps__if_clauses__5 [(ErlangEmptyList), _bs_0, _lf_1, _ef_2,
                      _rbs_3]
  =
  let    arg_9 = (BIF.erlang__self__0 [])
  in let
    arg_8 =
      (BIF.erlang__process_info__2
         [arg_9, (ErlangAtom "current_stacktrace")])
  in let
    arg_6 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_8])
  in
    (BIF.erlang__raise__3
       [(ErlangAtom "error"), (ErlangAtom "if_clause"), arg_6])
erlps__if_clauses__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__if_clauses__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__try_clauses__8 :: ErlangFun
erlps__try_clauses__8 [b_0, cases_1, catches_2, ab_3, bs_4, lf_5,
                       ef_6, rbs_7]
  =
  let _ = (erlps__check_stacktrace_vars__2 [catches_2, bs_4])
  in
    (EXC.tryOfCatchFinally
       (\ _ ->
          (erlps__exprs__5 [b_0, bs_4, lf_5, ef_6, (ErlangAtom "none")]))
       (\ of_15 ->
          case of_15 of
            (ErlangTuple [(ErlangAtom "value"), v_17, bs1_18]) | ((==)
                                                                    cases_1
                                                                    ErlangEmptyList) ->
              (erlps__ret_expr__3 [v_17, bs1_18, rbs_7])
            (ErlangTuple [(ErlangAtom "value"), v_22, bs1_23]) ->
              let
                case_24 =
                  (erlps__match_clause__5
                     [cases_1, (ErlangCons v_22 ErlangEmptyList), bs1_23, lf_5,
                      ef_6])
              in
                case case_24 of
                  (ErlangTuple [b2_32, bs2_33]) ->
                    (erlps__exprs__5 [b2_32, bs2_33, lf_5, ef_6, rbs_7])
                  (ErlangAtom "nomatch") ->
                    let   
                      arg_40 = (ErlangTuple [(ErlangAtom "try_clause"), v_22])
                    in let arg_46 = (BIF.erlang__self__0 [])
                    in let
                      arg_45 =
                        (BIF.erlang__process_info__2
                           [arg_46, (ErlangAtom "current_stacktrace")])
                    in let
                      arg_43 =
                        (BIF.erlang__element__2
                           [(ErlangInt (DBI.fromInt 2)), arg_45])
                    in
                      (BIF.erlang__raise__3
                         [(ErlangAtom "error"), arg_40, arg_43])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.try_clause something_else))
       (\ ex_16 ->
          case ex_16 of
            (ErlangTuple [class_48, reason_49, stacktrace_50]) | ((==)
                                                                    catches_2
                                                                    ErlangEmptyList) ->
              (BIF.erlang__raise__3 [class_48, reason_49, stacktrace_50])
            (ErlangTuple [class_54, reason_55, stacktrace_56]) ->
              let    v_60 = (ErlangTuple [class_54, reason_55, stacktrace_56])
              in let
                case_61 =
                  (erlps__match_clause__5
                     [catches_2, (ErlangCons v_60 ErlangEmptyList), bs_4, lf_5,
                      ef_6])
              in
                case case_61 of
                  (ErlangTuple [b2_69, bs2_70]) ->
                    (erlps__exprs__5 [b2_69, bs2_70, lf_5, ef_6, rbs_7])
                  (ErlangAtom "nomatch") ->
                    (BIF.erlang__raise__3 [class_54, reason_55, stacktrace_56])
                  something_else -> (EXC.case_clause something_else)
            ex_16 -> (EXC.raise ex_16))
       (\ _ ->
          case (ErlangAtom "true") of
            _ | ((==) ab_3 ErlangEmptyList) -> bs_4
            _ ->
              (erlps__exprs__5 [ab_3, bs_4, lf_5, ef_6, (ErlangAtom "none")])
            _ -> (EXC.if_clause unit)))
erlps__try_clauses__8 [arg_84, arg_85, arg_86, arg_87, arg_88,
                       arg_89, arg_90, arg_91]
  =
  (EXC.function_clause unit)
erlps__try_clauses__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_stacktrace_vars__2 :: ErlangFun
erlps__check_stacktrace_vars__2 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                           _,
                                                           (ErlangCons (ErlangTuple [(ErlangAtom "tuple"),
                                                                                     _,
                                                                                     (ErlangCons _ (ErlangCons _ (ErlangCons stv_0 (ErlangEmptyList))))]) (ErlangEmptyList)),
                                                           _, _]) cs_1),
                                 bs_2]
  =
  case stv_0 of
    (ErlangTuple [(ErlangAtom "var"), _, v_4]) ->
      let case_5 = (erlps__binding__2 [v_4, bs_2])
      in
        case case_5 of
          (ErlangTuple [(ErlangAtom "value"), _]) ->
            let    arg_13 = (BIF.erlang__self__0 [])
            in let
              arg_12 =
                (BIF.erlang__process_info__2
                   [arg_13, (ErlangAtom "current_stacktrace")])
            in let
              arg_10 =
                (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_12])
            in
              (BIF.erlang__raise__3
                 [(ErlangAtom "error"), (ErlangAtom "stacktrace_bound"),
                  arg_10])
          (ErlangAtom "unbound") ->
            (erlps__check_stacktrace_vars__2 [cs_1, bs_2])
          something_else -> (EXC.case_clause something_else)
    _ ->
      let   
        arg_18 =
          (ErlangTuple [(ErlangAtom "illegal_stacktrace_variable"), stv_0])
      in let arg_24 = (BIF.erlang__self__0 [])
      in let
        arg_23 =
          (BIF.erlang__process_info__2
             [arg_24, (ErlangAtom "current_stacktrace")])
      in let
        arg_21 =
          (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_23])
      in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_18, arg_21])
    something_else -> (EXC.case_clause something_else)
erlps__check_stacktrace_vars__2 [(ErlangEmptyList), _bs_0] =
  (ErlangAtom "ok")
erlps__check_stacktrace_vars__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__check_stacktrace_vars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__case_clauses__6 :: ErlangFun
erlps__case_clauses__6 [val_0, cs_1, bs_2, lf_3, ef_4, rbs_5] =
  let
    case_6 =
      (erlps__match_clause__5
         [cs_1, (ErlangCons val_0 ErlangEmptyList), bs_2, lf_3, ef_4])
  in
    case case_6 of
      (ErlangTuple [b_14, bs1_15]) ->
        (erlps__exprs__5 [b_14, bs1_15, lf_3, ef_4, rbs_5])
      (ErlangAtom "nomatch") ->
        let    arg_22 = (ErlangTuple [(ErlangAtom "case_clause"), val_0])
        in let arg_28 = (BIF.erlang__self__0 [])
        in let
          arg_27 =
            (BIF.erlang__process_info__2
               [arg_28, (ErlangAtom "current_stacktrace")])
        in let
          arg_25 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_27])
        in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_22, arg_25])
      something_else -> (EXC.case_clause something_else)
erlps__case_clauses__6 [arg_30, arg_31, arg_32, arg_33, arg_34,
                        arg_35]
  =
  (EXC.function_clause unit)
erlps__case_clauses__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__receive_clauses__5 :: ErlangFun
erlps__receive_clauses__5 [cs_0, bs_1, lf_2, ef_3, rbs_4] =
  (erlps__receive_clauses__7
     [(ErlangAtom "infinity"), cs_0, (ErlangAtom "unused"), bs_1,
      lf_2, ef_3, rbs_4])
erlps__receive_clauses__5 [arg_12, arg_13, arg_14, arg_15,
                           arg_16]
  =
  (EXC.function_clause unit)
erlps__receive_clauses__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__receive_clauses__7 :: ErlangFun
erlps__receive_clauses__7 [t_0, cs_1, tb_2, bs_3, lf_4, ef_5,
                           rbs_6]
  =
  let   
    f_17 =
      (ErlangFun 1
         let
           lambda_7 [m_9] =
             (erlps__match_clause__5
                [cs_1, (ErlangCons m_9 ErlangEmptyList), bs_3, lf_4, ef_5])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let case_18 = (BIF.prim_eval__receive__2 [f_17, t_0])
  in
    case case_18 of
      (ErlangTuple [b_21, bs1_22]) ->
        (erlps__exprs__5 [b_21, bs1_22, lf_4, ef_5, rbs_6])
      (ErlangAtom "timeout") ->
        case tb_2 of
          (ErlangTuple [b_28, bs1_29]) ->
            (erlps__exprs__5 [b_28, bs1_29, lf_4, ef_5, rbs_6])
          _ -> (EXC.badmatch tb_2)
      something_else -> (EXC.case_clause something_else)
erlps__receive_clauses__7 [arg_36, arg_37, arg_38, arg_39,
                           arg_40, arg_41, arg_42]
  =
  (EXC.function_clause unit)
erlps__receive_clauses__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_clause__4 :: ErlangFun
erlps__match_clause__4 [cs_0, vs_1, bs_2, lf_3] =
  (erlps__match_clause__5
     [cs_0, vs_1, bs_2, lf_3, (ErlangAtom "none")])
erlps__match_clause__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__match_clause__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_clause__5 :: ErlangFun
erlps__match_clause__5 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                  _, h_0, g_1, b_2]) cs_3),
                        vals_4, bs_5, lf_6, ef_7]
  =
  let case_8 = (erlps__match_list__3 [h_0, vals_4, bs_5])
  in
    case case_8 of
      (ErlangTuple [(ErlangAtom "match"), bs1_12]) ->
        let case_13 = (erlps__guard__4 [g_1, bs1_12, lf_6, ef_7])
        in
          case case_13 of
            (ErlangAtom "true") -> (ErlangTuple [b_2, bs1_12])
            (ErlangAtom "false") ->
              (erlps__match_clause__5 [cs_3, vals_4, bs_5, lf_6, ef_7])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "nomatch") ->
        (erlps__match_clause__5 [cs_3, vals_4, bs_5, lf_6, ef_7])
      something_else -> (EXC.case_clause something_else)
erlps__match_clause__5 [(ErlangEmptyList), _vals_0, _bs_1, _lf_2,
                        _ef_3]
  =
  (ErlangAtom "nomatch")
erlps__match_clause__5 [arg_4, arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__match_clause__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard__4 :: ErlangFun
erlps__guard__4 [l_1@(ErlangCons g_0 _), bs0_2, lf_3, ef_4]
  | (isEList g_0) =
  (erlps__guard1__4 [l_1, bs0_2, lf_3, ef_4])
erlps__guard__4 [l_0, bs0_1, lf_2, ef_3] =
  (erlps__guard0__4 [l_0, bs0_1, lf_2, ef_3])
erlps__guard__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__guard__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard1__4 :: ErlangFun
erlps__guard1__4 [(ErlangCons g_0 gs_1), bs0_2, lf_3, ef_4]
  | (isEList g_0) =
  let case_5 = (erlps__guard0__4 [g_0, bs0_2, lf_3, ef_4])
  in
    case case_5 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") ->
        (erlps__guard1__4 [gs_1, bs0_2, lf_3, ef_4])
      something_else -> (EXC.case_clause something_else)
erlps__guard1__4 [(ErlangEmptyList), _bs_0, _lf_1, _ef_2] =
  (ErlangAtom "false")
erlps__guard1__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__guard1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard0__4 :: ErlangFun
erlps__guard0__4 [(ErlangCons g_0 gs_1), bs0_2, lf_3, ef_4] =
  let
    case_5 =
      (BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_test__1"
         [g_0])
  in
    case case_5 of
      (ErlangAtom "true") ->
        let case_7 = (erlps__guard_test__4 [g_0, bs0_2, lf_3, ef_4])
        in
          case case_7 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs_12]) ->
              (erlps__guard0__4 [gs_1, bs_12, lf_3, ef_4])
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              (ErlangAtom "false")
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let    arg_22 = (BIF.erlang__self__0 [])
        in let
          arg_21 =
            (BIF.erlang__process_info__2
               [arg_22, (ErlangAtom "current_stacktrace")])
        in let
          arg_19 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_21])
        in
          (BIF.erlang__raise__3
             [(ErlangAtom "error"), (ErlangAtom "guard_expr"), arg_19])
      something_else -> (EXC.case_clause something_else)
erlps__guard0__4 [(ErlangEmptyList), _bs_0, _lf_1, _ef_2] =
  (ErlangAtom "true")
erlps__guard0__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__guard0__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_test__4 :: ErlangFun
erlps__guard_test__4 [(ErlangTuple [(ErlangAtom "call"), l_0,
                                    (ErlangTuple [(ErlangAtom "atom"), ln_1,
                                                  f_2]),
                                    as0_3]),
                      bs0_4, lf_5, ef_6]
  =
  let    tt_8 = (erlps__type_test__1 [f_2])
  in let
    tup_el_11 = (ErlangTuple [(ErlangAtom "atom"), ln_1, tt_8])
  in let
    g_16 = (ErlangTuple [(ErlangAtom "call"), l_0, tup_el_11, as0_3])
  in (erlps__expr_guard_test__4 [g_16, bs0_4, lf_5, ef_6])
erlps__guard_test__4 [(ErlangTuple [(ErlangAtom "call"), l_0,
                                    (ErlangTuple [(ErlangAtom "remote"), lr_1,
                                                  (ErlangTuple [(ErlangAtom "atom"),
                                                                lm_2,
                                                                (ErlangAtom "erlang")]),
                                                  (ErlangTuple [(ErlangAtom "atom"),
                                                                lf_3, f_4])]),
                                    as0_5]),
                      bs0_6, lf_7, ef_8]
  | (lf_7 == lf_3) =
  let    tt_10 = (erlps__type_test__1 [f_4])
  in let
    tup_el_16 =
      (ErlangTuple [(ErlangAtom "atom"), lm_2, (ErlangAtom "erlang")])
  in let
    tup_el_20 = (ErlangTuple [(ErlangAtom "atom"), lf_3, tt_10])
  in let
    tup_el_13 =
      (ErlangTuple [(ErlangAtom "remote"), lr_1, tup_el_16, tup_el_20])
  in let
    g_25 = (ErlangTuple [(ErlangAtom "call"), l_0, tup_el_13, as0_5])
  in (erlps__expr_guard_test__4 [g_25, bs0_6, lf_3, ef_8])
erlps__guard_test__4 [g_0, bs0_1, lf_2, ef_3] =
  (erlps__expr_guard_test__4 [g_0, bs0_1, lf_2, ef_3])
erlps__guard_test__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__guard_test__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_guard_test__4 :: ErlangFun
erlps__expr_guard_test__4 [g_0, bs0_1, lf_2, ef_3] =
  (EXC.tryCatch
     (\ _ ->
        let
          match_final_4_10 =
            (erlps__expr__5 [g_0, bs0_1, lf_2, ef_3, (ErlangAtom "none")])
        in
          case match_final_4_10 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"), _]) ->
              match_final_4_10
            _ -> (EXC.badmatch match_final_4_10))
     (\ ex_13 ->
        case ex_13 of
          (ErlangTuple [(ErlangAtom "error"), _, _]) ->
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), bs0_1])
          ex_13 -> (EXC.raise ex_13)))
erlps__expr_guard_test__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__expr_guard_test__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type_test__1 :: ErlangFun
erlps__type_test__1 [(ErlangAtom "integer")] =
  (ErlangAtom "is_integer")
erlps__type_test__1 [(ErlangAtom "float")] =
  (ErlangAtom "is_float")
erlps__type_test__1 [(ErlangAtom "number")] =
  (ErlangAtom "is_number")
erlps__type_test__1 [(ErlangAtom "atom")] =
  (ErlangAtom "is_atom")
erlps__type_test__1 [(ErlangAtom "list")] =
  (ErlangAtom "is_list")
erlps__type_test__1 [(ErlangAtom "tuple")] =
  (ErlangAtom "is_tuple")
erlps__type_test__1 [(ErlangAtom "pid")] = (ErlangAtom "is_pid")
erlps__type_test__1 [(ErlangAtom "reference")] =
  (ErlangAtom "is_reference")
erlps__type_test__1 [(ErlangAtom "port")] =
  (ErlangAtom "is_port")
erlps__type_test__1 [(ErlangAtom "function")] =
  (ErlangAtom "is_function")
erlps__type_test__1 [(ErlangAtom "binary")] =
  (ErlangAtom "is_binary")
erlps__type_test__1 [(ErlangAtom "record")] =
  (ErlangAtom "is_record")
erlps__type_test__1 [(ErlangAtom "map")] = (ErlangAtom "is_map")
erlps__type_test__1 [test_0] = test_0
erlps__type_test__1 [arg_1] = (EXC.function_clause unit)
erlps__type_test__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match__3 :: ErlangFun
erlps__match__3 [pat_0, term_1, bs_2] =
  (erlps__match__4 [pat_0, term_1, bs_2, bs_2])
erlps__match__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__match__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match__4 :: ErlangFun
erlps__match__4 [pat_0, term_1, bs_2, bbs_3] =
  let
    case_4 =
      (EXC.tryCatch
         (\ _ -> (erlps__match1__4 [pat_0, term_1, bs_2, bbs_3]))
         (\ ex_10 ->
            case ex_10 of
              (ErlangTuple [(ErlangAtom "throw"), payload_11, _]) -> payload_11
              (ErlangTuple [(ErlangAtom "error"), payload_12, stack_13]) ->
                let tup_el_15 = (ErlangTuple [payload_12, stack_13])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_15])
              (ErlangTuple [(ErlangAtom "exit"), payload_18, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_18])
              ex_10 -> (EXC.raise ex_10)))
  in
    case case_4 of
      (ErlangAtom "invalid") ->
        let    tup_el_24 = (erlps__to_term__1 [pat_0])
        in let
          arg_22 =
            (ErlangTuple [(ErlangAtom "illegal_pattern"), tup_el_24])
        in let arg_29 = (BIF.erlang__self__0 [])
        in let
          arg_28 =
            (BIF.erlang__process_info__2
               [arg_29, (ErlangAtom "current_stacktrace")])
        in let
          arg_26 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_28])
        in (BIF.erlang__raise__3 [(ErlangAtom "error"), arg_22, arg_26])
      other_31 -> other_31
      something_else -> (EXC.case_clause something_else)
erlps__match__4 [arg_32, arg_33, arg_34, arg_35] =
  (EXC.function_clause unit)
erlps__match__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_to_conses__3 :: ErlangFun
erlps__string_to_conses__3 [(ErlangEmptyList), _, tail_0] =
  tail_0
erlps__string_to_conses__3 [(ErlangCons e_0 rest_1), line_2,
                            tail_3]
  =
  let   
    tup_el_6 = (ErlangTuple [(ErlangAtom "integer"), line_2, e_0])
  in let
    tup_el_10 = (erlps__string_to_conses__3 [rest_1, line_2, tail_3])
  in
    (ErlangTuple [(ErlangAtom "cons"), line_2, tup_el_6, tup_el_10])
erlps__string_to_conses__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__string_to_conses__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match1__4 :: ErlangFun
erlps__match1__4 [(ErlangTuple [(ErlangAtom "atom"), _, a0_0]),
                  a_1, bs_2, _bbs_3]
  =
  case a_1 of
    a0_5 | (a0_5 == a0_0) ->
      (ErlangTuple [(ErlangAtom "match"), bs_2])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "integer"), _,
                                i0_0]),
                  i_1, bs_2, _bbs_3]
  =
  case i_1 of
    i0_5 | (i0_5 == i0_0) ->
      (ErlangTuple [(ErlangAtom "match"), bs_2])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "float"), _, f0_0]),
                  f_1, bs_2, _bbs_3]
  =
  case f_1 of
    f0_5 | (f0_5 == f0_0) ->
      (ErlangTuple [(ErlangAtom "match"), bs_2])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "char"), _, c0_0]),
                  c_1, bs_2, _bbs_3]
  =
  case c_1 of
    c0_5 | (c0_5 == c0_0) ->
      (ErlangTuple [(ErlangAtom "match"), bs_2])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "var"), _,
                                (ErlangAtom "_")]),
                  _, bs_0, _bbs_1]
  =
  (ErlangTuple [(ErlangAtom "match"), bs_0])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "var"), _, name_0]),
                  term_1, bs_2, _bbs_3]
  =
  let case_4 = (erlps__binding__2 [name_0, bs_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "value"), term_7]) | (term_7 ==
                                                        term_1) ->
        (ErlangTuple [(ErlangAtom "match"), bs_2])
      (ErlangTuple [(ErlangAtom "value"), _]) ->
        (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
      (ErlangAtom "unbound") ->
        let tup_el_12 = (erlps__add_binding__3 [name_0, term_1, bs_2])
        in (ErlangTuple [(ErlangAtom "match"), tup_el_12])
      something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "match"), _, pat1_0,
                                pat2_1]),
                  term_2, bs0_3, bbs_4]
  =
  let
    match_expr_10 = (erlps__match1__4 [pat1_0, term_2, bs0_3, bbs_4])
  in
    case match_expr_10 of
      (ErlangTuple [(ErlangAtom "match"), bs1_9]) ->
        (erlps__match1__4 [pat2_1, term_2, bs1_9, bbs_4])
      _ -> (EXC.badmatch match_expr_10)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "string"), _, s0_0]),
                  s_1, bs_2, _bbs_3]
  =
  case s_1 of
    s0_5 | (s0_5 == s0_0) ->
      (ErlangTuple [(ErlangAtom "match"), bs_2])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "nil"), _]), nil_0,
                  bs_1, _bbs_2]
  =
  case nil_0 of
    (ErlangEmptyList) -> (ErlangTuple [(ErlangAtom "match"), bs_1])
    _ -> (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
    something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "cons"), _, h_0,
                                t_1]),
                  (ErlangCons h1_2 t1_3), bs0_4, bbs_5]
  =
  let match_expr_11 = (erlps__match1__4 [h_0, h1_2, bs0_4, bbs_5])
  in
    case match_expr_11 of
      (ErlangTuple [(ErlangAtom "match"), bs_10]) ->
        (erlps__match1__4 [t_1, t1_3, bs_10, bbs_5])
      _ -> (EXC.badmatch match_expr_11)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "cons"), _, _, _]),
                  _, _bs_0, _bbs_1]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "tuple"), _,
                                elts_0]),
                  tuple_1, bs_2, bbs_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_9 = (BIF.erlang__length__1 [elts_0])
             in let rop_11 = (BIF.erlang__tuple_size__1 [tuple_1])
             in (BIF.erlang__op_exactEq [lop_9, rop_11])))) =
  (erlps__match_tuple__5
     [elts_0, tuple_1, (ErlangInt (DBI.fromInt 1)), bs_2, bbs_3])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "tuple"), _, _]), _,
                  _bs_0, _bbs_1]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "map"), _, fs_0]),
                  map_2@(ErlangMap map_1), bs_3, bbs_4]
  =
  (erlps__match_map__4 [fs_0, map_2, bs_3, bbs_4])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "map"), _, _]), _,
                  _bs_0, _bbs_1]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                  b_4@(ErlangBinary bin_c_1), bs0_5, bbs_6]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_3) =
  let   
    evalfun_23 =
      (ErlangFun 2
         let
           lambda_7 [e_10, bs_11] =
             let   
               case_12 =
                 (BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_expr__1"
                    [e_10])
             in let
               _ =
                 case case_12 of
                   (ErlangAtom "true") -> (ErlangAtom "ok")
                   (ErlangAtom "false") ->
                     (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
                   something_else -> (EXC.case_clause something_else)
             in
               (EXC.tryCatch
                  (\ _ ->
                     (erlps__expr__5
                        [e_10, bs_11, (ErlangAtom "none"), (ErlangAtom "none"),
                         (ErlangAtom "none")]))
                  (\ ex_21 ->
                     case ex_21 of
                       (ErlangTuple [(ErlangAtom "error"),
                                     (ErlangTuple [(ErlangAtom "unbound"), _]),
                                     _]) ->
                         (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
                       ex_21 -> (EXC.raise ex_21)))
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let arg_28 = (erlps__match_fun__1 [bbs_6])
  in
    (BIF.do_remote_fun_call "Eval.Bits" "erlps__match_bits__6"
       [fs_0, b_4, bs0_5, bbs_6, arg_28, evalfun_23])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "bin"), _, _]), _,
                  _bs_0, _bbs_1]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "nil"), _]), r_0]),
                  term_1, bs_2, bbs_3]
  =
  (erlps__match1__4 [r_0, term_1, bs_2, bbs_3])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "cons"), li_0,
                                              (ErlangTuple [(ErlangAtom "integer"),
                                                            l2_1, i_2]),
                                              t_3]),
                                r_4]),
                  term_5, bs_6, bbs_7]
  =
  let   
    tup_el_11 = (ErlangTuple [(ErlangAtom "integer"), l2_1, i_2])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "op"), li_0, (ErlangAtom "++"), t_3, r_4])
  in let
    arg_8 =
      (ErlangTuple [(ErlangAtom "cons"), li_0, tup_el_11, tup_el_15])
  in (erlps__match1__4 [arg_8, term_5, bs_6, bbs_7])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "cons"), li_0,
                                              (ErlangTuple [(ErlangAtom "char"),
                                                            l2_1, c_2]),
                                              t_3]),
                                r_4]),
                  term_5, bs_6, bbs_7]
  =
  let    tup_el_11 = (ErlangTuple [(ErlangAtom "char"), l2_1, c_2])
  in let
    tup_el_15 =
      (ErlangTuple
         [(ErlangAtom "op"), li_0, (ErlangAtom "++"), t_3, r_4])
  in let
    arg_8 =
      (ErlangTuple [(ErlangAtom "cons"), li_0, tup_el_11, tup_el_15])
  in (erlps__match1__4 [arg_8, term_5, bs_6, bbs_7])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "string"), li_0,
                                              l_1]),
                                r_2]),
                  term_3, bs_4, bbs_5]
  =
  let arg_6 = (erlps__string_to_conses__3 [l_1, li_0, r_2])
  in (erlps__match1__4 [arg_6, term_3, bs_4, bbs_5])
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), line_0, op_1,
                                a_2]),
                  term_3, bs_4, bbs_5]
  =
  let   
    arg_7 = (ErlangTuple [(ErlangAtom "op"), line_0, op_1, a_2])
  in let case_6 = (erlps__partial_eval__1 [arg_7])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "op"), line_12, op_13,
                    a_14]) | (line_12 == line_0)
                           , (op_13 == op_1)
                           , (a_14 == a_2) ->
        (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
      x_16 -> (erlps__match1__4 [x_16, term_3, bs_4, bbs_5])
      something_else -> (EXC.case_clause something_else)
erlps__match1__4 [(ErlangTuple [(ErlangAtom "op"), line_0, op_1,
                                l_2, r_3]),
                  term_4, bs_5, bbs_6]
  =
  let   
    arg_8 = (ErlangTuple [(ErlangAtom "op"), line_0, op_1, l_2, r_3])
  in let case_7 = (erlps__partial_eval__1 [arg_8])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "op"), line_14, op_15, l_16,
                    r_17]) | (line_14 == line_0)
                           , (op_15 == op_1)
                           , (l_16 == l_2)
                           , (r_17 == r_3) ->
        (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
      x_19 -> (erlps__match1__4 [x_19, term_4, bs_5, bbs_6])
      something_else -> (EXC.case_clause something_else)
erlps__match1__4 [_, _, _bs_0, _bbs_1] =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__match1__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__match1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_fun__1 :: ErlangFun
erlps__match_fun__1 [bbs_0] =
  (ErlangFun 2
     let
       lambda_1 [(ErlangAtom "match"), (ErlangTuple [l_4, r_5, bs_6])] =
         (erlps__match1__4 [l_4, r_5, bs_6, bbs_0])
       lambda_1 [(ErlangAtom "binding"), (ErlangTuple [name_11, bs_12])]
         =
         (erlps__binding__2 [name_11, bs_12])
       lambda_1 [(ErlangAtom "add_binding"),
                 (ErlangTuple [name_15, val_16, bs_17])]
         =
         (erlps__add_binding__3 [name_15, val_16, bs_17])
       lambda_1 [arg_2, arg_3] = (EXC.function_clause unit)
       lambda_1 args = (EXC.badarity (ErlangFun 2 lambda_1) args)
     in lambda_1)
erlps__match_fun__1 [arg_21] = (EXC.function_clause unit)
erlps__match_fun__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_tuple__5 :: ErlangFun
erlps__match_tuple__5 [(ErlangCons e_0 es_1), tuple_2, i_3,
                       bs0_4, bbs_5]
  =
  let    arg_7 = (BIF.erlang__element__2 [i_3, tuple_2])
  in let
    match_expr_13 = (erlps__match1__4 [e_0, arg_7, bs0_4, bbs_5])
  in
    case match_expr_13 of
      (ErlangTuple [(ErlangAtom "match"), bs_12]) ->
        let
          arg_16 = (BIF.erlang__op_plus [i_3, (ErlangInt (DBI.fromInt 1))])
        in (erlps__match_tuple__5 [es_1, tuple_2, arg_16, bs_12, bbs_5])
      _ -> (EXC.badmatch match_expr_13)
erlps__match_tuple__5 [(ErlangEmptyList), _, _, bs_0, _bbs_1] =
  (ErlangTuple [(ErlangAtom "match"), bs_0])
erlps__match_tuple__5 [arg_4, arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__match_tuple__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_map__4 :: ErlangFun
erlps__match_map__4 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_exact"),
                                               _, k_0, v_1]) fs_2),
                     map_3, bs0_4, bbs_5]
  =
  let   
    vm_15 =
      (EXC.tryCatch
         (\ _ ->
            let match_expr_9 = (erlps__expr__2 [k_0, bbs_5])
            in
              case match_expr_9 of
                (ErlangTuple [(ErlangAtom "value"), ke_8, _]) ->
                  (BIF.maps__get__2 [ke_8, map_3])
                _ -> (EXC.badmatch match_expr_9))
         (\ ex_13 ->
            case ex_13 of
              (ErlangTuple [(ErlangAtom "error"), _, _]) ->
                (BIF.erlang__throw__1 [(ErlangAtom "nomatch")])
              ex_13 -> (EXC.raise ex_13)))
  in let
    match_expr_21 = (erlps__match1__4 [v_1, vm_15, bs0_4, bbs_5])
  in
    case match_expr_21 of
      (ErlangTuple [(ErlangAtom "match"), bs_20]) ->
        (erlps__match_map__4 [fs_2, map_3, bs_20, bbs_5])
      _ -> (EXC.badmatch match_expr_21)
erlps__match_map__4 [(ErlangEmptyList), _, bs_0, _] =
  (ErlangTuple [(ErlangAtom "match"), bs_0])
erlps__match_map__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__match_map__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_list__3 :: ErlangFun
erlps__match_list__3 [ps_0, ts_1, bs_2] =
  (erlps__match_list__4 [ps_0, ts_1, bs_2, bs_2])
erlps__match_list__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__match_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_list__4 :: ErlangFun
erlps__match_list__4 [(ErlangCons p_0 ps_1),
                      (ErlangCons t_2 ts_3), bs0_4, bbs_5]
  =
  let case_6 = (erlps__match__4 [p_0, t_2, bs0_4, bbs_5])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "match"), bs1_11]) ->
        (erlps__match_list__4 [ps_1, ts_3, bs1_11, bbs_5])
      (ErlangAtom "nomatch") -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__match_list__4 [(ErlangEmptyList), (ErlangEmptyList), bs_0,
                      _bbs_1]
  =
  (ErlangTuple [(ErlangAtom "match"), bs_0])
erlps__match_list__4 [_, _, _bs_0, _bbs_1] =
  (ErlangAtom "nomatch")
erlps__match_list__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__match_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_bindings__0 :: ErlangFun
erlps__new_bindings__0 [] =
  (BIF.do_remote_fun_call "Orddict" "erlps__new__0" [])
erlps__new_bindings__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bindings__1 :: ErlangFun
erlps__bindings__1 [bs_0] =
  (BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs_0])
erlps__bindings__1 [arg_2] = (EXC.function_clause unit)
erlps__bindings__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binding__2 :: ErlangFun
erlps__binding__2 [name_0, bs_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2"
         [name_0, bs_1])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), val_5]) ->
        (ErlangTuple [(ErlangAtom "value"), val_5])
      (ErlangAtom "error") -> (ErlangAtom "unbound")
      something_else -> (EXC.case_clause something_else)
erlps__binding__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__binding__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_binding__3 :: ErlangFun
erlps__add_binding__3 [name_0, val_1, bs_2] =
  (BIF.do_remote_fun_call "Orddict" "erlps__store__3"
     [name_0, val_1, bs_2])
erlps__add_binding__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__add_binding__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_binding__2 :: ErlangFun
erlps__del_binding__2 [name_0, bs_1] =
  (BIF.do_remote_fun_call "Orddict" "erlps__erase__2"
     [name_0, bs_1])
erlps__del_binding__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__del_binding__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_bindings__2 :: ErlangFun
erlps__add_bindings__2 [bs1_0, bs2_1] =
  let   
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [(ErlangTuple [name_6, val_7]), bs_8] =
             (BIF.do_remote_fun_call "Orddict" "erlps__store__3"
                [name_6, val_7, bs_8])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs1_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_2, bs2_1, arg_13])
erlps__add_bindings__2 [arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__add_bindings__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge_bindings__2 :: ErlangFun
erlps__merge_bindings__2 [bs1_0, bs2_1] =
  let   
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [(ErlangTuple [name_6, val_7]), bs_8] =
             let
               case_9 =
                 (BIF.do_remote_fun_call "Orddict" "erlps__find__2"
                    [name_6, bs_8])
             in
               case case_9 of
                 (ErlangTuple [(ErlangAtom "ok"), val_12]) | (val_12 ==
                                                                val_7) ->
                   bs_8
                 (ErlangTuple [(ErlangAtom "ok"), v1_13]) ->
                   let   
                     arg_15 = (ErlangTuple [(ErlangAtom "badmatch"), v1_13])
                   in let arg_21 = (BIF.erlang__self__0 [])
                   in let
                     arg_20 =
                       (BIF.erlang__process_info__2
                          [arg_21, (ErlangAtom "current_stacktrace")])
                   in let
                     arg_18 =
                       (BIF.erlang__element__2
                          [(ErlangInt (DBI.fromInt 2)), arg_20])
                   in
                     (BIF.erlang__raise__3
                        [(ErlangAtom "error"), arg_15, arg_18])
                 (ErlangAtom "error") ->
                   (BIF.do_remote_fun_call "Orddict" "erlps__store__3"
                      [name_6, val_7, bs_8])
                 something_else -> (EXC.case_clause something_else)
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in let
    arg_27 =
      (BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs1_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_2, bs2_1, arg_27])
erlps__merge_bindings__2 [arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__merge_bindings__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_terms__1 :: ErlangFun
erlps__to_terms__1 [abstrs_0] =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          abstr_2 ->
            let lc_ret_4 = (erlps__to_term__1 [abstr_2])
            in (ErlangCons lc_ret_4 ErlangEmptyList)
          _ -> ErlangEmptyList)
     abstrs_0)
erlps__to_terms__1 [arg_6] = (EXC.function_clause unit)
erlps__to_terms__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_term__1 :: ErlangFun
erlps__to_term__1 [abstr_0] =
  (BIF.do_remote_fun_call "Erl.Parse" "erlps__anno_to_term__1"
     [abstr_0])
erlps__to_term__1 [arg_2] = (EXC.function_clause unit)
erlps__to_term__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subst_values_for_vars__2 :: ErlangFun
erlps__subst_values_for_vars__2 [var_2@(ErlangTuple [(ErlangAtom "var"),
                                                     a_0, v_1]),
                                 bs_3]
  =
  let case_4 = (erlps__binding__2 [v_1, bs_3])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "value"), value_7]) ->
        (ErlangTuple [(ErlangAtom "value"), a_0, value_7])
      (ErlangAtom "unbound") -> var_2
      something_else -> (EXC.case_clause something_else)
erlps__subst_values_for_vars__2 [l_0, bs_1] | (isEList l_0) =
  (flmap
     (\ lc_4 ->
        case lc_4 of
          e_3 ->
            let lc_ret_5 = (erlps__subst_values_for_vars__2 [e_3, bs_1])
            in (ErlangCons lc_ret_5 ErlangEmptyList)
          _ -> ErlangEmptyList)
     l_0)
erlps__subst_values_for_vars__2 [t_0, bs_1] | (isETuple t_0) =
  let    arg_3 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let arg_2 = (erlps__subst_values_for_vars__2 [arg_3, bs_1])
  in (BIF.erlang__list_to_tuple__1 [arg_2])
erlps__subst_values_for_vars__2 [t_0, _bs_1] = t_0
erlps__subst_values_for_vars__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__subst_values_for_vars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extended_parse_exprs__1 :: ErlangFun
erlps__extended_parse_exprs__1 [tokens_0] =
  let    ts_2 = (erlps__tokens_fixup__1 [tokens_0])
  in let
    case_3 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
         [ts_2])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), exprs0_5]) ->
        let match_expr_9 = (erlps__expr_fixup__1 [exprs0_5])
        in
          case match_expr_9 of
            (ErlangTuple [exprs_7, bs_8]) ->
              let tup_el_11 = (erlps__reset_expr_anno__1 [exprs_7])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_11, bs_8])
            _ -> (EXC.badmatch match_expr_9)
      _errorinfo_14 ->
        let arg_15 = (erlps__reset_token_anno__1 [ts_2])
        in
          (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
             [arg_15])
      something_else -> (EXC.case_clause something_else)
erlps__extended_parse_exprs__1 [arg_17] =
  (EXC.function_clause unit)
erlps__extended_parse_exprs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens_fixup__1 :: ErlangFun
erlps__tokens_fixup__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__tokens_fixup__1 [ts0_2@(ErlangCons t_0 ts_1)] =
  (EXC.tryOfCatch (\ _ -> (erlps__token_fixup__1 [ts0_2]))
     (\ of_4 ->
        case of_4 of
          (ErlangTuple [newt_6, newts_7]) ->
            let tail_9 = (erlps__tokens_fixup__1 [newts_7])
            in (ErlangCons newt_6 tail_9)
          something_else -> (EXC.try_clause something_else))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) ->
            let tail_12 = (erlps__tokens_fixup__1 [ts_1])
            in (ErlangCons t_0 tail_12)
          ex_5 -> (EXC.raise ex_5)))
erlps__tokens_fixup__1 [arg_14] = (EXC.function_clause unit)
erlps__tokens_fixup__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__token_fixup__1 :: ErlangFun
erlps__token_fixup__1 [ts_0] =
  let match_expr_5 = (erlps__unscannable__1 [ts_0])
  in
    case match_expr_5 of
      (ErlangTuple [annol_2, newts_3, fixuptag_4]) ->
        let   
          arg_6 =
            (flmap
               (\ lc_9 ->
                  case lc_9 of
                    a_8 ->
                      let
                        lc_ret_10 =
                          (BIF.do_remote_fun_call "Erl.Anno" "erlps__text__1"
                             [a_8])
                      in (ErlangCons lc_ret_10 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               annol_2)
        in let
          string_12 =
            (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_6])
        in let fun_14 = (erlps__fixup_fun__1 [fixuptag_4])
        in let
          match_expr_16 =
            (BIF.erlang__apply__2
               [fun_14, (ErlangCons string_12 ErlangEmptyList)])
        in let arg_17 = (erlps__fixup_text__1 [fixuptag_4])
        in let arg_19 = (BIF.erlang__hd__1 [annol_2])
        in let
          newanno_21 =
            (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_text__2"
               [arg_17, arg_19])
        in let
          tup_el_22 =
            (ErlangTuple [(ErlangAtom "string"), newanno_21, string_12])
        in (ErlangTuple [tup_el_22, newts_3])
      _ -> (EXC.badmatch match_expr_5)
erlps__token_fixup__1 [arg_27] = (EXC.function_clause unit)
erlps__token_fixup__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unscannable__1 :: ErlangFun
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Fun")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                               a7_6]) ts_7)))))))]
  =
  (ErlangTuple
     [(ErlangCons a1_0
         (ErlangCons a2_1
            (ErlangCons a3_2
               (ErlangCons a4_3
                  (ErlangCons a5_4
                     (ErlangCons a6_5 (ErlangCons a7_6 ErlangEmptyList))))))),
      ts_7, (ErlangAtom "function")])
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Fun")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                                                                               a7_6]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                                                                                                                                                                a8_7,
                                                                                                                                                                                                                                                                                                _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                                                                                              a9_8]) ts_9)))))))))]
  =
  (ErlangTuple
     [(ErlangCons a1_0
         (ErlangCons a2_1
            (ErlangCons a3_2
               (ErlangCons a4_3
                  (ErlangCons a5_4
                     (ErlangCons a6_5
                        (ErlangCons a7_6
                           (ErlangCons a8_7
                              (ErlangCons a9_8 ErlangEmptyList))))))))),
      ts_9, (ErlangAtom "function")])
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                  a2_1,
                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                 a4_3,
                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                               a5_4]) ts_5)))))]
  =
  (ErlangTuple
     [(ErlangCons a1_0
         (ErlangCons a2_1
            (ErlangCons a3_2
               (ErlangCons a4_3 (ErlangCons a5_4 ErlangEmptyList))))),
      ts_5, (ErlangAtom "pid")])
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Port")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                  a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                   a4_3,
                                                                                                                                                                   _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                 a5_4]) ts_5)))))]
  =
  (ErlangTuple
     [(ErlangCons a1_0
         (ErlangCons a2_1
            (ErlangCons a3_2
               (ErlangCons a4_3 (ErlangCons a5_4 ErlangEmptyList))))),
      ts_5, (ErlangAtom "port")])
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Ref")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                               a7_6]) ts_7)))))))]
  =
  (ErlangTuple
     [(ErlangCons a1_0
         (ErlangCons a2_1
            (ErlangCons a3_2
               (ErlangCons a4_3
                  (ErlangCons a5_4
                     (ErlangCons a6_5 (ErlangCons a7_6 ErlangEmptyList))))))),
      ts_7, (ErlangAtom "reference")])
erlps__unscannable__1 [arg_25] = (EXC.function_clause unit)
erlps__unscannable__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_fixup__1 :: ErlangFun
erlps__expr_fixup__1 [expr0_0] =
  let    arg_2 = (erlps__new_bindings__0 [])
  in let
    match_expr_6 =
      (erlps__expr_fixup__3
         [expr0_0, arg_2, (ErlangInt (DBI.fromInt 1))])
  in
    case match_expr_6 of
      (ErlangTuple [expr_4, bs_5, _]) -> (ErlangTuple [expr_4, bs_5])
      _ -> (EXC.badmatch match_expr_6)
erlps__expr_fixup__1 [arg_9] = (EXC.function_clause unit)
erlps__expr_fixup__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_fixup__3 :: ErlangFun
erlps__expr_fixup__3 [t_2@(ErlangTuple [(ErlangAtom "string"),
                                        a_0, s_1]),
                      bs0_3, i_4]
  =
  (EXC.tryOfCatch (\ _ -> (erlps__string_fixup__2 [a_0, s_1]))
     (\ of_7 ->
        case of_7 of
          value_9 ->
            let    var_11 = (erlps__new_var__1 [i_4])
            in let bs_15 = (erlps__add_binding__3 [var_11, value_9, bs0_3])
            in let
              tup_el_16 = (ErlangTuple [(ErlangAtom "var"), a_0, var_11])
            in let
              tup_el_21 =
                (BIF.erlang__op_plus [i_4, (ErlangInt (DBI.fromInt 1))])
            in (ErlangTuple [tup_el_16, bs_15, tup_el_21])
          something_else -> (EXC.try_clause something_else))
     (\ ex_8 ->
        case ex_8 of
          (ErlangTuple [_, _, _]) -> (ErlangTuple [t_2, bs0_3, i_4])
          ex_8 -> (EXC.raise ex_8)))
erlps__expr_fixup__3 [tuple_0, bs0_1, i0_2]
  | (isETuple tuple_0) =
  let    arg_3 = (BIF.erlang__tuple_to_list__1 [tuple_0])
  in let
    match_expr_10 = (erlps__expr_fixup__3 [arg_3, bs0_1, i0_2])
  in
    case match_expr_10 of
      (ErlangTuple [l_7, bs_8, i_9]) ->
        let tup_el_11 = (BIF.erlang__list_to_tuple__1 [l_7])
        in (ErlangTuple [tup_el_11, bs_8, i_9])
      _ -> (EXC.badmatch match_expr_10)
erlps__expr_fixup__3 [(ErlangCons e0_0 es0_1), bs0_2, i0_3] =
  let match_expr_10 = (erlps__expr_fixup__3 [e0_0, bs0_2, i0_3])
  in
    case match_expr_10 of
      (ErlangTuple [e_7, bs1_8, i1_9]) ->
        let match_expr_17 = (erlps__expr_fixup__3 [es0_1, bs1_8, i1_9])
        in
          case match_expr_17 of
            (ErlangTuple [es_14, bs_15, i_16]) ->
              (ErlangTuple [(ErlangCons e_7 es_14), bs_15, i_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_10)
erlps__expr_fixup__3 [t_0, bs_1, i_2] =
  (ErlangTuple [t_0, bs_1, i_2])
erlps__expr_fixup__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__expr_fixup__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_fixup__2 :: ErlangFun
erlps__string_fixup__2 [a_0, s_1] =
  let   
    text_3 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__text__1" [a_0])
  in let fixuptag_6 = (erlps__fixup_tag__2 [text_3, s_1])
  in let fun_8 = (erlps__fixup_fun__1 [fixuptag_6])
  in
    (BIF.erlang__apply__2 [fun_8, (ErlangCons s_1 ErlangEmptyList)])
erlps__string_fixup__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__string_fixup__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_var__1 :: ErlangFun
erlps__new_var__1 [i_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__concat__1"
         [(ErlangCons (ErlangAtom "__ExtendedParseExprs_")
             (ErlangCons i_0
                (ErlangCons (ErlangAtom "__") ErlangEmptyList)))])
  in (BIF.erlang__list_to_atom__1 [arg_1])
erlps__new_var__1 [arg_9] = (EXC.function_clause unit)
erlps__new_var__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reset_token_anno__1 :: ErlangFun
erlps__reset_token_anno__1 [tokens_0] =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          t_2 ->
            let   
              arg_8 =
                (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), t_2])
            in let fun_11 = (erlps__reset_anno__0 [])
            in let
              arg_7 =
                (BIF.erlang__apply__2
                   [fun_11, (ErlangCons arg_8 ErlangEmptyList)])
            in let
              lc_ret_4 =
                (BIF.erlang__setelement__3
                   [(ErlangInt (DBI.fromInt 2)), t_2, arg_7])
            in (ErlangCons lc_ret_4 ErlangEmptyList)
          _ -> ErlangEmptyList)
     tokens_0)
erlps__reset_token_anno__1 [arg_12] = (EXC.function_clause unit)
erlps__reset_token_anno__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reset_expr_anno__1 :: ErlangFun
erlps__reset_expr_anno__1 [exprs_0] =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          e_2 ->
            let    arg_5 = (erlps__reset_anno__0 [])
            in let
              lc_ret_4 =
                (BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
                   [arg_5, e_2])
            in (ErlangCons lc_ret_4 ErlangEmptyList)
          _ -> ErlangEmptyList)
     exprs_0)
erlps__reset_expr_anno__1 [arg_7] = (EXC.function_clause unit)
erlps__reset_expr_anno__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reset_anno__0 :: ErlangFun
erlps__reset_anno__0 [] =
  (ErlangFun 1
     let
       lambda_0 [a_2] =
         let
           arg_3 =
             (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [a_2])
         in (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [arg_3])
       lambda_0 [arg_1] = (EXC.function_clause unit)
       lambda_0 args = (EXC.badarity (ErlangFun 1 lambda_0) args)
     in lambda_0)
erlps__reset_anno__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fixup_fun__1 :: ErlangFun
erlps__fixup_fun__1 [(ErlangAtom "function")] =
  (ErlangFun 1 erlps__function__1)
erlps__fixup_fun__1 [(ErlangAtom "pid")] =
  (BIF.erlang__make_fun__3
     [(ErlangAtom "erlang"), (ErlangAtom "list_to_pid"),
      (ErlangInt (DBI.fromInt 1))])
erlps__fixup_fun__1 [(ErlangAtom "port")] =
  (BIF.erlang__make_fun__3
     [(ErlangAtom "erlang"), (ErlangAtom "list_to_port"),
      (ErlangInt (DBI.fromInt 1))])
erlps__fixup_fun__1 [(ErlangAtom "reference")] =
  (BIF.erlang__make_fun__3
     [(ErlangAtom "erlang"), (ErlangAtom "list_to_ref"),
      (ErlangInt (DBI.fromInt 1))])
erlps__fixup_fun__1 [arg_3] = (EXC.function_clause unit)
erlps__fixup_fun__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function__1 :: ErlangFun
erlps__function__1 [s_0] =
  let
    match_expr_5 =
      (BIF.do_remote_fun_call "Erl.Scan" "erlps__string__1" [s_0])
  in
    case match_expr_5 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons _ (ErlangCons _ (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                        _,
                                                                                        module_2]) (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                           _,
                                                                                                                                           function_3]) (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                                                                _,
                                                                                                                                                                                                arity_4]) _)))))))),
                    _]) ->
        (BIF.erlang__make_fun__3 [module_2, function_3, arity_4])
      _ -> (EXC.badmatch match_expr_5)
erlps__function__1 [arg_9] = (EXC.function_clause unit)
erlps__function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fixup_text__1 :: ErlangFun
erlps__fixup_text__1 [(ErlangAtom "function")] =
  (make_string "function")
erlps__fixup_text__1 [(ErlangAtom "pid")] = (make_string "pid")
erlps__fixup_text__1 [(ErlangAtom "port")] = (make_string "port")
erlps__fixup_text__1 [(ErlangAtom "reference")] =
  (make_string "reference")
erlps__fixup_text__1 [arg_0] = (EXC.function_clause unit)
erlps__fixup_text__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fixup_tag__2 :: ErlangFun
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))),
                     (ErlangCons (ErlangInt num_8) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 117)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_7) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 35))) =
  (ErlangAtom "function")
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))),
                     (ErlangCons (ErlangInt num_3) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 100)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 60))) =
  (ErlangAtom "pid")
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))),
                     (ErlangCons (ErlangInt num_4) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 111)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 35))) =
  (ErlangAtom "port")
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))))))),
                     (ErlangCons (ErlangInt num_9) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 102)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 114)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_7) == (ErlangInt (DBI.fromInt 99)))
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 101)))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 35))) =
  (ErlangAtom "reference")
erlps__fixup_tag__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__fixup_tag__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extended_parse_term__1 :: ErlangFun
erlps__extended_parse_term__1 [tokens_0] =
  let case_1 = (erlps__extended_parse_exprs__1 [tokens_0])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons expr_3 (ErlangEmptyList)), bindings_4]) ->
        (EXC.tryOfCatch
           (\ _ -> (erlps__normalise__2 [expr_3, bindings_4]))
           (\ of_7 ->
              case of_7 of
                term_9 -> (ErlangTuple [(ErlangAtom "ok"), term_9])
                something_else -> (EXC.try_clause something_else))
           (\ ex_8 ->
              case ex_8 of
                (ErlangTuple [_, _, _]) ->
                  let   
                    arg_12 =
                      (BIF.erlang__element__2
                         [(ErlangInt (DBI.fromInt 2)), expr_3])
                  in let
                    loc_15 =
                      (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1"
                         [arg_12])
                  in let tup_el_20 = (make_string "bad term")
                  in let
                    tup_el_17 =
                      (ErlangTuple [loc_15, (ErlangAtom "erl_eval"), tup_el_20])
                  in (ErlangTuple [(ErlangAtom "error"), tup_el_17])
                ex_8 -> (EXC.raise ex_8)))
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons _ (ErlangCons expr_21 _)), _bindings_22]) ->
        let   
          arg_23 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), expr_21])
        in let
          loc_26 =
            (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [arg_23])
        in let tup_el_31 = (make_string "bad term")
        in let
          tup_el_28 =
            (ErlangTuple [loc_26, (ErlangAtom "erl_eval"), tup_el_31])
        in (ErlangTuple [(ErlangAtom "error"), tup_el_28])
      error_32@(ErlangTuple [(ErlangAtom "error"), _]) -> error_32
      something_else -> (EXC.case_clause something_else)
erlps__extended_parse_term__1 [arg_33] =
  (EXC.function_clause unit)
erlps__extended_parse_term__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__normalise__2 :: ErlangFun
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "var"), _, v_0]),
                     bs_1]
  =
  let match_expr_5 = (erlps__binding__2 [v_0, bs_1])
  in
    case match_expr_5 of
      (ErlangTuple [(ErlangAtom "value"), value_4]) -> value_4
      _ -> (EXC.badmatch match_expr_5)
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "char"), _, c_0]),
                     _bs_1]
  =
  c_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "integer"), _,
                                   i_0]),
                     _bs_1]
  =
  i_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "float"), _,
                                   f_0]),
                     _bs_1]
  =
  f_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "atom"), _, a_0]),
                     _bs_1]
  =
  a_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "string"), _,
                                   s_0]),
                     _bs_1]
  =
  s_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "nil"), _]),
                     _bs_0]
  =
  ErlangEmptyList
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                     bs_1]
  =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [e_8, _] =
             let tup_el_10 = (erlps__normalise__2 [e_8, bs_1])
             in
               (ErlangTuple [(ErlangAtom "value"), tup_el_10, ErlangEmptyList])
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    match_expr_17 =
      (BIF.do_remote_fun_call "Eval.Bits" "erlps__expr_grp__5"
         [fs_0, ErlangEmptyList, arg_4, ErlangEmptyList,
          (ErlangAtom "true")])
  in
    case match_expr_17 of
      (ErlangTuple [(ErlangAtom "value"), b_16, _]) -> b_16
      _ -> (EXC.badmatch match_expr_17)
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "cons"), _,
                                   head_0, tail_1]),
                     bs_2]
  =
  let    head_3 = (erlps__normalise__2 [head_0, bs_2])
  in let tail_6 = (erlps__normalise__2 [tail_1, bs_2])
  in (ErlangCons head_3 tail_6)
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "tuple"), _,
                                   args_0]),
                     bs_1]
  =
  let arg_2 = (erlps__normalise_list__2 [args_0, bs_1])
  in (BIF.erlang__list_to_tuple__1 [arg_2])
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "map"), _,
                                   pairs_0]),
                     bs_1]
  =
  let   
    arg_3 =
      (ErlangFun 1
         let
           lambda_4 [(ErlangTuple [(ErlangAtom "map_field_assoc"), _, k_6,
                                   v_7])]
             =
             let    tup_el_8 = (erlps__normalise__2 [k_6, bs_1])
             in let tup_el_11 = (erlps__normalise__2 [v_7, bs_1])
             in (ErlangTuple [tup_el_8, tup_el_11])
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_3, pairs_0])
  in (BIF.maps__from_list__1 [arg_2])
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "char"), _,
                                                 i_0])]),
                     _bs_1]
  =
  i_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "integer"), _,
                                                 i_0])]),
                     _bs_1]
  =
  i_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "float"), _,
                                                 f_0])]),
                     _bs_1]
  =
  f_0
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "char"), _,
                                                 i_0])]),
                     _bs_1]
  =
  (BIF.erlang__op_neg [i_0])
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "integer"), _,
                                                 i_0])]),
                     _bs_1]
  =
  (BIF.erlang__op_neg [i_0])
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "float"), _,
                                                 f_0])]),
                     _bs_1]
  =
  (BIF.erlang__op_neg [f_0])
erlps__normalise__2 [(ErlangTuple [(ErlangAtom "fun"), _,
                                   (ErlangTuple [(ErlangAtom "function"),
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, m_0]),
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, f_1]),
                                                 (ErlangTuple [(ErlangAtom "integer"),
                                                               _, a_2])])]),
                     _bs_3]
  =
  (BIF.erlang__make_fun__3 [m_0, f_1, a_2])
erlps__normalise__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__normalise__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__normalise_list__2 :: ErlangFun
erlps__normalise_list__2 [(ErlangCons h_0 t_1), bs_2] =
  let    head_3 = (erlps__normalise__2 [h_0, bs_2])
  in let tail_6 = (erlps__normalise_list__2 [t_1, bs_2])
  in (ErlangCons head_3 tail_6)
erlps__normalise_list__2 [(ErlangEmptyList), _bs_0] =
  ErlangEmptyList
erlps__normalise_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__normalise_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_constant_expr__1 :: ErlangFun
erlps__is_constant_expr__1 [expr_0] =
  let case_1 = (erlps__eval_expr__1 [expr_0])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"), x_3]) | (isENum x_3) ->
        (ErlangAtom "true")
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__is_constant_expr__1 [arg_4] = (EXC.function_clause unit)
erlps__is_constant_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_expr__1 :: ErlangFun
erlps__eval_expr__1 [expr_0] =
  let
    case_1 =
      (EXC.tryCatch (\ _ -> (erlps__ev_expr__1 [expr_0]))
         (\ ex_4 ->
            case ex_4 of
              (ErlangTuple [(ErlangAtom "throw"), payload_5, _]) -> payload_5
              (ErlangTuple [(ErlangAtom "error"), payload_6, stack_7]) ->
                let tup_el_9 = (ErlangTuple [payload_6, stack_7])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_9])
              (ErlangTuple [(ErlangAtom "exit"), payload_12, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_12])
              ex_4 -> (EXC.raise ex_4)))
  in
    case case_1 of
      x_15 | (isEInt x_15) -> (ErlangTuple [(ErlangAtom "ok"), x_15])
      x_18 | (isEFloat x_18) -> (ErlangTuple [(ErlangAtom "ok"), x_18])
      x_21 | (isEAtom x_21) -> (ErlangTuple [(ErlangAtom "ok"), x_21])
      (ErlangTuple [(ErlangAtom "EXIT"), reason_24]) ->
        (ErlangTuple [(ErlangAtom "error"), reason_24])
      _ -> (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__eval_expr__1 [arg_29] = (EXC.function_clause unit)
erlps__eval_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partial_eval__1 :: ErlangFun
erlps__partial_eval__1 [expr_0] =
  let    line_2 = (erlps__line__1 [expr_0])
  in let
    case_3 =
      (EXC.tryCatch (\ _ -> (erlps__ev_expr__1 [expr_0]))
         (\ ex_6 ->
            case ex_6 of
              (ErlangTuple [(ErlangAtom "throw"), payload_7, _]) -> payload_7
              (ErlangTuple [(ErlangAtom "error"), payload_8, stack_9]) ->
                let tup_el_11 = (ErlangTuple [payload_8, stack_9])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_11])
              (ErlangTuple [(ErlangAtom "exit"), payload_14, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_14])
              ex_6 -> (EXC.raise ex_6)))
  in
    case case_3 of
      x_17 | (isEInt x_17) ->
        let arg_19 = (ErlangTuple [(ErlangAtom "integer"), line_2, x_17])
        in (erlps__ret_expr__2 [expr_0, arg_19])
      x_23 | (isEFloat x_23) ->
        let arg_25 = (ErlangTuple [(ErlangAtom "float"), line_2, x_23])
        in (erlps__ret_expr__2 [expr_0, arg_25])
      x_29 | (isEAtom x_29) ->
        let arg_31 = (ErlangTuple [(ErlangAtom "atom"), line_2, x_29])
        in (erlps__ret_expr__2 [expr_0, arg_31])
      _ -> expr_0
      something_else -> (EXC.case_clause something_else)
erlps__partial_eval__1 [arg_35] = (EXC.function_clause unit)
erlps__partial_eval__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ev_expr__1 :: ErlangFun
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "op"), _, op_0, l_1,
                                 r_2])]
  =
  let    head_6 = (erlps__ev_expr__1 [l_1])
  in let head_9 = (erlps__ev_expr__1 [r_2])
  in
    (BIF.erlang__apply__3
       [(ErlangAtom "erlang"), op_0,
        (ErlangCons head_6 (ErlangCons head_9 ErlangEmptyList))])
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "op"), _, op_0,
                                 a_1])]
  =
  let head_5 = (erlps__ev_expr__1 [a_1])
  in
    (BIF.erlang__apply__3
       [(ErlangAtom "erlang"), op_0,
        (ErlangCons head_5 ErlangEmptyList)])
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "integer"), _,
                                 x_0])]
  =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "char"), _, x_0])] =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "float"), _, x_0])]
  =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "atom"), _, x_0])] =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "tuple"), _, es_0])]
  =
  let
    arg_1 =
      (flmap
         (\ lc_4 ->
            case lc_4 of
              x_3 ->
                let lc_ret_5 = (erlps__ev_expr__1 [x_3])
                in (ErlangCons lc_ret_5 ErlangEmptyList)
              _ -> ErlangEmptyList)
         es_0)
  in (BIF.erlang__list_to_tuple__1 [arg_1])
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "nil"), _])] =
  ErlangEmptyList
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "cons"), _, h_0,
                                 t_1])]
  =
  let    head_2 = (erlps__ev_expr__1 [h_0])
  in let tail_4 = (erlps__ev_expr__1 [t_1])
  in (ErlangCons head_2 tail_4)
erlps__ev_expr__1 [arg_6] = (EXC.function_clause unit)
erlps__ev_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_str__1 :: ErlangFun
erlps__eval_str__1 [str_0] | (isEList str_0) =
  let
    case_1 =
      (BIF.do_remote_fun_call "Erl.Scan" "erlps__tokens__3"
         [ErlangEmptyList, str_0, (ErlangInt (DBI.fromInt 0))])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "more"), _]) ->
        let tup_el_6 = (make_string "Incomplete form (missing .<cr>)??")
        in (ErlangTuple [(ErlangAtom "error"), tup_el_6])
      (ErlangTuple [(ErlangAtom "done"),
                    (ErlangTuple [(ErlangAtom "ok"), toks_7, _]), rest_8]) ->
        let case_9 = (erlps__all_white__1 [rest_8])
        in
          case case_9 of
            (ErlangAtom "true") ->
              let
                case_11 =
                  (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
                     [toks_7])
              in
                case case_11 of
                  (ErlangTuple [(ErlangAtom "ok"), exprs_13]) ->
                    let
                      case_14 =
                        (EXC.tryCatch
                           (\ _ ->
                              let arg_16 = (erlps__new_bindings__0 [])
                              in (erlps__exprs__2 [exprs_13, arg_16]))
                           (\ ex_18 ->
                              case ex_18 of
                                (ErlangTuple [(ErlangAtom "throw"), payload_19,
                                              _]) ->
                                  payload_19
                                (ErlangTuple [(ErlangAtom "error"), payload_20,
                                              stack_21]) ->
                                  let
                                    tup_el_23 =
                                      (ErlangTuple [payload_20, stack_21])
                                  in
                                    (ErlangTuple
                                       [(ErlangAtom "EXIT"), tup_el_23])
                                (ErlangTuple [(ErlangAtom "exit"), payload_26,
                                              _]) ->
                                  (ErlangTuple
                                     [(ErlangAtom "EXIT"), payload_26])
                                ex_18 -> (EXC.raise ex_18)))
                    in
                      case case_14 of
                        (ErlangTuple [(ErlangAtom "value"), val_29, _]) ->
                          (ErlangTuple [(ErlangAtom "ok"), val_29])
                        other_32 ->
                          let    arg_36 = (make_string "*** eval: ~p")
                          in let
                            arg_35 =
                              (BIF.do_remote_fun_call "Io.Lib"
                                 "erlps__format__2"
                                 [arg_36,
                                  (ErlangCons other_32 ErlangEmptyList)])
                          in let
                            tup_el_34 =
                              (BIF.do_remote_fun_call "Lists"
                                 "erlps__flatten__1" [arg_35])
                          in (ErlangTuple [(ErlangAtom "error"), tup_el_34])
                        something_else -> (EXC.case_clause something_else)
                  (ErlangTuple [(ErlangAtom "error"),
                                (ErlangTuple [_line_40, mod_41, args_42])]) ->
                    let    arg_44 = (make_string "*** ~ts")
                    in let
                      head_46 =
                        (BIF.erlang__apply__3
                           [mod_41, (ErlangAtom "format_error"),
                            (ErlangCons args_42 ErlangEmptyList)])
                    in let
                      arg_43 =
                        (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                           [arg_44, (ErlangCons head_46 ErlangEmptyList)])
                    in let
                      msg_53 =
                        (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                           [arg_43])
                    in (ErlangTuple [(ErlangAtom "error"), msg_53])
                  something_else -> (EXC.case_clause something_else)
            (ErlangAtom "false") ->
              let   
                arg_59 =
                  (make_string "Non-white space found after end-of-form :~ts")
              in let
                arg_58 =
                  (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                     [arg_59, (ErlangCons rest_8 ErlangEmptyList)])
              in let
                tup_el_57 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_58])
              in (ErlangTuple [(ErlangAtom "error"), tup_el_57])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__eval_str__1 [bin_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let arg_1 = (BIF.erlang__binary_to_list__1 [bin_0])
  in (erlps__eval_str__1 [arg_1])
erlps__eval_str__1 [arg_4] = (EXC.function_clause unit)
erlps__eval_str__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__all_white__1 :: ErlangFun
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (erlps__all_white__1 [t_1])
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (erlps__all_white__1 [t_1])
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__all_white__1 [t_1])
erlps__all_white__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__all_white__1 [_] = (ErlangAtom "false")
erlps__all_white__1 [arg_0] = (EXC.function_clause unit)
erlps__all_white__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ret_expr__2 :: ErlangFun
erlps__ret_expr__2 [_old_0, new_1] = new_1
erlps__ret_expr__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__ret_expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line__1 :: ErlangFun
erlps__line__1 [expr_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), expr_0])
erlps__line__1 [arg_3] = (EXC.function_clause unit)
erlps__line__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)