module Erl.Eval(erlps__exprs__2, erlps__exprs__3,
                erlps__exprs__4, erlps__expr__2, erlps__expr__3, erlps__expr__4,
                erlps__expr__5, erlps__expr_list__2, erlps__expr_list__3,
                erlps__expr_list__4, erlps__new_bindings__0, erlps__bindings__1,
                erlps__binding__2, erlps__add_binding__3, erlps__del_binding__2,
                erlps__extended_parse_exprs__1, erlps__extended_parse_term__1,
                erlps__is_constant_expr__1, erlps__partial_eval__1,
                erlps__eval_str__1, erlps__match_clause__4,
                erlps__check_command__2, erlps__fun_data__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__empty_fun_used_vars__0 :: ErlangFun
erlps__empty_fun_used_vars__0 [] = ErlangMap Map.empty
erlps__empty_fun_used_vars__0 args =
  EXC.badarity (ErlangFun 0 erlps__empty_fun_used_vars__0) args

erlps__exprs__2 :: ErlangFun
erlps__exprs__2 [exprs_0, bs_1] =
  let case_2 = erlps__check_command__2 [exprs_0, bs_1]
  in
    case case_2 of
      (ErlangAtom "ok") ->
        let arg_10 = erlps__empty_fun_used_vars__0 []
        in
          erlps__exprs__6
            [exprs_0, bs_1, ErlangAtom "none", ErlangAtom "none",
             ErlangAtom "none", arg_10]
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangTuple [_location_11, _mod_12, error_13])]) ->
        let    arg_17 = toErl 2
        in let arg_19 = BIF.erlang__self__0 []
        in let
          arg_18 =
            BIF.erlang__process_info__2
              [arg_19, ErlangAtom "current_stacktrace"]
        in let arg_16 = BIF.erlang__element__2 [arg_17, arg_18]
        in BIF.erlang__raise__3 [ErlangAtom "error", error_13, arg_16]
      something_else -> EXC.case_clause something_else
erlps__exprs__2 [arg_21, arg_22] = EXC.function_clause unit
erlps__exprs__2 args =
  EXC.badarity (ErlangFun 2 erlps__exprs__2) args

erlps__exprs__3 :: ErlangFun
erlps__exprs__3 [exprs_0, bs_1, lf_2] =
  let arg_8 = erlps__empty_fun_used_vars__0 []
  in
    erlps__exprs__6
      [exprs_0, bs_1, lf_2, ErlangAtom "none", ErlangAtom "none",
       arg_8]
erlps__exprs__3 [arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__exprs__3 args =
  EXC.badarity (ErlangFun 3 erlps__exprs__3) args

erlps__exprs__4 :: ErlangFun
erlps__exprs__4 [exprs_0, bs_1, lf_2, ef_3] =
  let arg_9 = erlps__empty_fun_used_vars__0 []
  in
    erlps__exprs__6
      [exprs_0, bs_1, lf_2, ef_3, ErlangAtom "none", arg_9]
erlps__exprs__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__exprs__4 args =
  EXC.badarity (ErlangFun 4 erlps__exprs__4) args

erlps__exprs__6 :: ErlangFun
erlps__exprs__6 [(ErlangCons e_0 (ErlangEmptyList)), bs0_1, lf_2,
                 ef_3, rbs_4, fuvs_5]
  =
  erlps__expr__6 [e_0, bs0_1, lf_2, ef_3, rbs_4, fuvs_5]
erlps__exprs__6 [(ErlangCons e_0 es_1), bs0_2, lf_3, ef_4, rbs_5,
                 fuvs_6]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [e_0, bs0_2, lf_3, ef_4, ErlangAtom "none", fuvs_6]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), _v_14, bs_15]) ->
        erlps__exprs__6 [es_1, bs_15, lf_3, ef_4, rbs_5, fuvs_6]
      _ -> EXC.badmatch matchExpr_16
erlps__exprs__6 [arg_23, arg_24, arg_25, arg_26, arg_27, arg_28]
  =
  EXC.function_clause unit
erlps__exprs__6 args =
  EXC.badarity (ErlangFun 6 erlps__exprs__6) args

erlps__maybe_match_exprs__4 :: ErlangFun
erlps__maybe_match_exprs__4 [(ErlangCons (ErlangTuple [(ErlangAtom "maybe_match"),
                                                       anno_0, lhs_1,
                                                       rhs0_2]) es_3),
                             bs0_4, lf_5, ef_6]
  =
  let
    matchExpr_14 =
      erlps__expr__5 [rhs0_2, bs0_4, lf_5, ef_6, ErlangAtom "none"]
  in
    case matchExpr_14 of
      (ErlangTuple [(ErlangAtom "value"), rhs_12, bs1_13]) ->
        let
          case_15 =
            erlps__match__6 [lhs_1, rhs_12, anno_0, bs1_13, bs1_13, ef_6]
        in
          case case_15 of
            (ErlangTuple [(ErlangAtom "match"), bs_22]) ->
              case es_3 of
                (ErlangEmptyList) -> ErlangTuple [ErlangAtom "success", rhs_12]
                (ErlangCons _ _) ->
                  erlps__maybe_match_exprs__4 [es_3, bs_22, lf_5, ef_6]
                something_else -> EXC.case_clause something_else
            (ErlangAtom "nomatch") ->
              ErlangTuple [ErlangAtom "failure", rhs_12]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_14
erlps__maybe_match_exprs__4 [(ErlangCons e_0 (ErlangEmptyList)),
                             bs0_1, lf_2, ef_3]
  =
  let
    matchExpr_11 =
      erlps__expr__5 [e_0, bs0_1, lf_2, ef_3, ErlangAtom "none"]
  in
    case matchExpr_11 of
      (ErlangTuple [(ErlangAtom "value"), v_9, _bs_10]) ->
        ErlangTuple [ErlangAtom "success", v_9]
      _ -> EXC.badmatch matchExpr_11
erlps__maybe_match_exprs__4 [(ErlangCons e_0 es_1), bs0_2, lf_3,
                             ef_4]
  =
  let
    matchExpr_12 =
      erlps__expr__5 [e_0, bs0_2, lf_3, ef_4, ErlangAtom "none"]
  in
    case matchExpr_12 of
      (ErlangTuple [(ErlangAtom "value"), _v_10, bs_11]) ->
        erlps__maybe_match_exprs__4 [es_1, bs_11, lf_3, ef_4]
      _ -> EXC.badmatch matchExpr_12
erlps__maybe_match_exprs__4 [arg_17, arg_18, arg_19, arg_20] =
  EXC.function_clause unit
erlps__maybe_match_exprs__4 args =
  EXC.badarity (ErlangFun 4 erlps__maybe_match_exprs__4) args

erlps__expr__2 :: ErlangFun
erlps__expr__2 [e_0, bs_1] =
  let
    case_2 =
      erlps__check_command__2 [ErlangCons e_0 ErlangEmptyList, bs_1]
  in
    case case_2 of
      (ErlangAtom "ok") ->
        erlps__expr__5
          [e_0, bs_1, ErlangAtom "none", ErlangAtom "none",
           ErlangAtom "none"]
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangTuple [_location_12, _mod_13, error_14])]) ->
        let    arg_18 = toErl 2
        in let arg_20 = BIF.erlang__self__0 []
        in let
          arg_19 =
            BIF.erlang__process_info__2
              [arg_20, ErlangAtom "current_stacktrace"]
        in let arg_17 = BIF.erlang__element__2 [arg_18, arg_19]
        in BIF.erlang__raise__3 [ErlangAtom "error", error_14, arg_17]
      something_else -> EXC.case_clause something_else
erlps__expr__2 [arg_22, arg_23] = EXC.function_clause unit
erlps__expr__2 args =
  EXC.badarity (ErlangFun 2 erlps__expr__2) args

erlps__expr__3 :: ErlangFun
erlps__expr__3 [e_0, bs_1, lf_2] =
  erlps__expr__5
    [e_0, bs_1, lf_2, ErlangAtom "none", ErlangAtom "none"]
erlps__expr__3 [arg_8, arg_9, arg_10] = EXC.function_clause unit
erlps__expr__3 args =
  EXC.badarity (ErlangFun 3 erlps__expr__3) args

erlps__expr__4 :: ErlangFun
erlps__expr__4 [e_0, bs_1, lf_2, ef_3] =
  erlps__expr__5 [e_0, bs_1, lf_2, ef_3, ErlangAtom "none"]
erlps__expr__4 [arg_9, arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__expr__4 args =
  EXC.badarity (ErlangFun 4 erlps__expr__4) args

erlps__check_command__2 :: ErlangFun
erlps__check_command__2 [es_0, bs_1] =
  let    arg_9 = erlps__bindings__1 [bs_1]
  in let
    case_7 =
      BIF.do_remote_fun_call "Erl.Lint" "erlps__exprs_opt__3"
        [es_0, arg_9,
         ErlangCons (ErlangAtom "bitlevel_binaries")
           (ErlangCons (ErlangAtom "binary_comprehension") ErlangEmptyList)]
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "ok"), _ws_12]) -> ErlangAtom "ok"
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangCons (ErlangTuple [_file_13,
                                              (ErlangCons error_14 _)]) (ErlangEmptyList)),
                    _ws_15]) ->
        ErlangTuple [ErlangAtom "error", error_14]
      something_else -> EXC.case_clause something_else
erlps__check_command__2 [arg_18, arg_19] =
  EXC.function_clause unit
erlps__check_command__2 args =
  EXC.badarity (ErlangFun 2 erlps__check_command__2) args

erlps__fun_data__1 :: ErlangFun
erlps__fun_data__1 [f_0] | isEFun f_0 =
  let case_1 = BIF.erlang__fun_info__2 [f_0, ErlangAtom "module"]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "module"), (ErlangAtom "erl_eval")]) ->
        let case_4 = BIF.erlang__fun_info__2 [f_0, ErlangAtom "env"]
        in
          case case_4 of
            (ErlangTuple [(ErlangAtom "env"),
                          (ErlangCons (ErlangTuple [_fanno_7, fbs_8, _flf_9,
                                                    _fef_10, _fuvs_11,
                                                    fcs_12]) (ErlangEmptyList))]) ->
              ErlangTuple [ErlangAtom "fun_data", fbs_8, fcs_12]
            (ErlangTuple [(ErlangAtom "env"),
                          (ErlangCons (ErlangTuple [_fanno_16, fbs_17, _flf_18,
                                                    _fef_19, _fuvs_20, fcs_21,
                                                    fname_22]) (ErlangEmptyList))]) ->
              ErlangTuple
                [ErlangAtom "named_fun_data", fbs_17, fname_22, fcs_21]
            something_else -> EXC.case_clause something_else
      _ -> ErlangAtom "false"
erlps__fun_data__1 [_t_0] = ErlangAtom "false"
erlps__fun_data__1 [arg_1] = EXC.function_clause unit
erlps__fun_data__1 args =
  EXC.badarity (ErlangFun 1 erlps__fun_data__1) args

erlps__expr__5 :: ErlangFun
erlps__expr__5 [expr_0, bs_1, lf_2, ef_3, rbs_4] =
  let arg_10 = erlps__empty_fun_used_vars__0 []
  in erlps__expr__6 [expr_0, bs_1, lf_2, ef_3, rbs_4, arg_10]
erlps__expr__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  EXC.function_clause unit
erlps__expr__5 args =
  EXC.badarity (ErlangFun 5 erlps__expr__5) args

erlps__expr__6 :: ErlangFun
erlps__expr__6 [(ErlangTuple [(ErlangAtom "var"), anno_0, v_1]),
                bs_2, _lf_3, ef_4, rbs_5, _fuvs_6]
  =
  let case_7 = erlps__binding__2 [v_1, bs_2]
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "value"), val_10]) ->
        erlps__ret_expr__3 [val_10, bs_2, rbs_5]
      (ErlangAtom "unbound") ->
        let    arg_14 = ErlangTuple [ErlangAtom "unbound", v_1]
        in let arg_18 = toErl 2
        in let arg_20 = BIF.erlang__self__0 []
        in let
          arg_19 =
            BIF.erlang__process_info__2
              [arg_20, ErlangAtom "current_stacktrace"]
        in let arg_17 = BIF.erlang__element__2 [arg_18, arg_19]
        in
          erlps__apply_error__6 [arg_14, arg_17, anno_0, bs_2, ef_4, rbs_5]
      something_else -> EXC.case_clause something_else
erlps__expr__6 [(ErlangTuple [(ErlangAtom "char"), _, c_0]),
                bs_1, _lf_2, _ef_3, rbs_4, _fuvs_5]
  =
  erlps__ret_expr__3 [c_0, bs_1, rbs_4]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "integer"), _, i_0]),
                bs_1, _lf_2, _ef_3, rbs_4, _fuvs_5]
  =
  erlps__ret_expr__3 [i_0, bs_1, rbs_4]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "float"), _, f_0]),
                bs_1, _lf_2, _ef_3, rbs_4, _fuvs_5]
  =
  erlps__ret_expr__3 [f_0, bs_1, rbs_4]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "atom"), _, a_0]),
                bs_1, _lf_2, _ef_3, rbs_4, _fuvs_5]
  =
  erlps__ret_expr__3 [a_0, bs_1, rbs_4]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "string"), _, s_0]),
                bs_1, _lf_2, _ef_3, rbs_4, _fuvs_5]
  =
  erlps__ret_expr__3 [s_0, bs_1, rbs_4]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "nil"), _]), bs_0,
                _lf_1, _ef_2, rbs_3, _fuvs_4]
  =
  erlps__ret_expr__3 [ErlangEmptyList, bs_0, rbs_3]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "cons"), anno_0, h0_1,
                              t0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [h0_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), h_14, bs1_15]) ->
        let
          matchExpr_25 =
            erlps__expr__6
              [t0_2, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
        in
          case matchExpr_25 of
            (ErlangTuple [(ErlangAtom "value"), t_23, bs2_24]) ->
              let
                arg_29 = erlps__merge_bindings__4 [bs1_15, bs2_24, anno_0, ef_5]
              in erlps__ret_expr__3 [ErlangCons h_14 t_23, arg_29, rbs_6]
            _ -> EXC.badmatch matchExpr_25
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "lc"), _, e_0, qs_1]),
                bs_2, lf_3, ef_4, rbs_5, fuvs_6]
  =
  erlps__eval_lc__7 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5, fuvs_6]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "bc"), _, e_0, qs_1]),
                bs_2, lf_3, ef_4, rbs_5, fuvs_6]
  =
  erlps__eval_bc__7 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5, fuvs_6]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "tuple"), _, es_0]),
                bs0_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  let
    matchExpr_13 =
      erlps__expr_list__5 [es_0, bs0_1, lf_2, ef_3, fuvs_5]
  in
    case matchExpr_13 of
      (ErlangTuple [vs_11, bs_12]) ->
        let arg_14 = BIF.erlang__list_to_tuple__1 [vs_11]
        in erlps__ret_expr__3 [arg_14, bs_12, rbs_4]
      _ -> EXC.badmatch matchExpr_13
erlps__expr__6 [(ErlangTuple [(ErlangAtom "record_field"),
                              anno_0, _, name_1, _]),
                bs_2, _lf_3, ef_4, rbs_5, _fuvs_6]
  =
  let    arg_7 = ErlangTuple [ErlangAtom "undef_record", name_1]
  in let arg_11 = toErl 2
  in let arg_13 = BIF.erlang__self__0 []
  in let
    arg_12 =
      BIF.erlang__process_info__2
        [arg_13, ErlangAtom "current_stacktrace"]
  in let arg_10 = BIF.erlang__element__2 [arg_11, arg_12]
  in
    erlps__apply_error__6 [arg_7, arg_10, anno_0, bs_2, ef_4, rbs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "record_index"),
                              anno_0, name_1, _]),
                bs_2, _lf_3, ef_4, rbs_5, _fuvs_6]
  =
  let    arg_7 = ErlangTuple [ErlangAtom "undef_record", name_1]
  in let arg_11 = toErl 2
  in let arg_13 = BIF.erlang__self__0 []
  in let
    arg_12 =
      BIF.erlang__process_info__2
        [arg_13, ErlangAtom "current_stacktrace"]
  in let arg_10 = BIF.erlang__element__2 [arg_11, arg_12]
  in
    erlps__apply_error__6 [arg_7, arg_10, anno_0, bs_2, ef_4, rbs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "record"), anno_0,
                              name_1, _]),
                bs_2, _lf_3, ef_4, rbs_5, _fuvs_6]
  =
  let    arg_7 = ErlangTuple [ErlangAtom "undef_record", name_1]
  in let arg_11 = toErl 2
  in let arg_13 = BIF.erlang__self__0 []
  in let
    arg_12 =
      BIF.erlang__process_info__2
        [arg_13, ErlangAtom "current_stacktrace"]
  in let arg_10 = BIF.erlang__element__2 [arg_11, arg_12]
  in
    erlps__apply_error__6 [arg_7, arg_10, anno_0, bs_2, ef_4, rbs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "record"), anno_0, _,
                              name_1, _]),
                bs_2, _lf_3, ef_4, rbs_5, _fuvs_6]
  =
  let    arg_7 = ErlangTuple [ErlangAtom "undef_record", name_1]
  in let arg_11 = toErl 2
  in let arg_13 = BIF.erlang__self__0 []
  in let
    arg_12 =
      BIF.erlang__process_info__2
        [arg_13, ErlangAtom "current_stacktrace"]
  in let arg_10 = BIF.erlang__element__2 [arg_11, arg_12]
  in
    erlps__apply_error__6 [arg_7, arg_10, anno_0, bs_2, ef_4, rbs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "map"), anno_0,
                              binding_1, es_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [binding_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), map0_14, bs1_15]) ->
        let
          matchExpr_24 =
            erlps__eval_map_fields__5 [es_2, bs0_3, lf_4, ef_5, fuvs_7]
        in
          case matchExpr_24 of
            (ErlangTuple [vs_22, bs2_23]) ->
              let   
                matchExpr_28 =
                  BIF.maps__put__3 [ErlangAtom "k", ErlangAtom "v", map0_14]
              in let
                arg_29 =
                  ErlangFun 2
                    (let
                       lambda_30 [(ErlangTuple [(ErlangAtom "map_assoc"), k_33,
                                                v_34]),
                                  mi_35]
                         =
                         BIF.maps__put__3 [k_33, v_34, mi_35]
                       lambda_30 [(ErlangTuple [(ErlangAtom "map_exact"), k_39,
                                                v_40]),
                                  mi_41]
                         =
                         BIF.maps__update__3 [k_39, v_40, mi_41]
                       lambda_30 [arg_31, arg_32] = EXC.function_clause unit
                       lambda_30 args =
                         EXC.badarity (ErlangFun 2 lambda_30) args
                     in lambda_30)
              in let
                map1_47 =
                  BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
                    [arg_29, map0_14, vs_22]
              in let
                arg_49 = erlps__merge_bindings__4 [bs2_23, bs1_15, anno_0, ef_5]
              in erlps__ret_expr__3 [map1_47, arg_49, rbs_6]
            _ -> EXC.badmatch matchExpr_24
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "map"), _, es_0]),
                bs0_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  let
    matchExpr_13 =
      erlps__eval_map_fields__5 [es_0, bs0_1, lf_2, ef_3, fuvs_5]
  in
    case matchExpr_13 of
      (ErlangTuple [vs_11, bs_12]) ->
        let   
          arg_15 =
            ErlangFun 2
              (let
                 lambda_16 [(ErlangTuple [(ErlangAtom "map_assoc"), k_19,
                                          v_20]),
                            mi_21]
                   =
                   BIF.maps__put__3 [k_19, v_20, mi_21]
                 lambda_16 [arg_17, arg_18] = EXC.function_clause unit
                 lambda_16 args = EXC.badarity (ErlangFun 2 lambda_16) args
               in lambda_16)
        in let arg_25 = BIF.do_remote_fun_call "Maps" "erlps__new__0" []
        in let
          arg_14 =
            BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
              [arg_15, arg_25, vs_11]
        in erlps__ret_expr__3 [arg_14, bs_12, rbs_4]
      _ -> EXC.badmatch matchExpr_13
erlps__expr__6 [(ErlangTuple [(ErlangAtom "block"), _, es_0]),
                bs_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  erlps__exprs__6 [es_0, bs_1, lf_2, ef_3, rbs_4, fuvs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "if"), anno_0, cs_1]),
                bs_2, lf_3, ef_4, rbs_5, fuvs_6]
  =
  erlps__if_clauses__7
    [cs_1, anno_0, bs_2, lf_3, ef_4, rbs_5, fuvs_6]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "case"), anno_0, e_1,
                              cs_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [e_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), val_14, bs_15]) ->
        erlps__case_clauses__8
          [val_14, cs_2, anno_0, bs_15, lf_4, ef_5, rbs_6, fuvs_7]
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "try"), anno_0, b_1,
                              cases_2, catches_3, ab_4]),
                bs_5, lf_6, ef_7, rbs_8, fuvs_9]
  =
  erlps__try_clauses__10
    [b_1, cases_2, catches_3, ab_4, anno_0, bs_5, lf_6, ef_7, rbs_8,
     fuvs_9]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0]),
                bs_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  erlps__receive_clauses__6 [cs_0, bs_1, lf_2, ef_3, rbs_4, fuvs_5]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0,
                              e_1, tb_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [e_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), t_14, bs_15]) ->
        let arg_19 = ErlangTuple [tb_2, bs_15]
        in
          erlps__receive_clauses__8
            [t_14, cs_0, arg_19, bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "fun"), _anno_0,
                              (ErlangTuple [(ErlangAtom "function"), mod0_1,
                                            name0_2, arity0_3])]),
                bs0_4, lf_5, ef_6, rbs_7, fuvs_8]
  =
  let
    matchExpr_24 =
      erlps__expr_list__5
        [ErlangCons mod0_1
           (ErlangCons name0_2 (ErlangCons arity0_3 ErlangEmptyList)),
         bs0_4, lf_5, ef_6, fuvs_8]
  in
    case matchExpr_24 of
      (ErlangTuple [(ErlangCons mod_20 (ErlangCons name_21 (ErlangCons arity_22 (ErlangEmptyList)))),
                    bs_23]) ->
        let f_28 = BIF.erlang__make_fun__3 [mod_20, name_21, arity_22]
        in erlps__ret_expr__3 [f_28, bs_23, rbs_7]
      _ -> EXC.badmatch matchExpr_24
erlps__expr__6 [(ErlangTuple [(ErlangAtom "fun"), anno_0,
                              (ErlangTuple [(ErlangAtom "function"), name_1,
                                            arity_2])]),
                bs0_3, _lf_4, ef_5, rbs_6, _fuvs_7]
  =
  let   
    head_10 = ErlangTuple [ErlangAtom "erl_eval", name_1, arity_2]
  in let arg_15 = toErl 2
  in let arg_17 = BIF.erlang__self__0 []
  in let
    arg_16 =
      BIF.erlang__process_info__2
        [arg_17, ErlangAtom "current_stacktrace"]
  in let tail_14 = BIF.erlang__element__2 [arg_15, arg_16]
  in
    erlps__apply_error__6
      [ErlangAtom "undef", ErlangCons head_10 tail_14, anno_0, bs0_3,
       ef_5, rbs_6]
erlps__expr__6 [ex_2@(ErlangTuple [(ErlangAtom "fun"), anno_0,
                                   (ErlangTuple [(ErlangAtom "clauses"),
                                                 cs_1])]),
                bs_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_14 =
      erlps__fun_used_bindings__4 [ex_2, cs_1, bs_3, fuvs_7]
  in
    case matchExpr_14 of
      (ErlangTuple [en_12, newfuvs_13]) ->
        let   
          info_21 =
            ErlangTuple [anno_0, en_12, lf_4, ef_5, newfuvs_13, cs_1]
        in let arg_24 = toErl 3
        in let arg_25 = BIF.erlang__hd__1 [cs_1]
        in let arg_23 = BIF.erlang__element__2 [arg_24, arg_25]
        in let case_22 = BIF.erlang__length__1 [arg_23]
        in let
          f_971 =
            case case_22 of
              (ErlangInt num_27) | (ErlangInt num_27) == (toErl 0) ->
                ErlangFun 0
                  (let
                     lambda_28 [] =
                       erlps__eval_fun__2 [ErlangEmptyList, info_21]
                     lambda_28 [] = EXC.function_clause unit
                     lambda_28 args = EXC.badarity (ErlangFun 0 lambda_28) args
                   in lambda_28)
              (ErlangInt num_31) | (ErlangInt num_31) == (toErl 1) ->
                ErlangFun 1
                  (let
                     lambda_32 [a_34] =
                       erlps__eval_fun__2
                         [ErlangCons a_34 ErlangEmptyList, info_21]
                     lambda_32 [arg_33] = EXC.function_clause unit
                     lambda_32 args = EXC.badarity (ErlangFun 1 lambda_32) args
                   in lambda_32)
              (ErlangInt num_39) | (ErlangInt num_39) == (toErl 2) ->
                ErlangFun 2
                  (let
                     lambda_40 [a_43, b_44] =
                       erlps__eval_fun__2
                         [ErlangCons a_43 (ErlangCons b_44 ErlangEmptyList),
                          info_21]
                     lambda_40 [arg_41, arg_42] = EXC.function_clause unit
                     lambda_40 args = EXC.badarity (ErlangFun 2 lambda_40) args
                   in lambda_40)
              (ErlangInt num_51) | (ErlangInt num_51) == (toErl 3) ->
                ErlangFun 3
                  (let
                     lambda_52 [a_56, b_57, c_58] =
                       erlps__eval_fun__2
                         [ErlangCons a_56
                            (ErlangCons b_57 (ErlangCons c_58 ErlangEmptyList)),
                          info_21]
                     lambda_52 [arg_53, arg_54, arg_55] =
                       EXC.function_clause unit
                     lambda_52 args = EXC.badarity (ErlangFun 3 lambda_52) args
                   in lambda_52)
              (ErlangInt num_67) | (ErlangInt num_67) == (toErl 4) ->
                ErlangFun 4
                  (let
                     lambda_68 [a_73, b_74, c_75, d_76] =
                       erlps__eval_fun__2
                         [ErlangCons a_73
                            (ErlangCons b_74
                               (ErlangCons c_75
                                  (ErlangCons d_76 ErlangEmptyList))),
                          info_21]
                     lambda_68 [arg_69, arg_70, arg_71, arg_72] =
                       EXC.function_clause unit
                     lambda_68 args = EXC.badarity (ErlangFun 4 lambda_68) args
                   in lambda_68)
              (ErlangInt num_87) | (ErlangInt num_87) == (toErl 5) ->
                ErlangFun 5
                  (let
                     lambda_88 [a_94, b_95, c_96, d_97, e_98] =
                       erlps__eval_fun__2
                         [ErlangCons a_94
                            (ErlangCons b_95
                               (ErlangCons c_96
                                  (ErlangCons d_97
                                     (ErlangCons e_98 ErlangEmptyList)))),
                          info_21]
                     lambda_88 [arg_89, arg_90, arg_91, arg_92, arg_93] =
                       EXC.function_clause unit
                     lambda_88 args = EXC.badarity (ErlangFun 5 lambda_88) args
                   in lambda_88)
              (ErlangInt num_111) | (ErlangInt num_111) == (toErl 6) ->
                ErlangFun 6
                  (let
                     lambda_112 [a_119, b_120, c_121, d_122, e_123, f_124] =
                       erlps__eval_fun__2
                         [ErlangCons a_119
                            (ErlangCons b_120
                               (ErlangCons c_121
                                  (ErlangCons d_122
                                     (ErlangCons e_123
                                        (ErlangCons f_124 ErlangEmptyList))))),
                          info_21]
                     lambda_112 [arg_113, arg_114, arg_115, arg_116, arg_117,
                                 arg_118]
                       =
                       EXC.function_clause unit
                     lambda_112 args =
                       EXC.badarity (ErlangFun 6 lambda_112) args
                   in lambda_112)
              (ErlangInt num_139) | (ErlangInt num_139) == (toErl 7) ->
                ErlangFun 7
                  (let
                     lambda_140 [a_148, b_149, c_150, d_151, e_152, f_153,
                                 g_154]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_148
                            (ErlangCons b_149
                               (ErlangCons c_150
                                  (ErlangCons d_151
                                     (ErlangCons e_152
                                        (ErlangCons f_153
                                           (ErlangCons g_154
                                              ErlangEmptyList)))))),
                          info_21]
                     lambda_140 [arg_141, arg_142, arg_143, arg_144, arg_145,
                                 arg_146, arg_147]
                       =
                       EXC.function_clause unit
                     lambda_140 args =
                       EXC.badarity (ErlangFun 7 lambda_140) args
                   in lambda_140)
              (ErlangInt num_171) | (ErlangInt num_171) == (toErl 8) ->
                ErlangFun 8
                  (let
                     lambda_172 [a_181, b_182, c_183, d_184, e_185, f_186,
                                 g_187, h_188]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_181
                            (ErlangCons b_182
                               (ErlangCons c_183
                                  (ErlangCons d_184
                                     (ErlangCons e_185
                                        (ErlangCons f_186
                                           (ErlangCons g_187
                                              (ErlangCons h_188
                                                 ErlangEmptyList))))))),
                          info_21]
                     lambda_172 [arg_173, arg_174, arg_175, arg_176, arg_177,
                                 arg_178, arg_179, arg_180]
                       =
                       EXC.function_clause unit
                     lambda_172 args =
                       EXC.badarity (ErlangFun 8 lambda_172) args
                   in lambda_172)
              (ErlangInt num_207) | (ErlangInt num_207) == (toErl 9) ->
                ErlangFun 9
                  (let
                     lambda_208 [a_218, b_219, c_220, d_221, e_222, f_223,
                                 g_224, h_225, i_226]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_218
                            (ErlangCons b_219
                               (ErlangCons c_220
                                  (ErlangCons d_221
                                     (ErlangCons e_222
                                        (ErlangCons f_223
                                           (ErlangCons g_224
                                              (ErlangCons h_225
                                                 (ErlangCons i_226
                                                    ErlangEmptyList)))))))),
                          info_21]
                     lambda_208 [arg_209, arg_210, arg_211, arg_212, arg_213,
                                 arg_214, arg_215, arg_216, arg_217]
                       =
                       EXC.function_clause unit
                     lambda_208 args =
                       EXC.badarity (ErlangFun 9 lambda_208) args
                   in lambda_208)
              (ErlangInt num_247) | (ErlangInt num_247) == (toErl 10) ->
                ErlangFun 10
                  (let
                     lambda_248 [a_259, b_260, c_261, d_262, e_263, f_264,
                                 g_265, h_266, i_267, j_268]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_259
                            (ErlangCons b_260
                               (ErlangCons c_261
                                  (ErlangCons d_262
                                     (ErlangCons e_263
                                        (ErlangCons f_264
                                           (ErlangCons g_265
                                              (ErlangCons h_266
                                                 (ErlangCons i_267
                                                    (ErlangCons j_268
                                                       ErlangEmptyList))))))))),
                          info_21]
                     lambda_248 [arg_249, arg_250, arg_251, arg_252, arg_253,
                                 arg_254, arg_255, arg_256, arg_257, arg_258]
                       =
                       EXC.function_clause unit
                     lambda_248 args =
                       EXC.badarity (ErlangFun 10 lambda_248) args
                   in lambda_248)
              (ErlangInt num_291) | (ErlangInt num_291) == (toErl 11) ->
                ErlangFun 11
                  (let
                     lambda_292 [a_304, b_305, c_306, d_307, e_308, f_309,
                                 g_310, h_311, i_312, j_313, k_314]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_304
                            (ErlangCons b_305
                               (ErlangCons c_306
                                  (ErlangCons d_307
                                     (ErlangCons e_308
                                        (ErlangCons f_309
                                           (ErlangCons g_310
                                              (ErlangCons h_311
                                                 (ErlangCons i_312
                                                    (ErlangCons j_313
                                                       (ErlangCons k_314
                                                          ErlangEmptyList)))))))))),
                          info_21]
                     lambda_292 [arg_293, arg_294, arg_295, arg_296, arg_297,
                                 arg_298, arg_299, arg_300, arg_301, arg_302,
                                 arg_303]
                       =
                       EXC.function_clause unit
                     lambda_292 args =
                       EXC.badarity (ErlangFun 11 lambda_292) args
                   in lambda_292)
              (ErlangInt num_339) | (ErlangInt num_339) == (toErl 12) ->
                ErlangFun 12
                  (let
                     lambda_340 [a_353, b_354, c_355, d_356, e_357, f_358,
                                 g_359, h_360, i_361, j_362, k_363, l_364]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_353
                            (ErlangCons b_354
                               (ErlangCons c_355
                                  (ErlangCons d_356
                                     (ErlangCons e_357
                                        (ErlangCons f_358
                                           (ErlangCons g_359
                                              (ErlangCons h_360
                                                 (ErlangCons i_361
                                                    (ErlangCons j_362
                                                       (ErlangCons k_363
                                                          (ErlangCons l_364
                                                             ErlangEmptyList))))))))))),
                          info_21]
                     lambda_340 [arg_341, arg_342, arg_343, arg_344, arg_345,
                                 arg_346, arg_347, arg_348, arg_349, arg_350,
                                 arg_351, arg_352]
                       =
                       EXC.function_clause unit
                     lambda_340 args =
                       EXC.badarity (ErlangFun 12 lambda_340) args
                   in lambda_340)
              (ErlangInt num_391) | (ErlangInt num_391) == (toErl 13) ->
                ErlangFun 13
                  (let
                     lambda_392 [a_406, b_407, c_408, d_409, e_410, f_411,
                                 g_412, h_413, i_414, j_415, k_416, l_417,
                                 m_418]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_406
                            (ErlangCons b_407
                               (ErlangCons c_408
                                  (ErlangCons d_409
                                     (ErlangCons e_410
                                        (ErlangCons f_411
                                           (ErlangCons g_412
                                              (ErlangCons h_413
                                                 (ErlangCons i_414
                                                    (ErlangCons j_415
                                                       (ErlangCons k_416
                                                          (ErlangCons l_417
                                                             (ErlangCons m_418
                                                                ErlangEmptyList)))))))))))),
                          info_21]
                     lambda_392 [arg_393, arg_394, arg_395, arg_396, arg_397,
                                 arg_398, arg_399, arg_400, arg_401, arg_402,
                                 arg_403, arg_404, arg_405]
                       =
                       EXC.function_clause unit
                     lambda_392 args =
                       EXC.badarity (ErlangFun 13 lambda_392) args
                   in lambda_392)
              (ErlangInt num_447) | (ErlangInt num_447) == (toErl 14) ->
                ErlangFun 14
                  (let
                     lambda_448 [a_463, b_464, c_465, d_466, e_467, f_468,
                                 g_469, h_470, i_471, j_472, k_473, l_474,
                                 m_475, n_476]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_463
                            (ErlangCons b_464
                               (ErlangCons c_465
                                  (ErlangCons d_466
                                     (ErlangCons e_467
                                        (ErlangCons f_468
                                           (ErlangCons g_469
                                              (ErlangCons h_470
                                                 (ErlangCons i_471
                                                    (ErlangCons j_472
                                                       (ErlangCons k_473
                                                          (ErlangCons l_474
                                                             (ErlangCons m_475
                                                                (ErlangCons
                                                                   n_476
                                                                   ErlangEmptyList))))))))))))),
                          info_21]
                     lambda_448 [arg_449, arg_450, arg_451, arg_452, arg_453,
                                 arg_454, arg_455, arg_456, arg_457, arg_458,
                                 arg_459, arg_460, arg_461, arg_462]
                       =
                       EXC.function_clause unit
                     lambda_448 args =
                       EXC.badarity (ErlangFun 14 lambda_448) args
                   in lambda_448)
              (ErlangInt num_507) | (ErlangInt num_507) == (toErl 15) ->
                ErlangFun 15
                  (let
                     lambda_508 [a_524, b_525, c_526, d_527, e_528, f_529,
                                 g_530, h_531, i_532, j_533, k_534, l_535,
                                 m_536, n_537, o_538]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_524
                            (ErlangCons b_525
                               (ErlangCons c_526
                                  (ErlangCons d_527
                                     (ErlangCons e_528
                                        (ErlangCons f_529
                                           (ErlangCons g_530
                                              (ErlangCons h_531
                                                 (ErlangCons i_532
                                                    (ErlangCons j_533
                                                       (ErlangCons k_534
                                                          (ErlangCons l_535
                                                             (ErlangCons m_536
                                                                (ErlangCons
                                                                   n_537
                                                                   (ErlangCons
                                                                      o_538
                                                                      ErlangEmptyList)))))))))))))),
                          info_21]
                     lambda_508 [arg_509, arg_510, arg_511, arg_512, arg_513,
                                 arg_514, arg_515, arg_516, arg_517, arg_518,
                                 arg_519, arg_520, arg_521, arg_522, arg_523]
                       =
                       EXC.function_clause unit
                     lambda_508 args =
                       EXC.badarity (ErlangFun 15 lambda_508) args
                   in lambda_508)
              (ErlangInt num_571) | (ErlangInt num_571) == (toErl 16) ->
                ErlangFun 16
                  (let
                     lambda_572 [a_589, b_590, c_591, d_592, e_593, f_594,
                                 g_595, h_596, i_597, j_598, k_599, l_600,
                                 m_601, n_602, o_603, p_604]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_589
                            (ErlangCons b_590
                               (ErlangCons c_591
                                  (ErlangCons d_592
                                     (ErlangCons e_593
                                        (ErlangCons f_594
                                           (ErlangCons g_595
                                              (ErlangCons h_596
                                                 (ErlangCons i_597
                                                    (ErlangCons j_598
                                                       (ErlangCons k_599
                                                          (ErlangCons l_600
                                                             (ErlangCons m_601
                                                                (ErlangCons
                                                                   n_602
                                                                   (ErlangCons
                                                                      o_603
                                                                      (ErlangCons
                                                                         p_604
                                                                         ErlangEmptyList))))))))))))))),
                          info_21]
                     lambda_572 [arg_573, arg_574, arg_575, arg_576, arg_577,
                                 arg_578, arg_579, arg_580, arg_581, arg_582,
                                 arg_583, arg_584, arg_585, arg_586, arg_587,
                                 arg_588]
                       =
                       EXC.function_clause unit
                     lambda_572 args =
                       EXC.badarity (ErlangFun 16 lambda_572) args
                   in lambda_572)
              (ErlangInt num_639) | (ErlangInt num_639) == (toErl 17) ->
                ErlangFun 17
                  (let
                     lambda_640 [a_658, b_659, c_660, d_661, e_662, f_663,
                                 g_664, h_665, i_666, j_667, k_668, l_669,
                                 m_670, n_671, o_672, p_673, q_674]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_658
                            (ErlangCons b_659
                               (ErlangCons c_660
                                  (ErlangCons d_661
                                     (ErlangCons e_662
                                        (ErlangCons f_663
                                           (ErlangCons g_664
                                              (ErlangCons h_665
                                                 (ErlangCons i_666
                                                    (ErlangCons j_667
                                                       (ErlangCons k_668
                                                          (ErlangCons l_669
                                                             (ErlangCons m_670
                                                                (ErlangCons
                                                                   n_671
                                                                   (ErlangCons
                                                                      o_672
                                                                      (ErlangCons
                                                                         p_673
                                                                         (ErlangCons
                                                                            q_674
                                                                            ErlangEmptyList)))))))))))))))),
                          info_21]
                     lambda_640 [arg_641, arg_642, arg_643, arg_644, arg_645,
                                 arg_646, arg_647, arg_648, arg_649, arg_650,
                                 arg_651, arg_652, arg_653, arg_654, arg_655,
                                 arg_656, arg_657]
                       =
                       EXC.function_clause unit
                     lambda_640 args =
                       EXC.badarity (ErlangFun 17 lambda_640) args
                   in lambda_640)
              (ErlangInt num_711) | (ErlangInt num_711) == (toErl 18) ->
                ErlangFun 18
                  (let
                     lambda_712 [a_731, b_732, c_733, d_734, e_735, f_736,
                                 g_737, h_738, i_739, j_740, k_741, l_742,
                                 m_743, n_744, o_745, p_746, q_747, r_748]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_731
                            (ErlangCons b_732
                               (ErlangCons c_733
                                  (ErlangCons d_734
                                     (ErlangCons e_735
                                        (ErlangCons f_736
                                           (ErlangCons g_737
                                              (ErlangCons h_738
                                                 (ErlangCons i_739
                                                    (ErlangCons j_740
                                                       (ErlangCons k_741
                                                          (ErlangCons l_742
                                                             (ErlangCons m_743
                                                                (ErlangCons
                                                                   n_744
                                                                   (ErlangCons
                                                                      o_745
                                                                      (ErlangCons
                                                                         p_746
                                                                         (ErlangCons
                                                                            q_747
                                                                            (ErlangCons
                                                                               r_748
                                                                               ErlangEmptyList))))))))))))))))),
                          info_21]
                     lambda_712 [arg_713, arg_714, arg_715, arg_716, arg_717,
                                 arg_718, arg_719, arg_720, arg_721, arg_722,
                                 arg_723, arg_724, arg_725, arg_726, arg_727,
                                 arg_728, arg_729, arg_730]
                       =
                       EXC.function_clause unit
                     lambda_712 args =
                       EXC.badarity (ErlangFun 18 lambda_712) args
                   in lambda_712)
              (ErlangInt num_787) | (ErlangInt num_787) == (toErl 19) ->
                ErlangFun 19
                  (let
                     lambda_788 [a_808, b_809, c_810, d_811, e_812, f_813,
                                 g_814, h_815, i_816, j_817, k_818, l_819,
                                 m_820, n_821, o_822, p_823, q_824, r_825,
                                 s_826]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_808
                            (ErlangCons b_809
                               (ErlangCons c_810
                                  (ErlangCons d_811
                                     (ErlangCons e_812
                                        (ErlangCons f_813
                                           (ErlangCons g_814
                                              (ErlangCons h_815
                                                 (ErlangCons i_816
                                                    (ErlangCons j_817
                                                       (ErlangCons k_818
                                                          (ErlangCons l_819
                                                             (ErlangCons m_820
                                                                (ErlangCons
                                                                   n_821
                                                                   (ErlangCons
                                                                      o_822
                                                                      (ErlangCons
                                                                         p_823
                                                                         (ErlangCons
                                                                            q_824
                                                                            (ErlangCons
                                                                               r_825
                                                                               (ErlangCons
                                                                                  s_826
                                                                                  ErlangEmptyList)))))))))))))))))),
                          info_21]
                     lambda_788 [arg_789, arg_790, arg_791, arg_792, arg_793,
                                 arg_794, arg_795, arg_796, arg_797, arg_798,
                                 arg_799, arg_800, arg_801, arg_802, arg_803,
                                 arg_804, arg_805, arg_806, arg_807]
                       =
                       EXC.function_clause unit
                     lambda_788 args =
                       EXC.badarity (ErlangFun 19 lambda_788) args
                   in lambda_788)
              (ErlangInt num_867) | (ErlangInt num_867) == (toErl 20) ->
                ErlangFun 20
                  (let
                     lambda_868 [a_889, b_890, c_891, d_892, e_893, f_894,
                                 g_895, h_896, i_897, j_898, k_899, l_900,
                                 m_901, n_902, o_903, p_904, q_905, r_906,
                                 s_907, t_908]
                       =
                       erlps__eval_fun__2
                         [ErlangCons a_889
                            (ErlangCons b_890
                               (ErlangCons c_891
                                  (ErlangCons d_892
                                     (ErlangCons e_893
                                        (ErlangCons f_894
                                           (ErlangCons g_895
                                              (ErlangCons h_896
                                                 (ErlangCons i_897
                                                    (ErlangCons j_898
                                                       (ErlangCons k_899
                                                          (ErlangCons l_900
                                                             (ErlangCons m_901
                                                                (ErlangCons
                                                                   n_902
                                                                   (ErlangCons
                                                                      o_903
                                                                      (ErlangCons
                                                                         p_904
                                                                         (ErlangCons
                                                                            q_905
                                                                            (ErlangCons
                                                                               r_906
                                                                               (ErlangCons
                                                                                  s_907
                                                                                  (ErlangCons
                                                                                     t_908
                                                                                     ErlangEmptyList))))))))))))))))))),
                          info_21]
                     lambda_868 [arg_869, arg_870, arg_871, arg_872, arg_873,
                                 arg_874, arg_875, arg_876, arg_877, arg_878,
                                 arg_879, arg_880, arg_881, arg_882, arg_883,
                                 arg_884, arg_885, arg_886, arg_887, arg_888]
                       =
                       EXC.function_clause unit
                     lambda_868 args =
                       EXC.badarity (ErlangFun 20 lambda_868) args
                   in lambda_868)
              _other_951 ->
                let   
                  l_953 =
                    BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1"
                      [anno_0]
                in let tup_el_958 = erlps__to_terms__1 [cs_1]
                in let
                  tup_el_955 = ErlangTuple [ErlangAtom "fun", l_953, tup_el_958]
                in let
                  reason_960 =
                    ErlangTuple [ErlangAtom "argument_limit", tup_el_955]
                in let arg_963 = toErl 2
                in let arg_965 = BIF.erlang__self__0 []
                in let
                  arg_964 =
                    BIF.erlang__process_info__2
                      [arg_965, ErlangAtom "current_stacktrace"]
                in let arg_962 = BIF.erlang__element__2 [arg_963, arg_964]
                in
                  erlps__apply_error__6
                    [reason_960, arg_962, anno_0, bs_3, ef_5, rbs_6]
        in erlps__ret_expr__3 [f_971, bs_3, rbs_6]
      _ -> EXC.badmatch matchExpr_14
erlps__expr__6 [ex_3@(ErlangTuple [(ErlangAtom "named_fun"),
                                   anno_0, name_1, cs_2]),
                bs_4, lf_5, ef_6, rbs_7, fuvs_8]
  =
  let
    matchExpr_15 =
      erlps__fun_used_bindings__4 [ex_3, cs_2, bs_4, fuvs_8]
  in
    case matchExpr_15 of
      (ErlangTuple [en_13, newfuvs_14]) ->
        let   
          info_23 =
            ErlangTuple [anno_0, en_13, lf_5, ef_6, newfuvs_14, cs_2, name_1]
        in let arg_26 = toErl 3
        in let arg_27 = BIF.erlang__hd__1 [cs_2]
        in let arg_25 = BIF.erlang__element__2 [arg_26, arg_27]
        in let case_24 = BIF.erlang__length__1 [arg_25]
        in let
          f_995 =
            case case_24 of
              (ErlangInt num_29) | (ErlangInt num_29) == (toErl 0) ->
                ErlangFun 0
                  (let
                     rf_30 [] =
                       let arg_32 = ErlangFun 0 rf_30
                       in
                         erlps__eval_named_fun__3
                           [ErlangEmptyList, arg_32, info_23]
                     rf_30 [] = EXC.function_clause unit
                     rf_30 args = EXC.badarity (ErlangFun 0 rf_30) args
                   in rf_30)
              (ErlangInt num_34) | (ErlangInt num_34) == (toErl 1) ->
                ErlangFun 1
                  (let
                     rf_35 [a_37] =
                       let arg_41 = ErlangFun 1 rf_35
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_37 ErlangEmptyList, arg_41, info_23]
                     rf_35 [arg_36] = EXC.function_clause unit
                     rf_35 args = EXC.badarity (ErlangFun 1 rf_35) args
                   in rf_35)
              (ErlangInt num_43) | (ErlangInt num_43) == (toErl 2) ->
                ErlangFun 2
                  (let
                     rf_44 [a_47, b_48] =
                       let arg_54 = ErlangFun 2 rf_44
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_47 (ErlangCons b_48 ErlangEmptyList),
                            arg_54, info_23]
                     rf_44 [arg_45, arg_46] = EXC.function_clause unit
                     rf_44 args = EXC.badarity (ErlangFun 2 rf_44) args
                   in rf_44)
              (ErlangInt num_56) | (ErlangInt num_56) == (toErl 3) ->
                ErlangFun 3
                  (let
                     rf_57 [a_61, b_62, c_63] =
                       let arg_71 = ErlangFun 3 rf_57
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_61
                              (ErlangCons b_62
                                 (ErlangCons c_63 ErlangEmptyList)),
                            arg_71, info_23]
                     rf_57 [arg_58, arg_59, arg_60] = EXC.function_clause unit
                     rf_57 args = EXC.badarity (ErlangFun 3 rf_57) args
                   in rf_57)
              (ErlangInt num_73) | (ErlangInt num_73) == (toErl 4) ->
                ErlangFun 4
                  (let
                     rf_74 [a_79, b_80, c_81, d_82] =
                       let arg_92 = ErlangFun 4 rf_74
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_79
                              (ErlangCons b_80
                                 (ErlangCons c_81
                                    (ErlangCons d_82 ErlangEmptyList))),
                            arg_92, info_23]
                     rf_74 [arg_75, arg_76, arg_77, arg_78] =
                       EXC.function_clause unit
                     rf_74 args = EXC.badarity (ErlangFun 4 rf_74) args
                   in rf_74)
              (ErlangInt num_94) | (ErlangInt num_94) == (toErl 5) ->
                ErlangFun 5
                  (let
                     rf_95 [a_101, b_102, c_103, d_104, e_105] =
                       let arg_117 = ErlangFun 5 rf_95
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_101
                              (ErlangCons b_102
                                 (ErlangCons c_103
                                    (ErlangCons d_104
                                       (ErlangCons e_105 ErlangEmptyList)))),
                            arg_117, info_23]
                     rf_95 [arg_96, arg_97, arg_98, arg_99, arg_100] =
                       EXC.function_clause unit
                     rf_95 args = EXC.badarity (ErlangFun 5 rf_95) args
                   in rf_95)
              (ErlangInt num_119) | (ErlangInt num_119) == (toErl 6) ->
                ErlangFun 6
                  (let
                     rf_120 [a_127, b_128, c_129, d_130, e_131, f_132] =
                       let arg_146 = ErlangFun 6 rf_120
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_127
                              (ErlangCons b_128
                                 (ErlangCons c_129
                                    (ErlangCons d_130
                                       (ErlangCons e_131
                                          (ErlangCons f_132
                                             ErlangEmptyList))))),
                            arg_146, info_23]
                     rf_120 [arg_121, arg_122, arg_123, arg_124, arg_125,
                             arg_126]
                       =
                       EXC.function_clause unit
                     rf_120 args = EXC.badarity (ErlangFun 6 rf_120) args
                   in rf_120)
              (ErlangInt num_148) | (ErlangInt num_148) == (toErl 7) ->
                ErlangFun 7
                  (let
                     rf_149 [a_157, b_158, c_159, d_160, e_161, f_162, g_163] =
                       let arg_179 = ErlangFun 7 rf_149
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_157
                              (ErlangCons b_158
                                 (ErlangCons c_159
                                    (ErlangCons d_160
                                       (ErlangCons e_161
                                          (ErlangCons f_162
                                             (ErlangCons g_163
                                                ErlangEmptyList)))))),
                            arg_179, info_23]
                     rf_149 [arg_150, arg_151, arg_152, arg_153, arg_154,
                             arg_155, arg_156]
                       =
                       EXC.function_clause unit
                     rf_149 args = EXC.badarity (ErlangFun 7 rf_149) args
                   in rf_149)
              (ErlangInt num_181) | (ErlangInt num_181) == (toErl 8) ->
                ErlangFun 8
                  (let
                     rf_182 [a_191, b_192, c_193, d_194, e_195, f_196, g_197,
                             h_198]
                       =
                       let arg_216 = ErlangFun 8 rf_182
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_191
                              (ErlangCons b_192
                                 (ErlangCons c_193
                                    (ErlangCons d_194
                                       (ErlangCons e_195
                                          (ErlangCons f_196
                                             (ErlangCons g_197
                                                (ErlangCons h_198
                                                   ErlangEmptyList))))))),
                            arg_216, info_23]
                     rf_182 [arg_183, arg_184, arg_185, arg_186, arg_187,
                             arg_188, arg_189, arg_190]
                       =
                       EXC.function_clause unit
                     rf_182 args = EXC.badarity (ErlangFun 8 rf_182) args
                   in rf_182)
              (ErlangInt num_218) | (ErlangInt num_218) == (toErl 9) ->
                ErlangFun 9
                  (let
                     rf_219 [a_229, b_230, c_231, d_232, e_233, f_234, g_235,
                             h_236, i_237]
                       =
                       let arg_257 = ErlangFun 9 rf_219
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_229
                              (ErlangCons b_230
                                 (ErlangCons c_231
                                    (ErlangCons d_232
                                       (ErlangCons e_233
                                          (ErlangCons f_234
                                             (ErlangCons g_235
                                                (ErlangCons h_236
                                                   (ErlangCons i_237
                                                      ErlangEmptyList)))))))),
                            arg_257, info_23]
                     rf_219 [arg_220, arg_221, arg_222, arg_223, arg_224,
                             arg_225, arg_226, arg_227, arg_228]
                       =
                       EXC.function_clause unit
                     rf_219 args = EXC.badarity (ErlangFun 9 rf_219) args
                   in rf_219)
              (ErlangInt num_259) | (ErlangInt num_259) == (toErl 10) ->
                ErlangFun 10
                  (let
                     rf_260 [a_271, b_272, c_273, d_274, e_275, f_276, g_277,
                             h_278, i_279, j_280]
                       =
                       let arg_302 = ErlangFun 10 rf_260
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_271
                              (ErlangCons b_272
                                 (ErlangCons c_273
                                    (ErlangCons d_274
                                       (ErlangCons e_275
                                          (ErlangCons f_276
                                             (ErlangCons g_277
                                                (ErlangCons h_278
                                                   (ErlangCons i_279
                                                      (ErlangCons j_280
                                                         ErlangEmptyList))))))))),
                            arg_302, info_23]
                     rf_260 [arg_261, arg_262, arg_263, arg_264, arg_265,
                             arg_266, arg_267, arg_268, arg_269, arg_270]
                       =
                       EXC.function_clause unit
                     rf_260 args = EXC.badarity (ErlangFun 10 rf_260) args
                   in rf_260)
              (ErlangInt num_304) | (ErlangInt num_304) == (toErl 11) ->
                ErlangFun 11
                  (let
                     rf_305 [a_317, b_318, c_319, d_320, e_321, f_322, g_323,
                             h_324, i_325, j_326, k_327]
                       =
                       let arg_351 = ErlangFun 11 rf_305
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_317
                              (ErlangCons b_318
                                 (ErlangCons c_319
                                    (ErlangCons d_320
                                       (ErlangCons e_321
                                          (ErlangCons f_322
                                             (ErlangCons g_323
                                                (ErlangCons h_324
                                                   (ErlangCons i_325
                                                      (ErlangCons j_326
                                                         (ErlangCons k_327
                                                            ErlangEmptyList)))))))))),
                            arg_351, info_23]
                     rf_305 [arg_306, arg_307, arg_308, arg_309, arg_310,
                             arg_311, arg_312, arg_313, arg_314, arg_315,
                             arg_316]
                       =
                       EXC.function_clause unit
                     rf_305 args = EXC.badarity (ErlangFun 11 rf_305) args
                   in rf_305)
              (ErlangInt num_353) | (ErlangInt num_353) == (toErl 12) ->
                ErlangFun 12
                  (let
                     rf_354 [a_367, b_368, c_369, d_370, e_371, f_372, g_373,
                             h_374, i_375, j_376, k_377, l_378]
                       =
                       let arg_404 = ErlangFun 12 rf_354
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_367
                              (ErlangCons b_368
                                 (ErlangCons c_369
                                    (ErlangCons d_370
                                       (ErlangCons e_371
                                          (ErlangCons f_372
                                             (ErlangCons g_373
                                                (ErlangCons h_374
                                                   (ErlangCons i_375
                                                      (ErlangCons j_376
                                                         (ErlangCons k_377
                                                            (ErlangCons l_378
                                                               ErlangEmptyList))))))))))),
                            arg_404, info_23]
                     rf_354 [arg_355, arg_356, arg_357, arg_358, arg_359,
                             arg_360, arg_361, arg_362, arg_363, arg_364,
                             arg_365, arg_366]
                       =
                       EXC.function_clause unit
                     rf_354 args = EXC.badarity (ErlangFun 12 rf_354) args
                   in rf_354)
              (ErlangInt num_406) | (ErlangInt num_406) == (toErl 13) ->
                ErlangFun 13
                  (let
                     rf_407 [a_421, b_422, c_423, d_424, e_425, f_426, g_427,
                             h_428, i_429, j_430, k_431, l_432, m_433]
                       =
                       let arg_461 = ErlangFun 13 rf_407
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_421
                              (ErlangCons b_422
                                 (ErlangCons c_423
                                    (ErlangCons d_424
                                       (ErlangCons e_425
                                          (ErlangCons f_426
                                             (ErlangCons g_427
                                                (ErlangCons h_428
                                                   (ErlangCons i_429
                                                      (ErlangCons j_430
                                                         (ErlangCons k_431
                                                            (ErlangCons l_432
                                                               (ErlangCons m_433
                                                                  ErlangEmptyList)))))))))))),
                            arg_461, info_23]
                     rf_407 [arg_408, arg_409, arg_410, arg_411, arg_412,
                             arg_413, arg_414, arg_415, arg_416, arg_417,
                             arg_418, arg_419, arg_420]
                       =
                       EXC.function_clause unit
                     rf_407 args = EXC.badarity (ErlangFun 13 rf_407) args
                   in rf_407)
              (ErlangInt num_463) | (ErlangInt num_463) == (toErl 14) ->
                ErlangFun 14
                  (let
                     rf_464 [a_479, b_480, c_481, d_482, e_483, f_484, g_485,
                             h_486, i_487, j_488, k_489, l_490, m_491, n_492]
                       =
                       let arg_522 = ErlangFun 14 rf_464
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_479
                              (ErlangCons b_480
                                 (ErlangCons c_481
                                    (ErlangCons d_482
                                       (ErlangCons e_483
                                          (ErlangCons f_484
                                             (ErlangCons g_485
                                                (ErlangCons h_486
                                                   (ErlangCons i_487
                                                      (ErlangCons j_488
                                                         (ErlangCons k_489
                                                            (ErlangCons l_490
                                                               (ErlangCons m_491
                                                                  (ErlangCons
                                                                     n_492
                                                                     ErlangEmptyList))))))))))))),
                            arg_522, info_23]
                     rf_464 [arg_465, arg_466, arg_467, arg_468, arg_469,
                             arg_470, arg_471, arg_472, arg_473, arg_474,
                             arg_475, arg_476, arg_477, arg_478]
                       =
                       EXC.function_clause unit
                     rf_464 args = EXC.badarity (ErlangFun 14 rf_464) args
                   in rf_464)
              (ErlangInt num_524) | (ErlangInt num_524) == (toErl 15) ->
                ErlangFun 15
                  (let
                     rf_525 [a_541, b_542, c_543, d_544, e_545, f_546, g_547,
                             h_548, i_549, j_550, k_551, l_552, m_553, n_554,
                             o_555]
                       =
                       let arg_587 = ErlangFun 15 rf_525
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_541
                              (ErlangCons b_542
                                 (ErlangCons c_543
                                    (ErlangCons d_544
                                       (ErlangCons e_545
                                          (ErlangCons f_546
                                             (ErlangCons g_547
                                                (ErlangCons h_548
                                                   (ErlangCons i_549
                                                      (ErlangCons j_550
                                                         (ErlangCons k_551
                                                            (ErlangCons l_552
                                                               (ErlangCons m_553
                                                                  (ErlangCons
                                                                     n_554
                                                                     (ErlangCons
                                                                        o_555
                                                                        ErlangEmptyList)))))))))))))),
                            arg_587, info_23]
                     rf_525 [arg_526, arg_527, arg_528, arg_529, arg_530,
                             arg_531, arg_532, arg_533, arg_534, arg_535,
                             arg_536, arg_537, arg_538, arg_539, arg_540]
                       =
                       EXC.function_clause unit
                     rf_525 args = EXC.badarity (ErlangFun 15 rf_525) args
                   in rf_525)
              (ErlangInt num_589) | (ErlangInt num_589) == (toErl 16) ->
                ErlangFun 16
                  (let
                     rf_590 [a_607, b_608, c_609, d_610, e_611, f_612, g_613,
                             h_614, i_615, j_616, k_617, l_618, m_619, n_620,
                             o_621, p_622]
                       =
                       let arg_656 = ErlangFun 16 rf_590
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_607
                              (ErlangCons b_608
                                 (ErlangCons c_609
                                    (ErlangCons d_610
                                       (ErlangCons e_611
                                          (ErlangCons f_612
                                             (ErlangCons g_613
                                                (ErlangCons h_614
                                                   (ErlangCons i_615
                                                      (ErlangCons j_616
                                                         (ErlangCons k_617
                                                            (ErlangCons l_618
                                                               (ErlangCons m_619
                                                                  (ErlangCons
                                                                     n_620
                                                                     (ErlangCons
                                                                        o_621
                                                                        (ErlangCons
                                                                           p_622
                                                                           ErlangEmptyList))))))))))))))),
                            arg_656, info_23]
                     rf_590 [arg_591, arg_592, arg_593, arg_594, arg_595,
                             arg_596, arg_597, arg_598, arg_599, arg_600,
                             arg_601, arg_602, arg_603, arg_604, arg_605,
                             arg_606]
                       =
                       EXC.function_clause unit
                     rf_590 args = EXC.badarity (ErlangFun 16 rf_590) args
                   in rf_590)
              (ErlangInt num_658) | (ErlangInt num_658) == (toErl 17) ->
                ErlangFun 17
                  (let
                     rf_659 [a_677, b_678, c_679, d_680, e_681, f_682, g_683,
                             h_684, i_685, j_686, k_687, l_688, m_689, n_690,
                             o_691, p_692, q_693]
                       =
                       let arg_729 = ErlangFun 17 rf_659
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_677
                              (ErlangCons b_678
                                 (ErlangCons c_679
                                    (ErlangCons d_680
                                       (ErlangCons e_681
                                          (ErlangCons f_682
                                             (ErlangCons g_683
                                                (ErlangCons h_684
                                                   (ErlangCons i_685
                                                      (ErlangCons j_686
                                                         (ErlangCons k_687
                                                            (ErlangCons l_688
                                                               (ErlangCons m_689
                                                                  (ErlangCons
                                                                     n_690
                                                                     (ErlangCons
                                                                        o_691
                                                                        (ErlangCons
                                                                           p_692
                                                                           (ErlangCons
                                                                              q_693
                                                                              ErlangEmptyList)))))))))))))))),
                            arg_729, info_23]
                     rf_659 [arg_660, arg_661, arg_662, arg_663, arg_664,
                             arg_665, arg_666, arg_667, arg_668, arg_669,
                             arg_670, arg_671, arg_672, arg_673, arg_674,
                             arg_675, arg_676]
                       =
                       EXC.function_clause unit
                     rf_659 args = EXC.badarity (ErlangFun 17 rf_659) args
                   in rf_659)
              (ErlangInt num_731) | (ErlangInt num_731) == (toErl 18) ->
                ErlangFun 18
                  (let
                     rf_732 [a_751, b_752, c_753, d_754, e_755, f_756, g_757,
                             h_758, i_759, j_760, k_761, l_762, m_763, n_764,
                             o_765, p_766, q_767, r_768]
                       =
                       let arg_806 = ErlangFun 18 rf_732
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_751
                              (ErlangCons b_752
                                 (ErlangCons c_753
                                    (ErlangCons d_754
                                       (ErlangCons e_755
                                          (ErlangCons f_756
                                             (ErlangCons g_757
                                                (ErlangCons h_758
                                                   (ErlangCons i_759
                                                      (ErlangCons j_760
                                                         (ErlangCons k_761
                                                            (ErlangCons l_762
                                                               (ErlangCons m_763
                                                                  (ErlangCons
                                                                     n_764
                                                                     (ErlangCons
                                                                        o_765
                                                                        (ErlangCons
                                                                           p_766
                                                                           (ErlangCons
                                                                              q_767
                                                                              (ErlangCons
                                                                                 r_768
                                                                                 ErlangEmptyList))))))))))))))))),
                            arg_806, info_23]
                     rf_732 [arg_733, arg_734, arg_735, arg_736, arg_737,
                             arg_738, arg_739, arg_740, arg_741, arg_742,
                             arg_743, arg_744, arg_745, arg_746, arg_747,
                             arg_748, arg_749, arg_750]
                       =
                       EXC.function_clause unit
                     rf_732 args = EXC.badarity (ErlangFun 18 rf_732) args
                   in rf_732)
              (ErlangInt num_808) | (ErlangInt num_808) == (toErl 19) ->
                ErlangFun 19
                  (let
                     rf_809 [a_829, b_830, c_831, d_832, e_833, f_834, g_835,
                             h_836, i_837, j_838, k_839, l_840, m_841, n_842,
                             o_843, p_844, q_845, r_846, s_847]
                       =
                       let arg_887 = ErlangFun 19 rf_809
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_829
                              (ErlangCons b_830
                                 (ErlangCons c_831
                                    (ErlangCons d_832
                                       (ErlangCons e_833
                                          (ErlangCons f_834
                                             (ErlangCons g_835
                                                (ErlangCons h_836
                                                   (ErlangCons i_837
                                                      (ErlangCons j_838
                                                         (ErlangCons k_839
                                                            (ErlangCons l_840
                                                               (ErlangCons m_841
                                                                  (ErlangCons
                                                                     n_842
                                                                     (ErlangCons
                                                                        o_843
                                                                        (ErlangCons
                                                                           p_844
                                                                           (ErlangCons
                                                                              q_845
                                                                              (ErlangCons
                                                                                 r_846
                                                                                 (ErlangCons
                                                                                    s_847
                                                                                    ErlangEmptyList)))))))))))))))))),
                            arg_887, info_23]
                     rf_809 [arg_810, arg_811, arg_812, arg_813, arg_814,
                             arg_815, arg_816, arg_817, arg_818, arg_819,
                             arg_820, arg_821, arg_822, arg_823, arg_824,
                             arg_825, arg_826, arg_827, arg_828]
                       =
                       EXC.function_clause unit
                     rf_809 args = EXC.badarity (ErlangFun 19 rf_809) args
                   in rf_809)
              (ErlangInt num_889) | (ErlangInt num_889) == (toErl 20) ->
                ErlangFun 20
                  (let
                     rf_890 [a_911, b_912, c_913, d_914, e_915, f_916, g_917,
                             h_918, i_919, j_920, k_921, l_922, m_923, n_924,
                             o_925, p_926, q_927, r_928, s_929, t_930]
                       =
                       let arg_972 = ErlangFun 20 rf_890
                       in
                         erlps__eval_named_fun__3
                           [ErlangCons a_911
                              (ErlangCons b_912
                                 (ErlangCons c_913
                                    (ErlangCons d_914
                                       (ErlangCons e_915
                                          (ErlangCons f_916
                                             (ErlangCons g_917
                                                (ErlangCons h_918
                                                   (ErlangCons i_919
                                                      (ErlangCons j_920
                                                         (ErlangCons k_921
                                                            (ErlangCons l_922
                                                               (ErlangCons m_923
                                                                  (ErlangCons
                                                                     n_924
                                                                     (ErlangCons
                                                                        o_925
                                                                        (ErlangCons
                                                                           p_926
                                                                           (ErlangCons
                                                                              q_927
                                                                              (ErlangCons
                                                                                 r_928
                                                                                 (ErlangCons
                                                                                    s_929
                                                                                    (ErlangCons
                                                                                       t_930
                                                                                       ErlangEmptyList))))))))))))))))))),
                            arg_972, info_23]
                     rf_890 [arg_891, arg_892, arg_893, arg_894, arg_895,
                             arg_896, arg_897, arg_898, arg_899, arg_900,
                             arg_901, arg_902, arg_903, arg_904, arg_905,
                             arg_906, arg_907, arg_908, arg_909, arg_910]
                       =
                       EXC.function_clause unit
                     rf_890 args = EXC.badarity (ErlangFun 20 rf_890) args
                   in rf_890)
              _other_974 ->
                let   
                  l_976 =
                    BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1"
                      [anno_0]
                in let tup_el_982 = erlps__to_terms__1 [cs_2]
                in let
                  tup_el_978 =
                    ErlangTuple
                      [ErlangAtom "named_fun", l_976, name_1, tup_el_982]
                in let
                  reason_984 =
                    ErlangTuple [ErlangAtom "argument_limit", tup_el_978]
                in let arg_987 = toErl 2
                in let arg_989 = BIF.erlang__self__0 []
                in let
                  arg_988 =
                    BIF.erlang__process_info__2
                      [arg_989, ErlangAtom "current_stacktrace"]
                in let arg_986 = BIF.erlang__element__2 [arg_987, arg_988]
                in
                  erlps__apply_error__6
                    [reason_984, arg_986, anno_0, bs_4, ef_6, rbs_7]
        in erlps__ret_expr__3 [f_995, bs_4, rbs_7]
      _ -> EXC.badmatch matchExpr_15
erlps__expr__6 [(ErlangTuple [(ErlangAtom "call"), _,
                              (ErlangTuple [(ErlangAtom "remote"), _,
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _,
                                                          (ErlangAtom "qlc")]),
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _,
                                                          (ErlangAtom "q")])]),
                              (ErlangCons lc_2@(ErlangTuple [(ErlangAtom "lc"),
                                                             _, _e_0,
                                                             _qs_1]) as0_3)]),
                bs0_4, lf_5, ef_6, rbs_7, fuvs_8]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_42 = BIF.erlang__length__1 [as0_3]
            in let rop_44 = toErl 1
            in BIF.erlang__op_lesserEq [lop_42, rop_44])) =
  let    maxline_10 = erlps__find_maxline__1 [lc_2]
  in let matchExpr_15 = erlps__hide_calls__2 [lc_2, maxline_10]
  in
    case matchExpr_15 of
      (ErlangTuple [lc1_13, d_14]) ->
        let
          case_16 =
            BIF.do_remote_fun_call "Qlc" "erlps__transform_from_evaluator__2"
              [lc1_13, bs0_4]
        in
          case case_16 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangAtom "call"), a_19, remote_20,
                                        (ErlangCons qlc_21 (ErlangEmptyList))])]) ->
              let   
                qlc1_25 = erlps__unhide_calls__3 [qlc_21, maxline_10, d_14]
              in let
                arg_26 =
                  ErlangTuple
                    [ErlangAtom "call", a_19, remote_20,
                     ErlangCons qlc1_25 as0_3]
              in erlps__expr__6 [arg_26, bs0_4, lf_5, ef_6, rbs_7, fuvs_8]
            (ErlangTuple [(ErlangAtom "not_ok"), error_38]) ->
              erlps__ret_expr__3 [error_38, bs0_4, rbs_7]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_15
erlps__expr__6 [(ErlangTuple [(ErlangAtom "call"), a1_0,
                              (ErlangTuple [(ErlangAtom "remote"), a2_1,
                                            (ErlangTuple [(ErlangAtom "record_field"),
                                                          _,
                                                          (ErlangTuple [(ErlangAtom "atom"),
                                                                        _,
                                                                        (ErlangAtom "")]),
                                                          mod_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                              _,
                                                                              (ErlangAtom "qlc")])]),
                                            func_3@(ErlangTuple [(ErlangAtom "atom"),
                                                                 _,
                                                                 (ErlangAtom "q")])]),
                              as_7@(ErlangCons (ErlangTuple [(ErlangAtom "lc"),
                                                             _, _e_4,
                                                             _qs_5]) as0_6)]),
                bs_8, lf_9, ef_10, rbs_11, fuvs_12]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_27 = BIF.erlang__length__1 [as0_6]
            in let rop_29 = toErl 1
            in BIF.erlang__op_lesserEq [lop_27, rop_29])) =
  let   
    tup_el_16 =
      ErlangTuple [ErlangAtom "remote", a2_1, mod_2, func_3]
  in let
    arg_13 = ErlangTuple [ErlangAtom "call", a1_0, tup_el_16, as_7]
  in erlps__expr__6 [arg_13, bs_8, lf_9, ef_10, rbs_11, fuvs_12]
erlps__expr__6 [(ErlangTuple [(ErlangAtom "call"), anno_0,
                              (ErlangTuple [(ErlangAtom "remote"), _, mod_1,
                                            func_2]),
                              as0_3]),
                bs0_4, lf_5, ef_6, rbs_7, fuvs_8]
  =
  let
    matchExpr_17 =
      erlps__expr__6
        [mod_1, bs0_4, lf_5, ef_6, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_17 of
      (ErlangTuple [(ErlangAtom "value"), m_15, bs1_16]) ->
        let
          matchExpr_26 =
            erlps__expr__6
              [func_2, bs0_4, lf_5, ef_6, ErlangAtom "none", fuvs_8]
        in
          case matchExpr_26 of
            (ErlangTuple [(ErlangAtom "value"), f_24, bs2_25]) ->
              let   
                arg_28 = erlps__merge_bindings__4 [bs1_16, bs2_25, anno_0, ef_6]
              in let
                matchExpr_38 =
                  erlps__expr_list__5 [as0_3, arg_28, lf_5, ef_6, fuvs_8]
              in
                case matchExpr_38 of
                  (ErlangTuple [as_36, bs3_37]) ->
                    let    lop_40 = BIF.erlang__is_atom__1 [m_15]
                    in let
                      case_39 =
                        case lop_40 of
                          (ErlangAtom "false") -> ErlangAtom "false"
                          (ErlangAtom "true") ->
                            let arg_44 = BIF.erlang__length__1 [as_36]
                            in
                              BIF.do_remote_fun_call "Erl.Internal"
                                "erlps__bif__3" [m_15, f_24, arg_44]
                          _ -> EXC.badarg1 lop_40
                    in
                      case case_39 of
                        (ErlangAtom "true") ->
                          erlps__bif__6
                            [f_24, as_36, anno_0, bs3_37, ef_6, rbs_7]
                        (ErlangAtom "false") ->
                          erlps__do_apply__7
                            [m_15, f_24, as_36, anno_0, bs3_37, ef_6, rbs_7]
                        something_else -> EXC.case_clause something_else
                  _ -> EXC.badmatch matchExpr_38
            _ -> EXC.badmatch matchExpr_26
      _ -> EXC.badmatch matchExpr_17
erlps__expr__6 [(ErlangTuple [(ErlangAtom "call"), anno_0,
                              (ErlangTuple [(ErlangAtom "atom"), _, func_1]),
                              as0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let    arg_10 = BIF.erlang__length__1 [as0_2]
  in let
    case_8 =
      BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
        [func_1, arg_10]
  in
    case case_8 of
      (ErlangAtom "true") ->
        let matchExpr_18 = erlps__expr_list__4 [as0_2, bs0_3, lf_4, ef_5]
        in
          case matchExpr_18 of
            (ErlangTuple [as_16, bs_17]) ->
              erlps__bif__6 [func_1, as_16, anno_0, bs_17, ef_5, rbs_6]
            _ -> EXC.badmatch matchExpr_18
      (ErlangAtom "false") ->
        erlps__local_func__8
          [func_1, as0_2, anno_0, bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
      something_else -> EXC.case_clause something_else
erlps__expr__6 [(ErlangTuple [(ErlangAtom "call"), anno_0,
                              func0_1, as0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [func0_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), func_14, bs1_15]) ->
        let
          matchExpr_24 =
            erlps__expr_list__5 [as0_2, bs1_15, lf_4, ef_5, fuvs_7]
        in
          case matchExpr_24 of
            (ErlangTuple [as_22, bs2_23]) ->
              case func_14 of
                (ErlangTuple [m_26, f_27]) | (isEAtom m_26) && (isEAtom f_27) ->
                  let    arg_28 = ErlangTuple [ErlangAtom "badfun", func_14]
                  in let arg_32 = toErl 2
                  in let arg_34 = BIF.erlang__self__0 []
                  in let
                    arg_33 =
                      BIF.erlang__process_info__2
                        [arg_34, ErlangAtom "current_stacktrace"]
                  in let arg_31 = BIF.erlang__element__2 [arg_32, arg_33]
                  in
                    erlps__apply_error__6
                      [arg_28, arg_31, anno_0, bs0_3, ef_5, rbs_6]
                _ ->
                  erlps__do_apply__6
                    [func_14, as_22, anno_0, bs2_23, ef_5, rbs_6]
            _ -> EXC.badmatch matchExpr_24
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "catch"), _, expr_0]),
                bs0_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  EXC.tryOfCatch
    (\ _ ->
       erlps__expr__6
         [expr_0, bs0_1, lf_2, ef_3, ErlangAtom "none", fuvs_5])
    (\ of_12 ->
       case of_12 of
         (ErlangTuple [(ErlangAtom "value"), v_15, bs_16]) ->
           erlps__ret_expr__3 [v_15, bs_16, rbs_4]
         something_else -> EXC.try_clause something_else)
    (\ ex_13 ->
       case ex_13 of
         (ErlangTuple [(ErlangAtom "throw"), term_20, _]) ->
           erlps__ret_expr__3 [term_20, bs0_1, rbs_4]
         (ErlangTuple [(ErlangAtom "exit"), reason_24, _]) ->
           let arg_25 = ErlangTuple [ErlangAtom "EXIT", reason_24]
           in erlps__ret_expr__3 [arg_25, bs0_1, rbs_4]
         (ErlangTuple [(ErlangAtom "error"), reason_30, stacktrace_31]) ->
           let    tup_el_34 = ErlangTuple [reason_30, stacktrace_31]
           in let arg_32 = ErlangTuple [ErlangAtom "EXIT", tup_el_34]
           in erlps__ret_expr__3 [arg_32, bs0_1, rbs_4]
         ex_14 -> EXC.raise ex_14)
erlps__expr__6 [(ErlangTuple [(ErlangAtom "match"), anno_0,
                              lhs_1, rhs0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [rhs0_2, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), rhs_14, bs1_15]) ->
        let
          case_17 =
            erlps__match__6 [lhs_1, rhs_14, anno_0, bs1_15, bs1_15, ef_5]
        in
          case case_17 of
            (ErlangTuple [(ErlangAtom "match"), bs_24]) ->
              erlps__ret_expr__3 [rhs_14, bs_24, rbs_6]
            (ErlangAtom "nomatch") ->
              let    arg_28 = ErlangTuple [ErlangAtom "badmatch", rhs_14]
              in let arg_32 = toErl 2
              in let arg_34 = BIF.erlang__self__0 []
              in let
                arg_33 =
                  BIF.erlang__process_info__2
                    [arg_34, ErlangAtom "current_stacktrace"]
              in let arg_31 = BIF.erlang__element__2 [arg_32, arg_33]
              in
                erlps__apply_error__6
                  [arg_28, arg_31, anno_0, bs0_3, ef_5, rbs_6]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "maybe"), _, es_0]),
                bs_1, lf_2, ef_3, rbs_4, _fuvs_5]
  =
  let
    matchExpr_11 =
      erlps__maybe_match_exprs__4 [es_0, bs_1, lf_2, ef_3]
  in
    case matchExpr_11 of
      (ErlangTuple [_, val_10]) ->
        erlps__ret_expr__3 [val_10, bs_1, rbs_4]
      _ -> EXC.badmatch matchExpr_11
erlps__expr__6 [(ErlangTuple [(ErlangAtom "maybe"), anno_0, es_1,
                              (ErlangTuple [(ErlangAtom "else"), _, cs_2])]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    case_8 = erlps__maybe_match_exprs__4 [es_1, bs0_3, lf_4, ef_5]
  in
    case case_8 of
      (ErlangTuple [(ErlangAtom "success"), val_13]) ->
        erlps__ret_expr__3 [val_13, bs0_3, rbs_6]
      (ErlangTuple [(ErlangAtom "failure"), val_17]) ->
        let
          case_18 =
            erlps__match_clause__5
              [cs_2, ErlangCons val_17 ErlangEmptyList, bs0_3, lf_4, ef_5]
        in
          case case_18 of
            (ErlangTuple [b_26, bs_27]) ->
              erlps__exprs__6 [b_26, bs_27, lf_4, ef_5, rbs_6, fuvs_7]
            (ErlangAtom "nomatch") ->
              let    arg_34 = ErlangTuple [ErlangAtom "else_clause", val_17]
              in let arg_38 = toErl 2
              in let arg_40 = BIF.erlang__self__0 []
              in let
                arg_39 =
                  BIF.erlang__process_info__2
                    [arg_40, ErlangAtom "current_stacktrace"]
              in let arg_37 = BIF.erlang__element__2 [arg_38, arg_39]
              in
                erlps__apply_error__6
                  [arg_34, arg_37, anno_0, bs0_3, ef_5, rbs_6]
            something_else -> EXC.case_clause something_else
      something_else -> EXC.case_clause something_else
erlps__expr__6 [(ErlangTuple [(ErlangAtom "op"), anno_0, op_1,
                              a0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [a0_2, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), a_14, bs_15]) ->
        erlps__eval_op__6 [op_1, a_14, anno_0, bs_15, ef_5, rbs_6]
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "op"), anno_0,
                              (ErlangAtom "andalso"), l0_1, r0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [l0_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), l_14, bs1_15]) ->
        let
          v_38 =
            case l_14 of
              (ErlangAtom "true") ->
                let
                  matchExpr_25 =
                    erlps__expr__6
                      [r0_2, bs1_15, lf_4, ef_5, ErlangAtom "none", fuvs_7]
                in
                  case matchExpr_25 of
                    (ErlangTuple [(ErlangAtom "value"), r_24, _]) -> r_24
                    _ -> EXC.badmatch matchExpr_25
              (ErlangAtom "false") -> ErlangAtom "false"
              _ ->
                let    arg_26 = ErlangTuple [ErlangAtom "badarg", l_14]
                in let arg_30 = toErl 2
                in let arg_32 = BIF.erlang__self__0 []
                in let
                  arg_31 =
                    BIF.erlang__process_info__2
                      [arg_32, ErlangAtom "current_stacktrace"]
                in let arg_29 = BIF.erlang__element__2 [arg_30, arg_31]
                in
                  erlps__apply_error__6
                    [arg_26, arg_29, anno_0, bs0_3, ef_5, rbs_6]
        in erlps__ret_expr__3 [v_38, bs1_15, rbs_6]
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "op"), anno_0,
                              (ErlangAtom "orelse"), l0_1, r0_2]),
                bs0_3, lf_4, ef_5, rbs_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [l0_1, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), l_14, bs1_15]) ->
        let
          v_38 =
            case l_14 of
              (ErlangAtom "true") -> ErlangAtom "true"
              (ErlangAtom "false") ->
                let
                  matchExpr_25 =
                    erlps__expr__6
                      [r0_2, bs1_15, lf_4, ef_5, ErlangAtom "none", fuvs_7]
                in
                  case matchExpr_25 of
                    (ErlangTuple [(ErlangAtom "value"), r_24, _]) -> r_24
                    _ -> EXC.badmatch matchExpr_25
              _ ->
                let    arg_26 = ErlangTuple [ErlangAtom "badarg", l_14]
                in let arg_30 = toErl 2
                in let arg_32 = BIF.erlang__self__0 []
                in let
                  arg_31 =
                    BIF.erlang__process_info__2
                      [arg_32, ErlangAtom "current_stacktrace"]
                in let arg_29 = BIF.erlang__element__2 [arg_30, arg_31]
                in
                  erlps__apply_error__6
                    [arg_26, arg_29, anno_0, bs0_3, ef_5, rbs_6]
        in erlps__ret_expr__3 [v_38, bs1_15, rbs_6]
      _ -> EXC.badmatch matchExpr_16
erlps__expr__6 [(ErlangTuple [(ErlangAtom "op"), anno_0, op_1,
                              l0_2, r0_3]),
                bs0_4, lf_5, ef_6, rbs_7, fuvs_8]
  =
  let
    matchExpr_17 =
      erlps__expr__6
        [l0_2, bs0_4, lf_5, ef_6, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_17 of
      (ErlangTuple [(ErlangAtom "value"), l_15, bs1_16]) ->
        let
          matchExpr_26 =
            erlps__expr__6
              [r0_3, bs0_4, lf_5, ef_6, ErlangAtom "none", fuvs_8]
        in
          case matchExpr_26 of
            (ErlangTuple [(ErlangAtom "value"), r_24, bs2_25]) ->
              let
                arg_31 = erlps__merge_bindings__4 [bs1_16, bs2_25, anno_0, ef_6]
              in
                erlps__eval_op__7
                  [op_1, l_15, r_24, anno_0, arg_31, ef_6, rbs_7]
            _ -> EXC.badmatch matchExpr_26
      _ -> EXC.badmatch matchExpr_17
erlps__expr__6 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                bs0_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  let   
    evalfun_17 =
      ErlangFun 2
        (let
           lambda_6 [e_9, b_10] =
             erlps__expr__6 [e_9, b_10, lf_2, ef_3, ErlangAtom "none", fuvs_5]
           lambda_6 [arg_7, arg_8] = EXC.function_clause unit
           lambda_6 args = EXC.badarity (ErlangFun 2 lambda_6) args
         in lambda_6)
  in let
    errorfun_31 =
      ErlangFun 3
        (let
           lambda_18 [a_22, r_23, s_24] =
             erlps__apply_error__6 [r_23, s_24, a_22, bs0_1, ef_3, rbs_4]
           lambda_18 [arg_19, arg_20, arg_21] = EXC.function_clause unit
           lambda_18 args = EXC.badarity (ErlangFun 3 lambda_18) args
         in lambda_18)
  in let
    matchExpr_38 =
      BIF.do_remote_fun_call "Eval.Bits" "erlps__expr_grp__4"
        [fs_0, bs0_1, evalfun_17, errorfun_31]
  in
    case matchExpr_38 of
      (ErlangTuple [(ErlangAtom "value"), v_36, bs_37]) ->
        erlps__ret_expr__3 [v_36, bs_37, rbs_4]
      _ -> EXC.badmatch matchExpr_38
erlps__expr__6 [(ErlangTuple [(ErlangAtom "remote"), anno_0, _,
                              _]),
                bs0_1, _lf_2, ef_3, rbs_4, _fuvs_5]
  =
  let    arg_6 = ErlangTuple [ErlangAtom "badexpr", ErlangAtom ":"]
  in let arg_10 = toErl 2
  in let arg_12 = BIF.erlang__self__0 []
  in let
    arg_11 =
      BIF.erlang__process_info__2
        [arg_12, ErlangAtom "current_stacktrace"]
  in let arg_9 = BIF.erlang__element__2 [arg_10, arg_11]
  in
    erlps__apply_error__6 [arg_6, arg_9, anno_0, bs0_1, ef_3, rbs_4]
erlps__expr__6 [arg_18, arg_19, arg_20, arg_21, arg_22, arg_23] =
  EXC.function_clause unit
erlps__expr__6 args =
  EXC.badarity (ErlangFun 6 erlps__expr__6) args

erlps__apply_error__6 :: ErlangFun
erlps__apply_error__6 [reason_0, stack_1, anno_2, bs0_3, ef_4,
                       rbs_5]
  =
  erlps__do_apply__7
    [ErlangAtom "erlang", ErlangAtom "raise",
     ErlangCons (ErlangAtom "error")
       (ErlangCons reason_0 (ErlangCons stack_1 ErlangEmptyList)),
     anno_2, bs0_3, ef_4, rbs_5]
erlps__apply_error__6 [arg_19, arg_20, arg_21, arg_22, arg_23,
                       arg_24]
  =
  EXC.function_clause unit
erlps__apply_error__6 args =
  EXC.badarity (ErlangFun 6 erlps__apply_error__6) args

erlps__find_maxline__1 :: ErlangFun
erlps__find_maxline__1 [lc_0] =
  let    arg_2 = toErl 0
  in let
    _ = BIF.erlang__put__2 [ErlangAtom "$erl_eval_max_line", arg_2]
  in let
    f_19 =
      ErlangFun 1
        (let
           lambda_3 [a_5] =
             let
               case_6 =
                 BIF.do_remote_fun_call "Erl.Anno" "erlps__is_anno__1" [a_5]
             in
               case case_6 of
                 (ErlangAtom "true") ->
                   let   
                     l_9 =
                       BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [a_5]
                   in let lop_11 = BIF.erlang__is_integer__1 [l_9]
                   in let
                     rop_15 =
                       BIF.erlang__get__1 [ErlangAtom "$erl_eval_max_line"]
                   in let rop_13 = BIF.erlang__op_greater [l_9, rop_15]
                   in let case_10 = BIF.erlang__op_and [lop_11, rop_13]
                   in
                     case case_10 of
                       (ErlangAtom "true") ->
                         BIF.erlang__put__2
                           [ErlangAtom "$erl_eval_max_line", l_9]
                       (ErlangAtom "false") -> ErlangAtom "ok"
                       something_else -> EXC.case_clause something_else
                 (ErlangAtom "false") -> ErlangAtom "ok"
                 something_else -> EXC.case_clause something_else
           lambda_3 [arg_4] = EXC.function_clause unit
           lambda_3 args = EXC.badarity (ErlangFun 1 lambda_3) args
         in lambda_3)
  in let
    matchExpr_22 =
      BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
        [f_19, lc_0]
  in BIF.erlang__erase__1 [ErlangAtom "$erl_eval_max_line"]
erlps__find_maxline__1 [arg_24] = EXC.function_clause unit
erlps__find_maxline__1 args =
  EXC.badarity (ErlangFun 1 erlps__find_maxline__1) args

erlps__fun_used_bindings__4 :: ErlangFun
erlps__fun_used_bindings__4 [fun_0, cs_1, bs_2, fuvs_3] =
  let
    matchExpr_19 =
      case fuvs_3 of
        (ErlangMap map_5) | (DM.Just usedandfuvs_6) <-
                              (Map.lookup cs_1 map_5) ->
          usedandfuvs_6
        (ErlangMap map_7) ->
          let    arg_11 = erlps__bindings__1 [bs_2]
          in let
            allusedvars_13 =
              BIF.do_remote_fun_call "Erl.Lint" "erlps__used_vars__2"
                [ErlangCons fun_0 ErlangEmptyList, arg_11]
          in let matchExpr_16 = BIF.maps__to_list__1 [allusedvars_13]
          in
            case matchExpr_16 of
              (ErlangCons (ErlangTuple [_,
                                        usedandfuvs_15]) (ErlangEmptyList)) ->
                usedandfuvs_15
              _ -> EXC.badmatch matchExpr_16
        something_else -> EXC.case_clause something_else
  in
    case matchExpr_19 of
      (ErlangTuple [used_17, innerfuvs_18]) ->
        let   
          arg_21 =
            ErlangFun 2
              (let
                 lambda_22 [k_25, _v_26] = BIF.lists__member__2 [k_25, used_17]
                 lambda_22 [arg_23, arg_24] = EXC.function_clause unit
                 lambda_22 args = EXC.badarity (ErlangFun 2 lambda_22) args
               in lambda_22)
        in let tup_el_20 = erlps__filter_bindings__2 [arg_21, bs_2]
        in ErlangTuple [tup_el_20, innerfuvs_18]
      _ -> EXC.badmatch matchExpr_19
erlps__fun_used_bindings__4 [arg_31, arg_32, arg_33, arg_34] =
  EXC.function_clause unit
erlps__fun_used_bindings__4 args =
  EXC.badarity (ErlangFun 4 erlps__fun_used_bindings__4) args

erlps__hide_calls__2 :: ErlangFun
erlps__hide_calls__2 [lc_0, maxline_1] =
  let    rop_3 = toErl 1
  in let lineid0_4 = BIF.erlang__op_plus [maxline_1, rop_3]
  in let arg_7 = BIF.do_remote_fun_call "Maps" "erlps__new__0" []
  in let matchExpr_10 = erlps__hide__3 [lc_0, lineid0_4, arg_7]
  in
    case matchExpr_10 of
      (ErlangTuple [nlc_8, _, d_9]) -> ErlangTuple [nlc_8, d_9]
      _ -> EXC.badmatch matchExpr_10
erlps__hide_calls__2 [arg_13, arg_14] = EXC.function_clause unit
erlps__hide_calls__2 args =
  EXC.badarity (ErlangFun 2 erlps__hide_calls__2) args

erlps__hide__3 :: ErlangFun
erlps__hide__3 [(ErlangTuple [(ErlangAtom "call"), a_0,
                              atom_2@(ErlangTuple [(ErlangAtom "atom"), _,
                                                   n_1]),
                              args_3]),
                id0_4, d0_5]
  =
  let matchExpr_12 = erlps__hide__3 [args_3, id0_4, d0_5]
  in
    case matchExpr_12 of
      (ErlangTuple [nargs_9, id_10, d_11]) ->
        let    arg_15 = BIF.erlang__length__1 [args_3]
        in let
          case_13 =
            BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
              [n_1, arg_15]
        in let
          c_37 =
            case case_13 of
              (ErlangAtom "true") ->
                ErlangTuple [ErlangAtom "call", a_0, atom_2, nargs_9]
              (ErlangAtom "false") ->
                let   
                  anno_22 =
                    BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [id_10]
                in let
                  tup_el_28 =
                    ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "m"]
                in let
                  tup_el_32 =
                    ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "f"]
                in let
                  tup_el_25 =
                    ErlangTuple [ErlangAtom "remote", a_0, tup_el_28, tup_el_32]
                in ErlangTuple [ErlangAtom "call", anno_22, tup_el_25, nargs_9]
              something_else -> EXC.case_clause something_else
        in let rop_41 = toErl 1
        in let tup_el_39 = BIF.erlang__op_plus [id_10, rop_41]
        in let arg_44 = ErlangTuple [ErlangAtom "call", atom_2]
        in let tup_el_42 = BIF.maps__put__3 [id_10, arg_44, d_11]
        in ErlangTuple [c_37, tup_el_39, tup_el_42]
      _ -> EXC.badmatch matchExpr_12
erlps__hide__3 [t0_0, id0_1, d0_2] | isETuple t0_0 =
  let    arg_3 = BIF.erlang__tuple_to_list__1 [t0_0]
  in let matchExpr_10 = erlps__hide__3 [arg_3, id0_1, d0_2]
  in
    case matchExpr_10 of
      (ErlangTuple [l_7, id_8, d_9]) ->
        let tup_el_11 = BIF.erlang__list_to_tuple__1 [l_7]
        in ErlangTuple [tup_el_11, id_8, d_9]
      _ -> EXC.badmatch matchExpr_10
erlps__hide__3 [(ErlangCons e0_0 es0_1), id0_2, d0_3] =
  let matchExpr_10 = erlps__hide__3 [e0_0, id0_2, d0_3]
  in
    case matchExpr_10 of
      (ErlangTuple [e_7, id1_8, d1_9]) ->
        let matchExpr_17 = erlps__hide__3 [es0_1, id1_8, d1_9]
        in
          case matchExpr_17 of
            (ErlangTuple [es_14, id_15, d_16]) ->
              ErlangTuple [ErlangCons e_7 es_14, id_15, d_16]
            _ -> EXC.badmatch matchExpr_17
      _ -> EXC.badmatch matchExpr_10
erlps__hide__3 [e_0, id_1, d_2] = ErlangTuple [e_0, id_1, d_2]
erlps__hide__3 [arg_6, arg_7, arg_8] = EXC.function_clause unit
erlps__hide__3 args =
  EXC.badarity (ErlangFun 3 erlps__hide__3) args

erlps__unhide_calls__3 :: ErlangFun
erlps__unhide_calls__3 [(ErlangTuple [(ErlangAtom "call"),
                                      anno_0,
                                      f_4@(ErlangTuple [(ErlangAtom "remote"),
                                                        a_1,
                                                        (ErlangTuple [(ErlangAtom "atom"),
                                                                      a_2,
                                                                      (ErlangAtom "m")]),
                                                        (ErlangTuple [(ErlangAtom "atom"),
                                                                      a_3,
                                                                      (ErlangAtom "f")])]),
                                      args_5]),
                        maxline_6, d_7]
  | a_2 == a_1
  , a_3 == a_1 =
  let
    line_9 =
      BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [anno_0]
  in
    case ErlangAtom "true" of
      _ | weakGt line_9 maxline_6 ->
        let matchExpr_13 = BIF.erlang__map_get__2 [line_9, d_7]
        in
          case matchExpr_13 of
            (ErlangTuple [(ErlangAtom "call"), atom_12]) ->
              let tup_el_17 = erlps__unhide_calls__3 [args_5, maxline_6, d_7]
              in ErlangTuple [ErlangAtom "call", a_1, atom_12, tup_el_17]
            _ -> EXC.badmatch matchExpr_13
      _ ->
        let tup_el_24 = erlps__unhide_calls__3 [args_5, maxline_6, d_7]
        in ErlangTuple [ErlangAtom "call", anno_0, f_4, tup_el_24]
erlps__unhide_calls__3 [t_0, maxline_1, d_2] | isETuple t_0 =
  let    arg_4 = BIF.erlang__tuple_to_list__1 [t_0]
  in let arg_3 = erlps__unhide_calls__3 [arg_4, maxline_1, d_2]
  in BIF.erlang__list_to_tuple__1 [arg_3]
erlps__unhide_calls__3 [(ErlangCons e_0 es_1), maxline_2, d_3] =
  let    head_4 = erlps__unhide_calls__3 [e_0, maxline_2, d_3]
  in let tail_8 = erlps__unhide_calls__3 [es_1, maxline_2, d_3]
  in ErlangCons head_4 tail_8
erlps__unhide_calls__3 [e_0, _maxline_1, _d_2] = e_0
erlps__unhide_calls__3 [arg_3, arg_4, arg_5] =
  EXC.function_clause unit
erlps__unhide_calls__3 args =
  EXC.badarity (ErlangFun 3 erlps__unhide_calls__3) args

erlps__local_func__8 :: ErlangFun
erlps__local_func__8 [func_0, as0_1, _anno_2, bs0_3,
                      (ErlangTuple [(ErlangAtom "value"), f_4]), ef_5,
                      (ErlangAtom "value"), fuvs_6]
  =
  let    arg_9 = ErlangTuple [ErlangAtom "value", f_4]
  in let
    matchExpr_16 =
      erlps__expr_list__5 [as0_1, bs0_3, arg_9, ef_5, fuvs_6]
  in
    case matchExpr_16 of
      (ErlangTuple [as1_14, _bs1_15]) ->
        BIF.erlang__apply__2
          [f_4, ErlangCons func_0 (ErlangCons as1_14 ErlangEmptyList)]
      _ -> EXC.badmatch matchExpr_16
erlps__local_func__8 [func_0, as0_1, _anno_2, bs0_3,
                      (ErlangTuple [(ErlangAtom "value"), f_4]), ef_5, rbs_6,
                      fuvs_7]
  =
  let    arg_10 = ErlangTuple [ErlangAtom "value", f_4]
  in let
    matchExpr_17 =
      erlps__expr_list__5 [as0_1, bs0_3, arg_10, ef_5, fuvs_7]
  in
    case matchExpr_17 of
      (ErlangTuple [as1_15, bs1_16]) ->
        let
          arg_18 =
            BIF.erlang__apply__2
              [f_4, ErlangCons func_0 (ErlangCons as1_15 ErlangEmptyList)]
        in erlps__ret_expr__3 [arg_18, bs1_16, rbs_6]
      _ -> EXC.badmatch matchExpr_17
erlps__local_func__8 [func_0, as0_1, anno_2, bs0_3,
                      (ErlangTuple [(ErlangAtom "value"), f_4, eas_5]), ef_6,
                      rbs_7, fuvs_8]
  =
  let   
    fun_20 =
      ErlangFun 2
        (let
           lambda_9 [name_12, args_13] =
             BIF.erlang__apply__2
               [f_4, ErlangCons name_12 (ErlangCons args_13 eas_5)]
           lambda_9 [arg_10, arg_11] = EXC.function_clause unit
           lambda_9 args = EXC.badarity (ErlangFun 2 lambda_9) args
         in lambda_9)
  in let arg_25 = ErlangTuple [ErlangAtom "value", fun_20]
  in
    erlps__local_func__8
      [func_0, as0_1, anno_2, bs0_3, arg_25, ef_6, rbs_7, fuvs_8]
erlps__local_func__8 [func_0, as_1, anno_2, bs_3,
                      (ErlangTuple [(ErlangAtom "eval"), f_4]), _ef_5, rbs_6,
                      _fuvs_7]
  =
  let
    arg_8 =
      BIF.erlang__apply__2
        [f_4,
         ErlangCons func_0
           (ErlangCons as_1 (ErlangCons bs_3 ErlangEmptyList))]
  in erlps__local_func2__3 [arg_8, anno_2, rbs_6]
erlps__local_func__8 [func_0, as_1, anno_2, bs_3,
                      (ErlangTuple [(ErlangAtom "eval"), f_4, eas_5]), _ef_6,
                      rbs_7, _fuvs_8]
  =
  let
    arg_9 =
      BIF.erlang__apply__2
        [f_4,
         ErlangCons func_0 (ErlangCons as_1 (ErlangCons bs_3 eas_5))]
  in erlps__local_func2__3 [arg_9, anno_2, rbs_7]
erlps__local_func__8 [func_0, as0_1, _anno_2, bs0_3,
                      (ErlangTuple [m_4, f_5]), ef_6, rbs_7, fuvs_8]
  =
  let    arg_11 = ErlangTuple [m_4, f_5]
  in let
    matchExpr_18 =
      erlps__expr_list__5 [as0_1, bs0_3, arg_11, ef_6, fuvs_8]
  in
    case matchExpr_18 of
      (ErlangTuple [as1_16, bs1_17]) ->
        let
          arg_19 =
            BIF.erlang__apply__3
              [m_4, f_5, ErlangCons func_0 (ErlangCons as1_16 ErlangEmptyList)]
        in erlps__ret_expr__3 [arg_19, bs1_17, rbs_7]
      _ -> EXC.badmatch matchExpr_18
erlps__local_func__8 [func_0, as_1, anno_2, _bs_3,
                      (ErlangTuple [m_4, f_5, eas_6]), _ef_7, rbs_8, _fuvs_9]
  =
  let
    arg_10 =
      BIF.erlang__apply__3
        [m_4, f_5, ErlangCons func_0 (ErlangCons as_1 eas_6)]
  in erlps__local_func2__3 [arg_10, anno_2, rbs_8]
erlps__local_func__8 [func_0, as0_1, anno_2, bs0_3,
                      (ErlangAtom "none"), ef_4, rbs_5, _fuvs_6]
  =
  let    tup_el_12 = BIF.erlang__length__1 [as0_1]
  in let
    head_9 = ErlangTuple [ErlangAtom "erl_eval", func_0, tup_el_12]
  in let arg_15 = toErl 2
  in let arg_17 = BIF.erlang__self__0 []
  in let
    arg_16 =
      BIF.erlang__process_info__2
        [arg_17, ErlangAtom "current_stacktrace"]
  in let tail_14 = BIF.erlang__element__2 [arg_15, arg_16]
  in
    erlps__apply_error__6
      [ErlangAtom "undef", ErlangCons head_9 tail_14, anno_2, bs0_3,
       ef_4, rbs_5]
erlps__local_func__8 [arg_23, arg_24, arg_25, arg_26, arg_27,
                      arg_28, arg_29, arg_30]
  =
  EXC.function_clause unit
erlps__local_func__8 args =
  EXC.badarity (ErlangFun 8 erlps__local_func__8) args

erlps__local_func2__3 :: ErlangFun
erlps__local_func2__3 [(ErlangTuple [(ErlangAtom "value"), v_0,
                                     bs_1]),
                       _anno_2, rbs_3]
  =
  erlps__ret_expr__3 [v_0, bs_1, rbs_3]
erlps__local_func2__3 [(ErlangTuple [(ErlangAtom "eval"), f_0,
                                     as_1, bs_2]),
                       anno_3, rbs_4]
  =
  erlps__do_apply__6
    [f_0, as_1, anno_3, bs_2, ErlangAtom "none", rbs_4]
erlps__local_func2__3 [arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__local_func2__3 args =
  EXC.badarity (ErlangFun 3 erlps__local_func2__3) args

erlps__bif__6 :: ErlangFun
erlps__bif__6 [(ErlangAtom "apply"),
               (ErlangCons (ErlangAtom "erlang") (ErlangCons (ErlangAtom "apply") (ErlangCons as_0 (ErlangEmptyList)))),
               anno_1, bs_2, ef_3, rbs_4]
  =
  erlps__bif__6
    [ErlangAtom "apply", as_0, anno_1, bs_2, ef_3, rbs_4]
erlps__bif__6 [(ErlangAtom "apply"),
               (ErlangCons m_0 (ErlangCons f_1 (ErlangCons as_2 (ErlangEmptyList)))),
               anno_3, bs_4, ef_5, rbs_6]
  =
  erlps__do_apply__7 [m_0, f_1, as_2, anno_3, bs_4, ef_5, rbs_6]
erlps__bif__6 [(ErlangAtom "apply"),
               (ErlangCons f_0 (ErlangCons as_1 (ErlangEmptyList))), anno_2,
               bs_3, ef_4, rbs_5]
  =
  erlps__do_apply__6 [f_0, as_1, anno_2, bs_3, ef_4, rbs_5]
erlps__bif__6 [name_0, as_1, anno_2, bs_3, ef_4, rbs_5] =
  erlps__do_apply__7
    [ErlangAtom "erlang", name_0, as_1, anno_2, bs_3, ef_4, rbs_5]
erlps__bif__6 [arg_13, arg_14, arg_15, arg_16, arg_17, arg_18] =
  EXC.function_clause unit
erlps__bif__6 args =
  EXC.badarity (ErlangFun 6 erlps__bif__6) args

erlps__do_apply__6 :: ErlangFun
erlps__do_apply__6 [func_0, as_1, anno_2, bs0_3, ef_4, rbs_5] =
  let   
    env_16 =
      case ErlangAtom "true" of
        _ | isEFun func_0 ->
          let   
            tup_el_7 = BIF.erlang__fun_info__2 [func_0, ErlangAtom "module"]
          in let
            tup_el_10 = BIF.erlang__fun_info__2 [func_0, ErlangAtom "env"]
          in let case_6 = ErlangTuple [tup_el_7, tup_el_10]
          in
            case case_6 of
              (ErlangTuple [(ErlangTuple [(ErlangAtom "module"),
                                          (ErlangAtom "erl_eval")]),
                            (ErlangTuple [(ErlangAtom "env"), env1_13])]) | (/=)
                                                                              env1_13
                                                                              ErlangEmptyList ->
                ErlangTuple [ErlangAtom "env", env1_13]
              _ -> ErlangAtom "no_env"
        _ -> ErlangAtom "no_env"
  in let case_17 = ErlangTuple [env_16, ef_4]
  in
    case case_17 of
      (ErlangTuple [(ErlangTuple [(ErlangAtom "env"),
                                  (ErlangCons (ErlangTuple [fanno_20, fbs_21,
                                                            flf_22, fef_23,
                                                            ffuvs_24,
                                                            fcs_25]) (ErlangEmptyList))]),
                    _]) ->
        let   
          nrbs_26 =
            case ErlangAtom "true" of
              _ | (==) rbs_5 (ErlangAtom "none") -> bs0_3
              _ -> rbs_5
        in let
          tup_el_28 = BIF.erlang__fun_info__2 [func_0, ErlangAtom "arity"]
        in let tup_el_31 = BIF.erlang__length__1 [as_1]
        in let case_27 = ErlangTuple [tup_el_28, tup_el_31]
        in
          case case_27 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "arity"), arity_33]),
                          arity_34]) | arity_34 == arity_33 ->
              erlps__eval_fun__8
                [fcs_25, as_1, fanno_20, fbs_21, flf_22, fef_23, nrbs_26,
                 ffuvs_24]
            _ ->
              let    tup_el_45 = ErlangTuple [func_0, as_1]
              in let arg_43 = ErlangTuple [ErlangAtom "badarity", tup_el_45]
              in let arg_49 = toErl 2
              in let arg_51 = BIF.erlang__self__0 []
              in let
                arg_50 =
                  BIF.erlang__process_info__2
                    [arg_51, ErlangAtom "current_stacktrace"]
              in let arg_48 = BIF.erlang__element__2 [arg_49, arg_50]
              in
                erlps__apply_error__6
                  [arg_43, arg_48, anno_2, bs0_3, ef_4, rbs_5]
      (ErlangTuple [(ErlangTuple [(ErlangAtom "env"),
                                  (ErlangCons (ErlangTuple [fanno_57, fbs_58,
                                                            flf_59, fef_60,
                                                            ffuvs_61, fcs_62,
                                                            fname_63]) (ErlangEmptyList))]),
                    _]) ->
        let   
          nrbs_64 =
            case ErlangAtom "true" of
              _ | (==) rbs_5 (ErlangAtom "none") -> bs0_3
              _ -> rbs_5
        in let
          tup_el_66 = BIF.erlang__fun_info__2 [func_0, ErlangAtom "arity"]
        in let tup_el_69 = BIF.erlang__length__1 [as_1]
        in let case_65 = ErlangTuple [tup_el_66, tup_el_69]
        in
          case case_65 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "arity"), arity_71]),
                          arity_72]) | arity_72 == arity_71 ->
              erlps__eval_named_fun__10
                [fcs_62, as_1, fanno_57, fbs_58, flf_59, fef_60, fname_63,
                 func_0, nrbs_64, ffuvs_61]
            _ ->
              let    tup_el_85 = ErlangTuple [func_0, as_1]
              in let arg_83 = ErlangTuple [ErlangAtom "badarity", tup_el_85]
              in let arg_89 = toErl 2
              in let arg_91 = BIF.erlang__self__0 []
              in let
                arg_90 =
                  BIF.erlang__process_info__2
                    [arg_91, ErlangAtom "current_stacktrace"]
              in let arg_88 = BIF.erlang__element__2 [arg_89, arg_90]
              in
                erlps__apply_error__6
                  [arg_83, arg_88, anno_2, bs0_3, ef_4, rbs_5]
      (ErlangTuple [(ErlangAtom "no_env"), (ErlangAtom "none")]) | (==)
                                                                     rbs_5
                                                                     (ErlangAtom
                                                                        "value") ->
        BIF.erlang__apply__2 [func_0, as_1]
      (ErlangTuple [(ErlangAtom "no_env"), (ErlangAtom "none")]) ->
        let arg_99 = BIF.erlang__apply__2 [func_0, as_1]
        in erlps__ret_expr__3 [arg_99, bs0_3, rbs_5]
      (ErlangTuple [(ErlangAtom "no_env"),
                    (ErlangTuple [(ErlangAtom "value"), f_104])]) | (==) rbs_5
                                                                      (ErlangAtom
                                                                         "value") ->
        erlps__do_apply__4 [f_104, anno_2, func_0, as_1]
      (ErlangTuple [(ErlangAtom "no_env"),
                    (ErlangTuple [(ErlangAtom "value"), f_109])]) ->
        let arg_110 = erlps__do_apply__4 [f_109, anno_2, func_0, as_1]
        in erlps__ret_expr__3 [arg_110, bs0_3, rbs_5]
      something_else -> EXC.case_clause something_else
erlps__do_apply__6 [arg_117, arg_118, arg_119, arg_120, arg_121,
                    arg_122]
  =
  EXC.function_clause unit
erlps__do_apply__6 args =
  EXC.badarity (ErlangFun 6 erlps__do_apply__6) args

erlps__do_apply__7 :: ErlangFun
erlps__do_apply__7 [mod_0, func_1, as_2, anno_3, bs0_4, ef_5,
                    rbs_6]
  =
  case ef_5 of
    (ErlangAtom "none") | (==) rbs_6 (ErlangAtom "value") ->
      BIF.erlang__apply__3 [mod_0, func_1, as_2]
    (ErlangAtom "none") ->
      let arg_11 = BIF.erlang__apply__3 [mod_0, func_1, as_2]
      in erlps__ret_expr__3 [arg_11, bs0_4, rbs_6]
    (ErlangTuple [(ErlangAtom "value"), f_17]) | (==) rbs_6
                                                   (ErlangAtom "value") ->
      let arg_20 = ErlangTuple [mod_0, func_1]
      in erlps__do_apply__4 [f_17, anno_3, arg_20, as_2]
    (ErlangTuple [(ErlangAtom "value"), f_24]) ->
      let    arg_28 = ErlangTuple [mod_0, func_1]
      in let arg_25 = erlps__do_apply__4 [f_24, anno_3, arg_28, as_2]
      in erlps__ret_expr__3 [arg_25, bs0_4, rbs_6]
    something_else -> EXC.case_clause something_else
erlps__do_apply__7 [arg_34, arg_35, arg_36, arg_37, arg_38,
                    arg_39, arg_40]
  =
  EXC.function_clause unit
erlps__do_apply__7 args =
  EXC.badarity (ErlangFun 7 erlps__do_apply__7) args

erlps__do_apply__4 :: ErlangFun
erlps__do_apply__4 [f_0, anno_1, funormodfun_2, args_3]
  | isEFunA f_0 (toErl 3) =
  BIF.erlang__apply__2
    [f_0,
     ErlangCons anno_1
       (ErlangCons funormodfun_2 (ErlangCons args_3 ErlangEmptyList))]
erlps__do_apply__4 [f_0, _anno_1, funormodfun_2, args_3]
  | isEFunA f_0 (toErl 2) =
  BIF.erlang__apply__2
    [f_0,
     ErlangCons funormodfun_2 (ErlangCons args_3 ErlangEmptyList)]
erlps__do_apply__4 [arg_7, arg_8, arg_9, arg_10] =
  EXC.function_clause unit
erlps__do_apply__4 args =
  EXC.badarity (ErlangFun 4 erlps__do_apply__4) args

erlps__eval_lc__7 :: ErlangFun
erlps__eval_lc__7 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5, fuvs_6] =
  let   
    arg_8 =
      erlps__eval_lc1__7
        [e_0, qs_1, bs_2, lf_3, ef_4, fuvs_6, ErlangEmptyList]
  in let
    arg_7 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_8]
  in erlps__ret_expr__3 [arg_7, bs_2, rbs_5]
erlps__eval_lc__7 [arg_18, arg_19, arg_20, arg_21, arg_22,
                   arg_23, arg_24]
  =
  EXC.function_clause unit
erlps__eval_lc__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_lc__7) args

erlps__eval_lc1__7 :: ErlangFun
erlps__eval_lc1__7 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "generate"), anno_1,
                                              p_2, l0_3]) qs_4),
                    bs0_5, lf_6, ef_7, fuvs_8, acc0_9]
  =
  let
    matchExpr_18 =
      erlps__expr__6
        [l0_3, bs0_5, lf_6, ef_7, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_18 of
      (ErlangTuple [(ErlangAtom "value"), l1_16, _bs1_17]) ->
        let
          compfun_31 =
            ErlangFun 2
              (let
                 lambda_19 [bs_22, acc_23] =
                   erlps__eval_lc1__7
                     [e_0, qs_4, bs_22, lf_6, ef_7, fuvs_8, acc_23]
                 lambda_19 [arg_20, arg_21] = EXC.function_clause unit
                 lambda_19 args = EXC.badarity (ErlangFun 2 lambda_19) args
               in lambda_19)
        in
          erlps__eval_generate__8
            [l1_16, p_2, anno_1, bs0_5, lf_6, ef_7, compfun_31, acc0_9]
      _ -> EXC.badmatch matchExpr_18
erlps__eval_lc1__7 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "b_generate"), anno_1,
                                              p_2, l0_3]) qs_4),
                    bs0_5, lf_6, ef_7, fuvs_8, acc0_9]
  =
  let
    matchExpr_18 =
      erlps__expr__6
        [l0_3, bs0_5, lf_6, ef_7, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_18 of
      (ErlangTuple [(ErlangAtom "value"), bin_16, _bs1_17]) ->
        let
          compfun_31 =
            ErlangFun 2
              (let
                 lambda_19 [bs_22, acc_23] =
                   erlps__eval_lc1__7
                     [e_0, qs_4, bs_22, lf_6, ef_7, fuvs_8, acc_23]
                 lambda_19 [arg_20, arg_21] = EXC.function_clause unit
                 lambda_19 args = EXC.badarity (ErlangFun 2 lambda_19) args
               in lambda_19)
        in
          erlps__eval_b_generate__8
            [bin_16, p_2, anno_1, bs0_5, lf_6, ef_7, compfun_31, acc0_9]
      _ -> EXC.badmatch matchExpr_18
erlps__eval_lc1__7 [e_0, (ErlangCons f_1 qs_2), bs0_3, lf_4,
                    ef_5, fuvs_6, acc_7]
  =
  let
    compfun_18 =
      ErlangFun 1
        (let
           lambda_8 [bs_10] =
             erlps__eval_lc1__7 [e_0, qs_2, bs_10, lf_4, ef_5, fuvs_6, acc_7]
           lambda_8 [arg_9] = EXC.function_clause unit
           lambda_8 args = EXC.badarity (ErlangFun 1 lambda_8) args
         in lambda_8)
  in
    erlps__eval_filter__7
      [f_1, bs0_3, lf_4, ef_5, compfun_18, fuvs_6, acc_7]
erlps__eval_lc1__7 [e_0, (ErlangEmptyList), bs_1, lf_2, ef_3,
                    fuvs_4, acc_5]
  =
  let
    matchExpr_13 =
      erlps__expr__6 [e_0, bs_1, lf_2, ef_3, ErlangAtom "none", fuvs_4]
  in
    case matchExpr_13 of
      (ErlangTuple [(ErlangAtom "value"), v_12, _]) ->
        ErlangCons v_12 acc_5
      _ -> EXC.badmatch matchExpr_13
erlps__eval_lc1__7 [arg_16, arg_17, arg_18, arg_19, arg_20,
                    arg_21, arg_22]
  =
  EXC.function_clause unit
erlps__eval_lc1__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_lc1__7) args

erlps__eval_bc__7 :: ErlangFun
erlps__eval_bc__7 [e_0, qs_1, bs_2, lf_3, ef_4, rbs_5, fuvs_6] =
  let    arg_14 = ErlangBinary (BIN.concat [])
  in let
    arg_7 =
      erlps__eval_bc1__7 [e_0, qs_1, bs_2, lf_3, ef_4, fuvs_6, arg_14]
  in erlps__ret_expr__3 [arg_7, bs_2, rbs_5]
erlps__eval_bc__7 [arg_17, arg_18, arg_19, arg_20, arg_21,
                   arg_22, arg_23]
  =
  EXC.function_clause unit
erlps__eval_bc__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_bc__7) args

erlps__eval_bc1__7 :: ErlangFun
erlps__eval_bc1__7 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "b_generate"), anno_1,
                                              p_2, l0_3]) qs_4),
                    bs0_5, lf_6, ef_7, fuvs_8, acc0_9]
  =
  let
    matchExpr_18 =
      erlps__expr__6
        [l0_3, bs0_5, lf_6, ef_7, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_18 of
      (ErlangTuple [(ErlangAtom "value"), bin_16, _bs1_17]) ->
        let
          compfun_31 =
            ErlangFun 2
              (let
                 lambda_19 [bs_22, acc_23] =
                   erlps__eval_bc1__7
                     [e_0, qs_4, bs_22, lf_6, ef_7, fuvs_8, acc_23]
                 lambda_19 [arg_20, arg_21] = EXC.function_clause unit
                 lambda_19 args = EXC.badarity (ErlangFun 2 lambda_19) args
               in lambda_19)
        in
          erlps__eval_b_generate__8
            [bin_16, p_2, anno_1, bs0_5, lf_6, ef_7, compfun_31, acc0_9]
      _ -> EXC.badmatch matchExpr_18
erlps__eval_bc1__7 [e_0,
                    (ErlangCons (ErlangTuple [(ErlangAtom "generate"), anno_1,
                                              p_2, l0_3]) qs_4),
                    bs0_5, lf_6, ef_7, fuvs_8, acc0_9]
  =
  let
    matchExpr_18 =
      erlps__expr__6
        [l0_3, bs0_5, lf_6, ef_7, ErlangAtom "none", fuvs_8]
  in
    case matchExpr_18 of
      (ErlangTuple [(ErlangAtom "value"), list_16, _bs1_17]) ->
        let
          compfun_31 =
            ErlangFun 2
              (let
                 lambda_19 [bs_22, acc_23] =
                   erlps__eval_bc1__7
                     [e_0, qs_4, bs_22, lf_6, ef_7, fuvs_8, acc_23]
                 lambda_19 [arg_20, arg_21] = EXC.function_clause unit
                 lambda_19 args = EXC.badarity (ErlangFun 2 lambda_19) args
               in lambda_19)
        in
          erlps__eval_generate__8
            [list_16, p_2, anno_1, bs0_5, lf_6, ef_7, compfun_31, acc0_9]
      _ -> EXC.badmatch matchExpr_18
erlps__eval_bc1__7 [e_0, (ErlangCons f_1 qs_2), bs0_3, lf_4,
                    ef_5, fuvs_6, acc_7]
  =
  let
    compfun_18 =
      ErlangFun 1
        (let
           lambda_8 [bs_10] =
             erlps__eval_bc1__7 [e_0, qs_2, bs_10, lf_4, ef_5, fuvs_6, acc_7]
           lambda_8 [arg_9] = EXC.function_clause unit
           lambda_8 args = EXC.badarity (ErlangFun 1 lambda_8) args
         in lambda_8)
  in
    erlps__eval_filter__7
      [f_1, bs0_3, lf_4, ef_5, compfun_18, fuvs_6, acc_7]
erlps__eval_bc1__7 [e_0, (ErlangEmptyList), bs_1, lf_2, ef_3,
                    fuvs_4, acc_5]
  =
  let
    matchExpr_13 =
      erlps__expr__6 [e_0, bs_1, lf_2, ef_3, ErlangAtom "none", fuvs_4]
  in
    case matchExpr_13 of
      (ErlangTuple [(ErlangAtom "value"), v_12, _]) ->
        ErlangBinary
          (BIN.concat
             [BIN.binPrefix acc_5 (BIN.packedSize acc_5) 1,
              BIN.binPrefix v_12 (BIN.packedSize v_12) 1])
      _ -> EXC.badmatch matchExpr_13
erlps__eval_bc1__7 [arg_16, arg_17, arg_18, arg_19, arg_20,
                    arg_21, arg_22]
  =
  EXC.function_clause unit
erlps__eval_bc1__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_bc1__7) args

erlps__eval_generate__8 :: ErlangFun
erlps__eval_generate__8 [(ErlangCons v_0 rest_1), p_2, anno_3,
                         bs0_4, lf_5, ef_6, compfun_7, acc_8]
  =
  let    arg_13 = erlps__new_bindings__1 [bs0_4]
  in let
    case_9 = erlps__match__6 [p_2, v_0, anno_3, arg_13, bs0_4, ef_6]
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "match"), bsn_17]) ->
        let    bs2_20 = erlps__add_bindings__2 [bsn_17, bs0_4]
        in let
          newacc_24 =
            BIF.erlang__apply__2
              [compfun_7, ErlangCons bs2_20 (ErlangCons acc_8 ErlangEmptyList)]
        in
          erlps__eval_generate__8
            [rest_1, p_2, anno_3, bs0_4, lf_5, ef_6, compfun_7, newacc_24]
      (ErlangAtom "nomatch") ->
        erlps__eval_generate__8
          [rest_1, p_2, anno_3, bs0_4, lf_5, ef_6, compfun_7, acc_8]
      something_else -> EXC.case_clause something_else
erlps__eval_generate__8 [(ErlangEmptyList), _p_0, _anno_1,
                         _bs0_2, _lf_3, _ef_4, _compfun_5, acc_6]
  =
  acc_6
erlps__eval_generate__8 [term_0, _p_1, anno_2, bs0_3, _lf_4,
                         ef_5, _compfun_6, _acc_7]
  =
  let    arg_8 = ErlangTuple [ErlangAtom "bad_generator", term_0]
  in let arg_12 = toErl 2
  in let arg_14 = BIF.erlang__self__0 []
  in let
    arg_13 =
      BIF.erlang__process_info__2
        [arg_14, ErlangAtom "current_stacktrace"]
  in let arg_11 = BIF.erlang__element__2 [arg_12, arg_13]
  in
    erlps__apply_error__6
      [arg_8, arg_11, anno_2, bs0_3, ef_5, ErlangAtom "none"]
erlps__eval_generate__8 [arg_20, arg_21, arg_22, arg_23, arg_24,
                         arg_25, arg_26, arg_27]
  =
  EXC.function_clause unit
erlps__eval_generate__8 args =
  EXC.badarity (ErlangFun 8 erlps__eval_generate__8) args

erlps__eval_b_generate__8 :: ErlangFun
erlps__eval_b_generate__8 [bin_1@(ErlangBinary binSeg_0), p_2,
                           anno_3, bs0_4, lf_5, ef_6, compfun_7, acc_8]
  =
  let    mfun_11 = erlps__match_fun__2 [bs0_4, ef_6]
  in let
    efun_22 =
      ErlangFun 2
        (let
           lambda_12 [exp_15, bs_16] =
             erlps__expr__5 [exp_15, bs_16, lf_5, ef_6, ErlangAtom "none"]
           lambda_12 [arg_13, arg_14] = EXC.function_clause unit
           lambda_12 args = EXC.badarity (ErlangFun 2 lambda_12) args
         in lambda_12)
  in let
    errorfun_36 =
      ErlangFun 3
        (let
           lambda_23 [a_27, r_28, s_29] =
             erlps__apply_error__6
               [r_28, s_29, a_27, bs0_4, ef_6, ErlangAtom "none"]
           lambda_23 [arg_24, arg_25, arg_26] = EXC.function_clause unit
           lambda_23 args = EXC.badarity (ErlangFun 3 lambda_23) args
         in lambda_23)
  in let arg_40 = erlps__new_bindings__1 [bs0_4]
  in let
    case_37 =
      BIF.do_remote_fun_call "Eval.Bits" "erlps__bin_gen__7"
        [p_2, bin_1, arg_40, bs0_4, mfun_11, efun_22, errorfun_36]
  in
    case case_37 of
      (ErlangTuple [(ErlangAtom "match"), rest_46, bs1_47]) ->
        let    bs2_50 = erlps__add_bindings__2 [bs1_47, bs0_4]
        in let
          newacc_54 =
            BIF.erlang__apply__2
              [compfun_7, ErlangCons bs2_50 (ErlangCons acc_8 ErlangEmptyList)]
        in
          erlps__eval_b_generate__8
            [rest_46, p_2, anno_3, bs0_4, lf_5, ef_6, compfun_7, newacc_54]
      (ErlangTuple [(ErlangAtom "nomatch"), rest_63]) ->
        erlps__eval_b_generate__8
          [rest_63, p_2, anno_3, bs0_4, lf_5, ef_6, compfun_7, acc_8]
      (ErlangAtom "done") -> acc_8
      something_else -> EXC.case_clause something_else
erlps__eval_b_generate__8 [term_0, _p_1, anno_2, bs0_3, _lf_4,
                           ef_5, _compfun_6, _acc_7]
  =
  let    arg_8 = ErlangTuple [ErlangAtom "bad_generator", term_0]
  in let arg_12 = toErl 2
  in let arg_14 = BIF.erlang__self__0 []
  in let
    arg_13 =
      BIF.erlang__process_info__2
        [arg_14, ErlangAtom "current_stacktrace"]
  in let arg_11 = BIF.erlang__element__2 [arg_12, arg_13]
  in
    erlps__apply_error__6
      [arg_8, arg_11, anno_2, bs0_3, ef_5, ErlangAtom "none"]
erlps__eval_b_generate__8 [arg_20, arg_21, arg_22, arg_23,
                           arg_24, arg_25, arg_26, arg_27]
  =
  EXC.function_clause unit
erlps__eval_b_generate__8 args =
  EXC.badarity (ErlangFun 8 erlps__eval_b_generate__8) args

erlps__eval_filter__7 :: ErlangFun
erlps__eval_filter__7 [f_0, bs0_1, lf_2, ef_3, compfun_4, fuvs_5,
                       acc_6]
  =
  let
    case_7 =
      BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_test__1" [f_0]
  in
    case case_7 of
      (ErlangAtom "true") ->
        let case_9 = erlps__guard_test__4 [f_0, bs0_1, lf_2, ef_3]
        in
          case case_9 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs1_14]) ->
              BIF.erlang__apply__2
                [compfun_4, ErlangCons bs1_14 ErlangEmptyList]
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              acc_6
            something_else -> EXC.case_clause something_else
      (ErlangAtom "false") ->
        let
          case_17 =
            erlps__expr__6
              [f_0, bs0_1, lf_2, ef_3, ErlangAtom "none", fuvs_5]
        in
          case case_17 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs1_24]) ->
              BIF.erlang__apply__2
                [compfun_4, ErlangCons bs1_24 ErlangEmptyList]
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              acc_6
            (ErlangTuple [(ErlangAtom "value"), v_27, _]) ->
              let    arg_28 = ErlangTuple [ErlangAtom "bad_filter", v_27]
              in let arg_32 = toErl 2
              in let arg_34 = BIF.erlang__self__0 []
              in let
                arg_33 =
                  BIF.erlang__process_info__2
                    [arg_34, ErlangAtom "current_stacktrace"]
              in let arg_31 = BIF.erlang__element__2 [arg_32, arg_33]
              in let arg_37 = toErl 2
              in let arg_36 = BIF.erlang__element__2 [arg_37, f_0]
              in
                erlps__apply_error__6
                  [arg_28, arg_31, arg_36, bs0_1, ef_3, ErlangAtom "none"]
            something_else -> EXC.case_clause something_else
      something_else -> EXC.case_clause something_else
erlps__eval_filter__7 [arg_42, arg_43, arg_44, arg_45, arg_46,
                       arg_47, arg_48]
  =
  EXC.function_clause unit
erlps__eval_filter__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_filter__7) args

erlps__eval_map_fields__5 :: ErlangFun
erlps__eval_map_fields__5 [fs_0, bs_1, lf_2, ef_3, fuvs_4] =
  erlps__eval_map_fields__6
    [fs_0, bs_1, lf_2, ef_3, fuvs_4, ErlangEmptyList]
erlps__eval_map_fields__5 [arg_11, arg_12, arg_13, arg_14,
                           arg_15]
  =
  EXC.function_clause unit
erlps__eval_map_fields__5 args =
  EXC.badarity (ErlangFun 5 erlps__eval_map_fields__5) args

erlps__eval_map_fields__6 :: ErlangFun
erlps__eval_map_fields__6 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_assoc"),
                                                     _, k0_0, v0_1]) fs_2),
                           bs0_3, lf_4, ef_5, fuvs_6, acc_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [k0_0, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_6]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), k1_14, bs1_15]) ->
        let
          matchExpr_25 =
            erlps__expr__6
              [v0_1, bs1_15, lf_4, ef_5, ErlangAtom "none", fuvs_6]
        in
          case matchExpr_25 of
            (ErlangTuple [(ErlangAtom "value"), v1_23, bs2_24]) ->
              let head_32 = ErlangTuple [ErlangAtom "map_assoc", k1_14, v1_23]
              in
                erlps__eval_map_fields__6
                  [fs_2, bs2_24, lf_4, ef_5, fuvs_6, ErlangCons head_32 acc_7]
            _ -> EXC.badmatch matchExpr_25
      _ -> EXC.badmatch matchExpr_16
erlps__eval_map_fields__6 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_exact"),
                                                     _, k0_0, v0_1]) fs_2),
                           bs0_3, lf_4, ef_5, fuvs_6, acc_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [k0_0, bs0_3, lf_4, ef_5, ErlangAtom "none", fuvs_6]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), k1_14, bs1_15]) ->
        let
          matchExpr_25 =
            erlps__expr__6
              [v0_1, bs1_15, lf_4, ef_5, ErlangAtom "none", fuvs_6]
        in
          case matchExpr_25 of
            (ErlangTuple [(ErlangAtom "value"), v1_23, bs2_24]) ->
              let head_32 = ErlangTuple [ErlangAtom "map_exact", k1_14, v1_23]
              in
                erlps__eval_map_fields__6
                  [fs_2, bs2_24, lf_4, ef_5, fuvs_6, ErlangCons head_32 acc_7]
            _ -> EXC.badmatch matchExpr_25
      _ -> EXC.badmatch matchExpr_16
erlps__eval_map_fields__6 [(ErlangEmptyList), bs_0, _lf_1, _ef_2,
                           _fuvs_3, acc_4]
  =
  let
    tup_el_5 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_4]
  in ErlangTuple [tup_el_5, bs_0]
erlps__eval_map_fields__6 [arg_8, arg_9, arg_10, arg_11, arg_12,
                           arg_13]
  =
  EXC.function_clause unit
erlps__eval_map_fields__6 args =
  EXC.badarity (ErlangFun 6 erlps__eval_map_fields__6) args

erlps__ret_expr__3 :: ErlangFun
erlps__ret_expr__3 [v_0, _bs_1, (ErlangAtom "value")] = v_0
erlps__ret_expr__3 [v_0, bs_1, (ErlangAtom "none")] =
  ErlangTuple [ErlangAtom "value", v_0, bs_1]
erlps__ret_expr__3 [v_0, _bs_1, rbs_2]
  | (isEList rbs_2) || (isEMap rbs_2) =
  ErlangTuple [ErlangAtom "value", v_0, rbs_2]
erlps__ret_expr__3 [arg_6, arg_7, arg_8] =
  EXC.function_clause unit
erlps__ret_expr__3 args =
  EXC.badarity (ErlangFun 3 erlps__ret_expr__3) args

erlps__eval_fun__2 :: ErlangFun
erlps__eval_fun__2 [as_0,
                    (ErlangTuple [anno_1, bs0_2, lf_3, ef_4, fuvs_5, cs_6])]
  =
  erlps__eval_fun__8
    [cs_6, as_0, anno_1, bs0_2, lf_3, ef_4, ErlangAtom "value",
     fuvs_5]
erlps__eval_fun__2 [arg_15, arg_16] = EXC.function_clause unit
erlps__eval_fun__2 args =
  EXC.badarity (ErlangFun 2 erlps__eval_fun__2) args

erlps__eval_fun__8 :: ErlangFun
erlps__eval_fun__8 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                              _, h_0, g_1, b_2]) cs_3),
                    as_4, anno_5, bs0_6, lf_7, ef_8, rbs_9, fuvs_10]
  =
  let    arg_15 = erlps__new_bindings__1 [bs0_6]
  in let
    case_11 =
      erlps__match_list__6 [h_0, as_4, anno_5, arg_15, bs0_6, ef_8]
  in
    case case_11 of
      (ErlangTuple [(ErlangAtom "match"), bsn_19]) ->
        let    bs1_22 = erlps__add_bindings__2 [bsn_19, bs0_6]
        in let case_23 = erlps__guard__4 [g_1, bs1_22, lf_7, ef_8]
        in
          case case_23 of
            (ErlangAtom "true") ->
              erlps__exprs__6 [b_2, bs1_22, lf_7, ef_8, rbs_9, fuvs_10]
            (ErlangAtom "false") ->
              erlps__eval_fun__8
                [cs_3, as_4, anno_5, bs0_6, lf_7, ef_8, rbs_9, fuvs_10]
            something_else -> EXC.case_clause something_else
      (ErlangAtom "nomatch") ->
        erlps__eval_fun__8
          [cs_3, as_4, anno_5, bs0_6, lf_7, ef_8, rbs_9, fuvs_10]
      something_else -> EXC.case_clause something_else
erlps__eval_fun__8 [(ErlangEmptyList), as_0, anno_1, bs_2, _lf_3,
                    ef_4, rbs_5, _fuvs_6]
  =
  let   
    head_7 =
      ErlangTuple
        [ErlangAtom "erl_eval", ErlangAtom "-inside-an-interpreted-fun-",
         as_0]
  in let arg_12 = toErl 2
  in let arg_14 = BIF.erlang__self__0 []
  in let
    arg_13 =
      BIF.erlang__process_info__2
        [arg_14, ErlangAtom "current_stacktrace"]
  in let tail_11 = BIF.erlang__element__2 [arg_12, arg_13]
  in
    erlps__apply_error__6
      [ErlangAtom "function_clause", ErlangCons head_7 tail_11, anno_1,
       bs_2, ef_4, rbs_5]
erlps__eval_fun__8 [arg_23, arg_24, arg_25, arg_26, arg_27,
                    arg_28, arg_29, arg_30]
  =
  EXC.function_clause unit
erlps__eval_fun__8 args =
  EXC.badarity (ErlangFun 8 erlps__eval_fun__8) args

erlps__eval_named_fun__3 :: ErlangFun
erlps__eval_named_fun__3 [as_0, fun_1,
                          (ErlangTuple [anno_2, bs0_3, lf_4, ef_5, fuvs_6, cs_7,
                                        name_8])]
  =
  erlps__eval_named_fun__10
    [cs_7, as_0, anno_2, bs0_3, lf_4, ef_5, name_8, fun_1,
     ErlangAtom "value", fuvs_6]
erlps__eval_named_fun__3 [arg_19, arg_20, arg_21] =
  EXC.function_clause unit
erlps__eval_named_fun__3 args =
  EXC.badarity (ErlangFun 3 erlps__eval_named_fun__3) args

erlps__eval_named_fun__10 :: ErlangFun
erlps__eval_named_fun__10 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                     _, h_0, g_1, b_2]) cs_3),
                           as_4, anno_5, bs0_6, lf_7, ef_8, name_9, fun_10,
                           rbs_11, fuvs_12]
  =
  let    bs1_16 = erlps__add_binding__3 [name_9, fun_10, bs0_6]
  in let arg_21 = erlps__new_bindings__1 [bs0_6]
  in let
    case_17 =
      erlps__match_list__6 [h_0, as_4, anno_5, arg_21, bs1_16, ef_8]
  in
    case case_17 of
      (ErlangTuple [(ErlangAtom "match"), bsn_25]) ->
        let    bs2_28 = erlps__add_bindings__2 [bsn_25, bs1_16]
        in let case_29 = erlps__guard__4 [g_1, bs2_28, lf_7, ef_8]
        in
          case case_29 of
            (ErlangAtom "true") ->
              erlps__exprs__6 [b_2, bs2_28, lf_7, ef_8, rbs_11, fuvs_12]
            (ErlangAtom "false") ->
              erlps__eval_named_fun__10
                [cs_3, as_4, anno_5, bs0_6, lf_7, ef_8, name_9, fun_10, rbs_11,
                 fuvs_12]
            something_else -> EXC.case_clause something_else
      (ErlangAtom "nomatch") ->
        erlps__eval_named_fun__10
          [cs_3, as_4, anno_5, bs0_6, lf_7, ef_8, name_9, fun_10, rbs_11,
           fuvs_12]
      something_else -> EXC.case_clause something_else
erlps__eval_named_fun__10 [(ErlangEmptyList), as_0, anno_1, bs_2,
                           _lf_3, ef_4, _name_5, _fun_6, rbs_7, _fuvs_8]
  =
  let   
    head_9 =
      ErlangTuple
        [ErlangAtom "erl_eval", ErlangAtom "-inside-an-interpreted-fun-",
         as_0]
  in let arg_14 = toErl 2
  in let arg_16 = BIF.erlang__self__0 []
  in let
    arg_15 =
      BIF.erlang__process_info__2
        [arg_16, ErlangAtom "current_stacktrace"]
  in let tail_13 = BIF.erlang__element__2 [arg_14, arg_15]
  in
    erlps__apply_error__6
      [ErlangAtom "function_clause", ErlangCons head_9 tail_13, anno_1,
       bs_2, ef_4, rbs_7]
erlps__eval_named_fun__10 [arg_25, arg_26, arg_27, arg_28,
                           arg_29, arg_30, arg_31, arg_32, arg_33, arg_34]
  =
  EXC.function_clause unit
erlps__eval_named_fun__10 args =
  EXC.badarity (ErlangFun 10 erlps__eval_named_fun__10) args

erlps__expr_list__2 :: ErlangFun
erlps__expr_list__2 [es_0, bs_1] =
  let arg_6 = erlps__empty_fun_used_vars__0 []
  in
    erlps__expr_list__5
      [es_0, bs_1, ErlangAtom "none", ErlangAtom "none", arg_6]
erlps__expr_list__2 [arg_7, arg_8] = EXC.function_clause unit
erlps__expr_list__2 args =
  EXC.badarity (ErlangFun 2 erlps__expr_list__2) args

erlps__expr_list__3 :: ErlangFun
erlps__expr_list__3 [es_0, bs_1, lf_2] =
  let arg_7 = erlps__empty_fun_used_vars__0 []
  in
    erlps__expr_list__5 [es_0, bs_1, lf_2, ErlangAtom "none", arg_7]
erlps__expr_list__3 [arg_8, arg_9, arg_10] =
  EXC.function_clause unit
erlps__expr_list__3 args =
  EXC.badarity (ErlangFun 3 erlps__expr_list__3) args

erlps__expr_list__4 :: ErlangFun
erlps__expr_list__4 [es_0, bs_1, lf_2, ef_3] =
  let arg_8 = erlps__empty_fun_used_vars__0 []
  in erlps__expr_list__5 [es_0, bs_1, lf_2, ef_3, arg_8]
erlps__expr_list__4 [arg_9, arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__expr_list__4 args =
  EXC.badarity (ErlangFun 4 erlps__expr_list__4) args

erlps__expr_list__5 :: ErlangFun
erlps__expr_list__5 [es_0, bs_1, lf_2, ef_3, fuvs_4] =
  erlps__expr_list__7
    [es_0, ErlangEmptyList, bs_1, bs_1, lf_2, ef_3, fuvs_4]
erlps__expr_list__5 [arg_12, arg_13, arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__expr_list__5 args =
  EXC.badarity (ErlangFun 5 erlps__expr_list__5) args

erlps__expr_list__7 :: ErlangFun
erlps__expr_list__7 [(ErlangCons e_0 es_1), vs_2, bsorig_3,
                     bs0_4, lf_5, ef_6, fuvs_7]
  =
  let
    matchExpr_16 =
      erlps__expr__6
        [e_0, bsorig_3, lf_5, ef_6, ErlangAtom "none", fuvs_7]
  in
    case matchExpr_16 of
      (ErlangTuple [(ErlangAtom "value"), v_14, bs1_15]) ->
        let    arg_26 = toErl 2
        in let arg_25 = BIF.erlang__element__2 [arg_26, e_0]
        in let
          arg_22 = erlps__merge_bindings__4 [bs1_15, bs0_4, arg_25, ef_6]
        in
          erlps__expr_list__7
            [es_1, ErlangCons v_14 vs_2, bsorig_3, arg_22, lf_5, ef_6,
             fuvs_7]
      _ -> EXC.badmatch matchExpr_16
erlps__expr_list__7 [(ErlangEmptyList), vs_0, _, bs_1, _lf_2,
                     _ef_3, _fuvs_4]
  =
  let
    tup_el_5 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [vs_0]
  in ErlangTuple [tup_el_5, bs_1]
erlps__expr_list__7 [arg_8, arg_9, arg_10, arg_11, arg_12,
                     arg_13, arg_14]
  =
  EXC.function_clause unit
erlps__expr_list__7 args =
  EXC.badarity (ErlangFun 7 erlps__expr_list__7) args

erlps__eval_op__7 :: ErlangFun
erlps__eval_op__7 [op_0, arg1_1, arg2_2, anno_3, bs_4, ef_5,
                   rbs_6]
  =
  erlps__do_apply__7
    [ErlangAtom "erlang", op_0,
     ErlangCons arg1_1 (ErlangCons arg2_2 ErlangEmptyList), anno_3,
     bs_4, ef_5, rbs_6]
erlps__eval_op__7 [arg_18, arg_19, arg_20, arg_21, arg_22,
                   arg_23, arg_24]
  =
  EXC.function_clause unit
erlps__eval_op__7 args =
  EXC.badarity (ErlangFun 7 erlps__eval_op__7) args

erlps__eval_op__6 :: ErlangFun
erlps__eval_op__6 [op_0, arg_1, anno_2, bs_3, ef_4, rbs_5] =
  erlps__do_apply__7
    [ErlangAtom "erlang", op_0, ErlangCons arg_1 ErlangEmptyList,
     anno_2, bs_3, ef_4, rbs_5]
erlps__eval_op__6 [arg_15, arg_16, arg_17, arg_18, arg_19,
                   arg_20]
  =
  EXC.function_clause unit
erlps__eval_op__6 args =
  EXC.badarity (ErlangFun 6 erlps__eval_op__6) args

erlps__if_clauses__7 :: ErlangFun
erlps__if_clauses__7 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                _, (ErlangEmptyList), g_0,
                                                b_1]) cs_2),
                      anno_3, bs_4, lf_5, ef_6, rbs_7, fuvs_8]
  =
  let case_9 = erlps__guard__4 [g_0, bs_4, lf_5, ef_6]
  in
    case case_9 of
      (ErlangAtom "true") ->
        erlps__exprs__6 [b_1, bs_4, lf_5, ef_6, rbs_7, fuvs_8]
      (ErlangAtom "false") ->
        erlps__if_clauses__7
          [cs_2, anno_3, bs_4, lf_5, ef_6, rbs_7, fuvs_8]
      something_else -> EXC.case_clause something_else
erlps__if_clauses__7 [(ErlangEmptyList), anno_0, bs_1, _lf_2,
                      ef_3, rbs_4, _fuvs_5]
  =
  let    arg_8 = toErl 2
  in let arg_10 = BIF.erlang__self__0 []
  in let
    arg_9 =
      BIF.erlang__process_info__2
        [arg_10, ErlangAtom "current_stacktrace"]
  in let arg_7 = BIF.erlang__element__2 [arg_8, arg_9]
  in
    erlps__apply_error__6
      [ErlangAtom "if_clause", arg_7, anno_0, bs_1, ef_3, rbs_4]
erlps__if_clauses__7 [arg_16, arg_17, arg_18, arg_19, arg_20,
                      arg_21, arg_22]
  =
  EXC.function_clause unit
erlps__if_clauses__7 args =
  EXC.badarity (ErlangFun 7 erlps__if_clauses__7) args

erlps__try_clauses__10 :: ErlangFun
erlps__try_clauses__10 [b_0, cases_1, catches_2, ab_3, anno_4,
                        bs_5, lf_6, ef_7, rbs_8, fuvs_9]
  =
  let
    _ =
      erlps__check_stacktrace_vars__5
        [catches_2, anno_4, bs_5, ef_7, rbs_8]
  in
    EXC.tryOfCatchFinally
      (\ _ ->
         erlps__exprs__6
           [b_0, bs_5, lf_6, ef_7, ErlangAtom "none", fuvs_9])
      (\ of_21 ->
         case of_21 of
           (ErlangTuple [(ErlangAtom "value"), v_24, bs1_25]) | (==) cases_1
                                                                  ErlangEmptyList ->
             erlps__ret_expr__3 [v_24, bs1_25, rbs_8]
           (ErlangTuple [(ErlangAtom "value"), v_29, bs1_30]) ->
             let
               case_31 =
                 erlps__match_clause__5
                   [cases_1, ErlangCons v_29 ErlangEmptyList, bs1_30, lf_6,
                    ef_7]
             in
               case case_31 of
                 (ErlangTuple [b2_39, bs2_40]) ->
                   erlps__exprs__6 [b2_39, bs2_40, lf_6, ef_7, rbs_8, fuvs_9]
                 (ErlangAtom "nomatch") ->
                   let    arg_47 = ErlangTuple [ErlangAtom "try_clause", v_29]
                   in let arg_51 = toErl 2
                   in let arg_53 = BIF.erlang__self__0 []
                   in let
                     arg_52 =
                       BIF.erlang__process_info__2
                         [arg_53, ErlangAtom "current_stacktrace"]
                   in let arg_50 = BIF.erlang__element__2 [arg_51, arg_52]
                   in
                     erlps__apply_error__6
                       [arg_47, arg_50, anno_4, bs_5, ef_7, rbs_8]
                 something_else -> EXC.case_clause something_else
           something_else -> EXC.try_clause something_else)
      (\ ex_22 ->
         case ex_22 of
           (ErlangTuple [class_59, reason_60, stacktrace_61]) | (==)
                                                                  catches_2
                                                                  ErlangEmptyList ->
             BIF.erlang__raise__3 [class_59, reason_60, stacktrace_61]
           (ErlangTuple [class_65, reason_66, stacktrace_67]) ->
             let    v_71 = ErlangTuple [class_65, reason_66, stacktrace_67]
             in let
               case_72 =
                 erlps__match_clause__5
                   [catches_2, ErlangCons v_71 ErlangEmptyList, bs_5, lf_6,
                    ef_7]
             in
               case case_72 of
                 (ErlangTuple [b2_80, bs2_81]) ->
                   erlps__exprs__6 [b2_80, bs2_81, lf_6, ef_7, rbs_8, fuvs_9]
                 (ErlangAtom "nomatch") ->
                   BIF.erlang__raise__3 [class_65, reason_66, stacktrace_67]
                 something_else -> EXC.case_clause something_else
           ex_23 -> EXC.raise ex_23)
      (\ _ ->
         case ErlangAtom "true" of
           _ | (==) ab_3 ErlangEmptyList -> bs_5
           _ ->
             erlps__exprs__6
               [ab_3, bs_5, lf_6, ef_7, ErlangAtom "none", fuvs_9])
erlps__try_clauses__10 [arg_97, arg_98, arg_99, arg_100, arg_101,
                        arg_102, arg_103, arg_104, arg_105, arg_106]
  =
  EXC.function_clause unit
erlps__try_clauses__10 args =
  EXC.badarity (ErlangFun 10 erlps__try_clauses__10) args

erlps__check_stacktrace_vars__5 :: ErlangFun
erlps__check_stacktrace_vars__5 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                           _,
                                                           (ErlangCons (ErlangTuple [(ErlangAtom "tuple"),
                                                                                     _,
                                                                                     (ErlangCons _ (ErlangCons _ (ErlangCons stv_0 (ErlangEmptyList))))]) (ErlangEmptyList)),
                                                           _, _]) cs_1),
                                 anno_2, bs_3, ef_4, rbs_5]
  =
  case stv_0 of
    (ErlangTuple [(ErlangAtom "var"), _, v_7]) ->
      let case_8 = erlps__binding__2 [v_7, bs_3]
      in
        case case_8 of
          (ErlangTuple [(ErlangAtom "value"), _]) ->
            let    arg_13 = toErl 2
            in let arg_15 = BIF.erlang__self__0 []
            in let
              arg_14 =
                BIF.erlang__process_info__2
                  [arg_15, ErlangAtom "current_stacktrace"]
            in let arg_12 = BIF.erlang__element__2 [arg_13, arg_14]
            in
              erlps__apply_error__6
                [ErlangAtom "stacktrace_bound", arg_12, anno_2, bs_3, ef_4,
                 rbs_5]
          (ErlangAtom "unbound") ->
            erlps__check_stacktrace_vars__5 [cs_1, anno_2, bs_3, ef_4, rbs_5]
          something_else -> EXC.case_clause something_else
    _ ->
      let   
        reason_28 =
          ErlangTuple [ErlangAtom "illegal_stacktrace_variable", stv_0]
      in let arg_31 = toErl 2
      in let arg_33 = BIF.erlang__self__0 []
      in let
        arg_32 =
          BIF.erlang__process_info__2
            [arg_33, ErlangAtom "current_stacktrace"]
      in let arg_30 = BIF.erlang__element__2 [arg_31, arg_32]
      in
        erlps__apply_error__6
          [reason_28, arg_30, anno_2, bs_3, ef_4, rbs_5]
erlps__check_stacktrace_vars__5 [(ErlangEmptyList), _anno_0,
                                 _bs_1, _ef_2, _rbs_3]
  =
  ErlangAtom "ok"
erlps__check_stacktrace_vars__5 [arg_4, arg_5, arg_6, arg_7,
                                 arg_8]
  =
  EXC.function_clause unit
erlps__check_stacktrace_vars__5 args =
  EXC.badarity (ErlangFun 5 erlps__check_stacktrace_vars__5) args

erlps__case_clauses__8 :: ErlangFun
erlps__case_clauses__8 [val_0, cs_1, anno_2, bs_3, lf_4, ef_5,
                        rbs_6, fuvs_7]
  =
  let
    case_8 =
      erlps__match_clause__5
        [cs_1, ErlangCons val_0 ErlangEmptyList, bs_3, lf_4, ef_5]
  in
    case case_8 of
      (ErlangTuple [b_16, bs1_17]) ->
        erlps__exprs__6 [b_16, bs1_17, lf_4, ef_5, rbs_6, fuvs_7]
      (ErlangAtom "nomatch") ->
        let    arg_24 = ErlangTuple [ErlangAtom "case_clause", val_0]
        in let arg_28 = toErl 2
        in let arg_30 = BIF.erlang__self__0 []
        in let
          arg_29 =
            BIF.erlang__process_info__2
              [arg_30, ErlangAtom "current_stacktrace"]
        in let arg_27 = BIF.erlang__element__2 [arg_28, arg_29]
        in
          erlps__apply_error__6 [arg_24, arg_27, anno_2, bs_3, ef_5, rbs_6]
      something_else -> EXC.case_clause something_else
erlps__case_clauses__8 [arg_36, arg_37, arg_38, arg_39, arg_40,
                        arg_41, arg_42, arg_43]
  =
  EXC.function_clause unit
erlps__case_clauses__8 args =
  EXC.badarity (ErlangFun 8 erlps__case_clauses__8) args

erlps__receive_clauses__6 :: ErlangFun
erlps__receive_clauses__6 [cs_0, bs_1, lf_2, ef_3, rbs_4, fuvs_5]
  =
  erlps__receive_clauses__8
    [ErlangAtom "infinity", cs_0, ErlangAtom "unused", bs_1, lf_2,
     ef_3, rbs_4, fuvs_5]
erlps__receive_clauses__6 [arg_14, arg_15, arg_16, arg_17,
                           arg_18, arg_19]
  =
  EXC.function_clause unit
erlps__receive_clauses__6 args =
  EXC.badarity (ErlangFun 6 erlps__receive_clauses__6) args

erlps__receive_clauses__8 :: ErlangFun
erlps__receive_clauses__8 [t_0, cs_1, tb_2, bs_3, lf_4, ef_5,
                           rbs_6, fuvs_7]
  =
  let   
    f_18 =
      ErlangFun 1
        (let
           lambda_8 [m_10] =
             erlps__match_clause__5
               [cs_1, ErlangCons m_10 ErlangEmptyList, bs_3, lf_4, ef_5]
           lambda_8 [arg_9] = EXC.function_clause unit
           lambda_8 args = EXC.badarity (ErlangFun 1 lambda_8) args
         in lambda_8)
  in let case_19 = BIF.prim_eval__receive__2 [f_18, t_0]
  in
    case case_19 of
      (ErlangTuple [b_22, bs1_23]) ->
        erlps__exprs__6 [b_22, bs1_23, lf_4, ef_5, rbs_6, fuvs_7]
      (ErlangAtom "timeout") ->
        case tb_2 of
          (ErlangTuple [b_30, bs1_31]) ->
            erlps__exprs__6 [b_30, bs1_31, lf_4, ef_5, rbs_6, fuvs_7]
          _ -> EXC.badmatch tb_2
      something_else -> EXC.case_clause something_else
erlps__receive_clauses__8 [arg_39, arg_40, arg_41, arg_42,
                           arg_43, arg_44, arg_45, arg_46]
  =
  EXC.function_clause unit
erlps__receive_clauses__8 args =
  EXC.badarity (ErlangFun 8 erlps__receive_clauses__8) args

erlps__match_clause__4 :: ErlangFun
erlps__match_clause__4 [cs_0, vs_1, bs_2, lf_3] =
  erlps__match_clause__5
    [cs_0, vs_1, bs_2, lf_3, ErlangAtom "none"]
erlps__match_clause__4 [arg_9, arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__match_clause__4 args =
  EXC.badarity (ErlangFun 4 erlps__match_clause__4) args

erlps__match_clause__5 :: ErlangFun
erlps__match_clause__5 [(ErlangCons (ErlangTuple [(ErlangAtom "clause"),
                                                  anno_0, h_1, g_2, b_3]) cs_4),
                        vals_5, bs_6, lf_7, ef_8]
  =
  let
    case_9 =
      erlps__match_list__6 [h_1, vals_5, anno_0, bs_6, bs_6, ef_8]
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "match"), bs1_16]) ->
        let case_17 = erlps__guard__4 [g_2, bs1_16, lf_7, ef_8]
        in
          case case_17 of
            (ErlangAtom "true") -> ErlangTuple [b_3, bs1_16]
            (ErlangAtom "false") ->
              erlps__match_clause__5 [cs_4, vals_5, bs_6, lf_7, ef_8]
            something_else -> EXC.case_clause something_else
      (ErlangAtom "nomatch") ->
        erlps__match_clause__5 [cs_4, vals_5, bs_6, lf_7, ef_8]
      something_else -> EXC.case_clause something_else
erlps__match_clause__5 [(ErlangEmptyList), _vals_0, _bs_1, _lf_2,
                        _ef_3]
  =
  ErlangAtom "nomatch"
erlps__match_clause__5 [arg_4, arg_5, arg_6, arg_7, arg_8] =
  EXC.function_clause unit
erlps__match_clause__5 args =
  EXC.badarity (ErlangFun 5 erlps__match_clause__5) args

erlps__guard__4 :: ErlangFun
erlps__guard__4 [l_1@(ErlangCons g_0 _), bs0_2, lf_3, ef_4]
  | isEList g_0 =
  erlps__guard1__4 [l_1, bs0_2, lf_3, ef_4]
erlps__guard__4 [l_0, bs0_1, lf_2, ef_3] =
  erlps__guard0__4 [l_0, bs0_1, lf_2, ef_3]
erlps__guard__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__guard__4 args =
  EXC.badarity (ErlangFun 4 erlps__guard__4) args

erlps__guard1__4 :: ErlangFun
erlps__guard1__4 [(ErlangCons g_0 gs_1), bs0_2, lf_3, ef_4]
  | isEList g_0 =
  let case_5 = erlps__guard0__4 [g_0, bs0_2, lf_3, ef_4]
  in
    case case_5 of
      (ErlangAtom "true") -> ErlangAtom "true"
      (ErlangAtom "false") ->
        erlps__guard1__4 [gs_1, bs0_2, lf_3, ef_4]
      something_else -> EXC.case_clause something_else
erlps__guard1__4 [(ErlangEmptyList), _bs_0, _lf_1, _ef_2] =
  ErlangAtom "false"
erlps__guard1__4 [arg_3, arg_4, arg_5, arg_6] =
  EXC.function_clause unit
erlps__guard1__4 args =
  EXC.badarity (ErlangFun 4 erlps__guard1__4) args

erlps__guard0__4 :: ErlangFun
erlps__guard0__4 [(ErlangCons g_0 gs_1), bs0_2, lf_3, ef_4] =
  let
    case_5 =
      BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_test__1" [g_0]
  in
    case case_5 of
      (ErlangAtom "true") ->
        let case_7 = erlps__guard_test__4 [g_0, bs0_2, lf_3, ef_4]
        in
          case case_7 of
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"),
                          bs_12]) ->
              erlps__guard0__4 [gs_1, bs_12, lf_3, ef_4]
            (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "false"), _]) ->
              ErlangAtom "false"
            something_else -> EXC.case_clause something_else
      (ErlangAtom "false") ->
        let    arg_19 = toErl 2
        in let arg_21 = BIF.erlang__self__0 []
        in let
          arg_20 =
            BIF.erlang__process_info__2
              [arg_21, ErlangAtom "current_stacktrace"]
        in let arg_18 = BIF.erlang__element__2 [arg_19, arg_20]
        in let arg_24 = toErl 2
        in let arg_23 = BIF.erlang__element__2 [arg_24, g_0]
        in
          erlps__apply_error__6
            [ErlangAtom "guard_expr", arg_18, arg_23, bs0_2, ef_4,
             ErlangAtom "none"]
      something_else -> EXC.case_clause something_else
erlps__guard0__4 [(ErlangEmptyList), _bs_0, _lf_1, _ef_2] =
  ErlangAtom "true"
erlps__guard0__4 [arg_3, arg_4, arg_5, arg_6] =
  EXC.function_clause unit
erlps__guard0__4 args =
  EXC.badarity (ErlangFun 4 erlps__guard0__4) args

erlps__guard_test__4 :: ErlangFun
erlps__guard_test__4 [(ErlangTuple [(ErlangAtom "call"), a_0,
                                    (ErlangTuple [(ErlangAtom "atom"), ln_1,
                                                  f_2]),
                                    as0_3]),
                      bs0_4, lf_5, ef_6]
  =
  let    tt_8 = erlps__type_test__1 [f_2]
  in let tup_el_11 = ErlangTuple [ErlangAtom "atom", ln_1, tt_8]
  in let
    g_16 = ErlangTuple [ErlangAtom "call", a_0, tup_el_11, as0_3]
  in erlps__expr_guard_test__4 [g_16, bs0_4, lf_5, ef_6]
erlps__guard_test__4 [(ErlangTuple [(ErlangAtom "call"), a_0,
                                    (ErlangTuple [(ErlangAtom "remote"), ar_1,
                                                  (ErlangTuple [(ErlangAtom "atom"),
                                                                am_2,
                                                                (ErlangAtom "erlang")]),
                                                  (ErlangTuple [(ErlangAtom "atom"),
                                                                af_3, f_4])]),
                                    as0_5]),
                      bs0_6, lf_7, ef_8]
  =
  let    tt_10 = erlps__type_test__1 [f_4]
  in let
    tup_el_16 =
      ErlangTuple [ErlangAtom "atom", am_2, ErlangAtom "erlang"]
  in let tup_el_20 = ErlangTuple [ErlangAtom "atom", af_3, tt_10]
  in let
    tup_el_13 =
      ErlangTuple [ErlangAtom "remote", ar_1, tup_el_16, tup_el_20]
  in let
    g_25 = ErlangTuple [ErlangAtom "call", a_0, tup_el_13, as0_5]
  in erlps__expr_guard_test__4 [g_25, bs0_6, lf_7, ef_8]
erlps__guard_test__4 [g_0, bs0_1, lf_2, ef_3] =
  erlps__expr_guard_test__4 [g_0, bs0_1, lf_2, ef_3]
erlps__guard_test__4 [arg_8, arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__guard_test__4 args =
  EXC.badarity (ErlangFun 4 erlps__guard_test__4) args

erlps__expr_guard_test__4 :: ErlangFun
erlps__expr_guard_test__4 [g_0, bs0_1, lf_2, ef_3] =
  EXC.tryCatch
    (\ _ ->
       let
         match_final_4_10 =
           erlps__expr__5 [g_0, bs0_1, lf_2, ef_3, ErlangAtom "none"]
       in
         case match_final_4_10 of
           (ErlangTuple [(ErlangAtom "value"), (ErlangAtom "true"), _]) ->
             match_final_4_10
           _ -> EXC.badmatch match_final_4_10)
    (\ ex_13 ->
       case ex_13 of
         (ErlangTuple [(ErlangAtom "error"), _, _]) ->
           ErlangTuple [ErlangAtom "value", ErlangAtom "false", bs0_1]
         ex_14 -> EXC.raise ex_14)
erlps__expr_guard_test__4 [arg_18, arg_19, arg_20, arg_21] =
  EXC.function_clause unit
erlps__expr_guard_test__4 args =
  EXC.badarity (ErlangFun 4 erlps__expr_guard_test__4) args

erlps__type_test__1 :: ErlangFun
erlps__type_test__1 [(ErlangAtom "integer")] =
  ErlangAtom "is_integer"
erlps__type_test__1 [(ErlangAtom "float")] =
  ErlangAtom "is_float"
erlps__type_test__1 [(ErlangAtom "number")] =
  ErlangAtom "is_number"
erlps__type_test__1 [(ErlangAtom "atom")] = ErlangAtom "is_atom"
erlps__type_test__1 [(ErlangAtom "list")] = ErlangAtom "is_list"
erlps__type_test__1 [(ErlangAtom "tuple")] =
  ErlangAtom "is_tuple"
erlps__type_test__1 [(ErlangAtom "pid")] = ErlangAtom "is_pid"
erlps__type_test__1 [(ErlangAtom "reference")] =
  ErlangAtom "is_reference"
erlps__type_test__1 [(ErlangAtom "port")] = ErlangAtom "is_port"
erlps__type_test__1 [(ErlangAtom "function")] =
  ErlangAtom "is_function"
erlps__type_test__1 [(ErlangAtom "binary")] =
  ErlangAtom "is_binary"
erlps__type_test__1 [(ErlangAtom "record")] =
  ErlangAtom "is_record"
erlps__type_test__1 [(ErlangAtom "map")] = ErlangAtom "is_map"
erlps__type_test__1 [test_0] = test_0
erlps__type_test__1 [arg_1] = EXC.function_clause unit
erlps__type_test__1 args =
  EXC.badarity (ErlangFun 1 erlps__type_test__1) args

erlps__match__6 :: ErlangFun
erlps__match__6 [pat_0, term_1, anno_2, bs_3, bbs_4, ef_5] =
  let
    case_6 =
      EXC.tryCatch
        (\ _ -> erlps__match1__5 [pat_0, term_1, bs_3, bbs_4, ef_5])
        (\ ex_13 ->
           case ex_13 of
             (ErlangTuple [(ErlangAtom "throw"), payload_15, _]) -> payload_15
             (ErlangTuple [(ErlangAtom "error"), payload_16, stack_17]) ->
               let tup_el_19 = ErlangTuple [payload_16, stack_17]
               in ErlangTuple [ErlangAtom "EXIT", tup_el_19]
             (ErlangTuple [(ErlangAtom "exit"), payload_22, _]) ->
               ErlangTuple [ErlangAtom "EXIT", payload_22]
             ex_14 -> EXC.raise ex_14)
  in
    case case_6 of
      (ErlangAtom "invalid") ->
        let    tup_el_27 = erlps__to_term__1 [pat_0]
        in let
          arg_25 = ErlangTuple [ErlangAtom "illegal_pattern", tup_el_27]
        in let arg_30 = toErl 2
        in let arg_32 = BIF.erlang__self__0 []
        in let
          arg_31 =
            BIF.erlang__process_info__2
              [arg_32, ErlangAtom "current_stacktrace"]
        in let arg_29 = BIF.erlang__element__2 [arg_30, arg_31]
        in
          erlps__apply_error__6
            [arg_25, arg_29, anno_2, bs_3, ef_5, ErlangAtom "none"]
      other_38 -> other_38
erlps__match__6 [arg_39, arg_40, arg_41, arg_42, arg_43, arg_44]
  =
  EXC.function_clause unit
erlps__match__6 args =
  EXC.badarity (ErlangFun 6 erlps__match__6) args

erlps__string_to_conses__3 :: ErlangFun
erlps__string_to_conses__3 [(ErlangEmptyList), _, tail_0] =
  tail_0
erlps__string_to_conses__3 [(ErlangCons e_0 rest_1), anno_2,
                            tail_3]
  =
  let    tup_el_6 = ErlangTuple [ErlangAtom "integer", anno_2, e_0]
  in let
    tup_el_10 = erlps__string_to_conses__3 [rest_1, anno_2, tail_3]
  in ErlangTuple [ErlangAtom "cons", anno_2, tup_el_6, tup_el_10]
erlps__string_to_conses__3 [arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__string_to_conses__3 args =
  EXC.badarity (ErlangFun 3 erlps__string_to_conses__3) args

erlps__match1__5 :: ErlangFun
erlps__match1__5 [(ErlangTuple [(ErlangAtom "atom"), _, a0_0]),
                  a_1, bs_2, _bbs_3, _ef_4]
  =
  case a_1 of
    a0_6 | a0_6 == a0_0 -> ErlangTuple [ErlangAtom "match", bs_2]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "integer"), _,
                                i0_0]),
                  i_1, bs_2, _bbs_3, _ef_4]
  =
  case i_1 of
    i0_6 | i0_6 == i0_0 -> ErlangTuple [ErlangAtom "match", bs_2]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "float"), _, f0_0]),
                  f_1, bs_2, _bbs_3, _ef_4]
  =
  case f_1 of
    f0_6 | f0_6 == f0_0 -> ErlangTuple [ErlangAtom "match", bs_2]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "char"), _, c0_0]),
                  c_1, bs_2, _bbs_3, _ef_4]
  =
  case c_1 of
    c0_6 | c0_6 == c0_0 -> ErlangTuple [ErlangAtom "match", bs_2]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "var"), _,
                                (ErlangAtom "_")]),
                  _, bs_0, _bbs_1, _ef_2]
  =
  ErlangTuple [ErlangAtom "match", bs_0]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "var"), _, name_0]),
                  term_1, bs_2, _bbs_3, _ef_4]
  =
  let case_5 = erlps__binding__2 [name_0, bs_2]
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "value"), term_8]) | term_8 ==
                                                       term_1 ->
        ErlangTuple [ErlangAtom "match", bs_2]
      (ErlangTuple [(ErlangAtom "value"), _]) ->
        BIF.erlang__throw__1 [ErlangAtom "nomatch"]
      (ErlangAtom "unbound") ->
        let tup_el_13 = erlps__add_binding__3 [name_0, term_1, bs_2]
        in ErlangTuple [ErlangAtom "match", tup_el_13]
      something_else -> EXC.case_clause something_else
erlps__match1__5 [(ErlangTuple [(ErlangAtom "match"), _, pat1_0,
                                pat2_1]),
                  term_2, bs0_3, bbs_4, ef_5]
  =
  let
    matchExpr_12 =
      erlps__match1__5 [pat1_0, term_2, bs0_3, bbs_4, ef_5]
  in
    case matchExpr_12 of
      (ErlangTuple [(ErlangAtom "match"), bs1_11]) ->
        erlps__match1__5 [pat2_1, term_2, bs1_11, bbs_4, ef_5]
      _ -> EXC.badmatch matchExpr_12
erlps__match1__5 [(ErlangTuple [(ErlangAtom "string"), _, s0_0]),
                  s_1, bs_2, _bbs_3, _ef_4]
  =
  case s_1 of
    s0_6 | s0_6 == s0_0 -> ErlangTuple [ErlangAtom "match", bs_2]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "nil"), _]), nil_0,
                  bs_1, _bbs_2, _ef_3]
  =
  case nil_0 of
    (ErlangEmptyList) -> ErlangTuple [ErlangAtom "match", bs_1]
    _ -> BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "cons"), _, h_0,
                                t_1]),
                  (ErlangCons h1_2 t1_3), bs0_4, bbs_5, ef_6]
  =
  let
    matchExpr_13 = erlps__match1__5 [h_0, h1_2, bs0_4, bbs_5, ef_6]
  in
    case matchExpr_13 of
      (ErlangTuple [(ErlangAtom "match"), bs_12]) ->
        erlps__match1__5 [t_1, t1_3, bs_12, bbs_5, ef_6]
      _ -> EXC.badmatch matchExpr_13
erlps__match1__5 [(ErlangTuple [(ErlangAtom "cons"), _, _, _]),
                  _, _bs_0, _bbs_1, _ef_2]
  =
  BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "tuple"), _,
                                elts_0]),
                  tuple_1, bs_2, bbs_3, ef_4]
  | (ErlangAtom "true") ==
      (falsifyErrors
         (\ _ ->
            let    lop_11 = BIF.erlang__length__1 [elts_0]
            in let rop_13 = BIF.erlang__tuple_size__1 [tuple_1]
            in BIF.erlang__op_exactEq [lop_11, rop_13])) =
  let arg_7 = toErl 1
  in
    erlps__match_tuple__6 [elts_0, tuple_1, arg_7, bs_2, bbs_3, ef_4]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "tuple"), _, _]), _,
                  _bs_0, _bbs_1, _ef_2]
  =
  BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "map"), _, fs_0]),
                  map_2@(ErlangMap map_1), bs_3, bbs_4, ef_5]
  =
  erlps__match_map__5 [fs_0, map_2, bs_3, bbs_4, ef_5]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "map"), _, _]), _,
                  _bs_0, _bbs_1, _ef_2]
  =
  BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                  b_2@(ErlangBinary binSeg_1), bs0_3, bbs_4, ef_5]
  =
  let   
    evalfun_23 =
      ErlangFun 2
        (let
           lambda_6 [e_9, bs_10] =
             let   
               case_11 =
                 BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_expr__1"
                   [e_9]
             in let
               _ =
                 case case_11 of
                   (ErlangAtom "true") -> ErlangAtom "ok"
                   (ErlangAtom "false") ->
                     BIF.erlang__throw__1 [ErlangAtom "invalid"]
                   something_else -> EXC.case_clause something_else
             in
               EXC.tryCatch
                 (\ _ ->
                    erlps__expr__5
                      [e_9, bs_10, ErlangAtom "none", ErlangAtom "none",
                       ErlangAtom "none"])
                 (\ ex_20 ->
                    case ex_20 of
                      (ErlangTuple [(ErlangAtom "error"),
                                    (ErlangTuple [(ErlangAtom "unbound"), _]),
                                    _]) ->
                        BIF.erlang__throw__1 [ErlangAtom "invalid"]
                      ex_21 -> EXC.raise ex_21)
           lambda_6 [arg_7, arg_8] = EXC.function_clause unit
           lambda_6 args = EXC.badarity (ErlangFun 2 lambda_6) args
         in lambda_6)
  in let
    errorfun_37 =
      ErlangFun 3
        (let
           lambda_24 [a_28, r_29, s_30] =
             erlps__apply_error__6
               [r_29, s_30, a_28, bs0_3, ef_5, ErlangAtom "none"]
           lambda_24 [arg_25, arg_26, arg_27] = EXC.function_clause unit
           lambda_24 args = EXC.badarity (ErlangFun 3 lambda_24) args
         in lambda_24)
  in let arg_42 = erlps__match_fun__2 [bbs_4, ef_5]
  in
    BIF.do_remote_fun_call "Eval.Bits" "erlps__match_bits__7"
      [fs_0, b_2, bs0_3, bbs_4, arg_42, evalfun_23, errorfun_37]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "bin"), _, _]), _,
                  _bs_0, _bbs_1, _ef_2]
  =
  BIF.erlang__throw__1 [ErlangAtom "nomatch"]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "nil"), _]), r_0]),
                  term_1, bs_2, bbs_3, ef_4]
  =
  erlps__match1__5 [r_0, term_1, bs_2, bbs_3, ef_4]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "cons"), ai_0,
                                              (ErlangTuple [(ErlangAtom "integer"),
                                                            a2_1, i_2]),
                                              t_3]),
                                r_4]),
                  term_5, bs_6, bbs_7, ef_8]
  =
  let    tup_el_12 = ErlangTuple [ErlangAtom "integer", a2_1, i_2]
  in let
    tup_el_16 =
      ErlangTuple [ErlangAtom "op", ai_0, ErlangAtom "++", t_3, r_4]
  in let
    arg_9 =
      ErlangTuple [ErlangAtom "cons", ai_0, tup_el_12, tup_el_16]
  in erlps__match1__5 [arg_9, term_5, bs_6, bbs_7, ef_8]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "cons"), ai_0,
                                              (ErlangTuple [(ErlangAtom "char"),
                                                            a2_1, c_2]),
                                              t_3]),
                                r_4]),
                  term_5, bs_6, bbs_7, ef_8]
  =
  let    tup_el_12 = ErlangTuple [ErlangAtom "char", a2_1, c_2]
  in let
    tup_el_16 =
      ErlangTuple [ErlangAtom "op", ai_0, ErlangAtom "++", t_3, r_4]
  in let
    arg_9 =
      ErlangTuple [ErlangAtom "cons", ai_0, tup_el_12, tup_el_16]
  in erlps__match1__5 [arg_9, term_5, bs_6, bbs_7, ef_8]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), _,
                                (ErlangAtom "++"),
                                (ErlangTuple [(ErlangAtom "string"), ai_0,
                                              l_1]),
                                r_2]),
                  term_3, bs_4, bbs_5, ef_6]
  =
  let arg_7 = erlps__string_to_conses__3 [l_1, ai_0, r_2]
  in erlps__match1__5 [arg_7, term_3, bs_4, bbs_5, ef_6]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), anno_0, op_1,
                                a_2]),
                  term_3, bs_4, bbs_5, ef_6]
  =
  let    arg_8 = ErlangTuple [ErlangAtom "op", anno_0, op_1, a_2]
  in let case_7 = erlps__partial_eval__1 [arg_8]
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "op"), anno_13, op_14,
                    a_15]) | anno_13 == anno_0
                           , op_14 == op_1
                           , a_15 == a_2 ->
        BIF.erlang__throw__1 [ErlangAtom "invalid"]
      x_17 -> erlps__match1__5 [x_17, term_3, bs_4, bbs_5, ef_6]
erlps__match1__5 [(ErlangTuple [(ErlangAtom "op"), anno_0, op_1,
                                l_2, r_3]),
                  term_4, bs_5, bbs_6, ef_7]
  =
  let   
    arg_9 = ErlangTuple [ErlangAtom "op", anno_0, op_1, l_2, r_3]
  in let case_8 = erlps__partial_eval__1 [arg_9]
  in
    case case_8 of
      (ErlangTuple [(ErlangAtom "op"), anno_15, op_16, l_17,
                    r_18]) | anno_15 == anno_0
                           , op_16 == op_1
                           , l_17 == l_2
                           , r_18 == r_3 ->
        BIF.erlang__throw__1 [ErlangAtom "invalid"]
      x_20 -> erlps__match1__5 [x_20, term_4, bs_5, bbs_6, ef_7]
erlps__match1__5 [_, _, _bs_0, _bbs_1, _ef_2] =
  BIF.erlang__throw__1 [ErlangAtom "invalid"]
erlps__match1__5 [arg_4, arg_5, arg_6, arg_7, arg_8] =
  EXC.function_clause unit
erlps__match1__5 args =
  EXC.badarity (ErlangFun 5 erlps__match1__5) args

erlps__match_fun__2 :: ErlangFun
erlps__match_fun__2 [bbs_0, ef_1] =
  ErlangFun 2
    (let
       lambda_2 [(ErlangAtom "match"), (ErlangTuple [l_5, r_6, bs_7])] =
         erlps__match1__5 [l_5, r_6, bs_7, bbs_0, ef_1]
       lambda_2 [(ErlangAtom "binding"), (ErlangTuple [name_13, bs_14])]
         =
         erlps__binding__2 [name_13, bs_14]
       lambda_2 [(ErlangAtom "add_binding"),
                 (ErlangTuple [name_17, val_18, bs_19])]
         =
         erlps__add_binding__3 [name_17, val_18, bs_19]
       lambda_2 [arg_3, arg_4] = EXC.function_clause unit
       lambda_2 args = EXC.badarity (ErlangFun 2 lambda_2) args
     in lambda_2)
erlps__match_fun__2 [arg_23, arg_24] = EXC.function_clause unit
erlps__match_fun__2 args =
  EXC.badarity (ErlangFun 2 erlps__match_fun__2) args

erlps__match_tuple__6 :: ErlangFun
erlps__match_tuple__6 [(ErlangCons e_0 es_1), tuple_2, i_3,
                       bs0_4, bbs_5, ef_6]
  =
  let    arg_8 = BIF.erlang__element__2 [i_3, tuple_2]
  in let
    matchExpr_15 = erlps__match1__5 [e_0, arg_8, bs0_4, bbs_5, ef_6]
  in
    case matchExpr_15 of
      (ErlangTuple [(ErlangAtom "match"), bs_14]) ->
        let    rop_20 = toErl 1
        in let arg_18 = BIF.erlang__op_plus [i_3, rop_20]
        in
          erlps__match_tuple__6 [es_1, tuple_2, arg_18, bs_14, bbs_5, ef_6]
      _ -> EXC.badmatch matchExpr_15
erlps__match_tuple__6 [(ErlangEmptyList), _, _, bs_0, _bbs_1,
                       _ef_2]
  =
  ErlangTuple [ErlangAtom "match", bs_0]
erlps__match_tuple__6 [arg_5, arg_6, arg_7, arg_8, arg_9, arg_10]
  =
  EXC.function_clause unit
erlps__match_tuple__6 args =
  EXC.badarity (ErlangFun 6 erlps__match_tuple__6) args

erlps__match_map__5 :: ErlangFun
erlps__match_map__5 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_exact"),
                                               _, k_0, v_1]) fs_2),
                     map_3, bs0_4, bbs_5, ef_6]
  =
  let   
    vm_17 =
      EXC.tryCatch
        (\ _ ->
           let matchExpr_10 = erlps__expr__2 [k_0, bbs_5]
           in
             case matchExpr_10 of
               (ErlangTuple [(ErlangAtom "value"), ke_9, _]) ->
                 BIF.maps__get__2 [ke_9, map_3]
               _ -> EXC.badmatch matchExpr_10)
        (\ ex_14 ->
           case ex_14 of
             (ErlangTuple [(ErlangAtom "error"), _, _]) ->
               BIF.erlang__throw__1 [ErlangAtom "nomatch"]
             ex_15 -> EXC.raise ex_15)
  in let
    matchExpr_24 = erlps__match1__5 [v_1, vm_17, bs0_4, bbs_5, ef_6]
  in
    case matchExpr_24 of
      (ErlangTuple [(ErlangAtom "match"), bs_23]) ->
        erlps__match_map__5 [fs_2, map_3, bs_23, bbs_5, ef_6]
      _ -> EXC.badmatch matchExpr_24
erlps__match_map__5 [(ErlangEmptyList), _, bs_0, _, _] =
  ErlangTuple [ErlangAtom "match", bs_0]
erlps__match_map__5 [arg_3, arg_4, arg_5, arg_6, arg_7] =
  EXC.function_clause unit
erlps__match_map__5 args =
  EXC.badarity (ErlangFun 5 erlps__match_map__5) args

erlps__match_list__6 :: ErlangFun
erlps__match_list__6 [(ErlangCons p_0 ps_1),
                      (ErlangCons t_2 ts_3), anno_4, bs0_5, bbs_6, ef_7]
  =
  let
    case_8 = erlps__match__6 [p_0, t_2, anno_4, bs0_5, bbs_6, ef_7]
  in
    case case_8 of
      (ErlangTuple [(ErlangAtom "match"), bs1_15]) ->
        erlps__match_list__6 [ps_1, ts_3, anno_4, bs1_15, bbs_6, ef_7]
      (ErlangAtom "nomatch") -> ErlangAtom "nomatch"
      something_else -> EXC.case_clause something_else
erlps__match_list__6 [(ErlangEmptyList), (ErlangEmptyList),
                      _anno_0, bs_1, _bbs_2, _ef_3]
  =
  ErlangTuple [ErlangAtom "match", bs_1]
erlps__match_list__6 [_, _, _anno_0, _bs_1, _bbs_2, _ef_3] =
  ErlangAtom "nomatch"
erlps__match_list__6 [arg_4, arg_5, arg_6, arg_7, arg_8, arg_9] =
  EXC.function_clause unit
erlps__match_list__6 args =
  EXC.badarity (ErlangFun 6 erlps__match_list__6) args

erlps__new_bindings__0 :: ErlangFun
erlps__new_bindings__0 [] =
  BIF.do_remote_fun_call "Orddict" "erlps__new__0" []
erlps__new_bindings__0 args =
  EXC.badarity (ErlangFun 0 erlps__new_bindings__0) args

erlps__bindings__1 :: ErlangFun
erlps__bindings__1 [bs_0] | isEMap bs_0 =
  BIF.maps__to_list__1 [bs_0]
erlps__bindings__1 [bs_0] | isEList bs_0 =
  BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs_0]
erlps__bindings__1 [arg_2] = EXC.function_clause unit
erlps__bindings__1 args =
  EXC.badarity (ErlangFun 1 erlps__bindings__1) args

erlps__binding__2 :: ErlangFun
erlps__binding__2 [name_0, bs_1] | isEMap bs_1 =
  let case_2 = BIF.maps__find__2 [name_0, bs_1]
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), val_5]) ->
        ErlangTuple [ErlangAtom "value", val_5]
      (ErlangAtom "error") -> ErlangAtom "unbound"
      something_else -> EXC.case_clause something_else
erlps__binding__2 [name_0, bs_1] | isEList bs_1 =
  let
    case_2 =
      BIF.do_remote_fun_call "Orddict" "erlps__find__2" [name_0, bs_1]
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), val_5]) ->
        ErlangTuple [ErlangAtom "value", val_5]
      (ErlangAtom "error") -> ErlangAtom "unbound"
      something_else -> EXC.case_clause something_else
erlps__binding__2 [arg_8, arg_9] = EXC.function_clause unit
erlps__binding__2 args =
  EXC.badarity (ErlangFun 2 erlps__binding__2) args

erlps__add_binding__3 :: ErlangFun
erlps__add_binding__3 [name_0, val_1, bs_2] | isEMap bs_2 =
  BIF.maps__put__3 [name_0, val_1, bs_2]
erlps__add_binding__3 [name_0, val_1, bs_2] | isEList bs_2 =
  BIF.do_remote_fun_call "Orddict" "erlps__store__3"
    [name_0, val_1, bs_2]
erlps__add_binding__3 [arg_6, arg_7, arg_8] =
  EXC.function_clause unit
erlps__add_binding__3 args =
  EXC.badarity (ErlangFun 3 erlps__add_binding__3) args

erlps__del_binding__2 :: ErlangFun
erlps__del_binding__2 [name_0, bs_1] | isEMap bs_1 =
  BIF.maps__remove__2 [name_0, bs_1]
erlps__del_binding__2 [name_0, bs_1] | isEList bs_1 =
  BIF.do_remote_fun_call "Orddict" "erlps__erase__2" [name_0, bs_1]
erlps__del_binding__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__del_binding__2 args =
  EXC.badarity (ErlangFun 2 erlps__del_binding__2) args

erlps__add_bindings__2 :: ErlangFun
erlps__add_bindings__2 [bs1_0, bs2_1]
  | (isEMap bs1_0) && (isEMap bs2_1) =
  BIF.maps__merge__2 [bs2_1, bs1_0]
erlps__add_bindings__2 [bs1_0, bs2_1] =
  let   
    arg_2 =
      ErlangFun 2
        (let
           lambda_3 [(ErlangTuple [name_6, val_7]), bs_8] =
             BIF.do_remote_fun_call "Orddict" "erlps__store__3"
               [name_6, val_7, bs_8]
           lambda_3 [arg_4, arg_5] = EXC.function_clause unit
           lambda_3 args = EXC.badarity (ErlangFun 2 lambda_3) args
         in lambda_3)
  in let
    arg_13 =
      BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs1_0]
  in
    BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
      [arg_2, bs2_1, arg_13]
erlps__add_bindings__2 [arg_15, arg_16] =
  EXC.function_clause unit
erlps__add_bindings__2 args =
  EXC.badarity (ErlangFun 2 erlps__add_bindings__2) args

erlps__merge_bindings__4 :: ErlangFun
erlps__merge_bindings__4 [bs1_0, bs2_1, anno_2, ef_3]
  | (isEMap bs1_0) && (isEMap bs2_1) =
  let
    arg_4 =
      ErlangFun 3
        (let
           lambda_5 [_k_9, v_10, v_11] | v_11 == v_10 = v_10
           lambda_5 [_k_12, _, v_13] =
             let    arg_14 = ErlangTuple [ErlangAtom "badmatch", v_13]
             in let arg_18 = toErl 2
             in let arg_20 = BIF.erlang__self__0 []
             in let
               arg_19 =
                 BIF.erlang__process_info__2
                   [arg_20, ErlangAtom "current_stacktrace"]
             in let arg_17 = BIF.erlang__element__2 [arg_18, arg_19]
             in
               erlps__apply_error__6
                 [arg_14, arg_17, anno_2, bs1_0, ef_3, ErlangAtom "none"]
           lambda_5 [arg_6, arg_7, arg_8] = EXC.function_clause unit
           lambda_5 args = EXC.badarity (ErlangFun 3 lambda_5) args
         in lambda_5)
  in
    BIF.do_remote_fun_call "Maps" "erlps__merge_with__3"
      [arg_4, bs2_1, bs1_0]
erlps__merge_bindings__4 [bs1_0, bs2_1, anno_2, ef_3] =
  let   
    arg_4 =
      ErlangFun 2
        (let
           lambda_5 [(ErlangTuple [name_8, val_9]), bs_10] =
             let
               case_11 =
                 BIF.do_remote_fun_call "Orddict" "erlps__find__2"
                   [name_8, bs_10]
             in
               case case_11 of
                 (ErlangTuple [(ErlangAtom "ok"), val_14]) | val_14 == val_9 ->
                   bs_10
                 (ErlangTuple [(ErlangAtom "ok"), v1_15]) ->
                   let    arg_16 = ErlangTuple [ErlangAtom "badmatch", v1_15]
                   in let arg_20 = toErl 2
                   in let arg_22 = BIF.erlang__self__0 []
                   in let
                     arg_21 =
                       BIF.erlang__process_info__2
                         [arg_22, ErlangAtom "current_stacktrace"]
                   in let arg_19 = BIF.erlang__element__2 [arg_20, arg_21]
                   in
                     erlps__apply_error__6
                       [arg_16, arg_19, anno_2, bs1_0, ef_3, ErlangAtom "none"]
                 (ErlangAtom "error") ->
                   BIF.do_remote_fun_call "Orddict" "erlps__store__3"
                     [name_8, val_9, bs_10]
                 something_else -> EXC.case_clause something_else
           lambda_5 [arg_6, arg_7] = EXC.function_clause unit
           lambda_5 args = EXC.badarity (ErlangFun 2 lambda_5) args
         in lambda_5)
  in let
    arg_32 =
      BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [bs1_0]
  in
    BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
      [arg_4, bs2_1, arg_32]
erlps__merge_bindings__4 [arg_34, arg_35, arg_36, arg_37] =
  EXC.function_clause unit
erlps__merge_bindings__4 args =
  EXC.badarity (ErlangFun 4 erlps__merge_bindings__4) args

erlps__new_bindings__1 :: ErlangFun
erlps__new_bindings__1 [bs_0] | isEMap bs_0 =
  BIF.do_remote_fun_call "Maps" "erlps__new__0" []
erlps__new_bindings__1 [bs_0] | isEList bs_0 =
  BIF.do_remote_fun_call "Orddict" "erlps__new__0" []
erlps__new_bindings__1 [arg_1] = EXC.function_clause unit
erlps__new_bindings__1 args =
  EXC.badarity (ErlangFun 1 erlps__new_bindings__1) args

erlps__filter_bindings__2 :: ErlangFun
erlps__filter_bindings__2 [fun_0, bs_1] | isEMap bs_1 =
  BIF.do_remote_fun_call "Maps" "erlps__filter__2" [fun_0, bs_1]
erlps__filter_bindings__2 [fun_0, bs_1] | isEList bs_1 =
  BIF.do_remote_fun_call "Orddict" "erlps__filter__2" [fun_0, bs_1]
erlps__filter_bindings__2 [arg_4, arg_5] =
  EXC.function_clause unit
erlps__filter_bindings__2 args =
  EXC.badarity (ErlangFun 2 erlps__filter_bindings__2) args

erlps__to_terms__1 :: ErlangFun
erlps__to_terms__1 [abstrs_0] =
  flmap
    (\ lc_3 ->
       let lcRet_4 = erlps__to_term__1 [lc_3]
       in ErlangCons lcRet_4 ErlangEmptyList)
    abstrs_0
erlps__to_terms__1 [arg_6] = EXC.function_clause unit
erlps__to_terms__1 args =
  EXC.badarity (ErlangFun 1 erlps__to_terms__1) args

erlps__to_term__1 :: ErlangFun
erlps__to_term__1 [abstr_0] =
  BIF.do_remote_fun_call "Erl.Parse" "erlps__anno_to_term__1"
    [abstr_0]
erlps__to_term__1 [arg_2] = EXC.function_clause unit
erlps__to_term__1 args =
  EXC.badarity (ErlangFun 1 erlps__to_term__1) args

erlps__extended_parse_exprs__1 :: ErlangFun
erlps__extended_parse_exprs__1 [tokens_0] =
  let    ts_2 = erlps__tokens_fixup__1 [tokens_0]
  in let
    case_3 =
      BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1" [ts_2]
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), exprs0_5]) ->
        let    exprs_7 = erlps__expr_fixup__1 [exprs0_5]
        in let tup_el_9 = erlps__reset_expr_anno__1 [exprs_7]
        in ErlangTuple [ErlangAtom "ok", tup_el_9]
      _errorinfo_11 ->
        let arg_12 = erlps__reset_token_anno__1 [ts_2]
        in
          BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
            [arg_12]
erlps__extended_parse_exprs__1 [arg_14] =
  EXC.function_clause unit
erlps__extended_parse_exprs__1 args =
  EXC.badarity (ErlangFun 1 erlps__extended_parse_exprs__1) args

erlps__tokens_fixup__1 :: ErlangFun
erlps__tokens_fixup__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__tokens_fixup__1 [ts0_2@(ErlangCons t_0 ts_1)] =
  EXC.tryOfCatch (\ _ -> erlps__token_fixup__1 [ts0_2])
    (\ of_4 ->
       case of_4 of
         (ErlangTuple [newt_7, newts_8]) ->
           let tail_10 = erlps__tokens_fixup__1 [newts_8]
           in ErlangCons newt_7 tail_10
         something_else -> EXC.try_clause something_else)
    (\ ex_5 ->
       case ex_5 of
         (ErlangTuple [_, _, _]) ->
           let tail_13 = erlps__tokens_fixup__1 [ts_1]
           in ErlangCons t_0 tail_13
         ex_6 -> EXC.raise ex_6)
erlps__tokens_fixup__1 [arg_15] = EXC.function_clause unit
erlps__tokens_fixup__1 args =
  EXC.badarity (ErlangFun 1 erlps__tokens_fixup__1) args

erlps__token_fixup__1 :: ErlangFun
erlps__token_fixup__1 [ts_0] =
  let matchExpr_5 = erlps__unscannable__1 [ts_0]
  in
    case matchExpr_5 of
      (ErlangTuple [annol_2, newts_3, fixuptag_4]) ->
        let   
          arg_6 =
            flmap
              (\ lc_9 ->
                 let
                   lcRet_10 =
                     BIF.do_remote_fun_call "Erl.Anno" "erlps__text__1" [lc_9]
                 in ErlangCons lcRet_10 ErlangEmptyList)
              annol_2
        in let
          string_12 =
            BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_6]
        in let
          matchExpr_15 = erlps__validate_tag__2 [fixuptag_4, string_12]
        in let arg_16 = erlps__fixup_text__1 [fixuptag_4]
        in let arg_18 = BIF.erlang__hd__1 [annol_2]
        in let
          newanno_20 =
            BIF.do_remote_fun_call "Erl.Anno" "erlps__set_text__2"
              [arg_16, arg_18]
        in let
          tup_el_21 =
            ErlangTuple [ErlangAtom "string", newanno_20, string_12]
        in ErlangTuple [tup_el_21, newts_3]
      _ -> EXC.badmatch matchExpr_5
erlps__token_fixup__1 [arg_26] = EXC.function_clause unit
erlps__token_fixup__1 args =
  EXC.badarity (ErlangFun 1 erlps__token_fixup__1) args

erlps__unscannable__1 :: ErlangFun
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Fun")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                               a7_6]) ts_7)))))))]
  =
  ErlangTuple
    [ErlangCons a1_0
       (ErlangCons a2_1
          (ErlangCons a3_2
             (ErlangCons a4_3
                (ErlangCons a5_4
                   (ErlangCons a6_5 (ErlangCons a7_6 ErlangEmptyList)))))),
     ts_7, ErlangAtom "function"]
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Fun")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                                                                               a7_6]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                                                                                                                                                                a8_7,
                                                                                                                                                                                                                                                                                                _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                                                                                              a9_8]) ts_9)))))))))]
  =
  ErlangTuple
    [ErlangCons a1_0
       (ErlangCons a2_1
          (ErlangCons a3_2
             (ErlangCons a4_3
                (ErlangCons a5_4
                   (ErlangCons a6_5
                      (ErlangCons a7_6
                         (ErlangCons a8_7
                            (ErlangCons a9_8 ErlangEmptyList)))))))),
     ts_9, ErlangAtom "function"]
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                  a2_1,
                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                 a4_3,
                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                               a5_4]) ts_5)))))]
  =
  ErlangTuple
    [ErlangCons a1_0
       (ErlangCons a2_1
          (ErlangCons a3_2
             (ErlangCons a4_3 (ErlangCons a5_4 ErlangEmptyList)))),
     ts_5, ErlangAtom "pid"]
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Port")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                  a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                   a4_3,
                                                                                                                                                                   _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                 a5_4]) ts_5)))))]
  =
  ErlangTuple
    [ErlangCons a1_0
       (ErlangCons a2_1
          (ErlangCons a3_2
             (ErlangCons a4_3 (ErlangCons a5_4 ErlangEmptyList)))),
     ts_5, ErlangAtom "port"]
erlps__unscannable__1 [(ErlangCons (ErlangTuple [(ErlangAtom "#"),
                                                 a1_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                  a2_1,
                                                                                  (ErlangAtom "Ref")]) (ErlangCons (ErlangTuple [(ErlangAtom "<"),
                                                                                                                                 a3_2]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                  a4_3,
                                                                                                                                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "."),
                                                                                                                                                                                                a5_4]) (ErlangCons (ErlangTuple [(ErlangAtom "float"),
                                                                                                                                                                                                                                 a6_5,
                                                                                                                                                                                                                                 _]) (ErlangCons (ErlangTuple [(ErlangAtom ">"),
                                                                                                                                                                                                                                                               a7_6]) ts_7)))))))]
  =
  ErlangTuple
    [ErlangCons a1_0
       (ErlangCons a2_1
          (ErlangCons a3_2
             (ErlangCons a4_3
                (ErlangCons a5_4
                   (ErlangCons a6_5 (ErlangCons a7_6 ErlangEmptyList)))))),
     ts_7, ErlangAtom "reference"]
erlps__unscannable__1 [arg_25] = EXC.function_clause unit
erlps__unscannable__1 args =
  EXC.badarity (ErlangFun 1 erlps__unscannable__1) args

erlps__expr_fixup__1 :: ErlangFun
erlps__expr_fixup__1 [t_2@(ErlangTuple [(ErlangAtom "string"),
                                        a_0, s_1])]
  =
  EXC.tryOfCatch (\ _ -> erlps__string_fixup__3 [a_0, s_1, t_2])
    (\ of_6 -> of_6)
    (\ ex_7 ->
       case ex_7 of
         (ErlangTuple [_, _, _]) -> t_2
         ex_8 -> EXC.raise ex_8)
erlps__expr_fixup__1 [tuple_0] | isETuple tuple_0 =
  let    arg_1 = BIF.erlang__tuple_to_list__1 [tuple_0]
  in let l_3 = erlps__expr_fixup__1 [arg_1]
  in BIF.erlang__list_to_tuple__1 [l_3]
erlps__expr_fixup__1 [(ErlangCons e0_0 es0_1)] =
  let    e_3 = erlps__expr_fixup__1 [e0_0]
  in let es_5 = erlps__expr_fixup__1 [es0_1]
  in ErlangCons e_3 es_5
erlps__expr_fixup__1 [t_0] = t_0
erlps__expr_fixup__1 [arg_1] = EXC.function_clause unit
erlps__expr_fixup__1 args =
  EXC.badarity (ErlangFun 1 erlps__expr_fixup__1) args

erlps__string_fixup__3 :: ErlangFun
erlps__string_fixup__3 [anno_0, string_1, token_2] =
  let   
    text_4 =
      BIF.do_remote_fun_call "Erl.Anno" "erlps__text__1" [anno_0]
  in let fixuptag_7 = erlps__fixup_tag__2 [text_4, string_1]
  in erlps__fixup_ast__4 [fixuptag_7, anno_0, string_1, token_2]
erlps__string_fixup__3 [arg_12, arg_13, arg_14] =
  EXC.function_clause unit
erlps__string_fixup__3 args =
  EXC.badarity (ErlangFun 3 erlps__string_fixup__3) args

erlps__reset_token_anno__1 :: ErlangFun
erlps__reset_token_anno__1 [tokens_0] =
  flmap
    (\ lc_3 ->
       let    arg_5 = toErl 2
       in let arg_9 = toErl 2
       in let arg_8 = BIF.erlang__element__2 [arg_9, lc_3]
       in let fun_11 = erlps__reset_anno__0 []
       in let
         arg_7 =
           BIF.erlang__apply__2 [fun_11, ErlangCons arg_8 ErlangEmptyList]
       in let lcRet_4 = BIF.erlang__setelement__3 [arg_5, lc_3, arg_7]
       in ErlangCons lcRet_4 ErlangEmptyList)
    tokens_0
erlps__reset_token_anno__1 [arg_12] = EXC.function_clause unit
erlps__reset_token_anno__1 args =
  EXC.badarity (ErlangFun 1 erlps__reset_token_anno__1) args

erlps__reset_expr_anno__1 :: ErlangFun
erlps__reset_expr_anno__1 [exprs_0] =
  flmap
    (\ lc_3 ->
       let    arg_5 = erlps__reset_anno__0 []
       in let
         lcRet_4 =
           BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
             [arg_5, lc_3]
       in ErlangCons lcRet_4 ErlangEmptyList)
    exprs_0
erlps__reset_expr_anno__1 [arg_7] = EXC.function_clause unit
erlps__reset_expr_anno__1 args =
  EXC.badarity (ErlangFun 1 erlps__reset_expr_anno__1) args

erlps__reset_anno__0 :: ErlangFun
erlps__reset_anno__0 [] =
  ErlangFun 1
    (let
       lambda_0 [a_2] =
         let
           arg_3 =
             BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [a_2]
         in BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [arg_3]
       lambda_0 [arg_1] = EXC.function_clause unit
       lambda_0 args = EXC.badarity (ErlangFun 1 lambda_0) args
     in lambda_0)
erlps__reset_anno__0 args =
  EXC.badarity (ErlangFun 0 erlps__reset_anno__0) args

erlps__fixup_ast__4 :: ErlangFun
erlps__fixup_ast__4 [(ErlangAtom "pid"), a_0, _s_1, t_2] =
  let   
    tup_el_8 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "erlang"]
  in let
    tup_el_12 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "list_to_pid"]
  in let
    tup_el_5 =
      ErlangTuple [ErlangAtom "remote", a_0, tup_el_8, tup_el_12]
  in
    ErlangTuple
      [ErlangAtom "call", a_0, tup_el_5,
       ErlangCons t_2 ErlangEmptyList]
erlps__fixup_ast__4 [(ErlangAtom "port"), a_0, _s_1, t_2] =
  let   
    tup_el_8 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "erlang"]
  in let
    tup_el_12 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "list_to_port"]
  in let
    tup_el_5 =
      ErlangTuple [ErlangAtom "remote", a_0, tup_el_8, tup_el_12]
  in
    ErlangTuple
      [ErlangAtom "call", a_0, tup_el_5,
       ErlangCons t_2 ErlangEmptyList]
erlps__fixup_ast__4 [(ErlangAtom "reference"), a_0, _s_1, t_2] =
  let   
    tup_el_8 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "erlang"]
  in let
    tup_el_12 =
      ErlangTuple [ErlangAtom "atom", a_0, ErlangAtom "list_to_ref"]
  in let
    tup_el_5 =
      ErlangTuple [ErlangAtom "remote", a_0, tup_el_8, tup_el_12]
  in
    ErlangTuple
      [ErlangAtom "call", a_0, tup_el_5,
       ErlangCons t_2 ErlangEmptyList]
erlps__fixup_ast__4 [(ErlangAtom "function"), a_0, s_1, _t_2] =
  let matchExpr_7 = erlps__fixup_mfa__1 [s_1]
  in
    case matchExpr_7 of
      (ErlangTuple [module_4, function_5, arity_6]) ->
        let    tup_el_12 = ErlangTuple [ErlangAtom "atom", a_0, module_4]
        in let
          tup_el_16 = ErlangTuple [ErlangAtom "atom", a_0, function_5]
        in let
          tup_el_20 = ErlangTuple [ErlangAtom "integer", a_0, arity_6]
        in let
          tup_el_10 =
            ErlangTuple
              [ErlangAtom "function", tup_el_12, tup_el_16, tup_el_20]
        in ErlangTuple [ErlangAtom "fun", a_0, tup_el_10]
      _ -> EXC.badmatch matchExpr_7
erlps__fixup_ast__4 [arg_24, arg_25, arg_26, arg_27] =
  EXC.function_clause unit
erlps__fixup_ast__4 args =
  EXC.badarity (ErlangFun 4 erlps__fixup_ast__4) args

erlps__fixup_text__1 :: ErlangFun
erlps__fixup_text__1 [(ErlangAtom "function")] = toErl "function"
erlps__fixup_text__1 [(ErlangAtom "pid")] = toErl "pid"
erlps__fixup_text__1 [(ErlangAtom "port")] = toErl "port"
erlps__fixup_text__1 [(ErlangAtom "reference")] =
  toErl "reference"
erlps__fixup_text__1 [arg_0] = EXC.function_clause unit
erlps__fixup_text__1 args =
  EXC.badarity (ErlangFun 1 erlps__fixup_text__1) args

erlps__fixup_tag__2 :: ErlangFun
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangEmptyList))))))))),
                     (ErlangCons (ErlangInt num_8) _)]
  | (ErlangInt num_0) == (toErl 102)
  , (ErlangInt num_1) == (toErl 117)
  , (ErlangInt num_2) == (toErl 110)
  , (ErlangInt num_3) == (toErl 99)
  , (ErlangInt num_4) == (toErl 116)
  , (ErlangInt num_5) == (toErl 105)
  , (ErlangInt num_6) == (toErl 111)
  , (ErlangInt num_7) == (toErl 110)
  , (ErlangInt num_8) == (toErl 35) =
  ErlangAtom "function"
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))),
                     (ErlangCons (ErlangInt num_3) _)]
  | (ErlangInt num_0) == (toErl 112)
  , (ErlangInt num_1) == (toErl 105)
  , (ErlangInt num_2) == (toErl 100)
  , (ErlangInt num_3) == (toErl 60) =
  ErlangAtom "pid"
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangEmptyList))))),
                     (ErlangCons (ErlangInt num_4) _)]
  | (ErlangInt num_0) == (toErl 112)
  , (ErlangInt num_1) == (toErl 111)
  , (ErlangInt num_2) == (toErl 114)
  , (ErlangInt num_3) == (toErl 116)
  , (ErlangInt num_4) == (toErl 35) =
  ErlangAtom "port"
erlps__fixup_tag__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangCons (ErlangInt num_5) (ErlangCons (ErlangInt num_6) (ErlangCons (ErlangInt num_7) (ErlangCons (ErlangInt num_8) (ErlangEmptyList)))))))))),
                     (ErlangCons (ErlangInt num_9) _)]
  | (ErlangInt num_0) == (toErl 114)
  , (ErlangInt num_1) == (toErl 101)
  , (ErlangInt num_2) == (toErl 102)
  , (ErlangInt num_3) == (toErl 101)
  , (ErlangInt num_4) == (toErl 114)
  , (ErlangInt num_5) == (toErl 101)
  , (ErlangInt num_6) == (toErl 110)
  , (ErlangInt num_7) == (toErl 99)
  , (ErlangInt num_8) == (toErl 101)
  , (ErlangInt num_9) == (toErl 35) =
  ErlangAtom "reference"
erlps__fixup_tag__2 [arg_10, arg_11] = EXC.function_clause unit
erlps__fixup_tag__2 args =
  EXC.badarity (ErlangFun 2 erlps__fixup_tag__2) args

erlps__fixup_mfa__1 :: ErlangFun
erlps__fixup_mfa__1 [s_0] =
  let
    matchExpr_5 =
      BIF.do_remote_fun_call "Erl.Scan" "erlps__string__1" [s_0]
  in
    case matchExpr_5 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons _ (ErlangCons _ (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                        _,
                                                                                        module_2]) (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                                           _,
                                                                                                                                           function_3]) (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                                                                _,
                                                                                                                                                                                                arity_4]) _)))))))),
                    _]) ->
        ErlangTuple [module_2, function_3, arity_4]
      _ -> EXC.badmatch matchExpr_5
erlps__fixup_mfa__1 [arg_9] = EXC.function_clause unit
erlps__fixup_mfa__1 args =
  EXC.badarity (ErlangFun 1 erlps__fixup_mfa__1) args

erlps__validate_tag__2 :: ErlangFun
erlps__validate_tag__2 [(ErlangAtom "pid"), string_0] =
  BIF.erlang__list_to_pid__1 [string_0]
erlps__validate_tag__2 [(ErlangAtom "port"), string_0] =
  BIF.erlang__list_to_port__1 [string_0]
erlps__validate_tag__2 [(ErlangAtom "reference"), string_0] =
  BIF.erlang__list_to_ref__1 [string_0]
erlps__validate_tag__2 [(ErlangAtom "function"), string_0] =
  let matchExpr_5 = erlps__fixup_mfa__1 [string_0]
  in
    case matchExpr_5 of
      (ErlangTuple [module_2, function_3, arity_4]) ->
        BIF.erlang__make_fun__3 [module_2, function_3, arity_4]
      _ -> EXC.badmatch matchExpr_5
erlps__validate_tag__2 [arg_9, arg_10] = EXC.function_clause unit
erlps__validate_tag__2 args =
  EXC.badarity (ErlangFun 2 erlps__validate_tag__2) args

erlps__extended_parse_term__1 :: ErlangFun
erlps__extended_parse_term__1 [tokens_0] =
  let case_1 = erlps__extended_parse_exprs__1 [tokens_0]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons expr_3 (ErlangEmptyList))]) ->
        EXC.tryOfCatch (\ _ -> erlps__normalise__1 [expr_3])
          (\ of_5 -> ErlangTuple [ErlangAtom "ok", of_5])
          (\ ex_6 ->
             case ex_6 of
               (ErlangTuple [_, _, _]) ->
                 let    arg_12 = toErl 2
                 in let arg_11 = BIF.erlang__element__2 [arg_12, expr_3]
                 in let
                   loc_14 =
                     BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1"
                       [arg_11]
                 in let tup_el_19 = toErl "bad term"
                 in let
                   tup_el_16 =
                     ErlangTuple [loc_14, ErlangAtom "erl_eval", tup_el_19]
                 in ErlangTuple [ErlangAtom "error", tup_el_16]
               ex_7 -> EXC.raise ex_7)
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons _ (ErlangCons expr_20 _))]) ->
        let    arg_22 = toErl 2
        in let arg_21 = BIF.erlang__element__2 [arg_22, expr_20]
        in let
          loc_24 =
            BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [arg_21]
        in let tup_el_29 = toErl "bad term"
        in let
          tup_el_26 =
            ErlangTuple [loc_24, ErlangAtom "erl_eval", tup_el_29]
        in ErlangTuple [ErlangAtom "error", tup_el_26]
      error_30@(ErlangTuple [(ErlangAtom "error"), _]) -> error_30
      something_else -> EXC.case_clause something_else
erlps__extended_parse_term__1 [arg_31] = EXC.function_clause unit
erlps__extended_parse_term__1 args =
  EXC.badarity (ErlangFun 1 erlps__extended_parse_term__1) args

erlps__normalise__1 :: ErlangFun
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "char"), _, c_0])]
  =
  c_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "integer"), _,
                                   i_0])]
  =
  i_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "float"), _,
                                   f_0])]
  =
  f_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "atom"), _, a_0])]
  =
  a_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "string"), _,
                                   s_0])]
  =
  s_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "nil"), _])] =
  ErlangEmptyList
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0])]
  =
  let   
    arg_3 =
      ErlangFun 2
        (let
           lambda_4 [e_7, _] =
             let tup_el_9 = erlps__normalise__1 [e_7]
             in ErlangTuple [ErlangAtom "value", tup_el_9, ErlangEmptyList]
           lambda_4 [arg_5, arg_6] = EXC.function_clause unit
           lambda_4 args = EXC.badarity (ErlangFun 2 lambda_4) args
         in lambda_4)
  in let
    matchExpr_13 =
      BIF.do_remote_fun_call "Eval.Bits" "erlps__expr_grp__3"
        [fs_0, ErlangEmptyList, arg_3]
  in
    case matchExpr_13 of
      (ErlangTuple [(ErlangAtom "value"), b_12, _]) -> b_12
      _ -> EXC.badmatch matchExpr_13
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "cons"), _,
                                   head_0, tail_1])]
  =
  let    head_2 = erlps__normalise__1 [head_0]
  in let tail_4 = erlps__normalise__1 [tail_1]
  in ErlangCons head_2 tail_4
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "tuple"), _,
                                   args_0])]
  =
  let arg_1 = erlps__normalise_list__1 [args_0]
  in BIF.erlang__list_to_tuple__1 [arg_1]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "map"), _,
                                   pairs_0])]
  =
  let   
    arg_2 =
      ErlangFun 1
        (let
           lambda_3 [(ErlangTuple [(ErlangAtom "map_field_assoc"), _, k_5,
                                   v_6])]
             =
             let    tup_el_7 = erlps__normalise__1 [k_5]
             in let tup_el_9 = erlps__normalise__1 [v_6]
             in ErlangTuple [tup_el_7, tup_el_9]
           lambda_3 [arg_4] = EXC.function_clause unit
           lambda_3 args = EXC.badarity (ErlangFun 1 lambda_3) args
         in lambda_3)
  in let
    arg_1 =
      BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_2, pairs_0]
  in BIF.maps__from_list__1 [arg_1]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "char"), _,
                                                 i_0])])]
  =
  i_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "integer"), _,
                                                 i_0])])]
  =
  i_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "+"),
                                   (ErlangTuple [(ErlangAtom "float"), _,
                                                 f_0])])]
  =
  f_0
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "char"), _,
                                                 i_0])])]
  =
  BIF.erlang__op_neg [i_0]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "integer"), _,
                                                 i_0])])]
  =
  BIF.erlang__op_neg [i_0]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "op"), _,
                                   (ErlangAtom "-"),
                                   (ErlangTuple [(ErlangAtom "float"), _,
                                                 f_0])])]
  =
  BIF.erlang__op_neg [f_0]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "call"), _,
                                   (ErlangTuple [(ErlangAtom "remote"), _,
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _,
                                                               (ErlangAtom "erlang")]),
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, fun_0])]),
                                   (ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                             _,
                                                             s_1]) (ErlangEmptyList))])]
  | (((==) fun_0 (ErlangAtom "list_to_ref")) ||
       ((==) fun_0 (ErlangAtom "list_to_port"))) ||
      ((==) fun_0 (ErlangAtom "list_to_pid")) =
  BIF.erlang__apply__3
    [ErlangAtom "erlang", fun_0, ErlangCons s_1 ErlangEmptyList]
erlps__normalise__1 [(ErlangTuple [(ErlangAtom "fun"), _,
                                   (ErlangTuple [(ErlangAtom "function"),
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, m_0]),
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, f_1]),
                                                 (ErlangTuple [(ErlangAtom "integer"),
                                                               _, a_2])])])]
  =
  BIF.erlang__make_fun__3 [m_0, f_1, a_2]
erlps__normalise__1 [arg_6] = EXC.function_clause unit
erlps__normalise__1 args =
  EXC.badarity (ErlangFun 1 erlps__normalise__1) args

erlps__normalise_list__1 :: ErlangFun
erlps__normalise_list__1 [(ErlangCons h_0 t_1)] =
  let    head_2 = erlps__normalise__1 [h_0]
  in let tail_4 = erlps__normalise_list__1 [t_1]
  in ErlangCons head_2 tail_4
erlps__normalise_list__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__normalise_list__1 [arg_0] = EXC.function_clause unit
erlps__normalise_list__1 args =
  EXC.badarity (ErlangFun 1 erlps__normalise_list__1) args

erlps__is_constant_expr__1 :: ErlangFun
erlps__is_constant_expr__1 [expr_0] =
  let case_1 = erlps__eval_expr__1 [expr_0]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"), x_3]) | isENum x_3 ->
        ErlangAtom "true"
      _ -> ErlangAtom "false"
erlps__is_constant_expr__1 [arg_4] = EXC.function_clause unit
erlps__is_constant_expr__1 args =
  EXC.badarity (ErlangFun 1 erlps__is_constant_expr__1) args

erlps__eval_expr__1 :: ErlangFun
erlps__eval_expr__1 [expr_0] =
  let
    case_1 =
      EXC.tryCatch (\ _ -> erlps__ev_expr__1 [expr_0])
        (\ ex_4 ->
           case ex_4 of
             (ErlangTuple [(ErlangAtom "throw"), payload_6, _]) -> payload_6
             (ErlangTuple [(ErlangAtom "error"), payload_7, stack_8]) ->
               let tup_el_10 = ErlangTuple [payload_7, stack_8]
               in ErlangTuple [ErlangAtom "EXIT", tup_el_10]
             (ErlangTuple [(ErlangAtom "exit"), payload_13, _]) ->
               ErlangTuple [ErlangAtom "EXIT", payload_13]
             ex_5 -> EXC.raise ex_5)
  in
    case case_1 of
      x_16 | isEInt x_16 -> ErlangTuple [ErlangAtom "ok", x_16]
      x_19 | isEFloat x_19 -> ErlangTuple [ErlangAtom "ok", x_19]
      x_22 | isEAtom x_22 -> ErlangTuple [ErlangAtom "ok", x_22]
      (ErlangTuple [(ErlangAtom "EXIT"), reason_25]) ->
        ErlangTuple [ErlangAtom "error", reason_25]
      _ -> ErlangTuple [ErlangAtom "error", ErlangAtom "badarg"]
erlps__eval_expr__1 [arg_30] = EXC.function_clause unit
erlps__eval_expr__1 args =
  EXC.badarity (ErlangFun 1 erlps__eval_expr__1) args

erlps__partial_eval__1 :: ErlangFun
erlps__partial_eval__1 [expr_0] =
  let    anno_2 = erlps__anno__1 [expr_0]
  in let
    case_3 =
      EXC.tryCatch (\ _ -> erlps__ev_expr__1 [expr_0])
        (\ ex_6 ->
           case ex_6 of
             (ErlangTuple [(ErlangAtom "throw"), payload_8, _]) -> payload_8
             (ErlangTuple [(ErlangAtom "error"), payload_9, stack_10]) ->
               let tup_el_12 = ErlangTuple [payload_9, stack_10]
               in ErlangTuple [ErlangAtom "EXIT", tup_el_12]
             (ErlangTuple [(ErlangAtom "exit"), payload_15, _]) ->
               ErlangTuple [ErlangAtom "EXIT", payload_15]
             ex_7 -> EXC.raise ex_7)
  in
    case case_3 of
      x_18 | isEInt x_18 ->
        let arg_20 = ErlangTuple [ErlangAtom "integer", anno_2, x_18]
        in erlps__ret_expr__2 [expr_0, arg_20]
      x_24 | isEFloat x_24 ->
        let arg_26 = ErlangTuple [ErlangAtom "float", anno_2, x_24]
        in erlps__ret_expr__2 [expr_0, arg_26]
      x_30 | isEAtom x_30 ->
        let arg_32 = ErlangTuple [ErlangAtom "atom", anno_2, x_30]
        in erlps__ret_expr__2 [expr_0, arg_32]
      _ -> expr_0
erlps__partial_eval__1 [arg_36] = EXC.function_clause unit
erlps__partial_eval__1 args =
  EXC.badarity (ErlangFun 1 erlps__partial_eval__1) args

erlps__ev_expr__1 :: ErlangFun
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "op"), _, op_0, l_1,
                                 r_2])]
  =
  let    head_6 = erlps__ev_expr__1 [l_1]
  in let head_9 = erlps__ev_expr__1 [r_2]
  in
    BIF.erlang__apply__3
      [ErlangAtom "erlang", op_0,
       ErlangCons head_6 (ErlangCons head_9 ErlangEmptyList)]
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "op"), _, op_0,
                                 a_1])]
  =
  let head_5 = erlps__ev_expr__1 [a_1]
  in
    BIF.erlang__apply__3
      [ErlangAtom "erlang", op_0, ErlangCons head_5 ErlangEmptyList]
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "integer"), _,
                                 x_0])]
  =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "char"), _, x_0])] =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "float"), _, x_0])]
  =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "atom"), _, x_0])] =
  x_0
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "tuple"), _, es_0])]
  =
  let
    arg_1 =
      flmap
        (\ lc_4 ->
           let lcRet_5 = erlps__ev_expr__1 [lc_4]
           in ErlangCons lcRet_5 ErlangEmptyList)
        es_0
  in BIF.erlang__list_to_tuple__1 [arg_1]
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "nil"), _])] =
  ErlangEmptyList
erlps__ev_expr__1 [(ErlangTuple [(ErlangAtom "cons"), _, h_0,
                                 t_1])]
  =
  let    head_2 = erlps__ev_expr__1 [h_0]
  in let tail_4 = erlps__ev_expr__1 [t_1]
  in ErlangCons head_2 tail_4
erlps__ev_expr__1 [arg_6] = EXC.function_clause unit
erlps__ev_expr__1 args =
  EXC.badarity (ErlangFun 1 erlps__ev_expr__1) args

erlps__eval_str__1 :: ErlangFun
erlps__eval_str__1 [str_0] | isEList str_0 =
  let    arg_4 = toErl 0
  in let
    case_1 =
      BIF.do_remote_fun_call "Erl.Scan" "erlps__tokens__3"
        [ErlangEmptyList, str_0, arg_4]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "more"), _]) ->
        let tup_el_6 = toErl "Incomplete form (missing .<cr>)??"
        in ErlangTuple [ErlangAtom "error", tup_el_6]
      (ErlangTuple [(ErlangAtom "done"),
                    (ErlangTuple [(ErlangAtom "ok"), toks_7, _]), rest_8]) ->
        let case_9 = erlps__all_white__1 [rest_8]
        in
          case case_9 of
            (ErlangAtom "true") ->
              let
                case_11 =
                  BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
                    [toks_7]
              in
                case case_11 of
                  (ErlangTuple [(ErlangAtom "ok"), exprs_13]) ->
                    let
                      case_14 =
                        EXC.tryCatch
                          (\ _ ->
                             let arg_16 = erlps__new_bindings__0 []
                             in erlps__exprs__2 [exprs_13, arg_16])
                          (\ ex_18 ->
                             case ex_18 of
                               (ErlangTuple [(ErlangAtom "throw"), payload_20,
                                             _]) ->
                                 payload_20
                               (ErlangTuple [(ErlangAtom "error"), payload_21,
                                             stack_22]) ->
                                 let
                                   tup_el_24 =
                                     ErlangTuple [payload_21, stack_22]
                                 in ErlangTuple [ErlangAtom "EXIT", tup_el_24]
                               (ErlangTuple [(ErlangAtom "exit"), payload_27,
                                             _]) ->
                                 ErlangTuple [ErlangAtom "EXIT", payload_27]
                               ex_19 -> EXC.raise ex_19)
                    in
                      case case_14 of
                        (ErlangTuple [(ErlangAtom "value"), val_30, _]) ->
                          ErlangTuple [ErlangAtom "ok", val_30]
                        other_33 ->
                          let    arg_37 = toErl "*** eval: ~p"
                          in let
                            arg_36 =
                              BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                                [arg_37, ErlangCons other_33 ErlangEmptyList]
                          in let
                            tup_el_35 =
                              BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                                [arg_36]
                          in ErlangTuple [ErlangAtom "error", tup_el_35]
                  (ErlangTuple [(ErlangAtom "error"),
                                (ErlangTuple [_location_41, mod_42,
                                              args_43])]) ->
                    let    arg_45 = toErl "*** ~ts"
                    in let
                      head_47 =
                        BIF.erlang__apply__3
                          [mod_42, ErlangAtom "format_error",
                           ErlangCons args_43 ErlangEmptyList]
                    in let
                      arg_44 =
                        BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                          [arg_45, ErlangCons head_47 ErlangEmptyList]
                    in let
                      msg_54 =
                        BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                          [arg_44]
                    in ErlangTuple [ErlangAtom "error", msg_54]
                  something_else -> EXC.case_clause something_else
            (ErlangAtom "false") ->
              let   
                arg_60 = toErl "Non-white space found after end-of-form :~ts"
              in let
                arg_59 =
                  BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                    [arg_60, ErlangCons rest_8 ErlangEmptyList]
              in let
                tup_el_58 =
                  BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_59]
              in ErlangTuple [ErlangAtom "error", tup_el_58]
            something_else -> EXC.case_clause something_else
      something_else -> EXC.case_clause something_else
erlps__eval_str__1 [bin_0] | isEBinary bin_0 =
  let arg_1 = BIF.erlang__binary_to_list__1 [bin_0]
  in erlps__eval_str__1 [arg_1]
erlps__eval_str__1 [arg_3] = EXC.function_clause unit
erlps__eval_str__1 args =
  EXC.badarity (ErlangFun 1 erlps__eval_str__1) args

erlps__all_white__1 :: ErlangFun
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | (ErlangInt num_0) == (toErl 32) =
  erlps__all_white__1 [t_1]
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | (ErlangInt num_0) == (toErl 10) =
  erlps__all_white__1 [t_1]
erlps__all_white__1 [(ErlangCons (ErlangInt num_0) t_1)]
  | (ErlangInt num_0) == (toErl 9) =
  erlps__all_white__1 [t_1]
erlps__all_white__1 [(ErlangEmptyList)] = ErlangAtom "true"
erlps__all_white__1 [_] = ErlangAtom "false"
erlps__all_white__1 [arg_0] = EXC.function_clause unit
erlps__all_white__1 args =
  EXC.badarity (ErlangFun 1 erlps__all_white__1) args

erlps__ret_expr__2 :: ErlangFun
erlps__ret_expr__2 [_old_0, new_1] = new_1
erlps__ret_expr__2 [arg_2, arg_3] = EXC.function_clause unit
erlps__ret_expr__2 args =
  EXC.badarity (ErlangFun 2 erlps__ret_expr__2) args

erlps__anno__1 :: ErlangFun
erlps__anno__1 [expr_0] =
  let arg_1 = toErl 2
  in BIF.erlang__element__2 [arg_1, expr_0]
erlps__anno__1 [arg_3] = EXC.function_clause unit
erlps__anno__1 args =
  EXC.badarity (ErlangFun 1 erlps__anno__1) args