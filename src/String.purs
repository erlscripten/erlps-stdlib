module String(erlps__is_empty__1, erlps__length__1,
              erlps__to_graphemes__1, erlps__reverse__1, erlps__equal__2,
              erlps__equal__3, erlps__equal__4, erlps__slice__2,
              erlps__slice__3, erlps__pad__2, erlps__pad__3, erlps__pad__4,
              erlps__trim__1, erlps__trim__2, erlps__trim__3, erlps__chomp__1,
              erlps__take__2, erlps__take__3, erlps__take__4,
              erlps__lexemes__2, erlps__nth_lexeme__3, erlps__uppercase__1,
              erlps__lowercase__1, erlps__titlecase__1, erlps__casefold__1,
              erlps__prefix__2, erlps__split__2, erlps__split__3,
              erlps__replace__3, erlps__replace__4, erlps__find__2,
              erlps__find__3, erlps__next_codepoint__1,
              erlps__next_grapheme__1, erlps__to_float__1,
              erlps__to_integer__1, erlps__len__1, erlps__concat__2,
              erlps__chr__2, erlps__rchr__2, erlps__str__2, erlps__rstr__2,
              erlps__span__2, erlps__cspan__2, erlps__substr__2,
              erlps__substr__3, erlps__tokens__2, erlps__chars__2,
              erlps__chars__3, erlps__copies__2, erlps__words__1,
              erlps__words__2, erlps__strip__1, erlps__strip__2,
              erlps__strip__3, erlps__sub_word__2, erlps__sub_word__3,
              erlps__left__2, erlps__left__3, erlps__right__2, erlps__right__3,
              erlps__sub_string__2, erlps__sub_string__3, erlps__centre__2,
              erlps__centre__3, erlps__join__2, erlps__to_upper__1,
              erlps__to_lower__1, erlps__list_to_float__1,
              erlps__list_to_integer__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__list_to_float__1 :: ErlangFun
erlps__list_to_float__1 [_] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__list_to_float__1 [arg_1] = (EXC.function_clause unit)
erlps__list_to_float__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_to_integer__1 :: ErlangFun
erlps__list_to_integer__1 [_] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__list_to_integer__1 [arg_1] = (EXC.function_clause unit)
erlps__list_to_integer__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty__1 :: ErlangFun
erlps__is_empty__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__is_empty__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangAtom "true")
erlps__is_empty__1 [(ErlangCons l_0 r_1)] =
  let lop_2 = (erlps__is_empty__1 [l_0])
  in
    case lop_2 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_empty__1 [r_1])
      _ -> (EXC.badarg1 lop_2)
erlps__is_empty__1 [_] = (ErlangAtom "false")
erlps__is_empty__1 [arg_0] = (EXC.function_clause unit)
erlps__is_empty__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__length__1 :: ErlangFun
erlps__length__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok bin_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__length_b__3 [bin_6, cp1_3, (ErlangInt (DBI.fromInt 0))])
erlps__length__1 [cd_0] =
  (erlps__length_1__2 [cd_0, (ErlangInt (DBI.fromInt 0))])
erlps__length__1 [arg_3] = (EXC.function_clause unit)
erlps__length__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_graphemes__1 :: ErlangFun
erlps__to_graphemes__1 [cd0_0] =
  let
    case_1 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cd0_0])
  in
    case case_1 of
      (ErlangCons gc_3 cd_4) ->
        let tail_6 = (erlps__to_graphemes__1 [cd_4])
        in (ErlangCons gc_3 tail_6)
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_8]) ->
        let arg_9 = (ErlangTuple [(ErlangAtom "badarg"), err_8])
        in (BIF.erlang__error__1 [arg_9])
      something_else -> (EXC.case_clause something_else)
erlps__to_graphemes__1 [arg_12] = (EXC.function_clause unit)
erlps__to_graphemes__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal__2 :: ErlangFun
erlps__equal__2 [a_0, b_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_4 = (BIF.erlang__is_binary__1 [a_0])
             in
               case lop_4 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [b_1])
                 _ -> (EXC.badarg1 lop_4)))) =
  (BIF.erlang__op_exactEq [a_0, b_1])
erlps__equal__2 [a_0, b_1] = (erlps__equal_1__2 [a_0, b_1])
erlps__equal__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__equal__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal__3 :: ErlangFun
erlps__equal__3 [a_0, b_1, (ErlangAtom "false")] =
  (erlps__equal__2 [a_0, b_1])
erlps__equal__3 [a_0, b_1, (ErlangAtom "true")] =
  (erlps__equal_nocase__2 [a_0, b_1])
erlps__equal__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__equal__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal__4 :: ErlangFun
erlps__equal__4 [a_0, b_1, case_2, (ErlangAtom "none")] =
  (erlps__equal__3 [a_0, b_1, case_2])
erlps__equal__4 [a_0, b_1, (ErlangAtom "false"), norm_2] =
  (erlps__equal_norm__3 [a_0, b_1, norm_2])
erlps__equal__4 [a_0, b_1, (ErlangAtom "true"), norm_2] =
  (erlps__equal_norm_nocase__3 [a_0, b_1, norm_2])
erlps__equal__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__equal__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse__1 :: ErlangFun
erlps__reverse__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__reverse_b__3 [rest_6, cp1_3, ErlangEmptyList])
erlps__reverse__1 [cd_0] =
  (erlps__reverse_1__2 [cd_0, ErlangEmptyList])
erlps__reverse__1 [arg_3] = (EXC.function_clause unit)
erlps__reverse__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice__2 :: ErlangFun
erlps__slice__2 [cd_0, n_1]
  | ((isEInt n_1) && (weakGeq n_1 (ErlangInt (DBI.fromInt 0)))) =
  let case_2 = (erlps__slice_l0__2 [cd_0, n_1])
  in
    case case_2 of
      (ErlangEmptyList) | ((ErlangAtom "true") ==
                             (falsifyErrors
                                (\ _ -> (BIF.erlang__is_binary__1 [cd_0])))) ->
        (ErlangBinary (BIN.concat []))
      res_6 -> res_6
      something_else -> (EXC.case_clause something_else)
erlps__slice__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__slice__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice__3 :: ErlangFun
erlps__slice__3 [cd_0, n_1, length_2]
  | ((((isEInt n_1) &&
         (weakGeq n_1 (ErlangInt (DBI.fromInt 0)))) &&
        (isEInt length_2)) &&
       (weakGt length_2 (ErlangInt (DBI.fromInt 0)))) =
  let case_3 = (erlps__slice_l0__2 [cd_0, n_1])
  in
    case case_3 of
      (ErlangEmptyList) | ((ErlangAtom "true") ==
                             (falsifyErrors
                                (\ _ -> (BIF.erlang__is_binary__1 [cd_0])))) ->
        (ErlangBinary (BIN.concat []))
      l_7 -> (erlps__slice_trail__2 [l_7, length_2])
      something_else -> (EXC.case_clause something_else)
erlps__slice__3 [cd_0, n_1, (ErlangAtom "infinity")] =
  let case_2 = (erlps__slice_l0__2 [cd_0, n_1])
  in
    case case_2 of
      (ErlangEmptyList) | ((ErlangAtom "true") ==
                             (falsifyErrors
                                (\ _ -> (BIF.erlang__is_binary__1 [cd_0])))) ->
        (ErlangBinary (BIN.concat []))
      res_6 -> res_6
      something_else -> (EXC.case_clause something_else)
erlps__slice__3 [cd_0, _, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let case_2 = (BIF.erlang__is_binary__1 [cd_0])
  in
    case case_2 of
      (ErlangAtom "true") -> (ErlangBinary (BIN.concat []))
      (ErlangAtom "false") -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__slice__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__slice__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pad__2 :: ErlangFun
erlps__pad__2 [cd_0, length_1] =
  (erlps__pad__4
     [cd_0, length_1, (ErlangAtom "trailing"),
      (ErlangInt (DBI.fromInt 32))])
erlps__pad__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__pad__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pad__3 :: ErlangFun
erlps__pad__3 [cd_0, length_1, dir_2] =
  (erlps__pad__4
     [cd_0, length_1, dir_2, (ErlangInt (DBI.fromInt 32))])
erlps__pad__3 [arg_7, arg_8, arg_9] = (EXC.function_clause unit)
erlps__pad__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pad__4 :: ErlangFun
erlps__pad__4 [cd_0, length_1, (ErlangAtom "leading"), char_2]
  | (isEInt length_1) =
  let    len_4 = (BIF.erlang__length__1 [cd_0])
  in let arg_8 = (BIF.erlang__op_minus [length_1, len_4])
  in let
    arg_6 = (BIF.erlang__max__2 [(ErlangInt (DBI.fromInt 0)), arg_8])
  in let
    head_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [arg_6, char_2])
  in (ErlangCons head_5 (ErlangCons cd_0 ErlangEmptyList))
erlps__pad__4 [cd_0, length_1, (ErlangAtom "trailing"), char_2]
  | (isEInt length_1) =
  let    len_4 = (BIF.erlang__length__1 [cd_0])
  in let arg_9 = (BIF.erlang__op_minus [length_1, len_4])
  in let
    arg_7 = (BIF.erlang__max__2 [(ErlangInt (DBI.fromInt 0)), arg_9])
  in let
    tail_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [arg_7, char_2])
  in (ErlangCons cd_0 tail_6)
erlps__pad__4 [cd_0, length_1, (ErlangAtom "both"), char_2]
  | (isEInt length_1) =
  let    len_4 = (BIF.erlang__length__1 [cd_0])
  in let arg_6 = (BIF.erlang__op_minus [length_1, len_4])
  in let
    size_9 =
      (BIF.erlang__max__2 [(ErlangInt (DBI.fromInt 0)), arg_6])
  in let
    arg_10 =
      (BIF.erlang__op_div_strict [size_9, (ErlangInt (DBI.fromInt 2))])
  in let
    pre_14 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [arg_10, char_2])
  in let
    case_15 =
      (BIF.erlang__op_rem_strict [size_9, (ErlangInt (DBI.fromInt 2))])
  in let
    post_21 =
      case case_15 of
        (ErlangInt num_18) | ((ErlangInt num_18) ==
                                (ErlangInt (DBI.fromInt 1))) ->
          (ErlangCons char_2 ErlangEmptyList)
        _ -> ErlangEmptyList
        something_else -> (EXC.case_clause something_else)
  in
    (ErlangCons pre_14 (ErlangCons cd_0 (ErlangCons pre_14 post_21)))
erlps__pad__4 [arg_28, arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__pad__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim__1 :: ErlangFun
erlps__trim__1 [str_0] =
  let
    arg_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__whitespace__0" [])
  in (erlps__trim__3 [str_0, (ErlangAtom "both"), arg_3])
erlps__trim__1 [arg_4] = (EXC.function_clause unit)
erlps__trim__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim__2 :: ErlangFun
erlps__trim__2 [str_0, dir_1] =
  let
    arg_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__whitespace__0" [])
  in (erlps__trim__3 [str_0, dir_1, arg_4])
erlps__trim__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__trim__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim__3 :: ErlangFun
erlps__trim__3 [str_0, _, (ErlangEmptyList)] = str_0
erlps__trim__3 [str_0, (ErlangAtom "leading"),
                (ErlangCons sep_1 (ErlangEmptyList))]
  | ((isEList str_0) &&
       (weakLt sep_1 (ErlangInt (DBI.fromInt 256)))) =
  (erlps__trim_ls__2 [str_0, sep_1])
erlps__trim__3 [str_0, (ErlangAtom "leading"), sep_1]
  | (isEList sep_1) =
  (erlps__trim_l__2 [str_0, sep_1])
erlps__trim__3 [str_0, (ErlangAtom "trailing"),
                (ErlangCons sep_1 (ErlangEmptyList))]
  | ((isEList str_0) &&
       (weakLt sep_1 (ErlangInt (DBI.fromInt 256)))) =
  (erlps__trim_ts__2 [str_0, sep_1])
erlps__trim__3 [str_0, (ErlangAtom "trailing"), seps0_1]
  | (isEList seps0_1) =
  let seps_3 = (erlps__search_pattern__1 [seps0_1])
  in
    (erlps__trim_t__3 [str_0, (ErlangInt (DBI.fromInt 0)), seps_3])
erlps__trim__3 [str_0, (ErlangAtom "both"), sep_1]
  | (isEList sep_1) =
  let
    arg_2 = (erlps__trim__3 [str_0, (ErlangAtom "leading"), sep_1])
  in (erlps__trim__3 [arg_2, (ErlangAtom "trailing"), sep_1])
erlps__trim__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__trim__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chomp__1 :: ErlangFun
erlps__chomp__1 [str_0] =
  (erlps__trim__3
     [str_0, (ErlangAtom "trailing"),
      (ErlangCons
         (ErlangCons (ErlangInt (DBI.fromInt 13))
            (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList))
         (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList))])
erlps__chomp__1 [arg_12] = (EXC.function_clause unit)
erlps__chomp__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take__2 :: ErlangFun
erlps__take__2 [str_0, sep_1] =
  (erlps__take__4
     [str_0, sep_1, (ErlangAtom "false"), (ErlangAtom "leading")])
erlps__take__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__take__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take__3 :: ErlangFun
erlps__take__3 [str_0, sep_1, complement_2] =
  (erlps__take__4
     [str_0, sep_1, complement_2, (ErlangAtom "leading")])
erlps__take__3 [arg_7, arg_8, arg_9] = (EXC.function_clause unit)
erlps__take__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take__4 :: ErlangFun
erlps__take__4 [str_0, (ErlangEmptyList), complement_1, dir_2] =
  let    case_3 = (BIF.erlang__is_binary__1 [str_0])
  in let
    empty_5 =
      case case_3 of
        (ErlangAtom "true") -> (ErlangBinary (BIN.concat []))
        (ErlangAtom "false") -> ErlangEmptyList
        something_else -> (EXC.case_clause something_else)
  in let case_6 = (ErlangTuple [complement_1, dir_2])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "leading")]) ->
        (ErlangTuple [empty_5, str_0])
      (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "trailing")]) ->
        (ErlangTuple [str_0, empty_5])
      (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "leading")]) ->
        (ErlangTuple [str_0, empty_5])
      (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "trailing")]) ->
        (ErlangTuple [empty_5, str_0])
      something_else -> (EXC.case_clause something_else)
erlps__take__4 [str_0, sep_1, (ErlangAtom "false"),
                (ErlangAtom "leading")]
  =
  (erlps__take_l__3 [str_0, sep_1, ErlangEmptyList])
erlps__take__4 [str_0, sep0_1, (ErlangAtom "true"),
                (ErlangAtom "leading")]
  =
  let sep_3 = (erlps__search_pattern__1 [sep0_1])
  in (erlps__take_lc__3 [str_0, sep_3, ErlangEmptyList])
erlps__take__4 [str_0, sep0_1, (ErlangAtom "false"),
                (ErlangAtom "trailing")]
  =
  let sep_3 = (erlps__search_pattern__1 [sep0_1])
  in (erlps__take_t__3 [str_0, (ErlangInt (DBI.fromInt 0)), sep_3])
erlps__take__4 [str_0, sep0_1, (ErlangAtom "true"),
                (ErlangAtom "trailing")]
  =
  let sep_3 = (erlps__search_pattern__1 [sep0_1])
  in
    (erlps__take_tc__3 [str_0, (ErlangInt (DBI.fromInt 0)), sep_3])
erlps__take__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__take__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__uppercase__1 :: ErlangFun
erlps__uppercase__1 [cd_0] | (isEList cd_0) =
  (EXC.tryCatch
     (\ _ -> (erlps__uppercase_list__2 [cd_0, (ErlangAtom "false")]))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            cd_0
          ex_4 -> (EXC.raise ex_4)))
erlps__uppercase__1 [orig_7@(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (EXC.tryOfCatch
     (\ _ ->
        (erlps__uppercase_bin__3 [cp1_3, rest_6, (ErlangAtom "false")]))
     (\ of_11 ->
        case of_11 of
          list_13 ->
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_binary__1" [list_13])
          something_else -> (EXC.try_clause something_else))
     (\ ex_12 ->
        case ex_12 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            orig_7
          ex_12 -> (EXC.raise ex_12)))
erlps__uppercase__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangBinary (BIN.concat []))
erlps__uppercase__1 [bin_0] =
  let arg_1 = (ErlangTuple [(ErlangAtom "badarg"), bin_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__uppercase__1 [arg_4] = (EXC.function_clause unit)
erlps__uppercase__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lowercase__1 :: ErlangFun
erlps__lowercase__1 [cd_0] | (isEList cd_0) =
  (EXC.tryCatch
     (\ _ -> (erlps__lowercase_list__2 [cd_0, (ErlangAtom "false")]))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            cd_0
          ex_4 -> (EXC.raise ex_4)))
erlps__lowercase__1 [orig_7@(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (EXC.tryOfCatch
     (\ _ ->
        (erlps__lowercase_bin__3 [cp1_3, rest_6, (ErlangAtom "false")]))
     (\ of_11 ->
        case of_11 of
          list_13 ->
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_binary__1" [list_13])
          something_else -> (EXC.try_clause something_else))
     (\ ex_12 ->
        case ex_12 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            orig_7
          ex_12 -> (EXC.raise ex_12)))
erlps__lowercase__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangBinary (BIN.concat []))
erlps__lowercase__1 [bin_0] =
  let arg_1 = (ErlangTuple [(ErlangAtom "badarg"), bin_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__lowercase__1 [arg_4] = (EXC.function_clause unit)
erlps__lowercase__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__titlecase__1 :: ErlangFun
erlps__titlecase__1 [cd_0] | (isEList cd_0) =
  let
    case_1 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__titlecase__1"
         [cd_0])
  in
    case case_1 of
      (ErlangCons gc_3 tail_4) -> (erlps__append__2 [gc_3, tail_4])
      empty_7 -> empty_7
      something_else -> (EXC.case_clause something_else)
erlps__titlecase__1 [cd_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [cd_0])))) =
  let
    case_1 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__titlecase__1"
         [cd_0])
  in
    case case_1 of
      (ErlangCons cp_3 chars_4) | (isEInt cp_3) ->
        (ErlangBinary
           (BIN.concat
              [(BIN.from_int cp_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
               (BIN.format_bin chars_4 (BIN.packed_size chars_4) 8)]))
      (ErlangCons cps_7 chars_8) ->
        let
          bin_el_9 =
            (BIN.concat_erl
               (flmap
                  (\ lc_12 ->
                     case lc_12 of
                       cp_11 ->
                         let
                           lc_ret_13 =
                             (ErlangBinary
                                (BIN.from_int cp_11 (ErlangInt (DBI.fromInt 8))
                                   1 BIN.Big))
                         in (ErlangCons lc_ret_13 ErlangEmptyList)
                       _ -> ErlangEmptyList)
                  cps_7))
        in
          (ErlangBinary
             (BIN.concat
                [(BIN.format_bin bin_el_9 (BIN.packed_size bin_el_9) 8),
                 (BIN.format_bin chars_8 (BIN.packed_size chars_8) 8)]))
      (ErlangEmptyList) -> (ErlangBinary (BIN.concat []))
      something_else -> (EXC.case_clause something_else)
erlps__titlecase__1 [arg_17] = (EXC.function_clause unit)
erlps__titlecase__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__casefold__1 :: ErlangFun
erlps__casefold__1 [cd_0] | (isEList cd_0) =
  (EXC.tryCatch
     (\ _ -> (erlps__casefold_list__2 [cd_0, (ErlangAtom "false")]))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            cd_0
          ex_4 -> (EXC.raise ex_4)))
erlps__casefold__1 [orig_7@(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (EXC.tryOfCatch
     (\ _ ->
        (erlps__casefold_bin__3 [cp1_3, rest_6, (ErlangAtom "false")]))
     (\ of_11 ->
        case of_11 of
          list_13 ->
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_binary__1" [list_13])
          something_else -> (EXC.try_clause something_else))
     (\ ex_12 ->
        case ex_12 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "unchanged"),
                        _]) ->
            orig_7
          ex_12 -> (EXC.raise ex_12)))
erlps__casefold__1 [(ErlangBinary bin_e_0)]
  | (BIN.empty bin_e_0) =
  (ErlangBinary (BIN.concat []))
erlps__casefold__1 [bin_0] =
  let arg_1 = (ErlangTuple [(ErlangAtom "badarg"), bin_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__casefold__1 [arg_4] = (EXC.function_clause unit)
erlps__casefold__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_integer__1 :: ErlangFun
erlps__to_integer__1 [string_0] =
  (EXC.tryOfCatch
     (\ _ ->
        let arg_2 = (make_string "+-0123456789")
        in (erlps__take__2 [string_0, arg_2]))
     (\ of_3 ->
        case of_3 of
          (ErlangTuple [head_5, tail_6]) ->
            let case_7 = (erlps__is_empty__1 [head_5])
            in
              case case_7 of
                (ErlangAtom "true") ->
                  (ErlangTuple
                     [(ErlangAtom "error"), (ErlangAtom "no_integer")])
                (ErlangAtom "false") ->
                  let   
                    list_12 =
                      (BIF.do_remote_fun_call "Erlang.Unicode"
                         "erlps__characters_to_list__1" [head_5])
                  in let case_13 = (erlps__list_to_integer__1 [list_12])
                  in
                    case case_13 of
                      err_15@(ErlangTuple [(ErlangAtom "error"), _]) -> err_15
                      (ErlangTuple [int_16, rest_17]) ->
                        (erlps__to_number__5
                           [string_0, int_16, rest_17, list_12, tail_6])
                      something_else -> (EXC.case_clause something_else)
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [_, _, _]) ->
            (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
          ex_4 -> (EXC.raise ex_4)))
erlps__to_integer__1 [arg_25] = (EXC.function_clause unit)
erlps__to_integer__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_float__1 :: ErlangFun
erlps__to_float__1 [string_0] =
  (EXC.tryOfCatch
     (\ _ ->
        let arg_2 = (make_string "+-0123456789eE.,")
        in (erlps__take__2 [string_0, arg_2]))
     (\ of_3 ->
        case of_3 of
          (ErlangTuple [head_5, tail_6]) ->
            let case_7 = (erlps__is_empty__1 [head_5])
            in
              case case_7 of
                (ErlangAtom "true") ->
                  (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "no_float")])
                (ErlangAtom "false") ->
                  let   
                    list_12 =
                      (BIF.do_remote_fun_call "Erlang.Unicode"
                         "erlps__characters_to_list__1" [head_5])
                  in let case_13 = (erlps__list_to_float__1 [list_12])
                  in
                    case case_13 of
                      err_15@(ErlangTuple [(ErlangAtom "error"), _]) -> err_15
                      (ErlangTuple [float_16, rest_17]) ->
                        (erlps__to_number__5
                           [string_0, float_16, rest_17, list_12, tail_6])
                      something_else -> (EXC.case_clause something_else)
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [_, _, _]) ->
            (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
          ex_4 -> (EXC.raise ex_4)))
erlps__to_float__1 [arg_25] = (EXC.function_clause unit)
erlps__to_float__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_number__5 :: ErlangFun
erlps__to_number__5 [string_0, number_1, rest_2, list_3, _tail_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [string_0])))) =
  let    lop_5 = (BIF.erlang__length__1 [list_3])
  in let rop_7 = (BIF.erlang__length__1 [rest_2])
  in let bsz_9 = (BIF.erlang__op_minus [lop_5, rop_7])
  in
    case string_0 of
      (ErlangBinary bin_c_10) | (ErlangInt size_11) <- (bsz_9)
                              , (BIN.Ok _ bin_12) <-
                                  ((BIN.chop_bin bin_c_10 size_11 8))
                              , (ErlangInt size_13) <- ((BIN.size bin_12))
                              , (BIN.Ok cont_15 bin_14) <-
                                  ((BIN.chop_bin bin_12 size_13 8))
                              , (BIN.empty bin_14) ->
        (ErlangTuple [number_1, cont_15])
      _ -> (EXC.badmatch string_0)
erlps__to_number__5 [_, number_0, rest_1, _, tail_2] =
  let tup_el_4 = (erlps__concat__2 [rest_1, tail_2])
  in (ErlangTuple [number_0, tup_el_4])
erlps__to_number__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__to_number__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prefix__2 :: ErlangFun
erlps__prefix__2 [str_0, prefix0_1] =
  let   
    case_2 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_list__1" [prefix0_1])
  in let
    result_7 =
      case case_2 of
        (ErlangEmptyList) -> str_0
        prefix_4 -> (erlps__prefix_1__2 [str_0, prefix_4])
        something_else -> (EXC.case_clause something_else)
  in
    case result_7 of
      (ErlangEmptyList) | ((ErlangAtom "true") ==
                             (falsifyErrors
                                (\ _ -> (BIF.erlang__is_binary__1 [str_0])))) ->
        (ErlangBinary (BIN.concat []))
      res_10 -> res_10
      something_else -> (EXC.case_clause something_else)
erlps__prefix__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__prefix__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__2 :: ErlangFun
erlps__split__2 [string_0, searchpattern_1] =
  (erlps__split__3
     [string_0, searchpattern_1, (ErlangAtom "leading")])
erlps__split__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__split__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__3 :: ErlangFun
erlps__split__3 [string_0, searchpattern_1, where_2] =
  let case_3 = (erlps__is_empty__1 [searchpattern_1])
  in
    case case_3 of
      (ErlangAtom "true") -> (ErlangCons string_0 ErlangEmptyList)
      (ErlangAtom "false") ->
        let   
          searchpatterncps_8 =
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_list__1" [searchpattern_1])
        in let
          case_9 =
            (erlps__split_1__6
               [string_0, searchpatterncps_8, (ErlangInt (DBI.fromInt 0)),
                where_2, ErlangEmptyList, ErlangEmptyList])
        in
          case case_9 of
            (ErlangTuple [_curr_16, (ErlangEmptyList)]) ->
              (ErlangCons string_0 ErlangEmptyList)
            (ErlangTuple [_curr_19, acc_20]) | ((==) where_2
                                                  (ErlangAtom "trailing")) ->
              acc_20
            (ErlangTuple [curr_21, acc_22]) | ((==) where_2
                                                 (ErlangAtom "all")) ->
              (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                 [(ErlangCons curr_21 acc_22)])
            acc_26 | (isEList acc_26) -> acc_26
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__split__3 [arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__split__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__replace__3 :: ErlangFun
erlps__replace__3 [string_0, searchpattern_1, replacement_2] =
  let arg_4 = (erlps__split__2 [string_0, searchpattern_1])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__join__2"
       [replacement_2, arg_4])
erlps__replace__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__replace__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__replace__4 :: ErlangFun
erlps__replace__4 [string_0, searchpattern_1, replacement_2,
                   where_3]
  =
  let
    arg_5 = (erlps__split__3 [string_0, searchpattern_1, where_3])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__join__2"
       [replacement_2, arg_5])
erlps__replace__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__replace__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexemes__2 :: ErlangFun
erlps__lexemes__2 [(ErlangEmptyList), _] = ErlangEmptyList
erlps__lexemes__2 [str_0, (ErlangEmptyList)] =
  (ErlangCons str_0 ErlangEmptyList)
erlps__lexemes__2 [str_0, seps0_1] | (isEList seps0_1) =
  let seps_3 = (erlps__search_pattern__1 [seps0_1])
  in (erlps__lexemes_m__3 [str_0, seps_3, ErlangEmptyList])
erlps__lexemes__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__lexemes__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nth_lexeme__3 :: ErlangFun
erlps__nth_lexeme__3 [str_0, (ErlangInt num_1),
                      (ErlangEmptyList)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  str_0
erlps__nth_lexeme__3 [str_0, n_1, seps0_2]
  | (((isEList seps0_2) && (isEInt n_1)) &&
       (weakGt n_1 (ErlangInt (DBI.fromInt 0)))) =
  let seps_4 = (erlps__search_pattern__1 [seps0_2])
  in (erlps__nth_lexeme_m__3 [str_0, seps_4, n_1])
erlps__nth_lexeme__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__nth_lexeme__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find__2 :: ErlangFun
erlps__find__2 [string_0, searchpattern_1] =
  (erlps__find__3
     [string_0, searchpattern_1, (ErlangAtom "leading")])
erlps__find__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__find__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find__3 :: ErlangFun
erlps__find__3 [string_0, (ErlangEmptyList), _] = string_0
erlps__find__3 [string_0, (ErlangBinary bin_e_1), _]
  | (BIN.empty bin_e_1) =
  string_0
erlps__find__3 [string_0, searchpattern_1,
                (ErlangAtom "leading")]
  =
  let
    arg_3 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_list__1" [searchpattern_1])
  in (erlps__find_l__2 [string_0, arg_3])
erlps__find__3 [string_0, searchpattern_1,
                (ErlangAtom "trailing")]
  =
  let
    arg_3 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_list__1" [searchpattern_1])
  in (erlps__find_r__3 [string_0, arg_3, (ErlangAtom "nomatch")])
erlps__find__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__find__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__next_grapheme__1 :: ErlangFun
erlps__next_grapheme__1 [cd_0] =
  (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cd_0])
erlps__next_grapheme__1 [arg_2] = (EXC.function_clause unit)
erlps__next_grapheme__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__next_codepoint__1 :: ErlangFun
erlps__next_codepoint__1 [cd_0] =
  (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cd_0])
erlps__next_codepoint__1 [arg_2] = (EXC.function_clause unit)
erlps__next_codepoint__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__length_1__2 :: ErlangFun
erlps__length_1__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                    n_3]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  let
    arg_5 = (BIF.erlang__op_plus [n_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__length_1__2 [cont_2, arg_5])
erlps__length_1__2 [str_0, n_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_2 of
      (ErlangEmptyList) -> n_1
      (ErlangCons _ rest_4) ->
        let
          arg_6 = (BIF.erlang__op_plus [n_1, (ErlangInt (DBI.fromInt 1))])
        in (erlps__length_1__2 [rest_4, arg_6])
      (ErlangTuple [(ErlangAtom "error"), err_9]) ->
        let arg_10 = (ErlangTuple [(ErlangAtom "badarg"), err_9])
        in (BIF.erlang__error__1 [arg_10])
      something_else -> (EXC.case_clause something_else)
erlps__length_1__2 [arg_13, arg_14] = (EXC.function_clause unit)
erlps__length_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__length_b__3 :: ErlangFun
erlps__length_b__3 [(ErlangBinary bin_c_0), cp1_7, n_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , (((weakLt cp1_7 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_3 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_7 (ErlangInt (DBI.fromInt 13)))) =
  let
    arg_11 = (BIF.erlang__op_plus [n_8, (ErlangInt (DBI.fromInt 1))])
  in (erlps__length_b__3 [rest_6, cp2_3, arg_11])
erlps__length_b__3 [bin0_0, cp1_1, n_2] =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
         [(ErlangCons cp1_1 bin0_0)])
  in
    case match_expr_7 of
      (ErlangCons _ bin1_6) ->
        let
          case_8 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [bin1_6])
        in
          case case_8 of
            (ErlangEmptyList) ->
              (BIF.erlang__op_plus [n_2, (ErlangInt (DBI.fromInt 1))])
            (ErlangCons cp3_12 bin_13) ->
              let
                arg_16 =
                  (BIF.erlang__op_plus [n_2, (ErlangInt (DBI.fromInt 1))])
              in (erlps__length_b__3 [bin_13, cp3_12, arg_16])
            (ErlangTuple [(ErlangAtom "error"), err_19]) ->
              let arg_20 = (ErlangTuple [(ErlangAtom "badarg"), err_19])
              in (BIF.erlang__error__1 [arg_20])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_7)
erlps__length_b__3 [arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__length_b__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal_1__2 :: ErlangFun
erlps__equal_1__2 [(ErlangCons a_0 ar_1), (ErlangCons b_2 br_3)]
  | ((isEInt a_0) && (isEInt b_2)) =
  let lop_4 = (BIF.erlang__op_exactEq [a_0, b_2])
  in
    case lop_4 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__equal_1__2 [ar_1, br_3])
      _ -> (EXC.badarg1 lop_4)
erlps__equal_1__2 [(ErlangEmptyList), br_0] =
  (erlps__is_empty__1 [br_0])
erlps__equal_1__2 [a0_0, b0_1] =
  let   
    tup_el_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [a0_0])
  in let
    tup_el_5 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [b0_1])
  in let case_2 = (ErlangTuple [tup_el_3, tup_el_5])
  in
    case case_2 of
      (ErlangTuple [(ErlangCons cp_7 a_8),
                    (ErlangCons cp_9 b_10)]) | (cp_9 == cp_7) ->
        (erlps__equal_1__2 [a_8, b_10])
      (ErlangTuple [(ErlangEmptyList), (ErlangEmptyList)]) ->
        (ErlangAtom "true")
      (ErlangTuple [l1_13, l2_14]) | ((isEList l1_13) &&
                                        (isEList l2_14)) ->
        (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__equal_1__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__equal_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal_nocase__2 :: ErlangFun
erlps__equal_nocase__2 [a_0, a_1] | (a_1 == a_0) =
  (ErlangAtom "true")
erlps__equal_nocase__2 [a0_0, b0_1] =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [a0_0])
  in let
    tup_el_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_4])
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [b0_1])
  in let
    tup_el_6 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_7])
  in let case_2 = (ErlangTuple [tup_el_3, tup_el_6])
  in
    case case_2 of
      (ErlangTuple [(ErlangCons cp_9 a_10),
                    (ErlangCons cp_11 b_12)]) | (cp_11 == cp_9) ->
        (erlps__equal_nocase__2 [a_10, b_12])
      (ErlangTuple [(ErlangEmptyList), (ErlangEmptyList)]) ->
        (ErlangAtom "true")
      (ErlangTuple [l1_15, l2_16]) | ((isEList l1_15) &&
                                        (isEList l2_16)) ->
        (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__equal_nocase__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__equal_nocase__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal_norm__3 :: ErlangFun
erlps__equal_norm__3 [a_0, a_1, _norm_2] | (a_1 == a_0) =
  (ErlangAtom "true")
erlps__equal_norm__3 [a0_0, b0_1, norm_2] =
  let   
    arg_5 =
      (BIF.erlang__apply__3
         [(ErlangAtom "unicode_util"), norm_2,
          (ErlangCons a0_0 ErlangEmptyList)])
  in let
    tup_el_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_5])
  in let
    arg_12 =
      (BIF.erlang__apply__3
         [(ErlangAtom "unicode_util"), norm_2,
          (ErlangCons b0_1 ErlangEmptyList)])
  in let
    tup_el_11 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_12])
  in let case_3 = (ErlangTuple [tup_el_4, tup_el_11])
  in
    case case_3 of
      (ErlangTuple [(ErlangCons cp_18 a_19),
                    (ErlangCons cp_20 b_21)]) | (cp_20 == cp_18) ->
        (erlps__equal_norm__3 [a_19, b_21, norm_2])
      (ErlangTuple [(ErlangEmptyList), (ErlangEmptyList)]) ->
        (ErlangAtom "true")
      (ErlangTuple [l1_25, l2_26]) | ((isEList l1_25) &&
                                        (isEList l2_26)) ->
        (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__equal_norm__3 [arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__equal_norm__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__equal_norm_nocase__3 :: ErlangFun
erlps__equal_norm_nocase__3 [a_0, a_1, _norm_2] | (a_1 == a_0) =
  (ErlangAtom "true")
erlps__equal_norm_nocase__3 [a0_0, b0_1, norm_2] =
  let   
    arg_6 =
      (BIF.erlang__apply__3
         [(ErlangAtom "unicode_util"), norm_2,
          (ErlangCons a0_0 ErlangEmptyList)])
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [arg_6])
  in let
    tup_el_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_5])
  in let
    arg_14 =
      (BIF.erlang__apply__3
         [(ErlangAtom "unicode_util"), norm_2,
          (ErlangCons b0_1 ErlangEmptyList)])
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [arg_14])
  in let
    tup_el_12 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [arg_13])
  in let case_3 = (ErlangTuple [tup_el_4, tup_el_12])
  in
    case case_3 of
      (ErlangTuple [(ErlangCons cp_20 a_21),
                    (ErlangCons cp_22 b_23)]) | (cp_22 == cp_20) ->
        (erlps__equal_norm_nocase__3 [a_21, b_23, norm_2])
      (ErlangTuple [(ErlangEmptyList), (ErlangEmptyList)]) ->
        (ErlangAtom "true")
      (ErlangTuple [l1_27, l2_28]) | ((isEList l1_27) &&
                                        (isEList l2_28)) ->
        (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__equal_norm_nocase__3 [arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__equal_norm_nocase__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse_1__2 :: ErlangFun
erlps__reverse_1__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                     acc_3]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  (erlps__reverse_1__2 [cont_2, (ErlangCons cp1_0 acc_3)])
erlps__reverse_1__2 [cd_0, acc_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cd_0])
  in
    case case_2 of
      (ErlangCons gc_4 rest_5) ->
        (erlps__reverse_1__2 [rest_5, (ErlangCons gc_4 acc_1)])
      (ErlangEmptyList) -> acc_1
      (ErlangTuple [(ErlangAtom "error"), err_10]) ->
        let arg_11 = (ErlangTuple [(ErlangAtom "badarg"), err_10])
        in (BIF.erlang__error__1 [arg_11])
      something_else -> (EXC.case_clause something_else)
erlps__reverse_1__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__reverse_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse_b__3 :: ErlangFun
erlps__reverse_b__3 [(ErlangBinary bin_c_0), cp1_7, acc_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , (((weakLt cp1_7 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_3 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_7 (ErlangInt (DBI.fromInt 13)))) =
  (erlps__reverse_b__3 [rest_6, cp2_3, (ErlangCons cp1_7 acc_8)])
erlps__reverse_b__3 [bin0_0, cp1_1, acc_2] =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
         [(ErlangCons cp1_1 bin0_0)])
  in
    case match_expr_8 of
      (ErlangCons gc_6 bin1_7) ->
        let
          case_9 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [bin1_7])
        in
          case case_9 of
            (ErlangEmptyList) -> (ErlangCons gc_6 acc_2)
            (ErlangCons cp3_13 bin_14) ->
              (erlps__reverse_b__3 [bin_14, cp3_13, (ErlangCons gc_6 acc_2)])
            (ErlangTuple [(ErlangAtom "error"), err_20]) ->
              let arg_21 = (ErlangTuple [(ErlangAtom "badarg"), err_20])
              in (BIF.erlang__error__1 [arg_21])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_8)
erlps__reverse_b__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__reverse_b__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_l0__2 :: ErlangFun
erlps__slice_l0__2 [(ErlangBinary bin_c_0), n_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok bin_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , (weakGt n_7 (ErlangInt (DBI.fromInt 0))) =
  (erlps__slice_lb__3 [bin_6, cp1_3, n_7])
erlps__slice_l0__2 [l_0, n_1] = (erlps__slice_l__2 [l_0, n_1])
erlps__slice_l0__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__slice_l0__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_l__2 :: ErlangFun
erlps__slice_l__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                   n_3]
  | ((((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
         (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
        ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) &&
       (weakGt n_3 (ErlangInt (DBI.fromInt 0)))) =
  let
    arg_5 = (BIF.erlang__op_minus [n_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__slice_l__2 [cont_2, arg_5])
erlps__slice_l__2 [cd_0, n_1]
  | (weakGt n_1 (ErlangInt (DBI.fromInt 0))) =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cd_0])
  in
    case case_2 of
      (ErlangCons _ cont_4) ->
        let
          arg_6 = (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 1))])
        in (erlps__slice_l__2 [cont_4, arg_6])
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_9]) ->
        let arg_10 = (ErlangTuple [(ErlangAtom "badarg"), err_9])
        in (BIF.erlang__error__1 [arg_10])
      something_else -> (EXC.case_clause something_else)
erlps__slice_l__2 [cont_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  cont_0
erlps__slice_l__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__slice_l__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_lb__3 :: ErlangFun
erlps__slice_lb__3 [(ErlangBinary bin_c_0), cp1_7, n_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok bin_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((((weakLt cp1_7 (ErlangInt (DBI.fromInt 256))) &&
         (weakLt cp2_3 (ErlangInt (DBI.fromInt 256)))) &&
        ((/=) cp1_7 (ErlangInt (DBI.fromInt 13)))) &&
       (weakGt n_8 (ErlangInt (DBI.fromInt 1)))) =
  let
    arg_11 =
      (BIF.erlang__op_minus [n_8, (ErlangInt (DBI.fromInt 1))])
  in (erlps__slice_lb__3 [bin_6, cp2_3, arg_11])
erlps__slice_lb__3 [bin_0, cp1_1, n_2] =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
         [(ErlangCons cp1_1 bin_0)])
  in
    case match_expr_7 of
      (ErlangCons _ rest_6) ->
        case (ErlangAtom "true") of
          _ | (weakGt n_2 (ErlangInt (DBI.fromInt 1))) ->
            let
              case_8 =
                (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [rest_6])
            in
              case case_8 of
                (ErlangCons cp2_10 cont_11) ->
                  let
                    arg_14 =
                      (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
                  in (erlps__slice_lb__3 [cont_11, cp2_10, arg_14])
                (ErlangEmptyList) -> (ErlangBinary (BIN.concat []))
                (ErlangTuple [(ErlangAtom "error"), err_17]) ->
                  let arg_18 = (ErlangTuple [(ErlangAtom "badarg"), err_17])
                  in (BIF.erlang__error__1 [arg_18])
                something_else -> (EXC.case_clause something_else)
          _ | ((==) n_2 (ErlangInt (DBI.fromInt 1))) -> rest_6
          _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_7)
erlps__slice_lb__3 [arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__slice_lb__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_trail__2 :: ErlangFun
erlps__slice_trail__2 [orig_0, n_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [orig_0])))) =
  case orig_0 of
    (ErlangBinary bin_c_3) | size_4 <- ((DBI.fromInt 8))
                           , (BIN.Ok cp1_6 bin_5) <-
                               ((BIN.chop_int bin_c_3 size_4 1 BIN.Big
                                   BIN.Unsigned))
                           , (ErlangInt size_7) <- ((BIN.size bin_5))
                           , (BIN.Ok bin_9 bin_8) <-
                               ((BIN.chop_bin bin_5 size_7 8))
                           , (BIN.empty bin_8)
                           , (weakGt n_1 (ErlangInt (DBI.fromInt 0))) ->
      let    length_13 = (erlps__slice_bin__3 [bin_9, cp1_6, n_1])
      in let lop_14 = (BIF.erlang__byte_size__1 [orig_0])
      in let sz_17 = (BIF.erlang__op_minus [lop_14, length_13])
      in
        case orig_0 of
          (ErlangBinary bin_c_18) | (ErlangInt size_19) <- (sz_17)
                                  , (BIN.Ok keep_21 bin_20) <-
                                      ((BIN.chop_bin bin_c_18 size_19 8))
                                  , (ErlangInt size_22) <- ((BIN.size bin_20))
                                  , (BIN.Ok _ bin_23) <-
                                      ((BIN.chop_bin bin_20 size_22 8))
                                  , (BIN.empty bin_23) ->
            keep_21
          _ -> (EXC.badmatch orig_0)
    (ErlangBinary bin_c_25) | size_26 <- ((DBI.fromInt 8))
                            , (BIN.Ok _ bin_27) <-
                                ((BIN.chop_int bin_c_25 size_26 1 BIN.Big
                                    BIN.Unsigned))
                            , (ErlangInt size_28) <- ((BIN.size bin_27))
                            , (BIN.Ok _ bin_29) <-
                                ((BIN.chop_bin bin_27 size_28 8))
                            , (BIN.empty bin_29)
                            , (weakGt n_1 (ErlangInt (DBI.fromInt 0))) ->
      let arg_30 = (ErlangTuple [(ErlangAtom "badarg"), orig_0])
      in (BIF.erlang__error__1 [arg_30])
    _ -> (ErlangBinary (BIN.concat []))
    something_else -> (EXC.case_clause something_else)
erlps__slice_trail__2 [cd_0, n_1] | (isEList cd_0) =
  (erlps__slice_list__2 [cd_0, n_1])
erlps__slice_trail__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__slice_trail__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_list__2 :: ErlangFun
erlps__slice_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                      n_3]
  | ((((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
         (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
        ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) &&
       (weakGt n_3 (ErlangInt (DBI.fromInt 0)))) =
  let   
    arg_7 = (BIF.erlang__op_minus [n_3, (ErlangInt (DBI.fromInt 1))])
  in let tail_5 = (erlps__slice_list__2 [cont_2, arg_7])
  in (ErlangCons cp1_0 tail_5)
erlps__slice_list__2 [cd_0, n_1]
  | (weakGt n_1 (ErlangInt (DBI.fromInt 0))) =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cd_0])
  in
    case case_2 of
      (ErlangCons gc_4 cont_5) ->
        let   
          arg_9 = (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 1))])
        in let arg_7 = (erlps__slice_list__2 [cont_5, arg_9])
        in (erlps__append__2 [gc_4, arg_7])
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_12]) ->
        let arg_13 = (ErlangTuple [(ErlangAtom "badarg"), err_12])
        in (BIF.erlang__error__1 [arg_13])
      something_else -> (EXC.case_clause something_else)
erlps__slice_list__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__slice_list__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__slice_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__slice_bin__3 :: ErlangFun
erlps__slice_bin__3 [(ErlangBinary bin_c_0), cp1_7, n_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok bin_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((((weakLt cp1_7 (ErlangInt (DBI.fromInt 256))) &&
         (weakLt cp2_3 (ErlangInt (DBI.fromInt 256)))) &&
        ((/=) cp1_7 (ErlangInt (DBI.fromInt 13)))) &&
       (weakGt n_8 (ErlangInt (DBI.fromInt 0)))) =
  let
    arg_11 =
      (BIF.erlang__op_minus [n_8, (ErlangInt (DBI.fromInt 1))])
  in (erlps__slice_bin__3 [bin_6, cp2_3, arg_11])
erlps__slice_bin__3 [cd_0, cp1_1, n_2]
  | (weakGt n_2 (ErlangInt (DBI.fromInt 0))) =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
         [(ErlangCons cp1_1 cd_0)])
  in
    case match_expr_7 of
      (ErlangCons _ bin_6) ->
        let
          case_8 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [bin_6])
        in
          case case_8 of
            (ErlangCons cp2_10 cont_11) ->
              let
                arg_14 =
                  (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
              in (erlps__slice_bin__3 [cont_11, cp2_10, arg_14])
            (ErlangEmptyList) -> (ErlangInt (DBI.fromInt 0))
            (ErlangTuple [(ErlangAtom "error"), err_17]) ->
              let arg_18 = (ErlangTuple [(ErlangAtom "badarg"), err_17])
              in (BIF.erlang__error__1 [arg_18])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_7)
erlps__slice_bin__3 [cd_0, cp1_1, (ErlangInt num_2)]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0))) =
  let    lop_3 = (BIF.erlang__byte_size__1 [cd_0])
  in let
    arg_6 =
      (ErlangBinary
         (BIN.from_int cp1_1 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let rop_5 = (BIF.erlang__byte_size__1 [arg_6])
  in (BIF.erlang__op_plus [lop_3, rop_5])
erlps__slice_bin__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__slice_bin__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__uppercase_list__2 :: ErlangFun
erlps__uppercase_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                          _changed_3]
  | (((weakLeq (ErlangInt (DBI.fromInt 97)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 122)))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_4 =
      (BIF.erlang__op_minus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_7 = (erlps__uppercase_list__2 [cont_2, (ErlangAtom "true")])
  in (ErlangCons head_4 tail_7)
erlps__uppercase_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                          changed_3]
  | ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let tail_5 = (erlps__uppercase_list__2 [cont_2, changed_3])
  in (ErlangCons cp1_0 tail_5)
erlps__uppercase_list__2 [(ErlangEmptyList), (ErlangAtom "true")]
  =
  ErlangEmptyList
erlps__uppercase_list__2 [(ErlangEmptyList),
                          (ErlangAtom "false")]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
erlps__uppercase_list__2 [cps0_0, changed_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__uppercase__1"
         [cps0_0])
  in
    case case_2 of
      (ErlangCons char_4 cps_5) | ((ErlangAtom "true") ==
                                     (falsifyErrors
                                        (\ _ ->
                                           let
                                             rop_7 =
                                               (BIF.erlang__hd__1 [cps0_0])
                                           in
                                             (BIF.erlang__op_exactEq
                                                [char_4, rop_7])))) ->
        let tail_10 = (erlps__uppercase_list__2 [cps_5, changed_1])
        in (ErlangCons char_4 tail_10)
      (ErlangCons char_13 cps_14) ->
        let
          arg_16 = (erlps__uppercase_list__2 [cps_14, (ErlangAtom "true")])
        in (erlps__append__2 [char_13, arg_16])
      (ErlangEmptyList) ->
        (erlps__uppercase_list__2 [ErlangEmptyList, changed_1])
      something_else -> (EXC.case_clause something_else)
erlps__uppercase_list__2 [arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__uppercase_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__uppercase_bin__3 :: ErlangFun
erlps__uppercase_bin__3 [cp1_0, (ErlangBinary bin_c_1),
                         _changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , (((weakLeq (ErlangInt (DBI.fromInt 97)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 122)))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_9 =
      (BIF.erlang__op_minus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_12 =
      (erlps__uppercase_bin__3 [cp2_4, bin_7, (ErlangAtom "true")])
  in (ErlangCons head_9 tail_12)
erlps__uppercase_bin__3 [cp1_0, (ErlangBinary bin_c_1),
                         changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let tail_10 = (erlps__uppercase_bin__3 [cp2_4, bin_7, changed_8])
  in (ErlangCons cp1_0 tail_10)
erlps__uppercase_bin__3 [cp1_0, bin_1, changed_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__uppercase__1"
         [(ErlangCons cp1_0 bin_1)])
  in
    case case_3 of
      (ErlangCons cp1_7 cps_8) | (cp1_7 == cp1_0) ->
        let
          case_9 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_8])
        in
          case case_9 of
            (ErlangCons next_11 rest_12) ->
              let
                tail_14 =
                  (erlps__uppercase_bin__3 [next_11, rest_12, changed_2])
              in (ErlangCons cp1_0 tail_14)
            (ErlangEmptyList) | ((ErlangAtom "true") ==
                                   (falsifyErrors (\ _ -> changed_2))) ->
              (ErlangCons cp1_0 ErlangEmptyList)
            (ErlangEmptyList) ->
              (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
            (ErlangTuple [(ErlangAtom "error"), err_21]) ->
              let arg_22 = (ErlangTuple [(ErlangAtom "badarg"), err_21])
              in (BIF.erlang__error__1 [arg_22])
            something_else -> (EXC.case_clause something_else)
      (ErlangCons char_25 cps_26) ->
        let
          case_27 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_26])
        in
          case case_27 of
            (ErlangCons next_29 rest_30) ->
              let
                tail_32 =
                  (erlps__uppercase_bin__3
                     [next_29, rest_30, (ErlangAtom "true")])
              in (ErlangCons char_25 tail_32)
            (ErlangEmptyList) -> (ErlangCons char_25 ErlangEmptyList)
            (ErlangTuple [(ErlangAtom "error"), err_38]) ->
              let arg_39 = (ErlangTuple [(ErlangAtom "badarg"), err_38])
              in (BIF.erlang__error__1 [arg_39])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__uppercase_bin__3 [arg_42, arg_43, arg_44] =
  (EXC.function_clause unit)
erlps__uppercase_bin__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lowercase_list__2 :: ErlangFun
erlps__lowercase_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                          _changed_3]
  | (((weakLeq (ErlangInt (DBI.fromInt 65)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 90)))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_4 =
      (BIF.erlang__op_plus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_7 = (erlps__lowercase_list__2 [cont_2, (ErlangAtom "true")])
  in (ErlangCons head_4 tail_7)
erlps__lowercase_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                          changed_3]
  | ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let tail_5 = (erlps__lowercase_list__2 [cont_2, changed_3])
  in (ErlangCons cp1_0 tail_5)
erlps__lowercase_list__2 [(ErlangEmptyList), (ErlangAtom "true")]
  =
  ErlangEmptyList
erlps__lowercase_list__2 [(ErlangEmptyList),
                          (ErlangAtom "false")]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
erlps__lowercase_list__2 [cps0_0, changed_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__lowercase__1"
         [cps0_0])
  in
    case case_2 of
      (ErlangCons char_4 cps_5) | ((ErlangAtom "true") ==
                                     (falsifyErrors
                                        (\ _ ->
                                           let
                                             rop_7 =
                                               (BIF.erlang__hd__1 [cps0_0])
                                           in
                                             (BIF.erlang__op_exactEq
                                                [char_4, rop_7])))) ->
        let tail_10 = (erlps__lowercase_list__2 [cps_5, changed_1])
        in (ErlangCons char_4 tail_10)
      (ErlangCons char_13 cps_14) ->
        let
          arg_16 = (erlps__lowercase_list__2 [cps_14, (ErlangAtom "true")])
        in (erlps__append__2 [char_13, arg_16])
      (ErlangEmptyList) ->
        (erlps__lowercase_list__2 [ErlangEmptyList, changed_1])
      something_else -> (EXC.case_clause something_else)
erlps__lowercase_list__2 [arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__lowercase_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lowercase_bin__3 :: ErlangFun
erlps__lowercase_bin__3 [cp1_0, (ErlangBinary bin_c_1),
                         _changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , (((weakLeq (ErlangInt (DBI.fromInt 65)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 90)))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_9 =
      (BIF.erlang__op_plus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_12 =
      (erlps__lowercase_bin__3 [cp2_4, bin_7, (ErlangAtom "true")])
  in (ErlangCons head_9 tail_12)
erlps__lowercase_bin__3 [cp1_0, (ErlangBinary bin_c_1),
                         changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let tail_10 = (erlps__lowercase_bin__3 [cp2_4, bin_7, changed_8])
  in (ErlangCons cp1_0 tail_10)
erlps__lowercase_bin__3 [cp1_0, bin_1, changed_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__lowercase__1"
         [(ErlangCons cp1_0 bin_1)])
  in
    case case_3 of
      (ErlangCons cp1_7 cps_8) | (cp1_7 == cp1_0) ->
        let
          case_9 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_8])
        in
          case case_9 of
            (ErlangCons next_11 rest_12) ->
              let
                tail_14 =
                  (erlps__lowercase_bin__3 [next_11, rest_12, changed_2])
              in (ErlangCons cp1_0 tail_14)
            (ErlangEmptyList) | ((ErlangAtom "true") ==
                                   (falsifyErrors (\ _ -> changed_2))) ->
              (ErlangCons cp1_0 ErlangEmptyList)
            (ErlangEmptyList) ->
              (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
            (ErlangTuple [(ErlangAtom "error"), err_21]) ->
              let arg_22 = (ErlangTuple [(ErlangAtom "badarg"), err_21])
              in (BIF.erlang__error__1 [arg_22])
            something_else -> (EXC.case_clause something_else)
      (ErlangCons char_25 cps_26) ->
        let
          case_27 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_26])
        in
          case case_27 of
            (ErlangCons next_29 rest_30) ->
              let
                tail_32 =
                  (erlps__lowercase_bin__3
                     [next_29, rest_30, (ErlangAtom "true")])
              in (ErlangCons char_25 tail_32)
            (ErlangEmptyList) -> (ErlangCons char_25 ErlangEmptyList)
            (ErlangTuple [(ErlangAtom "error"), err_38]) ->
              let arg_39 = (ErlangTuple [(ErlangAtom "badarg"), err_38])
              in (BIF.erlang__error__1 [arg_39])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__lowercase_bin__3 [arg_42, arg_43, arg_44] =
  (EXC.function_clause unit)
erlps__lowercase_bin__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__casefold_list__2 :: ErlangFun
erlps__casefold_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                         _changed_3]
  | (((weakLeq (ErlangInt (DBI.fromInt 65)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 90)))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_4 =
      (BIF.erlang__op_plus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_7 = (erlps__casefold_list__2 [cont_2, (ErlangAtom "true")])
  in (ErlangCons head_4 tail_7)
erlps__casefold_list__2 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                         changed_3]
  | ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) =
  let tail_5 = (erlps__casefold_list__2 [cont_2, changed_3])
  in (ErlangCons cp1_0 tail_5)
erlps__casefold_list__2 [(ErlangEmptyList), (ErlangAtom "true")]
  =
  ErlangEmptyList
erlps__casefold_list__2 [(ErlangEmptyList), (ErlangAtom "false")]
  =
  (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
erlps__casefold_list__2 [cps0_0, changed_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [cps0_0])
  in
    case case_2 of
      (ErlangCons char_4 cps_5) | ((ErlangAtom "true") ==
                                     (falsifyErrors
                                        (\ _ ->
                                           let
                                             rop_7 =
                                               (BIF.erlang__hd__1 [cps0_0])
                                           in
                                             (BIF.erlang__op_exactEq
                                                [char_4, rop_7])))) ->
        let tail_10 = (erlps__casefold_list__2 [cps_5, changed_1])
        in (ErlangCons char_4 tail_10)
      (ErlangCons char_13 cps_14) ->
        let
          arg_16 = (erlps__casefold_list__2 [cps_14, (ErlangAtom "true")])
        in (erlps__append__2 [char_13, arg_16])
      (ErlangEmptyList) ->
        (erlps__casefold_list__2 [ErlangEmptyList, changed_1])
      something_else -> (EXC.case_clause something_else)
erlps__casefold_list__2 [arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__casefold_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__casefold_bin__3 :: ErlangFun
erlps__casefold_bin__3 [cp1_0, (ErlangBinary bin_c_1),
                        _changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , (((weakLeq (ErlangInt (DBI.fromInt 65)) cp1_0) &&
        (weakLeq cp1_0 (ErlangInt (DBI.fromInt 90)))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let   
    head_9 =
      (BIF.erlang__op_plus [cp1_0, (ErlangInt (DBI.fromInt 32))])
  in let
    tail_12 =
      (erlps__casefold_bin__3 [cp2_4, bin_7, (ErlangAtom "true")])
  in (ErlangCons head_9 tail_12)
erlps__casefold_bin__3 [cp1_0, (ErlangBinary bin_c_1), changed_8]
  | size_2 <- ((DBI.fromInt 8))
  , (BIN.Ok cp2_4 bin_3) <-
      ((BIN.chop_int bin_c_1 size_2 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_5) <- ((BIN.size bin_3))
  , (BIN.Ok bin_7 bin_6) <- ((BIN.chop_bin bin_3 size_5 8))
  , (BIN.empty bin_6)
  , ((weakLt cp1_0 (ErlangInt (DBI.fromInt 128))) &&
       (weakLt cp2_4 (ErlangInt (DBI.fromInt 256)))) =
  let tail_10 = (erlps__casefold_bin__3 [cp2_4, bin_7, changed_8])
  in (ErlangCons cp1_0 tail_10)
erlps__casefold_bin__3 [cp1_0, bin_1, changed_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__casefold__1"
         [(ErlangCons cp1_0 bin_1)])
  in
    case case_3 of
      (ErlangCons cp1_7 cps_8) | (cp1_7 == cp1_0) ->
        let
          case_9 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_8])
        in
          case case_9 of
            (ErlangCons next_11 rest_12) ->
              let
                tail_14 = (erlps__casefold_bin__3 [next_11, rest_12, changed_2])
              in (ErlangCons cp1_0 tail_14)
            (ErlangEmptyList) | ((ErlangAtom "true") ==
                                   (falsifyErrors (\ _ -> changed_2))) ->
              (ErlangCons cp1_0 ErlangEmptyList)
            (ErlangEmptyList) ->
              (BIF.erlang__throw__1 [(ErlangAtom "unchanged")])
            (ErlangTuple [(ErlangAtom "error"), err_21]) ->
              let arg_22 = (ErlangTuple [(ErlangAtom "badarg"), err_21])
              in (BIF.erlang__error__1 [arg_22])
            something_else -> (EXC.case_clause something_else)
      (ErlangCons char_25 cps_26) ->
        let
          case_27 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cps_26])
        in
          case case_27 of
            (ErlangCons next_29 rest_30) ->
              let
                tail_32 =
                  (erlps__casefold_bin__3
                     [next_29, rest_30, (ErlangAtom "true")])
              in (ErlangCons char_25 tail_32)
            (ErlangEmptyList) -> (ErlangCons char_25 ErlangEmptyList)
            (ErlangTuple [(ErlangAtom "error"), err_38]) ->
              let arg_39 = (ErlangTuple [(ErlangAtom "badarg"), err_38])
              in (BIF.erlang__error__1 [arg_39])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__casefold_bin__3 [arg_42, arg_43, arg_44] =
  (EXC.function_clause unit)
erlps__casefold_bin__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim_ls__2 :: ErlangFun
erlps__trim_ls__2 [str_3@(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                   sep_4]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  case sep_4 of
    cp1_6 | (cp1_6 == cp1_0) -> (erlps__trim_ls__2 [cont_2, sep_4])
    _ -> str_3
    something_else -> (EXC.case_clause something_else)
erlps__trim_ls__2 [str_0, sep_1] =
  (erlps__trim_l__2 [str_0, (ErlangCons sep_1 ErlangEmptyList)])
erlps__trim_ls__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__trim_ls__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim_l__2 :: ErlangFun
erlps__trim_l__2 [str_3@(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                  sep_4]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  let case_5 = (BIF.lists__member__2 [cp1_0, sep_4])
  in
    case case_5 of
      (ErlangAtom "true") -> (erlps__trim_l__2 [cont_2, sep_4])
      (ErlangAtom "false") -> str_3
      something_else -> (EXC.case_clause something_else)
erlps__trim_l__2 [(ErlangCons bin_0 cont0_1), sep_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let case_3 = (erlps__bin_search_inv__3 [bin_0, cont0_1, sep_2])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "nomatch"), cont_7]) ->
        (erlps__trim_l__2 [cont_7, sep_2])
      keep_10 -> keep_10
      something_else -> (EXC.case_clause something_else)
erlps__trim_l__2 [str_0, sep_1] | (isEList str_0) =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_2 of
      (ErlangCons c_4 cs_5) ->
        let case_6 = (BIF.lists__member__2 [c_4, sep_1])
        in
          case case_6 of
            (ErlangAtom "true") -> (erlps__trim_l__2 [cs_5, sep_1])
            (ErlangAtom "false") -> str_0
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__trim_l__2 [bin_0, sep_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_2 =
      (erlps__bin_search_inv__3 [bin_0, ErlangEmptyList, sep_1])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (ErlangBinary (BIN.concat []))
      (ErlangCons keep_6 (ErlangEmptyList)) -> keep_6
      something_else -> (EXC.case_clause something_else)
erlps__trim_l__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__trim_l__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim_ts__2 :: ErlangFun
erlps__trim_ts__2 [str_2@(ErlangCons sep_0 cs1_1), sep_3]
  | (sep_3 == sep_0) =
  case cs1_1 of
    (ErlangEmptyList) -> ErlangEmptyList
    (ErlangCons cp2_5 _) | (((weakLt sep_0
                                (ErlangInt (DBI.fromInt 256))) &&
                               (weakLt cp2_5 (ErlangInt (DBI.fromInt 256)))) &&
                              ((/=) sep_0 (ErlangInt (DBI.fromInt 13)))) ->
      let    tail_8 = (erlps__trim_ts__2 [cs1_1, sep_0])
      in let case_9 = (erlps__is_empty__1 [tail_8])
      in
        case case_9 of
          (ErlangAtom "true") -> ErlangEmptyList
          (ErlangAtom "false") -> (ErlangCons sep_0 tail_8)
          something_else -> (EXC.case_clause something_else)
    _ ->
      let
        arg_15 =
          (erlps__search_pattern__1 [(ErlangCons sep_0 ErlangEmptyList)])
      in
        (erlps__trim_t__3 [str_2, (ErlangInt (DBI.fromInt 0)), arg_15])
    something_else -> (EXC.case_clause something_else)
erlps__trim_ts__2 [(ErlangCons cp_0 cont_1), sep_2]
  | (isEInt cp_0) =
  let tail_4 = (erlps__trim_ts__2 [cont_1, sep_2])
  in (ErlangCons cp_0 tail_4)
erlps__trim_ts__2 [str_0, sep_1] =
  let
    arg_4 =
      (erlps__search_pattern__1 [(ErlangCons sep_1 ErlangEmptyList)])
  in (erlps__trim_t__3 [str_0, (ErlangInt (DBI.fromInt 0)), arg_4])
erlps__trim_ts__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__trim_ts__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__trim_t__3 :: ErlangFun
erlps__trim_t__3 [cs0_2@(ErlangCons cp1_0 cont_1), _,
                  seps_5@(ErlangTuple [gcs_3, cps_4, _])]
  | (isEInt cp1_0) =
  let case_6 = (BIF.lists__member__2 [cp1_0, cps_4])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          match_expr_12 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_2])
        in
          case match_expr_12 of
            (ErlangCons gc_10 cs1_11) ->
              let case_13 = (BIF.lists__member__2 [gc_10, gcs_3])
              in
                case case_13 of
                  (ErlangAtom "true") ->
                    let   
                      tail_19 =
                        (erlps__trim_t__3
                           [cs1_11, (ErlangInt (DBI.fromInt 0)), seps_5])
                    in let case_20 = (erlps__is_empty__1 [tail_19])
                    in
                      case case_20 of
                        (ErlangAtom "true") -> ErlangEmptyList
                        (ErlangAtom "false") ->
                          (erlps__append__2 [gc_10, tail_19])
                        something_else -> (EXC.case_clause something_else)
                  (ErlangAtom "false") ->
                    let
                      arg_25 =
                        (erlps__trim_t__3
                           [cs1_11, (ErlangInt (DBI.fromInt 0)), seps_5])
                    in (erlps__append__2 [gc_10, arg_25])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_12)
      (ErlangAtom "false") ->
        let
          tail_30 =
            (erlps__trim_t__3 [cont_1, (ErlangInt (DBI.fromInt 0)), seps_5])
        in (ErlangCons cp1_0 tail_30)
      something_else -> (EXC.case_clause something_else)
erlps__trim_t__3 [(ErlangCons bin_0 cont0_1), n_2,
                  seps0_4@(ErlangTuple [gcs_3, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_5) | (ErlangInt size_6) <- (n_2)
                           , (BIN.Ok _ bin_7) <-
                               ((BIN.chop_bin bin_c_5 size_6 8))
                           , (ErlangInt size_8) <- ((BIN.size bin_7))
                           , (BIN.Ok rest_10 bin_9) <-
                               ((BIN.chop_bin bin_7 size_8 8))
                           , (BIN.empty bin_9) ->
      let    seps_13 = (erlps__search_compile__1 [seps0_4])
      in let
        case_14 = (erlps__bin_search__3 [rest_10, cont0_1, seps_13])
      in
        case case_14 of
          (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
            let
              arg_19 =
                (erlps__trim_t__3
                   [cont0_1, (ErlangInt (DBI.fromInt 0)), seps_13])
            in (erlps__stack__2 [bin_0, arg_19])
          (ErlangCons sepstart_23 cont1_24) ->
            let
              case_25 =
                (erlps__bin_search_inv__3 [sepstart_23, cont1_24, gcs_3])
            in
              case case_25 of
                (ErlangTuple [(ErlangAtom "nomatch"), cont_29]) ->
                  let   
                    tail_33 =
                      (erlps__trim_t__3
                         [cont_29, (ErlangInt (DBI.fromInt 0)), seps_13])
                  in let case_34 = (erlps__is_empty__1 [tail_33])
                  in
                    case case_34 of
                      (ErlangAtom "true") ->
                        let    lop_36 = (BIF.erlang__byte_size__1 [bin_0])
                        in let rop_38 = (BIF.erlang__byte_size__1 [sepstart_23])
                        in let
                          keepsz_40 = (BIF.erlang__op_minus [lop_36, rop_38])
                        in
                          case bin_0 of
                            (ErlangBinary bin_c_41) | (ErlangInt size_42) <-
                                                        (keepsz_40)
                                                    , (BIN.Ok keep_44 bin_43) <-
                                                        ((BIN.chop_bin bin_c_41
                                                            size_42 8))
                                                    , (ErlangInt size_45) <-
                                                        ((BIN.size bin_43))
                                                    , (BIN.Ok _ bin_46) <-
                                                        ((BIN.chop_bin bin_43
                                                            size_45 8))
                                                    , (BIN.empty bin_46) ->
                              keep_44
                            _ -> (EXC.badmatch bin_0)
                      (ErlangAtom "false") ->
                        let   
                          used_50 = (erlps__cp_prefix__2 [cont0_1, cont_29])
                        in let arg_52 = (erlps__stack__2 [used_50, tail_33])
                        in (erlps__stack__2 [bin_0, arg_52])
                      something_else -> (EXC.case_clause something_else)
                (ErlangCons nonsep_55 cont_56) | ((ErlangAtom "true") ==
                                                    (falsifyErrors
                                                       (\ _ ->
                                                          (BIF.erlang__is_binary__1
                                                             [nonsep_55])))) ->
                  let    lop_58 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_60 = (BIF.erlang__byte_size__1 [nonsep_55])
                  in let keepsz_62 = (BIF.erlang__op_minus [lop_58, rop_60])
                  in
                    (erlps__trim_t__3
                       [(ErlangCons bin_0 cont_56), keepsz_62, seps_13])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__trim_t__3 [str_0, (ErlangInt num_1),
                  seps_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEList str_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_4 of
      (ErlangCons gc_6 cs1_7) ->
        let case_8 = (BIF.lists__member__2 [gc_6, gcs_2])
        in
          case case_8 of
            (ErlangAtom "true") ->
              let   
                tail_14 =
                  (erlps__trim_t__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in let case_15 = (erlps__is_empty__1 [tail_14])
              in
                case case_15 of
                  (ErlangAtom "true") -> ErlangEmptyList
                  (ErlangAtom "false") -> (erlps__append__2 [gc_6, tail_14])
                  something_else -> (EXC.case_clause something_else)
            (ErlangAtom "false") ->
              let
                arg_20 =
                  (erlps__trim_t__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in (erlps__append__2 [gc_6, arg_20])
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__trim_t__3 [bin_0, n_1,
                  seps0_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_4) | (ErlangInt size_5) <- (n_1)
                           , (BIN.Ok _ bin_6) <-
                               ((BIN.chop_bin bin_c_4 size_5 8))
                           , (ErlangInt size_7) <- ((BIN.size bin_6))
                           , (BIN.Ok rest_9 bin_8) <-
                               ((BIN.chop_bin bin_6 size_7 8))
                           , (BIN.empty bin_8) ->
      let    seps_12 = (erlps__search_compile__1 [seps0_3])
      in let
        case_13 =
          (erlps__bin_search__3 [rest_9, ErlangEmptyList, seps_12])
      in
        case case_13 of
          (ErlangTuple [(ErlangAtom "nomatch"), _]) -> bin_0
          (ErlangCons sepstart_17 (ErlangEmptyList)) ->
            let
              case_18 =
                (erlps__bin_search_inv__3 [sepstart_17, ErlangEmptyList, gcs_2])
            in
              case case_18 of
                (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
                  let    lop_22 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_24 = (BIF.erlang__byte_size__1 [sepstart_17])
                  in let keepsz_26 = (BIF.erlang__op_minus [lop_22, rop_24])
                  in
                    case bin_0 of
                      (ErlangBinary bin_c_27) | (ErlangInt size_28) <-
                                                  (keepsz_26)
                                              , (BIN.Ok keep_30 bin_29) <-
                                                  ((BIN.chop_bin bin_c_27
                                                      size_28 8))
                                              , (ErlangInt size_31) <-
                                                  ((BIN.size bin_29))
                                              , (BIN.Ok _ bin_32) <-
                                                  ((BIN.chop_bin bin_29 size_31
                                                      8))
                                              , (BIN.empty bin_32) ->
                        keep_30
                      _ -> (EXC.badmatch bin_0)
                (ErlangCons nonsep_34 (ErlangEmptyList)) ->
                  let    lop_35 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_37 = (BIF.erlang__byte_size__1 [nonsep_34])
                  in let keepsz_39 = (BIF.erlang__op_minus [lop_35, rop_37])
                  in (erlps__trim_t__3 [bin_0, keepsz_39, seps_12])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__trim_t__3 [arg_44, arg_45, arg_46] =
  (EXC.function_clause unit)
erlps__trim_t__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_l__3 :: ErlangFun
erlps__take_l__3 [str_3@(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                  seps_4, acc_5]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  let case_6 = (BIF.lists__member__2 [cp1_0, seps_4])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__take_l__3 [cont_2, seps_4, (ErlangCons cp1_0 acc_5)])
      (ErlangAtom "false") ->
        let tup_el_14 = (erlps__rev__1 [acc_5])
        in (ErlangTuple [tup_el_14, str_3])
      something_else -> (EXC.case_clause something_else)
erlps__take_l__3 [(ErlangCons bin_0 cont0_1), seps_2, acc_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let case_4 = (erlps__bin_search_inv__3 [bin_0, cont0_1, seps_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "nomatch"), cont_8]) ->
        let    used_11 = (erlps__cp_prefix__2 [cont0_1, cont_8])
        in let
          head_15 =
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_binary__1" [(ErlangCons bin_0 used_11)])
        in
          (erlps__take_l__3 [cont_8, seps_2, (ErlangCons head_15 acc_3)])
      after_21@(ErlangCons bin1_20 _) | ((ErlangAtom "true") ==
                                           (falsifyErrors
                                              (\ _ ->
                                                 (BIF.erlang__is_binary__1
                                                    [bin1_20])))) ->
        let    lop_23 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_25 = (BIF.erlang__byte_size__1 [bin1_20])
        in let first_27 = (BIF.erlang__op_minus [lop_23, rop_25])
        in
          case bin_0 of
            (ErlangBinary bin_c_28) | (ErlangInt size_29) <- (first_27)
                                    , (BIN.Ok keep_31 bin_30) <-
                                        ((BIN.chop_bin bin_c_28 size_29 8))
                                    , (ErlangInt size_32) <- ((BIN.size bin_30))
                                    , (BIN.Ok _ bin_33) <-
                                        ((BIN.chop_bin bin_30 size_32 8))
                                    , (BIN.empty bin_33) ->
              let tup_el_35 = (erlps__btoken__2 [keep_31, acc_3])
              in (ErlangTuple [tup_el_35, after_21])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__take_l__3 [str_0, seps_1, acc_2] | (isEList str_0) =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_3 of
      (ErlangCons c_5 cs_6) ->
        let case_7 = (BIF.lists__member__2 [c_5, seps_1])
        in
          case case_7 of
            (ErlangAtom "true") ->
              let    arg_13 = (erlps__rev__1 [c_5])
              in let arg_12 = (erlps__append__2 [arg_13, acc_2])
              in (erlps__take_l__3 [cs_6, seps_1, arg_12])
            (ErlangAtom "false") ->
              let tup_el_16 = (erlps__rev__1 [acc_2])
              in (ErlangTuple [tup_el_16, str_0])
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        let tup_el_19 = (erlps__rev__1 [acc_2])
        in (ErlangTuple [tup_el_19, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__take_l__3 [bin_0, seps_1, acc_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_3 =
      (erlps__bin_search_inv__3 [bin_0, ErlangEmptyList, seps_1])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        let    tup_el_7 = (erlps__btoken__2 [bin_0, acc_2])
        in let tup_el_10 = (ErlangBinary (BIN.concat []))
        in (ErlangTuple [tup_el_7, tup_el_10])
      (ErlangCons after_11 (ErlangEmptyList)) ->
        let    lop_12 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_14 = (BIF.erlang__byte_size__1 [after_11])
        in let first_16 = (BIF.erlang__op_minus [lop_12, rop_14])
        in
          case bin_0 of
            (ErlangBinary bin_c_17) | (ErlangInt size_18) <- (first_16)
                                    , (BIN.Ok keep_20 bin_19) <-
                                        ((BIN.chop_bin bin_c_17 size_18 8))
                                    , (ErlangInt size_21) <- ((BIN.size bin_19))
                                    , (BIN.Ok _ bin_22) <-
                                        ((BIN.chop_bin bin_19 size_21 8))
                                    , (BIN.empty bin_22) ->
              let tup_el_24 = (erlps__btoken__2 [keep_20, acc_2])
              in (ErlangTuple [tup_el_24, after_11])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__take_l__3 [arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__take_l__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_lc__3 :: ErlangFun
erlps__take_lc__3 [str0_2@(ErlangCons cp1_0 cont_1),
                   seps_5@(ErlangTuple [gcs_3, cps_4, _]), acc_6]
  | (isEInt cp1_0) =
  let case_7 = (BIF.lists__member__2 [cp1_0, cps_4])
  in
    case case_7 of
      (ErlangAtom "true") ->
        let
          match_expr_13 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str0_2])
        in
          case match_expr_13 of
            (ErlangCons gc_11 str_12) ->
              let case_14 = (BIF.lists__member__2 [gc_11, gcs_3])
              in
                case case_14 of
                  (ErlangAtom "false") ->
                    let    arg_20 = (erlps__rev__1 [gc_11])
                    in let arg_19 = (erlps__append__2 [arg_20, acc_6])
                    in (erlps__take_lc__3 [str_12, seps_5, arg_19])
                  (ErlangAtom "true") ->
                    let tup_el_23 = (erlps__rev__1 [acc_6])
                    in (ErlangTuple [tup_el_23, str0_2])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_13)
      (ErlangAtom "false") ->
        let arg_28 = (erlps__append__2 [cp1_0, acc_6])
        in (erlps__take_lc__3 [cont_1, seps_5, arg_28])
      something_else -> (EXC.case_clause something_else)
erlps__take_lc__3 [(ErlangCons bin_0 cont0_1), seps0_2, acc_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let    seps_5 = (erlps__search_compile__1 [seps0_2])
  in let case_6 = (erlps__bin_search__3 [bin_0, cont0_1, seps_5])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "nomatch"), cont_10]) ->
        let    used_13 = (erlps__cp_prefix__2 [cont0_1, cont_10])
        in let
          head_17 =
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_binary__1" [(ErlangCons bin_0 used_13)])
        in
          (erlps__take_lc__3 [cont_10, seps_5, (ErlangCons head_17 acc_3)])
      after_23@(ErlangCons bin1_22 _) | ((ErlangAtom "true") ==
                                           (falsifyErrors
                                              (\ _ ->
                                                 (BIF.erlang__is_binary__1
                                                    [bin1_22])))) ->
        let    lop_25 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_27 = (BIF.erlang__byte_size__1 [bin1_22])
        in let first_29 = (BIF.erlang__op_minus [lop_25, rop_27])
        in
          case bin_0 of
            (ErlangBinary bin_c_30) | (ErlangInt size_31) <- (first_29)
                                    , (BIN.Ok keep_33 bin_32) <-
                                        ((BIN.chop_bin bin_c_30 size_31 8))
                                    , (ErlangInt size_34) <- ((BIN.size bin_32))
                                    , (BIN.Ok _ bin_35) <-
                                        ((BIN.chop_bin bin_32 size_34 8))
                                    , (BIN.empty bin_35) ->
              let tup_el_37 = (erlps__btoken__2 [keep_33, acc_3])
              in (ErlangTuple [tup_el_37, after_23])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__take_lc__3 [str_0, seps_2@(ErlangTuple [gcs_1, _, _]),
                   acc_3]
  | (isEList str_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_4 of
      (ErlangCons c_6 cs_7) ->
        let case_8 = (BIF.lists__member__2 [c_6, gcs_1])
        in
          case case_8 of
            (ErlangAtom "false") ->
              let    arg_14 = (erlps__rev__1 [c_6])
              in let arg_13 = (erlps__append__2 [arg_14, acc_3])
              in (erlps__take_lc__3 [cs_7, seps_2, arg_13])
            (ErlangAtom "true") ->
              let tup_el_17 = (erlps__rev__1 [acc_3])
              in (ErlangTuple [tup_el_17, str_0])
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        let tup_el_20 = (erlps__rev__1 [acc_3])
        in (ErlangTuple [tup_el_20, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__take_lc__3 [bin_0, seps0_1, acc_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let    seps_4 = (erlps__search_compile__1 [seps0_1])
  in let
    case_5 = (erlps__bin_search__3 [bin_0, ErlangEmptyList, seps_4])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        let    tup_el_9 = (erlps__btoken__2 [bin_0, acc_2])
        in let tup_el_12 = (ErlangBinary (BIN.concat []))
        in (ErlangTuple [tup_el_9, tup_el_12])
      (ErlangCons after_13 (ErlangEmptyList)) ->
        let    lop_14 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_16 = (BIF.erlang__byte_size__1 [after_13])
        in let first_18 = (BIF.erlang__op_minus [lop_14, rop_16])
        in
          case bin_0 of
            (ErlangBinary bin_c_19) | (ErlangInt size_20) <- (first_18)
                                    , (BIN.Ok keep_22 bin_21) <-
                                        ((BIN.chop_bin bin_c_19 size_20 8))
                                    , (ErlangInt size_23) <- ((BIN.size bin_21))
                                    , (BIN.Ok _ bin_24) <-
                                        ((BIN.chop_bin bin_21 size_23 8))
                                    , (BIN.empty bin_24) ->
              let tup_el_26 = (erlps__btoken__2 [keep_22, acc_2])
              in (ErlangTuple [tup_el_26, after_13])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__take_lc__3 [arg_31, arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__take_lc__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_t__3 :: ErlangFun
erlps__take_t__3 [str0_2@(ErlangCons cp1_0 cont_1), _,
                  seps_5@(ErlangTuple [gcs_3, cps_4, _])]
  | (isEInt cp1_0) =
  let case_6 = (BIF.lists__member__2 [cp1_0, cps_4])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          match_expr_12 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str0_2])
        in
          case match_expr_12 of
            (ErlangCons gc_10 str_11) ->
              let case_13 = (BIF.lists__member__2 [gc_10, gcs_3])
              in
                case case_13 of
                  (ErlangAtom "true") ->
                    let
                      match_expr_21 =
                        (erlps__take_t__3
                           [str_11, (ErlangInt (DBI.fromInt 0)), seps_5])
                    in
                      case match_expr_21 of
                        (ErlangTuple [head_19, tail_20]) ->
                          let case_22 = (erlps__is_empty__1 [head_19])
                          in
                            case case_22 of
                              (ErlangAtom "true") ->
                                let
                                  tup_el_25 =
                                    (erlps__append__2 [gc_10, tail_20])
                                in (ErlangTuple [head_19, tup_el_25])
                              (ErlangAtom "false") ->
                                let
                                  tup_el_28 =
                                    (erlps__append__2 [gc_10, head_19])
                                in (ErlangTuple [tup_el_28, tail_20])
                              something_else -> (EXC.case_clause something_else)
                        _ -> (EXC.badmatch match_expr_21)
                  (ErlangAtom "false") ->
                    let
                      match_expr_37 =
                        (erlps__take_t__3
                           [str_11, (ErlangInt (DBI.fromInt 0)), seps_5])
                    in
                      case match_expr_37 of
                        (ErlangTuple [head_35, tail_36]) ->
                          let tup_el_38 = (erlps__append__2 [gc_10, head_35])
                          in (ErlangTuple [tup_el_38, tail_36])
                        _ -> (EXC.badmatch match_expr_37)
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_12)
      (ErlangAtom "false") ->
        let
          match_expr_47 =
            (erlps__take_t__3 [cont_1, (ErlangInt (DBI.fromInt 0)), seps_5])
        in
          case match_expr_47 of
            (ErlangTuple [head_45, tail_46]) ->
              (ErlangTuple [(ErlangCons cp1_0 head_45), tail_46])
            _ -> (EXC.badmatch match_expr_47)
      something_else -> (EXC.case_clause something_else)
erlps__take_t__3 [(ErlangCons bin_0 cont0_1), n_2,
                  seps0_4@(ErlangTuple [gcs_3, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_5) | (ErlangInt size_6) <- (n_2)
                           , (BIN.Ok _ bin_7) <-
                               ((BIN.chop_bin bin_c_5 size_6 8))
                           , (ErlangInt size_8) <- ((BIN.size bin_7))
                           , (BIN.Ok rest_10 bin_9) <-
                               ((BIN.chop_bin bin_7 size_8 8))
                           , (BIN.empty bin_9) ->
      let    seps_13 = (erlps__search_compile__1 [seps0_4])
      in let
        case_14 = (erlps__bin_search__3 [rest_10, cont0_1, seps_13])
      in
        case case_14 of
          (ErlangTuple [(ErlangAtom "nomatch"), cont_18]) ->
            let    used_21 = (erlps__cp_prefix__2 [cont0_1, cont_18])
            in let
              match_expr_27 =
                (erlps__take_t__3
                   [cont_18, (ErlangInt (DBI.fromInt 0)), seps_13])
            in
              case match_expr_27 of
                (ErlangTuple [head_25, tail_26]) ->
                  let   
                    arg_29 =
                      (BIF.do_remote_fun_call "Erlang.Unicode"
                         "erlps__characters_to_binary__1"
                         [(ErlangCons bin_0 used_21)])
                  in let tup_el_28 = (erlps__stack__2 [arg_29, head_25])
                  in (ErlangTuple [tup_el_28, tail_26])
                _ -> (EXC.badmatch match_expr_27)
          (ErlangCons sepstart_35 cont1_36) ->
            let
              case_37 =
                (erlps__bin_search_inv__3 [sepstart_35, cont1_36, gcs_3])
            in
              case case_37 of
                (ErlangTuple [(ErlangAtom "nomatch"), cont_41]) ->
                  let
                    match_expr_47 =
                      (erlps__take_t__3
                         [cont_41, (ErlangInt (DBI.fromInt 0)), seps_13])
                  in
                    case match_expr_47 of
                      (ErlangTuple [head_45, tail_46]) ->
                        let   
                          used_50 = (erlps__cp_prefix__2 [cont0_1, cont_41])
                        in let case_51 = (erlps__is_empty__1 [head_45])
                        in
                          case case_51 of
                            (ErlangAtom "true") ->
                              let    lop_53 = (BIF.erlang__byte_size__1 [bin_0])
                              in let
                                rop_55 =
                                  (BIF.erlang__byte_size__1 [sepstart_35])
                              in let
                                keepsz_57 =
                                  (BIF.erlang__op_minus [lop_53, rop_55])
                              in
                                case bin_0 of
                                  (ErlangBinary bin_c_58) | (ErlangInt size_59) <-
                                                              (keepsz_57)
                                                          , (BIN.Ok keep_61 bin_60) <-
                                                              ((BIN.chop_bin
                                                                  bin_c_58
                                                                  size_59 8))
                                                          , (ErlangInt size_62) <-
                                                              ((BIN.size
                                                                  bin_60))
                                                          , (BIN.Ok end_64 bin_63) <-
                                                              ((BIN.chop_bin
                                                                  bin_60 size_62
                                                                  8))
                                                          , (BIN.empty
                                                               bin_63) ->
                                    let   
                                      arg_68 =
                                        (erlps__stack__2 [end_64, used_50])
                                    in let
                                      tup_el_67 =
                                        (erlps__stack__2 [arg_68, tail_46])
                                    in (ErlangTuple [keep_61, tup_el_67])
                                  _ -> (EXC.badmatch bin_0)
                            (ErlangAtom "false") ->
                              let   
                                arg_73 =
                                  (BIF.do_remote_fun_call "Erlang.Unicode"
                                     "erlps__characters_to_binary__1"
                                     [(ErlangCons bin_0 used_50)])
                              in let
                                tup_el_72 = (erlps__stack__2 [arg_73, head_45])
                              in (ErlangTuple [tup_el_72, tail_46])
                            something_else -> (EXC.case_clause something_else)
                      _ -> (EXC.badmatch match_expr_47)
                (ErlangCons nonsep_79 cont_80) | ((ErlangAtom "true") ==
                                                    (falsifyErrors
                                                       (\ _ ->
                                                          (BIF.erlang__is_binary__1
                                                             [nonsep_79])))) ->
                  let    lop_82 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_84 = (BIF.erlang__byte_size__1 [nonsep_79])
                  in let keepsz_86 = (BIF.erlang__op_minus [lop_82, rop_84])
                  in
                    (erlps__take_t__3
                       [(ErlangCons bin_0 cont_80), keepsz_86, seps_13])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__take_t__3 [str_0, (ErlangInt num_1),
                  seps_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEList str_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_4 of
      (ErlangCons gc_6 cs1_7) ->
        let case_8 = (BIF.lists__member__2 [gc_6, gcs_2])
        in
          case case_8 of
            (ErlangAtom "true") ->
              let
                match_expr_16 =
                  (erlps__take_t__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in
                case match_expr_16 of
                  (ErlangTuple [head_14, tail_15]) ->
                    let case_17 = (erlps__is_empty__1 [head_14])
                    in
                      case case_17 of
                        (ErlangAtom "true") ->
                          let tup_el_20 = (erlps__append__2 [gc_6, tail_15])
                          in (ErlangTuple [head_14, tup_el_20])
                        (ErlangAtom "false") ->
                          let tup_el_23 = (erlps__append__2 [gc_6, head_14])
                          in (ErlangTuple [tup_el_23, tail_15])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_16)
            (ErlangAtom "false") ->
              let
                match_expr_32 =
                  (erlps__take_t__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in
                case match_expr_32 of
                  (ErlangTuple [head_30, tail_31]) ->
                    let tup_el_33 = (erlps__append__2 [gc_6, head_30])
                    in (ErlangTuple [tup_el_33, tail_31])
                  _ -> (EXC.badmatch match_expr_32)
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__take_t__3 [bin_0, n_1,
                  seps0_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_4) | (ErlangInt size_5) <- (n_1)
                           , (BIN.Ok _ bin_6) <-
                               ((BIN.chop_bin bin_c_4 size_5 8))
                           , (ErlangInt size_7) <- ((BIN.size bin_6))
                           , (BIN.Ok rest_9 bin_8) <-
                               ((BIN.chop_bin bin_6 size_7 8))
                           , (BIN.empty bin_8) ->
      let    seps_12 = (erlps__search_compile__1 [seps0_3])
      in let
        case_13 =
          (erlps__bin_search__3 [rest_9, ErlangEmptyList, seps_12])
      in
        case case_13 of
          (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
            let tup_el_18 = (ErlangBinary (BIN.concat []))
            in (ErlangTuple [bin_0, tup_el_18])
          (ErlangCons sepstart_19 (ErlangEmptyList)) ->
            let
              case_20 =
                (erlps__bin_search_inv__3 [sepstart_19, ErlangEmptyList, gcs_2])
            in
              case case_20 of
                (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
                  let    lop_24 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_26 = (BIF.erlang__byte_size__1 [sepstart_19])
                  in let keepsz_28 = (BIF.erlang__op_minus [lop_24, rop_26])
                  in
                    case bin_0 of
                      (ErlangBinary bin_c_29) | (ErlangInt size_30) <-
                                                  (keepsz_28)
                                              , (BIN.Ok before_32 bin_31) <-
                                                  ((BIN.chop_bin bin_c_29
                                                      size_30 8))
                                              , (ErlangInt size_33) <-
                                                  ((BIN.size bin_31))
                                              , (BIN.Ok end_35 bin_34) <-
                                                  ((BIN.chop_bin bin_31 size_33
                                                      8))
                                              , (BIN.empty bin_34) ->
                        (ErlangTuple [before_32, end_35])
                      _ -> (EXC.badmatch bin_0)
                (ErlangCons nonsep_39 (ErlangEmptyList)) ->
                  let    lop_40 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_42 = (BIF.erlang__byte_size__1 [nonsep_39])
                  in let keepsz_44 = (BIF.erlang__op_minus [lop_40, rop_42])
                  in (erlps__take_t__3 [bin_0, keepsz_44, seps_12])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__take_t__3 [arg_49, arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__take_t__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_tc__3 :: ErlangFun
erlps__take_tc__3 [(ErlangCons cp1_0 cont_2@(ErlangCons cp2_1 _)),
                   _, seps_4@(ErlangTuple [gcs_3, _, _])]
  | (((weakLt cp1_0 (ErlangInt (DBI.fromInt 256))) &&
        (weakLt cp2_1 (ErlangInt (DBI.fromInt 256)))) &&
       ((/=) cp1_0 (ErlangInt (DBI.fromInt 13)))) =
  let case_5 = (BIF.lists__member__2 [cp1_0, gcs_3])
  in
    case case_5 of
      (ErlangAtom "false") ->
        let
          match_expr_13 =
            (erlps__take_tc__3 [cont_2, (ErlangInt (DBI.fromInt 0)), seps_4])
        in
          case match_expr_13 of
            (ErlangTuple [head_11, tail_12]) ->
              let case_14 = (erlps__is_empty__1 [head_11])
              in
                case case_14 of
                  (ErlangAtom "true") ->
                    let tup_el_17 = (erlps__append__2 [cp1_0, tail_12])
                    in (ErlangTuple [head_11, tup_el_17])
                  (ErlangAtom "false") ->
                    let tup_el_20 = (erlps__append__2 [cp1_0, head_11])
                    in (ErlangTuple [tup_el_20, tail_12])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_13)
      (ErlangAtom "true") ->
        let
          match_expr_29 =
            (erlps__take_tc__3 [cont_2, (ErlangInt (DBI.fromInt 0)), seps_4])
        in
          case match_expr_29 of
            (ErlangTuple [head_27, tail_28]) ->
              let tup_el_30 = (erlps__append__2 [cp1_0, head_27])
              in (ErlangTuple [tup_el_30, tail_28])
            _ -> (EXC.badmatch match_expr_29)
      something_else -> (EXC.case_clause something_else)
erlps__take_tc__3 [(ErlangCons bin_0 cont0_1), n_2,
                   seps0_4@(ErlangTuple [gcs_3, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_5) | (ErlangInt size_6) <- (n_2)
                           , (BIN.Ok _ bin_7) <-
                               ((BIN.chop_bin bin_c_5 size_6 8))
                           , (ErlangInt size_8) <- ((BIN.size bin_7))
                           , (BIN.Ok rest_10 bin_9) <-
                               ((BIN.chop_bin bin_7 size_8 8))
                           , (BIN.empty bin_9) ->
      let
        case_12 = (erlps__bin_search_inv__3 [rest_10, cont0_1, gcs_3])
      in
        case case_12 of
          (ErlangTuple [(ErlangAtom "nomatch"), cont_16]) ->
            let    used_19 = (erlps__cp_prefix__2 [cont0_1, cont_16])
            in let
              match_expr_25 =
                (erlps__take_tc__3
                   [cont_16, (ErlangInt (DBI.fromInt 0)), seps0_4])
            in
              case match_expr_25 of
                (ErlangTuple [head_23, tail_24]) ->
                  let   
                    arg_27 =
                      (BIF.do_remote_fun_call "Erlang.Unicode"
                         "erlps__characters_to_binary__1"
                         [(ErlangCons bin_0 used_19)])
                  in let tup_el_26 = (erlps__stack__2 [arg_27, head_23])
                  in (ErlangTuple [tup_el_26, tail_24])
                _ -> (EXC.badmatch match_expr_25)
          (ErlangCons sepstart_33 cont1_34) ->
            let    seps_36 = (erlps__search_compile__1 [seps0_4])
            in let
              case_37 = (erlps__bin_search__3 [sepstart_33, cont1_34, seps_36])
            in
              case case_37 of
                (ErlangTuple [(ErlangAtom "nomatch"), cont_41]) ->
                  let
                    match_expr_47 =
                      (erlps__take_tc__3
                         [cont_41, (ErlangInt (DBI.fromInt 0)), seps_36])
                  in
                    case match_expr_47 of
                      (ErlangTuple [head_45, tail_46]) ->
                        let   
                          used_50 = (erlps__cp_prefix__2 [cont0_1, cont_41])
                        in let case_51 = (erlps__is_empty__1 [head_45])
                        in
                          case case_51 of
                            (ErlangAtom "true") ->
                              let    lop_53 = (BIF.erlang__byte_size__1 [bin_0])
                              in let
                                rop_55 =
                                  (BIF.erlang__byte_size__1 [sepstart_33])
                              in let
                                keepsz_57 =
                                  (BIF.erlang__op_minus [lop_53, rop_55])
                              in
                                case bin_0 of
                                  (ErlangBinary bin_c_58) | (ErlangInt size_59) <-
                                                              (keepsz_57)
                                                          , (BIN.Ok keep_61 bin_60) <-
                                                              ((BIN.chop_bin
                                                                  bin_c_58
                                                                  size_59 8))
                                                          , (ErlangInt size_62) <-
                                                              ((BIN.size
                                                                  bin_60))
                                                          , (BIN.Ok end_64 bin_63) <-
                                                              ((BIN.chop_bin
                                                                  bin_60 size_62
                                                                  8))
                                                          , (BIN.empty
                                                               bin_63) ->
                                    let   
                                      arg_68 =
                                        (erlps__stack__2 [end_64, used_50])
                                    in let
                                      tup_el_67 =
                                        (erlps__stack__2 [arg_68, tail_46])
                                    in (ErlangTuple [keep_61, tup_el_67])
                                  _ -> (EXC.badmatch bin_0)
                            (ErlangAtom "false") ->
                              let   
                                arg_73 =
                                  (BIF.do_remote_fun_call "Erlang.Unicode"
                                     "erlps__characters_to_binary__1"
                                     [(ErlangCons bin_0 used_50)])
                              in let
                                tup_el_72 = (erlps__stack__2 [arg_73, head_45])
                              in (ErlangTuple [tup_el_72, tail_46])
                            something_else -> (EXC.case_clause something_else)
                      _ -> (EXC.badmatch match_expr_47)
                (ErlangCons nonsep_79 cont_80) | ((ErlangAtom "true") ==
                                                    (falsifyErrors
                                                       (\ _ ->
                                                          (BIF.erlang__is_binary__1
                                                             [nonsep_79])))) ->
                  let    lop_82 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_84 = (BIF.erlang__byte_size__1 [nonsep_79])
                  in let keepsz_86 = (BIF.erlang__op_minus [lop_82, rop_84])
                  in
                    (erlps__take_tc__3
                       [(ErlangCons bin_0 cont_80), keepsz_86, seps_36])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__take_tc__3 [str_0, (ErlangInt num_1),
                   seps_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEList str_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [str_0])
  in
    case case_4 of
      (ErlangCons gc_6 cs1_7) ->
        let case_8 = (BIF.lists__member__2 [gc_6, gcs_2])
        in
          case case_8 of
            (ErlangAtom "false") ->
              let
                match_expr_16 =
                  (erlps__take_tc__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in
                case match_expr_16 of
                  (ErlangTuple [head_14, tail_15]) ->
                    let case_17 = (erlps__is_empty__1 [head_14])
                    in
                      case case_17 of
                        (ErlangAtom "true") ->
                          let tup_el_20 = (erlps__append__2 [gc_6, tail_15])
                          in (ErlangTuple [head_14, tup_el_20])
                        (ErlangAtom "false") ->
                          let tup_el_23 = (erlps__append__2 [gc_6, head_14])
                          in (ErlangTuple [tup_el_23, tail_15])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_16)
            (ErlangAtom "true") ->
              let
                match_expr_32 =
                  (erlps__take_tc__3
                     [cs1_7, (ErlangInt (DBI.fromInt 0)), seps_3])
              in
                case match_expr_32 of
                  (ErlangTuple [head_30, tail_31]) ->
                    let tup_el_33 = (erlps__append__2 [gc_6, head_30])
                    in (ErlangTuple [tup_el_33, tail_31])
                  _ -> (EXC.badmatch match_expr_32)
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__take_tc__3 [bin_0, n_1,
                   seps0_3@(ErlangTuple [gcs_2, _, _])]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  case bin_0 of
    (ErlangBinary bin_c_4) | (ErlangInt size_5) <- (n_1)
                           , (BIN.Ok _ bin_6) <-
                               ((BIN.chop_bin bin_c_4 size_5 8))
                           , (ErlangInt size_7) <- ((BIN.size bin_6))
                           , (BIN.Ok rest_9 bin_8) <-
                               ((BIN.chop_bin bin_6 size_7 8))
                           , (BIN.empty bin_8) ->
      let
        case_11 =
          (erlps__bin_search_inv__3 [rest_9, ErlangEmptyList, gcs_2])
      in
        case case_11 of
          (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
            let tup_el_16 = (ErlangBinary (BIN.concat []))
            in (ErlangTuple [bin_0, tup_el_16])
          (ErlangCons sepstart_17 (ErlangEmptyList)) ->
            let    seps_19 = (erlps__search_compile__1 [seps0_3])
            in let
              case_20 =
                (erlps__bin_search__3 [sepstart_17, ErlangEmptyList, seps_19])
            in
              case case_20 of
                (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
                  let    lop_24 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_26 = (BIF.erlang__byte_size__1 [sepstart_17])
                  in let keepsz_28 = (BIF.erlang__op_minus [lop_24, rop_26])
                  in
                    case bin_0 of
                      (ErlangBinary bin_c_29) | (ErlangInt size_30) <-
                                                  (keepsz_28)
                                              , (BIN.Ok before_32 bin_31) <-
                                                  ((BIN.chop_bin bin_c_29
                                                      size_30 8))
                                              , (ErlangInt size_33) <-
                                                  ((BIN.size bin_31))
                                              , (BIN.Ok end_35 bin_34) <-
                                                  ((BIN.chop_bin bin_31 size_33
                                                      8))
                                              , (BIN.empty bin_34) ->
                        (ErlangTuple [before_32, end_35])
                      _ -> (EXC.badmatch bin_0)
                (ErlangCons nonsep_39 (ErlangEmptyList)) ->
                  let    lop_40 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_42 = (BIF.erlang__byte_size__1 [nonsep_39])
                  in let keepsz_44 = (BIF.erlang__op_minus [lop_40, rop_42])
                  in (erlps__take_tc__3 [bin_0, keepsz_44, seps_19])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin_0)
erlps__take_tc__3 [arg_49, arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__take_tc__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prefix_1__2 :: ErlangFun
erlps__prefix_1__2 [cs0_0, (ErlangCons gc_1 (ErlangEmptyList))] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_0])
  in
    case case_2 of
      (ErlangCons gc_4 cs_5) | (gc_4 == gc_1) -> cs_5
      _ -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__prefix_1__2 [(ErlangCons cp_0 cs_1),
                    (ErlangCons pre_2 prer_3)]
  | (isEInt cp_0) =
  let case_4 = (BIF.erlang__op_exactEq [cp_0, pre_2])
  in
    case case_4 of
      (ErlangAtom "true") -> (erlps__prefix_1__2 [cs_1, prer_3])
      (ErlangAtom "false") -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__prefix_1__2 [(ErlangBinary bin_c_0),
                    (ErlangCons pre_7 prer_8)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok cs_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let case_9 = (BIF.erlang__op_exactEq [cp_3, pre_7])
  in
    case case_9 of
      (ErlangAtom "true") -> (erlps__prefix_1__2 [cs_6, prer_8])
      (ErlangAtom "false") -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__prefix_1__2 [cs0_0, (ErlangCons pre_1 prer_2)] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_3 of
      (ErlangCons pre_5 cs_6) | (pre_5 == pre_1) ->
        (erlps__prefix_1__2 [cs_6, prer_2])
      _ -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__prefix_1__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__prefix_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_1__6 :: ErlangFun
erlps__split_1__6 [cs0_2@(ErlangCons cp1_0 cs_1),
                   needle_4@(ErlangCons c_3 _), _, where_5, curr_6, acc_7]
  | (isEInt cp1_0) =
  let case_8 = (BIF.erlang__op_exactEq [cp1_0, c_3])
  in
    case case_8 of
      (ErlangAtom "true") ->
        let case_11 = (erlps__prefix_1__2 [cs0_2, needle_4])
        in
          case case_11 of
            (ErlangAtom "nomatch") ->
              let arg_18 = (erlps__append__2 [c_3, curr_6])
              in
                (erlps__split_1__6
                   [cs_1, needle_4, (ErlangInt (DBI.fromInt 0)), where_5,
                    arg_18, acc_7])
            rest_22 | ((==) where_5 (ErlangAtom "leading")) ->
              let head_23 = (erlps__rev__1 [curr_6])
              in (ErlangCons head_23 (ErlangCons rest_22 ErlangEmptyList))
            rest_28 | ((==) where_5 (ErlangAtom "trailing")) ->
              let head_37 = (erlps__rev__1 [curr_6])
              in
                (erlps__split_1__6
                   [cs_1, needle_4, (ErlangInt (DBI.fromInt 0)), where_5,
                    (ErlangCons c_3 curr_6),
                    (ErlangCons head_37 (ErlangCons rest_28 ErlangEmptyList))])
            rest_42 | ((==) where_5 (ErlangAtom "all")) ->
              let head_49 = (erlps__rev__1 [curr_6])
              in
                (erlps__split_1__6
                   [rest_42, needle_4, (ErlangInt (DBI.fromInt 0)), where_5,
                    ErlangEmptyList, (ErlangCons head_49 acc_7)])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let arg_56 = (erlps__append__2 [cp1_0, curr_6])
        in
          (erlps__split_1__6
             [cs_1, needle_4, (ErlangInt (DBI.fromInt 0)), where_5, arg_56,
              acc_7])
      something_else -> (EXC.case_clause something_else)
erlps__split_1__6 [(ErlangCons bin_0 cont0_1), needle_2, start_3,
                   where_4, curr0_5, acc_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_7 =
      (erlps__bin_search_str__4 [bin_0, start_3, cont0_1, needle_2])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "nomatch"), sz_12, cont_13]) ->
        case bin_0 of
          (ErlangBinary bin_c_14) | (ErlangInt size_15) <- (sz_12)
                                  , (BIN.Ok keep_17 bin_16) <-
                                      ((BIN.chop_bin bin_c_14 size_15 8))
                                  , (ErlangInt size_18) <- ((BIN.size bin_16))
                                  , (BIN.Ok _ bin_19) <-
                                      ((BIN.chop_bin bin_16 size_18 8))
                                  , (BIN.empty bin_19) ->
            (erlps__split_1__6
               [cont_13, needle_2, (ErlangInt (DBI.fromInt 0)), where_4,
                (ErlangCons keep_17 curr0_5), acc_6])
          _ -> (EXC.badmatch bin_0)
      (ErlangTuple [before_29, (ErlangCons cs0_30 cont_31),
                    after_32]) ->
        let curr_35 = (erlps__add_non_empty__2 [before_29, curr0_5])
        in
          case where_4 of
            (ErlangAtom "leading") ->
              let head_37 = (erlps__rev__1 [curr_35])
              in (ErlangCons head_37 (ErlangCons after_32 ErlangEmptyList))
            (ErlangAtom "trailing") ->
              case cs0_30 of
                (ErlangBinary bin_c_42) | size_43 <- ((DBI.fromInt 8))
                                        , (BIN.Ok _ bin_44) <-
                                            ((BIN.chop_int bin_c_42 size_43 1
                                                BIN.Big BIN.Unsigned))
                                        , (ErlangInt size_45) <-
                                            ((BIN.size bin_44))
                                        , (BIN.Ok cs_47 bin_46) <-
                                            ((BIN.chop_bin bin_44 size_45 8))
                                        , (BIN.empty bin_46) ->
                  let    lop_49 = (BIF.erlang__byte_size__1 [bin_0])
                  in let rop_51 = (BIF.erlang__byte_size__1 [cs_47])
                  in let next_53 = (BIF.erlang__op_minus [lop_49, rop_51])
                  in let head_62 = (erlps__rev__1 [curr_35])
                  in
                    (erlps__split_1__6
                       [(ErlangCons bin_0 cont_31), needle_2, next_53, where_4,
                        curr0_5,
                        (ErlangCons head_62
                           (ErlangCons after_32 ErlangEmptyList))])
                _ -> (EXC.badmatch cs0_30)
            (ErlangAtom "all") ->
              let head_73 = (erlps__rev__1 [curr_35])
              in
                (erlps__split_1__6
                   [after_32, needle_2, (ErlangInt (DBI.fromInt 0)), where_4,
                    ErlangEmptyList, (ErlangCons head_73 acc_6)])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__split_1__6 [cs0_0, needle_2@(ErlangCons c_1 _), _,
                   where_3, curr_4, acc_5]
  | (isEList cs0_0) =
  let
    case_6 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_6 of
      (ErlangCons c_8 cs_9) | (c_8 == c_1) ->
        let case_10 = (erlps__prefix_1__2 [cs0_0, needle_2])
        in
          case case_10 of
            (ErlangAtom "nomatch") ->
              let arg_17 = (erlps__append__2 [c_1, curr_4])
              in
                (erlps__split_1__6
                   [cs_9, needle_2, (ErlangInt (DBI.fromInt 0)), where_3,
                    arg_17, acc_5])
            rest_21 | ((==) where_3 (ErlangAtom "leading")) ->
              let head_22 = (erlps__rev__1 [curr_4])
              in (ErlangCons head_22 (ErlangCons rest_21 ErlangEmptyList))
            rest_27 | ((==) where_3 (ErlangAtom "trailing")) ->
              let head_36 = (erlps__rev__1 [curr_4])
              in
                (erlps__split_1__6
                   [cs_9, needle_2, (ErlangInt (DBI.fromInt 0)), where_3,
                    (ErlangCons c_1 curr_4),
                    (ErlangCons head_36 (ErlangCons rest_27 ErlangEmptyList))])
            rest_41 | ((==) where_3 (ErlangAtom "all")) ->
              let head_48 = (erlps__rev__1 [curr_4])
              in
                (erlps__split_1__6
                   [rest_41, needle_2, (ErlangInt (DBI.fromInt 0)), where_3,
                    ErlangEmptyList, (ErlangCons head_48 acc_5)])
            something_else -> (EXC.case_clause something_else)
      (ErlangCons other_51 cs_52) ->
        let arg_57 = (erlps__append__2 [other_51, curr_4])
        in
          (erlps__split_1__6
             [cs_52, needle_2, (ErlangInt (DBI.fromInt 0)), where_3, arg_57,
              acc_5])
      (ErlangEmptyList) ->
        let tup_el_61 = (erlps__rev__1 [curr_4])
        in (ErlangTuple [tup_el_61, acc_5])
      something_else -> (EXC.case_clause something_else)
erlps__split_1__6 [bin_0, needle_2@(ErlangCons _c_1 _), start_3,
                   where_4, curr0_5, acc_6]
  =
  let
    case_7 =
      (erlps__bin_search_str__4
         [bin_0, start_3, ErlangEmptyList, needle_2])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "nomatch"), _, _]) ->
        case bin_0 of
          (ErlangBinary bin_c_12) | (ErlangInt size_13) <- (start_3)
                                  , (BIN.Ok _ bin_14) <-
                                      ((BIN.chop_bin bin_c_12 size_13 8))
                                  , (ErlangInt size_15) <- ((BIN.size bin_14))
                                  , (BIN.Ok keep_17 bin_16) <-
                                      ((BIN.chop_bin bin_14 size_15 8))
                                  , (BIN.empty bin_16) ->
            let tup_el_19 = (erlps__rev__1 [(ErlangCons keep_17 curr0_5)])
            in (ErlangTuple [tup_el_19, acc_6])
          _ -> (EXC.badmatch bin_0)
      (ErlangTuple [before_24, (ErlangCons cs0_25 (ErlangEmptyList)),
                    after_26]) ->
        case where_4 of
          (ErlangAtom "leading") ->
            let head_28 = (erlps__rev__1 [(ErlangCons before_24 curr0_5)])
            in (ErlangCons head_28 (ErlangCons after_26 ErlangEmptyList))
          (ErlangAtom "trailing") ->
            case cs0_25 of
              (ErlangBinary bin_c_35) | size_36 <- ((DBI.fromInt 8))
                                      , (BIN.Ok _ bin_37) <-
                                          ((BIN.chop_int bin_c_35 size_36 1
                                              BIN.Big BIN.Unsigned))
                                      , (ErlangInt size_38) <-
                                          ((BIN.size bin_37))
                                      , (BIN.Ok cs_40 bin_39) <-
                                          ((BIN.chop_bin bin_37 size_38 8))
                                      , (BIN.empty bin_39) ->
                let    lop_42 = (BIF.erlang__byte_size__1 [bin_0])
                in let rop_44 = (BIF.erlang__byte_size__1 [cs_40])
                in let next_46 = (BIF.erlang__op_minus [lop_42, rop_44])
                in let head_53 = (erlps__btoken__2 [before_24, curr0_5])
                in
                  (erlps__split_1__6
                     [bin_0, needle_2, next_46, where_4, curr0_5,
                      (ErlangCons head_53
                         (ErlangCons after_26 ErlangEmptyList))])
              _ -> (EXC.badmatch cs0_25)
          (ErlangAtom "all") ->
            let    lop_59 = (BIF.erlang__byte_size__1 [bin_0])
            in let rop_61 = (BIF.erlang__byte_size__1 [after_26])
            in let next_63 = (BIF.erlang__op_minus [lop_59, rop_61])
            in
              case before_24 of
                (ErlangBinary bin_c_64) | (ErlangInt size_65) <- (start_3)
                                        , (BIN.Ok _ bin_66) <-
                                            ((BIN.chop_bin bin_c_64 size_65 8))
                                        , (ErlangInt size_67) <-
                                            ((BIN.size bin_66))
                                        , (BIN.Ok keep_69 bin_68) <-
                                            ((BIN.chop_bin bin_66 size_67 8))
                                        , (BIN.empty bin_68) ->
                  let head_80 = (erlps__rev__1 [(ErlangCons keep_69 curr0_5)])
                  in
                    (erlps__split_1__6
                       [bin_0, needle_2, next_63, where_4, ErlangEmptyList,
                        (ErlangCons head_80 acc_6)])
                _ -> (EXC.badmatch before_24)
          something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__split_1__6 [arg_83, arg_84, arg_85, arg_86, arg_87,
                   arg_88]
  =
  (EXC.function_clause unit)
erlps__split_1__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexemes_m__3 :: ErlangFun
erlps__lexemes_m__3 [cs0_1@(ErlangCons cp_0 _),
                     seps0_4@(ErlangTuple [gcs_2, cps_3, _]), ts_5]
  | (isEInt cp_0) =
  let case_6 = (BIF.lists__member__2 [cp_0, cps_3])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          match_expr_12 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_1])
        in
          case match_expr_12 of
            (ErlangCons gc_10 cs2_11) ->
              let case_13 = (BIF.lists__member__2 [gc_10, gcs_2])
              in
                case case_13 of
                  (ErlangAtom "true") ->
                    (erlps__lexemes_m__3 [cs2_11, seps0_4, ts_5])
                  (ErlangAtom "false") ->
                    let    seps_20 = (erlps__search_compile__1 [seps0_4])
                    in let
                      match_expr_26 =
                        (erlps__lexeme_pick__3
                           [cs0_1, seps_20, ErlangEmptyList])
                    in
                      case match_expr_26 of
                        (ErlangTuple [lexeme_24, rest_25]) ->
                          (erlps__lexemes_m__3
                             [rest_25, seps_20, (ErlangCons lexeme_24 ts_5)])
                        _ -> (EXC.badmatch match_expr_26)
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_12)
      (ErlangAtom "false") ->
        let    seps_33 = (erlps__search_compile__1 [seps0_4])
        in let
          match_expr_39 =
            (erlps__lexeme_pick__3 [cs0_1, seps_33, ErlangEmptyList])
        in
          case match_expr_39 of
            (ErlangTuple [lexeme_37, rest_38]) ->
              (erlps__lexemes_m__3
                 [rest_38, seps_33, (ErlangCons lexeme_37 ts_5)])
            _ -> (EXC.badmatch match_expr_39)
      something_else -> (EXC.case_clause something_else)
erlps__lexemes_m__3 [(ErlangCons bin_0 cont0_1),
                     seps0_3@(ErlangTuple [gcs_2, _, _]), ts_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let case_5 = (erlps__bin_search_inv__3 [bin_0, cont0_1, gcs_2])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "nomatch"), cont_9]) ->
        (erlps__lexemes_m__3 [cont_9, seps0_3, ts_4])
      cs_13 ->
        let    seps_15 = (erlps__search_compile__1 [seps0_3])
        in let
          match_expr_21 =
            (erlps__lexeme_pick__3 [cs_13, seps_15, ErlangEmptyList])
        in
          case match_expr_21 of
            (ErlangTuple [lexeme_19, rest_20]) ->
              (erlps__lexemes_m__3
                 [rest_20, seps_15, (ErlangCons lexeme_19 ts_4)])
            _ -> (EXC.badmatch match_expr_21)
      something_else -> (EXC.case_clause something_else)
erlps__lexemes_m__3 [cs0_0, seps0_2@(ErlangTuple [gcs_1, _, _]),
                     ts_3]
  | (isEList cs0_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_0])
  in
    case case_4 of
      (ErlangCons c_6 cs_7) ->
        let case_8 = (BIF.lists__member__2 [c_6, gcs_1])
        in
          case case_8 of
            (ErlangAtom "true") ->
              (erlps__lexemes_m__3 [cs_7, seps0_2, ts_3])
            (ErlangAtom "false") ->
              let    seps_15 = (erlps__search_compile__1 [seps0_2])
              in let
                match_expr_21 =
                  (erlps__lexeme_pick__3 [cs0_0, seps_15, ErlangEmptyList])
              in
                case match_expr_21 of
                  (ErlangTuple [lexeme_19, rest_20]) ->
                    (erlps__lexemes_m__3
                       [rest_20, seps_15, (ErlangCons lexeme_19 ts_3)])
                  _ -> (EXC.badmatch match_expr_21)
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ts_3])
      something_else -> (EXC.case_clause something_else)
erlps__lexemes_m__3 [bin_0, seps0_2@(ErlangTuple [gcs_1, _, _]),
                     ts_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_4 =
      (erlps__bin_search_inv__3 [bin_0, ErlangEmptyList, gcs_1])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ts_3])
      (ErlangCons cs_9 (ErlangEmptyList)) ->
        let    seps_11 = (erlps__search_compile__1 [seps0_2])
        in let
          match_expr_17 =
            (erlps__lexeme_pick__3 [cs_9, seps_11, ErlangEmptyList])
        in
          case match_expr_17 of
            (ErlangTuple [lexeme_15, rest_16]) ->
              let arg_20 = (erlps__add_non_empty__2 [lexeme_15, ts_3])
              in (erlps__lexemes_m__3 [rest_16, seps_11, arg_20])
            _ -> (EXC.badmatch match_expr_17)
      something_else -> (EXC.case_clause something_else)
erlps__lexemes_m__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__lexemes_m__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexeme_pick__3 :: ErlangFun
erlps__lexeme_pick__3 [cs0_2@(ErlangCons cp_0 cs1_1),
                       seps_5@(ErlangTuple [gcs_3, cps_4, _]), tkn_6]
  | (isEInt cp_0) =
  let case_7 = (BIF.lists__member__2 [cp_0, cps_4])
  in
    case case_7 of
      (ErlangAtom "true") ->
        let
          match_expr_13 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_2])
        in
          case match_expr_13 of
            (ErlangCons gc_11 cs2_12) ->
              let case_14 = (BIF.lists__member__2 [gc_11, gcs_3])
              in
                case case_14 of
                  (ErlangAtom "true") ->
                    let tup_el_17 = (erlps__rev__1 [tkn_6])
                    in (ErlangTuple [tup_el_17, cs2_12])
                  (ErlangAtom "false") ->
                    let    arg_23 = (erlps__rev__1 [gc_11])
                    in let arg_22 = (erlps__append__2 [arg_23, tkn_6])
                    in (erlps__lexeme_pick__3 [cs2_12, seps_5, arg_22])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_13)
      (ErlangAtom "false") ->
        (erlps__lexeme_pick__3 [cs1_1, seps_5, (ErlangCons cp_0 tkn_6)])
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_pick__3 [(ErlangCons bin_0 cont0_1), seps_2, tkn_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let case_4 = (erlps__bin_search__3 [bin_0, cont0_1, seps_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (erlps__lexeme_pick__3
           [cont0_1, seps_2, (ErlangCons bin_0 tkn_3)])
      cs_15@(ErlangCons left_13 _cont_14) ->
        let    lop_16 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_18 = (BIF.erlang__byte_size__1 [left_13])
        in let bytes_20 = (BIF.erlang__op_minus [lop_16, rop_18])
        in
          case bin_0 of
            (ErlangBinary bin_c_21) | (ErlangInt size_22) <- (bytes_20)
                                    , (BIN.Ok lexeme_24 bin_23) <-
                                        ((BIN.chop_bin bin_c_21 size_22 8))
                                    , (ErlangInt size_25) <- ((BIN.size bin_23))
                                    , (BIN.Ok _ bin_26) <-
                                        ((BIN.chop_bin bin_23 size_25 8))
                                    , (BIN.empty bin_26) ->
              let tup_el_28 = (erlps__btoken__2 [lexeme_24, tkn_3])
              in (ErlangTuple [tup_el_28, cs_15])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_pick__3 [cs0_0,
                       seps_3@(ErlangTuple [gcs_1, cps_2, _]), tkn_4]
  | (isEList cs0_0) =
  let
    case_5 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_5 of
      (ErlangCons cp_7 cs_8) ->
        let case_9 = (BIF.lists__member__2 [cp_7, cps_2])
        in
          case case_9 of
            (ErlangAtom "true") ->
              let
                match_expr_15 =
                  (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_0])
              in
                case match_expr_15 of
                  (ErlangCons gc_13 cs2_14) ->
                    let case_16 = (BIF.lists__member__2 [gc_13, gcs_1])
                    in
                      case case_16 of
                        (ErlangAtom "true") ->
                          let tup_el_19 = (erlps__rev__1 [tkn_4])
                          in (ErlangTuple [tup_el_19, cs2_14])
                        (ErlangAtom "false") ->
                          let    arg_25 = (erlps__rev__1 [gc_13])
                          in let arg_24 = (erlps__append__2 [arg_25, tkn_4])
                          in (erlps__lexeme_pick__3 [cs2_14, seps_3, arg_24])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_15)
            (ErlangAtom "false") ->
              let arg_30 = (erlps__append__2 [cp_7, tkn_4])
              in (erlps__lexeme_pick__3 [cs_8, seps_3, arg_30])
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) ->
        let tup_el_33 = (erlps__rev__1 [tkn_4])
        in (ErlangTuple [tup_el_33, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_pick__3 [bin_0, seps_1, tkn_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_3 = (erlps__bin_search__3 [bin_0, ErlangEmptyList, seps_1])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        let tup_el_7 = (erlps__btoken__2 [bin_0, tkn_2])
        in (ErlangTuple [tup_el_7, ErlangEmptyList])
      (ErlangCons left_11 (ErlangEmptyList)) ->
        let    lop_12 = (BIF.erlang__byte_size__1 [bin_0])
        in let rop_14 = (BIF.erlang__byte_size__1 [left_11])
        in let bytes_16 = (BIF.erlang__op_minus [lop_12, rop_14])
        in
          case bin_0 of
            (ErlangBinary bin_c_17) | (ErlangInt size_18) <- (bytes_16)
                                    , (BIN.Ok lexeme_20 bin_19) <-
                                        ((BIN.chop_bin bin_c_17 size_18 8))
                                    , (ErlangInt size_21) <- ((BIN.size bin_19))
                                    , (BIN.Ok _ bin_22) <-
                                        ((BIN.chop_bin bin_19 size_21 8))
                                    , (BIN.empty bin_22) ->
              let tup_el_24 = (erlps__btoken__2 [lexeme_20, tkn_2])
              in (ErlangTuple [tup_el_24, left_11])
            _ -> (EXC.badmatch bin_0)
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_pick__3 [arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__lexeme_pick__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nth_lexeme_m__3 :: ErlangFun
erlps__nth_lexeme_m__3 [(ErlangCons bin_0 cont0_1),
                        seps0_3@(ErlangTuple [gcs_2, _, _]), n_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let case_5 = (erlps__bin_search_inv__3 [bin_0, cont0_1, gcs_2])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "nomatch"), cont_9]) ->
        (erlps__nth_lexeme_m__3 [cont_9, seps0_3, n_4])
      cs_13 | (weakGt n_4 (ErlangInt (DBI.fromInt 1))) ->
        let    rest_16 = (erlps__lexeme_skip__2 [cs_13, seps0_3])
        in let
          arg_19 =
            (BIF.erlang__op_minus [n_4, (ErlangInt (DBI.fromInt 1))])
        in (erlps__nth_lexeme_m__3 [rest_16, seps0_3, arg_19])
      cs_22 ->
        let    seps_24 = (erlps__search_compile__1 [seps0_3])
        in let
          match_expr_29 =
            (erlps__lexeme_pick__3 [cs_22, seps_24, ErlangEmptyList])
        in
          case match_expr_29 of
            (ErlangTuple [lexeme_28, _]) -> lexeme_28
            _ -> (EXC.badmatch match_expr_29)
      something_else -> (EXC.case_clause something_else)
erlps__nth_lexeme_m__3 [cs0_0,
                        seps0_2@(ErlangTuple [gcs_1, _, _]), n_3]
  | (isEList cs0_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_0])
  in
    case case_4 of
      (ErlangCons c_6 cs_7) ->
        let case_8 = (BIF.lists__member__2 [c_6, gcs_1])
        in
          case case_8 of
            (ErlangAtom "true") ->
              (erlps__nth_lexeme_m__3 [cs_7, seps0_2, n_3])
            (ErlangAtom "false") | (weakGt n_3
                                      (ErlangInt (DBI.fromInt 1))) ->
              let    cs1_16 = (erlps__lexeme_skip__2 [cs_7, seps0_2])
              in let
                arg_19 =
                  (BIF.erlang__op_minus [n_3, (ErlangInt (DBI.fromInt 1))])
              in (erlps__nth_lexeme_m__3 [cs1_16, seps0_2, arg_19])
            (ErlangAtom "false") ->
              let    seps_23 = (erlps__search_compile__1 [seps0_2])
              in let
                match_expr_28 =
                  (erlps__lexeme_pick__3 [cs0_0, seps_23, ErlangEmptyList])
              in
                case match_expr_28 of
                  (ErlangTuple [lexeme_27, _]) -> lexeme_27
                  _ -> (EXC.badmatch match_expr_28)
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__nth_lexeme_m__3 [bin_0,
                        seps0_2@(ErlangTuple [gcs_1, _, _]), n_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let    seps_5 = (erlps__search_compile__1 [seps0_2])
  in let
    case_6 =
      (erlps__bin_search_inv__3 [bin_0, ErlangEmptyList, gcs_1])
  in
    case case_6 of
      (ErlangCons cs_10 (ErlangEmptyList)) | (weakGt n_3
                                                (ErlangInt (DBI.fromInt 1))) ->
        let    cs1_13 = (erlps__lexeme_skip__2 [cs_10, seps_5])
        in let
          arg_16 =
            (BIF.erlang__op_minus [n_3, (ErlangInt (DBI.fromInt 1))])
        in (erlps__nth_lexeme_m__3 [cs1_13, seps_5, arg_16])
      (ErlangCons cs_19 (ErlangEmptyList)) ->
        let
          match_expr_24 =
            (erlps__lexeme_pick__3 [cs_19, seps_5, ErlangEmptyList])
        in
          case match_expr_24 of
            (ErlangTuple [lexeme_23, _]) -> lexeme_23
            _ -> (EXC.badmatch match_expr_24)
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (ErlangBinary (BIN.concat []))
      something_else -> (EXC.case_clause something_else)
erlps__nth_lexeme_m__3 [arg_26, arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__nth_lexeme_m__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexeme_skip__2 :: ErlangFun
erlps__lexeme_skip__2 [cs0_2@(ErlangCons cp_0 cs1_1),
                       seps_5@(ErlangTuple [gcs_3, cps_4, _])]
  | (isEInt cp_0) =
  let case_6 = (BIF.lists__member__2 [cp_0, cps_4])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          match_expr_12 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_2])
        in
          case match_expr_12 of
            (ErlangCons gc_10 cs2_11) ->
              let case_13 = (BIF.lists__member__2 [gc_10, gcs_3])
              in
                case case_13 of
                  (ErlangAtom "true") -> cs2_11
                  (ErlangAtom "false") ->
                    (erlps__lexeme_skip__2 [cs2_11, seps_5])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_12)
      (ErlangAtom "false") -> (erlps__lexeme_skip__2 [cs1_1, seps_5])
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_skip__2 [(ErlangCons bin_0 cont0_1), seps0_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let    seps_4 = (erlps__search_compile__1 [seps0_2])
  in let case_5 = (erlps__bin_search__3 [bin_0, cont0_1, seps_4])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (erlps__lexeme_skip__2 [cont0_1, seps_4])
      cs_11 ->
        let
          arg_12 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs_11])
        in (BIF.erlang__tl__1 [arg_12])
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_skip__2 [cs0_0,
                       seps_3@(ErlangTuple [gcs_1, cps_2, _])]
  | (isEList cs0_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_4 of
      (ErlangCons cp_6 cs_7) ->
        let case_8 = (BIF.lists__member__2 [cp_6, cps_2])
        in
          case case_8 of
            (ErlangAtom "true") ->
              let
                match_expr_14 =
                  (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_0])
              in
                case match_expr_14 of
                  (ErlangCons gc_12 cs2_13) ->
                    let case_15 = (BIF.lists__member__2 [gc_12, gcs_1])
                    in
                      case case_15 of
                        (ErlangAtom "true") -> cs2_13
                        (ErlangAtom "false") ->
                          (erlps__lexeme_skip__2 [cs2_13, seps_3])
                        something_else -> (EXC.case_clause something_else)
                  _ -> (EXC.badmatch match_expr_14)
            (ErlangAtom "false") -> (erlps__lexeme_skip__2 [cs_7, seps_3])
            something_else -> (EXC.case_clause something_else)
      (ErlangEmptyList) -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_skip__2 [bin_0, seps0_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let    seps_3 = (erlps__search_compile__1 [seps0_1])
  in let
    case_4 = (erlps__bin_search__3 [bin_0, ErlangEmptyList, seps_3])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "nomatch"), _]) ->
        (ErlangBinary (BIN.concat []))
      (ErlangCons left_8 (ErlangEmptyList)) ->
        let
          arg_9 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [left_8])
        in (BIF.erlang__tl__1 [arg_9])
      something_else -> (EXC.case_clause something_else)
erlps__lexeme_skip__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__lexeme_skip__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_l__2 :: ErlangFun
erlps__find_l__2 [cs0_2@(ErlangCons c1_0 cs_1),
                  needle_4@(ErlangCons c_3 _)]
  | (isEInt c1_0) =
  case c1_0 of
    c_6 | (c_6 == c_3) ->
      let case_7 = (erlps__prefix_1__2 [cs0_2, needle_4])
      in
        case case_7 of
          (ErlangAtom "nomatch") -> (erlps__find_l__2 [cs_1, needle_4])
          _ -> cs0_2
          something_else -> (EXC.case_clause something_else)
    _ -> (erlps__find_l__2 [cs_1, needle_4])
    something_else -> (EXC.case_clause something_else)
erlps__find_l__2 [(ErlangCons bin_0 cont0_1), needle_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_3 =
      (erlps__bin_search_str__4
         [bin_0, (ErlangInt (DBI.fromInt 0)), cont0_1, needle_2])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "nomatch"), _, cont_8]) ->
        (erlps__find_l__2 [cont_8, needle_2])
      (ErlangTuple [_before_11, cs_12, _after_13]) -> cs_12
      something_else -> (EXC.case_clause something_else)
erlps__find_l__2 [cs0_0, needle_2@(ErlangCons c_1 _)]
  | (isEList cs0_0) =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_3 of
      (ErlangCons c_5 cs_6) | (c_5 == c_1) ->
        let case_7 = (erlps__prefix_1__2 [cs0_0, needle_2])
        in
          case case_7 of
            (ErlangAtom "nomatch") -> (erlps__find_l__2 [cs_6, needle_2])
            _ -> cs0_0
            something_else -> (EXC.case_clause something_else)
      (ErlangCons _c_12 cs_13) -> (erlps__find_l__2 [cs_13, needle_2])
      (ErlangEmptyList) -> (ErlangAtom "nomatch")
      something_else -> (EXC.case_clause something_else)
erlps__find_l__2 [bin_0, needle_1] =
  let
    case_2 =
      (erlps__bin_search_str__4
         [bin_0, (ErlangInt (DBI.fromInt 0)), ErlangEmptyList, needle_1])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "nomatch"), _, _]) ->
        (ErlangAtom "nomatch")
      (ErlangTuple [_before_7, (ErlangCons cs_8 (ErlangEmptyList)),
                    _after_9]) ->
        cs_8
      something_else -> (EXC.case_clause something_else)
erlps__find_l__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__find_l__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_r__3 :: ErlangFun
erlps__find_r__3 [cs0_2@(ErlangCons cp_0 cs_1),
                  needle_4@(ErlangCons c_3 _), res_5]
  | (isEInt cp_0) =
  case cp_0 of
    c_7 | (c_7 == c_3) ->
      let case_8 = (erlps__prefix_1__2 [cs0_2, needle_4])
      in
        case case_8 of
          (ErlangAtom "nomatch") ->
            (erlps__find_r__3 [cs_1, needle_4, res_5])
          _ -> (erlps__find_r__3 [cs_1, needle_4, cs0_2])
          something_else -> (EXC.case_clause something_else)
    _ -> (erlps__find_r__3 [cs_1, needle_4, res_5])
    something_else -> (EXC.case_clause something_else)
erlps__find_r__3 [(ErlangCons bin_0 cont0_1), needle_2, res_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  let
    case_4 =
      (erlps__bin_search_str__4
         [bin_0, (ErlangInt (DBI.fromInt 0)), cont0_1, needle_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "nomatch"), _, cont_9]) ->
        (erlps__find_r__3 [cont_9, needle_2, res_3])
      (ErlangTuple [_, cs0_13, _]) ->
        let
          match_expr_16 =
            (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [cs0_13])
        in
          case match_expr_16 of
            (ErlangCons _ cs_15) ->
              (erlps__find_r__3 [cs_15, needle_2, cs0_13])
            _ -> (EXC.badmatch match_expr_16)
      something_else -> (EXC.case_clause something_else)
erlps__find_r__3 [cs0_0, needle_2@(ErlangCons c_1 _), res_3]
  | (isEList cs0_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cs0_0])
  in
    case case_4 of
      (ErlangCons c_6 cs_7) | (c_6 == c_1) ->
        let case_8 = (erlps__prefix_1__2 [cs0_0, needle_2])
        in
          case case_8 of
            (ErlangAtom "nomatch") ->
              (erlps__find_r__3 [cs_7, needle_2, res_3])
            _ -> (erlps__find_r__3 [cs_7, needle_2, cs0_0])
            something_else -> (EXC.case_clause something_else)
      (ErlangCons _c_17 cs_18) ->
        (erlps__find_r__3 [cs_18, needle_2, res_3])
      (ErlangEmptyList) -> res_3
      something_else -> (EXC.case_clause something_else)
erlps__find_r__3 [bin_0, needle_1, res_2] =
  let
    case_3 =
      (erlps__bin_search_str__4
         [bin_0, (ErlangInt (DBI.fromInt 0)), ErlangEmptyList, needle_1])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "nomatch"), _, _]) -> res_2
      (ErlangTuple [_before_8, (ErlangCons cs0_9 (ErlangEmptyList)),
                    _after_10]) ->
        case cs0_9 of
          (ErlangBinary bin_c_11) | size_12 <- ((DBI.fromInt 8))
                                  , (BIN.Ok _ bin_13) <-
                                      ((BIN.chop_int bin_c_11 size_12 1 BIN.Big
                                          BIN.Unsigned))
                                  , (ErlangInt size_14) <- ((BIN.size bin_13))
                                  , (BIN.Ok cs_16 bin_15) <-
                                      ((BIN.chop_bin bin_13 size_14 8))
                                  , (BIN.empty bin_15) ->
            (erlps__find_r__3 [cs_16, needle_1, cs0_9])
          _ -> (EXC.badmatch cs0_9)
      something_else -> (EXC.case_clause something_else)
erlps__find_r__3 [arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__find_r__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__btoken__2 :: ErlangFun
erlps__btoken__2 [token_0, (ErlangEmptyList)] = token_0
erlps__btoken__2 [binpart_0, (ErlangCons c_1 (ErlangEmptyList))]
  | (isEInt c_1) =
  (ErlangBinary
     (BIN.concat
        [(BIN.from_int c_1 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.format_bin binpart_0 (BIN.packed_size binpart_0) 8)]))
erlps__btoken__2 [(ErlangBinary bin_e_0), tkn_1]
  | (BIN.empty bin_e_0) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [tkn_1])
erlps__btoken__2 [binpart_0, cs_1] =
  let
    head_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [cs_1])
  in (ErlangCons head_2 (ErlangCons binpart_0 ErlangEmptyList))
erlps__btoken__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__btoken__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rev__1 :: ErlangFun
erlps__rev__1 [(ErlangCons b_0 (ErlangEmptyList))]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [b_0])))) =
  b_0
erlps__rev__1 [l_0] | (isEList l_0) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__rev__1 [c_0] | (isEInt c_0) = c_0
erlps__rev__1 [arg_1] = (EXC.function_clause unit)
erlps__rev__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append__2 :: ErlangFun
erlps__append__2 [char_0, (ErlangBinary bin_e_1)]
  | (BIN.empty bin_e_1)
  , (isEInt char_0) =
  (ErlangCons char_0 ErlangEmptyList)
erlps__append__2 [char_0, (ErlangBinary bin_e_1)]
  | (BIN.empty bin_e_1)
  , (isEList char_0) =
  char_0
erlps__append__2 [char_0, bin_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_1])))) =
  (ErlangCons char_0 (ErlangCons bin_1 ErlangEmptyList))
erlps__append__2 [char_0, str_1] | (isEInt char_0) =
  (ErlangCons char_0 str_1)
erlps__append__2 [gc_0, str_1] | (isEList gc_0) =
  (BIF.erlang__op_append [gc_0, str_1])
erlps__append__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__append__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stack__2 :: ErlangFun
erlps__stack__2 [bin_0, (ErlangEmptyList)] = bin_0
erlps__stack__2 [(ErlangBinary bin_e_0), st_1]
  | (BIN.empty bin_e_0) =
  st_1
erlps__stack__2 [(ErlangEmptyList), st_0] = st_0
erlps__stack__2 [bin_0, st_1] = (ErlangCons bin_0 st_1)
erlps__stack__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__stack__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_non_empty__2 :: ErlangFun
erlps__add_non_empty__2 [(ErlangBinary bin_e_0), l_1]
  | (BIN.empty bin_e_0) =
  l_1
erlps__add_non_empty__2 [token_0, l_1] = (ErlangCons token_0 l_1)
erlps__add_non_empty__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__add_non_empty__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cp_prefix__2 :: ErlangFun
erlps__cp_prefix__2 [orig_0, cont_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [cont_1])
  in
    case case_2 of
      (ErlangEmptyList) -> orig_0
      (ErlangCons cp_4 rest_5) ->
        (erlps__cp_prefix_1__3 [orig_0, cp_4, rest_5])
      something_else -> (EXC.case_clause something_else)
erlps__cp_prefix__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__cp_prefix__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cp_prefix_1__3 :: ErlangFun
erlps__cp_prefix_1__3 [orig_0, until_1, cont_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1" [orig_0])
  in
    case case_3 of
      (ErlangCons until_5 rest_6) | (until_5 == until_1) ->
        let case_7 = (erlps__equal__2 [rest_6, cont_2])
        in
          case case_7 of
            (ErlangAtom "true") -> ErlangEmptyList
            (ErlangAtom "false") ->
              let tail_11 = (erlps__cp_prefix_1__3 [rest_6, until_1, cont_2])
              in (ErlangCons until_1 tail_11)
            something_else -> (EXC.case_clause something_else)
      (ErlangCons cp_15 rest_16) ->
        let tail_18 = (erlps__cp_prefix_1__3 [rest_16, until_1, cont_2])
        in (ErlangCons cp_15 tail_18)
      something_else -> (EXC.case_clause something_else)
erlps__cp_prefix_1__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__cp_prefix_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search__3 :: ErlangFun
erlps__bin_search__3 [bin_0, cont_1,
                      (ErlangTuple [seps_2, _, bp_3])]
  =
  (erlps__bin_search_loop__5
     [bin_0, (ErlangInt (DBI.fromInt 0)), bp_3, cont_1, seps_2])
erlps__bin_search__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__bin_search__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__search_pattern__1 :: ErlangFun
erlps__search_pattern__1 [p_0@(ErlangTuple [_, _, _])] = p_0
erlps__search_pattern__1 [seps_0] =
  let cps_2 = (erlps__search_cp__1 [seps_0])
  in (ErlangTuple [seps_0, cps_2, (ErlangAtom "undefined")])
erlps__search_pattern__1 [arg_6] = (EXC.function_clause unit)
erlps__search_pattern__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__search_compile__1 :: ErlangFun
erlps__search_compile__1 [(ErlangTuple [sep_0, cps_1,
                                        (ErlangAtom "undefined")])]
  =
  let    arg_5 = (erlps__bin_pattern__1 [cps_1])
  in let
    tup_el_4 =
      (BIF.do_remote_fun_call "Binary" "erlps__compile_pattern__1"
         [arg_5])
  in (ErlangTuple [sep_0, cps_1, tup_el_4])
erlps__search_compile__1 [compiled_0@(ErlangTuple [_, _, _])] =
  compiled_0
erlps__search_compile__1 [arg_1] = (EXC.function_clause unit)
erlps__search_compile__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__search_cp__1 :: ErlangFun
erlps__search_cp__1 [(ErlangCons cp_0 seps_1)] | (isEInt cp_0) =
  let tail_3 = (erlps__search_cp__1 [seps_1])
  in (ErlangCons cp_0 tail_3)
erlps__search_cp__1 [(ErlangCons pattern_0 seps_1)] =
  let
    match_expr_4 =
      (BIF.do_remote_fun_call "Unicode.Util" "erlps__cp__1"
         [pattern_0])
  in
    case match_expr_4 of
      (ErlangCons cp_3 _) ->
        let tail_6 = (erlps__search_cp__1 [seps_1])
        in (ErlangCons cp_3 tail_6)
      _ -> (EXC.badmatch match_expr_4)
erlps__search_cp__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__search_cp__1 [arg_0] = (EXC.function_clause unit)
erlps__search_cp__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_pattern__1 :: ErlangFun
erlps__bin_pattern__1 [(ErlangCons cp_0 seps_1)] =
  let   
    head_2 =
      (ErlangBinary
         (BIN.from_int cp_0 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let tail_4 = (erlps__bin_pattern__1 [seps_1])
  in (ErlangCons head_2 tail_4)
erlps__bin_pattern__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__bin_pattern__1 [arg_0] = (EXC.function_clause unit)
erlps__bin_pattern__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_loop__5 :: ErlangFun
erlps__bin_search_loop__5 [bin0_0, start_1, _, cont_2, _seps_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_7 = (BIF.erlang__byte_size__1 [bin0_0])
             in let lop_6 = (BIF.erlang__op_lesserEq [lop_7, start_1])
             in
               case lop_6 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_lesser
                      [start_1, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_6)))) =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_2])
erlps__bin_search_loop__5 [bin0_0, start_1, binseps_2, cont_3,
                           seps_4]
  =
  case bin0_0 of
    (ErlangBinary bin_c_5) | (ErlangInt size_6) <- (start_1)
                           , (BIN.Ok _ bin_7) <-
                               ((BIN.chop_bin bin_c_5 size_6 8))
                           , (ErlangInt size_8) <- ((BIN.size bin_7))
                           , (BIN.Ok bin_10 bin_9) <-
                               ((BIN.chop_bin bin_7 size_8 8))
                           , (BIN.empty bin_9) ->
      let
        case_12 =
          (BIF.do_remote_fun_call "Binary" "erlps__match__2"
             [bin_10, binseps_2])
      in
        case case_12 of
          (ErlangAtom "nomatch") ->
            (ErlangTuple [(ErlangAtom "nomatch"), cont_3])
          (ErlangTuple [where_17, _cl_18]) | ((==) cont_3
                                                ErlangEmptyList) ->
            case bin_10 of
              (ErlangBinary bin_c_19) | (ErlangInt size_20) <- (where_17)
                                      , (BIN.Ok _ bin_21) <-
                                          ((BIN.chop_bin bin_c_19 size_20 8))
                                      , (ErlangInt size_22) <-
                                          ((BIN.size bin_21))
                                      , (BIN.Ok cont1_24 bin_23) <-
                                          ((BIN.chop_bin bin_21 size_22 8))
                                      , (BIN.empty bin_23) ->
                let
                  match_expr_29 =
                    (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
                       [cont1_24])
                in
                  case match_expr_29 of
                    (ErlangCons gc_27 cont2_28) ->
                      let case_30 = (BIF.lists__member__2 [gc_27, seps_4])
                      in
                        case case_30 of
                          (ErlangAtom "false") | ((==) cont2_28
                                                    ErlangEmptyList) ->
                            (ErlangTuple
                               [(ErlangAtom "nomatch"), ErlangEmptyList])
                          (ErlangAtom "false") ->
                            let    lop_35 = (BIF.erlang__byte_size__1 [bin0_0])
                            in let
                              rop_37 = (BIF.erlang__byte_size__1 [cont2_28])
                            in let
                              next_39 = (BIF.erlang__op_minus [lop_35, rop_37])
                            in
                              (erlps__bin_search_loop__5
                                 [bin0_0, next_39, binseps_2, cont_3, seps_4])
                          (ErlangAtom "true") ->
                            (ErlangCons cont1_24 ErlangEmptyList)
                          something_else -> (EXC.case_clause something_else)
                    _ -> (EXC.badmatch match_expr_29)
              _ -> (EXC.badmatch bin_10)
          (ErlangTuple [where_47, _cl_48]) ->
            case bin_10 of
              (ErlangBinary bin_c_49) | (ErlangInt size_50) <- (where_47)
                                      , (BIN.Ok _ bin_51) <-
                                          ((BIN.chop_bin bin_c_49 size_50 8))
                                      , (ErlangInt size_52) <-
                                          ((BIN.size bin_51))
                                      , (BIN.Ok cont0_54 bin_53) <-
                                          ((BIN.chop_bin bin_51 size_52 8))
                                      , (BIN.empty bin_53) ->
                let
                  match_expr_62 =
                    (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
                       [(ErlangCons cont0_54 cont_3)])
                in
                  case match_expr_62 of
                    (ErlangCons gc_60 cont2_61) ->
                      let case_63 = (BIF.lists__member__2 [gc_60, seps_4])
                      in
                        case case_63 of
                          (ErlangAtom "false") ->
                            case cont2_61 of
                              (ErlangCons binr_67 cont_68) | (cont_68 == cont_3)
                                                           , ((ErlangAtom
                                                                 "true") ==
                                                                (falsifyErrors
                                                                   (\ _ ->
                                                                      (BIF.erlang__is_binary__1
                                                                         [binr_67])))) ->
                                let   
                                  lop_70 = (BIF.erlang__byte_size__1 [bin0_0])
                                in let
                                  rop_72 = (BIF.erlang__byte_size__1 [binr_67])
                                in let
                                  next_74 =
                                    (BIF.erlang__op_minus [lop_70, rop_72])
                                in
                                  (erlps__bin_search_loop__5
                                     [bin0_0, next_74, binseps_2, cont_3,
                                      seps_4])
                              _ ->
                                (ErlangTuple [(ErlangAtom "nomatch"), cont2_61])
                              something_else -> (EXC.case_clause something_else)
                          (ErlangAtom "true") -> (ErlangCons cont0_54 cont_3)
                          something_else -> (EXC.case_clause something_else)
                    _ -> (EXC.badmatch match_expr_62)
              _ -> (EXC.badmatch bin_10)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin0_0)
erlps__bin_search_loop__5 [arg_82, arg_83, arg_84, arg_85,
                           arg_86]
  =
  (EXC.function_clause unit)
erlps__bin_search_loop__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_inv__3 :: ErlangFun
erlps__bin_search_inv__3 [(ErlangBinary bin_e_0), cont_1, _]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_1])
erlps__bin_search_inv__3 [bin_0, cont_1,
                          (ErlangCons sep_2 (ErlangEmptyList))]
  =
  (erlps__bin_search_inv_1__3 [bin_0, cont_1, sep_2])
erlps__bin_search_inv__3 [bin_0, cont_1, seps_2] =
  (erlps__bin_search_inv_n__3 [bin_0, cont_1, seps_2])
erlps__bin_search_inv__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__bin_search_inv__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_inv_1__3 :: ErlangFun
erlps__bin_search_inv_1__3 [bin0_7@(ErlangBinary bin_c_0),
                            cont_8, sep_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok binrest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case binrest_6 of
    (ErlangBinary bin_c_11) | size_12 <- ((DBI.fromInt 8))
                            , (BIN.Ok cp2_14 bin_13) <-
                                ((BIN.chop_int bin_c_11 size_12 1 BIN.Big
                                    BIN.Unsigned))
                            , (ErlangInt size_15) <- ((BIN.size bin_13))
                            , (BIN.Ok _ bin_16) <-
                                ((BIN.chop_bin bin_13 size_15 8))
                            , (BIN.empty bin_16)
                            , (((weakLt cp1_3 (ErlangInt (DBI.fromInt 256))) &&
                                  (weakLt cp2_14
                                     (ErlangInt (DBI.fromInt 256)))) &&
                                 ((/=) cp1_3 (ErlangInt (DBI.fromInt 13)))) ->
      case cp1_3 of
        sep_18 | (sep_18 == sep_9) ->
          (erlps__bin_search_inv_1__3 [binrest_6, cont_8, sep_9])
        _ -> (ErlangCons bin0_7 cont_8)
        something_else -> (EXC.case_clause something_else)
    _ | ((==) cont_8 ErlangEmptyList) ->
      let
        case_24 =
          (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [bin0_7])
      in
        case case_24 of
          (ErlangCons sep_26 bin_27) | (sep_26 == sep_9) ->
            (erlps__bin_search_inv_1__3 [bin_27, cont_8, sep_9])
          _ -> (ErlangCons bin0_7 cont_8)
          something_else -> (EXC.case_clause something_else)
    _ ->
      let
        case_33 =
          (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
             [(ErlangCons bin0_7 cont_8)])
      in
        case case_33 of
          (ErlangCons sep_37 (ErlangCons bin_38 cont_39)) | (sep_37 ==
                                                               sep_9)
                                                          , (cont_39 == cont_8)
                                                          , ((ErlangAtom
                                                                "true") ==
                                                               (falsifyErrors
                                                                  (\ _ ->
                                                                     (BIF.erlang__is_binary__1
                                                                        [bin_38])))) ->
            (erlps__bin_search_inv_1__3 [bin_38, cont_8, sep_9])
          (ErlangCons sep_44 cs_45) | (sep_44 == sep_9) ->
            (ErlangTuple [(ErlangAtom "nomatch"), cs_45])
          _ -> (ErlangCons bin0_7 cont_8)
          something_else -> (EXC.case_clause something_else)
    something_else -> (EXC.case_clause something_else)
erlps__bin_search_inv_1__3 [(ErlangBinary bin_e_0), cont_1,
                            _sep_2]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_1])
erlps__bin_search_inv_1__3 [(ErlangEmptyList), cont_0, _sep_1] =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_0])
erlps__bin_search_inv_1__3 [bin_0, _, _] =
  let arg_1 = (ErlangTuple [(ErlangAtom "badarg"), bin_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__bin_search_inv_1__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__bin_search_inv_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_inv_n__3 :: ErlangFun
erlps__bin_search_inv_n__3 [bin0_7@(ErlangBinary bin_c_0),
                            cont_8, seps_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok cp1_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok binrest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  case binrest_6 of
    (ErlangBinary bin_c_11) | size_12 <- ((DBI.fromInt 8))
                            , (BIN.Ok cp2_14 bin_13) <-
                                ((BIN.chop_int bin_c_11 size_12 1 BIN.Big
                                    BIN.Unsigned))
                            , (ErlangInt size_15) <- ((BIN.size bin_13))
                            , (BIN.Ok _ bin_16) <-
                                ((BIN.chop_bin bin_13 size_15 8))
                            , (BIN.empty bin_16)
                            , (((weakLt cp1_3 (ErlangInt (DBI.fromInt 256))) &&
                                  (weakLt cp2_14
                                     (ErlangInt (DBI.fromInt 256)))) &&
                                 ((/=) cp1_3 (ErlangInt (DBI.fromInt 13)))) ->
      let case_17 = (BIF.lists__member__2 [cp1_3, seps_9])
      in
        case case_17 of
          (ErlangAtom "true") ->
            (erlps__bin_search_inv_n__3 [binrest_6, cont_8, seps_9])
          (ErlangAtom "false") -> (ErlangCons bin0_7 cont_8)
          something_else -> (EXC.case_clause something_else)
    _ | ((==) cont_8 ErlangEmptyList) ->
      let
        match_expr_28 =
          (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1" [bin0_7])
      in
        case match_expr_28 of
          (ErlangCons gc_26 bin_27) ->
            let case_29 = (BIF.lists__member__2 [gc_26, seps_9])
            in
              case case_29 of
                (ErlangAtom "true") ->
                  (erlps__bin_search_inv_n__3 [bin_27, cont_8, seps_9])
                (ErlangAtom "false") -> (ErlangCons bin0_7 cont_8)
                something_else -> (EXC.case_clause something_else)
          _ -> (EXC.badmatch match_expr_28)
    _ ->
      let
        match_expr_42 =
          (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
             [(ErlangCons bin0_7 cont_8)])
      in
        case match_expr_42 of
          (ErlangCons gc_40 cs0_41) ->
            let case_43 = (BIF.lists__member__2 [gc_40, seps_9])
            in
              case case_43 of
                (ErlangAtom "false") -> (ErlangCons bin0_7 cont_8)
                (ErlangAtom "true") ->
                  case cs0_41 of
                    (ErlangCons bin_49 cont_50) | (cont_50 == cont_8)
                                                , ((ErlangAtom "true") ==
                                                     (falsifyErrors
                                                        (\ _ ->
                                                           (BIF.erlang__is_binary__1
                                                              [bin_49])))) ->
                      (erlps__bin_search_inv_n__3 [bin_49, cont_8, seps_9])
                    _ -> (ErlangTuple [(ErlangAtom "nomatch"), cs0_41])
                    something_else -> (EXC.case_clause something_else)
                something_else -> (EXC.case_clause something_else)
          _ -> (EXC.badmatch match_expr_42)
    something_else -> (EXC.case_clause something_else)
erlps__bin_search_inv_n__3 [(ErlangBinary bin_e_0), cont_1,
                            _sep_2]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_1])
erlps__bin_search_inv_n__3 [(ErlangEmptyList), cont_0, _sep_1] =
  (ErlangTuple [(ErlangAtom "nomatch"), cont_0])
erlps__bin_search_inv_n__3 [bin_0, _, _] =
  let arg_1 = (ErlangTuple [(ErlangAtom "badarg"), bin_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__bin_search_inv_n__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__bin_search_inv_n__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_str__4 :: ErlangFun
erlps__bin_search_str__4 [bin0_0, start_1, (ErlangEmptyList),
                          searchcps_2]
  =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_binary__1" [searchcps_2])
  in let
    compiled_5 =
      (BIF.do_remote_fun_call "Binary" "erlps__compile_pattern__1"
         [arg_3])
  in
    (erlps__bin_search_str_1__4
       [bin0_0, start_1, compiled_5, searchcps_2])
erlps__bin_search_str__4 [bin0_0, start_1, cont_2,
                          searchcps_4@(ErlangCons cp_3 _)]
  =
  let   
    arg_5 =
      (ErlangBinary
         (BIN.from_int cp_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    first_7 =
      (BIF.do_remote_fun_call "Binary" "erlps__compile_pattern__1"
         [arg_5])
  in
    (erlps__bin_search_str_2__5
       [bin0_0, start_1, cont_2, first_7, searchcps_4])
erlps__bin_search_str__4 [arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__bin_search_str__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_str_1__4 :: ErlangFun
erlps__bin_search_str_1__4 [bin0_0, start_1, first_2,
                            searchcps_3]
  =
  case bin0_0 of
    (ErlangBinary bin_c_4) | (ErlangInt size_5) <- (start_1)
                           , (BIN.Ok _ bin_6) <-
                               ((BIN.chop_bin bin_c_4 size_5 8))
                           , (ErlangInt size_7) <- ((BIN.size bin_6))
                           , (BIN.Ok bin_9 bin_8) <-
                               ((BIN.chop_bin bin_6 size_7 8))
                           , (BIN.empty bin_8) ->
      let
        case_11 =
          (BIF.do_remote_fun_call "Binary" "erlps__match__2"
             [bin_9, first_2])
      in
        case case_11 of
          (ErlangAtom "nomatch") ->
            let tup_el_15 = (BIF.erlang__byte_size__1 [bin0_0])
            in
              (ErlangTuple
                 [(ErlangAtom "nomatch"), tup_el_15, ErlangEmptyList])
          (ErlangTuple [where0_18, _]) ->
            let where_21 = (BIF.erlang__op_plus [start_1, where0_18])
            in
              case bin0_0 of
                (ErlangBinary bin_c_22) | (ErlangInt size_23) <- (where_21)
                                        , (BIN.Ok keep_25 bin_24) <-
                                            ((BIN.chop_bin bin_c_22 size_23 8))
                                        , (ErlangInt size_26) <-
                                            ((BIN.size bin_24))
                                        , (BIN.Ok cs0_28 bin_27) <-
                                            ((BIN.chop_bin bin_24 size_26 8))
                                        , (BIN.empty bin_27) ->
                  let case_30 = (erlps__prefix_1__2 [cs0_28, searchcps_3])
                  in
                    case case_30 of
                      (ErlangAtom "nomatch") ->
                        case cs0_28 of
                          (ErlangBinary bin_c_33) | size_34 <- ((DBI.fromInt 8))
                                                  , (BIN.Ok _ bin_35) <-
                                                      ((BIN.chop_int bin_c_33
                                                          size_34 1 BIN.Big
                                                          BIN.Unsigned))
                                                  , (ErlangInt size_36) <-
                                                      ((BIN.size bin_35))
                                                  , (BIN.Ok cs_38 bin_37) <-
                                                      ((BIN.chop_bin bin_35
                                                          size_36 8))
                                                  , (BIN.empty bin_37) ->
                            let    lop_40 = (BIF.erlang__byte_size__1 [bin0_0])
                            in let rop_42 = (BIF.erlang__byte_size__1 [cs_38])
                            in let
                              keepsz_44 =
                                (BIF.erlang__op_minus [lop_40, rop_42])
                            in
                              (erlps__bin_search_str_1__4
                                 [bin0_0, keepsz_44, first_2, searchcps_3])
                          _ -> (EXC.badmatch cs0_28)
                      (ErlangEmptyList) ->
                        let tup_el_53 = (ErlangBinary (BIN.concat []))
                        in
                          (ErlangTuple
                             [keep_25, (ErlangCons cs0_28 ErlangEmptyList),
                              tup_el_53])
                      rest_54 ->
                        (ErlangTuple
                           [keep_25, (ErlangCons cs0_28 ErlangEmptyList),
                            rest_54])
                      something_else -> (EXC.case_clause something_else)
                _ -> (EXC.badmatch bin0_0)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin0_0)
erlps__bin_search_str_1__4 [arg_60, arg_61, arg_62, arg_63] =
  (EXC.function_clause unit)
erlps__bin_search_str_1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_search_str_2__5 :: ErlangFun
erlps__bin_search_str_2__5 [bin0_0, start_1, cont_2, first_3,
                            searchcps_4]
  =
  case bin0_0 of
    (ErlangBinary bin_c_5) | (ErlangInt size_6) <- (start_1)
                           , (BIN.Ok _ bin_7) <-
                               ((BIN.chop_bin bin_c_5 size_6 8))
                           , (ErlangInt size_8) <- ((BIN.size bin_7))
                           , (BIN.Ok bin_10 bin_9) <-
                               ((BIN.chop_bin bin_7 size_8 8))
                           , (BIN.empty bin_9) ->
      let
        case_12 =
          (BIF.do_remote_fun_call "Binary" "erlps__match__2"
             [bin_10, first_3])
      in
        case case_12 of
          (ErlangAtom "nomatch") ->
            let tup_el_16 = (BIF.erlang__byte_size__1 [bin0_0])
            in (ErlangTuple [(ErlangAtom "nomatch"), tup_el_16, cont_2])
          (ErlangTuple [where0_19, _]) ->
            let where_22 = (BIF.erlang__op_plus [start_1, where0_19])
            in
              case bin0_0 of
                (ErlangBinary bin_c_23) | (ErlangInt size_24) <- (where_22)
                                        , (BIN.Ok keep_26 bin_25) <-
                                            ((BIN.chop_bin bin_c_23 size_24 8))
                                        , (ErlangInt size_27) <-
                                            ((BIN.size bin_25))
                                        , (BIN.Ok cs0_29 bin_28) <-
                                            ((BIN.chop_bin bin_25 size_27 8))
                                        , (BIN.empty bin_28) ->
                  let
                    match_expr_34 =
                      (BIF.do_remote_fun_call "Unicode.Util" "erlps__gc__1"
                         [cs0_29])
                  in
                    case match_expr_34 of
                      (ErlangCons gc_32 cs_33) ->
                        let    arg_36 = (erlps__stack__2 [cs0_29, cont_2])
                        in let
                          case_35 = (erlps__prefix_1__2 [arg_36, searchcps_4])
                        in
                          case case_35 of
                            (ErlangAtom "nomatch") | ((ErlangAtom "true") ==
                                                        (falsifyErrors
                                                           (\ _ ->
                                                              (BIF.erlang__is_binary__1
                                                                 [cs_33])))) ->
                              let   
                                lop_41 = (BIF.erlang__byte_size__1 [bin0_0])
                              in let rop_43 = (BIF.erlang__byte_size__1 [cs_33])
                              in let
                                keepsz_45 =
                                  (BIF.erlang__op_minus [lop_41, rop_43])
                              in
                                (erlps__bin_search_str_2__5
                                   [bin0_0, keepsz_45, cont_2, first_3,
                                    searchcps_4])
                            (ErlangAtom "nomatch") ->
                              let
                                tup_el_53 =
                                  (erlps__stack__2
                                     [(ErlangCons gc_32 cs_33), cont_2])
                              in
                                (ErlangTuple
                                   [(ErlangAtom "nomatch"), where_22,
                                    tup_el_53])
                            (ErlangEmptyList) ->
                              let tup_el_62 = (ErlangBinary (BIN.concat []))
                              in
                                (ErlangTuple
                                   [keep_26, (ErlangCons cs0_29 cont_2),
                                    tup_el_62])
                            rest_63 ->
                              (ErlangTuple
                                 [keep_26, (ErlangCons cs0_29 cont_2), rest_63])
                            something_else -> (EXC.case_clause something_else)
                      _ -> (EXC.badmatch match_expr_34)
                _ -> (EXC.badmatch bin0_0)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch bin0_0)
erlps__bin_search_str_2__5 [arg_69, arg_70, arg_71, arg_72,
                            arg_73]
  =
  (EXC.function_clause unit)
erlps__bin_search_str_2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__len__1 :: ErlangFun
erlps__len__1 [s_0] = (BIF.erlang__length__1 [s_0])
erlps__len__1 [arg_2] = (EXC.function_clause unit)
erlps__len__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__concat__2 :: ErlangFun
erlps__concat__2 [s1_0, s2_1] =
  (BIF.erlang__op_append [s1_0, s2_1])
erlps__concat__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__concat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chr__2 :: ErlangFun
erlps__chr__2 [s_0, c_1] | (isEInt c_1) =
  (erlps__chr__3 [s_0, c_1, (ErlangInt (DBI.fromInt 1))])
erlps__chr__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__chr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chr__3 :: ErlangFun
erlps__chr__3 [(ErlangCons c_0 _cs_1), c_2, i_3] | (c_2 == c_0) =
  i_3
erlps__chr__3 [(ErlangCons _ cs_0), c_1, i_2] =
  let
    arg_5 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__chr__3 [cs_0, c_1, arg_5])
erlps__chr__3 [(ErlangEmptyList), _c_0, _i_1] =
  (ErlangInt (DBI.fromInt 0))
erlps__chr__3 [arg_2, arg_3, arg_4] = (EXC.function_clause unit)
erlps__chr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rchr__2 :: ErlangFun
erlps__rchr__2 [s_0, c_1] | (isEInt c_1) =
  (erlps__rchr__4
     [s_0, c_1, (ErlangInt (DBI.fromInt 1)),
      (ErlangInt (DBI.fromInt 0))])
erlps__rchr__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__rchr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rchr__4 :: ErlangFun
erlps__rchr__4 [(ErlangCons c_0 cs_1), c_2, i_3, _l_4]
  | (c_2 == c_0) =
  let
    arg_7 = (BIF.erlang__op_plus [i_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__rchr__4 [cs_1, c_0, arg_7, i_3])
erlps__rchr__4 [(ErlangCons _ cs_0), c_1, i_2, l_3] =
  let
    arg_6 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__rchr__4 [cs_0, c_1, arg_6, l_3])
erlps__rchr__4 [(ErlangEmptyList), _c_0, _i_1, l_2] = l_2
erlps__rchr__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__rchr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__str__2 :: ErlangFun
erlps__str__2 [s_0, sub_1] | (isEList sub_1) =
  (erlps__str__3 [s_0, sub_1, (ErlangInt (DBI.fromInt 1))])
erlps__str__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__str__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__str__3 :: ErlangFun
erlps__str__3 [(ErlangCons c_0 s_1), (ErlangCons c_2 sub_3), i_4]
  | (c_2 == c_0) =
  let case_5 = (erlps__l_prefix__2 [sub_3, s_1])
  in
    case case_5 of
      (ErlangAtom "true") -> i_4
      (ErlangAtom "false") ->
        let
          arg_12 = (BIF.erlang__op_plus [i_4, (ErlangInt (DBI.fromInt 1))])
        in (erlps__str__3 [s_1, (ErlangCons c_0 sub_3), arg_12])
      something_else -> (EXC.case_clause something_else)
erlps__str__3 [(ErlangCons _ s_0), sub_1, i_2] =
  let
    arg_5 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__str__3 [s_0, sub_1, arg_5])
erlps__str__3 [(ErlangEmptyList), _sub_0, _i_1] =
  (ErlangInt (DBI.fromInt 0))
erlps__str__3 [arg_2, arg_3, arg_4] = (EXC.function_clause unit)
erlps__str__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rstr__2 :: ErlangFun
erlps__rstr__2 [s_0, sub_1] | (isEList sub_1) =
  (erlps__rstr__4
     [s_0, sub_1, (ErlangInt (DBI.fromInt 1)),
      (ErlangInt (DBI.fromInt 0))])
erlps__rstr__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__rstr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rstr__4 :: ErlangFun
erlps__rstr__4 [(ErlangCons c_0 s_1), (ErlangCons c_2 sub_3),
                i_4, l_5]
  | (c_2 == c_0) =
  let case_6 = (erlps__l_prefix__2 [sub_3, s_1])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          arg_13 = (BIF.erlang__op_plus [i_4, (ErlangInt (DBI.fromInt 1))])
        in (erlps__rstr__4 [s_1, (ErlangCons c_0 sub_3), arg_13, i_4])
      (ErlangAtom "false") ->
        let
          arg_21 = (BIF.erlang__op_plus [i_4, (ErlangInt (DBI.fromInt 1))])
        in (erlps__rstr__4 [s_1, (ErlangCons c_0 sub_3), arg_21, l_5])
      something_else -> (EXC.case_clause something_else)
erlps__rstr__4 [(ErlangCons _ s_0), sub_1, i_2, l_3] =
  let
    arg_6 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__rstr__4 [s_0, sub_1, arg_6, l_3])
erlps__rstr__4 [(ErlangEmptyList), _sub_0, _i_1, l_2] = l_2
erlps__rstr__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__rstr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__l_prefix__2 :: ErlangFun
erlps__l_prefix__2 [(ErlangCons c_0 pre_1),
                    (ErlangCons c_2 string_3)]
  | (c_2 == c_0) =
  (erlps__l_prefix__2 [pre_1, string_3])
erlps__l_prefix__2 [(ErlangEmptyList), string_0]
  | (isEList string_0) =
  (ErlangAtom "true")
erlps__l_prefix__2 [pre_0, string_1]
  | ((isEList pre_0) && (isEList string_1)) =
  (ErlangAtom "false")
erlps__l_prefix__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__l_prefix__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__span__2 :: ErlangFun
erlps__span__2 [s_0, cs_1] | (isEList cs_1) =
  (erlps__span__3 [s_0, cs_1, (ErlangInt (DBI.fromInt 0))])
erlps__span__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__span__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__span__3 :: ErlangFun
erlps__span__3 [(ErlangCons c_0 s_1), cs_2, i_3] =
  let case_4 = (BIF.lists__member__2 [c_0, cs_2])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let
          arg_9 = (BIF.erlang__op_plus [i_3, (ErlangInt (DBI.fromInt 1))])
        in (erlps__span__3 [s_1, cs_2, arg_9])
      (ErlangAtom "false") -> i_3
      something_else -> (EXC.case_clause something_else)
erlps__span__3 [(ErlangEmptyList), _cs_0, i_1] = i_1
erlps__span__3 [arg_2, arg_3, arg_4] = (EXC.function_clause unit)
erlps__span__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cspan__2 :: ErlangFun
erlps__cspan__2 [s_0, cs_1] | (isEList cs_1) =
  (erlps__cspan__3 [s_0, cs_1, (ErlangInt (DBI.fromInt 0))])
erlps__cspan__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__cspan__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cspan__3 :: ErlangFun
erlps__cspan__3 [(ErlangCons c_0 s_1), cs_2, i_3] =
  let case_4 = (BIF.lists__member__2 [c_0, cs_2])
  in
    case case_4 of
      (ErlangAtom "true") -> i_3
      (ErlangAtom "false") ->
        let
          arg_9 = (BIF.erlang__op_plus [i_3, (ErlangInt (DBI.fromInt 1))])
        in (erlps__cspan__3 [s_1, cs_2, arg_9])
      something_else -> (EXC.case_clause something_else)
erlps__cspan__3 [(ErlangEmptyList), _cs_0, i_1] = i_1
erlps__cspan__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__cspan__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substr__2 :: ErlangFun
erlps__substr__2 [string_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1)))
  , (isEList string_0) =
  string_0
erlps__substr__2 [string_0, s_1]
  | ((isEInt s_1) && (weakGt s_1 (ErlangInt (DBI.fromInt 1)))) =
  (erlps__substr2__2 [string_0, s_1])
erlps__substr__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__substr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substr__3 :: ErlangFun
erlps__substr__3 [string_0, s_1, l_2]
  | ((((isEInt s_1) &&
         (weakGeq s_1 (ErlangInt (DBI.fromInt 1)))) &&
        (isEInt l_2)) &&
       (weakGeq l_2 (ErlangInt (DBI.fromInt 0)))) =
  let arg_3 = (erlps__substr2__2 [string_0, s_1])
  in (erlps__substr1__2 [arg_3, l_2])
erlps__substr__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__substr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substr1__2 :: ErlangFun
erlps__substr1__2 [(ErlangCons c_0 string_1), l_2]
  | (weakGt l_2 (ErlangInt (DBI.fromInt 0))) =
  let   
    arg_6 = (BIF.erlang__op_minus [l_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_4 = (erlps__substr1__2 [string_1, arg_6])
  in (ErlangCons c_0 tail_4)
erlps__substr1__2 [string_0, _l_1] | (isEList string_0) =
  ErlangEmptyList
erlps__substr1__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__substr1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substr2__2 :: ErlangFun
erlps__substr2__2 [string_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1)))
  , (isEList string_0) =
  string_0
erlps__substr2__2 [(ErlangCons _ string_0), s_1] =
  let
    arg_3 = (BIF.erlang__op_minus [s_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__substr2__2 [string_0, arg_3])
erlps__substr2__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__substr2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens__2 :: ErlangFun
erlps__tokens__2 [s_0, seps_1] =
  case seps_1 of
    (ErlangEmptyList) ->
      case s_0 of
        (ErlangEmptyList) -> ErlangEmptyList
        (ErlangCons _ _) -> (ErlangCons s_0 ErlangEmptyList)
        something_else -> (EXC.case_clause something_else)
    (ErlangCons c_6 (ErlangEmptyList)) ->
      let
        arg_7 =
          (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [s_0])
      in (erlps__tokens_single_1__3 [arg_7, c_6, ErlangEmptyList])
    (ErlangCons _ _) ->
      let
        arg_11 =
          (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [s_0])
      in
        (erlps__tokens_multiple_1__3 [arg_11, seps_1, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__tokens__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__tokens__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens_single_1__3 :: ErlangFun
erlps__tokens_single_1__3 [(ErlangCons sep_0 s_1), sep_2, toks_3]
  | (sep_2 == sep_0) =
  (erlps__tokens_single_1__3 [s_1, sep_0, toks_3])
erlps__tokens_single_1__3 [(ErlangCons c_0 s_1), sep_2, toks_3] =
  (erlps__tokens_single_2__4
     [s_1, sep_2, toks_3, (ErlangCons c_0 ErlangEmptyList)])
erlps__tokens_single_1__3 [(ErlangEmptyList), _, toks_0] = toks_0
erlps__tokens_single_1__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__tokens_single_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens_single_2__4 :: ErlangFun
erlps__tokens_single_2__4 [(ErlangCons sep_0 s_1), sep_2, toks_3,
                           tok_4]
  | (sep_2 == sep_0) =
  (erlps__tokens_single_1__3
     [s_1, sep_0, (ErlangCons tok_4 toks_3)])
erlps__tokens_single_2__4 [(ErlangCons c_0 s_1), sep_2, toks_3,
                           tok_4]
  =
  (erlps__tokens_single_2__4
     [s_1, sep_2, toks_3, (ErlangCons c_0 tok_4)])
erlps__tokens_single_2__4 [(ErlangEmptyList), _sep_0, toks_1,
                           tok_2]
  =
  (ErlangCons tok_2 toks_1)
erlps__tokens_single_2__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__tokens_single_2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens_multiple_1__3 :: ErlangFun
erlps__tokens_multiple_1__3 [(ErlangCons c_0 s_1), seps_2,
                             toks_3]
  =
  let case_4 = (BIF.lists__member__2 [c_0, seps_2])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (erlps__tokens_multiple_1__3 [s_1, seps_2, toks_3])
      (ErlangAtom "false") ->
        (erlps__tokens_multiple_2__4
           [s_1, seps_2, toks_3, (ErlangCons c_0 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__tokens_multiple_1__3 [(ErlangEmptyList), _seps_0, toks_1]
  =
  toks_1
erlps__tokens_multiple_1__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__tokens_multiple_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens_multiple_2__4 :: ErlangFun
erlps__tokens_multiple_2__4 [(ErlangCons c_0 s_1), seps_2,
                             toks_3, tok_4]
  =
  let case_5 = (BIF.lists__member__2 [c_0, seps_2])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (erlps__tokens_multiple_1__3
           [s_1, seps_2, (ErlangCons tok_4 toks_3)])
      (ErlangAtom "false") ->
        (erlps__tokens_multiple_2__4
           [s_1, seps_2, toks_3, (ErlangCons c_0 tok_4)])
      something_else -> (EXC.case_clause something_else)
erlps__tokens_multiple_2__4 [(ErlangEmptyList), _seps_0, toks_1,
                             tok_2]
  =
  (ErlangCons tok_2 toks_1)
erlps__tokens_multiple_2__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__tokens_multiple_2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chars__2 :: ErlangFun
erlps__chars__2 [c_0, n_1] =
  (erlps__chars__3 [c_0, n_1, ErlangEmptyList])
erlps__chars__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__chars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chars__3 :: ErlangFun
erlps__chars__3 [c_0, n_1, tail_2]
  | (weakGt n_1 (ErlangInt (DBI.fromInt 0))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__chars__3 [c_0, arg_4, (ErlangCons c_0 tail_2)])
erlps__chars__3 [c_0, (ErlangInt num_1), tail_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEInt c_0) =
  tail_2
erlps__chars__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__chars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__copies__2 :: ErlangFun
erlps__copies__2 [charlist_0, num_1]
  | (((isEList charlist_0) && (isEInt num_1)) &&
       (weakGeq num_1 (ErlangInt (DBI.fromInt 0)))) =
  (erlps__copies__3 [charlist_0, num_1, ErlangEmptyList])
erlps__copies__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__copies__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__copies__3 :: ErlangFun
erlps__copies__3 [_charlist_0, (ErlangInt num_1), r_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  r_2
erlps__copies__3 [charlist_0, num_1, r_2] =
  let   
    arg_4 =
      (BIF.erlang__op_minus [num_1, (ErlangInt (DBI.fromInt 1))])
  in let arg_7 = (BIF.erlang__op_append [charlist_0, r_2])
  in (erlps__copies__3 [charlist_0, arg_4, arg_7])
erlps__copies__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__copies__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__words__1 :: ErlangFun
erlps__words__1 [string_0] =
  (erlps__words__2 [string_0, (ErlangInt (DBI.fromInt 32))])
erlps__words__1 [arg_3] = (EXC.function_clause unit)
erlps__words__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__words__2 :: ErlangFun
erlps__words__2 [string_0, char_1] | (isEInt char_1) =
  let
    arg_2 = (erlps__strip__3 [string_0, (ErlangAtom "both"), char_1])
  in
    (erlps__w_count__3 [arg_2, char_1, (ErlangInt (DBI.fromInt 0))])
erlps__words__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__words__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__w_count__3 :: ErlangFun
erlps__w_count__3 [(ErlangEmptyList), _, num_0] =
  (BIF.erlang__op_plus [num_0, (ErlangInt (DBI.fromInt 1))])
erlps__w_count__3 [(ErlangCons h_0 t_1), h_2, num_3]
  | (h_2 == h_0) =
  let    arg_4 = (erlps__strip__3 [t_1, (ErlangAtom "left"), h_0])
  in let
    arg_9 =
      (BIF.erlang__op_plus [num_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__w_count__3 [arg_4, h_0, arg_9])
erlps__w_count__3 [(ErlangCons _h_0 t_1), char_2, num_3] =
  (erlps__w_count__3 [t_1, char_2, num_3])
erlps__w_count__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__w_count__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sub_word__2 :: ErlangFun
erlps__sub_word__2 [string_0, index_1] =
  (erlps__sub_word__3
     [string_0, index_1, (ErlangInt (DBI.fromInt 32))])
erlps__sub_word__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__sub_word__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sub_word__3 :: ErlangFun
erlps__sub_word__3 [string_0, index_1, char_2]
  | ((isEInt index_1) && (isEInt char_2)) =
  let case_3 = (erlps__words__2 [string_0, char_2])
  in
    case case_3 of
      num_6 | (weakLt num_6 index_1) -> ErlangEmptyList
      _num_7 ->
        let
          arg_8 = (erlps__strip__3 [string_0, (ErlangAtom "left"), char_2])
        in
          (erlps__s_word__5
             [arg_8, index_1, char_2, (ErlangInt (DBI.fromInt 1)),
              ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__sub_word__3 [arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__sub_word__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__s_word__5 :: ErlangFun
erlps__s_word__5 [(ErlangEmptyList), _, _, _, res_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [res_0])
erlps__s_word__5 [(ErlangCons char_0 _), index_1, char_2,
                  index_3, res_4]
  | (char_2 == char_0)
  , (index_3 == index_1) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [res_4])
erlps__s_word__5 [(ErlangCons h_0 t_1), index_2, char_3, index_4,
                  res_5]
  | (index_4 == index_2) =
  (erlps__s_word__5
     [t_1, index_2, char_3, index_2, (ErlangCons h_0 res_5)])
erlps__s_word__5 [(ErlangCons char_0 t_1), stop_2, char_3,
                  index_4, res_5]
  | (char_3 == char_0)
  , (weakLt index_4 stop_2) =
  let   
    arg_6 = (erlps__strip__3 [t_1, (ErlangAtom "left"), char_0])
  in let
    arg_12 =
      (BIF.erlang__op_plus [index_4, (ErlangInt (DBI.fromInt 1))])
  in (erlps__s_word__5 [arg_6, stop_2, char_0, arg_12, res_5])
erlps__s_word__5 [(ErlangCons _ t_0), stop_1, char_2, index_3,
                  res_4]
  | (weakLt index_3 stop_1) =
  (erlps__s_word__5 [t_0, stop_1, char_2, index_3, res_4])
erlps__s_word__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__s_word__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip__1 :: ErlangFun
erlps__strip__1 [string_0] =
  (erlps__strip__2 [string_0, (ErlangAtom "both")])
erlps__strip__1 [arg_3] = (EXC.function_clause unit)
erlps__strip__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip__2 :: ErlangFun
erlps__strip__2 [string_0, (ErlangAtom "left")] =
  (erlps__strip_left__2 [string_0, (ErlangInt (DBI.fromInt 32))])
erlps__strip__2 [string_0, (ErlangAtom "right")] =
  (erlps__strip_right__2 [string_0, (ErlangInt (DBI.fromInt 32))])
erlps__strip__2 [string_0, (ErlangAtom "both")] =
  let
    arg_1 =
      (erlps__strip_left__2 [string_0, (ErlangInt (DBI.fromInt 32))])
  in (erlps__strip_right__2 [arg_1, (ErlangInt (DBI.fromInt 32))])
erlps__strip__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__strip__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip__3 :: ErlangFun
erlps__strip__3 [string_0, (ErlangAtom "right"), char_1] =
  (erlps__strip_right__2 [string_0, char_1])
erlps__strip__3 [string_0, (ErlangAtom "left"), char_1] =
  (erlps__strip_left__2 [string_0, char_1])
erlps__strip__3 [string_0, (ErlangAtom "both"), char_1] =
  let arg_2 = (erlps__strip_left__2 [string_0, char_1])
  in (erlps__strip_right__2 [arg_2, char_1])
erlps__strip__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__strip__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip_left__2 :: ErlangFun
erlps__strip_left__2 [(ErlangCons sc_0 s_1), sc_2]
  | (sc_2 == sc_0) =
  (erlps__strip_left__2 [s_1, sc_0])
erlps__strip_left__2 [s_0@(ErlangCons _ _), sc_1]
  | (isEInt sc_1) =
  s_0
erlps__strip_left__2 [(ErlangEmptyList), sc_0] | (isEInt sc_0) =
  ErlangEmptyList
erlps__strip_left__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__strip_left__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strip_right__2 :: ErlangFun
erlps__strip_right__2 [(ErlangCons sc_0 s_1), sc_2]
  | (sc_2 == sc_0) =
  let case_3 = (erlps__strip_right__2 [s_1, sc_0])
  in
    case case_3 of
      (ErlangEmptyList) -> ErlangEmptyList
      t_6 -> (ErlangCons sc_0 t_6)
      something_else -> (EXC.case_clause something_else)
erlps__strip_right__2 [(ErlangCons c_0 s_1), sc_2] =
  let tail_4 = (erlps__strip_right__2 [s_1, sc_2])
  in (ErlangCons c_0 tail_4)
erlps__strip_right__2 [(ErlangEmptyList), sc_0] | (isEInt sc_0) =
  ErlangEmptyList
erlps__strip_right__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__strip_right__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__left__2 :: ErlangFun
erlps__left__2 [string_0, len_1] | (isEInt len_1) =
  (erlps__left__3 [string_0, len_1, (ErlangInt (DBI.fromInt 32))])
erlps__left__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__left__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__left__3 :: ErlangFun
erlps__left__3 [string_0, len_1, char_2] | (isEInt char_2) =
  let slen_4 = (BIF.erlang__length__1 [string_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt slen_4 len_1) ->
        (erlps__substr__3 [string_0, (ErlangInt (DBI.fromInt 1)), len_1])
      _ | (weakLt slen_4 len_1) ->
        let arg_9 = (BIF.erlang__op_minus [len_1, slen_4])
        in (erlps__l_pad__3 [string_0, arg_9, char_2])
      _ | ((==) slen_4 len_1) -> string_0
      _ -> (EXC.if_clause unit)
erlps__left__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__left__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__l_pad__3 :: ErlangFun
erlps__l_pad__3 [string_0, num_1, char_2] =
  let rop_4 = (erlps__chars__2 [char_2, num_1])
  in (BIF.erlang__op_append [string_0, rop_4])
erlps__l_pad__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__l_pad__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__right__2 :: ErlangFun
erlps__right__2 [string_0, len_1] | (isEInt len_1) =
  (erlps__right__3 [string_0, len_1, (ErlangInt (DBI.fromInt 32))])
erlps__right__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__right__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__right__3 :: ErlangFun
erlps__right__3 [string_0, len_1, char_2] | (isEInt char_2) =
  let slen_4 = (BIF.erlang__length__1 [string_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt slen_4 len_1) ->
        let    lop_7 = (BIF.erlang__op_minus [slen_4, len_1])
        in let
          arg_6 =
            (BIF.erlang__op_plus [lop_7, (ErlangInt (DBI.fromInt 1))])
        in (erlps__substr__2 [string_0, arg_6])
      _ | (weakLt slen_4 len_1) ->
        let arg_12 = (BIF.erlang__op_minus [len_1, slen_4])
        in (erlps__r_pad__3 [string_0, arg_12, char_2])
      _ | ((==) slen_4 len_1) -> string_0
      _ -> (EXC.if_clause unit)
erlps__right__3 [arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__right__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__r_pad__3 :: ErlangFun
erlps__r_pad__3 [string_0, num_1, char_2] =
  (erlps__chars__3 [char_2, num_1, string_0])
erlps__r_pad__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__r_pad__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__centre__2 :: ErlangFun
erlps__centre__2 [string_0, len_1] | (isEInt len_1) =
  (erlps__centre__3
     [string_0, len_1, (ErlangInt (DBI.fromInt 32))])
erlps__centre__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__centre__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__centre__3 :: ErlangFun
erlps__centre__3 [string_0, (ErlangInt num_1), char_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , ((isEList string_0) && (isEInt char_2)) =
  ErlangEmptyList
erlps__centre__3 [string_0, len_1, char_2] | (isEInt char_2) =
  let slen_4 = (BIF.erlang__length__1 [string_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt slen_4 len_1) ->
        let    lop_8 = (BIF.erlang__op_minus [slen_4, len_1])
        in let
          lop_7 =
            (BIF.erlang__op_div_strict [lop_8, (ErlangInt (DBI.fromInt 2))])
        in let
          arg_6 =
            (BIF.erlang__op_plus [lop_7, (ErlangInt (DBI.fromInt 1))])
        in (erlps__substr__3 [string_0, arg_6, len_1])
      _ | (weakLt slen_4 len_1) ->
        let    lop_14 = (BIF.erlang__op_minus [len_1, slen_4])
        in let
          n_18 =
            (BIF.erlang__op_div_strict [lop_14, (ErlangInt (DBI.fromInt 2))])
        in let rop_23 = (BIF.erlang__op_plus [slen_4, n_18])
        in let arg_21 = (BIF.erlang__op_minus [len_1, rop_23])
        in let arg_19 = (erlps__l_pad__3 [string_0, arg_21, char_2])
        in (erlps__r_pad__3 [arg_19, n_18, char_2])
      _ | ((==) slen_4 len_1) -> string_0
      _ -> (EXC.if_clause unit)
erlps__centre__3 [arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__centre__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sub_string__2 :: ErlangFun
erlps__sub_string__2 [string_0, start_1] =
  (erlps__substr__2 [string_0, start_1])
erlps__sub_string__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__sub_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sub_string__3 :: ErlangFun
erlps__sub_string__3 [string_0, start_1, stop_2] =
  let    lop_6 = (BIF.erlang__op_minus [stop_2, start_1])
  in let
    arg_5 =
      (BIF.erlang__op_plus [lop_6, (ErlangInt (DBI.fromInt 1))])
  in (erlps__substr__3 [string_0, start_1, arg_5])
erlps__sub_string__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__sub_string__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_lower_char__1 :: ErlangFun
erlps__to_lower_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 65)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 90)))) =
  (BIF.erlang__op_plus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_lower_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 192)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 214)))) =
  (BIF.erlang__op_plus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_lower_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 216)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 222)))) =
  (BIF.erlang__op_plus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_lower_char__1 [c_0] = c_0
erlps__to_lower_char__1 [arg_1] = (EXC.function_clause unit)
erlps__to_lower_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_upper_char__1 :: ErlangFun
erlps__to_upper_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 97)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 122)))) =
  (BIF.erlang__op_minus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_upper_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 224)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 246)))) =
  (BIF.erlang__op_minus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_upper_char__1 [c_0]
  | (((isEInt c_0) &&
        (weakLeq (ErlangInt (DBI.fromInt 248)) c_0)) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 254)))) =
  (BIF.erlang__op_minus [c_0, (ErlangInt (DBI.fromInt 32))])
erlps__to_upper_char__1 [c_0] = c_0
erlps__to_upper_char__1 [arg_1] = (EXC.function_clause unit)
erlps__to_upper_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_lower__1 :: ErlangFun
erlps__to_lower__1 [s_0] | (isEList s_0) =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          c_2 ->
            let lc_ret_4 = (erlps__to_lower_char__1 [c_2])
            in (ErlangCons lc_ret_4 ErlangEmptyList)
          _ -> ErlangEmptyList)
     s_0)
erlps__to_lower__1 [c_0] | (isEInt c_0) =
  (erlps__to_lower_char__1 [c_0])
erlps__to_lower__1 [arg_2] = (EXC.function_clause unit)
erlps__to_lower__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_upper__1 :: ErlangFun
erlps__to_upper__1 [s_0] | (isEList s_0) =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          c_2 ->
            let lc_ret_4 = (erlps__to_upper_char__1 [c_2])
            in (ErlangCons lc_ret_4 ErlangEmptyList)
          _ -> ErlangEmptyList)
     s_0)
erlps__to_upper__1 [c_0] | (isEInt c_0) =
  (erlps__to_upper_char__1 [c_0])
erlps__to_upper__1 [arg_2] = (EXC.function_clause unit)
erlps__to_upper__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__2 :: ErlangFun
erlps__join__2 [(ErlangEmptyList), sep_0] | (isEList sep_0) =
  ErlangEmptyList
erlps__join__2 [(ErlangCons h_0 t_1), sep_2] =
  let   
    arg_5 =
      (flmap
         (\ lc_8 ->
            case lc_8 of
              x_7 ->
                let lc_ret_9 = (BIF.erlang__op_append [sep_2, x_7])
                in (ErlangCons lc_ret_9 ErlangEmptyList)
              _ -> ErlangEmptyList)
         t_1)
  in let
    rop_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_5])
  in (BIF.erlang__op_append [h_0, rop_4])
erlps__join__2 [arg_12, arg_13] = (EXC.function_clause unit)
erlps__join__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)