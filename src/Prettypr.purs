module Prettypr(erlps__above__2, erlps__beside__2,
                erlps__best__3, erlps__break__1, erlps__empty__0,
                erlps__floating__1, erlps__floating__3, erlps__follow__2,
                erlps__follow__3, erlps__format__1, erlps__format__2,
                erlps__format__3, erlps__nest__2, erlps__par__1, erlps__par__2,
                erlps__sep__1, erlps__text__1, erlps__null_text__1,
                erlps__text_par__1, erlps__text_par__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__text__1 :: ErlangFun
erlps__text__1 [s_0] =
  let arg_1 = (erlps__string__1 [s_0])
  in (erlps__mktext__1 [arg_1])
erlps__text__1 [arg_3] = (EXC.function_clause unit)
erlps__text__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mktext__1 :: ErlangFun
erlps__mktext__1 [s_0] = (ErlangTuple [(ErlangAtom "text"), s_0])
erlps__mktext__1 [arg_3] = (EXC.function_clause unit)
erlps__mktext__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__null_text__1 :: ErlangFun
erlps__null_text__1 [s_0] =
  let arg_1 = (erlps__null_string__1 [s_0])
  in (erlps__mktext__1 [arg_1])
erlps__null_text__1 [arg_3] = (EXC.function_clause unit)
erlps__null_text__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__text_par__1 :: ErlangFun
erlps__text_par__1 [s_0] =
  (erlps__text_par__2 [s_0, (ErlangInt (DBI.fromInt 0))])
erlps__text_par__1 [arg_3] = (EXC.function_clause unit)
erlps__text_par__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__text_par__2 :: ErlangFun
erlps__text_par__2 [s_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let arg_2 = (erlps__words__1 [s_0])
  in (erlps__par__1 [arg_2])
erlps__text_par__2 [s_0, n_1]
  | (weakGt n_1 (ErlangInt (DBI.fromInt 0))) =
  let    arg_4 = (erlps__words__1 [s_0])
  in let arg_6 = (BIF.erlang__op_neg [n_1])
  in let arg_3 = (erlps__par__2 [arg_4, arg_6])
  in (erlps__nest__2 [n_1, arg_3])
erlps__text_par__2 [s_0, n_1]
  | (weakLt n_1 (ErlangInt (DBI.fromInt 0))) =
  let    arg_2 = (erlps__words__1 [s_0])
  in let arg_4 = (BIF.erlang__op_neg [n_1])
  in (erlps__par__2 [arg_2, arg_4])
erlps__text_par__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__text_par__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__words__1 :: ErlangFun
erlps__words__1 [s_0] =
  (erlps__words__3 [s_0, ErlangEmptyList, ErlangEmptyList])
erlps__words__1 [arg_4] = (EXC.function_clause unit)
erlps__words__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__words__3 :: ErlangFun
erlps__words__3 [(ErlangCons (ErlangInt num_0) cs_1), as_2, ws_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (erlps__words_1__3 [cs_1, as_2, ws_3])
erlps__words__3 [(ErlangCons (ErlangInt num_0) cs_1), as_2, ws_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__words_1__3 [cs_1, as_2, ws_3])
erlps__words__3 [(ErlangCons (ErlangInt num_0) cs_1), as_2, ws_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (erlps__words_1__3 [cs_1, as_2, ws_3])
erlps__words__3 [(ErlangCons c_0 cs_1), as_2, ws_3] =
  (erlps__words__3 [cs_1, (ErlangCons c_0 as_2), ws_3])
erlps__words__3 [(ErlangEmptyList), (ErlangEmptyList), ws_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ws_0])
erlps__words__3 [(ErlangEmptyList), as_0, ws_1] =
  (erlps__words_1__3 [ErlangEmptyList, as_0, ws_1])
erlps__words__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__words__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__words_1__3 :: ErlangFun
erlps__words_1__3 [cs_0, (ErlangEmptyList), ws_1] =
  (erlps__words__3 [cs_0, ErlangEmptyList, ws_1])
erlps__words_1__3 [cs_0, as_1, ws_2] =
  let   
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [as_1])
  in let head_6 = (erlps__text__1 [arg_7])
  in
    (erlps__words__3
       [cs_0, ErlangEmptyList, (ErlangCons head_6 ws_2)])
erlps__words_1__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__words_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__empty__0 :: ErlangFun
erlps__empty__0 [] = (ErlangAtom "null")
erlps__empty__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__break__1 :: ErlangFun
erlps__break__1 [d_0] =
  let arg_2 = (erlps__empty__0 [])
  in (erlps__above__2 [d_0, arg_2])
erlps__break__1 [arg_3] = (EXC.function_clause unit)
erlps__break__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nest__2 :: ErlangFun
erlps__nest__2 [n_0, d_1] =
  case (ErlangAtom "true") of
    _ | ((==) n_0 (ErlangInt (DBI.fromInt 0))) -> d_1
    _ -> (ErlangTuple [(ErlangAtom "nest"), n_0, d_1])
erlps__nest__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__nest__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__beside__2 :: ErlangFun
erlps__beside__2 [d1_0, d2_1] =
  (ErlangTuple [(ErlangAtom "beside"), d1_0, d2_1])
erlps__beside__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__beside__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__above__2 :: ErlangFun
erlps__above__2 [d1_0, d2_1] =
  (ErlangTuple [(ErlangAtom "above"), d1_0, d2_1])
erlps__above__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__above__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sep__1 :: ErlangFun
erlps__sep__1 [ds_0] =
  (ErlangTuple
     [(ErlangAtom "sep"), ds_0, (ErlangInt (DBI.fromInt 0)),
      (ErlangAtom "false")])
erlps__sep__1 [arg_5] = (EXC.function_clause unit)
erlps__sep__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__par__1 :: ErlangFun
erlps__par__1 [ds_0] =
  (erlps__par__2 [ds_0, (ErlangInt (DBI.fromInt 0))])
erlps__par__1 [arg_3] = (EXC.function_clause unit)
erlps__par__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__par__2 :: ErlangFun
erlps__par__2 [ds_0, n_1] =
  (erlps__mksep__3 [ds_0, n_1, (ErlangAtom "true")])
erlps__par__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__par__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mksep__3 :: ErlangFun
erlps__mksep__3 [ds_0, n_1, p_2] | (H.isEInt n_1) =
  (ErlangTuple [(ErlangAtom "sep"), ds_0, n_1, p_2])
erlps__mksep__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__mksep__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__follow__2 :: ErlangFun
erlps__follow__2 [d1_0, d2_1] =
  (erlps__follow__3 [d1_0, d2_1, (ErlangInt (DBI.fromInt 0))])
erlps__follow__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__follow__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__follow__3 :: ErlangFun
erlps__follow__3 [d1_0, d2_1, n_2] | (H.isEInt n_2) =
  let    head_7 = (erlps__nil__0 [])
  in let
    arg_3 =
      (erlps__par__2
         [(ErlangCons d1_0 (ErlangCons head_7 ErlangEmptyList)), n_2])
  in (erlps__beside__2 [arg_3, d2_1])
erlps__follow__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__follow__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__floating__1 :: ErlangFun
erlps__floating__1 [d_0] =
  (erlps__floating__3
     [d_0, (ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 0))])
erlps__floating__1 [arg_4] = (EXC.function_clause unit)
erlps__floating__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__floating__3 :: ErlangFun
erlps__floating__3 [d_0, h_1, v_2]
  | ((H.isEInt h_1) && (H.isEInt v_2)) =
  (ErlangTuple [(ErlangAtom "float"), d_0, h_1, v_2])
erlps__floating__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__floating__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__1 :: ErlangFun
erlps__format__1 [d_0] =
  (erlps__format__2 [d_0, (ErlangInt (DBI.fromInt 80))])
erlps__format__1 [arg_3] = (EXC.function_clause unit)
erlps__format__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__2 :: ErlangFun
erlps__format__2 [d_0, w_1] =
  (erlps__format__3 [d_0, w_1, (ErlangInt (DBI.fromInt 65))])
erlps__format__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__format__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__3 :: ErlangFun
erlps__format__3 [d_0, w_1, r_2] =
  let case_3 = (erlps__best__3 [d_0, w_1, r_2])
  in
    case case_3 of
      (ErlangAtom "empty") ->
        (BIF.erlang__throw__1 [(ErlangAtom "no_layout")])
      l_8 -> (erlps__layout__1 [l_8])
erlps__format__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__format__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__layout__1 :: ErlangFun
erlps__layout__1 [l_0] =
  let
    arg_1 =
      (erlps__layout__3
         [(ErlangInt (DBI.fromInt 0)), l_0, ErlangEmptyList])
  in (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_1])
erlps__layout__1 [arg_5] = (EXC.function_clause unit)
erlps__layout__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__layout__3 :: ErlangFun
erlps__layout__3 [n_0,
                  (ErlangTuple [(ErlangAtom "above"),
                                (ErlangTuple [(ErlangAtom "text"),
                                              (ErlangCons _ (ErlangEmptyList))]),
                                l_1]),
                  cs_2]
  =
  (erlps__layout__3
     [n_0, l_1, (ErlangCons (ErlangInt (DBI.fromInt 10)) cs_2)])
erlps__layout__3 [n_0,
                  (ErlangTuple [(ErlangAtom "above"),
                                (ErlangTuple [(ErlangAtom "text"), s_1]), l_2]),
                  cs_3]
  =
  let    arg_9 = (erlps__string_chars__1 [s_1])
  in let arg_11 = (erlps__indent__2 [n_0, cs_3])
  in let tail_8 = (erlps__flatrev__2 [arg_9, arg_11])
  in
    (erlps__layout__3
       [n_0, l_2, (ErlangCons (ErlangInt (DBI.fromInt 10)) tail_8)])
erlps__layout__3 [n_0,
                  (ErlangTuple [(ErlangAtom "nest"), n1_1, l_2]), cs_3]
  =
  let arg_4 = (BIF.erlang__op_plus [n_0, n1_1])
  in (erlps__layout__3 [arg_4, l_2, cs_3])
erlps__layout__3 [n_0, (ErlangTuple [(ErlangAtom "text"), s_1]),
                  cs_2]
  =
  let    arg_3 = (erlps__string_chars__1 [s_1])
  in let arg_5 = (erlps__indent__2 [n_0, cs_2])
  in (erlps__flatrev__2 [arg_3, arg_5])
erlps__layout__3 [_n_0, (ErlangAtom "null"), cs_1] = cs_1
erlps__layout__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__layout__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__2 :: ErlangFun
erlps__indent__2 [n_0, cs_1]
  | (weakGt n_0 (ErlangInt (DBI.fromInt 0))) =
  let
    arg_2 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__indent__2
       [arg_2, (ErlangCons (ErlangInt (DBI.fromInt 32)) cs_1)])
erlps__indent__2 [_n_0, cs_1] = cs_1
erlps__indent__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__indent__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatrev__2 :: ErlangFun
erlps__flatrev__2 [cs_0, as_1] =
  (erlps__flatrev__3 [cs_0, as_1, ErlangEmptyList])
erlps__flatrev__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__flatrev__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatrev__3 :: ErlangFun
erlps__flatrev__3 [(ErlangCons c_0@(ErlangCons _ _) cs_1), as_2,
                   ss_3]
  =
  (erlps__flatrev__3 [c_0, as_2, (ErlangCons cs_1 ss_3)])
erlps__flatrev__3 [(ErlangCons (ErlangEmptyList) cs_0), as_1,
                   ss_2]
  =
  (erlps__flatrev__3 [cs_0, as_1, ss_2])
erlps__flatrev__3 [(ErlangCons c_0 cs_1), as_2, ss_3] =
  (erlps__flatrev__3 [cs_1, (ErlangCons c_0 as_2), ss_3])
erlps__flatrev__3 [(ErlangEmptyList), as_0,
                   (ErlangCons s_1 ss_2)]
  =
  (erlps__flatrev__3 [s_1, as_0, ss_2])
erlps__flatrev__3 [(ErlangEmptyList), as_0, (ErlangEmptyList)] =
  as_0
erlps__flatrev__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__flatrev__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__best__3 :: ErlangFun
erlps__best__3 [d_0, w_1, r_2] =
  let
    arg_4 =
      (ErlangTuple
         [(ErlangAtom "c_best_nest"), w_1, r_2,
          (ErlangInt (DBI.fromInt 0))])
  in (erlps__rewrite__2 [d_0, arg_4])
erlps__best__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__best__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rewrite__2 :: ErlangFun
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "text"), s_0]), c_1]
  =
  case c_1 of
    (ErlangTuple [(ErlangAtom "c_best_nest"), _, _, n_3]) ->
      let arg_5 = (erlps__mktext__1 [s_0])
      in (erlps__nest__2 [n_3, arg_5])
    (ErlangTuple [(ErlangAtom "c_above_nest"), d1_7, n1_8, c1_9]) ->
      case c1_9 of
        (ErlangTuple [(ErlangAtom "c_best_nest"), w_11, r_12, n_13]) ->
          let    arg_16 = (erlps__mktext__1 [s_0])
          in let tup_el_22 = (BIF.erlang__op_minus [w_11, n_13])
          in let
            arg_20 =
              (ErlangTuple [(ErlangAtom "c_best_nest"), tup_el_22, r_12, n1_8])
          in let arg_18 = (erlps__rewrite__2 [d1_7, arg_20])
          in let arg_15 = (erlps__above__2 [arg_16, arg_18])
          in (erlps__nest__2 [n_13, arg_15])
        (ErlangTuple [(ErlangAtom "c_beside"), d2_27, c2_28]) ->
          let    arg_30 = (erlps__mktext__1 [s_0])
          in let arg_34 = (erlps__beside__2 [d1_7, d2_27])
          in let arg_32 = (erlps__nest__2 [n1_8, arg_34])
          in let arg_29 = (erlps__above__2 [arg_30, arg_32])
          in (erlps__rewrite__2 [arg_29, c2_28])
        (ErlangTuple [(ErlangAtom "c_text_beside"), s1_38, c2_39]) ->
          let    arg_42 = (erlps__concat__2 [s1_38, s_0])
          in let arg_41 = (erlps__mktext__1 [arg_42])
          in let rop_48 = (erlps__width__1 [s1_38])
          in let arg_46 = (BIF.erlang__op_plus [n1_8, rop_48])
          in let arg_45 = (erlps__nest__2 [arg_46, d1_7])
          in let arg_40 = (erlps__above__2 [arg_41, arg_45])
          in (erlps__rewrite__2 [arg_40, c2_39])
        (ErlangTuple [(ErlangAtom "c_sep_nest"), ds_52, n_53, _,
                      c2_54]) ->
          let case_55 = (erlps__is_empty_string__1 [s_0])
          in
            case case_55 of
              (ErlangAtom "false") ->
                let    w_58 = (erlps__width__1 [s_0])
                in let arg_60 = (erlps__mktext__1 [s_0])
                in let arg_65 = (erlps__nil__0 [])
                in let arg_67 = (BIF.erlang__op_minus [n1_8, w_58])
                in let arg_66 = (erlps__nest__2 [arg_67, d1_7])
                in let head_64 = (erlps__above__2 [arg_65, arg_66])
                in let arg_72 = (BIF.erlang__op_minus [n_53, w_58])
                in let
                  arg_75 =
                    case c1_9 of
                      (ErlangTuple arr_78) | (DM.Just field_77) <-
                                               ((arr_78 DA.!! 3)) ->
                        field_77
                      _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
                in let
                  arg_62 =
                    (erlps__mksep__3
                       [(ErlangCons head_64 ds_52), arg_72, arg_75])
                in let arg_59 = (erlps__beside__2 [arg_60, arg_62])
                in (erlps__rewrite__2 [arg_59, c2_54])
              (ErlangAtom "true") ->
                let
                  case_80 =
                    case c1_9 of
                      (ErlangTuple arr_83) | (DM.Just field_82) <-
                                               ((arr_83 DA.!! 3)) ->
                        field_82
                      _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
                in
                  case case_80 of
                    (ErlangAtom "false") ->
                      let    arg_86 = (erlps__nil__0 [])
                      in let arg_87 = (erlps__nest__2 [n1_8, d1_7])
                      in let arg_85 = (erlps__above__2 [arg_86, arg_87])
                      in let
                        arg_84 = (erlps__expand_sep__3 [arg_85, ds_52, n_53])
                      in (erlps__rewrite__2 [arg_84, c2_54])
                    (ErlangAtom "true") ->
                      let    arg_95 = (erlps__nil__0 [])
                      in let arg_96 = (erlps__nest__2 [n1_8, d1_7])
                      in let arg_94 = (erlps__above__2 [arg_95, arg_96])
                      in let
                        arg_93 = (erlps__expand_par__3 [arg_94, ds_52, n_53])
                      in (erlps__rewrite__2 [arg_93, c2_54])
                    something_else -> (EXC.case_clause something_else)
              something_else -> (EXC.case_clause something_else)
        (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_102, r_103, n_104,
                      d_105]) ->
          let    l_107 = (erlps__width__1 [s_0])
          in let lop_110 = (BIF.erlang__op_plus [l_107, n_104])
          in let lop_109 = (BIF.erlang__op_greater [lop_110, w_102])
          in let rop_114 = (BIF.erlang__op_greater [l_107, r_103])
          in let case_108 = (BIF.erlang__op_or [lop_109, rop_114])
          in
            case case_108 of
              (ErlangAtom "true") ->
                let
                  arg_118 =
                    (ErlangTuple
                       [(ErlangAtom "c_best_nest"), w_102, r_103, n_104])
                in (erlps__rewrite__2 [d_105, arg_118])
              (ErlangAtom "false") ->
                let    arg_124 = (erlps__mktext__1 [s_0])
                in let arg_126 = (erlps__nest__2 [n1_8, d1_7])
                in let arg_123 = (erlps__above__2 [arg_124, arg_126])
                in let
                  arg_129 =
                    (ErlangTuple
                       [(ErlangAtom "c_best_nest"), w_102, r_103, n_104])
                in (erlps__rewrite__2 [arg_123, arg_129])
              something_else -> (EXC.case_clause something_else)
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_134, _, _,
                      c2_135]) ->
          let    arg_139 = (erlps__mktext__1 [s_0])
          in let arg_141 = (erlps__nest__2 [n1_8, d1_7])
          in let arg_138 = (erlps__above__2 [arg_139, arg_141])
          in let arg_136 = (erlps__beside__2 [d2_134, arg_138])
          in (erlps__rewrite__2 [arg_136, c2_135])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_145, _, _,
                      n2_146, c2_147]) ->
          let    arg_153 = (erlps__mktext__1 [s_0])
          in let arg_155 = (erlps__nest__2 [n1_8, d1_7])
          in let arg_152 = (erlps__above__2 [arg_153, arg_155])
          in let arg_150 = (erlps__nest__2 [n2_146, arg_152])
          in let arg_148 = (erlps__above__2 [d2_145, arg_150])
          in (erlps__rewrite__2 [arg_148, c2_147])
        (ErlangTuple [(ErlangAtom "c_above_nest"), _, _, _]) ->
          (BIF.erlang__exit__1 [(ErlangAtom "badarg")])
        (ErlangTuple [(ErlangAtom "c_fit"), _]) ->
          (BIF.erlang__exit__1 [(ErlangAtom "badarg")])
        something_else -> (EXC.case_clause something_else)
    (ErlangTuple [(ErlangAtom "c_beside"), d1_161, c1_162]) ->
      case c1_162 of
        (ErlangTuple [(ErlangAtom "c_above_nest"), d2_164, n_165,
                      c2_166]) ->
          let case_167 = (erlps__is_empty_string__1 [s_0])
          in
            case case_167 of
              (ErlangAtom "false") ->
                let    w_170 = (erlps__width__1 [s_0])
                in let arg_172 = (erlps__mktext__1 [s_0])
                in let arg_176 = (erlps__nil__0 [])
                in let arg_175 = (erlps__beside__2 [arg_176, d1_161])
                in let arg_179 = (BIF.erlang__op_minus [n_165, w_170])
                in let arg_178 = (erlps__nest__2 [arg_179, d2_164])
                in let arg_174 = (erlps__above__2 [arg_175, arg_178])
                in let arg_171 = (erlps__beside__2 [arg_172, arg_174])
                in (erlps__rewrite__2 [arg_171, c2_166])
              (ErlangAtom "true") ->
                let
                  arg_185 =
                    (ErlangTuple [(ErlangAtom "c_text_beside"), s_0, c1_162])
                in (erlps__rewrite__2 [d1_161, arg_185])
              something_else -> (EXC.case_clause something_else)
        (ErlangTuple [(ErlangAtom "c_text_beside"), s1_189, c2_190]) ->
          let    arg_193 = (erlps__concat__2 [s1_189, s_0])
          in let arg_192 = (erlps__mktext__1 [arg_193])
          in let arg_191 = (erlps__beside__2 [arg_192, d1_161])
          in (erlps__rewrite__2 [arg_191, c2_190])
        (ErlangTuple [(ErlangAtom "c_sep_nest"), ds_198, n_199, _,
                      c2_200]) ->
          let case_201 = (erlps__is_empty_string__1 [s_0])
          in
            case case_201 of
              (ErlangAtom "false") ->
                let    w_204 = (erlps__width__1 [s_0])
                in let arg_206 = (erlps__mktext__1 [s_0])
                in let arg_211 = (erlps__nil__0 [])
                in let head_210 = (erlps__beside__2 [arg_211, d1_161])
                in let arg_214 = (BIF.erlang__op_minus [n_199, w_204])
                in let
                  arg_217 =
                    case c1_162 of
                      (ErlangTuple arr_220) | (DM.Just field_219) <-
                                                ((arr_220 DA.!! 3)) ->
                        field_219
                      _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
                in let
                  arg_208 =
                    (erlps__mksep__3
                       [(ErlangCons head_210 ds_198), arg_214, arg_217])
                in let arg_205 = (erlps__beside__2 [arg_206, arg_208])
                in (erlps__rewrite__2 [arg_205, c2_200])
              (ErlangAtom "true") ->
                let
                  arg_223 =
                    (ErlangTuple [(ErlangAtom "c_text_beside"), s_0, c1_162])
                in (erlps__rewrite__2 [d1_161, arg_223])
              something_else -> (EXC.case_clause something_else)
        (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_227, r_228, n_229,
                      d_230]) ->
          let    l_232 = (erlps__width__1 [s_0])
          in let lop_235 = (BIF.erlang__op_plus [l_232, n_229])
          in let lop_234 = (BIF.erlang__op_greater [lop_235, w_227])
          in let rop_239 = (BIF.erlang__op_greater [l_232, r_228])
          in let case_233 = (BIF.erlang__op_or [lop_234, rop_239])
          in
            case case_233 of
              (ErlangAtom "true") ->
                let
                  arg_243 =
                    (ErlangTuple
                       [(ErlangAtom "c_best_nest"), w_227, r_228, n_229])
                in (erlps__rewrite__2 [d_230, arg_243])
              (ErlangAtom "false") ->
                let
                  arg_249 =
                    (ErlangTuple [(ErlangAtom "c_text_beside"), s_0, c1_162])
                in (erlps__rewrite__2 [d1_161, arg_249])
              something_else -> (EXC.case_clause something_else)
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_253, _, _,
                      c2_254]) ->
          let    arg_258 = (erlps__mktext__1 [s_0])
          in let arg_257 = (erlps__beside__2 [arg_258, d1_161])
          in let arg_255 = (erlps__beside__2 [d2_253, arg_257])
          in (erlps__rewrite__2 [arg_255, c2_254])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_262, _, _,
                      n_263, c2_264]) ->
          let    arg_270 = (erlps__mktext__1 [s_0])
          in let arg_269 = (erlps__beside__2 [arg_270, d1_161])
          in let arg_267 = (erlps__nest__2 [n_263, arg_269])
          in let arg_265 = (erlps__above__2 [d2_262, arg_267])
          in (erlps__rewrite__2 [arg_265, c2_264])
        _ ->
          let
            arg_275 =
              (ErlangTuple [(ErlangAtom "c_text_beside"), s_0, c1_162])
          in (erlps__rewrite__2 [d1_161, arg_275])
    (ErlangTuple [(ErlangAtom "c_text_beside"), s1_279, c1_280]) ->
      let    arg_282 = (erlps__concat__2 [s1_279, s_0])
      in let arg_281 = (erlps__mktext__1 [arg_282])
      in (erlps__rewrite__2 [arg_281, c1_280])
    (ErlangTuple [(ErlangAtom "c_sep_nest"), ds_286, n_287, _,
                  c1_288]) ->
      let case_289 = (erlps__is_empty_string__1 [s_0])
      in
        case case_289 of
          (ErlangAtom "false") ->
            let    arg_292 = (erlps__mktext__1 [s_0])
            in let head_296 = (erlps__nil__0 [])
            in let rop_300 = (erlps__width__1 [s_0])
            in let arg_298 = (BIF.erlang__op_minus [n_287, rop_300])
            in let
              arg_302 =
                case c_1 of
                  (ErlangTuple arr_305) | (DM.Just field_304) <-
                                            ((arr_305 DA.!! 3)) ->
                    field_304
                  _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
            in let
              arg_294 =
                (erlps__mksep__3
                   [(ErlangCons head_296 ds_286), arg_298, arg_302])
            in let arg_291 = (erlps__beside__2 [arg_292, arg_294])
            in (erlps__rewrite__2 [arg_291, c1_288])
          (ErlangAtom "true") ->
            let
              case_307 =
                case c_1 of
                  (ErlangTuple arr_310) | (DM.Just field_309) <-
                                            ((arr_310 DA.!! 3)) ->
                    field_309
                  _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
            in
              case case_307 of
                (ErlangAtom "false") ->
                  let    arg_312 = (erlps__nil__0 [])
                  in let
                    arg_311 = (erlps__expand_sep__3 [arg_312, ds_286, n_287])
                  in (erlps__rewrite__2 [arg_311, c1_288])
                (ErlangAtom "true") ->
                  let    arg_317 = (erlps__nil__0 [])
                  in let
                    arg_316 = (erlps__expand_par__3 [arg_317, ds_286, n_287])
                  in (erlps__rewrite__2 [arg_316, c1_288])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_321, r_322, n_323,
                  d_324]) ->
      let    l_326 = (erlps__width__1 [s_0])
      in let lop_329 = (BIF.erlang__op_plus [l_326, n_323])
      in let lop_328 = (BIF.erlang__op_greater [lop_329, w_321])
      in let rop_333 = (BIF.erlang__op_greater [l_326, r_322])
      in let case_327 = (BIF.erlang__op_or [lop_328, rop_333])
      in
        case case_327 of
          (ErlangAtom "true") ->
            let
              arg_337 =
                (ErlangTuple [(ErlangAtom "c_best_nest"), w_321, r_322, n_323])
            in (erlps__rewrite__2 [d_324, arg_337])
          (ErlangAtom "false") ->
            let arg_343 = (erlps__mktext__1 [s_0])
            in (erlps__nest__2 [n_323, arg_343])
          something_else -> (EXC.case_clause something_else)
    (ErlangTuple [(ErlangAtom "c_fit"), c1_345]) ->
      let arg_346 = (erlps__mktext__1 [s_0])
      in (erlps__rewrite__2 [arg_346, c1_345])
    (ErlangTuple [(ErlangAtom "c_float_beside"), d1_349, _, _,
                  c1_350]) ->
      let    arg_353 = (erlps__mktext__1 [s_0])
      in let arg_351 = (erlps__beside__2 [d1_349, arg_353])
      in (erlps__rewrite__2 [arg_351, c1_350])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d1_356, _, _,
                  n_357, c1_358]) ->
      let    arg_363 = (erlps__mktext__1 [s_0])
      in let arg_361 = (erlps__nest__2 [n_357, arg_363])
      in let arg_359 = (erlps__above__2 [d1_356, arg_361])
      in (erlps__rewrite__2 [arg_359, c1_358])
    something_else -> (EXC.case_clause something_else)
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "nest"), n_0, d_1]),
                   c_2]
  =
  case c_2 of
    (ErlangTuple [(ErlangAtom "c_best_nest"), w_4, r_5, n1_6]) ->
      let    tup_el_12 = (BIF.erlang__op_plus [n_0, n1_6])
      in let
        arg_8 =
          (ErlangTuple [(ErlangAtom "c_best_nest"), w_4, r_5, tup_el_12])
      in (erlps__rewrite__2 [d_1, arg_8])
    (ErlangTuple [(ErlangAtom "c_above_nest"), d1_15, n1_16,
                  c1_17]) ->
      let    arg_23 = (BIF.erlang__op_minus [n1_16, n_0])
      in let arg_22 = (erlps__nest__2 [arg_23, d1_15])
      in let arg_20 = (erlps__above__2 [d_1, arg_22])
      in let arg_18 = (erlps__nest__2 [n_0, arg_20])
      in (erlps__rewrite__2 [arg_18, c1_17])
    (ErlangTuple [(ErlangAtom "c_beside"), d1_28, c1_29]) ->
      let    arg_32 = (erlps__beside__2 [d_1, d1_28])
      in let arg_30 = (erlps__nest__2 [n_0, arg_32])
      in (erlps__rewrite__2 [arg_30, c1_29])
    (ErlangTuple [(ErlangAtom "c_text_beside"), _, _]) ->
      (erlps__rewrite__2 [d_1, c_2])
    (ErlangTuple [(ErlangAtom "c_sep_nest"), ds_38, n1_39, _,
                  c1_40]) ->
      let    arg_47 = (BIF.erlang__op_minus [n1_39, n_0])
      in let
        arg_50 =
          case c_2 of
            (ErlangTuple arr_53) | (DM.Just field_52) <-
                                     ((arr_53 DA.!! 3)) ->
              field_52
            _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
      in let
        arg_43 =
          (erlps__mksep__3 [(ErlangCons d_1 ds_38), arg_47, arg_50])
      in let arg_41 = (erlps__nest__2 [n_0, arg_43])
      in (erlps__rewrite__2 [arg_41, c1_40])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_55]) ->
      let    arg_58 = (erlps__fit__1 [d_1])
      in let arg_56 = (erlps__nest__2 [n_0, arg_58])
      in (erlps__rewrite__2 [arg_56, c1_55])
    (ErlangTuple [(ErlangAtom "c_float_beside"), _, _, _, _]) ->
      (erlps__rewrite__2 [d_1, c_2])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d1_63, h_64,
                  v_65, n1_66, c1_67]) ->
      let    tup_el_74 = (BIF.erlang__op_plus [n_0, n1_66])
      in let
        arg_69 =
          (ErlangTuple
             [(ErlangAtom "c_float_above_nest"), d1_63, h_64, v_65, tup_el_74,
              c1_67])
      in (erlps__rewrite__2 [d_1, arg_69])
    (ErlangTuple [(ErlangAtom "c_best_nest_or"), _, _, _, _]) ->
      (BIF.erlang__exit__1 [(ErlangAtom "badarg")])
    something_else -> (EXC.case_clause something_else)
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "above"), d1_0,
                                 d2_1]),
                   c_2]
  =
  case c_2 of
    (ErlangTuple [(ErlangAtom "c_above_nest"), d3_4, n_5, c1_6]) ->
      let    arg_12 = (erlps__nest__2 [n_5, d3_4])
      in let tup_el_10 = (erlps__above__2 [d2_1, arg_12])
      in let
        arg_8 =
          (ErlangTuple
             [(ErlangAtom "c_above_nest"), tup_el_10,
              (ErlangInt (DBI.fromInt 0)), c1_6])
      in (erlps__rewrite__2 [d1_0, arg_8])
    (ErlangTuple [(ErlangAtom "c_beside"), d3_17, c1_18]) ->
      let    arg_21 = (erlps__beside__2 [d2_1, d3_17])
      in let arg_19 = (erlps__above__2 [d1_0, arg_21])
      in (erlps__rewrite__2 [arg_19, c1_18])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_25]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_25])
    _ ->
      let
        arg_29 =
          (ErlangTuple
             [(ErlangAtom "c_above_nest"), d2_1, (ErlangInt (DBI.fromInt 0)),
              c_2])
      in (erlps__rewrite__2 [d1_0, arg_29])
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "beside"), d1_0,
                                 d2_1]),
                   c_2]
  =
  case c_2 of
    (ErlangTuple [(ErlangAtom "c_beside"), d3_4, c1_5]) ->
      let    tup_el_9 = (erlps__beside__2 [d2_1, d3_4])
      in let
        arg_7 = (ErlangTuple [(ErlangAtom "c_beside"), tup_el_9, c1_5])
      in (erlps__rewrite__2 [d1_0, arg_7])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_13]) ->
      let    arg_15 = (erlps__fit__1 [d1_0])
      in let arg_17 = (erlps__fit__1 [d2_1])
      in let arg_14 = (erlps__beside__2 [arg_15, arg_17])
      in (erlps__rewrite__2 [arg_14, c1_13])
    _ ->
      let arg_21 = (ErlangTuple [(ErlangAtom "c_beside"), d2_1, c_2])
      in (erlps__rewrite__2 [d1_0, arg_21])
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "sep"), ds_0, n_1,
                                 p_2]),
                   c_3]
  =
  case c_3 of
    (ErlangTuple [(ErlangAtom "c_fit"), c1_5]) ->
      let    arg_7 = (erlps__horizontal__1 [ds_0])
      in let arg_6 = (erlps__fit__1 [arg_7])
      in (erlps__rewrite__2 [arg_6, c1_5])
    (ErlangTuple [(ErlangAtom "c_float_beside"), d1_10, _, _,
                  c1_11]) ->
      let    arg_14 = (erlps__mksep__3 [ds_0, n_1, p_2])
      in let arg_12 = (erlps__beside__2 [d1_10, arg_14])
      in (erlps__rewrite__2 [arg_12, c1_11])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d1_19, _, _,
                  n1_20, c1_21]) ->
      let    arg_26 = (erlps__mksep__3 [ds_0, n_1, p_2])
      in let arg_24 = (erlps__nest__2 [n1_20, arg_26])
      in let arg_22 = (erlps__above__2 [d1_19, arg_24])
      in (erlps__rewrite__2 [arg_22, c1_21])
    _ -> (erlps__enter_sep__4 [ds_0, n_1, p_2, c_3])
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "union"), d1_0,
                                 d2_1]),
                   c_2]
  =
  case c_2 of
    (ErlangTuple [(ErlangAtom "c_best_nest"), w_4, r_5, n_6]) ->
      let
        arg_8 =
          (ErlangTuple
             [(ErlangAtom "c_best_nest_or"), w_4, r_5, n_6, d2_1])
      in (erlps__rewrite__2 [d1_0, arg_8])
    (ErlangTuple [(ErlangAtom "c_above_nest"), d3_14, n_15,
                  c1_16]) ->
      let    arg_20 = (erlps__nest__2 [n_15, d3_14])
      in let arg_18 = (erlps__above__2 [d1_0, arg_20])
      in let arg_25 = (erlps__nest__2 [n_15, d3_14])
      in let arg_23 = (erlps__above__2 [d2_1, arg_25])
      in let arg_17 = (erlps__union__2 [arg_18, arg_23])
      in (erlps__rewrite__2 [arg_17, c1_16])
    (ErlangTuple [(ErlangAtom "c_beside"), d3_29, c1_30]) ->
      let    arg_32 = (erlps__beside__2 [d1_0, d3_29])
      in let arg_35 = (erlps__beside__2 [d2_1, d3_29])
      in let arg_31 = (erlps__union__2 [arg_32, arg_35])
      in (erlps__rewrite__2 [arg_31, c1_30])
    (ErlangTuple [(ErlangAtom "c_text_beside"), s_39, c1_40]) ->
      let    arg_43 = (erlps__mktext__1 [s_39])
      in let arg_42 = (erlps__beside__2 [arg_43, d1_0])
      in let arg_47 = (erlps__mktext__1 [s_39])
      in let arg_46 = (erlps__beside__2 [arg_47, d2_1])
      in let arg_41 = (erlps__union__2 [arg_42, arg_46])
      in (erlps__rewrite__2 [arg_41, c1_40])
    (ErlangTuple [(ErlangAtom "c_sep_nest"), ds_51, n_52, _,
                  c1_53]) ->
      let   
        arg_60 =
          case c_2 of
            (ErlangTuple arr_63) | (DM.Just field_62) <-
                                     ((arr_63 DA.!! 3)) ->
              field_62
            _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
      in let
        arg_55 =
          (erlps__mksep__3 [(ErlangCons d1_0 ds_51), n_52, arg_60])
      in let
        arg_69 =
          case c_2 of
            (ErlangTuple arr_72) | (DM.Just field_71) <-
                                     ((arr_72 DA.!! 3)) ->
              field_71
            _ -> (EXC.badrecord (ErlangAtom "c_sep_nest"))
      in let
        arg_64 =
          (erlps__mksep__3 [(ErlangCons d2_1 ds_51), n_52, arg_69])
      in let arg_54 = (erlps__union__2 [arg_55, arg_64])
      in (erlps__rewrite__2 [arg_54, c1_53])
    (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_74, r_75, n_76,
                  d3_77]) ->
      let    tup_el_84 = (erlps__union__2 [d2_1, d3_77])
      in let
        arg_79 =
          (ErlangTuple
             [(ErlangAtom "c_best_nest_or"), w_74, r_75, n_76, tup_el_84])
      in (erlps__rewrite__2 [d1_0, arg_79])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_87]) ->
      let    arg_89 = (erlps__fit__1 [d1_0])
      in let arg_91 = (erlps__fit__1 [d2_1])
      in let arg_88 = (erlps__union__2 [arg_89, arg_91])
      in (erlps__rewrite__2 [arg_88, c1_87])
    (ErlangTuple [(ErlangAtom "c_float_beside"), d3_94, h_95, v_96,
                  c1_97]) ->
      let    arg_100 = (erlps__floating__3 [d3_94, h_95, v_96])
      in let arg_99 = (erlps__beside__2 [arg_100, d1_0])
      in let arg_106 = (erlps__floating__3 [d3_94, h_95, v_96])
      in let arg_105 = (erlps__beside__2 [arg_106, d2_1])
      in let arg_98 = (erlps__union__2 [arg_99, arg_105])
      in (erlps__rewrite__2 [arg_98, c1_97])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d3_112, h_113,
                  v_114, n_115, c1_116]) ->
      let    arg_119 = (erlps__floating__3 [d3_112, h_113, v_114])
      in let arg_123 = (erlps__nest__2 [n_115, d1_0])
      in let arg_118 = (erlps__above__2 [arg_119, arg_123])
      in let arg_127 = (erlps__floating__3 [d3_112, h_113, v_114])
      in let arg_131 = (erlps__nest__2 [n_115, d2_1])
      in let arg_126 = (erlps__above__2 [arg_127, arg_131])
      in let arg_117 = (erlps__union__2 [arg_118, arg_126])
      in (erlps__rewrite__2 [arg_117, c1_116])
    something_else -> (EXC.case_clause something_else)
erlps__rewrite__2 [(ErlangAtom "empty"), c_0] =
  case c_0 of
    (ErlangTuple [(ErlangAtom "c_best_nest"), _, _, _]) ->
      (ErlangAtom "empty")
    (ErlangTuple [(ErlangAtom "c_above_nest"), _, _, c1_2]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_2])
    (ErlangTuple [(ErlangAtom "c_beside"), _, c1_5]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_5])
    (ErlangTuple [(ErlangAtom "c_text_beside"), _, c1_8]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_8])
    (ErlangTuple [(ErlangAtom "c_sep_nest"), _, _, _, c1_11]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_11])
    (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_14, r_15, n_16,
                  d_17]) ->
      let
        arg_19 =
          (ErlangTuple [(ErlangAtom "c_best_nest"), w_14, r_15, n_16])
      in (erlps__rewrite__2 [d_17, arg_19])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_24]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_24])
    (ErlangTuple [(ErlangAtom "c_float_beside"), _, _, _, c1_27]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_27])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), _, _, _, _,
                  c1_30]) ->
      (erlps__rewrite__2 [(ErlangAtom "empty"), c1_30])
    something_else -> (EXC.case_clause something_else)
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "fit"), d_0]), c_1]
  =
  case c_1 of
    (ErlangTuple [(ErlangAtom "c_fit"), _]) ->
      (erlps__rewrite__2 [d_0, c_1])
    _ ->
      let arg_6 = (ErlangTuple [(ErlangAtom "c_fit"), c_1])
      in (erlps__rewrite__2 [d_0, arg_6])
erlps__rewrite__2 [(ErlangTuple [(ErlangAtom "float"), d_0, h_1,
                                 v_2]),
                   c_3]
  =
  case c_3 of
    (ErlangTuple [(ErlangAtom "c_beside"), d1_5, c1_6]) ->
      case c1_6 of
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_8, h1_9, v1_10,
                      c2_11]) | (weakGt h1_9 h_1) ->
          let    arg_13 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_18 = (erlps__floating__3 [d2_8, h1_9, v1_10])
          in let arg_17 = (erlps__beside__2 [arg_18, d1_5])
          in let arg_12 = (erlps__beside__2 [arg_13, arg_17])
          in (erlps__rewrite__2 [arg_12, c2_11])
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_24, h1_25, v1_26,
                      c2_27]) | (weakNEq v1_26 v_2) ->
          let    arg_29 = (erlps__floating__3 [d2_24, h1_25, v1_26])
          in let arg_34 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_33 = (erlps__beside__2 [arg_34, d1_5])
          in let arg_28 = (erlps__above__2 [arg_29, arg_33])
          in (erlps__rewrite__2 [arg_28, c2_27])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_40, h1_41,
                      v1_42, n1_43, c2_44]) | (weakGt v1_42 v_2) ->
          let    arg_48 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_46 = (erlps__nest__2 [n1_43, arg_48])
          in let arg_53 = (erlps__floating__3 [d2_40, h1_41, v1_42])
          in let arg_52 = (erlps__above__2 [arg_53, d1_5])
          in let arg_45 = (erlps__above__2 [arg_46, arg_52])
          in (erlps__rewrite__2 [arg_45, c2_44])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_59, h1_60,
                      v1_61, _n1_62, c2_63]) | ((weakEq v1_61 v_2) &&
                                                  (weakNEq h1_60 h_1)) ->
          let    arg_65 = (erlps__floating__3 [d2_59, h1_60, v1_61])
          in let arg_70 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_69 = (erlps__beside__2 [arg_70, d1_5])
          in let arg_64 = (erlps__beside__2 [arg_65, arg_69])
          in (erlps__rewrite__2 [arg_64, c2_63])
        _ ->
          let
            arg_77 =
              (ErlangTuple
                 [(ErlangAtom "c_float_beside"), d_0, h_1, v_2, c1_6])
          in (erlps__rewrite__2 [d1_5, arg_77])
    (ErlangTuple [(ErlangAtom "c_above_nest"), d1_83, n_84,
                  c1_85]) ->
      case c1_85 of
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_87, h1_88, v1_89,
                      c2_90]) | (weakGt h1_88 h_1) ->
          let    arg_92 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_97 = (erlps__floating__3 [d2_87, h1_88, v1_89])
          in let arg_96 = (erlps__beside__2 [arg_97, d1_83])
          in let arg_91 = (erlps__beside__2 [arg_92, arg_96])
          in (erlps__rewrite__2 [arg_91, c2_90])
        (ErlangTuple [(ErlangAtom "c_float_beside"), d2_103, h1_104,
                      v1_105, c2_106]) | (weakNEq v1_105 v_2) ->
          let    arg_108 = (erlps__floating__3 [d2_103, h1_104, v1_105])
          in let arg_113 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_117 = (erlps__nest__2 [n_84, d1_83])
          in let arg_112 = (erlps__above__2 [arg_113, arg_117])
          in let arg_107 = (erlps__above__2 [arg_108, arg_112])
          in (erlps__rewrite__2 [arg_107, c2_106])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_121, h1_122,
                      v1_123, n1_124, c2_125]) | (weakGt v1_123 v_2) ->
          let    arg_129 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_127 = (erlps__nest__2 [n1_124, arg_129])
          in let arg_134 = (erlps__floating__3 [d2_121, h1_122, v1_123])
          in let arg_139 = (BIF.erlang__op_plus [n_84, n1_124])
          in let arg_138 = (erlps__nest__2 [arg_139, d1_83])
          in let arg_133 = (erlps__above__2 [arg_134, arg_138])
          in let arg_126 = (erlps__above__2 [arg_127, arg_133])
          in (erlps__rewrite__2 [arg_126, c2_125])
        (ErlangTuple [(ErlangAtom "c_float_above_nest"), d2_144, h1_145,
                      v1_146, _n1_147, c2_148]) | ((weakEq v1_146 v_2) &&
                                                     (weakNEq h1_145 h_1)) ->
          let    arg_150 = (erlps__floating__3 [d2_144, h1_145, v1_146])
          in let arg_155 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_159 = (erlps__nest__2 [n_84, d1_83])
          in let arg_154 = (erlps__above__2 [arg_155, arg_159])
          in let arg_149 = (erlps__beside__2 [arg_150, arg_154])
          in (erlps__rewrite__2 [arg_149, c2_148])
        _ ->
          let
            arg_164 =
              (ErlangTuple
                 [(ErlangAtom "c_float_above_nest"), d_0, h_1, v_2, n_84,
                  c1_85])
          in (erlps__rewrite__2 [d1_83, arg_164])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_171]) ->
      let    arg_173 = (erlps__fit__1 [d_0])
      in let arg_172 = (erlps__floating__3 [arg_173, h_1, v_2])
      in (erlps__rewrite__2 [arg_172, c1_171])
    (ErlangTuple [(ErlangAtom "c_float_beside"), d1_178, h1_179,
                  v1_180, c1_181]) ->
      case (ErlangAtom "true") of
        _ | (weakGt h1_179 h_1) ->
          let    arg_183 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_187 = (erlps__floating__3 [d1_178, h1_179, v1_180])
          in let arg_182 = (erlps__beside__2 [arg_183, arg_187])
          in (erlps__rewrite__2 [arg_182, c1_181])
        _ | (weakNEq v1_180 v_2) ->
          let    arg_193 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_197 = (erlps__floating__3 [d1_178, h1_179, v1_180])
          in let arg_192 = (erlps__above__2 [arg_193, arg_197])
          in (erlps__rewrite__2 [arg_192, c1_181])
        _ ->
          let    arg_203 = (erlps__floating__3 [d1_178, h1_179, v1_180])
          in let arg_202 = (erlps__beside__2 [arg_203, d_0])
          in (erlps__rewrite__2 [arg_202, c1_181])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d1_209, h1_210,
                  v1_211, n_212, c1_213]) ->
      case (ErlangAtom "true") of
        _ | (weakGt v1_211 v_2) ->
          let    arg_217 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_215 = (erlps__nest__2 [n_212, arg_217])
          in let arg_221 = (erlps__floating__3 [d1_209, h1_210, v1_211])
          in let arg_214 = (erlps__above__2 [arg_215, arg_221])
          in (erlps__rewrite__2 [arg_214, c1_213])
        _ | ((weakEq v1_211 v_2) && (weakNEq h1_210 h_1)) ->
          let    arg_227 = (erlps__floating__3 [d_0, h_1, v_2])
          in let arg_231 = (erlps__floating__3 [d1_209, h1_210, v1_211])
          in let arg_226 = (erlps__beside__2 [arg_227, arg_231])
          in (erlps__rewrite__2 [arg_226, c1_213])
        _ ->
          let    arg_237 = (erlps__floating__3 [d1_209, h1_210, v1_211])
          in let arg_241 = (erlps__nest__2 [n_212, d_0])
          in let arg_236 = (erlps__above__2 [arg_237, arg_241])
          in (erlps__rewrite__2 [arg_236, c1_213])
    _ -> (erlps__rewrite__2 [d_0, c_3])
erlps__rewrite__2 [(ErlangAtom "null"), c_0] =
  case c_0 of
    (ErlangTuple [(ErlangAtom "c_best_nest"), _, _, _]) ->
      (ErlangAtom "null")
    (ErlangTuple [(ErlangAtom "c_above_nest"), d_2, n_3, c1_4]) ->
      let arg_5 = (erlps__nest__2 [n_3, d_2])
      in (erlps__rewrite__2 [arg_5, c1_4])
    (ErlangTuple [(ErlangAtom "c_beside"), d_9, c1_10]) ->
      (erlps__rewrite__2 [d_9, c1_10])
    (ErlangTuple [(ErlangAtom "c_text_beside"), s_13, c1_14]) ->
      let arg_15 = (erlps__mktext__1 [s_13])
      in (erlps__rewrite__2 [arg_15, c1_14])
    (ErlangTuple [(ErlangAtom "c_sep_nest"), _, _, _, _]) ->
      let arg_18 = (erlps__nil__0 [])
      in (erlps__rewrite__2 [arg_18, c_0])
    (ErlangTuple [(ErlangAtom "c_best_nest_or"), w_20, r_21, n_22,
                  _]) ->
      let
        arg_24 =
          (ErlangTuple [(ErlangAtom "c_best_nest"), w_20, r_21, n_22])
      in (erlps__rewrite__2 [(ErlangAtom "null"), arg_24])
    (ErlangTuple [(ErlangAtom "c_fit"), c1_29]) ->
      (erlps__rewrite__2 [(ErlangAtom "null"), c1_29])
    (ErlangTuple [(ErlangAtom "c_float_beside"), d_32, _h_33, _v_34,
                  c1_35]) ->
      let arg_36 = (erlps__beside__2 [d_32, (ErlangAtom "null")])
      in (erlps__rewrite__2 [arg_36, c1_35])
    (ErlangTuple [(ErlangAtom "c_float_above_nest"), d_40, _h_41,
                  _v_42, n_43, c1_44]) ->
      let    arg_47 = (erlps__nest__2 [n_43, (ErlangAtom "null")])
      in let arg_45 = (erlps__above__2 [d_40, arg_47])
      in (erlps__rewrite__2 [arg_45, c1_44])
    something_else -> (EXC.case_clause something_else)
erlps__rewrite__2 [arg_51, arg_52] = (EXC.function_clause unit)
erlps__rewrite__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nil__0 :: ErlangFun
erlps__nil__0 [] =
  let arg_0 = (H.make_string "")
  in (erlps__text__1 [arg_0])
erlps__nil__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hspace__0 :: ErlangFun
erlps__hspace__0 [] =
  (erlps__text__1
     [(ErlangCons (ErlangInt (DBI.fromInt 32)) ErlangEmptyList)])
erlps__hspace__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__union__2 :: ErlangFun
erlps__union__2 [d1_0, d2_1] =
  (ErlangTuple [(ErlangAtom "union"), d1_0, d2_1])
erlps__union__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__union__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fit__1 :: ErlangFun
erlps__fit__1 [d_0] = (ErlangTuple [(ErlangAtom "fit"), d_0])
erlps__fit__1 [arg_3] = (EXC.function_clause unit)
erlps__fit__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__enter_sep__4 :: ErlangFun
erlps__enter_sep__4 [ds_0, n_1, p_2, c_3] =
  case ds_0 of
    (ErlangCons d_5 (ErlangEmptyList)) ->
      (erlps__rewrite__2 [d_5, c_3])
    (ErlangCons d_8 ds1_9) ->
      let
        arg_11 =
          (ErlangTuple [(ErlangAtom "c_sep_nest"), ds1_9, n_1, p_2, c_3])
      in (erlps__rewrite__2 [d_8, arg_11])
    something_else -> (EXC.case_clause something_else)
erlps__enter_sep__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__enter_sep__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_sep__3 :: ErlangFun
erlps__expand_sep__3 [d_0, ds_1, n_2] =
  let    arg_4 = (erlps__horizontal__1 [(ErlangCons d_0 ds_1)])
  in let arg_3 = (erlps__fit__1 [arg_4])
  in let
    tail_11 =
      (H.flmap
         (\ lc_14 ->
            let lc_ret_15 = (erlps__nest__2 [n_2, lc_14])
            in (ErlangCons lc_ret_15 ErlangEmptyList))
         ds_1)
  in let arg_8 = (erlps__vertical__1 [(ErlangCons d_0 tail_11)])
  in (erlps__union__2 [arg_3, arg_8])
erlps__expand_sep__3 [arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__expand_sep__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_par__3 :: ErlangFun
erlps__expand_par__3 [d_0, dl_3@(ErlangCons d1_1 ds_2), n_4] =
  let    arg_6 = (erlps__fit__1 [d_0])
  in let arg_9 = (erlps__hspace__0 [])
  in let head_12 = (erlps__fit__1 [d1_1])
  in let
    arg_15 =
      (BIF.erlang__op_minus [n_4, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_10 =
      (erlps__mksep__3
         [(ErlangCons head_12 ds_2), arg_15, (ErlangAtom "true")])
  in let arg_8 = (erlps__beside__2 [arg_9, arg_10])
  in let arg_5 = (erlps__beside__2 [arg_6, arg_8])
  in let arg_23 = (erlps__par__1 [dl_3])
  in let arg_21 = (erlps__nest__2 [n_4, arg_23])
  in let arg_19 = (erlps__above__2 [d_0, arg_21])
  in (erlps__union__2 [arg_5, arg_19])
erlps__expand_par__3 [arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__expand_par__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__horizontal__1 :: ErlangFun
erlps__horizontal__1 [ds_0] =
  let
    arg_1 =
      (ErlangFun 2
         let
           lambda_2 [d1_5, d2_6] =
             let    arg_9 = (erlps__hspace__0 [])
             in let arg_8 = (erlps__beside__2 [arg_9, d2_6])
             in (erlps__beside__2 [d1_5, arg_8])
           lambda_2 [arg_3, arg_4] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 2 lambda_2) args)
         in lambda_2)
  in (erlps__foldr1__2 [arg_1, ds_0])
erlps__horizontal__1 [arg_12] = (EXC.function_clause unit)
erlps__horizontal__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vertical__1 :: ErlangFun
erlps__vertical__1 [ds_0] =
  let arg_1 = (ErlangFun 2 erlps__above__2)
  in (erlps__foldr1__2 [arg_1, ds_0])
erlps__vertical__1 [arg_3] = (EXC.function_clause unit)
erlps__vertical__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__foldr1__2 :: ErlangFun
erlps__foldr1__2 [_f_0, (ErlangCons h_1 (ErlangEmptyList))] = h_1
erlps__foldr1__2 [f_0, (ErlangCons h_1 t_2)] =
  let arg_4 = (erlps__foldr1__2 [f_0, t_2])
  in
    (BIF.erlang__apply__2
       [f_0, (ErlangCons h_1 (ErlangCons arg_4 ErlangEmptyList))])
erlps__foldr1__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__foldr1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__1 :: ErlangFun
erlps__string__1 [s_0] =
  let head_1 = (erlps__strwidth__1 [s_0])
  in (ErlangCons head_1 s_0)
erlps__string__1 [arg_4] = (EXC.function_clause unit)
erlps__string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__null_string__1 :: ErlangFun
erlps__null_string__1 [s_0] =
  (ErlangCons (ErlangInt (DBI.fromInt 0)) s_0)
erlps__null_string__1 [arg_3] = (EXC.function_clause unit)
erlps__null_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__concat__2 :: ErlangFun
erlps__concat__2 [(ErlangCons _ (ErlangEmptyList)),
                  s_0@(ErlangCons _ _)]
  =
  s_0
erlps__concat__2 [s_0@(ErlangCons _ _),
                  (ErlangCons _ (ErlangEmptyList))]
  =
  s_0
erlps__concat__2 [(ErlangCons l1_0 s1_1), (ErlangCons l2_2 s2_3)]
  =
  let head_4 = (BIF.erlang__op_plus [l1_0, l2_2])
  in (ErlangCons head_4 (ErlangCons s1_1 s2_3))
erlps__concat__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__concat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_chars__1 :: ErlangFun
erlps__string_chars__1 [(ErlangCons _ s_0)] = s_0
erlps__string_chars__1 [arg_1] = (EXC.function_clause unit)
erlps__string_chars__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__width__1 :: ErlangFun
erlps__width__1 [s_0] = (BIF.erlang__hd__1 [s_0])
erlps__width__1 [arg_2] = (EXC.function_clause unit)
erlps__width__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty_string__1 :: ErlangFun
erlps__is_empty_string__1 [(ErlangCons _ (ErlangEmptyList))] =
  (ErlangAtom "true")
erlps__is_empty_string__1 [(ErlangCons _ _)] =
  (ErlangAtom "false")
erlps__is_empty_string__1 [arg_0] = (EXC.function_clause unit)
erlps__is_empty_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strwidth__1 :: ErlangFun
erlps__strwidth__1 [s_0] =
  (erlps__strwidth__2 [s_0, (ErlangInt (DBI.fromInt 0))])
erlps__strwidth__1 [arg_3] = (EXC.function_clause unit)
erlps__strwidth__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strwidth__2 :: ErlangFun
erlps__strwidth__2 [(ErlangCons (ErlangInt num_0) cs_1), n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  let   
    rop_7 =
      (BIF.erlang__op_rem_strict [n_2, (ErlangInt (DBI.fromInt 8))])
  in let lop_5 = (BIF.erlang__op_minus [n_2, rop_7])
  in let
    arg_4 =
      (BIF.erlang__op_plus [lop_5, (ErlangInt (DBI.fromInt 8))])
  in (erlps__strwidth__2 [cs_1, arg_4])
erlps__strwidth__2 [(ErlangCons _ cs_0), n_1] =
  let
    arg_3 = (BIF.erlang__op_plus [n_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__strwidth__2 [cs_0, arg_3])
erlps__strwidth__2 [(ErlangEmptyList), n_0] = n_0
erlps__strwidth__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__strwidth__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)