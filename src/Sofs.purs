module Sofs(erlps__from_term__1, erlps__from_term__2,
            erlps__from_external__2, erlps__empty_set__0, erlps__is_type__1,
            erlps__set__1, erlps__set__2, erlps__from_sets__1,
            erlps__relation__1, erlps__relation__2, erlps__a_function__1,
            erlps__a_function__2, erlps__family__1, erlps__family__2,
            erlps__to_external__1, erlps__type__1, erlps__to_sets__1,
            erlps__no_elements__1, erlps__specification__2, erlps__union__2,
            erlps__intersection__2, erlps__difference__2, erlps__symdiff__2,
            erlps__symmetric_partition__2, erlps__product__1,
            erlps__product__2, erlps__constant_function__2,
            erlps__is_equal__2, erlps__is_subset__2, erlps__is_sofs_set__1,
            erlps__is_set__1, erlps__is_empty_set__1, erlps__is_disjoint__2,
            erlps__union__1, erlps__intersection__1,
            erlps__canonical_relation__1, erlps__relation_to_family__1,
            erlps__domain__1, erlps__range__1, erlps__field__1,
            erlps__relative_product__1, erlps__relative_product__2,
            erlps__relative_product1__2, erlps__converse__1, erlps__image__2,
            erlps__inverse_image__2, erlps__strict_relation__1,
            erlps__weak_relation__1, erlps__extension__3,
            erlps__is_a_function__1, erlps__composite__2, erlps__inverse__1,
            erlps__restriction__2, erlps__restriction__3,
            erlps__drestriction__2, erlps__drestriction__3,
            erlps__substitution__2, erlps__projection__2,
            erlps__partition__1, erlps__partition__2, erlps__partition__3,
            erlps__multiple_relative_product__2, erlps__join__4,
            erlps__family_to_relation__1, erlps__family_specification__2,
            erlps__union_of_family__1, erlps__intersection_of_family__1,
            erlps__family_union__1, erlps__family_intersection__1,
            erlps__family_domain__1, erlps__family_range__1,
            erlps__family_field__1, erlps__family_union__2,
            erlps__family_intersection__2, erlps__family_difference__2,
            erlps__partition_family__2, erlps__family_projection__2,
            erlps__family_to_digraph__1, erlps__family_to_digraph__2,
            erlps__digraph_to_family__1, erlps__digraph_to_family__2,
            erlps__fam2rel__1, erlps__rel2fam__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__from_term__1 :: ErlangFun
erlps__from_term__1 [t_0] =
  let
    type_4 =
      case t_0 of
        _ | (isEList t_0) ->
          (ErlangCons (ErlangAtom "_") ErlangEmptyList)
        _ -> (ErlangAtom "_")
        something_else -> (EXC.case_clause something_else)
  in
    (EXC.tryCatch (\ _ -> (erlps__setify__2 [t_0, type_4]))
       (\ ex_8 ->
          case ex_8 of
            (ErlangTuple [_, _, _]) ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            ex_8 -> (EXC.raise ex_8)))
erlps__from_term__1 [arg_10] = (EXC.function_clause unit)
erlps__from_term__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_term__2 :: ErlangFun
erlps__from_term__2 [l_0, t_1] =
  let case_2 = (erlps__is_type__1 [t_1])
  in
    case case_2 of
      (ErlangAtom "true") ->
        (EXC.tryCatch (\ _ -> (erlps__setify__2 [l_0, t_1]))
           (\ ex_7 ->
              case ex_7 of
                (ErlangTuple [_, _, _]) ->
                  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                ex_7 -> (EXC.raise ex_7)))
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__from_term__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__from_term__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_external__2 :: ErlangFun
erlps__from_external__2 [l_0,
                         (ErlangCons type_1 (ErlangEmptyList))]
  =
  (ErlangTuple [(ErlangAtom "Set"), l_0, type_1])
erlps__from_external__2 [t_0, type_1] =
  (ErlangTuple [(ErlangAtom "OrdSet"), t_0, type_1])
erlps__from_external__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__from_external__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__empty_set__0 :: ErlangFun
erlps__empty_set__0 [] =
  (ErlangTuple
     [(ErlangAtom "Set"), ErlangEmptyList, (ErlangAtom "_")])
erlps__empty_set__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_type__1 :: ErlangFun
erlps__is_type__1 [atom_0]
  | ((isEAtom atom_0) && ((/=) atom_0 (ErlangAtom "_"))) =
  (ErlangAtom "true")
erlps__is_type__1 [(ErlangCons t_0 (ErlangEmptyList))] =
  (erlps__is_element_type__1 [t_0])
erlps__is_type__1 [t_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_4 = (BIF.erlang__tuple_size__1 [t_0])
             in
               (BIF.erlang__op_greater
                  [lop_4, (ErlangInt (DBI.fromInt 0))])))) =
  let arg_1 = (BIF.erlang__tuple_size__1 [t_0])
  in (erlps__is_types__2 [arg_1, t_0])
erlps__is_type__1 [_t_0] = (ErlangAtom "false")
erlps__is_type__1 [arg_1] = (EXC.function_clause unit)
erlps__is_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set__1 :: ErlangFun
erlps__set__1 [l_0] =
  (EXC.tryOfCatch
     (\ _ -> (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_0]))
     (\ of_2 ->
        case of_2 of
          sl_4 ->
            (ErlangTuple [(ErlangAtom "Set"), sl_4, (ErlangAtom "atom")])
          something_else -> (EXC.try_clause something_else))
     (\ ex_3 ->
        case ex_3 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_3 -> (EXC.raise ex_3)))
erlps__set__1 [arg_9] = (EXC.function_clause unit)
erlps__set__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set__2 :: ErlangFun
erlps__set__2 [l_0, (ErlangCons type_1 (ErlangEmptyList))]
  | ((isEAtom type_1) && ((/=) type_1 (ErlangAtom "_"))) =
  (EXC.tryOfCatch
     (\ _ -> (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_0]))
     (\ of_3 ->
        case of_3 of
          sl_5 -> (ErlangTuple [(ErlangAtom "Set"), sl_5, type_1])
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_4 -> (EXC.raise ex_4)))
erlps__set__2 [l_0, t_1@(ErlangCons _ (ErlangEmptyList))] =
  (EXC.tryCatch (\ _ -> (erlps__setify__2 [l_0, t_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_5 -> (EXC.raise ex_5)))
erlps__set__2 [_, _] =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__set__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__set__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_sets__1 :: ErlangFun
erlps__from_sets__1 [ss_0] | (isEList ss_0) =
  let
    case_1 =
      (erlps__set_of_sets__3 [ss_0, ErlangEmptyList, (ErlangAtom "_")])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "error"), error_5]) ->
        (BIF.erlang__error__1 [error_5])
      set_7 -> set_7
      something_else -> (EXC.case_clause something_else)
erlps__from_sets__1 [tuple_0] | (isETuple tuple_0) =
  let    arg_2 = (BIF.erlang__tuple_to_list__1 [tuple_0])
  in let
    case_1 =
      (erlps__ordset_of_sets__3
         [arg_2, ErlangEmptyList, ErlangEmptyList])
  in
    case case_1 of
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      set_7 -> set_7
      something_else -> (EXC.case_clause something_else)
erlps__from_sets__1 [_] =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__from_sets__1 [arg_1] = (EXC.function_clause unit)
erlps__from_sets__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relation__1 :: ErlangFun
erlps__relation__1 [(ErlangEmptyList)] =
  let
    tup_el_2 =
      (ErlangTuple [(ErlangAtom "atom"), (ErlangAtom "atom")])
  in (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, tup_el_2])
erlps__relation__1 [ts_1@(ErlangCons t_0 _)] | (isETuple t_0) =
  (EXC.tryCatch
     (\ _ ->
        let arg_3 = (BIF.erlang__tuple_size__1 [t_0])
        in (erlps__rel__2 [ts_1, arg_3]))
     (\ ex_6 ->
        case ex_6 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_6 -> (EXC.raise ex_6)))
erlps__relation__1 [_] =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__relation__1 [arg_1] = (EXC.function_clause unit)
erlps__relation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relation__2 :: ErlangFun
erlps__relation__2 [ts_0, ts_1] =
  (EXC.tryCatch (\ _ -> (erlps__rel__2 [ts_0, ts_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_5 -> (EXC.raise ex_5)))
erlps__relation__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__relation__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__a_function__1 :: ErlangFun
erlps__a_function__1 [ts_0] =
  (EXC.tryOfCatch
     (\ _ ->
        let
          arg_2 = (ErlangTuple [(ErlangAtom "atom"), (ErlangAtom "atom")])
        in (erlps__func__2 [ts_0, arg_2]))
     (\ of_5 ->
        case of_5 of
          bad_7 | (isEAtom bad_7) -> (BIF.erlang__error__1 [bad_7])
          set_9 -> set_9
          something_else -> (EXC.try_clause something_else))
     (\ ex_6 ->
        case ex_6 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_6 -> (EXC.raise ex_6)))
erlps__a_function__1 [arg_11] = (EXC.function_clause unit)
erlps__a_function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__a_function__2 :: ErlangFun
erlps__a_function__2 [ts_0, t_1] =
  (EXC.tryOfCatch (\ _ -> (erlps__a_func__2 [ts_0, t_1]))
     (\ of_4 ->
        case of_4 of
          bad_6 | (isEAtom bad_6) -> (BIF.erlang__error__1 [bad_6])
          set_8 -> set_8
          something_else -> (EXC.try_clause something_else))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_5 -> (EXC.raise ex_5)))
erlps__a_function__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__a_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family__1 :: ErlangFun
erlps__family__1 [ts_0] =
  (EXC.tryOfCatch
     (\ _ ->
        let
          arg_2 =
            (ErlangTuple
               [(ErlangAtom "atom"),
                (ErlangCons (ErlangAtom "atom") ErlangEmptyList)])
        in (erlps__fam2__2 [ts_0, arg_2]))
     (\ of_7 ->
        case of_7 of
          bad_9 | (isEAtom bad_9) -> (BIF.erlang__error__1 [bad_9])
          set_11 -> set_11
          something_else -> (EXC.try_clause something_else))
     (\ ex_8 ->
        case ex_8 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_8 -> (EXC.raise ex_8)))
erlps__family__1 [arg_13] = (EXC.function_clause unit)
erlps__family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family__2 :: ErlangFun
erlps__family__2 [ts_0, t_1] =
  (EXC.tryOfCatch (\ _ -> (erlps__fam__2 [ts_0, t_1]))
     (\ of_4 ->
        case of_4 of
          bad_6 | (isEAtom bad_6) -> (BIF.erlang__error__1 [bad_6])
          set_8 -> set_8
          something_else -> (EXC.try_clause something_else))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_5 -> (EXC.raise ex_5)))
erlps__family__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__family__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_external__1 :: ErlangFun
erlps__to_external__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  case s_0 of
    (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 1)) ->
      field_2
    _ -> (EXC.badrecord (ErlangAtom "Set"))
erlps__to_external__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  case s_0 of
    (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 1)) ->
      field_2
    _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
erlps__to_external__1 [arg_5] = (EXC.function_clause unit)
erlps__to_external__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type__1 :: ErlangFun
erlps__type__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    head_1 =
      case s_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in (ErlangCons head_1 ErlangEmptyList)
erlps__type__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  case s_0 of
    (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 2)) ->
      field_2
    _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
erlps__type__1 [arg_5] = (EXC.function_clause unit)
erlps__type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_sets__1 :: ErlangFun
erlps__to_sets__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case s_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangCons type_5 (ErlangEmptyList)) ->
        let
          arg_6 =
            case s_0 of
              (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
                field_8
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in (erlps__list_of_sets__3 [arg_6, type_5, ErlangEmptyList])
      type_12 ->
        let
          arg_13 =
            case s_0 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 1)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in (erlps__list_of_ordsets__3 [arg_13, type_12, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__to_sets__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_12 =
                 (BIF.erlang__is_record__3
                    [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_12 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_14 =
                       case s_0 of
                         (ErlangTuple arr_17) | (DM.Just field_16) <-
                                                  ((arr_17 DA.!! 2)) ->
                           field_16
                         _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
                   in (BIF.erlang__is_tuple__1 [arg_14])
                 _ -> (EXC.badarg1 lop_12)))) =
  let   
    arg_2 =
      case s_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 1)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let arg_1 = (BIF.erlang__tuple_to_list__1 [arg_2])
  in let
    arg_7 =
      case s_0 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let arg_6 = (BIF.erlang__tuple_to_list__1 [arg_7])
  in (erlps__tuple_of_sets__3 [arg_1, arg_6, ErlangEmptyList])
erlps__to_sets__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__to_sets__1 [arg_3] = (EXC.function_clause unit)
erlps__to_sets__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__no_elements__1 :: ErlangFun
erlps__no_elements__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    arg_1 =
      case s_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in (BIF.erlang__length__1 [arg_1])
erlps__no_elements__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_5 =
                 (BIF.erlang__is_record__3
                    [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_7 =
                       case s_0 of
                         (ErlangTuple arr_10) | (DM.Just field_9) <-
                                                  ((arr_10 DA.!! 2)) ->
                           field_9
                         _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
                   in (BIF.erlang__is_tuple__1 [arg_7])
                 _ -> (EXC.badarg1 lop_5)))) =
  let
    arg_1 =
      case s_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in (BIF.erlang__tuple_size__1 [arg_1])
erlps__no_elements__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__no_elements__1 [arg_3] = (EXC.function_clause unit)
erlps__no_elements__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__specification__2 :: ErlangFun
erlps__specification__2 [fun_0, s_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    type_5 =
      case s_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_6 = (erlps__external_fun__1 [fun_0])
  in let
    r_23 =
      case case_6 of
        (ErlangAtom "false") ->
          let   
            arg_8 =
              case s_1 of
                (ErlangTuple arr_11) | (DM.Just field_10) <-
                                         ((arr_11 DA.!! 1)) ->
                  field_10
                _ -> (EXC.badrecord (ErlangAtom "Set"))
          in let arg_13 = (erlps__element_type__1 [type_5])
          in (erlps__spec__4 [arg_8, fun_0, arg_13, ErlangEmptyList])
        xfun_16 ->
          let
            arg_17 =
              case s_1 of
                (ErlangTuple arr_20) | (DM.Just field_19) <-
                                         ((arr_20 DA.!! 1)) ->
                  field_19
                _ -> (EXC.badrecord (ErlangAtom "Set"))
          in (erlps__specification__3 [arg_17, xfun_16, ErlangEmptyList])
        something_else -> (EXC.case_clause something_else)
  in
    case r_23 of
      sl_25 | (isEList sl_25) ->
        (ErlangTuple [(ErlangAtom "Set"), sl_25, type_5])
      bad_29 -> (BIF.erlang__error__1 [bad_29])
      something_else -> (EXC.case_clause something_else)
erlps__specification__2 [arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__specification__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__union__2 :: ErlangFun
erlps__union__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_24 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_24 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_24)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__unify_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      type_12 ->
        let   
          arg_15 =
            case s1_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_19 =
            case s2_1 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 1)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_14 =
            (BIF.do_remote_fun_call "Lists" "erlps__umerge__2"
               [arg_15, arg_19])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_14, type_12])
      something_else -> (EXC.case_clause something_else)
erlps__union__2 [arg_27, arg_28] = (EXC.function_clause unit)
erlps__union__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection__2 :: ErlangFun
erlps__intersection__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_25 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_25)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__unify_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      type_12 ->
        let   
          arg_15 =
            case s1_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_19 =
            case s2_1 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 1)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_14 =
            (erlps__intersection__3 [arg_15, arg_19, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_14, type_12])
      something_else -> (EXC.case_clause something_else)
erlps__intersection__2 [arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__intersection__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__difference__2 :: ErlangFun
erlps__difference__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_25 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_25)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__unify_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      type_12 ->
        let   
          arg_15 =
            case s1_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_19 =
            case s2_1 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 1)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_14 =
            (erlps__difference__3 [arg_15, arg_19, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_14, type_12])
      something_else -> (EXC.case_clause something_else)
erlps__difference__2 [arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__difference__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symdiff__2 :: ErlangFun
erlps__symdiff__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_25 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_25)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__unify_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      type_12 ->
        let   
          arg_15 =
            case s1_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_19 =
            case s2_1 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 1)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_14 = (erlps__symdiff__3 [arg_15, arg_19, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_14, type_12])
      something_else -> (EXC.case_clause something_else)
erlps__symdiff__2 [arg_28, arg_29] = (EXC.function_clause unit)
erlps__symdiff__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symmetric_partition__2 :: ErlangFun
erlps__symmetric_partition__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_25 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_25)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__unify_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      type_12 ->
        let   
          arg_13 =
            case s1_0 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 1)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_17 =
            case s2_1 of
              (ErlangTuple arr_20) | (DM.Just field_19) <-
                                       ((arr_20 DA.!! 1)) ->
                field_19
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in
          (erlps__sympart__6
             [arg_13, arg_17, ErlangEmptyList, ErlangEmptyList,
              ErlangEmptyList, type_12])
      something_else -> (EXC.case_clause something_else)
erlps__symmetric_partition__2 [arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__symmetric_partition__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__product__2 :: ErlangFun
erlps__product__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_42 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_42 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_42)))) =
  case (ErlangAtom "true") of
    _ | ((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let
                   lop_2 =
                     case s1_0 of
                       (ErlangTuple arr_5) | (DM.Just field_4) <-
                                               ((arr_5 DA.!! 2)) ->
                         field_4
                       _ -> (EXC.badrecord (ErlangAtom "Set"))
                 in (BIF.erlang__op_exactEq [lop_2, (ErlangAtom "_")])))) ->
      s1_0
    _ | ((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let
                   lop_7 =
                     case s2_1 of
                       (ErlangTuple arr_10) | (DM.Just field_9) <-
                                                ((arr_10 DA.!! 2)) ->
                         field_9
                       _ -> (EXC.badrecord (ErlangAtom "Set"))
                 in (BIF.erlang__op_exactEq [lop_7, (ErlangAtom "_")])))) ->
      s2_1
    _ ->
      let   
        f_17 =
          (ErlangFun 1
             let
               lambda_12 [e_14] =
                 (ErlangTuple [(ErlangInt (DBI.fromInt 0)), e_14])
               lambda_12 [arg_13] = (EXC.function_clause unit)
               lambda_12 args = (EXC.badarity (ErlangFun 1 lambda_12) args)
             in lambda_12)
      in let
        tup_el_18 =
          case s1_0 of
            (ErlangTuple arr_21) | (DM.Just field_20) <-
                                     ((arr_21 DA.!! 2)) ->
              field_20
            _ -> (EXC.badrecord (ErlangAtom "Set"))
      in let
        tup_el_22 =
          case s2_1 of
            (ErlangTuple arr_25) | (DM.Just field_24) <-
                                     ((arr_25 DA.!! 2)) ->
              field_24
            _ -> (EXC.badrecord (ErlangAtom "Set"))
      in let t_26 = (ErlangTuple [tup_el_18, tup_el_22])
      in let
        arg_31 =
          case s1_0 of
            (ErlangTuple arr_34) | (DM.Just field_33) <-
                                     ((arr_34 DA.!! 1)) ->
              field_33
            _ -> (EXC.badrecord (ErlangAtom "Set"))
      in let
        arg_29 =
          (BIF.do_remote_fun_call "Lists" "erlps__map__2" [f_17, arg_31])
      in let
        arg_37 =
          case s2_1 of
            (ErlangTuple arr_40) | (DM.Just field_39) <-
                                     ((arr_40 DA.!! 1)) ->
              field_39
            _ -> (EXC.badrecord (ErlangAtom "Set"))
      in let
        arg_35 =
          (BIF.do_remote_fun_call "Lists" "erlps__map__2" [f_17, arg_37])
      in let tup_el_28 = (erlps__relprod__2 [arg_29, arg_35])
      in (ErlangTuple [(ErlangAtom "Set"), tup_el_28, t_26])
    _ -> (EXC.if_clause unit)
erlps__product__2 [arg_45, arg_46] = (EXC.function_clause unit)
erlps__product__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__product__1 :: ErlangFun
erlps__product__1 [(ErlangTuple [s1_0, s2_1])] =
  (erlps__product__2 [s1_0, s2_1])
erlps__product__1 [t_0] | (isETuple t_0) =
  let ss_2 = (BIF.erlang__tuple_to_list__1 [t_0])
  in
    (EXC.tryOfCatch (\ _ -> (erlps__sets_to_list__1 [ss_2]))
       (\ of_4 ->
          case of_4 of
            (ErlangEmptyList) ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            l_7 ->
              let    type_10 = (erlps__types__2 [ss_2, ErlangEmptyList])
              in let case_11 = (BIF.lists__member__2 [ErlangEmptyList, l_7])
              in
                case case_11 of
                  (ErlangAtom "true") -> (erlps__empty_set__0 [])
                  (ErlangAtom "false") ->
                    let   
                      arg_16 =
                        (erlps__prod__3 [l_7, ErlangEmptyList, ErlangEmptyList])
                    in let
                      tup_el_15 =
                        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                           [arg_16])
                    in (ErlangTuple [(ErlangAtom "Set"), tup_el_15, type_10])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.try_clause something_else))
       (\ ex_5 ->
          case ex_5 of
            (ErlangTuple [_, _, _]) ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            ex_5 -> (EXC.raise ex_5)))
erlps__product__1 [arg_22] = (EXC.function_clause unit)
erlps__product__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__constant_function__2 :: ErlangFun
erlps__constant_function__2 [s_0, e_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    tup_el_3 =
      case s_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let tup_el_7 = (erlps__is_sofs_set__1 [e_1])
  in let case_2 = (ErlangTuple [tup_el_3, tup_el_7])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "true")]) -> s_0
      (ErlangTuple [type_9, (ErlangAtom "true")]) ->
        let    tup_el_11 = (erlps__type__1 [e_1])
        in let ntype_13 = (ErlangTuple [type_9, tup_el_11])
        in let
          arg_16 =
            case s_0 of
              (ErlangTuple arr_19) | (DM.Just field_18) <-
                                       ((arr_19 DA.!! 1)) ->
                field_18
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let arg_20 = (erlps__to_external__1 [e_1])
        in let
          tup_el_15 =
            (erlps__constant_function__3 [arg_16, arg_20, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_15, ntype_13])
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__constant_function__2 [s_0, _]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
erlps__constant_function__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__constant_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_equal__2 :: ErlangFun
erlps__is_equal__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_20 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_20 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_20)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__match_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let   
          lop_11 =
            case s1_0 of
              (ErlangTuple arr_14) | (DM.Just field_13) <-
                                       ((arr_14 DA.!! 1)) ->
                field_13
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          rop_15 =
            case s2_1 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in (BIF.erlang__op_eq [lop_11, rop_15])
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      something_else -> (EXC.case_clause something_else)
erlps__is_equal__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_20 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_20 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "OrdSet"),
                       (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_20)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let case_2 = (erlps__match_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let   
          lop_11 =
            case s1_0 of
              (ErlangTuple arr_14) | (DM.Just field_13) <-
                                       ((arr_14 DA.!! 1)) ->
                field_13
              _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
        in let
          rop_15 =
            case s2_1 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
        in (BIF.erlang__op_eq [lop_11, rop_15])
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      something_else -> (EXC.case_clause something_else)
erlps__is_equal__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_3 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_3 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "OrdSet"),
                       (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_3)))) =
  (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
erlps__is_equal__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_3 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_3 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_3)))) =
  (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
erlps__is_equal__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__is_equal__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_subset__2 :: ErlangFun
erlps__is_subset__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_20 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_20 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_20)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__match_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let   
          arg_11 =
            case s1_0 of
              (ErlangTuple arr_14) | (DM.Just field_13) <-
                                       ((arr_14 DA.!! 1)) ->
                field_13
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_15 =
            case s2_1 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in (erlps__subset__2 [arg_11, arg_15])
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      something_else -> (EXC.case_clause something_else)
erlps__is_subset__2 [arg_23, arg_24] = (EXC.function_clause unit)
erlps__is_subset__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_sofs_set__1 :: ErlangFun
erlps__is_sofs_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  (ErlangAtom "true")
erlps__is_sofs_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (ErlangAtom "true")
erlps__is_sofs_set__1 [_s_0] = (ErlangAtom "false")
erlps__is_sofs_set__1 [arg_1] = (EXC.function_clause unit)
erlps__is_sofs_set__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_set__1 :: ErlangFun
erlps__is_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  (ErlangAtom "true")
erlps__is_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (ErlangAtom "false")
erlps__is_set__1 [arg_2] = (EXC.function_clause unit)
erlps__is_set__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty_set__1 :: ErlangFun
erlps__is_empty_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    lop_1 =
      case s_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in (BIF.erlang__op_exactEq [lop_1, ErlangEmptyList])
erlps__is_empty_set__1 [s_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  (ErlangAtom "false")
erlps__is_empty_set__1 [arg_2] = (EXC.function_clause unit)
erlps__is_empty_set__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_disjoint__2 :: ErlangFun
erlps__is_disjoint__2 [s1_0, s2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_24 =
                 (BIF.erlang__is_record__3
                    [s1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_24 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_24)))) =
  let   
    arg_3 =
      case s1_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_7 =
      case s2_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 2)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_2 = (erlps__match_types__2 [arg_3, arg_7])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let
          case_11 =
            case s1_0 of
              (ErlangTuple arr_14) | (DM.Just field_13) <-
                                       ((arr_14 DA.!! 1)) ->
                field_13
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in
          case case_11 of
            (ErlangEmptyList) -> (ErlangAtom "true")
            (ErlangCons a_15 as_16) ->
              let
                arg_17 =
                  case s2_1 of
                    (ErlangTuple arr_20) | (DM.Just field_19) <-
                                             ((arr_20 DA.!! 1)) ->
                      field_19
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in (erlps__disjoint__3 [arg_17, a_15, as_16])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      something_else -> (EXC.case_clause something_else)
erlps__is_disjoint__2 [arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__is_disjoint__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__union__1 :: ErlangFun
erlps__union__1 [sets_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [sets_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case sets_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangCons type_5 (ErlangEmptyList)) ->
        let   
          arg_8 =
            case sets_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_7 = (erlps__lunion__1 [arg_8])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_7, type_5])
      (ErlangAtom "_") -> sets_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__union__1 [arg_15] = (EXC.function_clause unit)
erlps__union__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection__1 :: ErlangFun
erlps__intersection__1 [sets_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [sets_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case sets_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      (ErlangCons l_6 ls_7) ->
        let
          case_8 =
            case sets_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 2)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in
          case case_8 of
            (ErlangCons type_12 (ErlangEmptyList)) ->
              let tup_el_14 = (erlps__lintersection__2 [ls_7, l_6])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_14, type_12])
            _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__intersection__1 [arg_20] = (EXC.function_clause unit)
erlps__intersection__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__canonical_relation__1 :: ErlangFun
erlps__canonical_relation__1 [sets_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [sets_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    st_4 =
      case sets_0 of
        (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 2)) ->
          field_2
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case st_4 of
      (ErlangCons (ErlangAtom "_") (ErlangEmptyList)) ->
        (erlps__empty_set__0 [])
      (ErlangCons type_6 (ErlangEmptyList)) ->
        let   
          arg_9 =
            case sets_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__can_rel__2 [arg_9, ErlangEmptyList])
        in let tup_el_14 = (ErlangTuple [type_6, st_4])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> sets_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__canonical_relation__1 [arg_19] =
  (EXC.function_clause unit)
erlps__canonical_relation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel2fam__1 :: ErlangFun
erlps__rel2fam__1 [r_0] = (erlps__relation_to_family__1 [r_0])
erlps__rel2fam__1 [arg_2] = (EXC.function_clause unit)
erlps__rel2fam__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relation_to_family__1 :: ErlangFun
erlps__relation_to_family__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, rt_6]) ->
        let   
          arg_9 =
            case r_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__rel2family__1 [arg_9])
        in let
          tup_el_13 =
            (ErlangTuple [dt_5, (ErlangCons rt_6 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_13])
      (ErlangAtom "_") -> r_0
      _else_18 -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__relation_to_family__1 [arg_21] =
  (EXC.function_clause unit)
erlps__relation_to_family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__domain__1 :: ErlangFun
erlps__domain__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, _]) ->
        let   
          arg_8 =
            case r_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_7 = (erlps__dom__1 [arg_8])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_7, dt_5])
      (ErlangAtom "_") -> r_0
      _else_13 -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__domain__1 [arg_16] = (EXC.function_clause unit)
erlps__domain__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__range__1 :: ErlangFun
erlps__range__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [_, rt_5]) ->
        let   
          arg_8 =
            case r_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_7 = (erlps__ran__2 [arg_8, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_7, rt_5])
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__range__1 [arg_16] = (EXC.function_clause unit)
erlps__range__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field__1 :: ErlangFun
erlps__field__1 [r_0] =
  let    arg_1 = (erlps__domain__1 [r_0])
  in let arg_3 = (erlps__range__1 [r_0])
  in (erlps__union__2 [arg_1, arg_3])
erlps__field__1 [arg_5] = (EXC.function_clause unit)
erlps__field__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relative_product__1 :: ErlangFun
erlps__relative_product__1 [rt_0] | (isETuple rt_0) =
  let arg_1 = (BIF.erlang__tuple_to_list__1 [rt_0])
  in (erlps__relative_product__1 [arg_1])
erlps__relative_product__1 [rl_0] | (isEList rl_0) =
  let
    case_1 =
      (erlps__relprod_n__4
         [rl_0, (ErlangAtom "foo"), (ErlangAtom "false"),
          (ErlangAtom "false")])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "error"), reason_6]) ->
        (BIF.erlang__error__1 [reason_6])
      reply_8 -> reply_8
      something_else -> (EXC.case_clause something_else)
erlps__relative_product__1 [arg_9] = (EXC.function_clause unit)
erlps__relative_product__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relative_product__2 :: ErlangFun
erlps__relative_product__2 [r1_0, r2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_5 =
                 (BIF.erlang__is_record__3
                    [r1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [r2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_2 = (erlps__converse__1 [r1_0])
  in (erlps__relative_product1__2 [arg_2, r2_1])
erlps__relative_product__2 [rt_0, r_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_tuple__1 [rt_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_2 = (BIF.erlang__tuple_to_list__1 [rt_0])
  in (erlps__relative_product__2 [arg_2, r_1])
erlps__relative_product__2 [rl_0, r_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_21 = (BIF.erlang__is_list__1 [rl_0])
             in
               case lop_21 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_21)))) =
  let   
    case_2 =
      case r_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    emptyr_12 =
      case case_2 of
        (ErlangTuple [_, _]) ->
          let
            lop_6 =
              case r_1 of
                (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
                  field_8
                _ -> (EXC.badrecord (ErlangAtom "Set"))
          in (BIF.erlang__op_exactEq [lop_6, ErlangEmptyList])
        (ErlangAtom "_") -> (ErlangAtom "true")
        _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
        something_else -> (EXC.case_clause something_else)
  in let
    case_13 =
      (erlps__relprod_n__4 [rl_0, r_1, emptyr_12, (ErlangAtom "true")])
  in
    case case_13 of
      (ErlangTuple [(ErlangAtom "error"), reason_18]) ->
        (BIF.erlang__error__1 [reason_18])
      reply_20 -> reply_20
      something_else -> (EXC.case_clause something_else)
erlps__relative_product__2 [arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__relative_product__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relative_product1__2 :: ErlangFun
erlps__relative_product1__2 [r1_0, r2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_41 =
                 (BIF.erlang__is_record__3
                    [r1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_41 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [r2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_41)))) =
  let   
    case_2 =
      case r1_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    match_expr_12 =
      case case_2 of
        r1t_6@(ErlangTuple [_, _]) -> r1t_6
        (ErlangAtom "_") ->
          (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_")])
        _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_12 of
      (ErlangTuple [dtr1_10, rtr1_11]) ->
        let   
          case_13 =
            case r2_1 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 2)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          match_expr_23 =
            case case_13 of
              r2t_17@(ErlangTuple [_, _]) -> r2t_17
              (ErlangAtom "_") ->
                (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_")])
              _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
              something_else -> (EXC.case_clause something_else)
        in
          case match_expr_23 of
            (ErlangTuple [dtr2_21, rtr2_22]) ->
              let case_24 = (erlps__match_types__2 [dtr1_10, dtr2_21])
              in
                case case_24 of
                  (ErlangAtom "true") | ((==) dtr1_10 (ErlangAtom "_")) -> r1_0
                  (ErlangAtom "true") | ((==) dtr2_21 (ErlangAtom "_")) -> r2_1
                  (ErlangAtom "true") ->
                    let   
                      arg_29 =
                        case r1_0 of
                          (ErlangTuple arr_32) | (DM.Just field_31) <-
                                                   ((arr_32 DA.!! 1)) ->
                            field_31
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      arg_33 =
                        case r2_1 of
                          (ErlangTuple arr_36) | (DM.Just field_35) <-
                                                   ((arr_36 DA.!! 1)) ->
                            field_35
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let tup_el_28 = (erlps__relprod__2 [arg_29, arg_33])
                    in let tup_el_37 = (ErlangTuple [rtr1_11, rtr2_22])
                    in (ErlangTuple [(ErlangAtom "Set"), tup_el_28, tup_el_37])
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_23)
      _ -> (EXC.badmatch match_expr_12)
erlps__relative_product1__2 [arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__relative_product1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__converse__1 :: ErlangFun
erlps__converse__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, rt_6]) ->
        let   
          arg_9 =
            case r_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__converse__2 [arg_9, ErlangEmptyList])
        in let tup_el_14 = (ErlangTuple [rt_6, dt_5])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__converse__1 [arg_19] = (EXC.function_clause unit)
erlps__converse__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__image__2 :: ErlangFun
erlps__image__2 [r_0, s_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_28 =
                 (BIF.erlang__is_record__3
                    [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_28 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_28)))) =
  let
    case_2 =
      case r_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_2 of
      (ErlangTuple [dt_6, rt_7]) ->
        let   
          arg_10 =
            case s_1 of
              (ErlangTuple arr_13) | (DM.Just field_12) <-
                                       ((arr_13 DA.!! 2)) ->
                field_12
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_8 = (erlps__match_types__2 [dt_6, arg_10])
        in
          case case_8 of
            (ErlangAtom "true") ->
              let   
                arg_17 =
                  case s_1 of
                    (ErlangTuple arr_20) | (DM.Just field_19) <-
                                             ((arr_20 DA.!! 1)) ->
                      field_19
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let
                arg_21 =
                  case r_0 of
                    (ErlangTuple arr_24) | (DM.Just field_23) <-
                                             ((arr_24 DA.!! 1)) ->
                      field_23
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let arg_16 = (erlps__restrict__2 [arg_17, arg_21])
              in let
                tup_el_15 =
                  (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [arg_16])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_15, rt_7])
            (ErlangAtom "false") ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__image__2 [arg_31, arg_32] = (EXC.function_clause unit)
erlps__image__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__inverse_image__2 :: ErlangFun
erlps__inverse_image__2 [r_0, s_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_31 =
                 (BIF.erlang__is_record__3
                    [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_31 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_31)))) =
  let
    case_2 =
      case r_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_2 of
      (ErlangTuple [dt_6, rt_7]) ->
        let   
          arg_10 =
            case s_1 of
              (ErlangTuple arr_13) | (DM.Just field_12) <-
                                       ((arr_13 DA.!! 2)) ->
                field_12
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_8 = (erlps__match_types__2 [rt_7, arg_10])
        in
          case case_8 of
            (ErlangAtom "true") ->
              let   
                arg_14 =
                  case s_1 of
                    (ErlangTuple arr_17) | (DM.Just field_16) <-
                                             ((arr_17 DA.!! 1)) ->
                      field_16
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let
                arg_19 =
                  case r_0 of
                    (ErlangTuple arr_22) | (DM.Just field_21) <-
                                             ((arr_22 DA.!! 1)) ->
                      field_21
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let arg_18 = (erlps__converse__2 [arg_19, ErlangEmptyList])
              in let nl_24 = (erlps__restrict__2 [arg_14, arg_18])
              in let
                tup_el_26 =
                  (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [nl_24])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_26, dt_6])
            (ErlangAtom "false") ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__inverse_image__2 [arg_34, arg_35] =
  (EXC.function_clause unit)
erlps__inverse_image__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strict_relation__1 :: ErlangFun
erlps__strict_relation__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      type_5@(ErlangTuple [_, _]) ->
        let   
          arg_8 =
            case r_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_7 = (erlps__strict__2 [arg_8, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_7, type_5])
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__strict_relation__1 [arg_16] = (EXC.function_clause unit)
erlps__strict_relation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__weak_relation__1 :: ErlangFun
erlps__weak_relation__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, rt_6]) ->
        let case_7 = (erlps__unify_types__2 [dt_5, rt_6])
        in
          case case_7 of
            (ErlangEmptyList) ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            type_11 ->
              let   
                arg_14 =
                  case r_0 of
                    (ErlangTuple arr_17) | (DM.Just field_16) <-
                                             ((arr_17 DA.!! 1)) ->
                      field_16
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let tup_el_13 = (erlps__weak__1 [arg_14])
              in let tup_el_18 = (ErlangTuple [type_11, type_11])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_13, tup_el_18])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> r_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__weak_relation__1 [arg_23] = (EXC.function_clause unit)
erlps__weak_relation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extension__3 :: ErlangFun
erlps__extension__3 [r_0, s_1, e_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_57 =
                 (BIF.erlang__is_record__3
                    [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_57 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_57)))) =
  let   
    tup_el_4 =
      case r_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    tup_el_8 =
      case s_1 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 2)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let tup_el_12 = (erlps__is_sofs_set__1 [e_2])
  in let case_3 = (ErlangTuple [tup_el_4, tup_el_8, tup_el_12])
  in
    case case_3 of
      (ErlangTuple [t_16@(ErlangTuple [dt_14, rt_15]), st_17,
                    (ErlangAtom "true")]) ->
        let    lop_19 = (erlps__match_types__2 [dt_14, st_17])
        in let arg_24 = (erlps__type__1 [e_2])
        in let rop_22 = (erlps__match_types__2 [rt_15, arg_24])
        in let case_18 = (BIF.erlang__op_and [lop_19, rop_22])
        in
          case case_18 of
            (ErlangAtom "false") ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            (ErlangAtom "true") ->
              let   
                rl_30 =
                  case r_0 of
                    (ErlangTuple arr_29) | (DM.Just field_28) <-
                                             ((arr_29 DA.!! 1)) ->
                      field_28
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let
                arg_33 =
                  case s_1 of
                    (ErlangTuple arr_36) | (DM.Just field_35) <-
                                             ((arr_36 DA.!! 1)) ->
                      field_35
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let arg_37 = (erlps__to_external__1 [e_2])
              in let
                case_31 =
                  (erlps__extc__4 [ErlangEmptyList, arg_33, arg_37, rl_30])
              in
                case case_31 of
                  (ErlangEmptyList) -> r_0
                  l_40 ->
                    let   
                      arg_44 =
                        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                           [l_40])
                    in let
                      tup_el_42 =
                        (BIF.do_remote_fun_call "Lists" "erlps__merge__2"
                           [rl_30, arg_44])
                    in (ErlangTuple [(ErlangAtom "Set"), tup_el_42, t_16])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_"),
                    (ErlangAtom "true")]) ->
        r_0
      (ErlangTuple [(ErlangAtom "_"), st_47, (ErlangAtom "true")]) ->
        let case_48 = (erlps__type__1 [e_2])
        in
          case case_48 of
            (ErlangCons (ErlangAtom "_") (ErlangEmptyList)) -> r_0
            et_50 ->
              let tup_el_53 = (ErlangTuple [st_47, et_50])
              in (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, tup_el_53])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [_, _, (ErlangAtom "true")]) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__extension__3 [arg_60, arg_61, arg_62] =
  (EXC.function_clause unit)
erlps__extension__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_a_function__1 :: ErlangFun
erlps__is_a_function__1 [r_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [r_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case r_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [_, _]) ->
        let
          case_5 =
            case r_0 of
              (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 1)) ->
                field_7
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in
          case case_5 of
            (ErlangEmptyList) -> (ErlangAtom "true")
            (ErlangCons (ErlangTuple [v_9, _]) es_10) ->
              (erlps__is_a_func__2 [es_10, v_9])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> (ErlangAtom "true")
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__is_a_function__1 [arg_15] = (EXC.function_clause unit)
erlps__is_a_function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restriction__2 :: ErlangFun
erlps__restriction__2 [relation_0, set_1] =
  (erlps__restriction__3
     [(ErlangInt (DBI.fromInt 1)), relation_0, set_1])
erlps__restriction__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__restriction__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__drestriction__2 :: ErlangFun
erlps__drestriction__2 [relation_0, set_1] =
  (erlps__drestriction__3
     [(ErlangInt (DBI.fromInt 1)), relation_0, set_1])
erlps__drestriction__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__drestriction__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__composite__2 :: ErlangFun
erlps__composite__2 [fn1_0, fn2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_46 =
                 (BIF.erlang__is_record__3
                    [fn1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_46 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [fn2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_46)))) =
  let   
    case_2 =
      case fn1_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    match_expr_12 =
      case case_2 of
        f1t_6@(ErlangTuple [_, _]) -> f1t_6
        (ErlangAtom "_") ->
          (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_")])
        _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_12 of
      (ErlangTuple [dtf1_10, rtf1_11]) ->
        let   
          case_13 =
            case fn2_1 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 2)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          match_expr_23 =
            case case_13 of
              f2t_17@(ErlangTuple [_, _]) -> f2t_17
              (ErlangAtom "_") ->
                (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_")])
              _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
              something_else -> (EXC.case_clause something_else)
        in
          case match_expr_23 of
            (ErlangTuple [dtf2_21, rtf2_22]) ->
              let case_24 = (erlps__match_types__2 [rtf1_11, dtf2_21])
              in
                case case_24 of
                  (ErlangAtom "true") | ((==) dtf1_10 (ErlangAtom "_")) -> fn1_0
                  (ErlangAtom "true") | ((==) dtf2_21 (ErlangAtom "_")) -> fn2_1
                  (ErlangAtom "true") ->
                    let   
                      arg_28 =
                        case fn1_0 of
                          (ErlangTuple arr_31) | (DM.Just field_30) <-
                                                   ((arr_31 DA.!! 1)) ->
                            field_30
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      arg_32 =
                        case fn2_1 of
                          (ErlangTuple arr_35) | (DM.Just field_34) <-
                                                   ((arr_35 DA.!! 1)) ->
                            field_34
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let case_27 = (erlps__comp__2 [arg_28, arg_32])
                    in
                      case case_27 of
                        sl_36 | (isEList sl_36) ->
                          let   
                            tup_el_38 =
                              (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                                 [sl_36])
                          in let tup_el_40 = (ErlangTuple [dtf1_10, rtf2_22])
                          in
                            (ErlangTuple
                               [(ErlangAtom "Set"), tup_el_38, tup_el_40])
                        bad_43 -> (BIF.erlang__error__1 [bad_43])
                        something_else -> (EXC.case_clause something_else)
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_23)
      _ -> (EXC.badmatch match_expr_12)
erlps__composite__2 [arg_49, arg_50] = (EXC.function_clause unit)
erlps__composite__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__inverse__1 :: ErlangFun
erlps__inverse__1 [fn_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [fn_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case fn_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, rt_6]) ->
        let   
          arg_8 =
            case fn_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_7 = (erlps__inverse1__1 [arg_8])
        in
          case case_7 of
            sl_12 | (isEList sl_12) ->
              let tup_el_15 = (ErlangTuple [rt_6, dt_5])
              in (ErlangTuple [(ErlangAtom "Set"), sl_12, tup_el_15])
            bad_18 -> (BIF.erlang__error__1 [bad_18])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> fn_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__inverse__1 [arg_22] = (EXC.function_clause unit)
erlps__inverse__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restriction__3 :: ErlangFun
erlps__restriction__3 [i_0, r_1, s_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_61 = (BIF.erlang__is_integer__1 [i_0])
             in let
               lop_60 =
                 case lop_61 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__is_record__3
                        [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                   _ -> (EXC.badarg1 lop_61)
             in
               case lop_60 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_60)))) =
  let   
    rt_6 =
      case r_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    st_10 =
      case s_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_11 = (erlps__check_for_sort__2 [rt_6, i_0])
  in
    case case_11 of
      (ErlangAtom "empty") -> r_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      sort_15 ->
        let   
          rl_19 =
            case r_1 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let arg_22 = (BIF.erlang__element__2 [i_0, rt_6])
        in let tup_el_21 = (erlps__match_types__2 [arg_22, st_10])
        in let
          tup_el_26 =
            case s_2 of
              (ErlangTuple arr_29) | (DM.Just field_28) <-
                                       ((arr_29 DA.!! 1)) ->
                field_28
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_20 = (ErlangTuple [tup_el_21, tup_el_26])
        in
          case case_20 of
            (ErlangTuple [(ErlangAtom "true"), _sl_30]) | ((==) rl_19
                                                             ErlangEmptyList) ->
              r_1
            (ErlangTuple [(ErlangAtom "true"), (ErlangEmptyList)]) ->
              (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, rt_6])
            (ErlangTuple [(ErlangAtom "true"),
                          (ErlangCons e_34 es_35)]) | ((==) sort_15
                                                         (ErlangAtom
                                                            "false")) ->
              let   
                arg_38 =
                  (erlps__restrict_n__5
                     [i_0, rl_19, e_34, es_35, ErlangEmptyList])
              in let
                tup_el_37 =
                  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_38])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_37, rt_6])
            (ErlangTuple [(ErlangAtom "true"), (ErlangCons e_45 es_46)]) ->
              let   
                arg_51 =
                  (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
                     [i_0, rl_19])
              in let
                arg_49 =
                  (erlps__restrict_n__5
                     [i_0, arg_51, e_45, es_46, ErlangEmptyList])
              in let
                tup_el_48 =
                  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_49])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_48, rt_6])
            (ErlangTuple [(ErlangAtom "false"), _sl_58]) ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__restriction__3 [setfun_0, s1_1, s2_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_73 =
                 (BIF.erlang__is_record__3
                    [s1_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_73 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_73)))) =
  let   
    type1_6 =
      case s1_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    type2_10 =
      case s2_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    sl1_14 =
      case s1_1 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 1)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_15 = (erlps__external_fun__1 [setfun_0])
  in
    case case_15 of
      (ErlangAtom "false") | ((==) type2_10 (ErlangAtom "_")) -> s2_2
      (ErlangAtom "false") ->
        let    arg_20 = (erlps__element_type__1 [type1_6])
        in let case_17 = (erlps__subst__3 [sl1_14, setfun_0, arg_20])
        in
          case case_17 of
            (ErlangTuple [nsl_22, newtype_23]) ->
              let case_24 = (erlps__match_types__2 [newtype_23, type2_10])
              in
                case case_24 of
                  (ErlangAtom "true") ->
                    let   
                      arg_28 =
                        case s2_2 of
                          (ErlangTuple arr_31) | (DM.Just field_30) <-
                                                   ((arr_31 DA.!! 1)) ->
                            field_30
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      arg_32 = (erlps__converse__2 [nsl_22, ErlangEmptyList])
                    in let arg_27 = (erlps__restrict__2 [arg_28, arg_32])
                    in let
                      nl_35 =
                        (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                           [arg_27])
                    in (ErlangTuple [(ErlangAtom "Set"), nl_35, type1_6])
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                  something_else -> (EXC.case_clause something_else)
            bad_40 -> (BIF.erlang__error__1 [bad_40])
            something_else -> (EXC.case_clause something_else)
      _ | ((==) type1_6 (ErlangAtom "_")) -> s1_1
      _xfun_42 | (isEList type1_6) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      xfun_44 ->
        let
          funt_47 =
            (BIF.erlang__apply__2
               [xfun_44, (ErlangCons type1_6 ErlangEmptyList)])
        in
          (EXC.tryOfCatch
             (\ _ -> (erlps__check_fun__3 [type1_6, xfun_44, funt_47]))
             (\ of_51 ->
                case of_51 of
                  sort_53 ->
                    let case_54 = (erlps__match_types__2 [funt_47, type2_10])
                    in
                      case case_54 of
                        (ErlangAtom "true") ->
                          let   
                            r1_60 =
                              (erlps__inverse_substitution__3
                                 [sl1_14, xfun_44, sort_53])
                          in let
                            arg_65 =
                              case s2_2 of
                                (ErlangTuple arr_68) | (DM.Just field_67) <-
                                                         ((arr_68 DA.!! 1)) ->
                                  field_67
                                _ -> (EXC.badrecord (ErlangAtom "Set"))
                          in let arg_64 = (erlps__restrict__2 [arg_65, r1_60])
                          in let tup_el_62 = (erlps__sort__2 [sort_53, arg_64])
                          in
                            (ErlangTuple
                               [(ErlangAtom "Set"), tup_el_62, type1_6])
                        (ErlangAtom "false") ->
                          (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                        something_else -> (EXC.case_clause something_else)
                  something_else -> (EXC.try_clause something_else))
             (\ ex_52 ->
                case ex_52 of
                  (ErlangTuple [_, _, _]) ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  ex_52 -> (EXC.raise ex_52)))
      something_else -> (EXC.case_clause something_else)
erlps__restriction__3 [arg_76, arg_77, arg_78] =
  (EXC.function_clause unit)
erlps__restriction__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__drestriction__3 :: ErlangFun
erlps__drestriction__3 [i_0, r_1, s_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_56 = (BIF.erlang__is_integer__1 [i_0])
             in let
               lop_55 =
                 case lop_56 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__is_record__3
                        [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                   _ -> (EXC.badarg1 lop_56)
             in
               case lop_55 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_55)))) =
  let   
    rt_6 =
      case r_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    st_10 =
      case s_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_11 = (erlps__check_for_sort__2 [rt_6, i_0])
  in
    case case_11 of
      (ErlangAtom "empty") -> r_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      sort_15 ->
        let   
          rl_19 =
            case r_1 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let arg_22 = (BIF.erlang__element__2 [i_0, rt_6])
        in let tup_el_21 = (erlps__match_types__2 [arg_22, st_10])
        in let
          tup_el_26 =
            case s_2 of
              (ErlangTuple arr_29) | (DM.Just field_28) <-
                                       ((arr_29 DA.!! 1)) ->
                field_28
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_20 = (ErlangTuple [tup_el_21, tup_el_26])
        in
          case case_20 of
            (ErlangTuple [(ErlangAtom "true"), (ErlangEmptyList)]) -> r_1
            (ErlangTuple [(ErlangAtom "true"), _sl_30]) | ((==) rl_19
                                                             ErlangEmptyList) ->
              r_1
            (ErlangTuple [(ErlangAtom "true"),
                          (ErlangCons e_31 es_32)]) | ((==) sort_15
                                                         (ErlangAtom
                                                            "false")) ->
              let
                tup_el_34 =
                  (erlps__diff_restrict_n__5
                     [i_0, rl_19, e_31, es_32, ErlangEmptyList])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_34, rt_6])
            (ErlangTuple [(ErlangAtom "true"), (ErlangCons e_41 es_42)]) ->
              let   
                arg_46 =
                  (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
                     [i_0, rl_19])
              in let
                tup_el_44 =
                  (erlps__diff_restrict_n__5
                     [i_0, arg_46, e_41, es_42, ErlangEmptyList])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_44, rt_6])
            (ErlangTuple [(ErlangAtom "false"), _sl_53]) ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__drestriction__3 [setfun_0, s1_1, s2_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_75 =
                 (BIF.erlang__is_record__3
                    [s1_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_75 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_75)))) =
  let   
    type1_6 =
      case s1_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    type2_10 =
      case s2_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    sl1_14 =
      case s1_1 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 1)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_15 = (erlps__external_fun__1 [setfun_0])
  in
    case case_15 of
      (ErlangAtom "false") | ((==) type2_10 (ErlangAtom "_")) -> s1_1
      (ErlangAtom "false") ->
        let    arg_20 = (erlps__element_type__1 [type1_6])
        in let case_17 = (erlps__subst__3 [sl1_14, setfun_0, arg_20])
        in
          case case_17 of
            (ErlangTuple [nsl_22, newtype_23]) ->
              let case_24 = (erlps__match_types__2 [newtype_23, type2_10])
              in
                case case_24 of
                  (ErlangAtom "true") ->
                    let   
                      sl2_30 =
                        case s2_2 of
                          (ErlangTuple arr_29) | (DM.Just field_28) <-
                                                   ((arr_29 DA.!! 1)) ->
                            field_28
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      arg_33 = (erlps__converse__2 [nsl_22, ErlangEmptyList])
                    in let arg_31 = (erlps__diff_restrict__2 [sl2_30, arg_33])
                    in let
                      nl_36 =
                        (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                           [arg_31])
                    in (ErlangTuple [(ErlangAtom "Set"), nl_36, type1_6])
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                  something_else -> (EXC.case_clause something_else)
            bad_41 -> (BIF.erlang__error__1 [bad_41])
            something_else -> (EXC.case_clause something_else)
      _ | ((==) type1_6 (ErlangAtom "_")) -> s1_1
      _xfun_43 | (isEList type1_6) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      xfun_45 ->
        let
          funt_48 =
            (BIF.erlang__apply__2
               [xfun_45, (ErlangCons type1_6 ErlangEmptyList)])
        in
          (EXC.tryOfCatch
             (\ _ -> (erlps__check_fun__3 [type1_6, xfun_45, funt_48]))
             (\ of_52 ->
                case of_52 of
                  sort_54 ->
                    let case_55 = (erlps__match_types__2 [funt_48, type2_10])
                    in
                      case case_55 of
                        (ErlangAtom "true") ->
                          let   
                            r1_61 =
                              (erlps__inverse_substitution__3
                                 [sl1_14, xfun_45, sort_54])
                          in let
                            sl2_65 =
                              case s2_2 of
                                (ErlangTuple arr_64) | (DM.Just field_63) <-
                                                         ((arr_64 DA.!! 1)) ->
                                  field_63
                                _ -> (EXC.badrecord (ErlangAtom "Set"))
                          in let
                            arg_69 = (erlps__diff_restrict__2 [sl2_65, r1_61])
                          in let tup_el_67 = (erlps__sort__2 [sort_54, arg_69])
                          in
                            (ErlangTuple
                               [(ErlangAtom "Set"), tup_el_67, type1_6])
                        (ErlangAtom "false") ->
                          (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                        something_else -> (EXC.case_clause something_else)
                  something_else -> (EXC.try_clause something_else))
             (\ ex_53 ->
                case ex_53 of
                  (ErlangTuple [_, _, _]) ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  ex_53 -> (EXC.raise ex_53)))
      something_else -> (EXC.case_clause something_else)
erlps__drestriction__3 [arg_78, arg_79, arg_80] =
  (EXC.function_clause unit)
erlps__drestriction__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__projection__2 :: ErlangFun
erlps__projection__2 [i_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_30 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_30 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_30)))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_6 = (erlps__check_for_sort__2 [type_5, i_0])
  in
    case case_6 of
      (ErlangAtom "empty") -> set_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      _ | ((==) i_0 (ErlangInt (DBI.fromInt 1))) ->
        let   
          arg_12 =
            case set_1 of
              (ErlangTuple arr_15) | (DM.Just field_14) <-
                                       ((arr_15 DA.!! 1)) ->
                field_14
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_11 = (erlps__projection1__1 [arg_12])
        in let tup_el_16 = (BIF.erlang__element__2 [i_0, type_5])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_11, tup_el_16])
      _ ->
        let   
          arg_21 =
            case set_1 of
              (ErlangTuple arr_24) | (DM.Just field_23) <-
                                       ((arr_24 DA.!! 1)) ->
                field_23
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_20 =
            (erlps__projection_n__3 [arg_21, i_0, ErlangEmptyList])
        in let tup_el_27 = (BIF.erlang__element__2 [i_0, type_5])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_20, tup_el_27])
      something_else -> (EXC.case_clause something_else)
erlps__projection__2 [fun_0, set_1] =
  let arg_2 = (erlps__substitution__2 [fun_0, set_1])
  in (erlps__range__1 [arg_2])
erlps__projection__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__projection__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substitution__2 :: ErlangFun
erlps__substitution__2 [i_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_26 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_26 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_26)))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_6 = (erlps__check_for_sort__2 [type_5, i_0])
  in
    case case_6 of
      (ErlangAtom "empty") -> set_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      _sort_10 ->
        let    ntype_13 = (BIF.erlang__element__2 [i_0, type_5])
        in let
          arg_14 =
            case set_1 of
              (ErlangTuple arr_17) | (DM.Just field_16) <-
                                       ((arr_17 DA.!! 1)) ->
                field_16
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          nsl_20 =
            (erlps__substitute_element__3 [arg_14, i_0, ErlangEmptyList])
        in let tup_el_23 = (ErlangTuple [type_5, ntype_13])
        in (ErlangTuple [(ErlangAtom "Set"), nsl_20, tup_el_23])
      something_else -> (EXC.case_clause something_else)
erlps__substitution__2 [setfun_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    l_9 =
      case set_1 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 1)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_10 = (erlps__external_fun__1 [setfun_0])
  in
    case case_10 of
      (ErlangAtom "false") | ((/=) l_9 ErlangEmptyList) ->
        let    arg_15 = (erlps__element_type__1 [type_5])
        in let case_12 = (erlps__subst__3 [l_9, setfun_0, arg_15])
        in
          case case_12 of
            (ErlangTuple [sl_17, newtype_18]) ->
              let   
                tup_el_20 =
                  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [sl_17])
              in let tup_el_22 = (ErlangTuple [type_5, newtype_18])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_20, tup_el_22])
            bad_25 -> (BIF.erlang__error__1 [bad_25])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") -> (erlps__empty_set__0 [])
      _ | ((==) type_5 (ErlangAtom "_")) -> (erlps__empty_set__0 [])
      _xfun_27 | (isEList type_5) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      xfun_29 ->
        let
          funt_32 =
            (BIF.erlang__apply__2
               [xfun_29, (ErlangCons type_5 ErlangEmptyList)])
        in
          (EXC.tryOfCatch
             (\ _ -> (erlps__check_fun__3 [type_5, xfun_29, funt_32]))
             (\ of_36 ->
                case of_36 of
                  _sort_38 ->
                    let   
                      sl_42 =
                        (erlps__substitute__3 [l_9, xfun_29, ErlangEmptyList])
                    in let tup_el_45 = (ErlangTuple [type_5, funt_32])
                    in (ErlangTuple [(ErlangAtom "Set"), sl_42, tup_el_45])
                  something_else -> (EXC.try_clause something_else))
             (\ ex_37 ->
                case ex_37 of
                  (ErlangTuple [_, _, _]) ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  ex_37 -> (EXC.raise ex_37)))
      something_else -> (EXC.case_clause something_else)
erlps__substitution__2 [arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__substitution__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition__1 :: ErlangFun
erlps__partition__1 [sets_0] =
  let    arg_1 = (erlps__canonical_relation__1 [sets_0])
  in let f1_3 = (erlps__relation_to_family__1 [arg_1])
  in let arg_4 = (erlps__converse__1 [f1_3])
  in let f2_6 = (erlps__relation_to_family__1 [arg_4])
  in (erlps__range__1 [f2_6])
erlps__partition__1 [arg_8] = (EXC.function_clause unit)
erlps__partition__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition__2 :: ErlangFun
erlps__partition__2 [i_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_32 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_32 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_32)))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_6 = (erlps__check_for_sort__2 [type_5, i_0])
  in
    case case_6 of
      (ErlangAtom "empty") -> set_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      (ErlangAtom "false") ->
        let   
          arg_13 =
            case set_1 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 1)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_11 = (erlps__partition_n__2 [i_0, arg_13])
        in
          (ErlangTuple
             [(ErlangAtom "Set"), tup_el_11,
              (ErlangCons type_5 ErlangEmptyList)])
      (ErlangAtom "true") ->
        let   
          arg_25 =
            case set_1 of
              (ErlangTuple arr_28) | (DM.Just field_27) <-
                                       ((arr_28 DA.!! 1)) ->
                field_27
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_23 =
            (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
               [i_0, arg_25])
        in let tup_el_21 = (erlps__partition_n__2 [i_0, arg_23])
        in
          (ErlangTuple
             [(ErlangAtom "Set"), tup_el_21,
              (ErlangCons type_5 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__partition__2 [fun_0, set_1] =
  let arg_2 = (erlps__partition_family__2 [fun_0, set_1])
  in (erlps__range__1 [arg_2])
erlps__partition__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__partition__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition__3 :: ErlangFun
erlps__partition__3 [i_0, r_1, s_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_83 = (BIF.erlang__is_integer__1 [i_0])
             in let
               lop_82 =
                 case lop_83 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__is_record__3
                        [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                   _ -> (EXC.badarg1 lop_83)
             in
               case lop_82 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_82)))) =
  let   
    rt_6 =
      case r_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    st_10 =
      case s_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_11 = (erlps__check_for_sort__2 [rt_6, i_0])
  in
    case case_11 of
      (ErlangAtom "empty") -> (ErlangTuple [r_1, r_1])
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      sort_17 ->
        let   
          rl_21 =
            case r_1 of
              (ErlangTuple arr_20) | (DM.Just field_19) <-
                                       ((arr_20 DA.!! 1)) ->
                field_19
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let arg_24 = (BIF.erlang__element__2 [i_0, rt_6])
        in let tup_el_23 = (erlps__match_types__2 [arg_24, st_10])
        in let
          tup_el_28 =
            case s_2 of
              (ErlangTuple arr_31) | (DM.Just field_30) <-
                                       ((arr_31 DA.!! 1)) ->
                field_30
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_22 = (ErlangTuple [tup_el_23, tup_el_28])
        in
          case case_22 of
            (ErlangTuple [(ErlangAtom "true"), _sl_32]) | ((==) rl_21
                                                             ErlangEmptyList) ->
              (ErlangTuple [r_1, r_1])
            (ErlangTuple [(ErlangAtom "true"), (ErlangEmptyList)]) ->
              let
                tup_el_35 =
                  (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, rt_6])
              in (ErlangTuple [tup_el_35, r_1])
            (ErlangTuple [(ErlangAtom "true"),
                          (ErlangCons e_40 es_41)]) | ((==) sort_17
                                                         (ErlangAtom
                                                            "false")) ->
              let
                match_expr_50 =
                  (erlps__partition3_n__6
                     [i_0, rl_21, e_40, es_41, ErlangEmptyList,
                      ErlangEmptyList])
              in
                case match_expr_50 of
                  (ErlangCons l1_48 l2_49) ->
                    let   
                      tup_el_51 =
                        (ErlangTuple [(ErlangAtom "Set"), l1_48, rt_6])
                    in let
                      tup_el_55 =
                        (ErlangTuple [(ErlangAtom "Set"), l2_49, rt_6])
                    in (ErlangTuple [tup_el_51, tup_el_55])
                  _ -> (EXC.badmatch match_expr_50)
            (ErlangTuple [(ErlangAtom "true"), (ErlangCons e_59 es_60)]) ->
              let   
                arg_62 =
                  (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
                     [i_0, rl_21])
              in let
                match_expr_71 =
                  (erlps__partition3_n__6
                     [i_0, arg_62, e_59, es_60, ErlangEmptyList,
                      ErlangEmptyList])
              in
                case match_expr_71 of
                  (ErlangCons l1_69 l2_70) ->
                    let   
                      tup_el_72 =
                        (ErlangTuple [(ErlangAtom "Set"), l1_69, rt_6])
                    in let
                      tup_el_76 =
                        (ErlangTuple [(ErlangAtom "Set"), l2_70, rt_6])
                    in (ErlangTuple [tup_el_72, tup_el_76])
                  _ -> (EXC.badmatch match_expr_71)
            (ErlangTuple [(ErlangAtom "false"), _sl_80]) ->
              (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__partition__3 [setfun_0, s1_1, s2_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_94 =
                 (BIF.erlang__is_record__3
                    [s1_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_94 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [s2_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_94)))) =
  let   
    type1_6 =
      case s1_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    type2_10 =
      case s2_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    sl1_14 =
      case s1_1 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 1)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_15 = (erlps__external_fun__1 [setfun_0])
  in
    case case_15 of
      (ErlangAtom "false") | ((==) type2_10 (ErlangAtom "_")) ->
        (ErlangTuple [s2_2, s1_1])
      (ErlangAtom "false") ->
        let    arg_22 = (erlps__element_type__1 [type1_6])
        in let case_19 = (erlps__subst__3 [sl1_14, setfun_0, arg_22])
        in
          case case_19 of
            (ErlangTuple [nsl_24, newtype_25]) ->
              let case_26 = (erlps__match_types__2 [newtype_25, type2_10])
              in
                case case_26 of
                  (ErlangAtom "true") ->
                    let   
                      r1_31 = (erlps__converse__2 [nsl_24, ErlangEmptyList])
                    in let
                      arg_32 =
                        case s2_2 of
                          (ErlangTuple arr_35) | (DM.Just field_34) <-
                                                   ((arr_35 DA.!! 1)) ->
                            field_34
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      match_expr_39 = (erlps__partition3__2 [arg_32, r1_31])
                    in
                      case match_expr_39 of
                        (ErlangCons l1_37 l2_38) ->
                          let   
                            tup_el_42 =
                              (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                                 [l1_37])
                          in let
                            tup_el_40 =
                              (ErlangTuple
                                 [(ErlangAtom "Set"), tup_el_42, type1_6])
                          in let
                            tup_el_47 =
                              (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
                                 [l2_38])
                          in let
                            tup_el_45 =
                              (ErlangTuple
                                 [(ErlangAtom "Set"), tup_el_47, type1_6])
                          in (ErlangTuple [tup_el_40, tup_el_45])
                        _ -> (EXC.badmatch match_expr_39)
                  (ErlangAtom "false") ->
                    (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                  something_else -> (EXC.case_clause something_else)
            bad_51 -> (BIF.erlang__error__1 [bad_51])
            something_else -> (EXC.case_clause something_else)
      _ | ((==) type1_6 (ErlangAtom "_")) -> (ErlangTuple [s1_1, s1_1])
      _xfun_55 | (isEList type1_6) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      xfun_57 ->
        let
          funt_60 =
            (BIF.erlang__apply__2
               [xfun_57, (ErlangCons type1_6 ErlangEmptyList)])
        in
          (EXC.tryOfCatch
             (\ _ -> (erlps__check_fun__3 [type1_6, xfun_57, funt_60]))
             (\ of_64 ->
                case of_64 of
                  sort_66 ->
                    let case_67 = (erlps__match_types__2 [funt_60, type2_10])
                    in
                      case case_67 of
                        (ErlangAtom "true") ->
                          let   
                            r1_73 =
                              (erlps__inverse_substitution__3
                                 [sl1_14, xfun_57, sort_66])
                          in let
                            arg_74 =
                              case s2_2 of
                                (ErlangTuple arr_77) | (DM.Just field_76) <-
                                                         ((arr_77 DA.!! 1)) ->
                                  field_76
                                _ -> (EXC.badrecord (ErlangAtom "Set"))
                          in let
                            match_expr_81 =
                              (erlps__partition3__2 [arg_74, r1_73])
                          in
                            case match_expr_81 of
                              (ErlangCons l1_79 l2_80) ->
                                let   
                                  tup_el_84 =
                                    (BIF.do_remote_fun_call "Lists"
                                       "erlps__sort__1" [l1_79])
                                in let
                                  tup_el_82 =
                                    (ErlangTuple
                                       [(ErlangAtom "Set"), tup_el_84, type1_6])
                                in let
                                  tup_el_89 =
                                    (BIF.do_remote_fun_call "Lists"
                                       "erlps__sort__1" [l2_80])
                                in let
                                  tup_el_87 =
                                    (ErlangTuple
                                       [(ErlangAtom "Set"), tup_el_89, type1_6])
                                in (ErlangTuple [tup_el_82, tup_el_87])
                              _ -> (EXC.badmatch match_expr_81)
                        (ErlangAtom "false") ->
                          (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
                        something_else -> (EXC.case_clause something_else)
                  something_else -> (EXC.try_clause something_else))
             (\ ex_65 ->
                case ex_65 of
                  (ErlangTuple [_, _, _]) ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  ex_65 -> (EXC.raise ex_65)))
      something_else -> (EXC.case_clause something_else)
erlps__partition__3 [arg_97, arg_98, arg_99] =
  (EXC.function_clause unit)
erlps__partition__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__multiple_relative_product__2 :: ErlangFun
erlps__multiple_relative_product__2 [t_0, r_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_19 = (BIF.erlang__is_tuple__1 [t_0])
             in
               case lop_19 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [r_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_19)))) =
  let    arg_4 = (BIF.erlang__tuple_size__1 [t_0])
  in let
    case_2 = (erlps__test_rel__3 [r_1, arg_4, (ErlangAtom "eq")])
  in
    case case_2 of
      (ErlangAtom "true") | ((ErlangAtom "true") ==
                               (falsifyErrors
                                  (\ _ ->
                                     let
                                       lop_7 =
                                         case r_1 of
                                           (ErlangTuple arr_10) | (DM.Just field_9) <-
                                                                    ((arr_10 DA.!!
                                                                        2)) ->
                                             field_9
                                           _ ->
                                             (EXC.badrecord (ErlangAtom "Set"))
                                     in
                                       (BIF.erlang__op_exactEq
                                          [lop_7, (ErlangAtom "_")])))) ->
        (erlps__empty_set__0 [])
      (ErlangAtom "true") ->
        let    arg_12 = (BIF.erlang__tuple_to_list__1 [t_0])
        in let
          mprod_16 =
            (erlps__mul_relprod__3
               [arg_12, (ErlangInt (DBI.fromInt 1)), r_1])
        in (erlps__relative_product__1 [mprod_16])
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__multiple_relative_product__2 [arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__multiple_relative_product__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__4 :: ErlangFun
erlps__join__4 [r1_0, i1_1, r2_2, i2_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_79 =
                 (BIF.erlang__is_record__3
                    [r1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in let
               lop_78 =
                 case lop_79 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__is_record__3
                        [r2_2, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                   _ -> (EXC.badarg1 lop_79)
             in let
               lop_77 =
                 case lop_78 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") -> (BIF.erlang__is_integer__1 [i1_1])
                   _ -> (EXC.badarg1 lop_78)
             in
               case lop_77 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_integer__1 [i2_3])
                 _ -> (EXC.badarg1 lop_77)))) =
  let   
    lop_5 = (erlps__test_rel__3 [r1_0, i1_1, (ErlangAtom "lte")])
  in let
    rop_9 = (erlps__test_rel__3 [r2_2, i2_3, (ErlangAtom "lte")])
  in let case_4 = (BIF.erlang__op_and [lop_5, rop_9])
  in
    case case_4 of
      (ErlangAtom "false") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      (ErlangAtom "true") | ((ErlangAtom "true") ==
                               (falsifyErrors
                                  (\ _ ->
                                     let
                                       lop_14 =
                                         case r1_0 of
                                           (ErlangTuple arr_17) | (DM.Just field_16) <-
                                                                    ((arr_17 DA.!!
                                                                        2)) ->
                                             field_16
                                           _ ->
                                             (EXC.badrecord (ErlangAtom "Set"))
                                     in
                                       (BIF.erlang__op_exactEq
                                          [lop_14, (ErlangAtom "_")])))) ->
        r1_0
      (ErlangAtom "true") | ((ErlangAtom "true") ==
                               (falsifyErrors
                                  (\ _ ->
                                     let
                                       lop_19 =
                                         case r2_2 of
                                           (ErlangTuple arr_22) | (DM.Just field_21) <-
                                                                    ((arr_22 DA.!!
                                                                        2)) ->
                                             field_21
                                           _ ->
                                             (EXC.badrecord (ErlangAtom "Set"))
                                     in
                                       (BIF.erlang__op_exactEq
                                          [lop_19, (ErlangAtom "_")])))) ->
        r2_2
      (ErlangAtom "true") ->
        let    record_24 = (erlps__raise_element__2 [r1_0, i1_1])
        in let
          l1_29 =
            case record_24 of
              (ErlangTuple arr_28) | (DM.Just field_27) <-
                                       ((arr_28 DA.!! 1)) ->
                field_27
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let record_30 = (erlps__raise_element__2 [r2_2, i2_3])
        in let
          l2_35 =
            case record_30 of
              (ErlangTuple arr_34) | (DM.Just field_33) <-
                                       ((arr_34 DA.!! 1)) ->
                field_33
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let t_38 = (erlps__relprod1__2 [l1_29, l2_35])
        in let
          lop_40 =
            (BIF.erlang__op_exactEq [i1_1, (ErlangInt (DBI.fromInt 1))])
        in let
          rop_43 =
            (BIF.erlang__op_exactEq [i2_3, (ErlangInt (DBI.fromInt 1))])
        in let case_39 = (BIF.erlang__op_and [lop_40, rop_43])
        in let
          f_60 =
            case case_39 of
              (ErlangAtom "true") ->
                (ErlangFun 1
                   let
                     lambda_46 [(ErlangTuple [x_48, y_49])] =
                       (erlps__join_element__2 [x_48, y_49])
                     lambda_46 [arg_47] = (EXC.function_clause unit)
                     lambda_46 args =
                       (EXC.badarity (ErlangFun 1 lambda_46) args)
                   in lambda_46)
              (ErlangAtom "false") ->
                (ErlangFun 1
                   let
                     lambda_52 [(ErlangTuple [x_54, y_55])] =
                       let arg_56 = (erlps__join_element__3 [x_54, y_55, i2_3])
                       in (BIF.erlang__list_to_tuple__1 [arg_56])
                     lambda_52 [arg_53] = (EXC.function_clause unit)
                     lambda_52 args =
                       (EXC.badarity (ErlangFun 1 lambda_52) args)
                   in lambda_52)
              something_else -> (EXC.case_clause something_else)
        in let
          tup_el_62 = (erlps__replace__3 [t_38, f_60, ErlangEmptyList])
        in let
          tup_el_68 =
            case r1_0 of
              (ErlangTuple arr_71) | (DM.Just field_70) <-
                                       ((arr_71 DA.!! 2)) ->
                field_70
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_72 =
            case r2_2 of
              (ErlangTuple arr_75) | (DM.Just field_74) <-
                                       ((arr_75 DA.!! 2)) ->
                field_74
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let arg_67 = (ErlangTuple [tup_el_68, tup_el_72])
        in let
          tup_el_66 =
            (BIF.erlang__apply__2
               [f_60, (ErlangCons arg_67 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_62, tup_el_66])
      something_else -> (EXC.case_clause something_else)
erlps__join__4 [arg_84, arg_85, arg_86, arg_87] =
  (EXC.function_clause unit)
erlps__join__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_rel__3 :: ErlangFun
erlps__test_rel__3 [r_0, i_1, c_2] =
  let
    case_3 =
      case r_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_3 of
      rel_7 | ((ErlangAtom "true") ==
                 (falsifyErrors
                    (\ _ ->
                       let    lop_9 = (BIF.erlang__is_tuple__1 [rel_7])
                       in let
                         lop_8 =
                           case lop_9 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_exactEq [c_2, (ErlangAtom "eq")])
                             _ -> (EXC.badarg1 lop_9)
                       in
                         case lop_8 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             let rop_14 = (BIF.erlang__tuple_size__1 [rel_7])
                             in (BIF.erlang__op_exactEq [i_1, rop_14])
                           _ -> (EXC.badarg1 lop_8)))) ->
        (ErlangAtom "true")
      rel_16 | ((ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_19 = (BIF.erlang__is_tuple__1 [rel_16])
                        in let
                          lop_18 =
                            case lop_19 of
                              (ErlangAtom "false") -> (ErlangAtom "false")
                              (ErlangAtom "true") ->
                                (BIF.erlang__op_exactEq
                                   [c_2, (ErlangAtom "lte")])
                              _ -> (EXC.badarg1 lop_19)
                        in let
                          lop_17 =
                            case lop_18 of
                              (ErlangAtom "false") -> (ErlangAtom "false")
                              (ErlangAtom "true") ->
                                (BIF.erlang__op_greaterEq
                                   [i_1, (ErlangInt (DBI.fromInt 1))])
                              _ -> (EXC.badarg1 lop_18)
                        in
                          case lop_17 of
                            (ErlangAtom "false") -> (ErlangAtom "false")
                            (ErlangAtom "true") ->
                              let rop_26 = (BIF.erlang__tuple_size__1 [rel_16])
                              in (BIF.erlang__op_lesserEq [i_1, rop_26])
                            _ -> (EXC.badarg1 lop_17)))) ->
        (ErlangAtom "true")
      (ErlangAtom "_") -> (ErlangAtom "true")
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__test_rel__3 [arg_28, arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__test_rel__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam2rel__1 :: ErlangFun
erlps__fam2rel__1 [f_0] = (erlps__family_to_relation__1 [f_0])
erlps__fam2rel__1 [arg_2] = (EXC.function_clause unit)
erlps__fam2rel__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_to_relation__1 :: ErlangFun
erlps__family_to_relation__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5, (ErlangCons rt_6 (ErlangEmptyList))]) ->
        let   
          arg_9 =
            case f_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__family2rel__2 [arg_9, ErlangEmptyList])
        in let tup_el_14 = (ErlangTuple [dt_5, rt_6])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_to_relation__1 [arg_19] =
  (EXC.function_clause unit)
erlps__family_to_relation__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_specification__2 :: ErlangFun
erlps__family_specification__2 [fun_0, f_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_2 =
      case f_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_2 of
      ftype_8@(ErlangTuple [_dt_6,
                            (ErlangCons type_7 (ErlangEmptyList))]) ->
        let    case_9 = (erlps__external_fun__1 [fun_0])
        in let
          r_25 =
            case case_9 of
              (ErlangAtom "false") ->
                let
                  arg_11 =
                    case f_1 of
                      (ErlangTuple arr_14) | (DM.Just field_13) <-
                                               ((arr_14 DA.!! 1)) ->
                        field_13
                      _ -> (EXC.badrecord (ErlangAtom "Set"))
                in (erlps__fam_spec__4 [arg_11, fun_0, type_7, ErlangEmptyList])
              xfun_18 ->
                let
                  arg_19 =
                    case f_1 of
                      (ErlangTuple arr_22) | (DM.Just field_21) <-
                                               ((arr_22 DA.!! 1)) ->
                        field_21
                      _ -> (EXC.badrecord (ErlangAtom "Set"))
                in
                  (erlps__fam_specification__3
                     [arg_19, xfun_18, ErlangEmptyList])
              something_else -> (EXC.case_clause something_else)
        in
          case r_25 of
            sl_27 | (isEList sl_27) ->
              (ErlangTuple [(ErlangAtom "Set"), sl_27, ftype_8])
            bad_31 -> (BIF.erlang__error__1 [bad_31])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> f_1
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_specification__2 [arg_35, arg_36] =
  (EXC.function_clause unit)
erlps__family_specification__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__union_of_family__1 :: ErlangFun
erlps__union_of_family__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [_dt_5, (ErlangCons type_6 (ErlangEmptyList))]) ->
        let   
          arg_9 =
            case f_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__un_of_fam__2 [arg_9, ErlangEmptyList])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, type_6])
      (ErlangAtom "_") -> f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__union_of_family__1 [arg_17] = (EXC.function_clause unit)
erlps__union_of_family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection_of_family__1 :: ErlangFun
erlps__intersection_of_family__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [_dt_5, (ErlangCons type_6 (ErlangEmptyList))]) ->
        let   
          arg_8 =
            case f_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_7 = (erlps__int_of_fam__1 [arg_8])
        in
          case case_7 of
            fu_12 | (isEList fu_12) ->
              (ErlangTuple [(ErlangAtom "Set"), fu_12, type_6])
            bad_16 -> (BIF.erlang__error__1 [bad_16])
            something_else -> (EXC.case_clause something_else)
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__intersection_of_family__1 [arg_20] =
  (EXC.function_clause unit)
erlps__intersection_of_family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_union__1 :: ErlangFun
erlps__family_union__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5,
                    (ErlangCons (ErlangCons type_6 (ErlangEmptyList)) (ErlangEmptyList))]) ->
        let   
          arg_9 =
            case f_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__fam_un__2 [arg_9, ErlangEmptyList])
        in let
          tup_el_14 =
            (ErlangTuple [dt_5, (ErlangCons type_6 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_union__1 [arg_21] = (EXC.function_clause unit)
erlps__family_union__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_intersection__1 :: ErlangFun
erlps__family_intersection__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5,
                    (ErlangCons (ErlangCons type_6 (ErlangEmptyList)) (ErlangEmptyList))]) ->
        let   
          arg_8 =
            case f_0 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 1)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let case_7 = (erlps__fam_int__2 [arg_8, ErlangEmptyList])
        in
          case case_7 of
            fu_13 | (isEList fu_13) ->
              let
                tup_el_16 =
                  (ErlangTuple [dt_5, (ErlangCons type_6 ErlangEmptyList)])
              in (ErlangTuple [(ErlangAtom "Set"), fu_13, tup_el_16])
            bad_21 -> (BIF.erlang__error__1 [bad_21])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_intersection__1 [arg_25] =
  (EXC.function_clause unit)
erlps__family_intersection__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_domain__1 :: ErlangFun
erlps__family_domain__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [fdt_5,
                    (ErlangCons (ErlangTuple [dt_6, _]) (ErlangEmptyList))]) ->
        let   
          arg_9 =
            case f_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__fam_dom__2 [arg_9, ErlangEmptyList])
        in let
          tup_el_14 =
            (ErlangTuple [fdt_5, (ErlangCons dt_6 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> f_0
      (ErlangTuple [_,
                    (ErlangCons (ErlangAtom "_") (ErlangEmptyList))]) ->
        f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_domain__1 [arg_21] = (EXC.function_clause unit)
erlps__family_domain__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_range__1 :: ErlangFun
erlps__family_range__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [dt_5,
                    (ErlangCons (ErlangTuple [_, rt_6]) (ErlangEmptyList))]) ->
        let   
          arg_9 =
            case f_0 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 1)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_8 = (erlps__fam_ran__2 [arg_9, ErlangEmptyList])
        in let
          tup_el_14 =
            (ErlangTuple [dt_5, (ErlangCons rt_6 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_8, tup_el_14])
      (ErlangAtom "_") -> f_0
      (ErlangTuple [_,
                    (ErlangCons (ErlangAtom "_") (ErlangEmptyList))]) ->
        f_0
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_range__1 [arg_21] = (EXC.function_clause unit)
erlps__family_range__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_field__1 :: ErlangFun
erlps__family_field__1 [f_0] =
  let    arg_1 = (erlps__family_domain__1 [f_0])
  in let arg_3 = (erlps__family_range__1 [f_0])
  in (erlps__family_union__2 [arg_1, arg_3])
erlps__family_field__1 [arg_5] = (EXC.function_clause unit)
erlps__family_field__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_union__2 :: ErlangFun
erlps__family_union__2 [f1_0, f2_1] =
  let arg_4 = (ErlangFun 3 erlps__fam_union__3)
  in (erlps__fam_binop__3 [f1_0, f2_1, arg_4])
erlps__family_union__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__family_union__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_intersection__2 :: ErlangFun
erlps__family_intersection__2 [f1_0, f2_1] =
  let arg_4 = (ErlangFun 3 erlps__fam_intersect__3)
  in (erlps__fam_binop__3 [f1_0, f2_1, arg_4])
erlps__family_intersection__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__family_intersection__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_difference__2 :: ErlangFun
erlps__family_difference__2 [f1_0, f2_1] =
  let arg_4 = (ErlangFun 3 erlps__fam_difference__3)
  in (erlps__fam_binop__3 [f1_0, f2_1, arg_4])
erlps__family_difference__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__family_difference__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_binop__3 :: ErlangFun
erlps__fam_binop__3 [f1_0, f2_1, ff_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_28 =
                 (BIF.erlang__is_record__3
                    [f1_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
             in
               case lop_28 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [f2_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_28)))) =
  let   
    arg_4 =
      case f1_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    arg_8 =
      case f2_1 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 2)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_3 = (erlps__unify_types__2 [arg_4, arg_8])
  in
    case case_3 of
      (ErlangEmptyList) ->
        (BIF.erlang__error__1 [(ErlangAtom "type_mismatch")])
      (ErlangAtom "_") -> f1_0
      type_13@(ErlangTuple [_, (ErlangCons _ (ErlangEmptyList))]) ->
        let   
          arg_16 =
            case f1_0 of
              (ErlangTuple arr_19) | (DM.Just field_18) <-
                                       ((arr_19 DA.!! 1)) ->
                field_18
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_20 =
            case f2_1 of
              (ErlangTuple arr_23) | (DM.Just field_22) <-
                                       ((arr_23 DA.!! 1)) ->
                field_22
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          tup_el_15 =
            (BIF.erlang__apply__2
               [ff_2,
                (ErlangCons arg_16
                   (ErlangCons arg_20
                      (ErlangCons ErlangEmptyList ErlangEmptyList)))])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_15, type_13])
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__fam_binop__3 [arg_31, arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__fam_binop__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition_family__2 :: ErlangFun
erlps__partition_family__2 [i_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_40 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_40 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_record__3
                      [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])
                 _ -> (EXC.badarg1 lop_40)))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_6 = (erlps__check_for_sort__2 [type_5, i_0])
  in
    case case_6 of
      (ErlangAtom "empty") -> set_1
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      (ErlangAtom "false") ->
        let   
          arg_13 =
            case set_1 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 1)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let tup_el_11 = (erlps__fam_partition_n__2 [i_0, arg_13])
        in let tup_el_18 = (BIF.erlang__element__2 [i_0, type_5])
        in let
          tup_el_17 =
            (ErlangTuple [tup_el_18, (ErlangCons type_5 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_11, tup_el_17])
      (ErlangAtom "true") ->
        let   
          arg_29 =
            case set_1 of
              (ErlangTuple arr_32) | (DM.Just field_31) <-
                                       ((arr_32 DA.!! 1)) ->
                field_31
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          arg_27 =
            (BIF.do_remote_fun_call "Lists" "erlps__keysort__2"
               [i_0, arg_29])
        in let tup_el_25 = (erlps__fam_partition_n__2 [i_0, arg_27])
        in let tup_el_34 = (BIF.erlang__element__2 [i_0, type_5])
        in let
          tup_el_33 =
            (ErlangTuple [tup_el_34, (ErlangCons type_5 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "Set"), tup_el_25, tup_el_33])
      something_else -> (EXC.case_clause something_else)
erlps__partition_family__2 [setfun_0, set_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [set_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    type_5 =
      case set_1 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    sl_9 =
      case set_1 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 1)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let case_10 = (erlps__external_fun__1 [setfun_0])
  in
    case case_10 of
      (ErlangAtom "false") | ((/=) sl_9 ErlangEmptyList) ->
        let    arg_15 = (erlps__element_type__1 [type_5])
        in let case_12 = (erlps__subst__3 [sl_9, setfun_0, arg_15])
        in
          case case_12 of
            (ErlangTuple [nsl_17, newtype_18]) ->
              let    arg_19 = (erlps__converse__2 [nsl_17, ErlangEmptyList])
              in let
                p_23 = (erlps__fam_partition__2 [arg_19, (ErlangAtom "true")])
              in let
                tup_el_25 =
                  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [p_23])
              in let
                tup_el_27 =
                  (ErlangTuple
                     [newtype_18, (ErlangCons type_5 ErlangEmptyList)])
              in (ErlangTuple [(ErlangAtom "Set"), tup_el_25, tup_el_27])
            bad_32 -> (BIF.erlang__error__1 [bad_32])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") -> (erlps__empty_set__0 [])
      _ | ((==) type_5 (ErlangAtom "_")) -> (erlps__empty_set__0 [])
      _xfun_34 | (isEList type_5) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      xfun_36 ->
        let
          dtype_39 =
            (BIF.erlang__apply__2
               [xfun_36, (ErlangCons type_5 ErlangEmptyList)])
        in
          (EXC.tryOfCatch
             (\ _ -> (erlps__check_fun__3 [type_5, xfun_36, dtype_39]))
             (\ of_43 ->
                case of_43 of
                  sort_45 ->
                    let   
                      arg_46 =
                        case set_1 of
                          (ErlangTuple arr_49) | (DM.Just field_48) <-
                                                   ((arr_49 DA.!! 1)) ->
                            field_48
                          _ -> (EXC.badrecord (ErlangAtom "Set"))
                    in let
                      ts_52 =
                        (erlps__inverse_substitution__3
                           [arg_46, xfun_36, sort_45])
                    in let p_55 = (erlps__fam_partition__2 [ts_52, sort_45])
                    in let
                      tup_el_57 =
                        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                           [p_55])
                    in let
                      tup_el_59 =
                        (ErlangTuple
                           [dtype_39, (ErlangCons type_5 ErlangEmptyList)])
                    in (ErlangTuple [(ErlangAtom "Set"), tup_el_57, tup_el_59])
                  something_else -> (EXC.try_clause something_else))
             (\ ex_44 ->
                case ex_44 of
                  (ErlangTuple [_, _, _]) ->
                    (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                  ex_44 -> (EXC.raise ex_44)))
      something_else -> (EXC.case_clause something_else)
erlps__partition_family__2 [arg_66, arg_67] =
  (EXC.function_clause unit)
erlps__partition_family__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_projection__2 :: ErlangFun
erlps__family_projection__2 [setfun_0, f_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_1, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_2 =
      case f_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_2 of
      (ErlangTuple [_,
                    (ErlangCons _ (ErlangEmptyList))]) | ((ErlangAtom "true") ==
                                                            (falsifyErrors
                                                               (\ _ ->
                                                                  let
                                                                    rop_7 =
                                                                      case f_1 of
                                                                        (ErlangTuple arr_10) | (DM.Just field_9) <-
                                                                                                 ((arr_10 DA.!!
                                                                                                     1)) ->
                                                                          field_9
                                                                        _ ->
                                                                          (EXC.badrecord
                                                                             (ErlangAtom
                                                                                "Set"))
                                                                  in
                                                                    (BIF.erlang__op_exactEq
                                                                       [ErlangEmptyList,
                                                                        rop_7])))) ->
        (erlps__empty_set__0 [])
      (ErlangTuple [dt_11, (ErlangCons type_12 (ErlangEmptyList))]) ->
        let case_13 = (erlps__external_fun__1 [setfun_0])
        in
          case case_13 of
            (ErlangAtom "false") ->
              let   
                arg_16 =
                  case f_1 of
                    (ErlangTuple arr_19) | (DM.Just field_18) <-
                                             ((arr_19 DA.!! 1)) ->
                      field_18
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in let
                case_15 =
                  (erlps__fam_proj__5
                     [arg_16, setfun_0, type_12, (ErlangAtom "_"),
                      ErlangEmptyList])
              in
                case case_15 of
                  (ErlangTuple [sl_24, newtype_25]) ->
                    let tup_el_28 = (ErlangTuple [dt_11, newtype_25])
                    in (ErlangTuple [(ErlangAtom "Set"), sl_24, tup_el_28])
                  bad_31 -> (BIF.erlang__error__1 [bad_31])
                  something_else -> (EXC.case_clause something_else)
            _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> f_1
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_projection__2 [arg_36, arg_37] =
  (EXC.function_clause unit)
erlps__family_projection__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_to_digraph__1 :: ErlangFun
erlps__family_to_digraph__1 [f_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_1 =
      case f_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_1 of
      (ErlangTuple [_, (ErlangCons _ (ErlangEmptyList))]) ->
        let arg_6 = (BIF.do_remote_fun_call "Digraph" "erlps__new__0" [])
        in (erlps__fam2digraph__2 [f_0, arg_6])
      (ErlangAtom "_") ->
        (BIF.do_remote_fun_call "Digraph" "erlps__new__0" [])
      _else_7 -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__family_to_digraph__1 [arg_10] = (EXC.function_clause unit)
erlps__family_to_digraph__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family_to_digraph__2 :: ErlangFun
erlps__family_to_digraph__2 [f_0, type_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [f_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    case_2 =
      case f_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 2)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    _ =
      case case_2 of
        (ErlangTuple [_, (ErlangCons _ (ErlangEmptyList))]) ->
          (ErlangAtom "ok")
        (ErlangAtom "_") -> (ErlangAtom "ok")
        _else_6 -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
        something_else -> (EXC.case_clause something_else)
  in
    (EXC.tryOfCatch
       (\ _ ->
          (BIF.do_remote_fun_call "Digraph" "erlps__new__1" [type_1]))
       (\ of_9 ->
          case of_9 of
            g_11 ->
              let
                case_12 =
                  (EXC.tryCatch (\ _ -> (erlps__fam2digraph__2 [f_0, g_11]))
                     (\ ex_16 ->
                        case ex_16 of
                          (ErlangTuple [(ErlangAtom "throw"), payload_17, _]) ->
                            payload_17
                          (ErlangTuple [(ErlangAtom "error"), payload_18,
                                        stack_19]) ->
                            let tup_el_21 = (ErlangTuple [payload_18, stack_19])
                            in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_21])
                          (ErlangTuple [(ErlangAtom "exit"), payload_24, _]) ->
                            (ErlangTuple [(ErlangAtom "EXIT"), payload_24])
                          ex_16 -> (EXC.raise ex_16)))
              in
                case case_12 of
                  (ErlangTuple [(ErlangAtom "error"), reason_27]) ->
                    let
                      match_expr_29 =
                        (BIF.do_remote_fun_call "Digraph" "erlps__delete__1"
                           [g_11])
                    in
                      case match_expr_29 of
                        (ErlangAtom "true") ->
                          (BIF.erlang__error__1 [reason_27])
                        _ -> (EXC.badmatch match_expr_29)
                  _ -> g_11
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.try_clause something_else))
       (\ ex_10 ->
          case ex_10 of
            (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg"), _]) ->
              (BIF.erlang__error__1 [(ErlangAtom "badarg")])
            ex_10 -> (EXC.raise ex_10)))
erlps__family_to_digraph__2 [arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__family_to_digraph__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__digraph_to_family__1 :: ErlangFun
erlps__digraph_to_family__1 [g_0] =
  (EXC.tryOfCatch (\ _ -> (erlps__digraph_family__1 [g_0]))
     (\ of_2 ->
        case of_2 of
          l_4 ->
            let
              tup_el_7 =
                (ErlangTuple
                   [(ErlangAtom "atom"),
                    (ErlangCons (ErlangAtom "atom") ErlangEmptyList)])
            in (ErlangTuple [(ErlangAtom "Set"), l_4, tup_el_7])
          something_else -> (EXC.try_clause something_else))
     (\ ex_3 ->
        case ex_3 of
          (ErlangTuple [_, _, _]) ->
            (BIF.erlang__error__1 [(ErlangAtom "badarg")])
          ex_3 -> (EXC.raise ex_3)))
erlps__digraph_to_family__1 [arg_13] = (EXC.function_clause unit)
erlps__digraph_to_family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__digraph_to_family__2 :: ErlangFun
erlps__digraph_to_family__2 [g_0, t_1] =
  let    tup_el_3 = (erlps__is_type__1 [t_1])
  in let case_2 = (ErlangTuple [tup_el_3, t_1])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "true"),
                    (ErlangCons type_6@(ErlangTuple [_,
                                                     (ErlangCons _ (ErlangEmptyList))]) (ErlangEmptyList))]) ->
        (EXC.tryOfCatch (\ _ -> (erlps__digraph_family__1 [g_0]))
           (\ of_8 ->
              case of_8 of
                l_10 -> (ErlangTuple [(ErlangAtom "Set"), l_10, type_6])
                something_else -> (EXC.try_clause something_else))
           (\ ex_9 ->
              case ex_9 of
                (ErlangTuple [_, _, _]) ->
                  (BIF.erlang__error__1 [(ErlangAtom "badarg")])
                ex_9 -> (EXC.raise ex_9)))
      _ -> (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__digraph_to_family__2 [arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__digraph_to_family__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_types__2 :: ErlangFun
erlps__is_types__2 [(ErlangInt num_0), _t_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__is_types__2 [i_0, t_1] =
  let    arg_3 = (BIF.erlang__element__2 [i_0, t_1])
  in let case_2 = (erlps__is_type__1 [arg_3])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let
          arg_6 = (BIF.erlang__op_minus [i_0, (ErlangInt (DBI.fromInt 1))])
        in (erlps__is_types__2 [arg_6, t_1])
      (ErlangAtom "false") -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__is_types__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__is_types__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_element_type__1 :: ErlangFun
erlps__is_element_type__1 [(ErlangAtom "_")] =
  (ErlangAtom "true")
erlps__is_element_type__1 [t_0] = (erlps__is_type__1 [t_0])
erlps__is_element_type__1 [arg_2] = (EXC.function_clause unit)
erlps__is_element_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_of_sets__3 :: ErlangFun
erlps__set_of_sets__3 [(ErlangCons s_0 ss_1), l_2, t0_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    head_6 =
      case s_0 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    case_4 =
      (erlps__unify_types__2
         [(ErlangCons head_6 ErlangEmptyList), t0_3])
  in
    case case_4 of
      (ErlangEmptyList) ->
        (ErlangTuple
           [(ErlangAtom "error"), (ErlangAtom "type_mismatch")])
      type_14 ->
        let
          head_17 =
            case s_0 of
              (ErlangTuple arr_20) | (DM.Just field_19) <-
                                       ((arr_20 DA.!! 1)) ->
                field_19
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in
          (erlps__set_of_sets__3 [ss_1, (ErlangCons head_17 l_2), type_14])
      something_else -> (EXC.case_clause something_else)
erlps__set_of_sets__3 [(ErlangCons s_0 ss_1), l_2, t0_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    arg_5 =
      case s_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 2)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let case_4 = (erlps__unify_types__2 [arg_5, t0_3])
  in
    case case_4 of
      (ErlangEmptyList) ->
        (ErlangTuple
           [(ErlangAtom "error"), (ErlangAtom "type_mismatch")])
      type_12 ->
        let
          head_15 =
            case s_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 1)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
        in
          (erlps__set_of_sets__3 [ss_1, (ErlangCons head_15 l_2), type_12])
      something_else -> (EXC.case_clause something_else)
erlps__set_of_sets__3 [(ErlangEmptyList), l_0, t_1] =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_0])
  in (ErlangTuple [(ErlangAtom "Set"), tup_el_3, t_1])
erlps__set_of_sets__3 [_, _l_0, _t_1] =
  (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
erlps__set_of_sets__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__set_of_sets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ordset_of_sets__3 :: ErlangFun
erlps__ordset_of_sets__3 [(ErlangCons s_0 ss_1), l_2, t_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    head_6 =
      case s_0 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let
    head_13 =
      case s_0 of
        (ErlangTuple arr_16) | (DM.Just field_15) <-
                                 ((arr_16 DA.!! 2)) ->
          field_15
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    (erlps__ordset_of_sets__3
       [ss_1, (ErlangCons head_6 l_2),
        (ErlangCons (ErlangCons head_13 ErlangEmptyList) t_3)])
erlps__ordset_of_sets__3 [(ErlangCons s_0 ss_1), l_2, t_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [s_0, (ErlangAtom "OrdSet"), (ErlangInt (DBI.fromInt 3))])))) =
  let   
    head_6 =
      case s_0 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in let
    head_12 =
      case s_0 of
        (ErlangTuple arr_15) | (DM.Just field_14) <-
                                 ((arr_15 DA.!! 2)) ->
          field_14
        _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
  in
    (erlps__ordset_of_sets__3
       [ss_1, (ErlangCons head_6 l_2), (ErlangCons head_12 t_3)])
erlps__ordset_of_sets__3 [(ErlangEmptyList), l_0, t_1] =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
  in let tup_el_3 = (BIF.erlang__list_to_tuple__1 [arg_4])
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [t_1])
  in let tup_el_6 = (BIF.erlang__list_to_tuple__1 [arg_7])
  in (ErlangTuple [(ErlangAtom "OrdSet"), tup_el_3, tup_el_6])
erlps__ordset_of_sets__3 [_, _l_0, _t_1] = (ErlangAtom "error")
erlps__ordset_of_sets__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__ordset_of_sets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel__2 :: ErlangFun
erlps__rel__2 [ts_0, (ErlangCons type_1 (ErlangEmptyList))] =
  let    lop_3 = (erlps__is_type__1 [type_1])
  in let
    rop_5 =
      (erlps__atoms_only__2 [type_1, (ErlangInt (DBI.fromInt 1))])
  in let case_2 = (BIF.erlang__op_and [lop_3, rop_5])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let arg_9 = (BIF.erlang__tuple_size__1 [type_1])
        in (erlps__rel__3 [ts_0, arg_9, type_1])
      (ErlangAtom "false") ->
        (erlps__rel_type__3 [ts_0, ErlangEmptyList, type_1])
      something_else -> (EXC.case_clause something_else)
erlps__rel__2 [ts_0, sz_1] =
  let
    arg_4 = (BIF.erlang__make_tuple__2 [sz_1, (ErlangAtom "atom")])
  in (erlps__rel__3 [ts_0, sz_1, arg_4])
erlps__rel__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__rel__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__atoms_only__2 :: ErlangFun
erlps__atoms_only__2 [type_0, i_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let arg_6 = (BIF.erlang__element__2 [i_1, type_0])
             in (BIF.erlang__is_atom__1 [arg_6])))) =
  let
    arg_3 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__atoms_only__2 [type_0, arg_3])
erlps__atoms_only__2 [type_0, i_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    rop_4 = (BIF.erlang__tuple_size__1 [type_0])
             in let lop_2 = (BIF.erlang__op_greater [i_1, rop_4])
             in
               case lop_2 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_tuple__1 [type_0])
                 _ -> (EXC.badarg1 lop_2)))) =
  (ErlangAtom "true")
erlps__atoms_only__2 [_type_0, _i_1] = (ErlangAtom "false")
erlps__atoms_only__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__atoms_only__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel__3 :: ErlangFun
erlps__rel__3 [ts_0, sz_1, type_2]
  | (weakGeq sz_1 (ErlangInt (DBI.fromInt 1))) =
  let
    sl_4 = (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [ts_0])
  in (erlps__rel__4 [sl_4, sl_4, sz_1, type_2])
erlps__rel__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__rel__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel__4 :: ErlangFun
erlps__rel__4 [(ErlangCons t_0 ts_1), l_2, sz_3, type_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_9 = (BIF.erlang__tuple_size__1 [t_0])
             in (BIF.erlang__op_exactEq [lop_9, sz_3])))) =
  (erlps__rel__4 [ts_1, l_2, sz_3, type_4])
erlps__rel__4 [(ErlangEmptyList), l_0, _sz_1, type_2] =
  (ErlangTuple [(ErlangAtom "Set"), l_0, type_2])
erlps__rel__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__rel__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel_type__3 :: ErlangFun
erlps__rel_type__3 [(ErlangCons e_0 ts_1), l_2, type_3] =
  let match_expr_9 = (erlps__make_element__3 [e_0, type_3, type_3])
  in
    case match_expr_9 of
      (ErlangTuple [ntype_7, ne_8]) ->
        (erlps__rel_type__3 [ts_1, (ErlangCons ne_8 l_2), ntype_7])
      _ -> (EXC.badmatch match_expr_9)
erlps__rel_type__3 [(ErlangEmptyList), (ErlangEmptyList),
                    (ErlangAtom "_")]
  =
  (erlps__empty_set__0 [])
erlps__rel_type__3 [(ErlangEmptyList), sl_0, type_1]
  | (isETuple type_1) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [sl_0])
  in (ErlangTuple [(ErlangAtom "Set"), tup_el_3, type_1])
erlps__rel_type__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__rel_type__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__a_func__2 :: ErlangFun
erlps__a_func__2 [ts_0, t_1] =
  let    tup_el_4 = (erlps__is_type__1 [t_1])
  in let case_2 = (ErlangTuple [t_1, tup_el_4])
  in
    case case_2 of
      (ErlangTuple [(ErlangCons type_8@(ErlangTuple [dt_6,
                                                     rt_7]) (ErlangEmptyList)),
                    (ErlangAtom "true")]) | ((isEAtom dt_6) &&
                                               (isEAtom rt_7)) ->
        (erlps__func__2 [ts_0, type_8])
      (ErlangTuple [(ErlangCons type_11 (ErlangEmptyList)),
                    (ErlangAtom "true")]) ->
        let
          arg_15 =
            (ErlangFun 1
               let
                 lambda_16 [(ErlangTuple [_, _])] = (ErlangAtom "true")
                 lambda_16 [arg_17] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 1 lambda_16) args)
               in lambda_16)
        in (erlps__func_type__4 [ts_0, ErlangEmptyList, type_11, arg_15])
      something_else -> (EXC.case_clause something_else)
erlps__a_func__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__a_func__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func__2 :: ErlangFun
erlps__func__2 [l0_0, type_1] =
  let
    l_3 = (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l0_0])
  in (erlps__func__4 [l_3, l_3, l_3, type_1])
erlps__func__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__func__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func__4 :: ErlangFun
erlps__func__4 [(ErlangCons (ErlangTuple [x_0, _]) ts_1), x0_2,
                l_3, type_4]
  | (weakNEq x_0 x0_2) =
  (erlps__func__4 [ts_1, x_0, l_3, type_4])
erlps__func__4 [(ErlangCons (ErlangTuple [x_0, _]) _ts_1), x0_2,
                _l_3, _type_4]
  | (weakEq x_0 x0_2) =
  (ErlangAtom "bad_function")
erlps__func__4 [(ErlangEmptyList), _x0_0, l_1, type_2] =
  (ErlangTuple [(ErlangAtom "Set"), l_1, type_2])
erlps__func__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__func__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam__2 :: ErlangFun
erlps__fam__2 [ts_0, t_1] =
  let    tup_el_4 = (erlps__is_type__1 [t_1])
  in let case_2 = (ErlangTuple [t_1, tup_el_4])
  in
    case case_2 of
      (ErlangTuple [(ErlangCons type_8@(ErlangTuple [dt_6,
                                                     (ErlangCons rt_7 (ErlangEmptyList))]) (ErlangEmptyList)),
                    (ErlangAtom "true")]) | ((isEAtom dt_6) &&
                                               (isEAtom rt_7)) ->
        (erlps__fam2__2 [ts_0, type_8])
      (ErlangTuple [(ErlangCons type_11 (ErlangEmptyList)),
                    (ErlangAtom "true")]) ->
        let
          arg_15 =
            (ErlangFun 1
               let
                 lambda_16 [(ErlangTuple [_, (ErlangCons _ (ErlangEmptyList))])]
                   =
                   (ErlangAtom "true")
                 lambda_16 [arg_17] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 1 lambda_16) args)
               in lambda_16)
        in (erlps__func_type__4 [ts_0, ErlangEmptyList, type_11, arg_15])
      something_else -> (EXC.case_clause something_else)
erlps__fam__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__fam__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam2__2 :: ErlangFun
erlps__fam2__2 [(ErlangEmptyList), type_0] =
  (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, type_0])
erlps__fam2__2 [ts_0, type_1] =
  let
    arg_2 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [ts_0])
  in (erlps__fam2__4 [arg_2, ts_0, ErlangEmptyList, type_1])
erlps__fam2__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__fam2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam2__4 :: ErlangFun
erlps__fam2__4 [(ErlangCons (ErlangTuple [i_0, l_1]) t_2), i0_3,
                sl_4, type_5]
  | (weakNEq i_0 i0_3) =
  let   
    tup_el_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_1])
  in let head_9 = (ErlangTuple [i_0, tup_el_11])
  in (erlps__fam2__4 [t_2, i_0, (ErlangCons head_9 sl_4), type_5])
erlps__fam2__4 [(ErlangCons (ErlangTuple [i_0, l_1]) t_2), i0_3,
                sl_4, type_5]
  | (weakEq i_0 i0_3) =
  let   
    tup_el_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_1])
  in let case_6 = (ErlangTuple [tup_el_7, sl_4])
  in
    case case_6 of
      (ErlangTuple [nl_10,
                    (ErlangCons (ErlangTuple [_i_11, nl1_12]) _)]) | (weakEq
                                                                        nl_10
                                                                        nl1_12) ->
        (erlps__fam2__4 [t_2, i0_3, sl_4, type_5])
      _ -> (ErlangAtom "bad_function")
      something_else -> (EXC.case_clause something_else)
erlps__fam2__4 [(ErlangEmptyList), _i0_0, sl_1, type_2] =
  let
    tup_el_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [sl_1])
  in (ErlangTuple [(ErlangAtom "Set"), tup_el_4, type_2])
erlps__fam2__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__fam2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func_type__4 :: ErlangFun
erlps__func_type__4 [(ErlangCons e_0 t_1), sl_2, type_3, f_4] =
  let
    match_expr_10 = (erlps__make_element__3 [e_0, type_3, type_3])
  in
    case match_expr_10 of
      (ErlangTuple [ntype_8, ne_9]) ->
        (erlps__func_type__4 [t_1, (ErlangCons ne_9 sl_2), ntype_8, f_4])
      _ -> (EXC.badmatch match_expr_10)
erlps__func_type__4 [(ErlangEmptyList), (ErlangEmptyList),
                     (ErlangAtom "_"), _f_0]
  =
  (erlps__empty_set__0 [])
erlps__func_type__4 [(ErlangEmptyList), sl_0, type_1, f_2] =
  let
    match_expr_5 =
      (BIF.erlang__apply__2 [f_2, (ErlangCons type_1 ErlangEmptyList)])
  in
    case match_expr_5 of
      (ErlangAtom "true") ->
        let   
          nl_7 = (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [sl_0])
        in let arg_9 = (ErlangTuple [(ErlangAtom "Set"), nl_7, type_1])
        in (erlps__check_function__2 [nl_7, arg_9])
      _ -> (EXC.badmatch match_expr_5)
erlps__func_type__4 [arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__func_type__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__setify__2 :: ErlangFun
erlps__setify__2 [l_0, (ErlangCons atom_1 (ErlangEmptyList))]
  | ((isEAtom atom_1) && ((/=) atom_1 (ErlangAtom "_"))) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_0])
  in (ErlangTuple [(ErlangAtom "Set"), tup_el_3, atom_1])
erlps__setify__2 [l_0, (ErlangCons type0_1 (ErlangEmptyList))] =
  (EXC.tryOfCatch (\ _ -> (erlps__is_no_lists__1 [type0_1]))
     (\ of_3 ->
        case of_3 of
          n_5 | (isEInt n_5) -> (erlps__rel__3 [l_0, n_5, type0_1])
          sizes_9 -> (erlps__make_oset__4 [l_0, sizes_9, l_0, type0_1])
          something_else -> (EXC.try_clause something_else))
     (\ ex_4 ->
        case ex_4 of
          (ErlangTuple [_, _, _]) ->
            let
              match_expr_20 =
                (erlps__create__4 [l_0, type0_1, type0_1, ErlangEmptyList])
            in
              case match_expr_20 of
                (ErlangTuple [(ErlangCons type_18 (ErlangEmptyList)),
                              set_19]) ->
                  (ErlangTuple [(ErlangAtom "Set"), set_19, type_18])
                _ -> (EXC.badmatch match_expr_20)
          ex_4 -> (EXC.raise ex_4)))
erlps__setify__2 [e_0, type0_1] =
  let
    match_expr_7 = (erlps__make_element__3 [e_0, type0_1, type0_1])
  in
    case match_expr_7 of
      (ErlangTuple [type_5, ordset_6]) ->
        (ErlangTuple [(ErlangAtom "OrdSet"), ordset_6, type_5])
      _ -> (EXC.badmatch match_expr_7)
erlps__setify__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__setify__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_no_lists__1 :: ErlangFun
erlps__is_no_lists__1 [t_0] | (isETuple t_0) =
  let sz_2 = (BIF.erlang__tuple_size__1 [t_0])
  in (erlps__is_no_lists__4 [t_0, sz_2, sz_2, ErlangEmptyList])
erlps__is_no_lists__1 [arg_7] = (EXC.function_clause unit)
erlps__is_no_lists__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_no_lists__4 :: ErlangFun
erlps__is_no_lists__4 [_t_0, (ErlangInt num_1), sz_2,
                       (ErlangEmptyList)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  sz_2
erlps__is_no_lists__4 [_t_0, (ErlangInt num_1), sz_2, l_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangTuple [sz_2, l_3])
erlps__is_no_lists__4 [t_0, i_1, sz_2, l_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let arg_10 = (BIF.erlang__element__2 [i_1, t_0])
             in (BIF.erlang__is_atom__1 [arg_10])))) =
  let
    arg_5 = (BIF.erlang__op_minus [i_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__is_no_lists__4 [t_0, arg_5, sz_2, l_3])
erlps__is_no_lists__4 [t_0, i_1, sz_2, l_3] =
  let   
    arg_5 = (BIF.erlang__op_minus [i_1, (ErlangInt (DBI.fromInt 1))])
  in let arg_13 = (BIF.erlang__element__2 [i_1, t_0])
  in let tup_el_12 = (erlps__is_no_lists__1 [arg_13])
  in let head_10 = (ErlangTuple [i_1, tup_el_12])
  in
    (erlps__is_no_lists__4
       [t_0, arg_5, sz_2, (ErlangCons head_10 l_3)])
erlps__is_no_lists__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__is_no_lists__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__create__4 :: ErlangFun
erlps__create__4 [(ErlangCons e_0 es_1), t_2, t0_3, l_4] =
  let match_expr_10 = (erlps__make_element__3 [e_0, t_2, t0_3])
  in
    case match_expr_10 of
      (ErlangTuple [nt_8, s_9]) ->
        (erlps__create__4 [es_1, nt_8, t0_3, (ErlangCons s_9 l_4)])
      _ -> (EXC.badmatch match_expr_10)
erlps__create__4 [(ErlangEmptyList), t_0, _t0_1, l_2] =
  let
    tup_el_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_2])
  in (ErlangTuple [(ErlangCons t_0 ErlangEmptyList), tup_el_6])
erlps__create__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__create__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_element__3 :: ErlangFun
erlps__make_element__3 [c_0, (ErlangAtom "_"), _t0_1] =
  (erlps__make_element__1 [c_0])
erlps__make_element__3 [c_0, atom_1, (ErlangAtom "_")]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_5 = (BIF.erlang__is_atom__1 [atom_1])
             in let
               lop_4 =
                 case lop_5 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let op_arg_7 = (BIF.erlang__is_list__1 [c_0])
                     in (BIF.erlang__not__1 [op_arg_7])
                   _ -> (EXC.badarg1 lop_5)
             in
               case lop_4 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let op_arg_9 = (BIF.erlang__is_tuple__1 [c_0])
                   in (BIF.erlang__not__1 [op_arg_9])
                 _ -> (EXC.badarg1 lop_4)))) =
  (ErlangTuple [atom_1, c_0])
erlps__make_element__3 [c_0, atom_1, atom_2]
  | (atom_2 == atom_1)
  , (isEAtom atom_1) =
  (ErlangTuple [atom_1, c_0])
erlps__make_element__3 [t_0, tt_1, (ErlangAtom "_")]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_9 = (BIF.erlang__tuple_size__1 [t_0])
             in let rop_11 = (BIF.erlang__tuple_size__1 [tt_1])
             in (BIF.erlang__op_exactEq [lop_9, rop_11])))) =
  let    arg_2 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let arg_4 = (BIF.erlang__tuple_to_list__1 [tt_1])
  in
    (erlps__make_tuple__5
       [arg_2, arg_4, ErlangEmptyList, ErlangEmptyList,
        (ErlangAtom "_")])
erlps__make_element__3 [t_0, tt_1, t0_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_11 = (BIF.erlang__tuple_size__1 [t_0])
             in let rop_13 = (BIF.erlang__tuple_size__1 [tt_1])
             in (BIF.erlang__op_exactEq [lop_11, rop_13])))) =
  let    arg_3 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let arg_5 = (BIF.erlang__tuple_to_list__1 [tt_1])
  in let arg_9 = (BIF.erlang__tuple_to_list__1 [t0_2])
  in
    (erlps__make_tuple__5
       [arg_3, arg_5, ErlangEmptyList, ErlangEmptyList, arg_9])
erlps__make_element__3 [l_0, (ErlangCons lt_1 (ErlangEmptyList)),
                        (ErlangAtom "_")]
  | (isEList l_0) =
  (erlps__create__4 [l_0, lt_1, (ErlangAtom "_"), ErlangEmptyList])
erlps__make_element__3 [l_0, (ErlangCons lt_1 (ErlangEmptyList)),
                        (ErlangCons t0_2 (ErlangEmptyList))]
  | (isEList l_0) =
  (erlps__create__4 [l_0, lt_1, t0_2, ErlangEmptyList])
erlps__make_element__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__make_element__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_tuple__5 :: ErlangFun
erlps__make_tuple__5 [(ErlangCons e_0 es_1),
                      (ErlangCons t_2 ts_3), nt_4, l_5, t0_6]
  | ((==) t0_6 (ErlangAtom "_")) =
  let match_expr_12 = (erlps__make_element__3 [e_0, t_2, t0_6])
  in
    case match_expr_12 of
      (ErlangTuple [et_10, es_11]) ->
        (erlps__make_tuple__5
           [es_1, ts_3, (ErlangCons et_10 nt_4), (ErlangCons es_11 l_5),
            t0_6])
      _ -> (EXC.badmatch match_expr_12)
erlps__make_tuple__5 [(ErlangCons e_0 es_1),
                      (ErlangCons t_2 ts_3), nt_4, l_5, (ErlangCons t0_6 t0s_7)]
  =
  let match_expr_13 = (erlps__make_element__3 [e_0, t_2, t0_6])
  in
    case match_expr_13 of
      (ErlangTuple [et_11, es_12]) ->
        (erlps__make_tuple__5
           [es_1, ts_3, (ErlangCons et_11 nt_4), (ErlangCons es_12 l_5),
            t0s_7])
      _ -> (EXC.badmatch match_expr_13)
erlps__make_tuple__5 [(ErlangEmptyList), (ErlangEmptyList), nt_0,
                      l_1, _t0s_2]
  | ((/=) nt_0 ErlangEmptyList) =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [nt_0])
  in let tup_el_3 = (BIF.erlang__list_to_tuple__1 [arg_4])
  in let
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
  in let tup_el_6 = (BIF.erlang__list_to_tuple__1 [arg_7])
  in (ErlangTuple [tup_el_3, tup_el_6])
erlps__make_tuple__5 [arg_9, arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__make_tuple__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_element__1 :: ErlangFun
erlps__make_element__1 [c_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    op_arg_4 = (BIF.erlang__is_list__1 [c_0])
             in let lop_3 = (BIF.erlang__not__1 [op_arg_4])
             in
               case lop_3 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let op_arg_6 = (BIF.erlang__is_tuple__1 [c_0])
                   in (BIF.erlang__not__1 [op_arg_6])
                 _ -> (EXC.badarg1 lop_3)))) =
  (ErlangTuple [(ErlangAtom "atom"), c_0])
erlps__make_element__1 [t_0] | (isETuple t_0) =
  let arg_1 = (BIF.erlang__tuple_to_list__1 [t_0])
  in
    (erlps__make_tuple__3 [arg_1, ErlangEmptyList, ErlangEmptyList])
erlps__make_element__1 [l_0] | (isEList l_0) =
  (erlps__create__4
     [l_0, (ErlangAtom "_"), (ErlangAtom "_"), ErlangEmptyList])
erlps__make_element__1 [arg_5] = (EXC.function_clause unit)
erlps__make_element__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_tuple__3 :: ErlangFun
erlps__make_tuple__3 [(ErlangCons e_0 es_1), t_2, l_3] =
  let match_expr_7 = (erlps__make_element__1 [e_0])
  in
    case match_expr_7 of
      (ErlangTuple [et_5, es_6]) ->
        (erlps__make_tuple__3
           [es_1, (ErlangCons et_5 t_2), (ErlangCons es_6 l_3)])
      _ -> (EXC.badmatch match_expr_7)
erlps__make_tuple__3 [(ErlangEmptyList), t_0, l_1]
  | ((/=) t_0 ErlangEmptyList) =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [t_0])
  in let tup_el_2 = (BIF.erlang__list_to_tuple__1 [arg_3])
  in let
    arg_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
  in let tup_el_5 = (BIF.erlang__list_to_tuple__1 [arg_6])
  in (ErlangTuple [tup_el_2, tup_el_5])
erlps__make_tuple__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__make_tuple__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_oset__4 :: ErlangFun
erlps__make_oset__4 [(ErlangCons t_0 ts_1), szs_2, l_3, type_4] =
  let match_expr_8 = (erlps__test_oset__3 [szs_2, t_0, t_0])
  in
    case match_expr_8 of
      (ErlangAtom "true") ->
        (erlps__make_oset__4 [ts_1, szs_2, l_3, type_4])
      _ -> (EXC.badmatch match_expr_8)
erlps__make_oset__4 [(ErlangEmptyList), _szs_0, l_1, type_2] =
  let
    tup_el_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_1])
  in (ErlangTuple [(ErlangAtom "Set"), tup_el_4, type_2])
erlps__make_oset__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__make_oset__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_oset__3 :: ErlangFun
erlps__test_oset__3 [(ErlangTuple [sz_0, args_1]), t_2, t0_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_7 = (BIF.erlang__tuple_size__1 [t_2])
             in (BIF.erlang__op_exactEq [lop_7, sz_0])))) =
  (erlps__test_oset_args__3 [args_1, t_2, t0_3])
erlps__test_oset__3 [sz_0, t_1, _t0_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_3 = (BIF.erlang__tuple_size__1 [t_1])
             in (BIF.erlang__op_exactEq [lop_3, sz_0])))) =
  (ErlangAtom "true")
erlps__test_oset__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__test_oset__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_oset_args__3 :: ErlangFun
erlps__test_oset_args__3 [(ErlangCons (ErlangTuple [arg_0,
                                                    szs_1]) ss_2),
                          t_3, t0_4]
  =
  let    arg_6 = (BIF.erlang__element__2 [arg_0, t_3])
  in let match_expr_10 = (erlps__test_oset__3 [szs_1, arg_6, t0_4])
  in
    case match_expr_10 of
      (ErlangAtom "true") ->
        (erlps__test_oset_args__3 [ss_2, t_3, t0_4])
      _ -> (EXC.badmatch match_expr_10)
erlps__test_oset_args__3 [(ErlangEmptyList), _t_0, _t0_1] =
  (ErlangAtom "true")
erlps__test_oset_args__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__test_oset_args__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_of_sets__3 :: ErlangFun
erlps__list_of_sets__3 [(ErlangCons s_0 ss_1), type_2, l_3] =
  let head_7 = (ErlangTuple [(ErlangAtom "Set"), s_0, type_2])
  in
    (erlps__list_of_sets__3 [ss_1, type_2, (ErlangCons head_7 l_3)])
erlps__list_of_sets__3 [(ErlangEmptyList), _type_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__list_of_sets__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__list_of_sets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_of_ordsets__3 :: ErlangFun
erlps__list_of_ordsets__3 [(ErlangCons s_0 ss_1), type_2, l_3] =
  let head_7 = (ErlangTuple [(ErlangAtom "OrdSet"), s_0, type_2])
  in
    (erlps__list_of_ordsets__3
       [ss_1, type_2, (ErlangCons head_7 l_3)])
erlps__list_of_ordsets__3 [(ErlangEmptyList), _type_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__list_of_ordsets__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__list_of_ordsets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple_of_sets__3 :: ErlangFun
erlps__tuple_of_sets__3 [(ErlangCons s_0 ss_1),
                         (ErlangCons (ErlangCons type_2 (ErlangEmptyList)) types_3),
                         l_4]
  =
  let head_8 = (ErlangTuple [(ErlangAtom "Set"), s_0, type_2])
  in
    (erlps__tuple_of_sets__3
       [ss_1, types_3, (ErlangCons head_8 l_4)])
erlps__tuple_of_sets__3 [(ErlangCons s_0 ss_1),
                         (ErlangCons type_2 types_3), l_4]
  =
  let head_8 = (ErlangTuple [(ErlangAtom "OrdSet"), s_0, type_2])
  in
    (erlps__tuple_of_sets__3
       [ss_1, types_3, (ErlangCons head_8 l_4)])
erlps__tuple_of_sets__3 [(ErlangEmptyList), (ErlangEmptyList),
                         l_0]
  =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
  in (BIF.erlang__list_to_tuple__1 [arg_1])
erlps__tuple_of_sets__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__tuple_of_sets__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spec__4 :: ErlangFun
erlps__spec__4 [(ErlangCons e_0 es_1), fun_2, type_3, l_4] =
  let    arg_6 = (erlps__term2set__2 [e_0, type_3])
  in let
    case_5 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons arg_6 ErlangEmptyList)])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (erlps__spec__4 [es_1, fun_2, type_3, (ErlangCons e_0 l_4)])
      (ErlangAtom "false") ->
        (erlps__spec__4 [es_1, fun_2, type_3, l_4])
      _ -> (ErlangAtom "badarg")
      something_else -> (EXC.case_clause something_else)
erlps__spec__4 [(ErlangEmptyList), _fun_0, _type_1, l_2] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_2])
erlps__spec__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__spec__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__specification__3 :: ErlangFun
erlps__specification__3 [(ErlangCons e_0 es_1), fun_2, l_3] =
  let
    case_4 =
      (BIF.erlang__apply__2 [fun_2, (ErlangCons e_0 ErlangEmptyList)])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (erlps__specification__3 [es_1, fun_2, (ErlangCons e_0 l_3)])
      (ErlangAtom "false") ->
        (erlps__specification__3 [es_1, fun_2, l_3])
      _ -> (ErlangAtom "badarg")
      something_else -> (EXC.case_clause something_else)
erlps__specification__3 [(ErlangEmptyList), _fun_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__specification__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__specification__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection__3 :: ErlangFun
erlps__intersection__3 [(ErlangCons h1_0 t1_1),
                        (ErlangCons h2_2 t2_3), l_4]
  | (weakLt h1_0 h2_2) =
  (erlps__intersection1__4 [t1_1, t2_3, l_4, h2_2])
erlps__intersection__3 [(ErlangCons h1_0 t1_1),
                        (ErlangCons h2_2 t2_3), l_4]
  | (weakEq h1_0 h2_2) =
  (erlps__intersection__3 [t1_1, t2_3, (ErlangCons h1_0 l_4)])
erlps__intersection__3 [(ErlangCons h1_0 t1_1),
                        (ErlangCons _h2_2 t2_3), l_4]
  =
  (erlps__intersection2__4 [t1_1, t2_3, l_4, h1_0])
erlps__intersection__3 [_, _, l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__intersection__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__intersection__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection1__4 :: ErlangFun
erlps__intersection1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakLt h1_0 h2_4) =
  (erlps__intersection1__4 [t1_1, t2_2, l_3, h2_4])
erlps__intersection1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakEq h1_0 h2_4) =
  (erlps__intersection__3 [t1_1, t2_2, (ErlangCons h1_0 l_3)])
erlps__intersection1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3,
                         _h2_4]
  =
  (erlps__intersection2__4 [t1_1, t2_2, l_3, h1_0])
erlps__intersection1__4 [_, _, l_0, _] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__intersection1__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__intersection1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intersection2__4 :: ErlangFun
erlps__intersection2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakGt h1_4 h2_1) =
  (erlps__intersection2__4 [t1_0, t2_2, l_3, h1_4])
erlps__intersection2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakEq h1_4 h2_1) =
  (erlps__intersection__3 [t1_0, t2_2, (ErlangCons h1_4 l_3)])
erlps__intersection2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3,
                         _h1_4]
  =
  (erlps__intersection1__4 [t1_0, t2_2, l_3, h2_1])
erlps__intersection2__4 [_, _, l_0, _] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__intersection2__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__intersection2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__difference__3 :: ErlangFun
erlps__difference__3 [(ErlangCons h1_0 t1_1),
                      (ErlangCons h2_2 t2_3), l_4]
  | (weakLt h1_0 h2_2) =
  (erlps__diff__4 [t1_1, t2_3, (ErlangCons h1_0 l_4), h2_2])
erlps__difference__3 [(ErlangCons h1_0 t1_1),
                      (ErlangCons h2_2 t2_3), l_4]
  | (weakEq h1_0 h2_2) =
  (erlps__difference__3 [t1_1, t2_3, l_4])
erlps__difference__3 [(ErlangCons h1_0 t1_1),
                      (ErlangCons _h2_2 t2_3), l_4]
  =
  (erlps__diff2__4 [t1_1, t2_3, l_4, h1_0])
erlps__difference__3 [l1_0, _, l_1] =
  (BIF.lists__reverse__2 [l_1, l1_0])
erlps__difference__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__difference__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff__4 :: ErlangFun
erlps__diff__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakLt h1_0 h2_4) =
  (erlps__diff__4 [t1_1, t2_2, (ErlangCons h1_0 l_3), h2_4])
erlps__diff__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakEq h1_0 h2_4) =
  (erlps__difference__3 [t1_1, t2_2, l_3])
erlps__diff__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, _h2_4] =
  (erlps__diff2__4 [t1_1, t2_2, l_3, h1_0])
erlps__diff__4 [_, _, l_0, _] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__diff__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__diff__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff2__4 :: ErlangFun
erlps__diff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakGt h1_4 h2_1) =
  (erlps__diff2__4 [t1_0, t2_2, l_3, h1_4])
erlps__diff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakEq h1_4 h2_1) =
  (erlps__difference__3 [t1_0, t2_2, l_3])
erlps__diff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4] =
  (erlps__diff__4 [t1_0, t2_2, (ErlangCons h1_4 l_3), h2_1])
erlps__diff2__4 [t1_0, _, l_1, h1_2] =
  (BIF.lists__reverse__2 [l_1, (ErlangCons h1_2 t1_0)])
erlps__diff2__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__diff2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symdiff__3 :: ErlangFun
erlps__symdiff__3 [(ErlangCons h1_0 t1_1), t2_2, l_3] =
  (erlps__symdiff2__4 [t1_1, t2_2, l_3, h1_0])
erlps__symdiff__3 [_, t2_0, l_1] =
  (BIF.lists__reverse__2 [l_1, t2_0])
erlps__symdiff__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__symdiff__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symdiff1__4 :: ErlangFun
erlps__symdiff1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakLt h1_0 h2_4) =
  (erlps__symdiff1__4 [t1_1, t2_2, (ErlangCons h1_0 l_3), h2_4])
erlps__symdiff1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4]
  | (weakEq h1_0 h2_4) =
  (erlps__symdiff__3 [t1_1, t2_2, l_3])
erlps__symdiff1__4 [(ErlangCons h1_0 t1_1), t2_2, l_3, h2_4] =
  (erlps__symdiff2__4 [t1_1, t2_2, (ErlangCons h2_4 l_3), h1_0])
erlps__symdiff1__4 [_, t2_0, l_1, h2_2] =
  (BIF.lists__reverse__2 [l_1, (ErlangCons h2_2 t2_0)])
erlps__symdiff1__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__symdiff1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symdiff2__4 :: ErlangFun
erlps__symdiff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakGt h1_4 h2_1) =
  (erlps__symdiff2__4 [t1_0, t2_2, (ErlangCons h2_1 l_3), h1_4])
erlps__symdiff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4]
  | (weakEq h1_4 h2_1) =
  (erlps__symdiff__3 [t1_0, t2_2, l_3])
erlps__symdiff2__4 [t1_0, (ErlangCons h2_1 t2_2), l_3, h1_4] =
  (erlps__symdiff1__4 [t1_0, t2_2, (ErlangCons h1_4 l_3), h2_1])
erlps__symdiff2__4 [t1_0, _, l_1, h1_2] =
  (BIF.lists__reverse__2 [l_1, (ErlangCons h1_2 t1_0)])
erlps__symdiff2__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__symdiff2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sympart__6 :: ErlangFun
erlps__sympart__6 [(ErlangCons h1_0 t1_1),
                   (ErlangCons h2_2 t2_3), l1_4, l12_5, l2_6, t_7]
  | (weakLt h1_0 h2_2) =
  (erlps__sympart1__7
     [t1_1, t2_3, (ErlangCons h1_0 l1_4), l12_5, l2_6, t_7, h2_2])
erlps__sympart__6 [(ErlangCons h1_0 t1_1),
                   (ErlangCons h2_2 t2_3), l1_4, l12_5, l2_6, t_7]
  | (weakEq h1_0 h2_2) =
  (erlps__sympart__6
     [t1_1, t2_3, l1_4, (ErlangCons h1_0 l12_5), l2_6, t_7])
erlps__sympart__6 [(ErlangCons h1_0 t1_1),
                   (ErlangCons h2_2 t2_3), l1_4, l12_5, l2_6, t_7]
  =
  (erlps__sympart2__7
     [t1_1, t2_3, l1_4, l12_5, (ErlangCons h2_2 l2_6), t_7, h1_0])
erlps__sympart__6 [s1_0, (ErlangEmptyList), l1_1, l12_2, l2_3,
                   t_4]
  =
  let    tup_el_7 = (BIF.lists__reverse__2 [l1_1, s1_0])
  in let
    tup_el_5 = (ErlangTuple [(ErlangAtom "Set"), tup_el_7, t_4])
  in let
    tup_el_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l12_2])
  in let
    tup_el_11 = (ErlangTuple [(ErlangAtom "Set"), tup_el_13, t_4])
  in let
    tup_el_18 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l2_3])
  in let
    tup_el_16 = (ErlangTuple [(ErlangAtom "Set"), tup_el_18, t_4])
  in (ErlangTuple [tup_el_5, tup_el_11, tup_el_16])
erlps__sympart__6 [_, s2_0, l1_1, l12_2, l2_3, t_4] =
  let   
    tup_el_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l1_1])
  in let
    tup_el_5 = (ErlangTuple [(ErlangAtom "Set"), tup_el_7, t_4])
  in let
    tup_el_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l12_2])
  in let
    tup_el_10 = (ErlangTuple [(ErlangAtom "Set"), tup_el_12, t_4])
  in let tup_el_17 = (BIF.lists__reverse__2 [l2_3, s2_0])
  in let
    tup_el_15 = (ErlangTuple [(ErlangAtom "Set"), tup_el_17, t_4])
  in (ErlangTuple [tup_el_5, tup_el_10, tup_el_15])
erlps__sympart__6 [arg_21, arg_22, arg_23, arg_24, arg_25,
                   arg_26]
  =
  (EXC.function_clause unit)
erlps__sympart__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sympart1__7 :: ErlangFun
erlps__sympart1__7 [(ErlangCons h1_0 t1_1), t2_2, l1_3, l12_4,
                    l2_5, t_6, h2_7]
  | (weakLt h1_0 h2_7) =
  (erlps__sympart1__7
     [t1_1, t2_2, (ErlangCons h1_0 l1_3), l12_4, l2_5, t_6, h2_7])
erlps__sympart1__7 [(ErlangCons h1_0 t1_1), t2_2, l1_3, l12_4,
                    l2_5, t_6, h2_7]
  | (weakEq h1_0 h2_7) =
  (erlps__sympart__6
     [t1_1, t2_2, l1_3, (ErlangCons h1_0 l12_4), l2_5, t_6])
erlps__sympart1__7 [(ErlangCons h1_0 t1_1), t2_2, l1_3, l12_4,
                    l2_5, t_6, h2_7]
  =
  (erlps__sympart2__7
     [t1_1, t2_2, l1_3, l12_4, (ErlangCons h2_7 l2_5), t_6, h1_0])
erlps__sympart1__7 [_, t2_0, l1_1, l12_2, l2_3, t_4, h2_5] =
  let   
    tup_el_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l1_1])
  in let
    tup_el_6 = (ErlangTuple [(ErlangAtom "Set"), tup_el_8, t_4])
  in let
    tup_el_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l12_2])
  in let
    tup_el_11 = (ErlangTuple [(ErlangAtom "Set"), tup_el_13, t_4])
  in let
    tup_el_18 =
      (BIF.lists__reverse__2 [l2_3, (ErlangCons h2_5 t2_0)])
  in let
    tup_el_16 = (ErlangTuple [(ErlangAtom "Set"), tup_el_18, t_4])
  in (ErlangTuple [tup_el_6, tup_el_11, tup_el_16])
erlps__sympart1__7 [arg_24, arg_25, arg_26, arg_27, arg_28,
                    arg_29, arg_30]
  =
  (EXC.function_clause unit)
erlps__sympart1__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sympart2__7 :: ErlangFun
erlps__sympart2__7 [t1_0, (ErlangCons h2_1 t2_2), l1_3, l12_4,
                    l2_5, t_6, h1_7]
  | (weakGt h1_7 h2_1) =
  (erlps__sympart2__7
     [t1_0, t2_2, l1_3, l12_4, (ErlangCons h2_1 l2_5), t_6, h1_7])
erlps__sympart2__7 [t1_0, (ErlangCons h2_1 t2_2), l1_3, l12_4,
                    l2_5, t_6, h1_7]
  | (weakEq h1_7 h2_1) =
  (erlps__sympart__6
     [t1_0, t2_2, l1_3, (ErlangCons h1_7 l12_4), l2_5, t_6])
erlps__sympart2__7 [t1_0, (ErlangCons h2_1 t2_2), l1_3, l12_4,
                    l2_5, t_6, h1_7]
  =
  (erlps__sympart1__7
     [t1_0, t2_2, (ErlangCons h1_7 l1_3), l12_4, l2_5, t_6, h2_1])
erlps__sympart2__7 [t1_0, _, l1_1, l12_2, l2_3, t_4, h1_5] =
  let   
    tup_el_8 = (BIF.lists__reverse__2 [l1_1, (ErlangCons h1_5 t1_0)])
  in let
    tup_el_6 = (ErlangTuple [(ErlangAtom "Set"), tup_el_8, t_4])
  in let
    tup_el_16 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l12_2])
  in let
    tup_el_14 = (ErlangTuple [(ErlangAtom "Set"), tup_el_16, t_4])
  in let
    tup_el_21 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l2_3])
  in let
    tup_el_19 = (ErlangTuple [(ErlangAtom "Set"), tup_el_21, t_4])
  in (ErlangTuple [tup_el_6, tup_el_14, tup_el_19])
erlps__sympart2__7 [arg_24, arg_25, arg_26, arg_27, arg_28,
                    arg_29, arg_30]
  =
  (EXC.function_clause unit)
erlps__sympart2__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prod__3 :: ErlangFun
erlps__prod__3 [(ErlangCons (ErlangCons e_0 es_1) xs_2), t_3,
                l_4]
  =
  let arg_8 = (erlps__prod__3 [xs_2, (ErlangCons e_0 t_3), l_4])
  in (erlps__prod__4 [es_1, xs_2, t_3, arg_8])
erlps__prod__3 [(ErlangEmptyList), t_0, l_1] =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [t_0])
  in let head_2 = (BIF.erlang__list_to_tuple__1 [arg_3])
  in (ErlangCons head_2 l_1)
erlps__prod__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__prod__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prod__4 :: ErlangFun
erlps__prod__4 [(ErlangCons e_0 es_1), xs_2, t_3, l_4] =
  let arg_8 = (erlps__prod__3 [xs_2, (ErlangCons e_0 t_3), l_4])
  in (erlps__prod__4 [es_1, xs_2, t_3, arg_8])
erlps__prod__4 [(ErlangEmptyList), _xs_0, _e_1, l_2] = l_2
erlps__prod__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__prod__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__constant_function__3 :: ErlangFun
erlps__constant_function__3 [(ErlangCons e_0 es_1), x_2, l_3] =
  let head_7 = (ErlangTuple [e_0, x_2])
  in
    (erlps__constant_function__3
       [es_1, x_2, (ErlangCons head_7 l_3)])
erlps__constant_function__3 [(ErlangEmptyList), _x_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__constant_function__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__constant_function__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subset__2 :: ErlangFun
erlps__subset__2 [(ErlangCons h1_0 t1_1), (ErlangCons h2_2 t2_3)]
  | (weakGt h1_0 h2_2) =
  (erlps__subset__3 [t1_1, t2_3, h1_0])
erlps__subset__2 [(ErlangCons h1_0 t1_1), (ErlangCons h2_2 t2_3)]
  | (weakEq h1_0 h2_2) =
  (erlps__subset__2 [t1_1, t2_3])
erlps__subset__2 [l1_0, _] =
  (BIF.erlang__op_exactEq [l1_0, ErlangEmptyList])
erlps__subset__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__subset__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subset__3 :: ErlangFun
erlps__subset__3 [t1_0, (ErlangCons h2_1 t2_2), h1_3]
  | (weakGt h1_3 h2_1) =
  (erlps__subset__3 [t1_0, t2_2, h1_3])
erlps__subset__3 [t1_0, (ErlangCons h2_1 t2_2), h1_3]
  | (weakEq h1_3 h2_1) =
  (erlps__subset__2 [t1_0, t2_2])
erlps__subset__3 [_, _, _] = (ErlangAtom "false")
erlps__subset__3 [arg_0, arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__subset__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__disjoint__3 :: ErlangFun
erlps__disjoint__3 [(ErlangCons b_0 bs_1), a_2, as_3]
  | (weakLt a_2 b_0) =
  (erlps__disjoint__3 [as_3, b_0, bs_1])
erlps__disjoint__3 [(ErlangCons b_0 _bs_1), a_2, _as_3]
  | (weakEq a_2 b_0) =
  (ErlangAtom "false")
erlps__disjoint__3 [(ErlangCons _b_0 bs_1), a_2, as_3] =
  (erlps__disjoint__3 [bs_1, a_2, as_3])
erlps__disjoint__3 [_bs_0, _a_1, _as_2] = (ErlangAtom "true")
erlps__disjoint__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__disjoint__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lunion__1 :: ErlangFun
erlps__lunion__1 [(ErlangCons s_0@(ErlangCons _ (ErlangEmptyList)) (ErlangEmptyList))]
  =
  s_0
erlps__lunion__1 [(ErlangCons (ErlangEmptyList) ls_0)] =
  (erlps__lunion__1 [ls_0])
erlps__lunion__1 [(ErlangCons s_0 ss_1)] =
  let   
    arg_4 = (BIF.do_remote_fun_call "Lists" "erlps__last__1" [s_0])
  in let
    arg_2 =
      (erlps__lunion__4
         [ss_1, arg_4, (ErlangCons s_0 ErlangEmptyList), ErlangEmptyList])
  in (BIF.do_remote_fun_call "Lists" "erlps__umerge__1" [arg_2])
erlps__lunion__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__lunion__1 [arg_0] = (EXC.function_clause unit)
erlps__lunion__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lunion__4 :: ErlangFun
erlps__lunion__4 [(ErlangCons s_1@(ErlangCons e_0 (ErlangEmptyList)) ss_2),
                  last_3, sl_4, ls_5]
  | (weakGt e_0 last_3) =
  (erlps__lunion__4 [ss_2, e_0, (ErlangCons s_1 sl_4), ls_5])
erlps__lunion__4 [(ErlangCons s_0 ss_1), last_2, sl_3, ls_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_12 = (BIF.erlang__hd__1 [s_0])
             in (BIF.erlang__op_greater [lop_12, last_2])))) =
  let
    arg_6 = (BIF.do_remote_fun_call "Lists" "erlps__last__1" [s_0])
  in (erlps__lunion__4 [ss_1, arg_6, (ErlangCons s_0 sl_3), ls_4])
erlps__lunion__4 [(ErlangCons s_0 ss_1), _last_2, sl_3, ls_4] =
  let   
    arg_6 = (BIF.do_remote_fun_call "Lists" "erlps__last__1" [s_0])
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [sl_3])
  in let
    head_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_13])
  in
    (erlps__lunion__4
       [ss_1, arg_6, (ErlangCons s_0 ErlangEmptyList),
        (ErlangCons head_12 ls_4)])
erlps__lunion__4 [(ErlangEmptyList), _last_0, sl_1, ls_2] =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [sl_1])
  in let
    head_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_4])
  in (ErlangCons head_3 ls_2)
erlps__lunion__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__lunion__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lintersection__2 :: ErlangFun
erlps__lintersection__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__lintersection__2 [(ErlangCons s_0 ss_1), s0_2] =
  let arg_4 = (erlps__intersection__3 [s_0, s0_2, ErlangEmptyList])
  in (erlps__lintersection__2 [ss_1, arg_4])
erlps__lintersection__2 [(ErlangEmptyList), s_0] = s_0
erlps__lintersection__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__lintersection__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__can_rel__2 :: ErlangFun
erlps__can_rel__2 [(ErlangCons s_0 ss_1), l_2] =
  (erlps__can_rel__4 [ss_1, l_2, s_0, s_0])
erlps__can_rel__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_0])
erlps__can_rel__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__can_rel__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__can_rel__4 :: ErlangFun
erlps__can_rel__4 [ss_0, l_1, (ErlangCons e_2 es_3), s_4] =
  let head_7 = (ErlangTuple [e_2, s_4])
  in (erlps__can_rel__4 [ss_0, (ErlangCons head_7 l_1), es_3, s_4])
erlps__can_rel__4 [ss_0, l_1, _, _s_2] =
  (erlps__can_rel__2 [ss_0, l_1])
erlps__can_rel__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__can_rel__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel2family__1 :: ErlangFun
erlps__rel2family__1 [(ErlangCons (ErlangTuple [x_0, y_1]) s_2)]
  =
  (erlps__rel2fam__4
     [s_2, x_0, (ErlangCons y_1 ErlangEmptyList), ErlangEmptyList])
erlps__rel2family__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__rel2family__1 [arg_0] = (EXC.function_clause unit)
erlps__rel2family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rel2fam__4 :: ErlangFun
erlps__rel2fam__4 [(ErlangCons (ErlangTuple [x_0, y_1]) s_2),
                   x0_3, yl_4, l_5]
  | (weakEq x0_3 x_0) =
  (erlps__rel2fam__4 [s_2, x0_3, (ErlangCons y_1 yl_4), l_5])
erlps__rel2fam__4 [(ErlangCons (ErlangTuple [x_0, y_1]) s_2),
                   x0_3, (ErlangCons a_4 (ErlangCons b_5 yl_6)), l_7]
  =
  let   
    tup_el_16 =
      (BIF.lists__reverse__2
         [yl_6, (ErlangCons b_5 (ErlangCons a_4 ErlangEmptyList))])
  in let head_14 = (ErlangTuple [x0_3, tup_el_16])
  in
    (erlps__rel2fam__4
       [s_2, x_0, (ErlangCons y_1 ErlangEmptyList),
        (ErlangCons head_14 l_7)])
erlps__rel2fam__4 [(ErlangCons (ErlangTuple [x_0, y_1]) s_2),
                   x0_3, yl_4, l_5]
  =
  let head_12 = (ErlangTuple [x0_3, yl_4])
  in
    (erlps__rel2fam__4
       [s_2, x_0, (ErlangCons y_1 ErlangEmptyList),
        (ErlangCons head_12 l_5)])
erlps__rel2fam__4 [(ErlangEmptyList), x_0, yl_1, l_2] =
  let   
    tup_el_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [yl_1])
  in let head_4 = (ErlangTuple [x_0, tup_el_6])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
       [(ErlangCons head_4 l_2)])
erlps__rel2fam__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__rel2fam__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dom__1 :: ErlangFun
erlps__dom__1 [(ErlangCons (ErlangTuple [x_0, _]) es_1)] =
  (erlps__dom__3 [ErlangEmptyList, x_0, es_1])
erlps__dom__1 [l_0@(ErlangEmptyList)] = l_0
erlps__dom__1 [arg_1] = (EXC.function_clause unit)
erlps__dom__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dom__3 :: ErlangFun
erlps__dom__3 [l_0, x_1,
               (ErlangCons (ErlangTuple [x1_2, _]) es_3)]
  | (weakEq x_1 x1_2) =
  (erlps__dom__3 [l_0, x_1, es_3])
erlps__dom__3 [l_0, x_1,
               (ErlangCons (ErlangTuple [y_2, _]) es_3)]
  =
  (erlps__dom__3 [(ErlangCons x_1 l_0), y_2, es_3])
erlps__dom__3 [l_0, x_1, (ErlangEmptyList)] =
  (BIF.lists__reverse__2 [l_0, (ErlangCons x_1 ErlangEmptyList)])
erlps__dom__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__dom__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ran__2 :: ErlangFun
erlps__ran__2 [(ErlangCons (ErlangTuple [_, y_0]) es_1), l_2] =
  (erlps__ran__2 [es_1, (ErlangCons y_0 l_2)])
erlps__ran__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_0])
erlps__ran__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__ran__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod__2 :: ErlangFun
erlps__relprod__2 [a_0, b_1] =
  let arg_2 = (erlps__relprod1__2 [a_0, b_1])
  in (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [arg_2])
erlps__relprod__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__relprod__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod1__2 :: ErlangFun
erlps__relprod1__2 [(ErlangCons (ErlangTuple [ay_0, ax_1]) a_2),
                    b_3]
  =
  (erlps__relprod1__5 [b_3, ay_0, ax_1, a_2, ErlangEmptyList])
erlps__relprod1__2 [_a_0, _b_1] = ErlangEmptyList
erlps__relprod1__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__relprod1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod1__5 :: ErlangFun
erlps__relprod1__5 [(ErlangCons (ErlangTuple [bx_0, _by_1]) b_2),
                    ay_3, ax_4, a_5, l_6]
  | (weakGt ay_3 bx_0) =
  (erlps__relprod1__5 [b_2, ay_3, ax_4, a_5, l_6])
erlps__relprod1__5 [(ErlangCons (ErlangTuple [bx_0, by_1]) b_2),
                    ay_3, ax_4, a_5, l_6]
  | (weakEq ay_3 bx_0) =
  let head_12 = (ErlangTuple [ax_4, by_1])
  in
    (erlps__relprod__8
       [b_2, bx_0, by_1, a_5, (ErlangCons head_12 l_6), ax_4, b_2,
        ay_3])
erlps__relprod1__5 [(ErlangCons (ErlangTuple [bx_0, by_1]) b_2),
                    _ay_3, _ax_4, a_5, l_6]
  =
  (erlps__relprod2__5 [b_2, bx_0, by_1, a_5, l_6])
erlps__relprod1__5 [_b_0, _ay_1, _ax_2, _a_3, l_4] = l_4
erlps__relprod1__5 [arg_5, arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__relprod1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod2__5 :: ErlangFun
erlps__relprod2__5 [b_0, bx_1, by_2,
                    (ErlangCons (ErlangTuple [ay_3, _ax_4]) a_5), l_6]
  | (weakLt ay_3 bx_1) =
  (erlps__relprod2__5 [b_0, bx_1, by_2, a_5, l_6])
erlps__relprod2__5 [b_0, bx_1, by_2,
                    (ErlangCons (ErlangTuple [ay_3, ax_4]) a_5), l_6]
  | (weakEq ay_3 bx_1) =
  let head_12 = (ErlangTuple [ax_4, by_2])
  in
    (erlps__relprod__8
       [b_0, bx_1, by_2, a_5, (ErlangCons head_12 l_6), ax_4, b_0,
        ay_3])
erlps__relprod2__5 [b_0, _bx_1, _by_2,
                    (ErlangCons (ErlangTuple [ay_3, ax_4]) a_5), l_6]
  =
  (erlps__relprod1__5 [b_0, ay_3, ax_4, a_5, l_6])
erlps__relprod2__5 [_, _, _, _, l_0] = l_0
erlps__relprod2__5 [arg_1, arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__relprod2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod__8 :: ErlangFun
erlps__relprod__8 [b0_0, bx0_1, by0_2, a0_3, l_4, ax_5,
                   (ErlangCons (ErlangTuple [bx_6, by_7]) b_8), ay_9]
  | (weakEq ay_9 bx_6) =
  let head_15 = (ErlangTuple [ax_5, by_7])
  in
    (erlps__relprod__8
       [b0_0, bx0_1, by0_2, a0_3, (ErlangCons head_15 l_4), ax_5, b_8,
        ay_9])
erlps__relprod__8 [b0_0, bx0_1, by0_2, a0_3, l_4, _ax_5, _b_6,
                   _ay_7]
  =
  (erlps__relprod2__5 [b0_0, bx0_1, by0_2, a0_3, l_4])
erlps__relprod__8 [arg_13, arg_14, arg_15, arg_16, arg_17,
                   arg_18, arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__relprod__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod_n__4 :: ErlangFun
erlps__relprod_n__4 [(ErlangEmptyList), _r_0, _emptyg_1, _isr_2]
  =
  (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
erlps__relprod_n__4 [rl_0, r_1, emptyr_2, isr_3] =
  let case_4 = (erlps__domain_type__2 [rl_0, (ErlangAtom "_")])
  in
    case case_4 of
      error_8@(ErlangTuple [(ErlangAtom "error"), _reason_7]) ->
        error_8
      dtype_9 ->
        let    arg_11 = (ErlangFun 1 erlps__is_empty_set__1)
        in let
          lop_10 =
            (BIF.do_remote_fun_call "Lists" "erlps__any__2" [arg_11, rl_0])
        in let empty_14 = (BIF.erlang__op_or [lop_10, emptyr_2])
        in let rtype_17 = (erlps__range_type__2 [rl_0, ErlangEmptyList])
        in let type_20 = (ErlangTuple [dtype_9, rtype_17])
        in let
          prod_52 =
            case empty_14 of
              (ErlangAtom "true") | ((ErlangAtom "true") ==
                                       (falsifyErrors
                                          (\ _ ->
                                             let
                                               lop_22 =
                                                 (BIF.erlang__op_exactEq
                                                    [dtype_9, (ErlangAtom "_")])
                                             in
                                               case lop_22 of
                                                 (ErlangAtom "true") ->
                                                   (ErlangAtom "true")
                                                 (ErlangAtom "false") ->
                                                   (BIF.erlang__op_exactEq
                                                      [rtype_17,
                                                       (ErlangAtom "_")])
                                                 _ -> (EXC.badarg1 lop_22)))) ->
                (erlps__empty_set__0 [])
              (ErlangAtom "true") ->
                (ErlangTuple [(ErlangAtom "Set"), ErlangEmptyList, type_20])
              (ErlangAtom "false") ->
                let    record_30 = (erlps__relprod_n__1 [rl_0])
                in let
                  tl_34 =
                    case record_30 of
                      (ErlangTuple arr_33) | (DM.Just field_32) <-
                                               ((arr_33 DA.!! 1)) ->
                        field_32
                      _ -> (EXC.badrecord (ErlangAtom "Set"))
                in let sz_36 = (BIF.erlang__length__1 [rl_0])
                in let
                  fun_46 =
                    (ErlangFun 1
                       let
                         lambda_37 [(ErlangTuple [x_39, a_40])] =
                           let
                             tup_el_42 =
                               (erlps__flat__3 [sz_36, a_40, ErlangEmptyList])
                           in (ErlangTuple [x_39, tup_el_42])
                         lambda_37 [arg_38] = (EXC.function_clause unit)
                         lambda_37 args =
                           (EXC.badarity (ErlangFun 1 lambda_37) args)
                       in lambda_37)
                in let
                  tup_el_48 =
                    (BIF.do_remote_fun_call "Lists" "erlps__map__2"
                       [fun_46, tl_34])
                in (ErlangTuple [(ErlangAtom "Set"), tup_el_48, type_20])
              something_else -> (EXC.case_clause something_else)
        in
          case isr_3 of
            (ErlangAtom "true") ->
              (erlps__relative_product__2 [prod_52, r_1])
            (ErlangAtom "false") -> prod_52
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__relprod_n__4 [arg_56, arg_57, arg_58, arg_59] =
  (EXC.function_clause unit)
erlps__relprod_n__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod_n__1 :: ErlangFun
erlps__relprod_n__1 [(ErlangCons r_0 rs_1)] =
  (erlps__relprod_n__2 [rs_1, r_0])
erlps__relprod_n__1 [arg_4] = (EXC.function_clause unit)
erlps__relprod_n__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__relprod_n__2 :: ErlangFun
erlps__relprod_n__2 [(ErlangEmptyList), r_0] = r_0
erlps__relprod_n__2 [(ErlangCons r_0 rs_1), r0_2] =
  let   
    t_5 =
      (erlps__raise_element__2 [r0_2, (ErlangInt (DBI.fromInt 1))])
  in let r1_8 = (erlps__relative_product1__2 [t_5, r_0])
  in let
    tup_el_11 =
      (ErlangFun 1
         let
           lambda_12 [(ErlangTuple [(ErlangTuple [x_14, a_15]), as_16])] =
             let tup_el_18 = (ErlangTuple [a_15, as_16])
             in (ErlangTuple [x_14, tup_el_18])
           lambda_12 [arg_13] = (EXC.function_clause unit)
           lambda_12 args = (EXC.badarity (ErlangFun 1 lambda_12) args)
         in lambda_12)
  in let arg_9 = (ErlangTuple [(ErlangAtom "external"), tup_el_11])
  in let nr_22 = (erlps__projection__2 [arg_9, r1_8])
  in (erlps__relprod_n__2 [rs_1, nr_22])
erlps__relprod_n__2 [arg_25, arg_26] = (EXC.function_clause unit)
erlps__relprod_n__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flat__3 :: ErlangFun
erlps__flat__3 [(ErlangInt num_0), a_1, l_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (BIF.erlang__list_to_tuple__1 [(ErlangCons a_1 l_2)])
erlps__flat__3 [n_0, (ErlangTuple [t_1, a_2]), l_3] =
  let
    arg_4 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__flat__3 [arg_4, t_1, (ErlangCons a_2 l_3)])
erlps__flat__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__flat__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__domain_type__2 :: ErlangFun
erlps__domain_type__2 [(ErlangCons t_0 ts_1), t0_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [t_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let
    case_3 =
      case t_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_3 of
      (ErlangTuple [dt_7, _rt_8]) ->
        let case_9 = (erlps__unify_types__2 [dt_7, t0_2])
        in
          case case_9 of
            (ErlangEmptyList) ->
              (ErlangTuple
                 [(ErlangAtom "error"), (ErlangAtom "type_mismatch")])
            t1_14 -> (erlps__domain_type__2 [ts_1, t1_14])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "_") -> (erlps__domain_type__2 [ts_1, t0_2])
      _ -> (ErlangTuple [(ErlangAtom "error"), (ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__domain_type__2 [(ErlangEmptyList), t0_0] = t0_0
erlps__domain_type__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__domain_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__range_type__2 :: ErlangFun
erlps__range_type__2 [(ErlangCons t_0 ts_1), l_2] =
  let
    case_3 =
      case t_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in
    case case_3 of
      (ErlangTuple [_dt_7, rt_8]) ->
        (erlps__range_type__2 [ts_1, (ErlangCons rt_8 l_2)])
      (ErlangAtom "_") -> (ErlangAtom "_")
      something_else -> (EXC.case_clause something_else)
erlps__range_type__2 [(ErlangEmptyList), l_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
  in (BIF.erlang__list_to_tuple__1 [arg_1])
erlps__range_type__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__range_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__converse__2 :: ErlangFun
erlps__converse__2 [(ErlangCons (ErlangTuple [a_0, b_1]) x_2),
                    l_3]
  =
  let head_6 = (ErlangTuple [b_1, a_0])
  in (erlps__converse__2 [x_2, (ErlangCons head_6 l_3)])
erlps__converse__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_0])
erlps__converse__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__converse__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__strict__2 :: ErlangFun
erlps__strict__2 [(ErlangCons (ErlangTuple [e1_0, e2_1]) es_2),
                  l_3]
  | (weakEq e1_0 e2_1) =
  (erlps__strict__2 [es_2, l_3])
erlps__strict__2 [(ErlangCons e_0 es_1), l_2] =
  (erlps__strict__2 [es_1, (ErlangCons e_0 l_2)])
erlps__strict__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__strict__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__strict__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__weak__1 :: ErlangFun
erlps__weak__1 [es_0] =
  let arg_2 = (erlps__ran__2 [es_0, ErlangEmptyList])
  in (erlps__weak__3 [es_0, arg_2, ErlangEmptyList])
erlps__weak__1 [arg_6] = (EXC.function_clause unit)
erlps__weak__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__weak__3 :: ErlangFun
erlps__weak__3 [es_1@(ErlangCons (ErlangTuple [x_0, _]) _),
                (ErlangCons y_2 ys_3), l_4]
  | (weakGt x_0 y_2) =
  let head_8 = (ErlangTuple [y_2, y_2])
  in (erlps__weak__3 [es_1, ys_3, (ErlangCons head_8 l_4)])
erlps__weak__3 [es_1@(ErlangCons (ErlangTuple [x_0, _]) _),
                (ErlangCons y_2 ys_3), l_4]
  | (weakEq x_0 y_2) =
  (erlps__weak__3 [es_1, ys_3, l_4])
erlps__weak__3 [(ErlangCons e_2@(ErlangTuple [x_0, y_1]) es_3),
                ys_4, l_5]
  | (weakGt x_0 y_1) =
  (erlps__weak1__4 [es_3, ys_4, (ErlangCons e_2 l_5), x_0])
erlps__weak__3 [(ErlangCons e_2@(ErlangTuple [x_0, y_1]) es_3),
                ys_4, l_5]
  | (weakEq x_0 y_1) =
  (erlps__weak2__4 [es_3, ys_4, (ErlangCons e_2 l_5), x_0])
erlps__weak__3 [(ErlangCons e_2@(ErlangTuple [x_0, _y_1]) es_3),
                ys_4, l_5]
  =
  let head_11 = (ErlangTuple [x_0, x_0])
  in
    (erlps__weak2__4
       [es_3, ys_4, (ErlangCons e_2 (ErlangCons head_11 l_5)), x_0])
erlps__weak__3 [(ErlangEmptyList), (ErlangCons y_0 ys_1), l_2] =
  let head_6 = (ErlangTuple [y_0, y_0])
  in
    (erlps__weak__3 [ErlangEmptyList, ys_1, (ErlangCons head_6 l_2)])
erlps__weak__3 [(ErlangEmptyList), (ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__weak__3 [arg_2, arg_3, arg_4] = (EXC.function_clause unit)
erlps__weak__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__weak1__4 :: ErlangFun
erlps__weak1__4 [(ErlangCons e_2@(ErlangTuple [x_0, y_1]) es_3),
                 ys_4, l_5, x0_6]
  | ((weakGt x_0 y_1) && (weakEq x_0 x0_6)) =
  (erlps__weak1__4 [es_3, ys_4, (ErlangCons e_2 l_5), x_0])
erlps__weak1__4 [(ErlangCons e_2@(ErlangTuple [x_0, y_1]) es_3),
                 ys_4, l_5, x0_6]
  | ((weakEq x_0 y_1) && (weakEq x_0 x0_6)) =
  (erlps__weak2__4 [es_3, ys_4, (ErlangCons e_2 l_5), x_0])
erlps__weak1__4 [(ErlangCons e_2@(ErlangTuple [x_0, _y_1]) es_3),
                 ys_4, l_5, x0_6]
  | (weakEq x_0 x0_6) =
  let head_12 = (ErlangTuple [x_0, x_0])
  in
    (erlps__weak2__4
       [es_3, ys_4, (ErlangCons e_2 (ErlangCons head_12 l_5)), x_0])
erlps__weak1__4 [es_0, ys_1, l_2, x_3] =
  let head_7 = (ErlangTuple [x_3, x_3])
  in (erlps__weak__3 [es_0, ys_1, (ErlangCons head_7 l_2)])
erlps__weak1__4 [arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__weak1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__weak2__4 :: ErlangFun
erlps__weak2__4 [(ErlangCons e_2@(ErlangTuple [x_0, _y_1]) es_3),
                 ys_4, l_5, x0_6]
  | (weakEq x_0 x0_6) =
  (erlps__weak2__4 [es_3, ys_4, (ErlangCons e_2 l_5), x_0])
erlps__weak2__4 [es_0, ys_1, l_2, _x_3] =
  (erlps__weak__3 [es_0, ys_1, l_2])
erlps__weak2__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__weak2__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extc__4 :: ErlangFun
erlps__extc__4 [l_0, (ErlangCons d_1 ds_2), c_3, ts_4] =
  (erlps__extc__5 [l_0, ds_2, c_3, ts_4, d_1])
erlps__extc__4 [l_0, (ErlangEmptyList), _c_1, _ts_2] = l_0
erlps__extc__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__extc__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extc__5 :: ErlangFun
erlps__extc__5 [l_0, ds_1, c_2,
                (ErlangCons (ErlangTuple [x_3, _y_4]) ts_5), d_6]
  | (weakLt x_3 d_6) =
  (erlps__extc__5 [l_0, ds_1, c_2, ts_5, d_6])
erlps__extc__5 [l_0, ds_1, c_2,
                (ErlangCons (ErlangTuple [x_3, _y_4]) ts_5), d_6]
  | (weakEq x_3 d_6) =
  (erlps__extc__4 [l_0, ds_1, c_2, ts_5])
erlps__extc__5 [l_0, ds_1, c_2,
                (ErlangCons (ErlangTuple [x_3, _y_4]) ts_5), d_6]
  =
  let head_8 = (ErlangTuple [d_6, c_2])
  in
    (erlps__extc2__5 [(ErlangCons head_8 l_0), ds_1, c_2, ts_5, x_3])
erlps__extc__5 [l_0, ds_1, c_2, (ErlangEmptyList), d_3] =
  let head_5 = (ErlangTuple [d_3, c_2])
  in (erlps__extc_tail__3 [(ErlangCons head_5 l_0), ds_1, c_2])
erlps__extc__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__extc__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extc2__5 :: ErlangFun
erlps__extc2__5 [l_0, (ErlangCons d_1 ds_2), c_3, ts_4, x_5]
  | (weakGt x_5 d_1) =
  let head_7 = (ErlangTuple [d_1, c_3])
  in
    (erlps__extc2__5 [(ErlangCons head_7 l_0), ds_2, c_3, ts_4, x_5])
erlps__extc2__5 [l_0, (ErlangCons d_1 ds_2), c_3, ts_4, x_5]
  | (weakEq x_5 d_1) =
  (erlps__extc__4 [l_0, ds_2, c_3, ts_4])
erlps__extc2__5 [l_0, (ErlangCons d_1 ds_2), c_3, ts_4, _x_5] =
  (erlps__extc__5 [l_0, ds_2, c_3, ts_4, d_1])
erlps__extc2__5 [l_0, (ErlangEmptyList), _c_1, _ts_2, _x_3] = l_0
erlps__extc2__5 [arg_4, arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__extc2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extc_tail__3 :: ErlangFun
erlps__extc_tail__3 [l_0, (ErlangCons d_1 ds_2), c_3] =
  let head_5 = (ErlangTuple [d_1, c_3])
  in (erlps__extc_tail__3 [(ErlangCons head_5 l_0), ds_2, c_3])
erlps__extc_tail__3 [l_0, (ErlangEmptyList), _c_1] = l_0
erlps__extc_tail__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__extc_tail__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_a_func__2 :: ErlangFun
erlps__is_a_func__2 [(ErlangCons (ErlangTuple [e_0, _]) es_1),
                     e0_2]
  | (weakNEq e_0 e0_2) =
  (erlps__is_a_func__2 [es_1, e_0])
erlps__is_a_func__2 [l_0, _e_1] =
  (BIF.erlang__op_exactEq [l_0, ErlangEmptyList])
erlps__is_a_func__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__is_a_func__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restrict_n__5 :: ErlangFun
erlps__restrict_n__5 [i_0, (ErlangCons t_1 ts_2), key_3, keys_4,
                      l_5]
  =
  let case_6 = (BIF.erlang__element__2 [i_0, t_1])
  in
    case case_6 of
      k_9 | (weakLt k_9 key_3) ->
        (erlps__restrict_n__5 [i_0, ts_2, key_3, keys_4, l_5])
      k_15 | (weakEq k_15 key_3) ->
        (erlps__restrict_n__5
           [i_0, ts_2, key_3, keys_4, (ErlangCons t_1 l_5)])
      k_23 ->
        (erlps__restrict_n__6 [i_0, k_23, ts_2, keys_4, l_5, t_1])
      something_else -> (EXC.case_clause something_else)
erlps__restrict_n__5 [_i_0, _ts_1, _key_2, _keys_3, l_4] = l_4
erlps__restrict_n__5 [arg_5, arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__restrict_n__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restrict_n__6 :: ErlangFun
erlps__restrict_n__6 [i_0, k_1, ts_2, (ErlangCons key_3 keys_4),
                      l_5, e_6]
  | (weakGt k_1 key_3) =
  (erlps__restrict_n__6 [i_0, k_1, ts_2, keys_4, l_5, e_6])
erlps__restrict_n__6 [i_0, k_1, ts_2, (ErlangCons key_3 keys_4),
                      l_5, e_6]
  | (weakEq k_1 key_3) =
  (erlps__restrict_n__5
     [i_0, ts_2, key_3, keys_4, (ErlangCons e_6 l_5)])
erlps__restrict_n__6 [i_0, _k_1, ts_2, (ErlangCons key_3 keys_4),
                      l_5, _e_6]
  =
  (erlps__restrict_n__5 [i_0, ts_2, key_3, keys_4, l_5])
erlps__restrict_n__6 [_i_0, _k_1, _ts_2, _keys_3, l_4, _e_5] =
  l_4
erlps__restrict_n__6 [arg_6, arg_7, arg_8, arg_9, arg_10, arg_11]
  =
  (EXC.function_clause unit)
erlps__restrict_n__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restrict__2 :: ErlangFun
erlps__restrict__2 [(ErlangCons key_0 keys_1), tuples_2] =
  (erlps__restrict__4 [tuples_2, key_0, keys_1, ErlangEmptyList])
erlps__restrict__2 [_keys_0, _tuples_1] = ErlangEmptyList
erlps__restrict__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__restrict__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restrict__4 :: ErlangFun
erlps__restrict__4 [(ErlangCons (ErlangTuple [k_0, _e_1]) ts_2),
                    key_3, keys_4, l_5]
  | (weakLt k_0 key_3) =
  (erlps__restrict__4 [ts_2, key_3, keys_4, l_5])
erlps__restrict__4 [(ErlangCons (ErlangTuple [k_0, e_1]) ts_2),
                    key_3, keys_4, l_5]
  | (weakEq k_0 key_3) =
  (erlps__restrict__4 [ts_2, key_3, keys_4, (ErlangCons e_1 l_5)])
erlps__restrict__4 [(ErlangCons (ErlangTuple [k_0, e_1]) ts_2),
                    _key_3, keys_4, l_5]
  =
  (erlps__restrict__5 [ts_2, k_0, keys_4, l_5, e_1])
erlps__restrict__4 [_ts_0, _key_1, _keys_2, l_3] = l_3
erlps__restrict__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__restrict__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restrict__5 :: ErlangFun
erlps__restrict__5 [ts_0, k_1, (ErlangCons key_2 keys_3), l_4,
                    e_5]
  | (weakGt k_1 key_2) =
  (erlps__restrict__5 [ts_0, k_1, keys_3, l_4, e_5])
erlps__restrict__5 [ts_0, k_1, (ErlangCons key_2 keys_3), l_4,
                    e_5]
  | (weakEq k_1 key_2) =
  (erlps__restrict__4 [ts_0, key_2, keys_3, (ErlangCons e_5 l_4)])
erlps__restrict__5 [ts_0, _k_1, (ErlangCons key_2 keys_3), l_4,
                    _e_5]
  =
  (erlps__restrict__4 [ts_0, key_2, keys_3, l_4])
erlps__restrict__5 [_ts_0, _k_1, _keys_2, l_3, _e_4] = l_3
erlps__restrict__5 [arg_5, arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__restrict__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict_n__5 :: ErlangFun
erlps__diff_restrict_n__5 [i_0, (ErlangCons t_1 ts_2), key_3,
                           keys_4, l_5]
  =
  let case_6 = (BIF.erlang__element__2 [i_0, t_1])
  in
    case case_6 of
      k_9 | (weakLt k_9 key_3) ->
        (erlps__diff_restrict_n__5
           [i_0, ts_2, key_3, keys_4, (ErlangCons t_1 l_5)])
      k_17 | (weakEq k_17 key_3) ->
        (erlps__diff_restrict_n__5 [i_0, ts_2, key_3, keys_4, l_5])
      k_23 ->
        (erlps__diff_restrict_n__6 [i_0, k_23, ts_2, keys_4, l_5, t_1])
      something_else -> (EXC.case_clause something_else)
erlps__diff_restrict_n__5 [i_0, _ts_1, _key_2, _keys_3, l_4]
  | ((==) i_0 (ErlangInt (DBI.fromInt 1))) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_4])
erlps__diff_restrict_n__5 [_i_0, _ts_1, _key_2, _keys_3, l_4] =
  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_4])
erlps__diff_restrict_n__5 [arg_6, arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__diff_restrict_n__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict_n__6 :: ErlangFun
erlps__diff_restrict_n__6 [i_0, k_1, ts_2,
                           (ErlangCons key_3 keys_4), l_5, t_6]
  | (weakGt k_1 key_3) =
  (erlps__diff_restrict_n__6 [i_0, k_1, ts_2, keys_4, l_5, t_6])
erlps__diff_restrict_n__6 [i_0, k_1, ts_2,
                           (ErlangCons key_3 keys_4), l_5, _t_6]
  | (weakEq k_1 key_3) =
  (erlps__diff_restrict_n__5 [i_0, ts_2, key_3, keys_4, l_5])
erlps__diff_restrict_n__6 [i_0, _k_1, ts_2,
                           (ErlangCons key_3 keys_4), l_5, t_6]
  =
  (erlps__diff_restrict_n__5
     [i_0, ts_2, key_3, keys_4, (ErlangCons t_6 l_5)])
erlps__diff_restrict_n__6 [i_0, _k_1, ts_2, _keys_3, l_4, t_5]
  | ((==) i_0 (ErlangInt (DBI.fromInt 1))) =
  (BIF.lists__reverse__2 [l_4, (ErlangCons t_5 ts_2)])
erlps__diff_restrict_n__6 [_i_0, _k_1, ts_2, _keys_3, l_4, t_5] =
  let tail_8 = (BIF.erlang__op_append [ts_2, l_4])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
       [(ErlangCons t_5 tail_8)])
erlps__diff_restrict_n__6 [arg_11, arg_12, arg_13, arg_14,
                           arg_15, arg_16]
  =
  (EXC.function_clause unit)
erlps__diff_restrict_n__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict__2 :: ErlangFun
erlps__diff_restrict__2 [(ErlangCons key_0 keys_1), tuples_2] =
  (erlps__diff_restrict__4
     [tuples_2, key_0, keys_1, ErlangEmptyList])
erlps__diff_restrict__2 [_keys_0, tuples_1] =
  (erlps__diff_restrict_tail__2 [tuples_1, ErlangEmptyList])
erlps__diff_restrict__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__diff_restrict__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict__4 :: ErlangFun
erlps__diff_restrict__4 [(ErlangCons (ErlangTuple [k_0,
                                                   e_1]) ts_2),
                         key_3, keys_4, l_5]
  | (weakLt k_0 key_3) =
  (erlps__diff_restrict__4
     [ts_2, key_3, keys_4, (ErlangCons e_1 l_5)])
erlps__diff_restrict__4 [(ErlangCons (ErlangTuple [k_0,
                                                   _e_1]) ts_2),
                         key_3, keys_4, l_5]
  | (weakEq k_0 key_3) =
  (erlps__diff_restrict__4 [ts_2, key_3, keys_4, l_5])
erlps__diff_restrict__4 [(ErlangCons (ErlangTuple [k_0,
                                                   e_1]) ts_2),
                         _key_3, keys_4, l_5]
  =
  (erlps__diff_restrict__5 [ts_2, k_0, keys_4, l_5, e_1])
erlps__diff_restrict__4 [_ts_0, _key_1, _keys_2, l_3] = l_3
erlps__diff_restrict__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__diff_restrict__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict__5 :: ErlangFun
erlps__diff_restrict__5 [ts_0, k_1, (ErlangCons key_2 keys_3),
                         l_4, e_5]
  | (weakGt k_1 key_2) =
  (erlps__diff_restrict__5 [ts_0, k_1, keys_3, l_4, e_5])
erlps__diff_restrict__5 [ts_0, k_1, (ErlangCons key_2 keys_3),
                         l_4, _e_5]
  | (weakEq k_1 key_2) =
  (erlps__diff_restrict__4 [ts_0, key_2, keys_3, l_4])
erlps__diff_restrict__5 [ts_0, _k_1, (ErlangCons key_2 keys_3),
                         l_4, e_5]
  =
  (erlps__diff_restrict__4
     [ts_0, key_2, keys_3, (ErlangCons e_5 l_4)])
erlps__diff_restrict__5 [ts_0, _k_1, _keys_2, l_3, e_4] =
  (erlps__diff_restrict_tail__2 [ts_0, (ErlangCons e_4 l_3)])
erlps__diff_restrict__5 [arg_9, arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__diff_restrict__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__diff_restrict_tail__2 :: ErlangFun
erlps__diff_restrict_tail__2 [(ErlangCons (ErlangTuple [_k_0,
                                                        e_1]) ts_2),
                              l_3]
  =
  (erlps__diff_restrict_tail__2 [ts_2, (ErlangCons e_1 l_3)])
erlps__diff_restrict_tail__2 [_ts_0, l_1] = l_1
erlps__diff_restrict_tail__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__diff_restrict_tail__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__comp__2 :: ErlangFun
erlps__comp__2 [(ErlangEmptyList), b_0] =
  (erlps__check_function__2 [b_0, ErlangEmptyList])
erlps__comp__2 [_a_0, (ErlangEmptyList)] =
  (ErlangAtom "bad_function")
erlps__comp__2 [a0_0,
                (ErlangCons (ErlangTuple [bx_1, by_2]) b_3)]
  =
  let    a_6 = (erlps__converse__2 [a0_0, ErlangEmptyList])
  in let
    arg_8 = (erlps__comp1__5 [a_6, b_3, ErlangEmptyList, bx_1, by_2])
  in (erlps__check_function__2 [a0_0, arg_8])
erlps__comp__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__comp__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__comp1__5 :: ErlangFun
erlps__comp1__5 [(ErlangCons (ErlangTuple [ay_0, ax_1]) a_2),
                 b_3, l_4, bx_5, by_6]
  | (weakEq ay_0 bx_5) =
  let head_10 = (ErlangTuple [ax_1, by_6])
  in
    (erlps__comp1__5
       [a_2, b_3, (ErlangCons head_10 l_4), bx_5, by_6])
erlps__comp1__5 [(ErlangCons (ErlangTuple [ay_0, ax_1]) a_2),
                 b_3, l_4, bx_5, _by_6]
  | (weakGt ay_0 bx_5) =
  (erlps__comp2__6 [a_2, b_3, l_4, bx_5, ay_0, ax_1])
erlps__comp1__5 [(ErlangCons (ErlangTuple [ay_0, _ax_1]) _a_2),
                 _b_3, _l_4, bx_5, _by_6]
  | (weakLt ay_0 bx_5) =
  (ErlangAtom "bad_function")
erlps__comp1__5 [(ErlangEmptyList), b_0, l_1, bx_2, _by_3] =
  (erlps__check_function__3 [bx_2, b_0, l_1])
erlps__comp1__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__comp1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__comp2__6 :: ErlangFun
erlps__comp2__6 [a_0,
                 (ErlangCons (ErlangTuple [bx_1, _by_2]) b_3), l_4, bx0_5, ay_6,
                 ax_7]
  | ((weakGt ay_6 bx_1) && (weakNEq bx_1 bx0_5)) =
  (erlps__comp2__6 [a_0, b_3, l_4, bx_1, ay_6, ax_7])
erlps__comp2__6 [a_0,
                 (ErlangCons (ErlangTuple [bx_1, by_2]) b_3), l_4, _bx0_5, ay_6,
                 ax_7]
  | (weakEq ay_6 bx_1) =
  let head_11 = (ErlangTuple [ax_7, by_2])
  in
    (erlps__comp1__5
       [a_0, b_3, (ErlangCons head_11 l_4), bx_1, by_2])
erlps__comp2__6 [_a_0, _b_1, _l_2, _bx0_3, _ay_4, _ax_5] =
  (ErlangAtom "bad_function")
erlps__comp2__6 [arg_6, arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__comp2__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__inverse1__1 :: ErlangFun
erlps__inverse1__1 [(ErlangCons (ErlangTuple [a_0, b_1]) x_2)] =
  let head_6 = (ErlangTuple [b_1, a_0])
  in
    (erlps__inverse__3
       [x_2, a_0, (ErlangCons head_6 ErlangEmptyList)])
erlps__inverse1__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__inverse1__1 [arg_0] = (EXC.function_clause unit)
erlps__inverse1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__inverse__3 :: ErlangFun
erlps__inverse__3 [(ErlangCons (ErlangTuple [a_0, b_1]) x_2),
                   a0_3, l_4]
  | (weakNEq a0_3 a_0) =
  let head_8 = (ErlangTuple [b_1, a_0])
  in (erlps__inverse__3 [x_2, a_0, (ErlangCons head_8 l_4)])
erlps__inverse__3 [(ErlangCons (ErlangTuple [a_0, _b_1]) _x_2),
                   a0_3, _l_4]
  | (weakEq a0_3 a_0) =
  (ErlangAtom "bad_function")
erlps__inverse__3 [(ErlangEmptyList), _a0_0, l_1] =
  let
    match_expr_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_1])
  in
    case match_expr_5 of
      (ErlangCons (ErlangTuple [v_3, _]) es_4) ->
        let case_7 = (erlps__is_a_func__2 [es_4, v_3])
        in
          case case_7 of
            (ErlangAtom "true") -> match_expr_5
            (ErlangAtom "false") -> (ErlangAtom "bad_function")
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_5)
erlps__inverse__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__inverse__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__external_fun__1 :: ErlangFun
erlps__external_fun__1 [(ErlangTuple [(ErlangAtom "external"),
                                      function_0])]
  | (isEAtom function_0) =
  (ErlangAtom "false")
erlps__external_fun__1 [(ErlangTuple [(ErlangAtom "external"),
                                      fun_0])]
  =
  fun_0
erlps__external_fun__1 [_] = (ErlangAtom "false")
erlps__external_fun__1 [arg_0] = (EXC.function_clause unit)
erlps__external_fun__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__element_type__1 :: ErlangFun
erlps__element_type__1 [(ErlangCons type_0 (ErlangEmptyList))] =
  type_0
erlps__element_type__1 [type_0] = type_0
erlps__element_type__1 [arg_1] = (EXC.function_clause unit)
erlps__element_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subst__3 :: ErlangFun
erlps__subst__3 [ts_0, fun_1, type_2] =
  (erlps__subst__5
     [ts_0, fun_1, type_2, (ErlangAtom "_"), ErlangEmptyList])
erlps__subst__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__subst__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subst__5 :: ErlangFun
erlps__subst__5 [(ErlangCons t_0 ts_1), fun_2, type_3, ntype_4,
                 l_5]
  =
  let case_6 = (erlps__setfun__4 [t_0, fun_2, type_3, ntype_4])
  in
    case case_6 of
      (ErlangTuple [sd_11, st_12]) ->
        let head_18 = (ErlangTuple [t_0, sd_11])
        in
          (erlps__subst__5
             [ts_1, fun_2, type_3, st_12, (ErlangCons head_18 l_5)])
      bad_22 -> bad_22
      something_else -> (EXC.case_clause something_else)
erlps__subst__5 [(ErlangEmptyList), _fun_0, _type_1, ntype_2,
                 l_3]
  =
  (ErlangTuple [l_3, ntype_2])
erlps__subst__5 [arg_6, arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__subst__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__projection1__1 :: ErlangFun
erlps__projection1__1 [(ErlangCons e_0 es_1)] =
  let
    arg_3 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), e_0])
  in (erlps__projection1__3 [ErlangEmptyList, arg_3, es_1])
erlps__projection1__1 [l_0@(ErlangEmptyList)] = l_0
erlps__projection1__1 [arg_1] = (EXC.function_clause unit)
erlps__projection1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__projection1__3 :: ErlangFun
erlps__projection1__3 [l_0, x_1, (ErlangCons e_2 es_3)] =
  let
    case_4 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), e_2])
  in
    case case_4 of
      x1_7 | (weakEq x_1 x1_7) ->
        (erlps__projection1__3 [l_0, x_1, es_3])
      x1_11 ->
        (erlps__projection1__3 [(ErlangCons x_1 l_0), x1_11, es_3])
      something_else -> (EXC.case_clause something_else)
erlps__projection1__3 [l_0, x_1, (ErlangEmptyList)] =
  (BIF.lists__reverse__2 [l_0, (ErlangCons x_1 ErlangEmptyList)])
erlps__projection1__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__projection1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__projection_n__3 :: ErlangFun
erlps__projection_n__3 [(ErlangCons e_0 es_1), i_2, l_3] =
  let head_7 = (BIF.erlang__element__2 [i_2, e_0])
  in (erlps__projection_n__3 [es_1, i_2, (ErlangCons head_7 l_3)])
erlps__projection_n__3 [(ErlangEmptyList), _i_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [l_1])
erlps__projection_n__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__projection_n__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substitute_element__3 :: ErlangFun
erlps__substitute_element__3 [(ErlangCons t_0 ts_1), i_2, l_3] =
  let    tup_el_9 = (BIF.erlang__element__2 [i_2, t_0])
  in let head_7 = (ErlangTuple [t_0, tup_el_9])
  in
    (erlps__substitute_element__3
       [ts_1, i_2, (ErlangCons head_7 l_3)])
erlps__substitute_element__3 [_, _i_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__substitute_element__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__substitute_element__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__substitute__3 :: ErlangFun
erlps__substitute__3 [(ErlangCons t_0 ts_1), fun_2, l_3] =
  let   
    tup_el_9 =
      (BIF.erlang__apply__2 [fun_2, (ErlangCons t_0 ErlangEmptyList)])
  in let head_7 = (ErlangTuple [t_0, tup_el_9])
  in (erlps__substitute__3 [ts_1, fun_2, (ErlangCons head_7 l_3)])
erlps__substitute__3 [_, _fun_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__substitute__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__substitute__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition_n__2 :: ErlangFun
erlps__partition_n__2 [i_0, (ErlangCons e_1 ts_2)] =
  let arg_5 = (BIF.erlang__element__2 [i_0, e_1])
  in
    (erlps__partition_n__5
       [i_0, ts_2, arg_5, (ErlangCons e_1 ErlangEmptyList),
        ErlangEmptyList])
erlps__partition_n__2 [_i_0, (ErlangEmptyList)] = ErlangEmptyList
erlps__partition_n__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__partition_n__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition_n__5 :: ErlangFun
erlps__partition_n__5 [i_0, (ErlangCons e_1 ts_2), k_3, es_4,
                       p_5]
  =
  let    tup_el_7 = (BIF.erlang__element__2 [i_0, e_1])
  in let case_6 = (ErlangTuple [tup_el_7, es_4])
  in
    case case_6 of
      (ErlangTuple [k1_11, _]) | (weakEq k_3 k1_11) ->
        (erlps__partition_n__5
           [i_0, ts_2, k_3, (ErlangCons e_1 es_4), p_5])
      (ErlangTuple [k1_19, (ErlangCons _ (ErlangEmptyList))]) ->
        (erlps__partition_n__5
           [i_0, ts_2, k1_19, (ErlangCons e_1 ErlangEmptyList),
            (ErlangCons es_4 p_5)])
      (ErlangTuple [k1_29, _]) ->
        let
          head_37 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_4])
        in
          (erlps__partition_n__5
             [i_0, ts_2, k1_29, (ErlangCons e_1 ErlangEmptyList),
              (ErlangCons head_37 p_5)])
      something_else -> (EXC.case_clause something_else)
erlps__partition_n__5 [i_0, (ErlangEmptyList), _k_1, es_2, p_3]
  | (weakGt i_0 (ErlangInt (DBI.fromInt 1))) =
  let
    head_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_2])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
       [(ErlangCons head_5 p_3)])
erlps__partition_n__5 [_i_0, (ErlangEmptyList), _k_1,
                       es_2@(ErlangCons _ (ErlangEmptyList)), p_3]
  =
  (BIF.lists__reverse__2 [p_3, (ErlangCons es_2 ErlangEmptyList)])
erlps__partition_n__5 [_i_0, (ErlangEmptyList), _k_1, es_2, p_3]
  =
  let
    head_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_2])
  in
    (BIF.lists__reverse__2
       [p_3, (ErlangCons head_6 ErlangEmptyList)])
erlps__partition_n__5 [arg_9, arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__partition_n__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3_n__6 :: ErlangFun
erlps__partition3_n__6 [i_0, (ErlangCons t_1 ts_2), key_3,
                        keys_4, l1_5, l2_6]
  =
  let case_7 = (BIF.erlang__element__2 [i_0, t_1])
  in
    case case_7 of
      k_10 | (weakLt k_10 key_3) ->
        (erlps__partition3_n__6
           [i_0, ts_2, key_3, keys_4, l1_5, (ErlangCons t_1 l2_6)])
      k_19 | (weakEq k_19 key_3) ->
        (erlps__partition3_n__6
           [i_0, ts_2, key_3, keys_4, (ErlangCons t_1 l1_5), l2_6])
      k_28 ->
        (erlps__partition3_n__7
           [i_0, k_28, ts_2, keys_4, l1_5, l2_6, t_1])
      something_else -> (EXC.case_clause something_else)
erlps__partition3_n__6 [i_0, _ts_1, _key_2, _keys_3, l1_4, l2_5]
  | ((==) i_0 (ErlangInt (DBI.fromInt 1))) =
  let   
    head_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l1_4])
  in let
    tail_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l2_5])
  in (ErlangCons head_6 tail_8)
erlps__partition3_n__6 [_i_0, _ts_1, _key_2, _keys_3, l1_4, l2_5]
  =
  let   
    head_6 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l1_4])
  in let
    tail_8 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l2_5])
  in (ErlangCons head_6 tail_8)
erlps__partition3_n__6 [arg_10, arg_11, arg_12, arg_13, arg_14,
                        arg_15]
  =
  (EXC.function_clause unit)
erlps__partition3_n__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3_n__7 :: ErlangFun
erlps__partition3_n__7 [i_0, k_1, ts_2,
                        (ErlangCons key_3 keys_4), l1_5, l2_6, t_7]
  | (weakGt k_1 key_3) =
  (erlps__partition3_n__7
     [i_0, k_1, ts_2, keys_4, l1_5, l2_6, t_7])
erlps__partition3_n__7 [i_0, k_1, ts_2,
                        (ErlangCons key_3 keys_4), l1_5, l2_6, t_7]
  | (weakEq k_1 key_3) =
  (erlps__partition3_n__6
     [i_0, ts_2, key_3, keys_4, (ErlangCons t_7 l1_5), l2_6])
erlps__partition3_n__7 [i_0, _k_1, ts_2,
                        (ErlangCons key_3 keys_4), l1_5, l2_6, t_7]
  =
  (erlps__partition3_n__6
     [i_0, ts_2, key_3, keys_4, l1_5, (ErlangCons t_7 l2_6)])
erlps__partition3_n__7 [i_0, _k_1, ts_2, _keys_3, l1_4, l2_5,
                        t_6]
  | ((==) i_0 (ErlangInt (DBI.fromInt 1))) =
  let   
    head_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l1_4])
  in let
    tail_9 = (BIF.lists__reverse__2 [l2_5, (ErlangCons t_6 ts_2)])
  in (ErlangCons head_7 tail_9)
erlps__partition3_n__7 [_i_0, _k_1, ts_2, _keys_3, l1_4, l2_5,
                        t_6]
  =
  let   
    head_7 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l1_4])
  in let tail_12 = (BIF.erlang__op_append [ts_2, l2_5])
  in let
    tail_9 =
      (BIF.do_remote_fun_call "Lists" "erlps__sort__1"
         [(ErlangCons t_6 tail_12)])
  in (ErlangCons head_7 tail_9)
erlps__partition3_n__7 [arg_15, arg_16, arg_17, arg_18, arg_19,
                        arg_20, arg_21]
  =
  (EXC.function_clause unit)
erlps__partition3_n__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3__2 :: ErlangFun
erlps__partition3__2 [(ErlangCons key_0 keys_1), tuples_2] =
  (erlps__partition3__5
     [tuples_2, key_0, keys_1, ErlangEmptyList, ErlangEmptyList])
erlps__partition3__2 [_keys_0, tuples_1] =
  (erlps__partition3_tail__3
     [tuples_1, ErlangEmptyList, ErlangEmptyList])
erlps__partition3__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__partition3__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3__5 :: ErlangFun
erlps__partition3__5 [(ErlangCons (ErlangTuple [k_0, e_1]) ts_2),
                      key_3, keys_4, l1_5, l2_6]
  | (weakLt k_0 key_3) =
  (erlps__partition3__5
     [ts_2, key_3, keys_4, l1_5, (ErlangCons e_1 l2_6)])
erlps__partition3__5 [(ErlangCons (ErlangTuple [k_0, e_1]) ts_2),
                      key_3, keys_4, l1_5, l2_6]
  | (weakEq k_0 key_3) =
  (erlps__partition3__5
     [ts_2, key_3, keys_4, (ErlangCons e_1 l1_5), l2_6])
erlps__partition3__5 [(ErlangCons (ErlangTuple [k_0, e_1]) ts_2),
                      _key_3, keys_4, l1_5, l2_6]
  =
  (erlps__partition3__6 [ts_2, k_0, keys_4, l1_5, l2_6, e_1])
erlps__partition3__5 [_ts_0, _key_1, _keys_2, l1_3, l2_4] =
  (ErlangCons l1_3 l2_4)
erlps__partition3__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__partition3__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3__6 :: ErlangFun
erlps__partition3__6 [ts_0, k_1, (ErlangCons key_2 keys_3), l1_4,
                      l2_5, e_6]
  | (weakGt k_1 key_2) =
  (erlps__partition3__6 [ts_0, k_1, keys_3, l1_4, l2_5, e_6])
erlps__partition3__6 [ts_0, k_1, (ErlangCons key_2 keys_3), l1_4,
                      l2_5, e_6]
  | (weakEq k_1 key_2) =
  (erlps__partition3__5
     [ts_0, key_2, keys_3, (ErlangCons e_6 l1_4), l2_5])
erlps__partition3__6 [ts_0, _k_1, (ErlangCons key_2 keys_3),
                      l1_4, l2_5, e_6]
  =
  (erlps__partition3__5
     [ts_0, key_2, keys_3, l1_4, (ErlangCons e_6 l2_5)])
erlps__partition3__6 [ts_0, _k_1, _keys_2, l1_3, l2_4, e_5] =
  (erlps__partition3_tail__3 [ts_0, l1_3, (ErlangCons e_5 l2_4)])
erlps__partition3__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                      arg_16]
  =
  (EXC.function_clause unit)
erlps__partition3__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition3_tail__3 :: ErlangFun
erlps__partition3_tail__3 [(ErlangCons (ErlangTuple [_k_0,
                                                     e_1]) ts_2),
                           l1_3, l2_4]
  =
  (erlps__partition3_tail__3 [ts_2, l1_3, (ErlangCons e_1 l2_4)])
erlps__partition3_tail__3 [_ts_0, l1_1, l2_2] =
  (ErlangCons l1_1 l2_2)
erlps__partition3_tail__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__partition3_tail__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__replace__3 :: ErlangFun
erlps__replace__3 [(ErlangCons e_0 es_1), f_2, l_3] =
  let
    head_7 =
      (BIF.erlang__apply__2 [f_2, (ErlangCons e_0 ErlangEmptyList)])
  in (erlps__replace__3 [es_1, f_2, (ErlangCons head_7 l_3)])
erlps__replace__3 [_, _f_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_1])
erlps__replace__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__replace__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mul_relprod__3 :: ErlangFun
erlps__mul_relprod__3 [(ErlangCons t_0 ts_1), i_2, r_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             (BIF.erlang__is_record__3
                [t_0, (ErlangAtom "Set"), (ErlangInt (DBI.fromInt 3))])))) =
  let    p_6 = (erlps__raise_element__2 [r_3, i_2])
  in let f_9 = (erlps__relative_product1__2 [p_6, t_0])
  in let
    arg_13 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_11 = (erlps__mul_relprod__3 [ts_1, arg_13, r_3])
  in (ErlangCons f_9 tail_11)
erlps__mul_relprod__3 [(ErlangEmptyList), _i_0, _r_1] =
  ErlangEmptyList
erlps__mul_relprod__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__mul_relprod__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__raise_element__2 :: ErlangFun
erlps__raise_element__2 [r_0, i_1] =
  let   
    arg_2 =
      (BIF.erlang__op_exactNeq [i_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_6 =
      case r_0 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let arg_5 = (erlps__rearr__3 [arg_6, i_1, ErlangEmptyList])
  in let l_12 = (erlps__sort__2 [arg_2, arg_5])
  in let
    type_16 =
      case r_0 of
        (ErlangTuple arr_15) | (DM.Just field_14) <-
                                 ((arr_15 DA.!! 2)) ->
          field_14
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in let tup_el_20 = (BIF.erlang__element__2 [i_1, type_16])
  in let tup_el_19 = (ErlangTuple [tup_el_20, type_16])
  in (ErlangTuple [(ErlangAtom "Set"), l_12, tup_el_19])
erlps__raise_element__2 [arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__raise_element__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rearr__3 :: ErlangFun
erlps__rearr__3 [(ErlangCons e_0 es_1), i_2, l_3] =
  let    tup_el_8 = (BIF.erlang__element__2 [i_2, e_0])
  in let head_7 = (ErlangTuple [tup_el_8, e_0])
  in (erlps__rearr__3 [es_1, i_2, (ErlangCons head_7 l_3)])
erlps__rearr__3 [(ErlangEmptyList), _i_0, l_1] = l_1
erlps__rearr__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__rearr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join_element__2 :: ErlangFun
erlps__join_element__2 [e1_0, e2_1] =
  let match_expr_4 = (BIF.erlang__tuple_to_list__1 [e2_1])
  in
    case match_expr_4 of
      (ErlangCons _ l2_3) ->
        let    lop_6 = (BIF.erlang__tuple_to_list__1 [e1_0])
        in let arg_5 = (BIF.erlang__op_append [lop_6, l2_3])
        in (BIF.erlang__list_to_tuple__1 [arg_5])
      _ -> (EXC.badmatch match_expr_4)
erlps__join_element__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__join_element__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join_element__3 :: ErlangFun
erlps__join_element__3 [e1_0, e2_1, i2_2] =
  let    lop_3 = (BIF.erlang__tuple_to_list__1 [e1_0])
  in let arg_6 = (BIF.erlang__tuple_to_list__1 [e2_1])
  in let
    rop_5 =
      (erlps__join_element2__3
         [arg_6, (ErlangInt (DBI.fromInt 1)), i2_2])
  in (BIF.erlang__op_append [lop_3, rop_5])
erlps__join_element__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__join_element__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join_element2__3 :: ErlangFun
erlps__join_element2__3 [(ErlangCons b_0 bs_1), c_2, i2_3]
  | ((/=) c_2 i2_3) =
  let   
    arg_7 = (BIF.erlang__op_plus [c_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_5 = (erlps__join_element2__3 [bs_1, arg_7, i2_3])
  in (ErlangCons b_0 tail_5)
erlps__join_element2__3 [(ErlangCons _ bs_0), _c_1, _i2_2] = bs_0
erlps__join_element2__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__join_element2__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__family2rel__2 :: ErlangFun
erlps__family2rel__2 [(ErlangCons (ErlangTuple [x_0, s_1]) f_2),
                      l_3]
  =
  (erlps__fam2rel__4 [f_2, l_3, x_0, s_1])
erlps__family2rel__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__family2rel__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__family2rel__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam2rel__4 :: ErlangFun
erlps__fam2rel__4 [f_0, l_1, x_2, (ErlangCons y_3 ys_4)] =
  let head_7 = (ErlangTuple [x_2, y_3])
  in (erlps__fam2rel__4 [f_0, (ErlangCons head_7 l_1), x_2, ys_4])
erlps__fam2rel__4 [f_0, l_1, _x_2, _] =
  (erlps__family2rel__2 [f_0, l_1])
erlps__fam2rel__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__fam2rel__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_spec__4 :: ErlangFun
erlps__fam_spec__4 [(ErlangCons e_1@(ErlangTuple [_, s_0]) f_2),
                    fun_3, type_4, l_5]
  =
  let    arg_7 = (ErlangTuple [(ErlangAtom "Set"), s_0, type_4])
  in let
    case_6 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons arg_7 ErlangEmptyList)])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__fam_spec__4 [f_2, fun_3, type_4, (ErlangCons e_1 l_5)])
      (ErlangAtom "false") ->
        (erlps__fam_spec__4 [f_2, fun_3, type_4, l_5])
      _ -> (ErlangAtom "badarg")
      something_else -> (EXC.case_clause something_else)
erlps__fam_spec__4 [(ErlangEmptyList), _fun_0, _type_1, l_2] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_2])
erlps__fam_spec__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__fam_spec__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_specification__3 :: ErlangFun
erlps__fam_specification__3 [(ErlangCons e_1@(ErlangTuple [_,
                                                           s_0]) f_2),
                             fun_3, l_4]
  =
  let
    case_5 =
      (BIF.erlang__apply__2 [fun_3, (ErlangCons s_0 ErlangEmptyList)])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (erlps__fam_specification__3 [f_2, fun_3, (ErlangCons e_1 l_4)])
      (ErlangAtom "false") ->
        (erlps__fam_specification__3 [f_2, fun_3, l_4])
      _ -> (ErlangAtom "badarg")
      something_else -> (EXC.case_clause something_else)
erlps__fam_specification__3 [(ErlangEmptyList), _fun_0, l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__fam_specification__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__fam_specification__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__un_of_fam__2 :: ErlangFun
erlps__un_of_fam__2 [(ErlangCons (ErlangTuple [_x_0, s_1]) f_2),
                     l_3]
  =
  (erlps__un_of_fam__2 [f_2, (ErlangCons s_1 l_3)])
erlps__un_of_fam__2 [(ErlangEmptyList), l_0] =
  let
    arg_1 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_0])
  in (erlps__lunion__1 [arg_1])
erlps__un_of_fam__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__un_of_fam__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int_of_fam__1 :: ErlangFun
erlps__int_of_fam__1 [(ErlangCons (ErlangTuple [_, s_0]) f_1)] =
  (erlps__int_of_fam__2 [f_1, (ErlangCons s_0 ErlangEmptyList)])
erlps__int_of_fam__1 [(ErlangEmptyList)] = (ErlangAtom "badarg")
erlps__int_of_fam__1 [arg_0] = (EXC.function_clause unit)
erlps__int_of_fam__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int_of_fam__2 :: ErlangFun
erlps__int_of_fam__2 [(ErlangCons (ErlangTuple [_, s_0]) f_1),
                      l_2]
  =
  (erlps__int_of_fam__2 [f_1, (ErlangCons s_0 l_2)])
erlps__int_of_fam__2 [(ErlangEmptyList), (ErlangCons l_0 ls_1)] =
  (erlps__lintersection__2 [ls_1, l_0])
erlps__int_of_fam__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__int_of_fam__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_un__2 :: ErlangFun
erlps__fam_un__2 [(ErlangCons (ErlangTuple [x_0, s_1]) f_2), l_3]
  =
  let    tup_el_8 = (erlps__lunion__1 [s_1])
  in let head_6 = (ErlangTuple [x_0, tup_el_8])
  in (erlps__fam_un__2 [f_2, (ErlangCons head_6 l_3)])
erlps__fam_un__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__fam_un__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__fam_un__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_int__2 :: ErlangFun
erlps__fam_int__2 [(ErlangCons (ErlangTuple [x_0,
                                             (ErlangCons s_1 ss_2)]) f_3),
                   l_4]
  =
  let    tup_el_9 = (erlps__lintersection__2 [ss_2, s_1])
  in let head_7 = (ErlangTuple [x_0, tup_el_9])
  in (erlps__fam_int__2 [f_3, (ErlangCons head_7 l_4)])
erlps__fam_int__2 [(ErlangCons (ErlangTuple [_x_0,
                                             (ErlangEmptyList)]) _f_1),
                   _l_2]
  =
  (ErlangAtom "badarg")
erlps__fam_int__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__fam_int__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__fam_int__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_dom__2 :: ErlangFun
erlps__fam_dom__2 [(ErlangCons (ErlangTuple [x_0, s_1]) f_2),
                   l_3]
  =
  let    tup_el_8 = (erlps__dom__1 [s_1])
  in let head_6 = (ErlangTuple [x_0, tup_el_8])
  in (erlps__fam_dom__2 [f_2, (ErlangCons head_6 l_3)])
erlps__fam_dom__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__fam_dom__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__fam_dom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_ran__2 :: ErlangFun
erlps__fam_ran__2 [(ErlangCons (ErlangTuple [x_0, s_1]) f_2),
                   l_3]
  =
  let    tup_el_8 = (erlps__ran__2 [s_1, ErlangEmptyList])
  in let head_6 = (ErlangTuple [x_0, tup_el_8])
  in (erlps__fam_ran__2 [f_2, (ErlangCons head_6 l_3)])
erlps__fam_ran__2 [(ErlangEmptyList), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__fam_ran__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__fam_ran__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_union__3 :: ErlangFun
erlps__fam_union__3 [f1_3@(ErlangCons (ErlangTuple [a_0,
                                                    _as_1]) _al_2),
                     (ErlangCons b1_6@(ErlangTuple [b_4, _bs_5]) bl_7), l_8]
  | (weakGt a_0 b_4) =
  (erlps__fam_union__3 [f1_3, bl_7, (ErlangCons b1_6 l_8)])
erlps__fam_union__3 [(ErlangCons (ErlangTuple [a_0, as_1]) al_2),
                     (ErlangCons (ErlangTuple [b_3, bs_4]) bl_5), l_6]
  | (weakEq a_0 b_3) =
  let   
    tup_el_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__umerge__2" [as_1, bs_4])
  in let head_10 = (ErlangTuple [a_0, tup_el_12])
  in (erlps__fam_union__3 [al_2, bl_5, (ErlangCons head_10 l_6)])
erlps__fam_union__3 [(ErlangCons a1_0 al_1), f2_2, l_3] =
  (erlps__fam_union__3 [al_1, f2_2, (ErlangCons a1_0 l_3)])
erlps__fam_union__3 [_, f2_0, l_1] =
  (BIF.lists__reverse__2 [l_1, f2_0])
erlps__fam_union__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__fam_union__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_intersect__3 :: ErlangFun
erlps__fam_intersect__3 [f1_3@(ErlangCons (ErlangTuple [a_0,
                                                        _as_1]) _al_2),
                         (ErlangCons (ErlangTuple [b_4, _bs_5]) bl_6), l_7]
  | (weakGt a_0 b_4) =
  (erlps__fam_intersect__3 [f1_3, bl_6, l_7])
erlps__fam_intersect__3 [(ErlangCons (ErlangTuple [a_0,
                                                   as_1]) al_2),
                         (ErlangCons (ErlangTuple [b_3, bs_4]) bl_5), l_6]
  | (weakEq a_0 b_3) =
  let   
    tup_el_12 =
      (erlps__intersection__3 [as_1, bs_4, ErlangEmptyList])
  in let head_10 = (ErlangTuple [a_0, tup_el_12])
  in
    (erlps__fam_intersect__3 [al_2, bl_5, (ErlangCons head_10 l_6)])
erlps__fam_intersect__3 [(ErlangCons _a1_0 al_1), f2_2, l_3] =
  (erlps__fam_intersect__3 [al_1, f2_2, l_3])
erlps__fam_intersect__3 [_, _, l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__fam_intersect__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__fam_intersect__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_difference__3 :: ErlangFun
erlps__fam_difference__3 [f1_3@(ErlangCons (ErlangTuple [a_0,
                                                         _as_1]) _al_2),
                          (ErlangCons (ErlangTuple [b_4, _bs_5]) bl_6), l_7]
  | (weakGt a_0 b_4) =
  (erlps__fam_difference__3 [f1_3, bl_6, l_7])
erlps__fam_difference__3 [(ErlangCons (ErlangTuple [a_0,
                                                    as_1]) al_2),
                          (ErlangCons (ErlangTuple [b_3, bs_4]) bl_5), l_6]
  | (weakEq a_0 b_3) =
  let   
    tup_el_12 = (erlps__difference__3 [as_1, bs_4, ErlangEmptyList])
  in let head_10 = (ErlangTuple [a_0, tup_el_12])
  in
    (erlps__fam_difference__3 [al_2, bl_5, (ErlangCons head_10 l_6)])
erlps__fam_difference__3 [(ErlangCons a1_0 al_1), f2_2, l_3] =
  (erlps__fam_difference__3 [al_1, f2_2, (ErlangCons a1_0 l_3)])
erlps__fam_difference__3 [f1_0, _, l_1] =
  (BIF.lists__reverse__2 [l_1, f1_0])
erlps__fam_difference__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__fam_difference__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_function__2 :: ErlangFun
erlps__check_function__2 [(ErlangCons (ErlangTuple [x_0,
                                                    _]) xl_1),
                          r_2]
  =
  (erlps__check_function__3 [x_0, xl_1, r_2])
erlps__check_function__2 [(ErlangEmptyList), r_0] = r_0
erlps__check_function__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__check_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_function__3 :: ErlangFun
erlps__check_function__3 [x0_0,
                          (ErlangCons (ErlangTuple [x_1, _]) xl_2), r_3]
  | (weakNEq x0_0 x_1) =
  (erlps__check_function__3 [x_1, xl_2, r_3])
erlps__check_function__3 [x0_0,
                          (ErlangCons (ErlangTuple [x_1, _]) _xl_2), _r_3]
  | (weakEq x0_0 x_1) =
  (ErlangAtom "bad_function")
erlps__check_function__3 [_x0_0, (ErlangEmptyList), r_1] = r_1
erlps__check_function__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__check_function__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_partition_n__2 :: ErlangFun
erlps__fam_partition_n__2 [i_0, (ErlangCons e_1 ts_2)] =
  let arg_5 = (BIF.erlang__element__2 [i_0, e_1])
  in
    (erlps__fam_partition_n__5
       [i_0, ts_2, arg_5, (ErlangCons e_1 ErlangEmptyList),
        ErlangEmptyList])
erlps__fam_partition_n__2 [_i_0, (ErlangEmptyList)] =
  ErlangEmptyList
erlps__fam_partition_n__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__fam_partition_n__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_partition_n__5 :: ErlangFun
erlps__fam_partition_n__5 [i_0, (ErlangCons e_1 ts_2), k_3, es_4,
                           p_5]
  =
  let    tup_el_7 = (BIF.erlang__element__2 [i_0, e_1])
  in let case_6 = (ErlangTuple [tup_el_7, es_4])
  in
    case case_6 of
      (ErlangTuple [k1_11, _]) | (weakEq k_3 k1_11) ->
        (erlps__fam_partition_n__5
           [i_0, ts_2, k_3, (ErlangCons e_1 es_4), p_5])
      (ErlangTuple [k1_19, (ErlangCons _ (ErlangEmptyList))]) ->
        let head_27 = (ErlangTuple [k_3, es_4])
        in
          (erlps__fam_partition_n__5
             [i_0, ts_2, k1_19, (ErlangCons e_1 ErlangEmptyList),
              (ErlangCons head_27 p_5)])
      (ErlangTuple [k1_31, _]) ->
        let   
          tup_el_41 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_4])
        in let head_39 = (ErlangTuple [k_3, tup_el_41])
        in
          (erlps__fam_partition_n__5
             [i_0, ts_2, k1_31, (ErlangCons e_1 ErlangEmptyList),
              (ErlangCons head_39 p_5)])
      something_else -> (EXC.case_clause something_else)
erlps__fam_partition_n__5 [_i_0, (ErlangEmptyList), k_1,
                           es_2@(ErlangCons _ (ErlangEmptyList)), p_3]
  =
  let head_6 = (ErlangTuple [k_1, es_2])
  in
    (BIF.lists__reverse__2
       [p_3, (ErlangCons head_6 ErlangEmptyList)])
erlps__fam_partition_n__5 [_i_0, (ErlangEmptyList), k_1, es_2,
                           p_3]
  =
  let   
    tup_el_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_2])
  in let head_6 = (ErlangTuple [k_1, tup_el_8])
  in
    (BIF.lists__reverse__2
       [p_3, (ErlangCons head_6 ErlangEmptyList)])
erlps__fam_partition_n__5 [arg_11, arg_12, arg_13, arg_14,
                           arg_15]
  =
  (EXC.function_clause unit)
erlps__fam_partition_n__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_partition__2 :: ErlangFun
erlps__fam_partition__2 [(ErlangCons (ErlangTuple [k_0,
                                                   vs_1]) ts_2),
                         sort_3]
  =
  (erlps__fam_partition__5
     [ts_2, k_0, (ErlangCons vs_1 ErlangEmptyList), ErlangEmptyList,
      sort_3])
erlps__fam_partition__2 [(ErlangEmptyList), _sort_0] =
  ErlangEmptyList
erlps__fam_partition__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__fam_partition__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_partition__5 :: ErlangFun
erlps__fam_partition__5 [(ErlangCons (ErlangTuple [k1_0,
                                                   v_1]) ts_2),
                         k_3, vs_4, p_5, s_6]
  | (weakEq k1_0 k_3) =
  (erlps__fam_partition__5
     [ts_2, k_3, (ErlangCons v_1 vs_4), p_5, s_6])
erlps__fam_partition__5 [(ErlangCons (ErlangTuple [k1_0,
                                                   v_1]) ts_2),
                         k_3, vs_4@(ErlangCons _ (ErlangEmptyList)), p_5, s_6]
  =
  let head_13 = (ErlangTuple [k_3, vs_4])
  in
    (erlps__fam_partition__5
       [ts_2, k1_0, (ErlangCons v_1 ErlangEmptyList),
        (ErlangCons head_13 p_5), s_6])
erlps__fam_partition__5 [(ErlangCons (ErlangTuple [k1_0,
                                                   v_1]) ts_2),
                         k_3, vs_4, p_5, s_6]
  =
  let    tup_el_15 = (erlps__sort__2 [s_6, vs_4])
  in let head_13 = (ErlangTuple [k_3, tup_el_15])
  in
    (erlps__fam_partition__5
       [ts_2, k1_0, (ErlangCons v_1 ErlangEmptyList),
        (ErlangCons head_13 p_5), s_6])
erlps__fam_partition__5 [(ErlangEmptyList), k_0,
                         vs_1@(ErlangCons _ (ErlangEmptyList)), p_2, _s_3]
  =
  let head_4 = (ErlangTuple [k_0, vs_1])
  in (ErlangCons head_4 p_2)
erlps__fam_partition__5 [(ErlangEmptyList), k_0, vs_1, p_2, s_3]
  =
  let    tup_el_6 = (erlps__sort__2 [s_3, vs_1])
  in let head_4 = (ErlangTuple [k_0, tup_el_6])
  in (ErlangCons head_4 p_2)
erlps__fam_partition__5 [arg_10, arg_11, arg_12, arg_13, arg_14]
  =
  (EXC.function_clause unit)
erlps__fam_partition__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam_proj__5 :: ErlangFun
erlps__fam_proj__5 [(ErlangCons (ErlangTuple [x_0, s_1]) f_2),
                    fun_3, type_4, ntype_5, l_6]
  =
  let case_7 = (erlps__setfun__4 [s_1, fun_3, type_4, ntype_5])
  in
    case case_7 of
      (ErlangTuple [sd_12, st_13]) ->
        let head_19 = (ErlangTuple [x_0, sd_12])
        in
          (erlps__fam_proj__5
             [f_2, fun_3, type_4, st_13, (ErlangCons head_19 l_6)])
      bad_23 -> bad_23
      something_else -> (EXC.case_clause something_else)
erlps__fam_proj__5 [(ErlangEmptyList), _fun_0, _type_1, ntype_2,
                    l_3]
  =
  let
    tup_el_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_3])
  in (ErlangTuple [tup_el_4, ntype_2])
erlps__fam_proj__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__fam_proj__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__setfun__4 :: ErlangFun
erlps__setfun__4 [t_0, fun_1, type_2, ntype_3] =
  let    arg_5 = (erlps__term2set__2 [t_0, type_2])
  in let
    case_4 =
      (BIF.erlang__apply__2
         [fun_1, (ErlangCons arg_5 ErlangEmptyList)])
  in
    case case_4 of
      ns_9 | ((ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      (BIF.erlang__is_record__3
                         [ns_9, (ErlangAtom "Set"),
                          (ErlangInt (DBI.fromInt 3))])))) ->
        let   
          head_14 =
            case ns_9 of
              (ErlangTuple arr_17) | (DM.Just field_16) <-
                                       ((arr_17 DA.!! 2)) ->
                field_16
              _ -> (EXC.badrecord (ErlangAtom "Set"))
        in let
          case_11 =
            (erlps__unify_types__2
               [ntype_3, (ErlangCons head_14 ErlangEmptyList)])
        in
          case case_11 of
            (ErlangEmptyList) -> (ErlangAtom "type_mismatch")
            nt_19 ->
              let
                tup_el_20 =
                  case ns_9 of
                    (ErlangTuple arr_23) | (DM.Just field_22) <-
                                             ((arr_23 DA.!! 1)) ->
                      field_22
                    _ -> (EXC.badrecord (ErlangAtom "Set"))
              in (ErlangTuple [tup_el_20, nt_19])
            something_else -> (EXC.case_clause something_else)
      ns_25 | ((ErlangAtom "true") ==
                 (falsifyErrors
                    (\ _ ->
                       (BIF.erlang__is_record__3
                          [ns_25, (ErlangAtom "OrdSet"),
                           (ErlangInt (DBI.fromInt 3))])))) ->
        let   
          nt_33 =
            case ns_25 of
              (ErlangTuple arr_32) | (DM.Just field_31) <-
                                       ((arr_32 DA.!! 2)) ->
                field_31
              _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
        in let case_27 = (erlps__unify_types__2 [ntype_3, nt_33])
        in
          case case_27 of
            (ErlangEmptyList) -> (ErlangAtom "type_mismatch")
            nt_34 | (nt_34 == nt_33) ->
              let
                tup_el_35 =
                  case ns_25 of
                    (ErlangTuple arr_38) | (DM.Just field_37) <-
                                             ((arr_38 DA.!! 1)) ->
                      field_37
                    _ -> (EXC.badrecord (ErlangAtom "OrdSet"))
              in (ErlangTuple [tup_el_35, nt_33])
            something_else -> (EXC.case_clause something_else)
      _ -> (ErlangAtom "badarg")
      something_else -> (EXC.case_clause something_else)
erlps__setfun__4 [arg_40, arg_41, arg_42, arg_43] =
  (EXC.function_clause unit)
erlps__setfun__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__term2set__2 :: ErlangFun
erlps__term2set__2 [l_0, type_1] | (isEList l_0) =
  (ErlangTuple [(ErlangAtom "Set"), l_0, type_1])
erlps__term2set__2 [t_0, type_1] =
  (ErlangTuple [(ErlangAtom "OrdSet"), t_0, type_1])
erlps__term2set__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__term2set__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fam2digraph__2 :: ErlangFun
erlps__fam2digraph__2 [f_0, g_1] =
  let   
    fun_23 =
      (ErlangFun 1
         let
           lambda_2 [(ErlangTuple [from_4, tol_5])] =
             let   
               _ =
                 (BIF.do_remote_fun_call "Digraph" "erlps__add_vertex__2"
                    [g_1, from_4])
             in let
               fun2_20 =
                 (ErlangFun 1
                    let
                      lambda_8 [to_10] =
                        let   
                          _ =
                            (BIF.do_remote_fun_call "Digraph"
                               "erlps__add_vertex__2" [g_1, to_10])
                        in let
                          case_13 =
                            (BIF.do_remote_fun_call "Digraph"
                               "erlps__add_edge__3" [g_1, from_4, to_10])
                        in
                          case case_13 of
                            (ErlangTuple [(ErlangAtom "error"),
                                          (ErlangTuple [(ErlangAtom "bad_edge"),
                                                        _])]) ->
                              let
                                arg_17 =
                                  (ErlangTuple
                                     [(ErlangAtom "error"),
                                      (ErlangAtom "cyclic")])
                              in (BIF.erlang__throw__1 [arg_17])
                            _ -> (ErlangAtom "true")
                            something_else -> (EXC.case_clause something_else)
                      lambda_8 [arg_9] = (EXC.function_clause unit)
                      lambda_8 args = (EXC.badarity (ErlangFun 1 lambda_8) args)
                    in lambda_8)
             in
               (BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
                  [fun2_20, tol_5])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in let arg_25 = (erlps__to_external__1 [f_0])
  in let
    _ =
      (BIF.do_remote_fun_call "Lists" "erlps__foreach__2"
         [fun_23, arg_25])
  in g_1
erlps__fam2digraph__2 [arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__fam2digraph__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__digraph_family__1 :: ErlangFun
erlps__digraph_family__1 [g_0] =
  let   
    arg_1 =
      (BIF.do_remote_fun_call "Digraph" "erlps__vertices__1" [g_0])
  in let
    vs_3 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_1])
  in (erlps__digraph_fam__4 [vs_3, vs_3, g_0, ErlangEmptyList])
erlps__digraph_family__1 [arg_8] = (EXC.function_clause unit)
erlps__digraph_family__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__digraph_fam__4 :: ErlangFun
erlps__digraph_fam__4 [(ErlangCons v_0 vs_1), v0_2, g_3, l_4]
  | (weakNEq v_0 v0_2) =
  let   
    arg_5 =
      (BIF.do_remote_fun_call "Digraph" "erlps__out_neighbours__2"
         [g_3, v_0])
  in let
    ns_8 = (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_5])
  in let head_13 = (ErlangTuple [v_0, ns_8])
  in
    (erlps__digraph_fam__4
       [vs_1, v_0, g_3, (ErlangCons head_13 l_4)])
erlps__digraph_fam__4 [(ErlangEmptyList), _v0_0, _g_1, l_2] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_2])
erlps__digraph_fam__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__digraph_fam__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_fun__3 :: ErlangFun
erlps__check_fun__3 [t_0, f_1, funt_2] =
  let match_expr_4 = (erlps__is_type__1 [funt_2])
  in
    case match_expr_4 of
      (ErlangAtom "true") ->
        let
          match_expr_9 =
            (erlps__number_tuples__2 [t_0, (ErlangInt (DBI.fromInt 1))])
        in
          case match_expr_9 of
            (ErlangTuple [nt_7, _maxi_8]) ->
              let   
                arg_11 =
                  (BIF.erlang__apply__2
                     [f_1, (ErlangCons nt_7 ErlangEmptyList)])
              in let arg_10 = (erlps__tuple2list__1 [arg_11])
              in let
                l_14 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_10])
              in (erlps__has_hole__2 [l_14, (ErlangInt (DBI.fromInt 1))])
            _ -> (EXC.badmatch match_expr_9)
      _ -> (EXC.badmatch match_expr_4)
erlps__check_fun__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__check_fun__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__number_tuples__2 :: ErlangFun
erlps__number_tuples__2 [t_0, n_1] | (isETuple t_0) =
  let    arg_2 = (ErlangFun 2 erlps__number_tuples__2)
  in let arg_4 = (BIF.erlang__tuple_to_list__1 [t_0])
  in let
    match_expr_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__mapfoldl__3"
         [arg_2, n_1, arg_4])
  in
    case match_expr_8 of
      (ErlangTuple [l_6, nn_7]) ->
        let tup_el_9 = (BIF.erlang__list_to_tuple__1 [l_6])
        in (ErlangTuple [tup_el_9, nn_7])
      _ -> (EXC.badmatch match_expr_8)
erlps__number_tuples__2 [_, n_0] =
  let
    tup_el_2 =
      (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [n_0, tup_el_2])
erlps__number_tuples__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__number_tuples__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple2list__1 :: ErlangFun
erlps__tuple2list__1 [t_0] | (isETuple t_0) =
  let    arg_1 = (ErlangFun 1 erlps__tuple2list__1)
  in let arg_2 = (BIF.erlang__tuple_to_list__1 [t_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_1, arg_2])
erlps__tuple2list__1 [c_0] = (ErlangCons c_0 ErlangEmptyList)
erlps__tuple2list__1 [arg_3] = (EXC.function_clause unit)
erlps__tuple2list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__has_hole__2 :: ErlangFun
erlps__has_hole__2 [(ErlangCons i_0 is_1), i0_2]
  | (weakLeq i_0 i0_2) =
  let   
    arg_5 = (BIF.erlang__op_plus [i_0, (ErlangInt (DBI.fromInt 1))])
  in let arg_4 = (BIF.erlang__max__2 [arg_5, i0_2])
  in (erlps__has_hole__2 [is_1, arg_4])
erlps__has_hole__2 [is_0, _i_1] =
  (BIF.erlang__op_exactNeq [is_0, ErlangEmptyList])
erlps__has_hole__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__has_hole__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_for_sort__2 :: ErlangFun
erlps__check_for_sort__2 [t_0, _i_1]
  | ((==) t_0 (ErlangAtom "_")) =
  (ErlangAtom "empty")
erlps__check_for_sort__2 [t_0, i_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_5 = (BIF.erlang__is_tuple__1 [t_0])
             in let
               lop_4 =
                 case lop_5 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let rop_8 = (BIF.erlang__tuple_size__1 [t_0])
                     in (BIF.erlang__op_lesserEq [i_1, rop_8])
                   _ -> (EXC.badarg1 lop_5)
             in
               case lop_4 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greaterEq [i_1, (ErlangInt (DBI.fromInt 1))])
                 _ -> (EXC.badarg1 lop_4)))) =
  (BIF.erlang__op_greater [i_1, (ErlangInt (DBI.fromInt 1))])
erlps__check_for_sort__2 [_t_0, _i_1] = (ErlangAtom "error")
erlps__check_for_sort__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__check_for_sort__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__inverse_substitution__3 :: ErlangFun
erlps__inverse_substitution__3 [l_0, fun_1, sort_2] =
  let arg_4 = (erlps__fun_rearr__3 [l_0, fun_1, ErlangEmptyList])
  in (erlps__sort__2 [sort_2, arg_4])
erlps__inverse_substitution__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__inverse_substitution__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_rearr__3 :: ErlangFun
erlps__fun_rearr__3 [(ErlangCons e_0 es_1), fun_2, l_3] =
  let   
    tup_el_8 =
      (BIF.erlang__apply__2 [fun_2, (ErlangCons e_0 ErlangEmptyList)])
  in let head_7 = (ErlangTuple [tup_el_8, e_0])
  in (erlps__fun_rearr__3 [es_1, fun_2, (ErlangCons head_7 l_3)])
erlps__fun_rearr__3 [(ErlangEmptyList), _fun_0, l_1] = l_1
erlps__fun_rearr__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__fun_rearr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sets_to_list__1 :: ErlangFun
erlps__sets_to_list__1 [ss_0] =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [s_4]
             | ((ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        (BIF.erlang__is_record__3
                           [s_4, (ErlangAtom "Set"),
                            (ErlangInt (DBI.fromInt 3))])))) =
             case s_4 of
               (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 1)) ->
                 field_7
               _ -> (EXC.badrecord (ErlangAtom "Set"))
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_1, ss_0])
erlps__sets_to_list__1 [arg_10] = (EXC.function_clause unit)
erlps__sets_to_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__types__2 :: ErlangFun
erlps__types__2 [(ErlangEmptyList), l_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
  in (BIF.erlang__list_to_tuple__1 [arg_1])
erlps__types__2 [(ErlangCons s_0 _ss_1), _l_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_3 =
                 case s_0 of
                   (ErlangTuple arr_6) | (DM.Just field_5) <-
                                           ((arr_6 DA.!! 2)) ->
                     field_5
                   _ -> (EXC.badrecord (ErlangAtom "Set"))
             in (BIF.erlang__op_exactEq [lop_3, (ErlangAtom "_")])))) =
  (ErlangAtom "_")
erlps__types__2 [(ErlangCons s_0 ss_1), l_2] =
  let
    head_5 =
      case s_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 2)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "Set"))
  in (erlps__types__2 [ss_1, (ErlangCons head_5 l_2)])
erlps__types__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__types__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unify_types__2 :: ErlangFun
erlps__unify_types__2 [t_0, t_1] | (t_1 == t_0) = t_0
erlps__unify_types__2 [type1_0, type2_1] =
  (EXC.tryCatch
     (\ _ -> (erlps__unify_types1__2 [type1_0, type2_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [(ErlangAtom "throw"), payload_6, _]) -> payload_6
          (ErlangTuple [(ErlangAtom "error"), payload_7, stack_8]) ->
            let tup_el_10 = (ErlangTuple [payload_7, stack_8])
            in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_10])
          (ErlangTuple [(ErlangAtom "exit"), payload_13, _]) ->
            (ErlangTuple [(ErlangAtom "EXIT"), payload_13])
          ex_5 -> (EXC.raise ex_5)))
erlps__unify_types__2 [arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__unify_types__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unify_types1__2 :: ErlangFun
erlps__unify_types1__2 [atom_0, atom_1]
  | (atom_1 == atom_0)
  , (isEAtom atom_0) =
  atom_0
erlps__unify_types1__2 [(ErlangAtom "_"), type_0] = type_0
erlps__unify_types1__2 [type_0, (ErlangAtom "_")] = type_0
erlps__unify_types1__2 [(ErlangCons type1_0 (ErlangEmptyList)),
                        (ErlangCons type2_1 (ErlangEmptyList))]
  =
  let head_2 = (erlps__unify_types1__2 [type1_0, type2_1])
  in (ErlangCons head_2 ErlangEmptyList)
erlps__unify_types1__2 [t1_0, t2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_7 = (BIF.erlang__tuple_size__1 [t1_0])
             in let rop_9 = (BIF.erlang__tuple_size__1 [t2_1])
             in (BIF.erlang__op_exactEq [lop_7, rop_9])))) =
  let arg_2 = (BIF.erlang__tuple_size__1 [t1_0])
  in (erlps__unify_typesl__4 [arg_2, t1_0, t2_1, ErlangEmptyList])
erlps__unify_types1__2 [_t1_0, _t2_1] =
  (BIF.erlang__throw__1 [ErlangEmptyList])
erlps__unify_types1__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__unify_types1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unify_typesl__4 :: ErlangFun
erlps__unify_typesl__4 [(ErlangInt num_0), _t1_1, _t2_2, l_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (BIF.erlang__list_to_tuple__1 [l_3])
erlps__unify_typesl__4 [n_0, t1_1, t2_2, l_3] =
  let    arg_4 = (BIF.erlang__element__2 [n_0, t1_1])
  in let arg_7 = (BIF.erlang__element__2 [n_0, t2_2])
  in let t_10 = (erlps__unify_types1__2 [arg_4, arg_7])
  in let
    arg_11 =
      (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__unify_typesl__4
       [arg_11, t1_1, t2_2, (ErlangCons t_10 l_3)])
erlps__unify_typesl__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__unify_typesl__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_types__2 :: ErlangFun
erlps__match_types__2 [t_0, t_1] | (t_1 == t_0) =
  (ErlangAtom "true")
erlps__match_types__2 [type1_0, type2_1] =
  (erlps__match_types1__2 [type1_0, type2_1])
erlps__match_types__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__match_types__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_types1__2 :: ErlangFun
erlps__match_types1__2 [atom_0, atom_1]
  | (atom_1 == atom_0)
  , (isEAtom atom_0) =
  (ErlangAtom "true")
erlps__match_types1__2 [(ErlangAtom "_"), _] =
  (ErlangAtom "true")
erlps__match_types1__2 [_, (ErlangAtom "_")] =
  (ErlangAtom "true")
erlps__match_types1__2 [(ErlangCons type1_0 (ErlangEmptyList)),
                        (ErlangCons type2_1 (ErlangEmptyList))]
  =
  (erlps__match_types1__2 [type1_0, type2_1])
erlps__match_types1__2 [t1_0, t2_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_6 = (BIF.erlang__tuple_size__1 [t1_0])
             in let rop_8 = (BIF.erlang__tuple_size__1 [t2_1])
             in (BIF.erlang__op_exactEq [lop_6, rop_8])))) =
  let arg_2 = (BIF.erlang__tuple_size__1 [t1_0])
  in (erlps__match_typesl__3 [arg_2, t1_0, t2_1])
erlps__match_types1__2 [_t1_0, _t2_1] = (ErlangAtom "false")
erlps__match_types1__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__match_types1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__match_typesl__3 :: ErlangFun
erlps__match_typesl__3 [(ErlangInt num_0), _t1_1, _t2_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__match_typesl__3 [n_0, t1_1, t2_2] =
  let    arg_4 = (BIF.erlang__element__2 [n_0, t1_1])
  in let arg_7 = (BIF.erlang__element__2 [n_0, t2_2])
  in let case_3 = (erlps__match_types1__2 [arg_4, arg_7])
  in
    case case_3 of
      (ErlangAtom "true") ->
        let
          arg_10 =
            (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
        in (erlps__match_typesl__3 [arg_10, t1_1, t2_2])
      (ErlangAtom "false") -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__match_typesl__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__match_typesl__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort__2 :: ErlangFun
erlps__sort__2 [(ErlangAtom "true"), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [l_0])
erlps__sort__2 [(ErlangAtom "false"), l_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_0])
erlps__sort__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__sort__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)