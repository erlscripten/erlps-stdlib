module Filename(erlps__absname__1, erlps__absname__2,
                erlps__absname_join__2, erlps__basename__1, erlps__basename__2,
                erlps__dirname__1, erlps__extension__1, erlps__join__1,
                erlps__join__2, erlps__pathtype__1, erlps__rootname__1,
                erlps__rootname__2, erlps__split__1, erlps__flatten__1,
                erlps__nativename__1, erlps__safe_relative_path__1,
                erlps__find_src__1, erlps__find_src__2, erlps__basedir__2,
                erlps__basedir__3, erlps__validate__1, erlps__append__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.1.0
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers as H
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__absname__1 :: ErlangFun
erlps__absname__1 [name_0] =
  let
    match_expr_2 =
      (BIF.do_remote_fun_call "File" "erlps__get_cwd__0" [])
  in
    case match_expr_2 of
      (ErlangTuple [(ErlangAtom "ok"), cwd_1]) ->
        (erlps__absname__2 [name_0, cwd_1])
      _ -> (EXC.badmatch match_expr_2)
erlps__absname__1 [arg_5] = (EXC.function_clause unit)
erlps__absname__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__absname__2 :: ErlangFun
erlps__absname__2 [name_0, absbase_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_binary__1 [name_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_list__1 [absbase_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_3 = (erlps__filename_string_to_binary__1 [absbase_1])
  in (erlps__absname__2 [name_0, arg_3])
erlps__absname__2 [name_0, absbase_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_list__1 [name_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [absbase_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_2 = (erlps__filename_string_to_binary__1 [name_0])
  in (erlps__absname__2 [arg_2, absbase_1])
erlps__absname__2 [name_0, absbase_1] =
  let case_2 = (erlps__pathtype__1 [name_0])
  in
    case case_2 of
      (ErlangAtom "relative") ->
        (erlps__absname_join__2 [absbase_1, name_0])
      (ErlangAtom "absolute") ->
        let head_7 = (erlps__flatten__1 [name_0])
        in (erlps__join__1 [(ErlangCons head_7 ErlangEmptyList)])
      (ErlangAtom "volumerelative") ->
        let    arg_10 = (erlps__split__1 [name_0])
        in let arg_12 = (erlps__split__1 [absbase_1])
        in (erlps__absname_vr__3 [arg_10, arg_12, absbase_1])
      something_else -> (EXC.case_clause something_else)
erlps__absname__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__absname__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__absname_vr__3 :: ErlangFun
erlps__absname_vr__3 [(ErlangCons (ErlangBinary bin_c_0) rest1_4),
                      (ErlangCons volume_5 _), _absbase_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (BIN.empty bin_2) =
  (erlps__join__1 [(ErlangCons volume_5 rest1_4)])
erlps__absname_vr__3 [(ErlangCons (ErlangBinary bin_c_0) rest1_7),
                      (ErlangCons (ErlangBinary bin_c_8) _), absbase_12]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , (BIN.empty bin_5)
  , size_9 <- ((DBI.fromInt 8))
  , (BIN.Ok x_11 bin_10) <-
      ((BIN.chop_int bin_c_8 size_9 1 BIN.Big BIN.Unsigned))
  , (x_11 == x_3) =
  let arg_13 = (erlps__join__1 [rest1_7])
  in (erlps__absname__2 [arg_13, absbase_12])
erlps__absname_vr__3 [(ErlangCons (ErlangBinary bin_c_0) name_7),
                      _, _absbase_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , (BIN.empty bin_5) =
  let   
    case_9 =
      (BIF.do_remote_fun_call "File" "erlps__get_cwd__1"
         [(ErlangCons x_3
             (ErlangCons (ErlangInt (DBI.fromInt 58)) ErlangEmptyList))])
  in let
    dcwd_20 =
      case case_9 of
        (ErlangTuple [(ErlangAtom "ok"), dir_15]) ->
          (erlps__filename_string_to_binary__1 [dir_15])
        (ErlangTuple [(ErlangAtom "error"), _]) ->
          (ErlangBinary
             (BIN.concat
                [(BIN.from_int x_3 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int (ErlangInt (DBI.fromInt 58))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                 (BIN.from_int (ErlangInt (DBI.fromInt 47))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
        something_else -> (EXC.case_clause something_else)
  in let arg_21 = (erlps__join__1 [name_7])
  in (erlps__absname__2 [arg_21, dcwd_20])
erlps__absname_vr__3 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangEmptyList)) rest1_1),
                      (ErlangCons volume_2 _), _absbase_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join__1 [(ErlangCons volume_2 rest1_1)])
erlps__absname_vr__3 [(ErlangCons (ErlangCons x_0 (ErlangCons (ErlangInt num_1) (ErlangEmptyList))) rest1_2),
                      (ErlangCons (ErlangCons x_3 _) _), absbase_4]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , (x_3 == x_0) =
  let arg_5 = (erlps__join__1 [rest1_2])
  in (erlps__absname__2 [arg_5, absbase_4])
erlps__absname_vr__3 [(ErlangCons (ErlangCons x_0 (ErlangCons (ErlangInt num_1) (ErlangEmptyList))) name_2),
                      _, _absbase_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  let   
    case_4 =
      (BIF.do_remote_fun_call "File" "erlps__get_cwd__1"
         [(ErlangCons x_0
             (ErlangCons (ErlangInt (DBI.fromInt 58)) ErlangEmptyList))])
  in let
    dcwd_17 =
      case case_4 of
        (ErlangTuple [(ErlangAtom "ok"), dir_10]) -> dir_10
        (ErlangTuple [(ErlangAtom "error"), _]) ->
          (ErlangCons x_0
             (ErlangCons (ErlangInt (DBI.fromInt 58))
                (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)))
        something_else -> (EXC.case_clause something_else)
  in let arg_18 = (erlps__join__1 [name_2])
  in (erlps__absname__2 [arg_18, dcwd_17])
erlps__absname_vr__3 [arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__absname_vr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__absname_join__2 :: ErlangFun
erlps__absname_join__2 [absbase_0, name_1] =
  let arg_3 = (erlps__flatten__1 [name_1])
  in (erlps__join__2 [absbase_0, arg_3])
erlps__absname_join__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__absname_join__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basename__1 :: ErlangFun
erlps__basename__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let case_1 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (erlps__win_basenameb__1 [name_0])
      _ ->
        let
          head_5 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 47))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in
          (erlps__basenameb__2
             [name_0, (ErlangCons head_5 ErlangEmptyList)])
erlps__basename__1 [name0_0] =
  let    name1_2 = (erlps__flatten__1 [name0_0])
  in let match_expr_5 = (erlps__separators__0 [])
  in
    case match_expr_5 of
      (ErlangTuple [dirsep2_3, drvsep_4]) ->
        let name_8 = (erlps__skip_prefix__2 [name1_2, drvsep_4])
        in (erlps__basename1__3 [name_8, name_8, dirsep2_3])
      _ -> (EXC.badmatch match_expr_5)
erlps__basename__1 [arg_12] = (EXC.function_clause unit)
erlps__basename__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__win_basenameb__1 :: ErlangFun
erlps__win_basenameb__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok letter_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_19 =
                 (BIF.erlang__op_greaterEq
                    [letter_3, (ErlangInt (DBI.fromInt 65))])
             in let
               lop_18 =
                 case lop_19 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [letter_3, (ErlangInt (DBI.fromInt 90))])
                   _ -> (EXC.badarg1 lop_19)
             in
               case lop_18 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let
                     lop_24 =
                       (BIF.erlang__op_greaterEq
                          [letter_3, (ErlangInt (DBI.fromInt 97))])
                   in
                     case lop_24 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [letter_3, (ErlangInt (DBI.fromInt 122))])
                       _ -> (EXC.badarg1 lop_24)
                 _ -> (EXC.badarg1 lop_18)))) =
  let   
    head_12 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__basenameb__2
       [rest_9,
        (ErlangCons head_12 (ErlangCons head_15 ErlangEmptyList))])
erlps__win_basenameb__1 [o_0] =
  let   
    head_3 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_6 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (erlps__basenameb__2
       [o_0, (ErlangCons head_3 (ErlangCons head_6 ErlangEmptyList))])
erlps__win_basenameb__1 [arg_9] = (EXC.function_clause unit)
erlps__win_basenameb__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basenameb__2 :: ErlangFun
erlps__basenameb__2 [bin_0, sep_1] =
  let   
    lc_src_2 =
      (BIF.binary__split__3
         [bin_0, sep_1,
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    parts_14 =
      (H.flmap
         (\ lc_9 ->
            let    rop_12 = (ErlangBinary (BIN.concat []))
            in let cond_10 = (BIF.erlang__op_exactNeq [lc_9, rop_12])
            in
              case cond_10 of
                (ErlangAtom "true") -> (ErlangCons lc_9 ErlangEmptyList)
                _ -> ErlangEmptyList)
         lc_src_2)
  in
    case (ErlangAtom "true") of
      _ | ((==) parts_14 ErlangEmptyList) ->
        (ErlangBinary (BIN.concat []))
      _ -> (BIF.do_remote_fun_call "Lists" "erlps__last__1" [parts_14])
erlps__basenameb__2 [arg_16, arg_17] = (EXC.function_clause unit)
erlps__basenameb__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basename1__3 :: ErlangFun
erlps__basename1__3 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                     tail0_1, _dirsep2_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let
    match_expr_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [tail0_1])
  in
    case match_expr_5 of
      (ErlangCons _ tail_4) ->
        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [tail_4])
      _ -> (EXC.badmatch match_expr_5)
erlps__basename1__3 [(ErlangCons (ErlangInt num_0) rest_1),
                     _tail_2, dirsep2_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__basename1__3 [rest_1, rest_1, dirsep2_3])
erlps__basename1__3 [(ErlangCons dirsep2_0 rest_1), tail_2,
                     dirsep2_3]
  | (dirsep2_3 == dirsep2_0)
  , (H.isEInt dirsep2_0) =
  (erlps__basename1__3
     [(ErlangCons (ErlangInt (DBI.fromInt 47)) rest_1), tail_2,
      dirsep2_0])
erlps__basename1__3 [(ErlangCons char_0 rest_1), tail_2,
                     dirsep2_3]
  | (H.isEInt char_0) =
  (erlps__basename1__3 [rest_1, tail_2, dirsep2_3])
erlps__basename1__3 [(ErlangEmptyList), tail_0, _dirsep2_1] =
  tail_0
erlps__basename1__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__basename1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_prefix__2 :: ErlangFun
erlps__skip_prefix__2 [name_0, (ErlangAtom "false")] = name_0
erlps__skip_prefix__2 [(ErlangCons l_0 (ErlangCons drvsep_1 name_2)),
                       drvsep_3]
  | (drvsep_3 == drvsep_1)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_5 =
                 (BIF.erlang__op_greaterEq [l_0, (ErlangInt (DBI.fromInt 65))])
             in let
               lop_4 =
                 case lop_5 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [l_0, (ErlangInt (DBI.fromInt 90))])
                   _ -> (EXC.badarg1 lop_5)
             in
               case lop_4 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let
                     lop_10 =
                       (BIF.erlang__op_greaterEq
                          [l_0, (ErlangInt (DBI.fromInt 97))])
                   in
                     case lop_10 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [l_0, (ErlangInt (DBI.fromInt 122))])
                       _ -> (EXC.badarg1 lop_10)
                 _ -> (EXC.badarg1 lop_4)))) =
  name_2
erlps__skip_prefix__2 [name_0, _] = name_0
erlps__skip_prefix__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__skip_prefix__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basename__2 :: ErlangFun
erlps__basename__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_binary__1 [name_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_list__1 [ext_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_3 = (erlps__filename_string_to_binary__1 [ext_1])
  in (erlps__basename__2 [name_0, arg_3])
erlps__basename__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_list__1 [name_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [ext_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_2 = (erlps__filename_string_to_binary__1 [name_0])
  in (erlps__basename__2 [arg_2, ext_1])
erlps__basename__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_31 = (BIF.erlang__is_binary__1 [name_0])
             in
               case lop_31 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [ext_1])
                 _ -> (EXC.badarg1 lop_31)))) =
  let    bname_3 = (erlps__basename__1 [name_0])
  in let lall_5 = (BIF.erlang__byte_size__1 [name_0])
  in let ln_7 = (BIF.erlang__byte_size__1 [bname_3])
  in let le_9 = (BIF.erlang__byte_size__1 [ext_1])
  in let case_10 = (BIF.erlang__op_minus [ln_7, le_9])
  in
    case case_10 of
      neg_13 | (weakLt neg_13 (ErlangInt (DBI.fromInt 0))) -> bname_3
      pos_14 ->
        let    lop_15 = (BIF.erlang__op_minus [lall_5, pos_14])
        in let startlen_19 = (BIF.erlang__op_minus [lop_15, le_9])
        in
          case name_0 of
            (ErlangBinary bin_c_21) | (ErlangInt size_22) <- (startlen_19)
                                    , (BIN.Ok _ bin_23) <-
                                        ((BIN.chop_bin bin_c_21 size_22 8))
                                    , (ErlangInt size_24) <- (pos_14)
                                    , (BIN.Ok part_26 bin_25) <-
                                        ((BIN.chop_bin bin_23 size_24 8))
                                    , (ErlangInt size_27) <- ((BIN.size bin_25))
                                    , (BIN.Ok ext_29 bin_28) <-
                                        ((BIN.chop_bin bin_25 size_27 8))
                                    , (BIN.empty bin_28)
                                    , (ext_29 == ext_1) ->
              part_26
            _other_30 -> bname_3
erlps__basename__2 [name0_0, ext0_1] =
  let    name_3 = (erlps__flatten__1 [name0_0])
  in let ext_5 = (erlps__flatten__1 [ext0_1])
  in let match_expr_8 = (erlps__separators__0 [])
  in
    case match_expr_8 of
      (ErlangTuple [dirsep2_6, drvsep_7]) ->
        let noprefix_11 = (erlps__skip_prefix__2 [name_3, drvsep_7])
        in
          (erlps__basename__4
             [noprefix_11, ext_5, ErlangEmptyList, dirsep2_6])
      _ -> (EXC.badmatch match_expr_8)
erlps__basename__2 [arg_16, arg_17] = (EXC.function_clause unit)
erlps__basename__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basename__4 :: ErlangFun
erlps__basename__4 [ext_0, ext_1, tail_2, _drvsep2_3]
  | (ext_1 == ext_0) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [tail_2])
erlps__basename__4 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                    ext_1, tail_2, drvsep2_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__basename__4 [ErlangEmptyList, ext_1, tail_2, drvsep2_3])
erlps__basename__4 [(ErlangCons (ErlangInt num_0) rest_1), ext_2,
                    _tail_3, drvsep2_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__basename__4 [rest_1, ext_2, ErlangEmptyList, drvsep2_4])
erlps__basename__4 [(ErlangCons dirsep2_0 rest_1), ext_2, tail_3,
                    dirsep2_4]
  | (dirsep2_4 == dirsep2_0)
  , (H.isEInt dirsep2_0) =
  (erlps__basename__4
     [(ErlangCons (ErlangInt (DBI.fromInt 47)) rest_1), ext_2, tail_3,
      dirsep2_0])
erlps__basename__4 [(ErlangCons char_0 rest_1), ext_2, tail_3,
                    drvsep2_4]
  | (H.isEInt char_0) =
  (erlps__basename__4
     [rest_1, ext_2, (ErlangCons char_0 tail_3), drvsep2_4])
erlps__basename__4 [(ErlangEmptyList), _ext_0, tail_1,
                    _drvsep2_2]
  =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [tail_1])
erlps__basename__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__basename__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dirname__1 :: ErlangFun
erlps__dirname__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let match_expr_3 = (erlps__separators__0 [])
  in
    case match_expr_3 of
      (ErlangTuple [dsep_1, drivesep_2]) ->
        let   
          slist_9 =
            case dsep_1 of
              sep_5 | (H.isEInt sep_5) ->
                let
                  head_6 =
                    (ErlangBinary
                       (BIN.from_int sep_5 (ErlangInt (DBI.fromInt 8)) 1
                          BIN.Big))
                in (ErlangCons head_6 ErlangEmptyList)
              _ -> ErlangEmptyList
        in let
          match_expr_44 =
            case drivesep_2 of
              x_11 | (H.isEInt x_11) ->
                case name_0 of
                  (ErlangBinary bin_c_13) | size_14 <- ((DBI.fromInt 8))
                                          , (BIN.Ok dl_16 bin_15) <-
                                              ((BIN.chop_int bin_c_13 size_14 1
                                                  BIN.Big BIN.Unsigned))
                                          , size_17 <- ((DBI.fromInt 8))
                                          , (BIN.Ok x_19 bin_18) <-
                                              ((BIN.chop_int bin_15 size_17 1
                                                  BIN.Big BIN.Unsigned))
                                          , (ErlangInt size_20) <-
                                              ((BIN.size bin_18))
                                          , (BIN.Ok rest_22 bin_21) <-
                                              ((BIN.chop_bin bin_18 size_20 8))
                                          , (BIN.empty bin_21)
                                          , (x_19 == x_11)
                                          , ((ErlangAtom "true") ==
                                               (H.falsifyErrors
                                                  (\ _ ->
                                                     let   
                                                       lop_24 =
                                                         (BIF.erlang__op_greaterEq
                                                            [dl_16,
                                                             (ErlangInt
                                                                (DBI.fromInt
                                                                   65))])
                                                     in let
                                                       lop_23 =
                                                         case lop_24 of
                                                           (ErlangAtom "false") ->
                                                             (ErlangAtom
                                                                "false")
                                                           (ErlangAtom "true") ->
                                                             (BIF.erlang__op_lesserEq
                                                                [dl_16,
                                                                 (ErlangInt
                                                                    (DBI.fromInt
                                                                       90))])
                                                           _ ->
                                                             (EXC.badarg1
                                                                lop_24)
                                                     in
                                                       case lop_23 of
                                                         (ErlangAtom "true") ->
                                                           (ErlangAtom "true")
                                                         (ErlangAtom "false") ->
                                                           let
                                                             lop_29 =
                                                               (BIF.erlang__op_greaterEq
                                                                  [dl_16,
                                                                   (ErlangInt
                                                                      (DBI.fromInt
                                                                         97))])
                                                           in
                                                             case lop_29 of
                                                               (ErlangAtom "false") ->
                                                                 (ErlangAtom
                                                                    "false")
                                                               (ErlangAtom "true") ->
                                                                 (BIF.erlang__op_lesserEq
                                                                    [dl_16,
                                                                     (ErlangInt
                                                                        (DBI.fromInt
                                                                           122))])
                                                               _ ->
                                                                 (EXC.badarg1
                                                                    lop_29)
                                                         _ ->
                                                           (EXC.badarg1
                                                              lop_23)))) ->
                    let
                      tup_el_34 =
                        (ErlangBinary
                           (BIN.concat
                              [(BIN.from_int dl_16 (ErlangInt (DBI.fromInt 8)) 1
                                  BIN.Big),
                               (BIN.from_int x_11 (ErlangInt (DBI.fromInt 8)) 1
                                  BIN.Big)]))
                    in (ErlangTuple [tup_el_34, rest_22])
                  _ ->
                    let tup_el_38 = (ErlangBinary (BIN.concat []))
                    in (ErlangTuple [tup_el_38, name_0])
              _ ->
                let tup_el_40 = (ErlangBinary (BIN.concat []))
                in (ErlangTuple [tup_el_40, name_0])
        in
          case match_expr_44 of
            (ErlangTuple [xpart0_42, dirs_43]) ->
              let   
                head_47 =
                  (ErlangBinary
                     (BIN.from_int (ErlangInt (DBI.fromInt 47))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
              in let
                parts0_53 =
                  (BIF.binary__split__3
                     [dirs_43, (ErlangCons head_47 slist_9),
                      (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
              in let
                parts_59 =
                  case parts0_53 of
                    (ErlangEmptyList) -> ErlangEmptyList
                    _ ->
                      let   
                        arg_57 =
                          (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                             [parts0_53])
                      in let arg_56 = (BIF.erlang__tl__1 [arg_57])
                      in let arg_55 = (erlps__fstrip__1 [arg_56])
                      in
                        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                           [arg_55])
              in let case_60 = (ErlangTuple [parts_59, xpart0_42])
              in let
                xpart_65 =
                  case case_60 of
                    (ErlangTuple [(ErlangEmptyList),
                                  (ErlangBinary bin_e_63)]) | (BIN.empty
                                                                 bin_e_63) ->
                      (ErlangBinary
                         (BIN.from_int (ErlangInt (DBI.fromInt 46))
                            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
                    _ -> xpart0_42
              in let
                arg_68 =
                  (ErlangBinary
                     (BIN.from_int (ErlangInt (DBI.fromInt 47))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
              in (erlps__dirjoin__3 [parts_59, xpart_65, arg_68])
            _ -> (EXC.badmatch match_expr_44)
      _ -> (EXC.badmatch match_expr_3)
erlps__dirname__1 [name0_0] =
  let    name_2 = (erlps__flatten__1 [name0_0])
  in let arg_6 = (erlps__separators__0 [])
  in
    (erlps__dirname__4
       [name_2, ErlangEmptyList, ErlangEmptyList, arg_6])
erlps__dirname__1 [arg_7] = (EXC.function_clause unit)
erlps__dirname__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dirname__4 :: ErlangFun
erlps__dirname__4 [(ErlangCons (ErlangInt num_0) rest_1), dir_2,
                   file_3, seps_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let arg_6 = (BIF.erlang__op_append [file_3, dir_2])
  in
    (erlps__dirname__4
       [rest_1, arg_6,
        (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList),
        seps_4])
erlps__dirname__4 [(ErlangCons dirsep_0 rest_1), dir_2, file_3,
                   seps_5@(ErlangTuple [dirsep_4, _])]
  | (dirsep_4 == dirsep_0)
  , (H.isEInt dirsep_0) =
  let arg_7 = (BIF.erlang__op_append [file_3, dir_2])
  in
    (erlps__dirname__4
       [rest_1, arg_7,
        (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList),
        seps_5])
erlps__dirname__4 [(ErlangCons dl_0 (ErlangCons drvsep_1 rest_2)),
                   (ErlangEmptyList), (ErlangEmptyList),
                   seps_4@(ErlangTuple [_, drvsep_3])]
  | (drvsep_3 == drvsep_1)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_13 = (BIF.erlang__is_integer__1 [drvsep_1])
             in
               case lop_13 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_16 =
                       (BIF.erlang__op_lesserEq
                          [(ErlangInt (DBI.fromInt 97)), dl_0])
                   in let
                     rop_19 =
                       (BIF.erlang__op_lesserEq
                          [dl_0, (ErlangInt (DBI.fromInt 122))])
                   in let lop_15 = (BIF.erlang__op_and [lop_16, rop_19])
                   in let
                     lop_23 =
                       (BIF.erlang__op_lesserEq
                          [(ErlangInt (DBI.fromInt 65)), dl_0])
                   in let
                     rop_26 =
                       (BIF.erlang__op_lesserEq
                          [dl_0, (ErlangInt (DBI.fromInt 90))])
                   in let rop_22 = (BIF.erlang__op_and [lop_23, rop_26])
                   in (BIF.erlang__op_or [lop_15, rop_22])
                 _ -> (EXC.badarg1 lop_13)))) =
  (erlps__dirname__4
     [rest_2, (ErlangCons drvsep_1 (ErlangCons dl_0 ErlangEmptyList)),
      ErlangEmptyList, seps_4])
erlps__dirname__4 [(ErlangCons char_0 rest_1), dir_2, file_3,
                   seps_4]
  | (H.isEInt char_0) =
  (erlps__dirname__4
     [rest_1, dir_2, (ErlangCons char_0 file_3), seps_4])
erlps__dirname__4 [(ErlangEmptyList), (ErlangEmptyList), file_0,
                   _seps_1]
  =
  let
    case_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [file_0])
  in
    case case_2 of
      (ErlangCons (ErlangInt num_4) _) | ((ErlangInt num_4) ==
                                            (ErlangInt (DBI.fromInt 47))) ->
        (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)
      _ -> (H.make_string ".")
erlps__dirname__4 [(ErlangEmptyList),
                   (ErlangCons (ErlangInt num_0) rest_1), file_2, seps_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__dirname__4 [ErlangEmptyList, rest_1, file_2, seps_3])
erlps__dirname__4 [(ErlangEmptyList),
                   (ErlangCons drvsep_0 (ErlangCons dl_1 (ErlangEmptyList))),
                   file_2, (ErlangTuple [_, drvsep_3])]
  | (drvsep_3 == drvsep_0) =
  let
    case_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [file_2])
  in
    case case_4 of
      (ErlangCons (ErlangInt num_6) _) | ((ErlangInt num_6) ==
                                            (ErlangInt (DBI.fromInt 47))) ->
        (ErlangCons dl_1
           (ErlangCons drvsep_0
              (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)))
      _ -> (ErlangCons dl_1 (ErlangCons drvsep_0 ErlangEmptyList))
erlps__dirname__4 [(ErlangEmptyList), dir_0, _, _] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [dir_0])
erlps__dirname__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__dirname__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fstrip__1 :: ErlangFun
erlps__fstrip__1 [(ErlangCons (ErlangBinary bin_e_0) (ErlangCons x_1 y_2))]
  | (BIN.empty bin_e_0) =
  (erlps__fstrip__1 [(ErlangCons x_1 y_2)])
erlps__fstrip__1 [a_0] = a_0
erlps__fstrip__1 [arg_1] = (EXC.function_clause unit)
erlps__fstrip__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dirjoin__3 :: ErlangFun
erlps__dirjoin__3 [(ErlangCons (ErlangBinary bin_e_0) t_1),
                   acc_2, sep_3]
  | (BIN.empty bin_e_0) =
  let
    arg_5 =
      (ErlangBinary
         (BIN.concat
            [(BIN.format_bin acc_2 (BIN.packed_size acc_2) 8),
             (BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in (erlps__dirjoin1__3 [t_1, arg_5, sep_3])
erlps__dirjoin__3 [a_0, b_1, c_2] =
  (erlps__dirjoin1__3 [a_0, b_1, c_2])
erlps__dirjoin__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__dirjoin__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dirjoin1__3 :: ErlangFun
erlps__dirjoin1__3 [(ErlangEmptyList), acc_0, _] = acc_0
erlps__dirjoin1__3 [(ErlangCons one_0 (ErlangEmptyList)), acc_1,
                    _]
  =
  (ErlangBinary
     (BIN.concat
        [(BIN.format_bin acc_1 (BIN.packed_size acc_1) 8),
         (BIN.format_bin one_0 (BIN.packed_size one_0) 8)]))
erlps__dirjoin1__3 [(ErlangCons h_0 t_1), acc_2, sep_3] =
  let
    arg_5 =
      (ErlangBinary
         (BIN.concat
            [(BIN.format_bin acc_2 (BIN.packed_size acc_2) 8),
             (BIN.format_bin h_0 (BIN.packed_size h_0) 8),
             (BIN.format_bin sep_3 (BIN.packed_size sep_3) 8)]))
  in (erlps__dirjoin__3 [t_1, arg_5, sep_3])
erlps__dirjoin1__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__dirjoin1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extension__1 :: ErlangFun
erlps__extension__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let match_expr_2 = (erlps__separators__0 [])
  in
    case match_expr_2 of
      (ErlangTuple [dsep_1, _]) ->
        let   
          slist_8 =
            case dsep_1 of
              sep_4 | (H.isEInt sep_4) ->
                let
                  head_5 =
                    (ErlangBinary
                       (BIN.from_int sep_4 (ErlangInt (DBI.fromInt 8)) 1
                          BIN.Big))
                in (ErlangCons head_5 ErlangEmptyList)
              _ -> ErlangEmptyList
        in let
          head_12 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 46))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in let
          case_9 =
            (BIF.do_remote_fun_call "Binary" "erlps__matches__2"
               [name_0, (ErlangCons head_12 ErlangEmptyList)])
        in
          case case_9 of
            (ErlangEmptyList) -> (ErlangBinary (BIN.concat []))
            list_15 ->
              let
                match_expr_18 =
                  (BIF.do_remote_fun_call "Lists" "erlps__last__1" [list_15])
              in
                case match_expr_18 of
                  (ErlangTuple [pos_17, _]) ->
                    case name_0 of
                      (ErlangBinary bin_c_19) | (ErlangInt size_20) <- (pos_17)
                                              , (BIN.Ok _ bin_21) <-
                                                  ((BIN.chop_bin bin_c_19
                                                      size_20 8))
                                              , (ErlangInt size_22) <-
                                                  ((BIN.size bin_21))
                                              , (BIN.Ok part_24 bin_23) <-
                                                  ((BIN.chop_bin bin_21 size_22
                                                      8))
                                              , (BIN.empty bin_23) ->
                        let   
                          head_29 =
                            (ErlangBinary
                               (BIN.from_int (ErlangInt (DBI.fromInt 47))
                                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
                        in let
                          case_26 =
                            (BIF.do_remote_fun_call "Binary" "erlps__match__2"
                               [part_24, (ErlangCons head_29 slist_8)])
                        in
                          case case_26 of
                            (ErlangAtom "nomatch") -> part_24
                            _ -> (ErlangBinary (BIN.concat []))
                      _ -> (EXC.badmatch name_0)
                  _ -> (EXC.badmatch match_expr_18)
      _ -> (EXC.badmatch match_expr_2)
erlps__extension__1 [name0_0] =
  let    name_2 = (erlps__flatten__1 [name0_0])
  in let arg_5 = (erlps__major_os_type__0 [])
  in (erlps__extension__3 [name_2, ErlangEmptyList, arg_5])
erlps__extension__1 [arg_6] = (EXC.function_clause unit)
erlps__extension__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extension__3 :: ErlangFun
erlps__extension__3 [result_2@(ErlangCons (ErlangInt num_0) rest_1),
                     _result_3, ostype_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__extension__3 [rest_1, result_2, ostype_4])
erlps__extension__3 [(ErlangCons char_0 rest_1),
                     (ErlangEmptyList), ostype_2]
  | (H.isEInt char_0) =
  (erlps__extension__3 [rest_1, ErlangEmptyList, ostype_2])
erlps__extension__3 [(ErlangCons (ErlangInt num_0) rest_1),
                     _result_2, ostype_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__extension__3 [rest_1, ErlangEmptyList, ostype_3])
erlps__extension__3 [(ErlangCons (ErlangInt num_0) rest_1),
                     _result_2, (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__extension__3
     [rest_1, ErlangEmptyList, (ErlangAtom "win32")])
erlps__extension__3 [(ErlangCons char_0 rest_1), result_2,
                     ostype_3]
  | (H.isEInt char_0) =
  (erlps__extension__3 [rest_1, result_2, ostype_3])
erlps__extension__3 [(ErlangEmptyList), result_0, _ostype_1] =
  result_0
erlps__extension__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__extension__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__1 :: ErlangFun
erlps__join__1 [(ErlangCons name1_0 (ErlangCons name2_1 rest_2))]
  =
  let head_4 = (erlps__join__2 [name1_0, name2_1])
  in (erlps__join__1 [(ErlangCons head_4 rest_2)])
erlps__join__1 [(ErlangCons name_0 (ErlangEmptyList))]
  | (H.isEList name_0) =
  let arg_4 = (erlps__major_os_type__0 [])
  in
    (erlps__join1__4
       [name_0, ErlangEmptyList, ErlangEmptyList, arg_4])
erlps__join__1 [(ErlangCons name_0 (ErlangEmptyList))]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let    arg_2 = (ErlangBinary (BIN.concat []))
  in let arg_4 = (erlps__major_os_type__0 [])
  in (erlps__join1b__4 [name_0, arg_2, ErlangEmptyList, arg_4])
erlps__join__1 [(ErlangCons name_0 (ErlangEmptyList))]
  | (H.isEAtom name_0) =
  let head_2 = (BIF.erlang__atom_to_list__1 [name_0])
  in (erlps__join__1 [(ErlangCons head_2 ErlangEmptyList)])
erlps__join__1 [arg_5] = (EXC.function_clause unit)
erlps__join__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__2 :: ErlangFun
erlps__join__2 [name1_0, name2_1]
  | ((H.isEList name1_0) && (H.isEList name2_1)) =
  let    ostype_2 = (erlps__major_os_type__0 [])
  in let case_3 = (erlps__pathtype__1 [name2_1])
  in
    case case_3 of
      (ErlangAtom "relative") ->
        (erlps__join1__4 [name1_0, name2_1, ErlangEmptyList, ostype_2])
      _other_9 ->
        (erlps__join1__4
           [name2_1, ErlangEmptyList, ErlangEmptyList, ostype_2])
erlps__join__2 [name1_0, name2_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_binary__1 [name1_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_list__1 [name2_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_3 = (erlps__filename_string_to_binary__1 [name2_1])
  in (erlps__join__2 [name1_0, arg_3])
erlps__join__2 [name1_0, name2_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_list__1 [name1_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [name2_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_2 = (erlps__filename_string_to_binary__1 [name1_0])
  in (erlps__join__2 [arg_2, name2_1])
erlps__join__2 [name1_0, name2_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_14 = (BIF.erlang__is_binary__1 [name1_0])
             in
               case lop_14 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [name2_1])
                 _ -> (EXC.badarg1 lop_14)))) =
  let    ostype_2 = (erlps__major_os_type__0 [])
  in let case_3 = (erlps__pathtype__1 [name2_1])
  in
    case case_3 of
      (ErlangAtom "relative") ->
        (erlps__join1b__4 [name1_0, name2_1, ErlangEmptyList, ostype_2])
      _other_9 ->
        let arg_11 = (ErlangBinary (BIN.concat []))
        in
          (erlps__join1b__4 [name2_1, arg_11, ErlangEmptyList, ostype_2])
erlps__join__2 [name1_0, name2_1] | (H.isEAtom name1_0) =
  let arg_2 = (BIF.erlang__atom_to_list__1 [name1_0])
  in (erlps__join__2 [arg_2, name2_1])
erlps__join__2 [name1_0, name2_1] | (H.isEAtom name2_1) =
  let arg_3 = (BIF.erlang__atom_to_list__1 [name2_1])
  in (erlps__join__2 [name1_0, arg_3])
erlps__join__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__join__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join1__4 :: ErlangFun
erlps__join1__4 [(ErlangCons ucletter_0 (ErlangCons (ErlangInt num_1) rest_2)),
                 relativename_3, (ErlangEmptyList), (ErlangAtom "win32")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , (((H.isEInt ucletter_0) &&
        (weakGeq ucletter_0 (ErlangInt (DBI.fromInt 65)))) &&
       (weakLeq ucletter_0 (ErlangInt (DBI.fromInt 90)))) =
  let   
    lop_10 =
      (BIF.erlang__op_plus [ucletter_0, (ErlangInt (DBI.fromInt 97))])
  in let
    head_9 =
      (BIF.erlang__op_minus [lop_10, (ErlangInt (DBI.fromInt 65))])
  in
    (erlps__join1__4
       [rest_2, relativename_3,
        (ErlangCons (ErlangInt (DBI.fromInt 58))
           (ErlangCons head_9 ErlangEmptyList)),
        (ErlangAtom "win32")])
erlps__join1__4 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) rest_2)),
                 relativename_3, (ErlangEmptyList), (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__join1__4
     [(ErlangCons (ErlangInt (DBI.fromInt 47))
         (ErlangCons (ErlangInt (DBI.fromInt 47)) rest_2)),
      relativename_3, ErlangEmptyList, (ErlangAtom "win32")])
erlps__join1__4 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) rest_2)),
                 relativename_3, (ErlangEmptyList), (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1__4
     [rest_2, relativename_3,
      (ErlangCons (ErlangInt (DBI.fromInt 47))
         (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)),
      (ErlangAtom "win32")])
erlps__join1__4 [(ErlangCons (ErlangInt num_0) rest_1),
                 relativename_2, result_3, (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__join1__4
     [(ErlangCons (ErlangInt (DBI.fromInt 47)) rest_1),
      relativename_2, result_3, (ErlangAtom "win32")])
erlps__join1__4 [(ErlangCons (ErlangInt num_0) rest_1),
                 relativename_2,
                 (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) result_5)),
                 ostype_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1__4
     [rest_1, relativename_2,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_5), ostype_6])
erlps__join1__4 [(ErlangCons (ErlangInt num_0) rest_1),
                 relativename_2, (ErlangCons (ErlangInt num_3) result_4),
                 ostype_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1__4
     [rest_1, relativename_2,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_4), ostype_5])
erlps__join1__4 [(ErlangEmptyList), (ErlangEmptyList), result_0,
                 ostype_1]
  =
  (erlps__maybe_remove_dirsep__2 [result_0, ostype_1])
erlps__join1__4 [(ErlangEmptyList), relativename_0,
                 (ErlangCons (ErlangInt num_1) rest_2), (ErlangAtom "win32")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  (erlps__join1__4
     [relativename_0, ErlangEmptyList,
      (ErlangCons (ErlangInt (DBI.fromInt 58)) rest_2),
      (ErlangAtom "win32")])
erlps__join1__4 [(ErlangEmptyList), relativename_0,
                 (ErlangCons (ErlangInt num_1) result_2), ostype_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1__4
     [relativename_0, ErlangEmptyList,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_2), ostype_3])
erlps__join1__4 [(ErlangEmptyList), relativename_0,
                 (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) result_3)),
                 ostype_4]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1__4
     [relativename_0, ErlangEmptyList,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_3), ostype_4])
erlps__join1__4 [(ErlangEmptyList), relativename_0, result_1,
                 ostype_2]
  =
  (erlps__join1__4
     [relativename_0, ErlangEmptyList,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_1), ostype_2])
erlps__join1__4 [(ErlangCons list_0@(ErlangCons _ _) rest_1),
                 relativename_2, result_3, ostype_4]
  =
  let arg_5 = (BIF.erlang__op_append [list_0, rest_1])
  in (erlps__join1__4 [arg_5, relativename_2, result_3, ostype_4])
erlps__join1__4 [(ErlangCons (ErlangEmptyList) rest_0),
                 relativename_1, result_2, ostype_3]
  =
  (erlps__join1__4 [rest_0, relativename_1, result_2, ostype_3])
erlps__join1__4 [(ErlangCons char_0 rest_1), relativename_2,
                 result_3, ostype_4]
  | (H.isEInt char_0) =
  (erlps__join1__4
     [rest_1, relativename_2, (ErlangCons char_0 result_3), ostype_4])
erlps__join1__4 [(ErlangCons atom_0 rest_1), relativename_2,
                 result_3, ostype_4]
  | (H.isEAtom atom_0) =
  let    lop_6 = (BIF.erlang__atom_to_list__1 [atom_0])
  in let arg_5 = (BIF.erlang__op_append [lop_6, rest_1])
  in (erlps__join1__4 [arg_5, relativename_2, result_3, ostype_4])
erlps__join1__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__join1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join1b__4 :: ErlangFun
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_10,
                  (ErlangEmptyList), (ErlangAtom "win32")]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok ucletter_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8)
  , (((H.isEInt ucletter_3) &&
        (weakGeq ucletter_3 (ErlangInt (DBI.fromInt 65)))) &&
       (weakLeq ucletter_3 (ErlangInt (DBI.fromInt 90)))) =
  let   
    lop_17 =
      (BIF.erlang__op_plus [ucletter_3, (ErlangInt (DBI.fromInt 97))])
  in let
    head_16 =
      (BIF.erlang__op_minus [lop_17, (ErlangInt (DBI.fromInt 65))])
  in
    (erlps__join1b__4
       [rest_9, relativename_10,
        (ErlangCons (ErlangInt (DBI.fromInt 58))
           (ErlangCons head_16 ErlangEmptyList)),
        (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_10,
                  (ErlangEmptyList), (ErlangAtom "win32")]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let
    arg_11 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_9 (BIN.packed_size rest_9) 8)]))
  in
    (erlps__join1b__4
       [arg_11, relativename_10, ErlangEmptyList, (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_10,
                  (ErlangEmptyList), (ErlangAtom "win32")]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  (erlps__join1b__4
     [rest_9, relativename_10,
      (ErlangCons (ErlangInt (DBI.fromInt 47))
         (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)),
      (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_7,
                  result_8, (ErlangAtom "win32")]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.format_bin rest_6 (BIN.packed_size rest_6) 8)]))
  in
    (erlps__join1b__4
       [arg_9, relativename_7, result_8, (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_7,
                  (ErlangCons (ErlangInt num_8) (ErlangCons (ErlangInt num_9) result_10)),
                  ostype_11]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1b__4
     [rest_6, relativename_7,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_10), ostype_11])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_7,
                  (ErlangCons (ErlangInt num_8) result_9), ostype_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__join1b__4
     [rest_6, relativename_7,
      (ErlangCons (ErlangInt (DBI.fromInt 47)) result_9), ostype_10])
erlps__join1b__4 [(ErlangBinary bin_e_0), (ErlangBinary bin_e_1),
                  result_2, ostype_3]
  | (BIN.empty bin_e_0)
  , (BIN.empty bin_e_1) =
  let arg_4 = (erlps__maybe_remove_dirsep__2 [result_2, ostype_3])
  in (BIF.erlang__list_to_binary__1 [arg_4])
erlps__join1b__4 [(ErlangBinary bin_e_0), relativename_1,
                  (ErlangCons (ErlangInt num_2) rest_3), (ErlangAtom "win32")]
  | (BIN.empty bin_e_0)
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 58))) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__join1b__4
       [relativename_1, arg_5,
        (ErlangCons (ErlangInt (DBI.fromInt 58)) rest_3),
        (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_e_0), relativename_1,
                  (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) result_4)),
                  (ErlangAtom "win32")]
  | (BIN.empty bin_e_0)
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  let arg_6 = (ErlangBinary (BIN.concat []))
  in
    (erlps__join1b__4
       [relativename_1, arg_6,
        (ErlangCons (ErlangInt (DBI.fromInt 47))
           (ErlangCons (ErlangInt (DBI.fromInt 47)) result_4)),
        (ErlangAtom "win32")])
erlps__join1b__4 [(ErlangBinary bin_e_0), relativename_1,
                  (ErlangCons (ErlangInt num_2) result_3), ostype_4]
  | (BIN.empty bin_e_0)
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 47))) =
  let arg_6 = (ErlangBinary (BIN.concat []))
  in
    (erlps__join1b__4
       [relativename_1, arg_6,
        (ErlangCons (ErlangInt (DBI.fromInt 47)) result_3), ostype_4])
erlps__join1b__4 [(ErlangBinary bin_e_0), relativename_1,
                  (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) result_4)),
                  ostype_5]
  | (BIN.empty bin_e_0)
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  let arg_7 = (ErlangBinary (BIN.concat []))
  in
    (erlps__join1b__4
       [relativename_1, arg_7,
        (ErlangCons (ErlangInt (DBI.fromInt 47)) result_4), ostype_5])
erlps__join1b__4 [(ErlangBinary bin_e_0), relativename_1,
                  result_2, ostype_3]
  | (BIN.empty bin_e_0) =
  let arg_5 = (ErlangBinary (BIN.concat []))
  in
    (erlps__join1b__4
       [relativename_1, arg_5,
        (ErlangCons (ErlangInt (DBI.fromInt 47)) result_2), ostype_3])
erlps__join1b__4 [(ErlangBinary bin_c_0), relativename_7,
                  result_8, ostype_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok char_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , (H.isEInt char_3) =
  (erlps__join1b__4
     [rest_6, relativename_7, (ErlangCons char_3 result_8), ostype_9])
erlps__join1b__4 [arg_16, arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__join1b__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_remove_dirsep__2 :: ErlangFun
erlps__maybe_remove_dirsep__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons letter_2 (ErlangEmptyList)))),
                               (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  (ErlangCons letter_2
     (ErlangCons (ErlangInt (DBI.fromInt 58))
        (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)))
erlps__maybe_remove_dirsep__2 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                               _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)
erlps__maybe_remove_dirsep__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList))),
                               (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangCons (ErlangInt (DBI.fromInt 47))
     (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList))
erlps__maybe_remove_dirsep__2 [(ErlangCons (ErlangInt num_0) name_1),
                               _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [name_1])
erlps__maybe_remove_dirsep__2 [name_0, _] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [name_0])
erlps__maybe_remove_dirsep__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__maybe_remove_dirsep__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append__2 :: ErlangFun
erlps__append__2 [dir_0, name_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_binary__1 [dir_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [name_1])
                 _ -> (EXC.badarg1 lop_5)))) =
  (ErlangBinary
     (BIN.concat
        [(BIN.format_bin dir_0 (BIN.packed_size dir_0) 8),
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
         (BIN.format_bin name_1 (BIN.packed_size name_1) 8)]))
erlps__append__2 [dir_0, name_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [dir_0])))) =
  let arg_3 = (erlps__filename_string_to_binary__1 [name_1])
  in (erlps__append__2 [dir_0, arg_3])
erlps__append__2 [dir_0, name_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_1])))) =
  let arg_2 = (erlps__filename_string_to_binary__1 [dir_0])
  in (erlps__append__2 [arg_2, name_1])
erlps__append__2 [dir_0, name_1] =
  (BIF.erlang__op_append
     [dir_0, (ErlangCons (ErlangInt (DBI.fromInt 47)) name_1)])
erlps__append__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__append__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pathtype__1 :: ErlangFun
erlps__pathtype__1 [atom_0] | (H.isEAtom atom_0) =
  let arg_1 = (BIF.erlang__atom_to_list__1 [atom_0])
  in (erlps__pathtype__1 [arg_1])
erlps__pathtype__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let    lop_4 = (BIF.erlang__is_list__1 [name_0])
             in let rop_6 = (BIF.erlang__is_binary__1 [name_0])
             in (BIF.erlang__op_or [lop_4, rop_6])))) =
  let case_1 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (erlps__win32_pathtype__1 [name_0])
      (ErlangTuple [_, _]) -> (erlps__unix_pathtype__1 [name_0])
      something_else -> (EXC.case_clause something_else)
erlps__pathtype__1 [arg_8] = (EXC.function_clause unit)
erlps__pathtype__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unix_pathtype__1 :: ErlangFun
erlps__unix_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__unix_pathtype__1 [(ErlangCons (ErlangInt num_0) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__unix_pathtype__1 [(ErlangCons list_0 rest_1)]
  | (H.isEList list_0) =
  let arg_2 = (BIF.erlang__op_append [list_0, rest_1])
  in (erlps__unix_pathtype__1 [arg_2])
erlps__unix_pathtype__1 [(ErlangCons atom_0 rest_1)]
  | (H.isEAtom atom_0) =
  let    lop_3 = (BIF.erlang__atom_to_list__1 [atom_0])
  in let arg_2 = (BIF.erlang__op_append [lop_3, rest_1])
  in (erlps__unix_pathtype__1 [arg_2])
erlps__unix_pathtype__1 [_] = (ErlangAtom "relative")
erlps__unix_pathtype__1 [arg_0] = (EXC.function_clause unit)
erlps__unix_pathtype__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__win32_pathtype__1 :: ErlangFun
erlps__win32_pathtype__1 [(ErlangCons list_0 rest_1)]
  | (H.isEList list_0) =
  let arg_2 = (BIF.erlang__op_append [list_0, rest_1])
  in (erlps__win32_pathtype__1 [arg_2])
erlps__win32_pathtype__1 [(ErlangCons atom_0 rest_1)]
  | (H.isEAtom atom_0) =
  let    lop_3 = (BIF.erlang__atom_to_list__1 [atom_0])
  in let arg_2 = (BIF.erlang__op_append [lop_3, rest_1])
  in (erlps__win32_pathtype__1 [arg_2])
erlps__win32_pathtype__1 [(ErlangCons char_0 (ErlangCons list_1 rest_2))]
  | (H.isEList list_1) =
  let tail_5 = (BIF.erlang__op_append [list_1, rest_2])
  in (erlps__win32_pathtype__1 [(ErlangCons char_0 tail_5)])
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _letter_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _letter_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _letter_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [(ErlangCons (ErlangInt num_0) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [(ErlangCons c1_0 (ErlangCons c2_1 (ErlangCons list_2 rest_3)))]
  | (H.isEList list_2) =
  let tail_8 = (BIF.erlang__op_append [list_2, rest_3])
  in
    (erlps__pathtype__1 [(ErlangCons c1_0 (ErlangCons c2_1 tail_8))])
erlps__win32_pathtype__1 [(ErlangCons _letter_0 (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) _)))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 47))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons _letter_0 (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) _)))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangAtom "absolute")
erlps__win32_pathtype__1 [(ErlangCons _letter_0 (ErlangCons (ErlangInt num_1) _))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  (ErlangAtom "volumerelative")
erlps__win32_pathtype__1 [_] = (ErlangAtom "relative")
erlps__win32_pathtype__1 [arg_0] = (EXC.function_clause unit)
erlps__win32_pathtype__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rootname__1 :: ErlangFun
erlps__rootname__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let    arg_2 = (BIF.erlang__binary_to_list__1 [name_0])
  in let arg_1 = (erlps__rootname__1 [arg_2])
  in (BIF.erlang__list_to_binary__1 [arg_1])
erlps__rootname__1 [name0_0] =
  let    name_2 = (erlps__flatten__1 [name0_0])
  in let arg_6 = (erlps__major_os_type__0 [])
  in
    (erlps__rootname__4
       [name_2, ErlangEmptyList, ErlangEmptyList, arg_6])
erlps__rootname__1 [arg_7] = (EXC.function_clause unit)
erlps__rootname__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rootname__4 :: ErlangFun
erlps__rootname__4 [(ErlangCons (ErlangInt num_0) rest_1),
                    root_2, ext_3, ostype_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let    rop_10 = (BIF.erlang__op_append [ext_3, root_2])
  in let
    arg_6 =
      (BIF.erlang__op_append
         [(ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList),
          rop_10])
  in
    (erlps__rootname__4 [rest_1, arg_6, ErlangEmptyList, ostype_4])
erlps__rootname__4 [(ErlangCons (ErlangInt num_0) rest_1),
                    root_2, ext_3, (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  let    rop_9 = (BIF.erlang__op_append [ext_3, root_2])
  in let
    arg_5 =
      (BIF.erlang__op_append
         [(ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList),
          rop_9])
  in
    (erlps__rootname__4
       [rest_1, arg_5, ErlangEmptyList, (ErlangAtom "win32")])
erlps__rootname__4 [(ErlangCons (ErlangInt num_0) rest_1),
                    root_2, (ErlangEmptyList), ostype_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  let arg_6 = (H.make_string ".")
  in (erlps__rootname__4 [rest_1, root_2, arg_6, ostype_3])
erlps__rootname__4 [(ErlangCons (ErlangInt num_0) rest_1),
                    root_2, ext_3, ostype_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  let    arg_6 = (BIF.erlang__op_append [ext_3, root_2])
  in let arg_9 = (H.make_string ".")
  in (erlps__rootname__4 [rest_1, arg_6, arg_9, ostype_4])
erlps__rootname__4 [(ErlangCons char_0 rest_1), root_2,
                    (ErlangEmptyList), ostype_3]
  | (H.isEInt char_0) =
  (erlps__rootname__4
     [rest_1, (ErlangCons char_0 root_2), ErlangEmptyList, ostype_3])
erlps__rootname__4 [(ErlangCons char_0 rest_1), root_2, ext_3,
                    ostype_4]
  | (H.isEInt char_0) =
  (erlps__rootname__4
     [rest_1, root_2, (ErlangCons char_0 ext_3), ostype_4])
erlps__rootname__4 [(ErlangEmptyList), root_0, _ext_1, _ostype_2]
  =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [root_0])
erlps__rootname__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__rootname__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rootname__2 :: ErlangFun
erlps__rootname__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_7 = (BIF.erlang__is_binary__1 [name_0])
             in
               case lop_7 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_binary__1 [ext_1])
                 _ -> (EXC.badarg1 lop_7)))) =
  let    arg_3 = (BIF.erlang__binary_to_list__1 [name_0])
  in let arg_5 = (BIF.erlang__binary_to_list__1 [ext_1])
  in let arg_2 = (erlps__rootname__2 [arg_3, arg_5])
  in (BIF.erlang__list_to_binary__1 [arg_2])
erlps__rootname__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let arg_3 = (erlps__filename_string_to_binary__1 [ext_1])
  in (erlps__rootname__2 [name_0, arg_3])
erlps__rootname__2 [name_0, ext_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [ext_1])))) =
  let arg_2 = (erlps__filename_string_to_binary__1 [name_0])
  in (erlps__rootname__2 [arg_2, ext_1])
erlps__rootname__2 [name0_0, ext0_1] =
  let    name_3 = (erlps__flatten__1 [name0_0])
  in let ext_5 = (erlps__flatten__1 [ext0_1])
  in (erlps__rootname2__3 [name_3, ext_5, ErlangEmptyList])
erlps__rootname__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__rootname__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rootname2__3 :: ErlangFun
erlps__rootname2__3 [ext_0, ext_1, result_2] | (ext_1 == ext_0) =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [result_2])
erlps__rootname2__3 [(ErlangEmptyList), _ext_0, result_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [result_1])
erlps__rootname2__3 [(ErlangCons char_0 rest_1), ext_2, result_3]
  | (H.isEInt char_0) =
  (erlps__rootname2__3
     [rest_1, ext_2, (ErlangCons char_0 result_3)])
erlps__rootname2__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__rootname2__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__1 :: ErlangFun
erlps__split__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let case_1 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (erlps__win32_splitb__1 [name_0])
      _ -> (erlps__unix_splitb__1 [name_0])
erlps__split__1 [name0_0] =
  let    name_2 = (erlps__flatten__1 [name0_0])
  in let case_3 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (erlps__win32_split__1 [name_2])
      _ -> (erlps__unix_split__1 [name_2])
erlps__split__1 [arg_6] = (EXC.function_clause unit)
erlps__split__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unix_splitb__1 :: ErlangFun
erlps__unix_splitb__1 [name_0] =
  let   
    head_3 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_9 =
      (BIF.binary__split__3
         [name_0, (ErlangCons head_3 ErlangEmptyList),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    ll_16 =
      case l_9 of
        (ErlangCons (ErlangBinary bin_e_11) rest_12) | (BIN.empty
                                                          bin_e_11)
                                                     , ((/=) rest_12
                                                          ErlangEmptyList) ->
          let
            head_13 =
              (ErlangBinary
                 (BIN.from_int (ErlangInt (DBI.fromInt 47))
                    (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
          in (ErlangCons head_13 rest_12)
        _ -> l_9
  in
    (H.flmap
       (\ lc_19 ->
          let    rop_22 = (ErlangBinary (BIN.concat []))
          in let cond_20 = (BIF.erlang__op_exactNeq [lc_19, rop_22])
          in
            case cond_20 of
              (ErlangAtom "true") -> (ErlangCons lc_19 ErlangEmptyList)
              _ -> ErlangEmptyList)
       ll_16)
erlps__unix_splitb__1 [arg_24] = (EXC.function_clause unit)
erlps__unix_splitb__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fix_driveletter__1 :: ErlangFun
erlps__fix_driveletter__1 [letter0_0] =
  case (ErlangAtom "true") of
    _ | ((weakGeq letter0_0 (ErlangInt (DBI.fromInt 65))) &&
           (weakLeq letter0_0 (ErlangInt (DBI.fromInt 90)))) ->
      let
        lop_1 =
          (BIF.erlang__op_plus [letter0_0, (ErlangInt (DBI.fromInt 97))])
      in (BIF.erlang__op_minus [lop_1, (ErlangInt (DBI.fromInt 65))])
    _ -> letter0_0
erlps__fix_driveletter__1 [arg_5] = (EXC.function_clause unit)
erlps__fix_driveletter__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__win32_splitb__1 :: ErlangFun
erlps__win32_splitb__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok letter0_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok slash_9 bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_10) <- ((BIN.size bin_8))
  , (BIN.Ok rest_12 bin_11) <- ((BIN.chop_bin bin_8 size_10 8))
  , (BIN.empty bin_11)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_40 =
                 (BIF.erlang__op_exactEq
                    [slash_9, (ErlangInt (DBI.fromInt 92))])
             in let
               lop_39 =
                 case lop_40 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     (BIF.erlang__op_exactEq
                        [slash_9, (ErlangInt (DBI.fromInt 47))])
                   _ -> (EXC.badarg1 lop_40)
             in
               case lop_39 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_46 =
                       (BIF.erlang__op_greaterEq
                          [letter0_3, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_45 =
                       case lop_46 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [letter0_3, (ErlangInt (DBI.fromInt 90))])
                         _ -> (EXC.badarg1 lop_46)
                   in
                     case lop_45 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_51 =
                             (BIF.erlang__op_greaterEq
                                [letter0_3, (ErlangInt (DBI.fromInt 97))])
                         in
                           case lop_51 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [letter0_3, (ErlangInt (DBI.fromInt 122))])
                             _ -> (EXC.badarg1 lop_51)
                       _ -> (EXC.badarg1 lop_45)
                 _ -> (EXC.badarg1 lop_39)))) =
  let    letter_14 = (erlps__fix_driveletter__1 [letter0_3])
  in let
    head_17 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_20 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_26 =
      (BIF.binary__split__3
         [rest_12,
          (ErlangCons head_17 (ErlangCons head_20 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    head_27 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int letter_14 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 58))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tail_31 =
      (H.flmap
         (\ lc_34 ->
            let    rop_37 = (ErlangBinary (BIN.concat []))
            in let cond_35 = (BIF.erlang__op_exactNeq [lc_34, rop_37])
            in
              case cond_35 of
                (ErlangAtom "true") -> (ErlangCons lc_34 ErlangEmptyList)
                _ -> ErlangEmptyList)
         l_26)
  in (ErlangCons head_27 tail_31)
erlps__win32_splitb__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok letter0_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let   
               lop_36 =
                 (BIF.erlang__op_greaterEq
                    [letter0_3, (ErlangInt (DBI.fromInt 65))])
             in let
               lop_35 =
                 case lop_36 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [letter0_3, (ErlangInt (DBI.fromInt 90))])
                   _ -> (EXC.badarg1 lop_36)
             in
               case lop_35 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let
                     lop_41 =
                       (BIF.erlang__op_greaterEq
                          [letter0_3, (ErlangInt (DBI.fromInt 97))])
                   in
                     case lop_41 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [letter0_3, (ErlangInt (DBI.fromInt 122))])
                       _ -> (EXC.badarg1 lop_41)
                 _ -> (EXC.badarg1 lop_35)))) =
  let    letter_11 = (erlps__fix_driveletter__1 [letter0_3])
  in let
    head_14 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_17 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_23 =
      (BIF.binary__split__3
         [rest_9,
          (ErlangCons head_14 (ErlangCons head_17 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    head_24 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int letter_11 (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 58))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tail_27 =
      (H.flmap
         (\ lc_30 ->
            let    rop_33 = (ErlangBinary (BIN.concat []))
            in let cond_31 = (BIF.erlang__op_exactNeq [lc_30, rop_33])
            in
              case cond_31 of
                (ErlangAtom "true") -> (ErlangCons lc_30 ErlangEmptyList)
                _ -> ErlangEmptyList)
         l_23)
  in (ErlangCons head_24 tail_27)
erlps__win32_splitb__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok slash_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok slash_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok rest_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8)
  , (slash_6 == slash_3)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_33 =
                 (BIF.erlang__op_exactEq
                    [slash_3, (ErlangInt (DBI.fromInt 92))])
             in
               case lop_33 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq
                      [slash_3, (ErlangInt (DBI.fromInt 47))])
                 _ -> (EXC.badarg1 lop_33)))) =
  let   
    head_12 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_15 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_21 =
      (BIF.binary__split__3
         [rest_9,
          (ErlangCons head_12 (ErlangCons head_15 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    head_22 =
      (ErlangBinary
         (BIN.concat
            [(BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
             (BIN.from_int (ErlangInt (DBI.fromInt 47))
                (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
  in let
    tail_25 =
      (H.flmap
         (\ lc_28 ->
            let    rop_31 = (ErlangBinary (BIN.concat []))
            in let cond_29 = (BIF.erlang__op_exactNeq [lc_28, rop_31])
            in
              case cond_29 of
                (ErlangAtom "true") -> (ErlangCons lc_28 ErlangEmptyList)
                _ -> ErlangEmptyList)
         l_21)
  in (ErlangCons head_22 tail_25)
erlps__win32_splitb__1 [(ErlangBinary bin_c_0)]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok slash_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_29 =
                 (BIF.erlang__op_exactEq
                    [slash_3, (ErlangInt (DBI.fromInt 92))])
             in
               case lop_29 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq
                      [slash_3, (ErlangInt (DBI.fromInt 47))])
                 _ -> (EXC.badarg1 lop_29)))) =
  let   
    head_9 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_12 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_18 =
      (BIF.binary__split__3
         [rest_6,
          (ErlangCons head_9 (ErlangCons head_12 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in let
    head_19 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    tail_21 =
      (H.flmap
         (\ lc_24 ->
            let    rop_27 = (ErlangBinary (BIN.concat []))
            in let cond_25 = (BIF.erlang__op_exactNeq [lc_24, rop_27])
            in
              case cond_25 of
                (ErlangAtom "true") -> (ErlangCons lc_24 ErlangEmptyList)
                _ -> ErlangEmptyList)
         l_18)
  in (ErlangCons head_19 tail_21)
erlps__win32_splitb__1 [name_0] =
  let   
    head_3 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    head_6 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    l_12 =
      (BIF.binary__split__3
         [name_0, (ErlangCons head_3 (ErlangCons head_6 ErlangEmptyList)),
          (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
  in
    (H.flmap
       (\ lc_15 ->
          let    rop_18 = (ErlangBinary (BIN.concat []))
          in let cond_16 = (BIF.erlang__op_exactNeq [lc_15, rop_18])
          in
            case cond_16 of
              (ErlangAtom "true") -> (ErlangCons lc_15 ErlangEmptyList)
              _ -> ErlangEmptyList)
       l_12)
erlps__win32_splitb__1 [arg_20] = (EXC.function_clause unit)
erlps__win32_splitb__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unix_split__1 :: ErlangFun
erlps__unix_split__1 [name_0] =
  (erlps__split__3 [name_0, ErlangEmptyList, (ErlangAtom "unix")])
erlps__unix_split__1 [arg_4] = (EXC.function_clause unit)
erlps__unix_split__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__win32_split__1 :: ErlangFun
erlps__win32_split__1 [(ErlangCons slash_0 (ErlangCons slash_1 rest_2))]
  | (slash_1 == slash_0)
  , ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_12 =
                 (BIF.erlang__op_exactEq
                    [slash_0, (ErlangInt (DBI.fromInt 92))])
             in
               case lop_12 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq
                      [slash_0, (ErlangInt (DBI.fromInt 47))])
                 _ -> (EXC.badarg1 lop_12)))) =
  (erlps__split__3
     [rest_2,
      (ErlangCons
         (ErlangCons (ErlangInt (DBI.fromInt 47))
            (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList))
         ErlangEmptyList),
      (ErlangAtom "win32")])
erlps__win32_split__1 [(ErlangCons (ErlangInt num_0) rest_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__win32_split__1
     [(ErlangCons (ErlangInt (DBI.fromInt 47)) rest_1)])
erlps__win32_split__1 [(ErlangCons x_0 (ErlangCons (ErlangInt num_1) rest_2))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 92)))
  , (H.isEInt x_0) =
  (erlps__win32_split__1
     [(ErlangCons x_0
         (ErlangCons (ErlangInt (DBI.fromInt 47)) rest_2))])
erlps__win32_split__1 [(ErlangCons x_0 (ErlangCons y_1 (ErlangCons (ErlangInt num_2) rest_3)))]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 92)))
  , ((H.isEInt x_0) && (H.isEInt y_1)) =
  (erlps__win32_split__1
     [(ErlangCons x_0
         (ErlangCons y_1
            (ErlangCons (ErlangInt (DBI.fromInt 47)) rest_3)))])
erlps__win32_split__1 [(ErlangCons ucletter_0 (ErlangCons (ErlangInt num_1) rest_2))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((weakGeq ucletter_0 (ErlangInt (DBI.fromInt 65))) &&
       (weakLeq ucletter_0 (ErlangInt (DBI.fromInt 90)))) =
  let   
    lop_5 =
      (BIF.erlang__op_plus [ucletter_0, (ErlangInt (DBI.fromInt 97))])
  in let
    head_4 =
      (BIF.erlang__op_minus [lop_5, (ErlangInt (DBI.fromInt 65))])
  in
    (erlps__win32_split__1
       [(ErlangCons head_4
           (ErlangCons (ErlangInt (DBI.fromInt 58)) rest_2))])
erlps__win32_split__1 [(ErlangCons letter_0 (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) rest_3)))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__split__4
     [rest_3, ErlangEmptyList,
      (ErlangCons
         (ErlangCons letter_0
            (ErlangCons (ErlangInt (DBI.fromInt 58))
               (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)))
         ErlangEmptyList),
      (ErlangAtom "win32")])
erlps__win32_split__1 [(ErlangCons letter_0 (ErlangCons (ErlangInt num_1) rest_2))]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  (erlps__split__4
     [rest_2, ErlangEmptyList,
      (ErlangCons
         (ErlangCons letter_0
            (ErlangCons (ErlangInt (DBI.fromInt 58)) ErlangEmptyList))
         ErlangEmptyList),
      (ErlangAtom "win32")])
erlps__win32_split__1 [name_0] =
  (erlps__split__3 [name_0, ErlangEmptyList, (ErlangAtom "win32")])
erlps__win32_split__1 [arg_4] = (EXC.function_clause unit)
erlps__win32_split__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__3 :: ErlangFun
erlps__split__3 [(ErlangCons (ErlangInt num_0) rest_1),
                 components_2, ostype_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__split__4
     [rest_1, ErlangEmptyList,
      (ErlangCons
         (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)
         components_2),
      ostype_3])
erlps__split__3 [(ErlangCons (ErlangInt num_0) rest_1),
                 components_2, (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__split__4
     [rest_1, ErlangEmptyList,
      (ErlangCons
         (ErlangCons (ErlangInt (DBI.fromInt 47)) ErlangEmptyList)
         components_2),
      (ErlangAtom "win32")])
erlps__split__3 [relativename_0, components_1, ostype_2] =
  (erlps__split__4
     [relativename_0, ErlangEmptyList, components_1, ostype_2])
erlps__split__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__split__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__4 :: ErlangFun
erlps__split__4 [(ErlangCons (ErlangInt num_0) rest_1), comp_2,
                 components_3, (ErlangAtom "win32")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (erlps__split__4
     [(ErlangCons (ErlangInt (DBI.fromInt 47)) rest_1), comp_2,
      components_3, (ErlangAtom "win32")])
erlps__split__4 [(ErlangCons (ErlangInt num_0) rest_1),
                 (ErlangEmptyList), components_2, ostype_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  (erlps__split__4
     [rest_1, ErlangEmptyList, components_2, ostype_3])
erlps__split__4 [(ErlangCons (ErlangInt num_0) rest_1), comp_2,
                 components_3, ostype_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let
    head_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [comp_2])
  in
    (erlps__split__4
       [rest_1, ErlangEmptyList, (ErlangCons head_8 components_3),
        ostype_4])
erlps__split__4 [(ErlangCons char_0 rest_1), comp_2,
                 components_3, ostype_4]
  | (H.isEInt char_0) =
  (erlps__split__4
     [rest_1, (ErlangCons char_0 comp_2), components_3, ostype_4])
erlps__split__4 [(ErlangEmptyList), (ErlangEmptyList),
                 components_0, _ostype_1]
  =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
     [components_0])
erlps__split__4 [(ErlangEmptyList), comp_0, components_1,
                 ostype_2]
  =
  let
    head_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [comp_0])
  in
    (erlps__split__4
       [ErlangEmptyList, ErlangEmptyList,
        (ErlangCons head_6 components_1), ostype_2])
erlps__split__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__split__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nativename__1 :: ErlangFun
erlps__nativename__1 [name0_0] =
  let   
    name_4 = (erlps__join__1 [(ErlangCons name0_0 ErlangEmptyList)])
  in let case_5 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (erlps__win32_nativename__1 [name_4])
      _ -> name_4
erlps__nativename__1 [arg_7] = (EXC.function_clause unit)
erlps__nativename__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__win32_nativename__1 :: ErlangFun
erlps__win32_nativename__1 [name_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [name_0])))) =
  let   
    arg_2 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 47))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in let
    arg_4 =
      (ErlangBinary
         (BIN.from_int (ErlangInt (DBI.fromInt 92))
            (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
  in
    (BIF.do_remote_fun_call "Binary" "erlps__replace__4"
       [name_0, arg_2, arg_4,
        (ErlangCons (ErlangAtom "global") ErlangEmptyList)])
erlps__win32_nativename__1 [(ErlangCons (ErlangInt num_0) rest_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let tail_3 = (erlps__win32_nativename__1 [rest_1])
  in (ErlangCons (ErlangInt (DBI.fromInt 92)) tail_3)
erlps__win32_nativename__1 [(ErlangCons c_0 rest_1)] =
  let tail_3 = (erlps__win32_nativename__1 [rest_1])
  in (ErlangCons c_0 tail_3)
erlps__win32_nativename__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__win32_nativename__1 [arg_0] = (EXC.function_clause unit)
erlps__win32_nativename__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__separators__0 :: ErlangFun
erlps__separators__0 [] =
  let case_0 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_0 of
      (ErlangTuple [(ErlangAtom "win32"), _]) ->
        (ErlangTuple
           [(ErlangInt (DBI.fromInt 92)), (ErlangInt (DBI.fromInt 58))])
      _ -> (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "false")])
erlps__separators__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__safe_relative_path__1 :: ErlangFun
erlps__safe_relative_path__1 [path_0] =
  let case_1 = (erlps__pathtype__1 [path_0])
  in
    case case_1 of
      (ErlangAtom "relative") ->
        let cs0_4 = (erlps__split__1 [path_0])
        in (erlps__safe_relative_path_1__2 [cs0_4, ErlangEmptyList])
      _ -> (ErlangAtom "unsafe")
erlps__safe_relative_path__1 [arg_7] = (EXC.function_clause unit)
erlps__safe_relative_path__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__safe_relative_path_1__2 :: ErlangFun
erlps__safe_relative_path_1__2 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangEmptyList)) t_1),
                                acc_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__safe_relative_path_1__2 [t_1, acc_2])
erlps__safe_relative_path_1__2 [(ErlangCons (ErlangBinary bin_c_0) t_4),
                                acc_5]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , (BIN.empty bin_2) =
  (erlps__safe_relative_path_1__2 [t_4, acc_5])
erlps__safe_relative_path_1__2 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList))) t_2),
                                acc_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__climb__2 [t_2, acc_3])
erlps__safe_relative_path_1__2 [(ErlangCons (ErlangBinary bin_c_0) t_7),
                                acc_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 46)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 46)))
  , (BIN.empty bin_5) =
  (erlps__climb__2 [t_7, acc_8])
erlps__safe_relative_path_1__2 [(ErlangCons h_0 t_1), acc_2] =
  (erlps__safe_relative_path_1__2 [t_1, (ErlangCons h_0 acc_2)])
erlps__safe_relative_path_1__2 [(ErlangEmptyList),
                                (ErlangEmptyList)]
  =
  ErlangEmptyList
erlps__safe_relative_path_1__2 [(ErlangEmptyList), acc_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0])
  in (erlps__join__1 [arg_1])
erlps__safe_relative_path_1__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__safe_relative_path_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__climb__2 :: ErlangFun
erlps__climb__2 [_, (ErlangEmptyList)] = (ErlangAtom "unsafe")
erlps__climb__2 [t_0, (ErlangCons _ acc_1)] =
  (erlps__safe_relative_path_1__2 [t_0, acc_1])
erlps__climb__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__climb__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_src__1 :: ErlangFun
erlps__find_src__1 [mod_0] =
  (erlps__find_src__2 [mod_0, ErlangEmptyList])
erlps__find_src__1 [arg_3] = (EXC.function_clause unit)
erlps__find_src__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_src__2 :: ErlangFun
erlps__find_src__2 [mod_0, rules_1] | (H.isEAtom mod_0) =
  let arg_2 = (BIF.erlang__atom_to_list__1 [mod_0])
  in (erlps__find_src__2 [arg_2, rules_1])
erlps__find_src__2 [modorfile_0, rules_1]
  | (H.isEList modorfile_0) =
  let    extension_2 = (H.make_string ".erl")
  in let arg_3 = (erlps__basename__2 [modorfile_0, extension_2])
  in let mod_6 = (BIF.erlang__list_to_atom__1 [arg_3])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Code" "erlps__which__1" [mod_6])
  in
    case case_7 of
      possibly_rel_path_9 | (H.isEList possibly_rel_path_9) ->
        let
          match_expr_11 =
            (BIF.do_remote_fun_call "File" "erlps__get_cwd__0" [])
        in
          case match_expr_11 of
            (ErlangTuple [(ErlangAtom "ok"), cwd_10]) ->
              let
                objpath_14 =
                  (erlps__make_abs_path__2 [cwd_10, possibly_rel_path_9])
              in
                (erlps__find_src_1__5
                   [modorfile_0, objpath_14, mod_6, extension_2, rules_1])
            _ -> (EXC.badmatch match_expr_11)
      ecode_20 | (H.isEAtom ecode_20) ->
        let tup_el_22 = (ErlangTuple [ecode_20, mod_6])
        in (ErlangTuple [(ErlangAtom "error"), tup_el_22])
      something_else -> (EXC.case_clause something_else)
erlps__find_src__2 [arg_25, arg_26] = (EXC.function_clause unit)
erlps__find_src__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_src_1__5 :: ErlangFun
erlps__find_src_1__5 [modorfile_0, objpath_1, mod_2, extension_3,
                      rules_4]
  =
  let   
    modorfileroot_7 = (erlps__rootname__2 [modorfile_0, extension_3])
  in let
    arg_9 = (BIF.erlang__op_append [modorfileroot_7, extension_3])
  in let
    case_8 =
      (BIF.do_remote_fun_call "Filelib" "erlps__is_regular__1" [arg_9])
  in
    case case_8 of
      (ErlangAtom "true") ->
        (erlps__find_src_2__2 [modorfileroot_7, mod_2])
      (ErlangAtom "false") ->
        let   
          arg_16 =
            (BIF.do_remote_fun_call "Code" "erlps__objfile_extension__0" [])
        in let lop_14 = (erlps__basename__2 [objpath_1, arg_16])
        in let srcname_18 = (BIF.erlang__op_append [lop_14, extension_3])
        in let arg_21 = (erlps__dirname__1 [objpath_1])
        in let
          case_19 =
            (BIF.do_remote_fun_call "Filelib" "erlps__find_file__3"
               [srcname_18, arg_21, rules_4])
        in
          case case_19 of
            (ErlangTuple [(ErlangAtom "ok"), srcfile_24]) ->
              let arg_25 = (erlps__rootname__2 [srcfile_24, extension_3])
              in (erlps__find_src_2__2 [arg_25, mod_2])
            error_29 -> error_29
      something_else -> (EXC.case_clause something_else)
erlps__find_src_1__5 [arg_30, arg_31, arg_32, arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__find_src_1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_src_2__2 :: ErlangFun
erlps__find_src_2__2 [srcroot_0, mod_1] =
  let   
    case_2 =
      (BIF.erlang__apply__3
         [mod_1, (ErlangAtom "module_info"),
          (ErlangCons (ErlangAtom "compile") ErlangEmptyList)])
  in let
    list_9 =
      case case_2 of
        (ErlangAtom "none") -> ErlangEmptyList
        list0_8 -> list0_8
  in let
    options_13 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "options"), list_9, ErlangEmptyList])
  in let
    match_expr_15 =
      (BIF.do_remote_fun_call "File" "erlps__get_cwd__0" [])
  in
    case match_expr_15 of
      (ErlangTuple [(ErlangAtom "ok"), cwd_14]) ->
        let    abspath_18 = (erlps__make_abs_path__2 [cwd_14, srcroot_0])
        in let arg_21 = (erlps__dirname__1 [abspath_18])
        in let
          tup_el_20 =
            (erlps__filter_options__3 [arg_21, options_13, ErlangEmptyList])
        in (ErlangTuple [abspath_18, tup_el_20])
      _ -> (EXC.badmatch match_expr_15)
erlps__find_src_2__2 [arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__find_src_2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_options__3 :: ErlangFun
erlps__filter_options__3 [base_0,
                          (ErlangCons (ErlangTuple [(ErlangAtom "outdir"),
                                                    path_1]) rest_2),
                          result_3]
  =
  let    tup_el_9 = (erlps__make_abs_path__2 [base_0, path_1])
  in let head_7 = (ErlangTuple [(ErlangAtom "outdir"), tup_el_9])
  in
    (erlps__filter_options__3
       [base_0, rest_2, (ErlangCons head_7 result_3)])
erlps__filter_options__3 [base_0,
                          (ErlangCons (ErlangTuple [(ErlangAtom "i"),
                                                    path_1]) rest_2),
                          result_3]
  =
  let    tup_el_9 = (erlps__make_abs_path__2 [base_0, path_1])
  in let head_7 = (ErlangTuple [(ErlangAtom "i"), tup_el_9])
  in
    (erlps__filter_options__3
       [base_0, rest_2, (ErlangCons head_7 result_3)])
erlps__filter_options__3 [base_0, (ErlangCons option_1 rest_2),
                          result_3]
  | ((==) option_1 (ErlangAtom "export_all")) =
  (erlps__filter_options__3
     [base_0, rest_2, (ErlangCons option_1 result_3)])
erlps__filter_options__3 [base_0, (ErlangCons option_1 rest_2),
                          result_3]
  | ((==) option_1 (ErlangAtom "binary")) =
  (erlps__filter_options__3
     [base_0, rest_2, (ErlangCons option_1 result_3)])
erlps__filter_options__3 [base_0, (ErlangCons tuple_1 rest_2),
                          result_3]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_9 =
                 (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), tuple_1])
             in (BIF.erlang__op_exactEq [lop_9, (ErlangAtom "d")])))) =
  (erlps__filter_options__3
     [base_0, rest_2, (ErlangCons tuple_1 result_3)])
erlps__filter_options__3 [base_0, (ErlangCons tuple_1 rest_2),
                          result_3]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let
               lop_9 =
                 (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), tuple_1])
             in
               (BIF.erlang__op_exactEq
                  [lop_9, (ErlangAtom "parse_transform")])))) =
  (erlps__filter_options__3
     [base_0, rest_2, (ErlangCons tuple_1 result_3)])
erlps__filter_options__3 [base_0, (ErlangCons _ rest_1),
                          result_2]
  =
  (erlps__filter_options__3 [base_0, rest_1, result_2])
erlps__filter_options__3 [_base_0, (ErlangEmptyList), result_1] =
  result_1
erlps__filter_options__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__filter_options__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__make_abs_path__2 :: ErlangFun
erlps__make_abs_path__2 [basepath_0, path_1] =
  (erlps__join__2 [basepath_0, path_1])
erlps__make_abs_path__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__make_abs_path__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__major_os_type__0 :: ErlangFun
erlps__major_os_type__0 [] =
  let
    match_expr_1 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case match_expr_1 of
      (ErlangTuple [ost_0, _]) -> ost_0
      _ -> (EXC.badmatch match_expr_1)
erlps__major_os_type__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatten__1 :: ErlangFun
erlps__flatten__1 [bin_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [bin_0])))) =
  bin_0
erlps__flatten__1 [list_0] =
  (erlps__do_flatten__2 [list_0, ErlangEmptyList])
erlps__flatten__1 [arg_3] = (EXC.function_clause unit)
erlps__flatten__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_flatten__2 :: ErlangFun
erlps__do_flatten__2 [(ErlangCons h_0 t_1), tail_2]
  | (H.isEList h_0) =
  let arg_4 = (erlps__do_flatten__2 [t_1, tail_2])
  in (erlps__do_flatten__2 [h_0, arg_4])
erlps__do_flatten__2 [(ErlangCons h_0 t_1), tail_2]
  | (H.isEAtom h_0) =
  let    lop_3 = (BIF.erlang__atom_to_list__1 [h_0])
  in let rop_5 = (erlps__do_flatten__2 [t_1, tail_2])
  in (BIF.erlang__op_append [lop_3, rop_5])
erlps__do_flatten__2 [(ErlangCons h_0 t_1), tail_2] =
  let tail_4 = (erlps__do_flatten__2 [t_1, tail_2])
  in (ErlangCons h_0 tail_4)
erlps__do_flatten__2 [(ErlangEmptyList), tail_0] = tail_0
erlps__do_flatten__2 [atom_0, tail_1] | (H.isEAtom atom_0) =
  let    lop_2 = (BIF.erlang__atom_to_list__1 [atom_0])
  in let rop_4 = (erlps__flatten__1 [tail_1])
  in (BIF.erlang__op_append [lop_2, rop_4])
erlps__do_flatten__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__do_flatten__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filename_string_to_binary__1 :: ErlangFun
erlps__filename_string_to_binary__1 [list_0] =
  let    arg_2 = (erlps__flatten__1 [list_0])
  in let
    arg_5 =
      (BIF.do_remote_fun_call "File" "erlps__native_name_encoding__0"
         [])
  in let
    case_1 =
      (BIF.do_remote_fun_call "Erlang.Unicode"
         "erlps__characters_to_binary__3"
         [arg_2, (ErlangAtom "unicode"), arg_5])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "error"), _, _]) ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      bin_7 | ((ErlangAtom "true") ==
                 (H.falsifyErrors
                    (\ _ -> (BIF.erlang__is_binary__1 [bin_7])))) ->
        bin_7
      something_else -> (EXC.case_clause something_else)
erlps__filename_string_to_binary__1 [arg_9] =
  (EXC.function_clause unit)
erlps__filename_string_to_binary__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir__2 :: ErlangFun
erlps__basedir__2 [type_0, application_1]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_atom__1 [type_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_7 = (BIF.erlang__is_list__1 [application_1])
                   in
                     case lop_7 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         (BIF.erlang__is_binary__1 [application_1])
                       _ -> (EXC.badarg1 lop_7)
                 _ -> (EXC.badarg1 lop_5)))) =
  let arg_4 = (ErlangMap Map.empty)
  in (erlps__basedir__3 [type_0, application_1, arg_4])
erlps__basedir__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__basedir__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir__3 :: ErlangFun
erlps__basedir__3 [type_0, application_1, opts_2]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let    lop_57 = (BIF.erlang__is_atom__1 [type_0])
             in let
               lop_56 =
                 case lop_57 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") -> (BIF.erlang__is_map__1 [opts_2])
                   _ -> (EXC.badarg1 lop_57)
             in
               case lop_56 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_60 = (BIF.erlang__is_list__1 [application_1])
                   in
                     case lop_60 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         (BIF.erlang__is_binary__1 [application_1])
                       _ -> (EXC.badarg1 lop_60)
                 _ -> (EXC.badarg1 lop_56)))) =
  let    os_4 = (erlps__basedir_os_from_opts__1 [opts_2])
  in let
    name_8 =
      (erlps__basedir_name_from_opts__3 [os_4, application_1, opts_2])
  in let base_11 = (erlps__basedir_from_os__2 [type_0, os_4])
  in let case_12 = (ErlangTuple [type_0, os_4])
  in
    case case_12 of
      (ErlangTuple [(ErlangAtom "user_log"), (ErlangAtom "linux")]) ->
        let head_20 = (H.make_string "log")
        in
          (erlps__join__1
             [(ErlangCons base_11
                 (ErlangCons name_8 (ErlangCons head_20 ErlangEmptyList)))])
      (ErlangTuple [(ErlangAtom "user_log"),
                    (ErlangAtom "windows")]) ->
        let head_27 = (H.make_string "Logs")
        in
          (erlps__join__1
             [(ErlangCons base_11
                 (ErlangCons name_8 (ErlangCons head_27 ErlangEmptyList)))])
      (ErlangTuple [(ErlangAtom "user_cache"),
                    (ErlangAtom "windows")]) ->
        let head_34 = (H.make_string "Cache")
        in
          (erlps__join__1
             [(ErlangCons base_11
                 (ErlangCons name_8 (ErlangCons head_34 ErlangEmptyList)))])
      (ErlangTuple [type_36, _]) | (type_36 == type_0)
                                 , ((ErlangAtom "true") ==
                                      (H.falsifyErrors
                                         (\ _ ->
                                            let
                                              lop_37 =
                                                (BIF.erlang__op_exactEq
                                                   [type_0,
                                                    (ErlangAtom "site_config")])
                                            in
                                              case lop_37 of
                                                (ErlangAtom "true") ->
                                                  (ErlangAtom "true")
                                                (ErlangAtom "false") ->
                                                  (BIF.erlang__op_exactEq
                                                     [type_0,
                                                      (ErlangAtom "site_data")])
                                                _ -> (EXC.badarg1 lop_37)))) ->
        (H.flmap
           (\ lc_44 ->
              let
                lc_ret_45 =
                  (erlps__join__1
                     [(ErlangCons lc_44 (ErlangCons name_8 ErlangEmptyList))])
              in (ErlangCons lc_ret_45 ErlangEmptyList))
           base_11)
      _ ->
        (erlps__join__1
           [(ErlangCons base_11 (ErlangCons name_8 ErlangEmptyList))])
erlps__basedir__3 [arg_63, arg_64, arg_65] =
  (EXC.function_clause unit)
erlps__basedir__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_os_from_opts__1 :: ErlangFun
erlps__basedir_os_from_opts__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangAtom "linux")) <-
      ((Map.lookup (ErlangAtom "os") map_0)) =
  (ErlangAtom "linux")
erlps__basedir_os_from_opts__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangAtom "windows")) <-
      ((Map.lookup (ErlangAtom "os") map_0)) =
  (ErlangAtom "windows")
erlps__basedir_os_from_opts__1 [(ErlangMap map_0)]
  | (DM.Just (ErlangAtom "darwin")) <-
      ((Map.lookup (ErlangAtom "os") map_0)) =
  (ErlangAtom "darwin")
erlps__basedir_os_from_opts__1 [(ErlangMap map_0)] =
  (erlps__basedir_os_type__0 [])
erlps__basedir_os_from_opts__1 [arg_1] =
  (EXC.function_clause unit)
erlps__basedir_os_from_opts__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_name_from_opts__3 :: ErlangFun
erlps__basedir_name_from_opts__3 [(ErlangAtom "windows"), app_0,
                                  (ErlangMap map_1)]
  | (DM.Just vsn_3) <- ((Map.lookup (ErlangAtom "version") map_1))
  , (DM.Just author_2) <-
      ((Map.lookup (ErlangAtom "author") map_1)) =
  (erlps__join__1
     [(ErlangCons author_2
         (ErlangCons app_0 (ErlangCons vsn_3 ErlangEmptyList)))])
erlps__basedir_name_from_opts__3 [(ErlangAtom "windows"), app_0,
                                  (ErlangMap map_1)]
  | (DM.Just author_2) <-
      ((Map.lookup (ErlangAtom "author") map_1)) =
  (erlps__join__1
     [(ErlangCons author_2 (ErlangCons app_0 ErlangEmptyList))])
erlps__basedir_name_from_opts__3 [_, app_0, (ErlangMap map_1)]
  | (DM.Just vsn_2) <-
      ((Map.lookup (ErlangAtom "version") map_1)) =
  (erlps__join__1
     [(ErlangCons app_0 (ErlangCons vsn_2 ErlangEmptyList))])
erlps__basedir_name_from_opts__3 [_, app_0, _] = app_0
erlps__basedir_name_from_opts__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__basedir_name_from_opts__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_from_os__2 :: ErlangFun
erlps__basedir_from_os__2 [type_0, os_1] =
  case os_1 of
    (ErlangAtom "linux") -> (erlps__basedir_linux__1 [type_0])
    (ErlangAtom "darwin") -> (erlps__basedir_darwin__1 [type_0])
    (ErlangAtom "windows") -> (erlps__basedir_windows__1 [type_0])
    something_else -> (EXC.case_clause something_else)
erlps__basedir_from_os__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__basedir_from_os__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_linux__1 :: ErlangFun
erlps__basedir_linux__1 [type_0] =
  case type_0 of
    (ErlangAtom "user_data") ->
      let    arg_2 = (H.make_string "XDG_DATA_HOME")
      in let arg_3 = (H.make_string ".local/share")
      in (erlps__getenv__3 [arg_2, arg_3, (ErlangAtom "true")])
    (ErlangAtom "user_config") ->
      let    arg_5 = (H.make_string "XDG_CONFIG_HOME")
      in let arg_6 = (H.make_string ".config")
      in (erlps__getenv__3 [arg_5, arg_6, (ErlangAtom "true")])
    (ErlangAtom "user_cache") ->
      let    arg_8 = (H.make_string "XDG_CACHE_HOME")
      in let arg_9 = (H.make_string ".cache")
      in (erlps__getenv__3 [arg_8, arg_9, (ErlangAtom "true")])
    (ErlangAtom "user_log") ->
      let    arg_11 = (H.make_string "XDG_CACHE_HOME")
      in let arg_12 = (H.make_string ".cache")
      in (erlps__getenv__3 [arg_11, arg_12, (ErlangAtom "true")])
    (ErlangAtom "site_data") ->
      let    arg_14 = (H.make_string "XDG_DATA_DIRS")
      in let arg_15 = (H.make_string "/usr/local/share/:/usr/share/")
      in let
        base_17 =
          (erlps__getenv__3 [arg_14, arg_15, (ErlangAtom "false")])
      in let arg_19 = (H.make_string ":")
      in
        (BIF.do_remote_fun_call "String" "erlps__lexemes__2"
           [base_17, arg_19])
    (ErlangAtom "site_config") ->
      let    arg_20 = (H.make_string "XDG_CONFIG_DIRS")
      in let arg_21 = (H.make_string "/etc/xdg")
      in let
        base_23 =
          (erlps__getenv__3 [arg_20, arg_21, (ErlangAtom "false")])
      in let arg_25 = (H.make_string ":")
      in
        (BIF.do_remote_fun_call "String" "erlps__lexemes__2"
           [base_23, arg_25])
    something_else -> (EXC.case_clause something_else)
erlps__basedir_linux__1 [arg_26] = (EXC.function_clause unit)
erlps__basedir_linux__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_darwin__1 :: ErlangFun
erlps__basedir_darwin__1 [type_0] =
  case type_0 of
    (ErlangAtom "user_data") ->
      let arg_2 = (H.make_string "Library/Application Support")
      in (erlps__basedir_join_home__1 [arg_2])
    (ErlangAtom "user_config") ->
      let arg_3 = (H.make_string "Library/Application Support")
      in (erlps__basedir_join_home__1 [arg_3])
    (ErlangAtom "user_cache") ->
      let arg_4 = (H.make_string "Library/Caches")
      in (erlps__basedir_join_home__1 [arg_4])
    (ErlangAtom "user_log") ->
      let arg_5 = (H.make_string "Library/Logs")
      in (erlps__basedir_join_home__1 [arg_5])
    (ErlangAtom "site_data") ->
      let head_6 = (H.make_string "/Library/Application Support")
      in (ErlangCons head_6 ErlangEmptyList)
    (ErlangAtom "site_config") ->
      let head_8 = (H.make_string "/Library/Application Support")
      in (ErlangCons head_8 ErlangEmptyList)
    something_else -> (EXC.case_clause something_else)
erlps__basedir_darwin__1 [arg_10] = (EXC.function_clause unit)
erlps__basedir_darwin__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_windows__1 :: ErlangFun
erlps__basedir_windows__1 [type_0] =
  let case_1 = (erlps__basedir_windows_appdata__0 [])
  in
    case case_1 of
      (ErlangAtom "noappdata") ->
        case type_0 of
          (ErlangAtom "user_data") ->
            let arg_3 = (H.make_string "Local")
            in (erlps__basedir_join_home__1 [arg_3])
          (ErlangAtom "user_config") ->
            let arg_4 = (H.make_string "Roaming")
            in (erlps__basedir_join_home__1 [arg_4])
          (ErlangAtom "user_cache") ->
            let arg_5 = (H.make_string "Local")
            in (erlps__basedir_join_home__1 [arg_5])
          (ErlangAtom "user_log") ->
            let arg_6 = (H.make_string "Local")
            in (erlps__basedir_join_home__1 [arg_6])
          (ErlangAtom "site_data") -> ErlangEmptyList
          (ErlangAtom "site_config") -> ErlangEmptyList
          something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "ok"), appdata_7]) ->
        case type_0 of
          (ErlangAtom "user_data") ->
            let arg_9 = (H.make_string "LOCALAPPDATA")
            in (erlps__getenv__2 [arg_9, appdata_7])
          (ErlangAtom "user_config") -> appdata_7
          (ErlangAtom "user_cache") ->
            let arg_11 = (H.make_string "LOCALAPPDATA")
            in (erlps__getenv__2 [arg_11, appdata_7])
          (ErlangAtom "user_log") ->
            let arg_13 = (H.make_string "LOCALAPPDATA")
            in (erlps__getenv__2 [arg_13, appdata_7])
          (ErlangAtom "site_data") -> ErlangEmptyList
          (ErlangAtom "site_config") -> ErlangEmptyList
          something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__basedir_windows__1 [arg_15] = (EXC.function_clause unit)
erlps__basedir_windows__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_windows_appdata__0 :: ErlangFun
erlps__basedir_windows_appdata__0 [] =
  let    arg_1 = (H.make_string "APPDATA")
  in let
    case_0 = (BIF.do_remote_fun_call "Os" "erlps__getenv__1" [arg_1])
  in
    case case_0 of
      invalid_2 | ((ErlangAtom "true") ==
                     (H.falsifyErrors
                        (\ _ ->
                           let
                             lop_3 =
                               (BIF.erlang__op_exactEq
                                  [invalid_2, (ErlangAtom "false")])
                           in
                             case lop_3 of
                               (ErlangAtom "true") -> (ErlangAtom "true")
                               (ErlangAtom "false") ->
                                 (BIF.erlang__op_exactEq
                                    [invalid_2, ErlangEmptyList])
                               _ -> (EXC.badarg1 lop_3)))) ->
        (ErlangAtom "noappdata")
      val_8 -> (ErlangTuple [(ErlangAtom "ok"), val_8])
erlps__basedir_windows_appdata__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__getenv__3 :: ErlangFun
erlps__getenv__3 [k_0, def_1, (ErlangAtom "false")] =
  (erlps__getenv__2 [k_0, def_1])
erlps__getenv__3 [k_0, def_1, (ErlangAtom "true")] =
  let arg_3 = (erlps__basedir_join_home__1 [def_1])
  in (erlps__getenv__2 [k_0, arg_3])
erlps__getenv__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__getenv__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__getenv__2 :: ErlangFun
erlps__getenv__2 [k_0, def_1] =
  let
    case_2 = (BIF.do_remote_fun_call "Os" "erlps__getenv__1" [k_0])
  in
    case case_2 of
      (ErlangEmptyList) -> def_1
      (ErlangAtom "false") -> def_1
      val_4 -> val_4
erlps__getenv__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__getenv__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_join_home__1 :: ErlangFun
erlps__basedir_join_home__1 [dir_0] =
  let    arg_2 = (H.make_string "HOME")
  in let
    case_1 = (BIF.do_remote_fun_call "Os" "erlps__getenv__1" [arg_2])
  in
    case case_1 of
      (ErlangAtom "false") ->
        let
          match_expr_5 =
            (BIF.do_remote_fun_call "Init" "erlps__get_argument__1"
               [(ErlangAtom "home")])
        in
          case match_expr_5 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangCons (ErlangCons home_4 (ErlangEmptyList)) (ErlangEmptyList))]) ->
              (erlps__join__2 [home_4, dir_0])
            _ -> (EXC.badmatch match_expr_5)
      home_8 -> (erlps__join__2 [home_8, dir_0])
erlps__basedir_join_home__1 [arg_11] = (EXC.function_clause unit)
erlps__basedir_join_home__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__basedir_os_type__0 :: ErlangFun
erlps__basedir_os_type__0 [] =
  let case_0 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in
    case case_0 of
      (ErlangTuple [(ErlangAtom "unix"), (ErlangAtom "darwin")]) ->
        (ErlangAtom "darwin")
      (ErlangTuple [(ErlangAtom "win32"), _]) -> (ErlangAtom "windows")
      _ -> (ErlangAtom "linux")
erlps__basedir_os_type__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate__1 :: ErlangFun
erlps__validate__1 [filename_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ -> (BIF.erlang__is_binary__1 [filename_0])))) =
  (erlps__validate_bin__1 [filename_0])
erlps__validate__1 [filename_0]
  | ((ErlangAtom "true") ==
       (H.falsifyErrors
          (\ _ ->
             let lop_4 = (BIF.erlang__is_list__1 [filename_0])
             in
               case lop_4 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_atom__1 [filename_0])
                 _ -> (EXC.badarg1 lop_4)))) =
  let   
    arg_2 =
      (BIF.do_remote_fun_call "File" "erlps__native_name_encoding__0"
         [])
  in let arg_3 = ErlangTuple [ErlangAtom "unix", ErlangAtom "linux"]
  in (erlps__validate_list__3 [filename_0, arg_2, arg_3])
erlps__validate__1 [arg_7] = (EXC.function_clause unit)
erlps__validate__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_list__3 :: ErlangFun
erlps__validate_list__3 [filename_0, enc_1, os_2] =
  (EXC.tryCatch
     (\ _ ->
        let   
          lop_4 =
            (erlps__validate_list__4
               [filename_0, enc_1, os_2, (ErlangInt (DBI.fromInt 0))])
        in let
          match_final_3_10 =
            (BIF.erlang__op_greater [lop_4, (ErlangInt (DBI.fromInt 0))])
        in
          case match_final_3_10 of
            (ErlangAtom "true") -> match_final_3_10
            _ -> (EXC.badmatch match_final_3_10))
     (\ ex_13 ->
        case ex_13 of
          (ErlangTuple [_, _, _]) -> (ErlangAtom "false")
          ex_14 -> (EXC.raise ex_14)))
erlps__validate_list__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__validate_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_list__4 :: ErlangFun
erlps__validate_list__4 [(ErlangEmptyList), _enc_0, _os_1,
                         chars_2]
  =
  chars_2
erlps__validate_list__4 [c_0, enc_1, os_2, chars_3]
  | (H.isEInt c_0) =
  let _ = (erlps__validate_char__3 [c_0, enc_1, os_2])
  in (BIF.erlang__op_plus [chars_3, (ErlangInt (DBI.fromInt 1))])
erlps__validate_list__4 [a_0, enc_1, os_2, chars_3]
  | (H.isEAtom a_0) =
  let arg_4 = (BIF.erlang__atom_to_list__1 [a_0])
  in (erlps__validate_list__4 [arg_4, enc_1, os_2, chars_3])
erlps__validate_list__4 [(ErlangCons h_0 t_1), enc_2, os_3,
                         chars_4]
  =
  let
    newchars_9 =
      (erlps__validate_list__4 [h_0, enc_2, os_3, chars_4])
  in (erlps__validate_list__4 [t_1, enc_2, os_3, newchars_9])
erlps__validate_list__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__validate_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_char__3 :: ErlangFun
erlps__validate_char__3 [c_0, _, _]
  | (weakLt c_0 (ErlangInt (DBI.fromInt 1))) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_char__3 [c_0, (ErlangAtom "latin1"), _]
  | (weakGt c_0 (ErlangInt (DBI.fromInt 255))) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_char__3 [c_0, (ErlangAtom "utf8"), _]
  | (weakGeq c_0 (ErlangInt (DBI.fromInt 1114112))) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_char__3 [c_0, (ErlangAtom "utf8"),
                         (ErlangTuple [(ErlangAtom "win32"), _])]
  | (weakGt c_0 (ErlangInt (DBI.fromInt 65535))) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_char__3 [_c_0, (ErlangAtom "utf8"),
                         (ErlangTuple [(ErlangAtom "win32"), _])]
  =
  (ErlangAtom "ok")
erlps__validate_char__3 [c_0, (ErlangAtom "utf8"), _]
  | ((weakLeq (ErlangInt (DBI.fromInt 55296)) c_0) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57343)))) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_char__3 [_, _, _] = (ErlangAtom "ok")
erlps__validate_char__3 [arg_0, arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__validate_char__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_bin__1 :: ErlangFun
erlps__validate_bin__1 [bin_0] =
  (EXC.tryCatch
     (\ _ ->
        let   
          lop_2 =
            (erlps__validate_bin__2 [bin_0, (ErlangInt (DBI.fromInt 0))])
        in let
          match_final_1_6 =
            (BIF.erlang__op_greater [lop_2, (ErlangInt (DBI.fromInt 0))])
        in
          case match_final_1_6 of
            (ErlangAtom "true") -> match_final_1_6
            _ -> (EXC.badmatch match_final_1_6))
     (\ ex_9 ->
        case ex_9 of
          (ErlangTuple [_, _, _]) -> (ErlangAtom "false")
          ex_10 -> (EXC.raise ex_10)))
erlps__validate_bin__1 [arg_11] = (EXC.function_clause unit)
erlps__validate_bin__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__validate_bin__2 :: ErlangFun
erlps__validate_bin__2 [(ErlangBinary bin_e_0), bs_1]
  | (BIN.empty bin_e_0) =
  bs_1
erlps__validate_bin__2 [(ErlangBinary bin_c_0), _bs_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 0)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok _rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (BIF.erlang__throw__1 [(ErlangAtom "invalid")])
erlps__validate_bin__2 [(ErlangBinary bin_c_0), bs_7]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _b_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok rest_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_9 = (BIF.erlang__op_plus [bs_7, (ErlangInt (DBI.fromInt 1))])
  in (erlps__validate_bin__2 [rest_6, arg_9])
erlps__validate_bin__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__validate_bin__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)