module Erl.Scan(erlps__string__1, erlps__string__2,
                erlps__string__3, erlps__tokens__3, erlps__tokens__4,
                erlps__format_error__1, erlps__reserved_word__1,
                erlps__column__1, erlps__end_location__1, erlps__line__1,
                erlps__location__1, erlps__text__1, erlps__category__1,
                erlps__symbol__1, erlps__continuation_location__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__format_error__1 :: ErlangFun
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "string"),
                                      quote_0, head_1])]
  =
  let    lop_4 = (make_string "unterminated ")
  in let lop_6 = (erlps__string_thing__1 [quote_0])
  in let lop_9 = (make_string " starting with ")
  in let
    rop_10 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
         [head_1, quote_0])
  in let rop_8 = (BIF.erlang__op_append [lop_9, rop_10])
  in let rop_5 = (BIF.erlang__op_append [lop_6, rop_8])
  in let head_3 = (BIF.erlang__op_append [lop_4, rop_5])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
       [(ErlangCons head_3 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "illegal"),
                                      type_0])]
  =
  let    arg_2 = (make_string "illegal ~w")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__fwrite__2"
         [arg_2, (ErlangCons type_0 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_1])
erlps__format_error__1 [(ErlangAtom "char")] =
  (make_string "unterminated character")
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "base"),
                                      base_0])]
  =
  let    arg_2 = (make_string "illegal base \'~w\'")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__fwrite__2"
         [arg_2, (ErlangCons base_0 ErlangEmptyList)])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_1])
erlps__format_error__1 [other_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [other_0])
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_1])
erlps__format_error__1 [arg_3] = (EXC.function_clause unit)
erlps__format_error__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__1 :: ErlangFun
erlps__string__1 [string_0] =
  (erlps__string__3
     [string_0, (ErlangInt (DBI.fromInt 1)), ErlangEmptyList])
erlps__string__1 [arg_4] = (EXC.function_clause unit)
erlps__string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__2 :: ErlangFun
erlps__string__2 [string_0, startlocation_1] =
  (erlps__string__3 [string_0, startlocation_1, ErlangEmptyList])
erlps__string__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__3 :: ErlangFun
erlps__string__3 [string_0, line_1, options_2]
  | ((isEList string_0) && (isEInt line_1)) =
  let arg_4 = (erlps__options__1 [options_2])
  in
    (erlps__string1__5
       [string_0, arg_4, line_1, (ErlangAtom "no_col"),
        ErlangEmptyList])
erlps__string__3 [string_0, (ErlangTuple [line_1, column_2]),
                  options_3]
  | ((((isEList string_0) && (isEInt line_1)) &&
        (isEInt column_2)) &&
       (weakGeq column_2 (ErlangInt (DBI.fromInt 1)))) =
  let arg_5 = (erlps__options__1 [options_3])
  in
    (erlps__string1__5
       [string_0, arg_5, line_1, column_2, ErlangEmptyList])
erlps__string__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__string__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens__3 :: ErlangFun
erlps__tokens__3 [cont_0, charspec_1, startlocation_2] =
  (erlps__tokens__4
     [cont_0, charspec_1, startlocation_2, ErlangEmptyList])
erlps__tokens__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__tokens__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens__4 :: ErlangFun
erlps__tokens__4 [(ErlangEmptyList), charspec_0, line_1,
                  options_2]
  | (isEInt line_1) =
  let    arg_4 = (erlps__options__1 [options_2])
  in let arg_9 = (ErlangFun 6 erlps__scan__6)
  in
    (erlps__tokens1__7
       [charspec_0, arg_4, line_1, (ErlangAtom "no_col"),
        ErlangEmptyList, arg_9, ErlangEmptyList])
erlps__tokens__4 [(ErlangEmptyList), charspec_0,
                  (ErlangTuple [line_1, column_2]), options_3]
  | (((isEInt line_1) && (isEInt column_2)) &&
       (weakGeq column_2 (ErlangInt (DBI.fromInt 1)))) =
  let    arg_5 = (erlps__options__1 [options_3])
  in let arg_10 = (ErlangFun 6 erlps__scan__6)
  in
    (erlps__tokens1__7
       [charspec_0, arg_5, line_1, column_2, ErlangEmptyList, arg_10,
        ErlangEmptyList])
erlps__tokens__4 [(ErlangTuple [(ErlangAtom "erl_scan_continuation"),
                                cs_0, col_1, toks_2, line_3, st_4, any_5,
                                fun_6]),
                  charspec_7, _loc_8, _opts_9]
  =
  let arg_10 = (BIF.erlang__op_append [cs_0, charspec_7])
  in
    (erlps__tokens1__7
       [arg_10, st_4, line_3, col_1, toks_2, fun_6, any_5])
erlps__tokens__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__tokens__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__continuation_location__1 :: ErlangFun
erlps__continuation_location__1 [(ErlangTuple [(ErlangAtom "erl_scan_continuation"),
                                               _, (ErlangAtom "no_col"), _,
                                               line_0, _, _, _])]
  =
  line_0
erlps__continuation_location__1 [(ErlangTuple [(ErlangAtom "erl_scan_continuation"),
                                               _, col_0, _, line_1, _, _, _])]
  =
  (ErlangTuple [line_1, col_0])
erlps__continuation_location__1 [arg_4] =
  (EXC.function_clause unit)
erlps__continuation_location__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__column__1 :: ErlangFun
erlps__column__1 [token_0] =
  let
    arg_1 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), token_0])
  in (BIF.do_remote_fun_call "Erl.Anno" "erlps__column__1" [arg_1])
erlps__column__1 [arg_4] = (EXC.function_clause unit)
erlps__column__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__end_location__1 :: ErlangFun
erlps__end_location__1 [token_0] =
  let
    arg_1 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), token_0])
  in
    (BIF.do_remote_fun_call "Erl.Anno" "erlps__end_location__1"
       [arg_1])
erlps__end_location__1 [arg_4] = (EXC.function_clause unit)
erlps__end_location__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line__1 :: ErlangFun
erlps__line__1 [token_0] =
  let
    arg_1 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), token_0])
  in (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [arg_1])
erlps__line__1 [arg_4] = (EXC.function_clause unit)
erlps__line__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__location__1 :: ErlangFun
erlps__location__1 [token_0] =
  let
    arg_1 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), token_0])
  in
    (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [arg_1])
erlps__location__1 [arg_4] = (EXC.function_clause unit)
erlps__location__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__text__1 :: ErlangFun
erlps__text__1 [token_0] =
  let
    arg_1 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), token_0])
  in (BIF.do_remote_fun_call "Erl.Anno" "erlps__text__1" [arg_1])
erlps__text__1 [arg_4] = (EXC.function_clause unit)
erlps__text__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__category__1 :: ErlangFun
erlps__category__1 [(ErlangTuple [category_0, _anno_1])] =
  category_0
erlps__category__1 [(ErlangTuple [category_0, _anno_1,
                                  _symbol_2])]
  =
  category_0
erlps__category__1 [t_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons t_0 ErlangEmptyList)])
erlps__category__1 [arg_5] = (EXC.function_clause unit)
erlps__category__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__symbol__1 :: ErlangFun
erlps__symbol__1 [(ErlangTuple [category_0, _anno_1])] =
  category_0
erlps__symbol__1 [(ErlangTuple [_category_0, _anno_1, symbol_2])]
  =
  symbol_2
erlps__symbol__1 [t_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons t_0 ErlangEmptyList)])
erlps__symbol__1 [arg_5] = (EXC.function_clause unit)
erlps__symbol__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_thing__1 :: ErlangFun
erlps__string_thing__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 39))) =
  (make_string "atom")
erlps__string_thing__1 [_] = (make_string "string")
erlps__string_thing__1 [arg_0] = (EXC.function_clause unit)
erlps__string_thing__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__options__1 :: ErlangFun
erlps__options__1 [opts0_0] | (isEList opts0_0) =
  let    arg_1 = (ErlangFun 2 erlps__expand_opt__2)
  in let
    opts_4 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
         [arg_1, ErlangEmptyList, opts0_0])
  in let
    case_5 =
      (erlps__opts__3
         [opts_4,
          (ErlangCons (ErlangAtom "reserved_word_fun") ErlangEmptyList),
          ErlangEmptyList])
  in let
    match_expr_17 =
      case case_5 of
        (ErlangAtom "badarg") ->
          (BIF.erlang__error__2
             [(ErlangAtom "badarg"), (ErlangCons opts0_0 ErlangEmptyList)])
        r_15 -> r_15
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_17 of
      (ErlangCons rw_fun_16 (ErlangEmptyList)) ->
        let   
          comment_20 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_bool__2"
               [(ErlangAtom "return_comments"), opts_4])
        in let
          ws_23 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_bool__2"
               [(ErlangAtom "return_white_spaces"), opts_4])
        in let
          txt_26 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_bool__2"
               [(ErlangAtom "text"), opts_4])
        in
          (ErlangTuple
             [(ErlangAtom "erl_scan"), rw_fun_16, ws_23, comment_20, txt_26])
      _ -> (EXC.badmatch match_expr_17)
erlps__options__1 [opt_0] =
  (erlps__options__1 [(ErlangCons opt_0 ErlangEmptyList)])
erlps__options__1 [arg_4] = (EXC.function_clause unit)
erlps__options__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__opts__3 :: ErlangFun
erlps__opts__3 [options_0, (ErlangCons key_1 keys_2), l_3] =
  let   
    case_4 =
      (BIF.lists__keyfind__3
         [key_1, (ErlangInt (DBI.fromInt 1)), options_0])
  in let
    v_15 =
      case case_4 of
        (ErlangTuple [(ErlangAtom "reserved_word_fun"), f_8]) | (isEFunA
                                                                   f_8
                                                                   (ErlangInt
                                                                      (DBI.fromInt
                                                                         1))) ->
          (ErlangTuple [(ErlangAtom "ok"), f_8])
        (ErlangTuple [key_11, _]) | (key_11 == key_1) ->
          (ErlangAtom "badarg")
        (ErlangAtom "false") ->
          let tup_el_13 = (erlps__default_option__1 [key_1])
          in (ErlangTuple [(ErlangAtom "ok"), tup_el_13])
        something_else -> (EXC.case_clause something_else)
  in
    case v_15 of
      (ErlangAtom "badarg") -> (ErlangAtom "badarg")
      (ErlangTuple [(ErlangAtom "ok"), value_17]) ->
        (erlps__opts__3 [options_0, keys_2, (ErlangCons value_17 l_3)])
      something_else -> (EXC.case_clause something_else)
erlps__opts__3 [_options_0, (ErlangEmptyList), l_1] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_1])
erlps__opts__3 [arg_3, arg_4, arg_5] = (EXC.function_clause unit)
erlps__opts__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__default_option__1 :: ErlangFun
erlps__default_option__1 [(ErlangAtom "reserved_word_fun")] =
  (ErlangFun 1 erlps__reserved_word__1)
erlps__default_option__1 [arg_0] = (EXC.function_clause unit)
erlps__default_option__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_opt__2 :: ErlangFun
erlps__expand_opt__2 [(ErlangAtom "return"), os_0] =
  (ErlangCons (ErlangAtom "return_comments")
     (ErlangCons (ErlangAtom "return_white_spaces") os_0))
erlps__expand_opt__2 [o_0, os_1] = (ErlangCons o_0 os_1)
erlps__expand_opt__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__expand_opt__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tokens1__7 :: ErlangFun
erlps__tokens1__7 [cs_0, st_1, line_2, col_3, toks_4, fun_5,
                   any_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_67 = (BIF.erlang__is_list__1 [cs_0])
             in
               case lop_67 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [cs_0, (ErlangAtom "eof")])
                 _ -> (EXC.badarg1 lop_67)))) =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_5,
          (ErlangCons cs_0
             (ErlangCons st_1
                (ErlangCons line_2
                   (ErlangCons col_3
                      (ErlangCons toks_4
                         (ErlangCons any_6 ErlangEmptyList))))))])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "more"),
                    (ErlangTuple [cs0_15, ncol_16, ntoks_17, nline_18, nany_19,
                                  nfun_20])]) ->
        let
          tup_el_22 =
            (ErlangTuple
               [(ErlangAtom "erl_scan_continuation"), cs0_15, ncol_16, ntoks_17,
                nline_18, st_1, nany_19, nfun_20])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_22])
      (ErlangTuple [(ErlangAtom "ok"), toks0_31, (ErlangAtom "eof"),
                    nline_32, ncol_33]) ->
        let
          res_45 =
            case toks0_31 of
              (ErlangEmptyList) ->
                let tup_el_36 = (erlps__location__2 [nline_32, ncol_33])
                in (ErlangTuple [(ErlangAtom "eof"), tup_el_36])
              _ ->
                let   
                  tup_el_40 =
                    (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                       [toks0_31])
                in let tup_el_42 = (erlps__location__2 [nline_32, ncol_33])
                in (ErlangTuple [(ErlangAtom "ok"), tup_el_40, tup_el_42])
              something_else -> (EXC.case_clause something_else)
        in
          (ErlangTuple [(ErlangAtom "done"), res_45, (ErlangAtom "eof")])
      (ErlangTuple [(ErlangAtom "ok"), toks0_49, rest_50, nline_51,
                    ncol_52]) ->
        let   
          tup_el_56 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [toks0_49])
        in let tup_el_58 = (erlps__location__2 [nline_51, ncol_52])
        in let
          tup_el_54 =
            (ErlangTuple [(ErlangAtom "ok"), tup_el_56, tup_el_58])
        in (ErlangTuple [(ErlangAtom "done"), tup_el_54, rest_50])
      (ErlangTuple [error_62@(ErlangTuple [(ErlangAtom "error"), _,
                                           _]),
                    rest_63]) ->
        (ErlangTuple [(ErlangAtom "done"), error_62, rest_63])
      something_else -> (EXC.case_clause something_else)
erlps__tokens1__7 [arg_71, arg_72, arg_73, arg_74, arg_75,
                   arg_76, arg_77]
  =
  (EXC.function_clause unit)
erlps__tokens1__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string1__5 :: ErlangFun
erlps__string1__5 [cs_0, st_1, line_2, col_3, toks_4] =
  let
    case_5 = (erlps__scan1__5 [cs_0, st_1, line_2, col_3, toks_4])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "more"),
                    (ErlangTuple [cs0_11, ncol_12, ntoks_13, nline_14, any_15,
                                  fun_16])]) ->
        let   
          arg_18 = (BIF.erlang__op_append [cs0_11, (ErlangAtom "eof")])
        in let
          case_17 =
            (BIF.erlang__apply__2
               [fun_16,
                (ErlangCons arg_18
                   (ErlangCons st_1
                      (ErlangCons nline_14
                         (ErlangCons ncol_12
                            (ErlangCons ntoks_13
                               (ErlangCons any_15 ErlangEmptyList))))))])
        in
          case case_17 of
            (ErlangTuple [(ErlangAtom "ok"), toks1_27, _rest_28, line2_29,
                          col2_30]) ->
              let   
                tup_el_32 =
                  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
                     [toks1_27])
              in let tup_el_34 = (erlps__location__2 [line2_29, col2_30])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_32, tup_el_34])
            (ErlangTuple [error_37@(ErlangTuple [(ErlangAtom "error"), _,
                                                 _]),
                          _rest_38]) ->
              error_37
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "ok"), ntoks_39,
                    rest_40@(ErlangCons _ _), nline_41, ncol_42]) ->
        (erlps__string1__5 [rest_40, st_1, nline_41, ncol_42, ntoks_39])
      (ErlangTuple [(ErlangAtom "ok"), ntoks_48, _, nline_49,
                    ncol_50]) ->
        let   
          tup_el_52 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ntoks_48])
        in let tup_el_54 = (erlps__location__2 [nline_49, ncol_50])
        in (ErlangTuple [(ErlangAtom "ok"), tup_el_52, tup_el_54])
      (ErlangTuple [error_57@(ErlangTuple [(ErlangAtom "error"), _,
                                           _]),
                    _rest_58]) ->
        error_57
      something_else -> (EXC.case_clause something_else)
erlps__string1__5 [arg_59, arg_60, arg_61, arg_62, arg_63] =
  (EXC.function_clause unit)
erlps__string1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan__6 :: ErlangFun
erlps__scan__6 [cs_0, st_1, line_2, col_3, toks_4, _] =
  (erlps__scan1__5 [cs_0, st_1, line_2, col_3, toks_4])
erlps__scan__6 [arg_10, arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__scan__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan1__5 :: ErlangFun
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             case st_2 of
               (ErlangTuple arr_14) | (DM.Just field_13) <-
                                        ((arr_14 DA.!! 2)) ->
                 field_13
               _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) =
  (erlps__scan_spcs__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (erlps__skip_white_space__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             case st_2 of
               (ErlangTuple arr_13) | (DM.Just field_12) <-
                                        ((arr_13 DA.!! 2)) ->
                 field_12
               _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) =
  (erlps__scan_newline__5 [cs_1, st_2, line_3, col_4, toks_5])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    arg_8 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_11 =
      (erlps__new_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__skip_white_space__6
       [cs_1, st_2, arg_8, arg_11, toks_5, (ErlangInt (DBI.fromInt 0))])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 65))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 90)))) =
  (erlps__scan_variable__6
     [cs_1, st_2, line_3, col_4, toks_5,
      (ErlangCons c_0 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 97))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 122)))) =
  (erlps__scan_atom__6
     [cs_1, st_2, line_3, col_4, toks_5,
      (ErlangCons c_0 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 44))) =
  let arg_11 = (make_string ",")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom ","),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 40))) =
  let arg_11 = (make_string "(")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "("),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 41))) =
  let arg_11 = (make_string ")")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom ")"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 123))) =
  let arg_11 = (make_string "{")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "{"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 125))) =
  let arg_11 = (make_string "}")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "}"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 91))) =
  let arg_11 = (make_string "[")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "["),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 93))) =
  let arg_11 = (make_string "]")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "]"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 59))) =
  let arg_11 = (make_string ";")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom ";"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons c_1@(ErlangInt num_0) cs_2), st_3,
                 line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  (erlps__scan_variable__6
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons c_1 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 37)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               op_arg_12 =
                 case st_2 of
                   (ErlangTuple arr_15) | (DM.Just field_14) <-
                                            ((arr_15 DA.!! 3)) ->
                     field_14
                   _ -> (EXC.badrecord (ErlangAtom "erl_scan"))
             in (BIF.erlang__not__1 [op_arg_12])))) =
  (erlps__skip_comment__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons c_1@(ErlangInt num_0) cs_2), st_3,
                 line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 37))) =
  (erlps__scan_comment__6
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons c_1 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_number__7
     [cs_1, st_2, line_3, col_4, toks_5,
      (ErlangCons c_0 ErlangEmptyList), (ErlangAtom "no_underscore")])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) cs_3))),
                 st_4, line_5, col_6, toks_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 46))) =
  let arg_13 = (make_string "...")
  in
    (erlps__tok2__8
       [cs_3, st_4, line_5, col_6, toks_7, arg_13, (ErlangAtom "..."),
        (ErlangInt (DBI.fromInt 3))])
erlps__scan1__5 [cs_2@(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList))),
                 _st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46))) =
  let    tup_el_14 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_8 =
      (ErlangTuple
         [cs_2, col_5, toks_6, line_4, ErlangEmptyList, tup_el_14])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46))) =
  let arg_12 = (make_string "..")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom ".."),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan1__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan1__5 [(ErlangCons c_1@(ErlangInt num_0) cs_2), st_3,
                 line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__scan_dot__6
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons c_1 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 34))) =
  let   
    state0_10 =
      (ErlangTuple [ErlangEmptyList, ErlangEmptyList, line_3, col_4])
  in let
    arg_14 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string__6
       [cs_1, st_2, line_3, arg_14, toks_5, state0_10])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 39))) =
  let   
    state0_10 =
      (ErlangTuple [ErlangEmptyList, ErlangEmptyList, line_3, col_4])
  in let
    arg_14 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_qatom__6
       [cs_1, st_2, line_3, arg_14, toks_5, state0_10])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 36))) =
  (erlps__scan_char__5 [cs_1, st_2, line_3, col_4, toks_5])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             case st_2 of
               (ErlangTuple arr_15) | (DM.Just field_14) <-
                                        ((arr_15 DA.!! 2)) ->
                 field_14
               _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) =
  let arg_12 = (make_string "\r")
  in
    (erlps__white_space_end__7
       [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1)),
        arg_12])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 223))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) &&
       ((/=) c_0 (ErlangInt (DBI.fromInt 247)))) =
  (erlps__scan_atom__6
     [cs_1, st_2, line_3, col_4, toks_5,
      (ErlangCons c_0 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 192))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 222)))) &&
       (weakNEq c_0 (ErlangInt (DBI.fromInt 215)))) =
  (erlps__scan_variable__6
     [cs_1, st_2, line_3, col_4, toks_5,
      (ErlangCons c_0 ErlangEmptyList)])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             case st_2 of
               (ErlangTuple arr_14) | (DM.Just field_13) <-
                                        ((arr_14 DA.!! 2)) ->
                 field_13
               _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) =
  (erlps__scan_tabs__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__skip_white_space__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
erlps__scan1__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_24 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_24 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_27 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_26 =
                       case lop_27 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 32))])
                         _ -> (EXC.badarg1 lop_27)
                   in
                     case lop_26 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_32 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 128))])
                         in
                           case lop_32 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 160))])
                             _ -> (EXC.badarg1 lop_32)
                       _ -> (EXC.badarg1 lop_26)
                 _ -> (EXC.badarg1 lop_24)))) =
  let
    case_6 =
      case st_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "erl_scan"))
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__scan_white_space__6
           [cs_1, st_2, line_3, col_4, toks_5,
            (ErlangCons c_0 ErlangEmptyList)])
      (ErlangAtom "false") ->
        (erlps__skip_white_space__6
           [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 1))])
      something_else -> (EXC.case_clause something_else)
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 60)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 60))) =
  let arg_12 = (make_string "<<")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "<<"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 60)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 45))) =
  let arg_12 = (make_string "<-")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "<-"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan1__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 60)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 61))) =
  let arg_12 = (make_string "<=")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "<="),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan1__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 60))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan1__5 [cs_0, st_1, line_2, col_3, toks_4] =
  (erlps__scan2__5 [cs_0, st_1, line_2, col_3, toks_4])
erlps__scan1__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__scan1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan2__5 :: ErlangFun
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 62)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 62))) =
  let arg_12 = (make_string ">>")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom ">>"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 62)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 61))) =
  let arg_12 = (make_string ">=")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom ">="),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 62))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 45)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 62))) =
  let arg_12 = (make_string "->")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "->"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 45)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 45))) =
  let arg_12 = (make_string "--")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "--"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 45))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 43))) =
  let arg_12 = (make_string "++")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "++"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) cs_3))),
                 st_4, line_5, col_6, toks_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 61))) =
  let arg_13 = (make_string "=:=")
  in
    (erlps__tok2__8
       [cs_3, st_4, line_5, col_6, toks_7, arg_13, (ErlangAtom "=:="),
        (ErlangInt (DBI.fromInt 3))])
erlps__scan2__5 [cs_2@(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList))),
                 _st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  let    tup_el_14 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_8 =
      (ErlangTuple
         [cs_2, col_5, toks_6, line_4, ErlangEmptyList, tup_el_14])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) cs_3))),
                 st_4, line_5, col_6, toks_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 61))) =
  let arg_13 = (make_string "=/=")
  in
    (erlps__tok2__8
       [cs_3, st_4, line_5, col_6, toks_7, arg_13, (ErlangAtom "=/="),
        (ErlangInt (DBI.fromInt 3))])
erlps__scan2__5 [cs_2@(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList))),
                 _st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 47))) =
  let    tup_el_14 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_8 =
      (ErlangTuple
         [cs_2, col_5, toks_6, line_4, ErlangEmptyList, tup_el_14])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 60))) =
  let arg_12 = (make_string "=<")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "=<"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 62))) =
  let arg_12 = (make_string "=>")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "=>"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 61))) =
  let arg_12 = (make_string "==")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "=="),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 61))) =
  let arg_12 = (make_string "/=")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "/="),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 124)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 124))) =
  let arg_12 = (make_string "||")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "||"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 124))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 61))) =
  let arg_12 = (make_string ":=")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom ":="),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                 st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58))) =
  let arg_12 = (make_string "::")
  in
    (erlps__tok2__8
       [cs_2, st_3, line_4, col_5, toks_6, arg_12, (ErlangAtom "::"),
        (ErlangInt (DBI.fromInt 2))])
erlps__scan2__5 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                 _st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58))) =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_7 =
      (ErlangTuple
         [cs_1, col_4, toks_5, line_3, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan2__5 [cs_0, st_1, line_2, col_3, toks_4] =
  (erlps__scan3__5 [cs_0, st_1, line_2, col_3, toks_4])
erlps__scan2__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__scan2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan3__5 :: ErlangFun
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 61))) =
  let arg_11 = (make_string "=")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "="),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 58))) =
  let arg_11 = (make_string ":")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom ":"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 124))) =
  let arg_11 = (make_string "|")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "|"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35))) =
  let arg_11 = (make_string "#")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "#"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 47))) =
  let arg_11 = (make_string "/")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "/"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 63))) =
  let arg_11 = (make_string "?")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "?"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 45))) =
  let arg_11 = (make_string "-")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "-"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43))) =
  let arg_11 = (make_string "+")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "+"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 42))) =
  let arg_11 = (make_string "*")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "*"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 60))) =
  let arg_11 = (make_string "<")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "<"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 62))) =
  let arg_11 = (make_string ">")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom ">"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 33))) =
  let arg_11 = (make_string "!")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "!"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 64))) =
  let arg_11 = (make_string "@")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "@"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  let arg_11 = (make_string "\\")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "\\"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 94))) =
  let arg_11 = (make_string "^")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "^"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 96))) =
  let arg_11 = (make_string "`")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "`"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 126))) =
  let arg_11 = (make_string "~")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "~"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                 line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 38))) =
  let arg_11 = (make_string "&")
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5, arg_11, (ErlangAtom "&"),
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                 toks_5]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 0))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  let
    arg_15 =
      (BIF.erlang__list_to_atom__1 [(ErlangCons c_0 ErlangEmptyList)])
  in
    (erlps__tok2__8
       [cs_1, st_2, line_3, col_4, toks_5,
        (ErlangCons c_0 ErlangEmptyList), arg_15,
        (ErlangInt (DBI.fromInt 1))])
erlps__scan3__5 [(ErlangCons c_0 cs_1), _st_2, line_3, col_4,
                 _toks_5]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let   
    ncol_8 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_9 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in
    (erlps__scan_error__6
       [arg_9, line_3, col_4, line_3, ncol_8, cs_1])
erlps__scan3__5 [cs_0@(ErlangEmptyList), _st_1, line_2, col_3,
                 toks_4]
  =
  let    tup_el_12 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_6 =
      (ErlangTuple
         [cs_0, col_3, toks_4, line_2, ErlangEmptyList, tup_el_12])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_6])
erlps__scan3__5 [cs_0@(ErlangAtom "eof"), _st_1, line_2, col_3,
                 toks_4]
  =
  (ErlangTuple [(ErlangAtom "ok"), toks_4, cs_0, line_2, col_3])
erlps__scan3__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__scan3__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_atom__6 :: ErlangFun
erlps__scan_atom__6 [cs0_0, st_1, line_2, col_3, toks_4, ncs0_5]
  =
  let case_6 = (erlps__scan_name__2 [cs0_0, ncs0_5])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "more"), ncs_9]) ->
        let    tup_el_17 = (ErlangFun 6 erlps__scan_atom__6)
        in let
          tup_el_11 =
            (ErlangTuple
               [ErlangEmptyList, col_3, toks_4, line_2, ncs_9, tup_el_17])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_11])
      (ErlangTuple [wcs_18, cs_19]) ->
        let
          case_20 =
            (EXC.tryCatch (\ _ -> (BIF.erlang__list_to_atom__1 [wcs_18]))
               (\ ex_23 ->
                  case ex_23 of
                    (ErlangTuple [(ErlangAtom "throw"), payload_24, _]) ->
                      payload_24
                    (ErlangTuple [(ErlangAtom "error"), payload_25,
                                  stack_26]) ->
                      let tup_el_28 = (ErlangTuple [payload_25, stack_26])
                      in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_28])
                    (ErlangTuple [(ErlangAtom "exit"), payload_31, _]) ->
                      (ErlangTuple [(ErlangAtom "EXIT"), payload_31])
                    ex_23 -> (EXC.raise ex_23)))
        in
          case case_20 of
            name_34 | (isEAtom name_34) ->
              let   
                fun_37 =
                  case st_1 of
                    (ErlangTuple arr_40) | (DM.Just field_39) <-
                                             ((arr_40 DA.!! 1)) ->
                      field_39
                    _ -> (EXC.badrecord (ErlangAtom "erl_scan"))
              in let
                case_35 =
                  (BIF.erlang__apply__2
                     [fun_37, (ErlangCons name_34 ErlangEmptyList)])
              in
                case case_35 of
                  (ErlangAtom "true") ->
                    (erlps__tok2__7
                       [cs_19, st_1, line_2, col_3, toks_4, wcs_18, name_34])
                  (ErlangAtom "false") ->
                    (erlps__tok3__8
                       [cs_19, st_1, line_2, col_3, toks_4, (ErlangAtom "atom"),
                        wcs_18, name_34])
                  something_else -> (EXC.case_clause something_else)
            _error_56 ->
              let    arg_58 = (BIF.erlang__length__1 [wcs_18])
              in let ncol_60 = (erlps__incr_column__2 [col_3, arg_58])
              in let
                arg_61 =
                  (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "atom")])
              in
                (erlps__scan_error__6
                   [arg_61, line_2, col_3, line_2, ncol_60, cs_19])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__scan_atom__6 [arg_69, arg_70, arg_71, arg_72, arg_73,
                     arg_74]
  =
  (EXC.function_clause unit)
erlps__scan_atom__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_variable__6 :: ErlangFun
erlps__scan_variable__6 [cs0_0, st_1, line_2, col_3, toks_4,
                         ncs0_5]
  =
  let case_6 = (erlps__scan_name__2 [cs0_0, ncs0_5])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "more"), ncs_9]) ->
        let    tup_el_17 = (ErlangFun 6 erlps__scan_variable__6)
        in let
          tup_el_11 =
            (ErlangTuple
               [ErlangEmptyList, col_3, toks_4, line_2, ncs_9, tup_el_17])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_11])
      (ErlangTuple [wcs_18, cs_19]) ->
        let
          case_20 =
            (EXC.tryCatch (\ _ -> (BIF.erlang__list_to_atom__1 [wcs_18]))
               (\ ex_23 ->
                  case ex_23 of
                    (ErlangTuple [(ErlangAtom "throw"), payload_24, _]) ->
                      payload_24
                    (ErlangTuple [(ErlangAtom "error"), payload_25,
                                  stack_26]) ->
                      let tup_el_28 = (ErlangTuple [payload_25, stack_26])
                      in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_28])
                    (ErlangTuple [(ErlangAtom "exit"), payload_31, _]) ->
                      (ErlangTuple [(ErlangAtom "EXIT"), payload_31])
                    ex_23 -> (EXC.raise ex_23)))
        in
          case case_20 of
            name_34 | (isEAtom name_34) ->
              (erlps__tok3__8
                 [cs_19, st_1, line_2, col_3, toks_4, (ErlangAtom "var"),
                  wcs_18, name_34])
            _error_43 ->
              let    arg_45 = (BIF.erlang__length__1 [wcs_18])
              in let ncol_47 = (erlps__incr_column__2 [col_3, arg_45])
              in let
                arg_48 =
                  (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "var")])
              in
                (erlps__scan_error__6
                   [arg_48, line_2, col_3, line_2, ncol_47, cs_19])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__scan_variable__6 [arg_56, arg_57, arg_58, arg_59, arg_60,
                         arg_61]
  =
  (EXC.function_clause unit)
erlps__scan_variable__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_name__2 :: ErlangFun
erlps__scan_name__2 [(ErlangCons c_0 cs_1), ncs_2]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 97))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 122)))) =
  (erlps__scan_name__2 [cs_1, (ErlangCons c_0 ncs_2)])
erlps__scan_name__2 [(ErlangCons c_0 cs_1), ncs_2]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 65))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 90)))) =
  (erlps__scan_name__2 [cs_1, (ErlangCons c_0 ncs_2)])
erlps__scan_name__2 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                     ncs_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  (erlps__scan_name__2 [cs_2, (ErlangCons c_1 ncs_3)])
erlps__scan_name__2 [(ErlangCons c_0 cs_1), ncs_2]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_name__2 [cs_1, (ErlangCons c_0 ncs_2)])
erlps__scan_name__2 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                     ncs_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 64))) =
  (erlps__scan_name__2 [cs_2, (ErlangCons c_1 ncs_3)])
erlps__scan_name__2 [(ErlangCons c_0 cs_1), ncs_2]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 223))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) &&
       ((/=) c_0 (ErlangInt (DBI.fromInt 247)))) =
  (erlps__scan_name__2 [cs_1, (ErlangCons c_0 ncs_2)])
erlps__scan_name__2 [(ErlangCons c_0 cs_1), ncs_2]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 192))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 222)))) &&
       ((/=) c_0 (ErlangInt (DBI.fromInt 215)))) =
  (erlps__scan_name__2 [cs_1, (ErlangCons c_0 ncs_2)])
erlps__scan_name__2 [(ErlangEmptyList), ncs_0] =
  (ErlangTuple [(ErlangAtom "more"), ncs_0])
erlps__scan_name__2 [cs_0, ncs_1] =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs_1])
  in (ErlangTuple [tup_el_2, cs_0])
erlps__scan_name__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__scan_name__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_dot__6 :: ErlangFun
erlps__scan_dot__6 [cs_1@(ErlangCons (ErlangInt num_0) _), st_2,
                    line_3, col_4, toks_5, ncs_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 37))) =
  let    anno_11 = (erlps__anno__4 [line_3, col_4, st_2, ncs_6])
  in let head_14 = (ErlangTuple [(ErlangAtom "dot"), anno_11])
  in let
    tup_el_20 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "ok"), (ErlangCons head_14 toks_5), cs_1, line_3,
        tup_el_20])
erlps__scan_dot__6 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                    st_3, line_4, col_5, toks_6, ncs_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    arg_11 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case st_3 of
                       (ErlangTuple arr_14) | (DM.Just field_13) <-
                                                ((arr_14 DA.!! 4)) ->
                         field_13
                       _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
          (BIF.erlang__op_append [ncs_7, (ErlangCons c_1 ErlangEmptyList)])
        _ -> ErlangEmptyList
        _ -> (EXC.if_clause unit)
  in let anno_19 = (erlps__anno__4 [line_4, col_5, st_3, arg_11])
  in let head_22 = (ErlangTuple [(ErlangAtom "dot"), anno_19])
  in let
    tup_el_27 =
      (BIF.erlang__op_plus [line_4, (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_30 =
      (erlps__new_column__2 [col_5, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "ok"), (ErlangCons head_22 toks_6), cs_2, tup_el_27,
        tup_el_30])
erlps__scan_dot__6 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                    toks_5, ncs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_30 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_30 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_33 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_32 =
                       case lop_33 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 32))])
                         _ -> (EXC.badarg1 lop_33)
                   in
                     case lop_32 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_38 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 128))])
                         in
                           case lop_38 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 160))])
                             _ -> (EXC.badarg1 lop_38)
                       _ -> (EXC.badarg1 lop_32)
                 _ -> (EXC.badarg1 lop_30)))) =
  let   
    arg_10 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case st_2 of
                       (ErlangTuple arr_13) | (DM.Just field_12) <-
                                                ((arr_13 DA.!! 4)) ->
                         field_12
                       _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
          (BIF.erlang__op_append [ncs_6, (ErlangCons c_0 ErlangEmptyList)])
        _ -> ErlangEmptyList
        _ -> (EXC.if_clause unit)
  in let anno_18 = (erlps__anno__4 [line_3, col_4, st_2, arg_10])
  in let head_21 = (ErlangTuple [(ErlangAtom "dot"), anno_18])
  in let
    tup_el_27 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 2))])
  in
    (ErlangTuple
       [(ErlangAtom "ok"), (ErlangCons head_21 toks_5), cs_1, line_3,
        tup_el_27])
erlps__scan_dot__6 [cs_0@(ErlangAtom "eof"), st_1, line_2, col_3,
                    toks_4, ncs_5]
  =
  let    anno_10 = (erlps__anno__4 [line_2, col_3, st_1, ncs_5])
  in let head_13 = (ErlangTuple [(ErlangAtom "dot"), anno_10])
  in let
    tup_el_19 =
      (erlps__incr_column__2 [col_3, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "ok"), (ErlangCons head_13 toks_4), cs_0, line_2,
        tup_el_19])
erlps__scan_dot__6 [cs_0, st_1, line_2, col_3, toks_4, ncs_5] =
  (erlps__tok2__8
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, (ErlangAtom "."),
      (ErlangInt (DBI.fromInt 1))])
erlps__scan_dot__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                    arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_dot__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_newline__5 :: ErlangFun
erlps__scan_newline__5 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (erlps__scan_nl_spcs__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 2))])
erlps__scan_newline__5 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__scan_nl_tabs__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 2))])
erlps__scan_newline__5 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  let arg_12 = (make_string "\n\r")
  in
    (erlps__newline_end__7
       [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 2)),
        arg_12])
erlps__scan_newline__5 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  let arg_12 = (make_string "\n\x0C")
  in
    (erlps__newline_end__7
       [cs_1, st_2, line_3, col_4, toks_5, (ErlangInt (DBI.fromInt 2)),
        arg_12])
erlps__scan_newline__5 [(ErlangEmptyList), _st_0, line_1, col_2,
                        toks_3]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList),
          col_2, toks_3, line_1, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_5])
erlps__scan_newline__5 [cs_0, st_1, line_2, col_3, toks_4] =
  let arg_10 = (make_string "\n")
  in
    (erlps__scan_nl_white_space__6
       [cs_0, st_1, line_2, col_3, toks_4, arg_10])
erlps__scan_newline__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__scan_newline__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_nl_spcs__6 :: ErlangFun
erlps__scan_nl_spcs__6 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5, n_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32)))
  , (weakLt n_6 (ErlangInt (DBI.fromInt 17))) =
  let
    arg_12 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_nl_spcs__6
       [cs_1, st_2, line_3, col_4, toks_5, arg_12])
erlps__scan_nl_spcs__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                        col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_nl_spcs__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_nl_spcs__6 [cs_0, st_1, line_2, col_3, toks_4, n_5] =
  let arg_12 = (erlps__nl_spcs__1 [n_5])
  in
    (erlps__newline_end__7
       [cs_0, st_1, line_2, col_3, toks_4, n_5, arg_12])
erlps__scan_nl_spcs__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                        arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_nl_spcs__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_nl_tabs__6 :: ErlangFun
erlps__scan_nl_tabs__6 [(ErlangCons (ErlangInt num_0) cs_1),
                        st_2, line_3, col_4, toks_5, n_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9)))
  , (weakLt n_6 (ErlangInt (DBI.fromInt 11))) =
  let
    arg_12 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_nl_tabs__6
       [cs_1, st_2, line_3, col_4, toks_5, arg_12])
erlps__scan_nl_tabs__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                        col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_nl_tabs__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_nl_tabs__6 [cs_0, st_1, line_2, col_3, toks_4, n_5] =
  let arg_12 = (erlps__nl_tabs__1 [n_5])
  in
    (erlps__newline_end__7
       [cs_0, st_1, line_2, col_3, toks_4, n_5, arg_12])
erlps__scan_nl_tabs__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                        arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_nl_tabs__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_nl_white_space__6 :: ErlangFun
erlps__scan_nl_white_space__6 [(ErlangCons (ErlangInt num_0) cs_1),
                               st_2@(ErlangTuple [(ErlangAtom "erl_scan"), _, _,
                                                  _, (ErlangAtom "false")]),
                               line_3, col_4@(ErlangAtom "no_col"), toks0_5,
                               ncs_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let    tup_el_9 = (erlps__anno__1 [line_3])
  in let
    tup_el_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs_6])
  in let
    head_7 =
      (ErlangTuple [(ErlangAtom "white_space"), tup_el_9, tup_el_11])
  in let
    arg_17 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_newline__5
       [cs_1, st_2, arg_17, col_4, (ErlangCons head_7 toks0_5)])
erlps__scan_nl_white_space__6 [(ErlangCons (ErlangInt num_0) cs_1),
                               st_2, line_3, col_4, toks_5, ncs0_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    ncs_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_6])
  in let anno_13 = (erlps__anno__4 [line_3, col_4, st_2, ncs_8])
  in let
    token_17 =
      (ErlangTuple [(ErlangAtom "white_space"), anno_13, ncs_8])
  in let
    arg_20 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in let arg_25 = (BIF.erlang__length__1 [ncs_8])
  in let arg_23 = (erlps__new_column__2 [col_4, arg_25])
  in
    (erlps__scan_newline__5
       [cs_1, st_2, arg_20, arg_23, (ErlangCons token_17 toks_5)])
erlps__scan_nl_white_space__6 [(ErlangCons c_0 cs_1), st_2,
                               line_3, col_4, toks_5, ncs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_15 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_15 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_18 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 32))])
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_23 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 128))])
                         in
                           case lop_23 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 160))])
                             _ -> (EXC.badarg1 lop_23)
                       _ -> (EXC.badarg1 lop_17)
                 _ -> (EXC.badarg1 lop_15)))) =
  (erlps__scan_nl_white_space__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6)])
erlps__scan_nl_white_space__6 [cs_0@(ErlangEmptyList), _st_1,
                               line_2, col_3, toks_4, ncs_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_nl_white_space__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, ncs_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_nl_white_space__6 [cs_0,
                               st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _,
                                                  _, (ErlangAtom "false")]),
                               line_2, col_3@(ErlangAtom "no_col"), toks_4,
                               ncs_5]
  =
  let    anno_7 = (erlps__anno__1 [line_2])
  in let
    arg_10 =
      (BIF.erlang__op_plus [line_2, (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_18 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs_5])
  in let
    head_15 =
      (ErlangTuple [(ErlangAtom "white_space"), anno_7, tup_el_18])
  in
    (erlps__scan1__5
       [cs_0, st_1, arg_10, col_3, (ErlangCons head_15 toks_4)])
erlps__scan_nl_white_space__6 [cs_0, st_1, line_2, col_3, toks_4,
                               ncs0_5]
  =
  let   
    ncs_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_5])
  in let anno_12 = (erlps__anno__4 [line_2, col_3, st_1, ncs_7])
  in let
    token_16 =
      (ErlangTuple [(ErlangAtom "white_space"), anno_12, ncs_7])
  in let
    arg_19 =
      (BIF.erlang__op_plus [line_2, (ErlangInt (DBI.fromInt 1))])
  in let arg_24 = (BIF.erlang__length__1 [ncs_7])
  in let arg_22 = (erlps__new_column__2 [col_3, arg_24])
  in
    (erlps__scan1__5
       [cs_0, st_1, arg_19, arg_22, (ErlangCons token_16 toks_4)])
erlps__scan_nl_white_space__6 [arg_29, arg_30, arg_31, arg_32,
                               arg_33, arg_34]
  =
  (EXC.function_clause unit)
erlps__scan_nl_white_space__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__newline_end__7 :: ErlangFun
erlps__newline_end__7 [cs_0,
                       st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                          (ErlangAtom "false")]),
                       line_2, col_3@(ErlangAtom "no_col"), toks_4, _n_5, ncs_6]
  =
  let   
    arg_9 =
      (BIF.erlang__op_plus [line_2, (ErlangInt (DBI.fromInt 1))])
  in let tup_el_16 = (erlps__anno__1 [line_2])
  in let
    head_14 =
      (ErlangTuple [(ErlangAtom "white_space"), tup_el_16, ncs_6])
  in
    (erlps__scan1__5
       [cs_0, st_1, arg_9, col_3, (ErlangCons head_14 toks_4)])
erlps__newline_end__7 [cs_0, st_1, line_2, col_3, toks_4, n_5,
                       ncs_6]
  =
  let    anno_11 = (erlps__anno__4 [line_2, col_3, st_1, ncs_6])
  in let
    arg_14 =
      (BIF.erlang__op_plus [line_2, (ErlangInt (DBI.fromInt 1))])
  in let arg_17 = (erlps__new_column__2 [col_3, n_5])
  in let
    head_21 =
      (ErlangTuple [(ErlangAtom "white_space"), anno_11, ncs_6])
  in
    (erlps__scan1__5
       [cs_0, st_1, arg_14, arg_17, (ErlangCons head_21 toks_4)])
erlps__newline_end__7 [arg_26, arg_27, arg_28, arg_29, arg_30,
                       arg_31, arg_32]
  =
  (EXC.function_clause unit)
erlps__newline_end__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_spcs__6 :: ErlangFun
erlps__scan_spcs__6 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                     line_3, col_4, toks_5, n_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32)))
  , (weakLt n_6 (ErlangInt (DBI.fromInt 16))) =
  let
    arg_12 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_spcs__6 [cs_1, st_2, line_3, col_4, toks_5, arg_12])
erlps__scan_spcs__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                     col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_spcs__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_spcs__6 [cs_0, st_1, line_2, col_3, toks_4, n_5] =
  let arg_12 = (erlps__spcs__1 [n_5])
  in
    (erlps__white_space_end__7
       [cs_0, st_1, line_2, col_3, toks_4, n_5, arg_12])
erlps__scan_spcs__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                     arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_spcs__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_tabs__6 :: ErlangFun
erlps__scan_tabs__6 [(ErlangCons (ErlangInt num_0) cs_1), st_2,
                     line_3, col_4, toks_5, n_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9)))
  , (weakLt n_6 (ErlangInt (DBI.fromInt 10))) =
  let
    arg_12 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_tabs__6 [cs_1, st_2, line_3, col_4, toks_5, arg_12])
erlps__scan_tabs__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                     col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_tabs__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_tabs__6 [cs_0, st_1, line_2, col_3, toks_4, n_5] =
  let arg_12 = (erlps__tabs__1 [n_5])
  in
    (erlps__white_space_end__7
       [cs_0, st_1, line_2, col_3, toks_4, n_5, arg_12])
erlps__scan_tabs__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                     arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_tabs__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_white_space__6 :: ErlangFun
erlps__skip_white_space__6 [(ErlangCons (ErlangInt num_0) cs_1),
                            st_2, line_3, col_4, toks_5, _n_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    arg_9 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_12 =
      (erlps__new_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__skip_white_space__6
       [cs_1, st_2, arg_9, arg_12, toks_5, (ErlangInt (DBI.fromInt 0))])
erlps__skip_white_space__6 [(ErlangCons c_0 cs_1), st_2, line_3,
                            col_4, toks_5, n_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_15 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_15 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_18 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 32))])
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_23 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 128))])
                         in
                           case lop_23 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 160))])
                             _ -> (EXC.badarg1 lop_23)
                       _ -> (EXC.badarg1 lop_17)
                 _ -> (EXC.badarg1 lop_15)))) =
  let
    arg_12 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__skip_white_space__6
       [cs_1, st_2, line_3, col_4, toks_5, arg_12])
erlps__skip_white_space__6 [cs_0@(ErlangEmptyList), _st_1,
                            line_2, col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__skip_white_space__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__skip_white_space__6 [cs_0, st_1, line_2, col_3, toks_4,
                            n_5]
  =
  let arg_9 = (erlps__incr_column__2 [col_3, n_5])
  in (erlps__scan1__5 [cs_0, st_1, line_2, arg_9, toks_4])
erlps__skip_white_space__6 [arg_13, arg_14, arg_15, arg_16,
                            arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__skip_white_space__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_white_space__6 :: ErlangFun
erlps__scan_white_space__6 [cs_1@(ErlangCons (ErlangInt num_0) _),
                            st_2, line_3, col_4, toks_5, ncs_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let    arg_12 = (BIF.erlang__length__1 [ncs_6])
  in let
    arg_14 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs_6])
  in
    (erlps__white_space_end__7
       [cs_1, st_2, line_3, col_4, toks_5, arg_12, arg_14])
erlps__scan_white_space__6 [(ErlangCons c_0 cs_1), st_2, line_3,
                            col_4, toks_5, ncs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_15 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_15 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_18 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 32))])
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_23 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 128))])
                         in
                           case lop_23 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 160))])
                             _ -> (EXC.badarg1 lop_23)
                       _ -> (EXC.badarg1 lop_17)
                 _ -> (EXC.badarg1 lop_15)))) =
  (erlps__scan_white_space__6
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6)])
erlps__scan_white_space__6 [cs_0@(ErlangEmptyList), _st_1,
                            line_2, col_3, toks_4, ncs_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_white_space__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, ncs_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_white_space__6 [cs_0, st_1, line_2, col_3, toks_4,
                            ncs_5]
  =
  let    arg_11 = (BIF.erlang__length__1 [ncs_5])
  in let
    arg_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs_5])
  in
    (erlps__white_space_end__7
       [cs_0, st_1, line_2, col_3, toks_4, arg_11, arg_13])
erlps__scan_white_space__6 [arg_15, arg_16, arg_17, arg_18,
                            arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__scan_white_space__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__white_space_end__7 :: ErlangFun
erlps__white_space_end__7 [cs_0, st_1, line_2, col_3, toks_4,
                           n_5, ncs_6]
  =
  (erlps__tok3__9
     [cs_0, st_1, line_2, col_3, toks_4, (ErlangAtom "white_space"),
      ncs_6, ncs_6, n_5])
erlps__white_space_end__7 [arg_16, arg_17, arg_18, arg_19,
                           arg_20, arg_21, arg_22]
  =
  (EXC.function_clause unit)
erlps__white_space_end__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_char__5 :: ErlangFun
erlps__scan_char__5 [cs0_2@(ErlangCons (ErlangInt num_0) cs_1),
                     st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  let   
    arg_9 =
      (erlps__incr_column__2 [col_5, (ErlangInt (DBI.fromInt 2))])
  in let case_7 = (erlps__scan_escape__2 [cs_1, arg_9])
  in
    case case_7 of
      (ErlangAtom "more") ->
        let    tup_el_21 = (ErlangFun 6 erlps__scan__6)
        in let
          tup_el_13 =
            (ErlangTuple
               [(ErlangCons (ErlangInt (DBI.fromInt 36)) cs0_2), col_5, toks_6,
                line_4, ErlangEmptyList, tup_el_21])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_13])
      (ErlangTuple [(ErlangAtom "error"), ncs_22, error_23,
                    ncol_24]) ->
        (erlps__scan_error__6
           [error_23, line_4, col_5, line_4, ncol_24, ncs_22])
      (ErlangTuple [(ErlangAtom "eof"), ncol_31]) ->
        (erlps__scan_error__6
           [(ErlangAtom "char"), line_4, col_5, line_4, ncol_31,
            (ErlangAtom "eof")])
      (ErlangTuple [(ErlangAtom "nl"), val_38, str_39, ncs_40,
                    ncol_41]) ->
        let   
          arg_45 =
            case (ErlangAtom "true") of
              _ | ((ErlangAtom "true") ==
                     (falsifyErrors
                        (\ _ ->
                           case st_3 of
                             (ErlangTuple arr_48) | (DM.Just field_47) <-
                                                      ((arr_48 DA.!! 4)) ->
                               field_47
                             _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
                let lop_49 = (make_string "$\\")
                in (BIF.erlang__op_append [lop_49, str_39])
              _ -> ErlangEmptyList
              _ -> (EXC.if_clause unit)
        in let anno_51 = (erlps__anno__4 [line_4, col_5, st_3, arg_45])
        in let
          head_52 = (ErlangTuple [(ErlangAtom "char"), anno_51, val_38])
        in let
          arg_60 =
            (BIF.erlang__op_plus [line_4, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__scan1__5
             [ncs_40, st_3, arg_60, ncol_41, (ErlangCons head_52 toks_6)])
      (ErlangTuple [val_65, str_66, ncs_67, ncol_68]) ->
        let   
          arg_72 =
            case (ErlangAtom "true") of
              _ | ((ErlangAtom "true") ==
                     (falsifyErrors
                        (\ _ ->
                           case st_3 of
                             (ErlangTuple arr_75) | (DM.Just field_74) <-
                                                      ((arr_75 DA.!! 4)) ->
                               field_74
                             _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
                let lop_76 = (make_string "$\\")
                in (BIF.erlang__op_append [lop_76, str_66])
              _ -> ErlangEmptyList
              _ -> (EXC.if_clause unit)
        in let anno_78 = (erlps__anno__4 [line_4, col_5, st_3, arg_72])
        in let
          head_79 = (ErlangTuple [(ErlangAtom "char"), anno_78, val_65])
        in
          (erlps__scan1__5
             [ncs_67, st_3, line_4, ncol_68, (ErlangCons head_79 toks_6)])
      something_else -> (EXC.case_clause something_else)
erlps__scan_char__5 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                     st_3, line_4, col_5, toks_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    arg_10 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case st_3 of
                       (ErlangTuple arr_13) | (DM.Just field_12) <-
                                                ((arr_13 DA.!! 4)) ->
                         field_12
                       _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
          (ErlangCons (ErlangInt (DBI.fromInt 36))
             (ErlangCons c_1 ErlangEmptyList))
        _ -> ErlangEmptyList
        _ -> (EXC.if_clause unit)
  in let anno_18 = (erlps__anno__4 [line_4, col_5, st_3, arg_10])
  in let
    arg_21 =
      (BIF.erlang__op_plus [line_4, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_24 =
      (erlps__new_column__2 [col_5, (ErlangInt (DBI.fromInt 1))])
  in let
    head_28 = (ErlangTuple [(ErlangAtom "char"), anno_18, c_1])
  in
    (erlps__scan1__5
       [cs_2, st_3, arg_21, arg_24, (ErlangCons head_28 toks_6)])
erlps__scan_char__5 [(ErlangCons c_0 cs_1), st_2, line_3, col_4,
                     toks_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_30 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_30 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_33 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_32 =
                       case lop_33 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 55296))])
                         _ -> (EXC.badarg1 lop_33)
                   in
                     case lop_32 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_39 =
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                         in let
                           lop_38 =
                             case lop_39 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c_0, (ErlangInt (DBI.fromInt 65534))])
                               _ -> (EXC.badarg1 lop_39)
                         in
                           case lop_38 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_44 =
                                   (BIF.erlang__op_greater
                                      [c_0, (ErlangInt (DBI.fromInt 65535))])
                               in
                                 case lop_44 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_0,
                                         (ErlangInt (DBI.fromInt 1114111))])
                                   _ -> (EXC.badarg1 lop_44)
                             _ -> (EXC.badarg1 lop_38)
                       _ -> (EXC.badarg1 lop_32)
                 _ -> (EXC.badarg1 lop_30)))) =
  let   
    arg_9 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case st_2 of
                       (ErlangTuple arr_12) | (DM.Just field_11) <-
                                                ((arr_12 DA.!! 4)) ->
                         field_11
                       _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
          (ErlangCons (ErlangInt (DBI.fromInt 36))
             (ErlangCons c_0 ErlangEmptyList))
        _ -> ErlangEmptyList
        _ -> (EXC.if_clause unit)
  in let anno_17 = (erlps__anno__4 [line_3, col_4, st_2, arg_9])
  in let
    arg_21 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 2))])
  in let
    head_25 = (ErlangTuple [(ErlangAtom "char"), anno_17, c_0])
  in
    (erlps__scan1__5
       [cs_1, st_2, line_3, arg_21, (ErlangCons head_25 toks_5)])
erlps__scan_char__5 [(ErlangCons c_0 _cs_1), _st_2, line_3,
                     col_4, _toks_5]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let   
    arg_6 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in let
    arg_12 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_error__6
       [arg_6, line_3, col_4, line_3, arg_12, (ErlangAtom "eof")])
erlps__scan_char__5 [(ErlangEmptyList), _st_0, line_1, col_2,
                     toks_3]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan__6)
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangCons (ErlangInt (DBI.fromInt 36)) ErlangEmptyList),
          col_2, toks_3, line_1, ErlangEmptyList, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_5])
erlps__scan_char__5 [(ErlangAtom "eof"), _st_0, line_1, col_2,
                     _toks_3]
  =
  let
    arg_8 =
      (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_error__6
       [(ErlangAtom "char"), line_1, col_2, line_1, arg_8,
        (ErlangAtom "eof")])
erlps__scan_char__5 [arg_12, arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__scan_char__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_string__6 :: ErlangFun
erlps__scan_string__6 [cs_0, st_1, line_2, col_3, toks_4,
                       (ErlangTuple [wcs_5, str_6, line0_7, col0_8])]
  =
  let
    case_9 =
      (erlps__scan_string0__7
         [cs_0, st_1, line_2, col_3, (ErlangInt (DBI.fromInt 34)), str_6,
          wcs_5])
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "more"), ncs_17, nline_18, ncol_19,
                    nstr_20, nwcs_21]) ->
        let   
          state_26 = (ErlangTuple [nwcs_21, nstr_20, line0_7, col0_8])
        in let tup_el_34 = (ErlangFun 6 erlps__scan_string__6)
        in let
          tup_el_28 =
            (ErlangTuple
               [ncs_17, ncol_19, toks_4, nline_18, state_26, tup_el_34])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_28])
      (ErlangTuple [(ErlangAtom "char_error"), ncs_35, error_36,
                    nline_37, ncol_38, endcol_39]) ->
        (erlps__scan_error__6
           [error_36, nline_37, ncol_38, nline_37, endcol_39, ncs_35])
      (ErlangTuple [(ErlangAtom "error"), nline_46, ncol_47, nwcs_48,
                    ncs_49]) ->
        let   
          estr_53 =
            (BIF.do_remote_fun_call "String" "erlps__slice__3"
               [nwcs_48, (ErlangInt (DBI.fromInt 0)),
                (ErlangInt (DBI.fromInt 16))])
        in let
          arg_54 =
            (ErlangTuple
               [(ErlangAtom "string"), (ErlangInt (DBI.fromInt 34)), estr_53])
        in
          (erlps__scan_error__6
             [arg_54, line0_7, col0_8, nline_46, ncol_47, ncs_49])
      (ErlangTuple [ncs_63, nline_64, ncol_65, nstr_66, nwcs_67]) ->
        let   
          anno_72 = (erlps__anno__4 [line0_7, col0_8, st_1, nstr_66])
        in let
          head_78 = (ErlangTuple [(ErlangAtom "string"), anno_72, nwcs_67])
        in
          (erlps__scan1__5
             [ncs_63, st_1, nline_64, ncol_65, (ErlangCons head_78 toks_4)])
      something_else -> (EXC.case_clause something_else)
erlps__scan_string__6 [arg_83, arg_84, arg_85, arg_86, arg_87,
                       arg_88]
  =
  (EXC.function_clause unit)
erlps__scan_string__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_qatom__6 :: ErlangFun
erlps__scan_qatom__6 [cs_0, st_1, line_2, col_3, toks_4,
                      (ErlangTuple [wcs_5, str_6, line0_7, col0_8])]
  =
  let
    case_9 =
      (erlps__scan_string0__7
         [cs_0, st_1, line_2, col_3, (ErlangInt (DBI.fromInt 39)), str_6,
          wcs_5])
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "more"), ncs_17, nline_18, ncol_19,
                    nstr_20, nwcs_21]) ->
        let   
          state_26 = (ErlangTuple [nwcs_21, nstr_20, line0_7, col0_8])
        in let tup_el_34 = (ErlangFun 6 erlps__scan_qatom__6)
        in let
          tup_el_28 =
            (ErlangTuple
               [ncs_17, ncol_19, toks_4, nline_18, state_26, tup_el_34])
        in (ErlangTuple [(ErlangAtom "more"), tup_el_28])
      (ErlangTuple [(ErlangAtom "char_error"), ncs_35, error_36,
                    nline_37, ncol_38, endcol_39]) ->
        (erlps__scan_error__6
           [error_36, nline_37, ncol_38, nline_37, endcol_39, ncs_35])
      (ErlangTuple [(ErlangAtom "error"), nline_46, ncol_47, nwcs_48,
                    ncs_49]) ->
        let   
          estr_53 =
            (BIF.do_remote_fun_call "String" "erlps__slice__3"
               [nwcs_48, (ErlangInt (DBI.fromInt 0)),
                (ErlangInt (DBI.fromInt 16))])
        in let
          arg_54 =
            (ErlangTuple
               [(ErlangAtom "string"), (ErlangInt (DBI.fromInt 39)), estr_53])
        in
          (erlps__scan_error__6
             [arg_54, line0_7, col0_8, nline_46, ncol_47, ncs_49])
      (ErlangTuple [ncs_63, nline_64, ncol_65, nstr_66, nwcs_67]) ->
        let
          case_68 =
            (EXC.tryCatch (\ _ -> (BIF.erlang__list_to_atom__1 [nwcs_67]))
               (\ ex_71 ->
                  case ex_71 of
                    (ErlangTuple [(ErlangAtom "throw"), payload_72, _]) ->
                      payload_72
                    (ErlangTuple [(ErlangAtom "error"), payload_73,
                                  stack_74]) ->
                      let tup_el_76 = (ErlangTuple [payload_73, stack_74])
                      in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_76])
                    (ErlangTuple [(ErlangAtom "exit"), payload_79, _]) ->
                      (ErlangTuple [(ErlangAtom "EXIT"), payload_79])
                    ex_71 -> (EXC.raise ex_71)))
        in
          case case_68 of
            a_82 | (isEAtom a_82) ->
              let   
                anno_87 = (erlps__anno__4 [line0_7, col0_8, st_1, nstr_66])
              in let
                head_93 = (ErlangTuple [(ErlangAtom "atom"), anno_87, a_82])
              in
                (erlps__scan1__5
                   [ncs_63, st_1, nline_64, ncol_65,
                    (ErlangCons head_93 toks_4)])
            _ ->
              let
                arg_98 =
                  (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "atom")])
              in
                (erlps__scan_error__6
                   [arg_98, line0_7, col0_8, nline_64, ncol_65, ncs_63])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__scan_qatom__6 [arg_106, arg_107, arg_108, arg_109,
                      arg_110, arg_111]
  =
  (EXC.function_clause unit)
erlps__scan_qatom__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_string0__7 :: ErlangFun
erlps__scan_string0__7 [cs_0,
                        (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                      (ErlangAtom "false")]),
                        line_1, col_2@(ErlangAtom "no_col"), q_3,
                        (ErlangEmptyList), wcs_4]
  =
  (erlps__scan_string_no_col__5 [cs_0, line_1, col_2, q_3, wcs_4])
erlps__scan_string0__7 [cs_0,
                        (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                      (ErlangAtom "true")]),
                        line_1, col_2@(ErlangAtom "no_col"), q_3, str_4, wcs_5]
  =
  (erlps__scan_string1__6 [cs_0, line_1, col_2, q_3, str_4, wcs_5])
erlps__scan_string0__7 [cs_0, st_1, line_2, col_3, q_4,
                        (ErlangEmptyList), wcs_5]
  =
  (erlps__scan_string_col__6
     [cs_0, st_1, line_2, col_3, q_4, wcs_5])
erlps__scan_string0__7 [cs_0, _st_1, line_2, col_3, q_4, str_5,
                        wcs_6]
  =
  (erlps__scan_string1__6 [cs_0, line_2, col_3, q_4, str_5, wcs_6])
erlps__scan_string0__7 [arg_13, arg_14, arg_15, arg_16, arg_17,
                        arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_string0__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_string_no_col__5 :: ErlangFun
erlps__scan_string_no_col__5 [(ErlangCons q_0 cs_1), line_2,
                              col_3, q_4, wcs_5]
  | (q_4 == q_0) =
  let
    tup_el_11 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs_5])
  in
    (ErlangTuple [cs_1, line_2, col_3, ErlangEmptyList, tup_el_11])
erlps__scan_string_no_col__5 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                              line_3, col_4, q_5, wcs_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    arg_8 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string_no_col__5
       [cs_2, arg_8, col_4, q_5, (ErlangCons c_1 wcs_6)])
erlps__scan_string_no_col__5 [(ErlangCons c_0 cs_1), line_2,
                              col_3, q_4, wcs_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_13 =
                 (BIF.erlang__op_exactNeq [c_0, (ErlangInt (DBI.fromInt 92))])
             in
               case lop_13 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_16 = (BIF.erlang__is_integer__1 [c_0])
                   in
                     case lop_16 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         let   
                           lop_19 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_18 =
                             case lop_19 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c_0, (ErlangInt (DBI.fromInt 55296))])
                               _ -> (EXC.badarg1 lop_19)
                         in
                           case lop_18 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let   
                                 lop_25 =
                                   (BIF.erlang__op_greater
                                      [c_0, (ErlangInt (DBI.fromInt 57343))])
                               in let
                                 lop_24 =
                                   case lop_25 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesser
                                          [c_0,
                                           (ErlangInt (DBI.fromInt 65534))])
                                     _ -> (EXC.badarg1 lop_25)
                               in
                                 case lop_24 of
                                   (ErlangAtom "true") -> (ErlangAtom "true")
                                   (ErlangAtom "false") ->
                                     let
                                       lop_30 =
                                         (BIF.erlang__op_greater
                                            [c_0,
                                             (ErlangInt (DBI.fromInt 65535))])
                                     in
                                       case lop_30 of
                                         (ErlangAtom "false") ->
                                           (ErlangAtom "false")
                                         (ErlangAtom "true") ->
                                           (BIF.erlang__op_lesserEq
                                              [c_0,
                                               (ErlangInt
                                                  (DBI.fromInt 1114111))])
                                         _ -> (EXC.badarg1 lop_30)
                                   _ -> (EXC.badarg1 lop_24)
                             _ -> (EXC.badarg1 lop_18)
                       _ -> (EXC.badarg1 lop_16)
                 _ -> (EXC.badarg1 lop_13)))) =
  (erlps__scan_string_no_col__5
     [cs_1, line_2, col_3, q_4, (ErlangCons c_0 wcs_5)])
erlps__scan_string_no_col__5 [cs_0, line_1, col_2, q_3, wcs_4] =
  (erlps__scan_string1__6 [cs_0, line_1, col_2, q_3, wcs_4, wcs_4])
erlps__scan_string_no_col__5 [arg_11, arg_12, arg_13, arg_14,
                              arg_15]
  =
  (EXC.function_clause unit)
erlps__scan_string_no_col__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_string_col__6 :: ErlangFun
erlps__scan_string_col__6 [(ErlangCons q_0 cs_1), st_2, line_3,
                           col_4, q_5, wcs0_6]
  | (q_5 == q_0) =
  let   
    wcs_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs0_6])
  in let
    str_18 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case st_2 of
                       (ErlangTuple arr_11) | (DM.Just field_10) <-
                                                ((arr_11 DA.!! 4)) ->
                         field_10
                       _ -> (EXC.badrecord (ErlangAtom "erl_scan"))))) ->
          let
            tail_13 =
              (BIF.erlang__op_append [wcs_8, (ErlangCons q_0 ErlangEmptyList)])
          in (ErlangCons q_0 tail_13)
        _ -> ErlangEmptyList
        _ -> (EXC.if_clause unit)
  in let
    tup_el_21 =
      (BIF.erlang__op_plus [col_4, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [cs_1, line_3, tup_el_21, str_18, wcs_8])
erlps__scan_string_col__6 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                           st_3, line_4, _xcol_5, q_6, wcs_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    arg_10 =
      (BIF.erlang__op_plus [line_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string_col__6
       [cs_2, st_3, arg_10, (ErlangInt (DBI.fromInt 1)), q_6,
        (ErlangCons c_1 wcs_7)])
erlps__scan_string_col__6 [(ErlangCons c_0 cs_1), st_2, line_3,
                           col_4, q_5, wcs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_17 =
                 (BIF.erlang__op_exactNeq [c_0, (ErlangInt (DBI.fromInt 92))])
             in
               case lop_17 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let lop_20 = (BIF.erlang__is_integer__1 [c_0])
                   in
                     case lop_20 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         let   
                           lop_23 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_22 =
                             case lop_23 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c_0, (ErlangInt (DBI.fromInt 55296))])
                               _ -> (EXC.badarg1 lop_23)
                         in
                           case lop_22 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let   
                                 lop_29 =
                                   (BIF.erlang__op_greater
                                      [c_0, (ErlangInt (DBI.fromInt 57343))])
                               in let
                                 lop_28 =
                                   case lop_29 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       (BIF.erlang__op_lesser
                                          [c_0,
                                           (ErlangInt (DBI.fromInt 65534))])
                                     _ -> (EXC.badarg1 lop_29)
                               in
                                 case lop_28 of
                                   (ErlangAtom "true") -> (ErlangAtom "true")
                                   (ErlangAtom "false") ->
                                     let
                                       lop_34 =
                                         (BIF.erlang__op_greater
                                            [c_0,
                                             (ErlangInt (DBI.fromInt 65535))])
                                     in
                                       case lop_34 of
                                         (ErlangAtom "false") ->
                                           (ErlangAtom "false")
                                         (ErlangAtom "true") ->
                                           (BIF.erlang__op_lesserEq
                                              [c_0,
                                               (ErlangInt
                                                  (DBI.fromInt 1114111))])
                                         _ -> (EXC.badarg1 lop_34)
                                   _ -> (EXC.badarg1 lop_28)
                             _ -> (EXC.badarg1 lop_22)
                       _ -> (EXC.badarg1 lop_20)
                 _ -> (EXC.badarg1 lop_17)))) =
  let
    arg_10 =
      (BIF.erlang__op_plus [col_4, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string_col__6
       [cs_1, st_2, line_3, arg_10, q_5, (ErlangCons c_0 wcs_6)])
erlps__scan_string_col__6 [cs_0, _st_1, line_2, col_3, q_4,
                           wcs_5]
  =
  (erlps__scan_string1__6 [cs_0, line_2, col_3, q_4, wcs_5, wcs_5])
erlps__scan_string_col__6 [arg_12, arg_13, arg_14, arg_15,
                           arg_16, arg_17]
  =
  (EXC.function_clause unit)
erlps__scan_string_col__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_string1__6 :: ErlangFun
erlps__scan_string1__6 [(ErlangCons q_0 cs_1), line_2, col_3,
                        q_4, str0_5, wcs0_6]
  | (q_4 == q_0) =
  let   
    wcs_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs0_6])
  in let
    tail_10 =
      (BIF.lists__reverse__2
         [str0_5, (ErlangCons q_0 ErlangEmptyList)])
  in let
    tup_el_18 =
      (erlps__incr_column__2 [col_3, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [cs_1, line_2, tup_el_18, (ErlangCons q_0 tail_10), wcs_8])
erlps__scan_string1__6 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                        line_3, col_4, q_5, str_6, wcs_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let   
    ncol_10 =
      (erlps__new_column__2 [col_4, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_12 =
      (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string1__6
       [cs_2, arg_12, ncol_10, q_5, (ErlangCons c_1 str_6),
        (ErlangCons c_1 wcs_7)])
erlps__scan_string1__6 [cs0_2@(ErlangCons (ErlangInt num_0) cs_1),
                        line_3, col_4, q_5, str_6, wcs_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  let case_8 = (erlps__scan_escape__2 [cs_1, col_4])
  in
    case case_8 of
      (ErlangAtom "more") ->
        (ErlangTuple
           [(ErlangAtom "more"), cs0_2, line_3, col_4, str_6, wcs_7])
      (ErlangTuple [(ErlangAtom "error"), ncs_17, error_18,
                    ncol_19]) ->
        let
          tup_el_25 =
            (erlps__incr_column__2 [ncol_19, (ErlangInt (DBI.fromInt 1))])
        in
          (ErlangTuple
             [(ErlangAtom "char_error"), ncs_17, error_18, line_3, col_4,
              tup_el_25])
      (ErlangTuple [(ErlangAtom "eof"), ncol_28]) ->
        let   
          tup_el_31 =
            (erlps__incr_column__2 [ncol_28, (ErlangInt (DBI.fromInt 1))])
        in let
          tup_el_34 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs_7])
        in
          (ErlangTuple
             [(ErlangAtom "error"), line_3, tup_el_31, tup_el_34,
              (ErlangAtom "eof")])
      (ErlangTuple [(ErlangAtom "nl"), val_37, valstr_38, ncs_39,
                    ncol_40]) ->
        let   
          nstr_45 =
            (BIF.lists__reverse__2
               [valstr_38, (ErlangCons (ErlangInt (DBI.fromInt 92)) str_6)])
        in let
          arg_50 =
            (BIF.erlang__op_plus [line_3, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__scan_string1__6
             [ncs_39, arg_50, ncol_40, q_5, nstr_45,
              (ErlangCons val_37 wcs_7)])
      (ErlangTuple [val_57, valstr_58, ncs_59, ncol_60]) ->
        let   
          nstr_65 =
            (BIF.lists__reverse__2
               [valstr_58, (ErlangCons (ErlangInt (DBI.fromInt 92)) str_6)])
        in let
          arg_71 =
            (erlps__incr_column__2 [ncol_60, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__scan_string1__6
             [ncs_59, line_3, arg_71, q_5, nstr_65,
              (ErlangCons val_57 wcs_7)])
      something_else -> (EXC.case_clause something_else)
erlps__scan_string1__6 [(ErlangCons c_0 cs_1), line_2,
                        col_3@(ErlangAtom "no_col"), q_4, str_5, wcs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_17 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_17 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_20 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 55296))])
                         _ -> (EXC.badarg1 lop_20)
                   in
                     case lop_19 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_26 =
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                         in let
                           lop_25 =
                             case lop_26 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c_0, (ErlangInt (DBI.fromInt 65534))])
                               _ -> (EXC.badarg1 lop_26)
                         in
                           case lop_25 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_31 =
                                   (BIF.erlang__op_greater
                                      [c_0, (ErlangInt (DBI.fromInt 65535))])
                               in
                                 case lop_31 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_0,
                                         (ErlangInt (DBI.fromInt 1114111))])
                                   _ -> (EXC.badarg1 lop_31)
                             _ -> (EXC.badarg1 lop_25)
                       _ -> (EXC.badarg1 lop_19)
                 _ -> (EXC.badarg1 lop_17)))) =
  (erlps__scan_string1__6
     [cs_1, line_2, col_3, q_4, (ErlangCons c_0 str_5),
      (ErlangCons c_0 wcs_6)])
erlps__scan_string1__6 [(ErlangCons c_0 cs_1), line_2, col_3,
                        q_4, str_5, wcs_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_19 = (BIF.erlang__is_integer__1 [c_0])
             in
               case lop_19 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_22 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_21 =
                       case lop_22 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 55296))])
                         _ -> (EXC.badarg1 lop_22)
                   in
                     case lop_21 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_28 =
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                         in let
                           lop_27 =
                             case lop_28 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c_0, (ErlangInt (DBI.fromInt 65534))])
                               _ -> (EXC.badarg1 lop_28)
                         in
                           case lop_27 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_33 =
                                   (BIF.erlang__op_greater
                                      [c_0, (ErlangInt (DBI.fromInt 65535))])
                               in
                                 case lop_33 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c_0,
                                         (ErlangInt (DBI.fromInt 1114111))])
                                   _ -> (EXC.badarg1 lop_33)
                             _ -> (EXC.badarg1 lop_27)
                       _ -> (EXC.badarg1 lop_21)
                 _ -> (EXC.badarg1 lop_19)))) =
  let
    arg_9 =
      (BIF.erlang__op_plus [col_3, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__scan_string1__6
       [cs_1, line_2, arg_9, q_4, (ErlangCons c_0 str_5),
        (ErlangCons c_0 wcs_6)])
erlps__scan_string1__6 [(ErlangCons c_0 cs_1), line_2, col_3,
                        _q_4, _str_5, _wcs_6]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let   
    tup_el_9 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in let
    tup_el_14 =
      (erlps__incr_column__2 [col_3, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "char_error"), cs_1, tup_el_9, line_2, col_3,
        tup_el_14])
erlps__scan_string1__6 [cs_0@(ErlangEmptyList), line_1, col_2,
                        _q_3, str_4, wcs_5]
  =
  (ErlangTuple
     [(ErlangAtom "more"), cs_0, line_1, col_2, str_4, wcs_5])
erlps__scan_string1__6 [(ErlangAtom "eof"), line_0, col_1, _q_2,
                        _str_3, wcs_4]
  =
  let
    tup_el_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs_4])
  in
    (ErlangTuple
       [(ErlangAtom "error"), line_0, col_1, tup_el_8,
        (ErlangAtom "eof")])
erlps__scan_string1__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                        arg_16]
  =
  (EXC.function_clause unit)
erlps__scan_string1__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_escape__2 :: ErlangFun
erlps__scan_escape__2 [(ErlangCons o1_0 (ErlangCons o2_1 (ErlangCons o3_2 cs_3))),
                       col_4]
  | ((((((weakGeq o1_0 (ErlangInt (DBI.fromInt 48))) &&
           (weakLeq o1_0 (ErlangInt (DBI.fromInt 55)))) &&
          (weakGeq o2_1 (ErlangInt (DBI.fromInt 48)))) &&
         (weakLeq o2_1 (ErlangInt (DBI.fromInt 55)))) &&
        (weakGeq o3_2 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq o3_2 (ErlangInt (DBI.fromInt 55)))) =
  let   
    lop_8 = (BIF.erlang__op_mult [o1_0, (ErlangInt (DBI.fromInt 8))])
  in let lop_7 = (BIF.erlang__op_plus [lop_8, o2_1])
  in let
    lop_6 =
      (BIF.erlang__op_mult [lop_7, (ErlangInt (DBI.fromInt 8))])
  in let lop_5 = (BIF.erlang__op_plus [lop_6, o3_2])
  in let
    rop_14 =
      (BIF.erlang__op_mult
         [(ErlangInt (DBI.fromInt 73)), (ErlangInt (DBI.fromInt 48))])
  in let val_17 = (BIF.erlang__op_minus [lop_5, rop_14])
  in let
    tup_el_27 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 3))])
  in
    (ErlangTuple
       [val_17,
        (ErlangCons o1_0
           (ErlangCons o2_1 (ErlangCons o3_2 ErlangEmptyList))),
        cs_3, tup_el_27])
erlps__scan_escape__2 [(ErlangCons o1_0 (ErlangCons o2_1 (ErlangEmptyList))),
                       _col_2]
  | ((((weakGeq o1_0 (ErlangInt (DBI.fromInt 48))) &&
         (weakLeq o1_0 (ErlangInt (DBI.fromInt 55)))) &&
        (weakGeq o2_1 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq o2_1 (ErlangInt (DBI.fromInt 55)))) =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangCons o1_0 (ErlangCons o2_1 cs_2)),
                       col_3]
  | ((((weakGeq o1_0 (ErlangInt (DBI.fromInt 48))) &&
         (weakLeq o1_0 (ErlangInt (DBI.fromInt 55)))) &&
        (weakGeq o2_1 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq o2_1 (ErlangInt (DBI.fromInt 55)))) =
  let   
    lop_5 = (BIF.erlang__op_mult [o1_0, (ErlangInt (DBI.fromInt 8))])
  in let lop_4 = (BIF.erlang__op_plus [lop_5, o2_1])
  in let
    rop_9 =
      (BIF.erlang__op_mult
         [(ErlangInt (DBI.fromInt 9)), (ErlangInt (DBI.fromInt 48))])
  in let val_12 = (BIF.erlang__op_minus [lop_4, rop_9])
  in let
    tup_el_20 =
      (erlps__incr_column__2 [col_3, (ErlangInt (DBI.fromInt 2))])
  in
    (ErlangTuple
       [val_12, (ErlangCons o1_0 (ErlangCons o2_1 ErlangEmptyList)),
        cs_2, tup_el_20])
erlps__scan_escape__2 [(ErlangCons o1_0 (ErlangEmptyList)),
                       _col_1]
  | ((weakGeq o1_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq o1_0 (ErlangInt (DBI.fromInt 55)))) =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangCons o1_0 cs_1), col_2]
  | ((weakGeq o1_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq o1_0 (ErlangInt (DBI.fromInt 55)))) =
  let   
    tup_el_3 =
      (BIF.erlang__op_minus [o1_0, (ErlangInt (DBI.fromInt 48))])
  in let
    tup_el_10 =
      (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [tup_el_3, (ErlangCons o1_0 ErlangEmptyList), cs_1, tup_el_10])
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) cs_2)),
                       col_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 123))) =
  let
    arg_5 =
      (erlps__incr_column__2 [col_3, (ErlangInt (DBI.fromInt 2))])
  in (erlps__scan_hex__3 [cs_2, arg_5, ErlangEmptyList])
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                       _col_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120))) =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangAtom "eof")),
                       col_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120))) =
  let
    tup_el_3 =
      (erlps__incr_column__2 [col_1, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [(ErlangAtom "eof"), tup_el_3])
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangCons h1_1 (ErlangCons h2_2 cs_3))),
                       col_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_26 =
                 (BIF.erlang__op_greaterEq [h1_1, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_25 =
                 case lop_26 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [h1_1, (ErlangInt (DBI.fromInt 57))])
                   _ -> (EXC.badarg1 lop_26)
             in let
               lop_24 =
                 case lop_25 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let   
                       lop_32 =
                         (BIF.erlang__op_greaterEq
                            [h1_1, (ErlangInt (DBI.fromInt 65))])
                     in let
                       lop_31 =
                         case lop_32 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_lesserEq
                                [h1_1, (ErlangInt (DBI.fromInt 70))])
                           _ -> (EXC.badarg1 lop_32)
                     in
                       case lop_31 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_37 =
                               (BIF.erlang__op_greaterEq
                                  [h1_1, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_37 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [h1_1, (ErlangInt (DBI.fromInt 102))])
                               _ -> (EXC.badarg1 lop_37)
                         _ -> (EXC.badarg1 lop_31)
                   _ -> (EXC.badarg1 lop_25)
             in
               case lop_24 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_43 =
                       (BIF.erlang__op_greaterEq
                          [h2_2, (ErlangInt (DBI.fromInt 48))])
                   in let
                     lop_42 =
                       case lop_43 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [h2_2, (ErlangInt (DBI.fromInt 57))])
                         _ -> (EXC.badarg1 lop_43)
                   in
                     case lop_42 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_49 =
                             (BIF.erlang__op_greaterEq
                                [h2_2, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_48 =
                             case lop_49 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesserEq
                                    [h2_2, (ErlangInt (DBI.fromInt 70))])
                               _ -> (EXC.badarg1 lop_49)
                         in
                           case lop_48 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_54 =
                                   (BIF.erlang__op_greaterEq
                                      [h2_2, (ErlangInt (DBI.fromInt 97))])
                               in
                                 case lop_54 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [h2_2, (ErlangInt (DBI.fromInt 102))])
                                   _ -> (EXC.badarg1 lop_54)
                             _ -> (EXC.badarg1 lop_48)
                       _ -> (EXC.badarg1 lop_42)
                 _ -> (EXC.badarg1 lop_24)))) =
  let   
    val_11 =
      (BIF.erlang__list_to_integer__2
         [(ErlangCons h1_1 (ErlangCons h2_2 ErlangEmptyList)),
          (ErlangInt (DBI.fromInt 16))])
  in let
    tup_el_21 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 3))])
  in
    (ErlangTuple
       [val_11,
        (ErlangCons (ErlangInt (DBI.fromInt 120))
           (ErlangCons h1_1 (ErlangCons h2_2 ErlangEmptyList))),
        cs_3, tup_el_21])
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangCons h1_1 (ErlangEmptyList))),
                       _col_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_4 =
                 (BIF.erlang__op_greaterEq [h1_1, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_3 =
                 case lop_4 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [h1_1, (ErlangInt (DBI.fromInt 57))])
                   _ -> (EXC.badarg1 lop_4)
             in
               case lop_3 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let   
                     lop_10 =
                       (BIF.erlang__op_greaterEq
                          [h1_1, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_9 =
                       case lop_10 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [h1_1, (ErlangInt (DBI.fromInt 70))])
                         _ -> (EXC.badarg1 lop_10)
                   in
                     case lop_9 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_15 =
                             (BIF.erlang__op_greaterEq
                                [h1_1, (ErlangInt (DBI.fromInt 97))])
                         in
                           case lop_15 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [h1_1, (ErlangInt (DBI.fromInt 102))])
                             _ -> (EXC.badarg1 lop_15)
                       _ -> (EXC.badarg1 lop_9)
                 _ -> (EXC.badarg1 lop_3)))) =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) cs_1),
                       col_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120))) =
  let   
    tup_el_5 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in let
    tup_el_8 =
      (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [(ErlangAtom "error"), cs_1, tup_el_5, tup_el_8])
erlps__scan_escape__2 [(ErlangCons c0_1@(ErlangInt num_0) (ErlangCons c_3@(ErlangInt num_2) cs_4)),
                       col_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 94)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 10))) =
  let
    tup_el_14 =
      (erlps__new_column__2 [col_5, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "nl"), c_3,
        (ErlangCons c0_1 (ErlangCons c_3 ErlangEmptyList)), cs_4,
        tup_el_14])
erlps__scan_escape__2 [(ErlangCons c0_1@(ErlangInt num_0) (ErlangCons c_2 cs_3)),
                       col_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 94)))
  , ((isEInt c_2) && (weakGeq c_2 (ErlangInt (DBI.fromInt 0)))) =
  let   
    val_7 = (BIF.erlang__band__2 [c_2, (ErlangInt (DBI.fromInt 31))])
  in let
    tup_el_15 =
      (erlps__incr_column__2 [col_4, (ErlangInt (DBI.fromInt 2))])
  in
    (ErlangTuple
       [val_7, (ErlangCons c0_1 (ErlangCons c_2 ErlangEmptyList)), cs_3,
        tup_el_15])
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                       _col_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 94))) =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangCons (ErlangInt num_0) (ErlangAtom "eof")),
                       col_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 94))) =
  let
    tup_el_3 =
      (erlps__incr_column__2 [col_1, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [(ErlangAtom "eof"), tup_el_3])
erlps__scan_escape__2 [(ErlangCons c_1@(ErlangInt num_0) cs_2),
                       col_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    tup_el_10 =
      (erlps__new_column__2 [col_3, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "nl"), c_1, (ErlangCons c_1 ErlangEmptyList), cs_2,
        tup_el_10])
erlps__scan_escape__2 [(ErlangCons c0_0 cs_1), col_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_13 = (BIF.erlang__is_integer__1 [c0_0])
             in
               case lop_13 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_16 =
                       (BIF.erlang__op_greaterEq
                          [c0_0, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_15 =
                       case lop_16 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c0_0, (ErlangInt (DBI.fromInt 55296))])
                         _ -> (EXC.badarg1 lop_16)
                   in
                     case lop_15 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_22 =
                             (BIF.erlang__op_greater
                                [c0_0, (ErlangInt (DBI.fromInt 57343))])
                         in let
                           lop_21 =
                             case lop_22 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_lesser
                                    [c0_0, (ErlangInt (DBI.fromInt 65534))])
                               _ -> (EXC.badarg1 lop_22)
                         in
                           case lop_21 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_27 =
                                   (BIF.erlang__op_greater
                                      [c0_0, (ErlangInt (DBI.fromInt 65535))])
                               in
                                 case lop_27 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     (BIF.erlang__op_lesserEq
                                        [c0_0,
                                         (ErlangInt (DBI.fromInt 1114111))])
                                   _ -> (EXC.badarg1 lop_27)
                             _ -> (EXC.badarg1 lop_21)
                       _ -> (EXC.badarg1 lop_15)
                 _ -> (EXC.badarg1 lop_13)))) =
  let    c_4 = (erlps__escape_char__1 [c0_0])
  in let
    tup_el_10 =
      (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [c_4, (ErlangCons c0_0 ErlangEmptyList), cs_1, tup_el_10])
erlps__scan_escape__2 [(ErlangCons c_0 cs_1), col_2]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let   
    tup_el_5 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in let
    tup_el_8 =
      (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [(ErlangAtom "error"), cs_1, tup_el_5, tup_el_8])
erlps__scan_escape__2 [(ErlangEmptyList), _col_0] =
  (ErlangAtom "more")
erlps__scan_escape__2 [(ErlangAtom "eof"), col_0] =
  (ErlangTuple [(ErlangAtom "eof"), col_0])
erlps__scan_escape__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__scan_escape__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_hex__3 :: ErlangFun
erlps__scan_hex__3 [(ErlangCons c_0 cs_1),
                    col_2@(ErlangAtom "no_col"), wcs_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_10 =
                 (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_9 =
                 case lop_10 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [c_0, (ErlangInt (DBI.fromInt 57))])
                   _ -> (EXC.badarg1 lop_10)
             in
               case lop_9 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let   
                     lop_16 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_15 =
                       case lop_16 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 70))])
                         _ -> (EXC.badarg1 lop_16)
                   in
                     case lop_15 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_21 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 97))])
                         in
                           case lop_21 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 102))])
                             _ -> (EXC.badarg1 lop_21)
                       _ -> (EXC.badarg1 lop_15)
                 _ -> (EXC.badarg1 lop_9)))) =
  (erlps__scan_hex__3 [cs_1, col_2, (ErlangCons c_0 wcs_3)])
erlps__scan_hex__3 [(ErlangCons c_0 cs_1), col_2, wcs_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_12 =
                 (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_11 =
                 case lop_12 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [c_0, (ErlangInt (DBI.fromInt 57))])
                   _ -> (EXC.badarg1 lop_12)
             in
               case lop_11 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let   
                     lop_18 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_0, (ErlangInt (DBI.fromInt 70))])
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_23 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 97))])
                         in
                           case lop_23 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq
                                  [c_0, (ErlangInt (DBI.fromInt 102))])
                             _ -> (EXC.badarg1 lop_23)
                       _ -> (EXC.badarg1 lop_17)
                 _ -> (EXC.badarg1 lop_11)))) =
  let
    arg_5 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__scan_hex__3 [cs_1, arg_5, (ErlangCons c_0 wcs_3)])
erlps__scan_hex__3 [cs_0, col_1, wcs_2] =
  let arg_7 = (make_string "x{")
  in
    (erlps__scan_esc_end__5
       [cs_0, col_1, wcs_2, (ErlangInt (DBI.fromInt 16)), arg_7])
erlps__scan_hex__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__scan_hex__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_esc_end__5 :: ErlangFun
erlps__scan_esc_end__5 [(ErlangCons (ErlangInt num_0) cs_1),
                        col_2, wcs0_3, b_4, str0_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 125))) =
  let   
    wcs_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [wcs0_3])
  in let
    case_8 =
      (EXC.tryCatch
         (\ _ -> (BIF.erlang__list_to_integer__2 [wcs_7, b_4]))
         (\ ex_12 ->
            case ex_12 of
              (ErlangTuple [(ErlangAtom "throw"), payload_13, _]) -> payload_13
              (ErlangTuple [(ErlangAtom "error"), payload_14, stack_15]) ->
                let tup_el_17 = (ErlangTuple [payload_14, stack_15])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_17])
              (ErlangTuple [(ErlangAtom "exit"), payload_20, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_20])
              ex_12 -> (EXC.raise ex_12)))
  in
    case case_8 of
      val_23 | ((ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let lop_24 = (BIF.erlang__is_integer__1 [val_23])
                        in
                          case lop_24 of
                            (ErlangAtom "false") -> (ErlangAtom "false")
                            (ErlangAtom "true") ->
                              let   
                                lop_27 =
                                  (BIF.erlang__op_greaterEq
                                     [val_23, (ErlangInt (DBI.fromInt 0))])
                              in let
                                lop_26 =
                                  case lop_27 of
                                    (ErlangAtom "false") -> (ErlangAtom "false")
                                    (ErlangAtom "true") ->
                                      (BIF.erlang__op_lesser
                                         [val_23,
                                          (ErlangInt (DBI.fromInt 55296))])
                                    _ -> (EXC.badarg1 lop_27)
                              in
                                case lop_26 of
                                  (ErlangAtom "true") -> (ErlangAtom "true")
                                  (ErlangAtom "false") ->
                                    let   
                                      lop_33 =
                                        (BIF.erlang__op_greater
                                           [val_23,
                                            (ErlangInt (DBI.fromInt 57343))])
                                    in let
                                      lop_32 =
                                        case lop_33 of
                                          (ErlangAtom "false") ->
                                            (ErlangAtom "false")
                                          (ErlangAtom "true") ->
                                            (BIF.erlang__op_lesser
                                               [val_23,
                                                (ErlangInt
                                                   (DBI.fromInt 65534))])
                                          _ -> (EXC.badarg1 lop_33)
                                    in
                                      case lop_32 of
                                        (ErlangAtom "true") ->
                                          (ErlangAtom "true")
                                        (ErlangAtom "false") ->
                                          let
                                            lop_38 =
                                              (BIF.erlang__op_greater
                                                 [val_23,
                                                  (ErlangInt
                                                     (DBI.fromInt 65535))])
                                          in
                                            case lop_38 of
                                              (ErlangAtom "false") ->
                                                (ErlangAtom "false")
                                              (ErlangAtom "true") ->
                                                (BIF.erlang__op_lesserEq
                                                   [val_23,
                                                    (ErlangInt
                                                       (DBI.fromInt 1114111))])
                                              _ -> (EXC.badarg1 lop_38)
                                        _ -> (EXC.badarg1 lop_32)
                                  _ -> (EXC.badarg1 lop_26)
                            _ -> (EXC.badarg1 lop_24)))) ->
        let   
          rop_46 =
            (BIF.erlang__op_append
               [wcs_7,
                (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList)])
        in let tup_el_44 = (BIF.erlang__op_append [str0_5, rop_46])
        in let
          tup_el_52 =
            (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
        in (ErlangTuple [val_23, tup_el_44, cs_1, tup_el_52])
      _ ->
        let   
          tup_el_57 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
        in let
          tup_el_60 =
            (erlps__incr_column__2 [col_2, (ErlangInt (DBI.fromInt 1))])
        in
          (ErlangTuple [(ErlangAtom "error"), cs_1, tup_el_57, tup_el_60])
      something_else -> (EXC.case_clause something_else)
erlps__scan_esc_end__5 [(ErlangEmptyList), _col_0, _wcs_1, _b_2,
                        _str0_3]
  =
  (ErlangAtom "more")
erlps__scan_esc_end__5 [(ErlangAtom "eof"), col_0, _wcs_1, _b_2,
                        _str0_3]
  =
  (ErlangTuple [(ErlangAtom "eof"), col_0])
erlps__scan_esc_end__5 [cs_0, col_1, _wcs_2, _b_3, _str0_4] =
  let
    tup_el_7 =
      (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
  in (ErlangTuple [(ErlangAtom "error"), cs_0, tup_el_7, col_1])
erlps__scan_esc_end__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__scan_esc_end__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__escape_char__1 :: ErlangFun
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 110))) =
  (ErlangInt (DBI.fromInt 10))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 114))) =
  (ErlangInt (DBI.fromInt 13))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 116))) =
  (ErlangInt (DBI.fromInt 9))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 118))) =
  (ErlangInt (DBI.fromInt 11))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98))) =
  (ErlangInt (DBI.fromInt 8))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102))) =
  (ErlangInt (DBI.fromInt 12))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangInt (DBI.fromInt 27))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115))) =
  (ErlangInt (DBI.fromInt 32))
erlps__escape_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 100))) =
  (ErlangInt (DBI.fromInt 127))
erlps__escape_char__1 [c_0] = c_0
erlps__escape_char__1 [arg_1] = (EXC.function_clause unit)
erlps__escape_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_number__6 :: ErlangFun
erlps__scan_number__6 [cs_0, st_1, line_2, col_3, toks_4,
                       (ErlangTuple [ncs_5, us_6])]
  =
  (erlps__scan_number__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_number__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                       arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_number__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_number__7 :: ErlangFun
erlps__scan_number__7 [(ErlangCons c_0 cs_1), st_2, line_3,
                       col_4, toks_5, ncs_6, us_7]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_number__7
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6),
      us_7])
erlps__scan_number__7 [(ErlangCons (ErlangInt num_0) (ErlangCons next_1 cs_2)),
                       st_3, line_4, col_5, toks_6, ncs_8@(ErlangCons prev_7 _),
                       _us_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95)))
  , ((((weakGeq next_1 (ErlangInt (DBI.fromInt 48))) &&
         (weakLeq next_1 (ErlangInt (DBI.fromInt 57)))) &&
        (weakGeq prev_7 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq prev_7 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_number__7
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons next_1
         (ErlangCons (ErlangInt (DBI.fromInt 95)) ncs_8)),
      (ErlangAtom "with_underscore")])
erlps__scan_number__7 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                       _st_2, line_3, col_4, toks_5, ncs_6, us_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  let    tup_el_14 = (ErlangTuple [ncs_6, us_7])
  in let tup_el_17 = (ErlangFun 6 erlps__scan_number__6)
  in let
    tup_el_9 =
      (ErlangTuple [cs_1, col_4, toks_5, line_3, tup_el_14, tup_el_17])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_9])
erlps__scan_number__7 [(ErlangCons (ErlangInt num_0) (ErlangCons c_1 cs_2)),
                       st_3, line_4, col_5, toks_6, ncs_7, us_8]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((weakGeq c_1 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_1 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_fraction__7
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons c_1 (ErlangCons (ErlangInt (DBI.fromInt 46)) ncs_7)),
      us_8])
erlps__scan_number__7 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                       _st_2, line_3, col_4, toks_5, ncs_6, us_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  let    tup_el_14 = (ErlangTuple [ncs_6, us_7])
  in let tup_el_17 = (ErlangFun 6 erlps__scan_number__6)
  in let
    tup_el_9 =
      (ErlangTuple [cs_1, col_4, toks_5, line_3, tup_el_14, tup_el_17])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_9])
erlps__scan_number__7 [cs0_2@(ErlangCons (ErlangInt num_0) cs_1),
                       st_3, line_4, col_5, toks_6, ncs0_7, us_8]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35))) =
  let   
    ncs_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_7])
  in let
    case_11 =
      (EXC.tryCatch
         (\ _ ->
            let arg_12 = (erlps__remove_digit_separators__2 [ncs_10, us_8])
            in (BIF.erlang__list_to_integer__1 [arg_12]))
         (\ ex_16 ->
            case ex_16 of
              (ErlangTuple [(ErlangAtom "throw"), payload_17, _]) -> payload_17
              (ErlangTuple [(ErlangAtom "error"), payload_18, stack_19]) ->
                let tup_el_21 = (ErlangTuple [payload_18, stack_19])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_21])
              (ErlangTuple [(ErlangAtom "exit"), payload_24, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_24])
              ex_16 -> (EXC.raise ex_16)))
  in
    case case_11 of
      b_27 | ((ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      let
                        lop_28 =
                          (BIF.erlang__op_greaterEq
                             [b_27, (ErlangInt (DBI.fromInt 2))])
                      in
                        case lop_28 of
                          (ErlangAtom "false") -> (ErlangAtom "false")
                          (ErlangAtom "true") ->
                            let   
                              lop_34 =
                                (BIF.erlang__op_plus
                                   [(ErlangInt (DBI.fromInt 1)),
                                    (ErlangInt (DBI.fromInt 90))])
                            in let
                              lop_33 =
                                (BIF.erlang__op_minus
                                   [lop_34, (ErlangInt (DBI.fromInt 65))])
                            in let
                              rop_32 =
                                (BIF.erlang__op_plus
                                   [lop_33, (ErlangInt (DBI.fromInt 10))])
                            in (BIF.erlang__op_lesserEq [b_27, rop_32])
                          _ -> (EXC.badarg1 lop_28)))) ->
        let
          bcs_43 =
            (BIF.erlang__op_append
               [ncs_10,
                (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList)])
        in
          (erlps__scan_based_int__9
             [cs_1, st_3, line_4, col_5, toks_6, b_27, ErlangEmptyList,
              bcs_43, (ErlangAtom "no_underscore")])
      b_53 ->
        let    len_55 = (BIF.erlang__length__1 [ncs_10])
        in let arg_56 = (ErlangTuple [(ErlangAtom "base"), b_53])
        in let arg_62 = (erlps__incr_column__2 [col_5, len_55])
        in
          (erlps__scan_error__6
             [arg_56, line_4, col_5, line_4, arg_62, cs0_2])
      something_else -> (EXC.case_clause something_else)
erlps__scan_number__7 [cs_0@(ErlangEmptyList), _st_1, line_2,
                       col_3, toks_4, ncs_5, us_6]
  =
  let    tup_el_13 = (ErlangTuple [ncs_5, us_6])
  in let tup_el_16 = (ErlangFun 6 erlps__scan_number__6)
  in let
    tup_el_8 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, tup_el_13, tup_el_16])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan_number__7 [cs_0, st_1, line_2, col_3, toks_4, ncs0_5,
                       us_6]
  =
  let   
    ncs_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_5])
  in let
    case_9 =
      (EXC.tryCatch
         (\ _ ->
            let arg_10 = (erlps__remove_digit_separators__2 [ncs_8, us_6])
            in (BIF.erlang__list_to_integer__1 [arg_10]))
         (\ ex_14 ->
            case ex_14 of
              (ErlangTuple [(ErlangAtom "throw"), payload_15, _]) -> payload_15
              (ErlangTuple [(ErlangAtom "error"), payload_16, stack_17]) ->
                let tup_el_19 = (ErlangTuple [payload_16, stack_17])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_19])
              (ErlangTuple [(ErlangAtom "exit"), payload_22, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_22])
              ex_14 -> (EXC.raise ex_14)))
  in
    case case_9 of
      n_25 | (isEInt n_25) ->
        (erlps__tok3__8
           [cs_0, st_1, line_2, col_3, toks_4, (ErlangAtom "integer"),
            ncs_8, n_25])
      _ ->
        let    arg_35 = (BIF.erlang__length__1 [ncs_8])
        in let ncol_37 = (erlps__incr_column__2 [col_3, arg_35])
        in let
          arg_38 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "integer")])
        in
          (erlps__scan_error__6
             [arg_38, line_2, col_3, line_2, ncol_37, cs_0])
      something_else -> (EXC.case_clause something_else)
erlps__scan_number__7 [arg_46, arg_47, arg_48, arg_49, arg_50,
                       arg_51, arg_52]
  =
  (EXC.function_clause unit)
erlps__scan_number__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__remove_digit_separators__2 :: ErlangFun
erlps__remove_digit_separators__2 [number_0,
                                   (ErlangAtom "no_underscore")]
  =
  number_0
erlps__remove_digit_separators__2 [number_0,
                                   (ErlangAtom "with_underscore")]
  =
  (flmap
     (\ lc_3 ->
        case lc_3 of
          c_2 ->
            let
              cond_4 =
                (BIF.erlang__op_exactNeq [c_2, (ErlangInt (DBI.fromInt 95))])
            in
              case cond_4 of
                (ErlangAtom "true") -> (ErlangCons c_2 ErlangEmptyList)
                _ -> ErlangEmptyList
          _ -> ErlangEmptyList)
     number_0)
erlps__remove_digit_separators__2 [arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__remove_digit_separators__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_based_int__6 :: ErlangFun
erlps__scan_based_int__6 [cs_0, st_1, line_2, col_3, toks_4,
                          (ErlangTuple [b_5, ncs_6, bcs_7, us_8])]
  =
  (erlps__scan_based_int__9
     [cs_0, st_1, line_2, col_3, toks_4, b_5, ncs_6, bcs_7, us_8])
erlps__scan_based_int__6 [arg_18, arg_19, arg_20, arg_21, arg_22,
                          arg_23]
  =
  (EXC.function_clause unit)
erlps__scan_based_int__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_based_int__9 :: ErlangFun
erlps__scan_based_int__9 [(ErlangCons c_0 cs_1), st_2, line_3,
                          col_4, toks_5, b_6, ncs_7, bcs_8, us_9]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_22 =
                 (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_21 =
                 case lop_22 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_25 =
                         (BIF.erlang__op_lesserEq
                            [c_0, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_25 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             rop_29 =
                               (BIF.erlang__op_plus
                                  [(ErlangInt (DBI.fromInt 48)), b_6])
                           in (BIF.erlang__op_lesser [c_0, rop_29])
                         _ -> (EXC.badarg1 lop_25)
                   _ -> (EXC.badarg1 lop_22)
             in
               case lop_21 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let   
                     lop_33 =
                       (BIF.erlang__op_greaterEq
                          [c_0, (ErlangInt (DBI.fromInt 65))])
                   in let
                     lop_32 =
                       case lop_33 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             lop_36 =
                               (BIF.erlang__op_greater
                                  [b_6, (ErlangInt (DBI.fromInt 10))])
                           in
                             case lop_36 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_41 =
                                     (BIF.erlang__op_plus
                                        [(ErlangInt (DBI.fromInt 65)), b_6])
                                 in let
                                   rop_40 =
                                     (BIF.erlang__op_minus
                                        [lop_41, (ErlangInt (DBI.fromInt 10))])
                                 in (BIF.erlang__op_lesser [c_0, rop_40])
                               _ -> (EXC.badarg1 lop_36)
                         _ -> (EXC.badarg1 lop_33)
                   in
                     case lop_32 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           lop_45 =
                             (BIF.erlang__op_greaterEq
                                [c_0, (ErlangInt (DBI.fromInt 97))])
                         in
                           case lop_45 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let
                                 lop_48 =
                                   (BIF.erlang__op_greater
                                      [b_6, (ErlangInt (DBI.fromInt 10))])
                               in
                                 case lop_48 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     let   
                                       lop_53 =
                                         (BIF.erlang__op_plus
                                            [(ErlangInt (DBI.fromInt 97)), b_6])
                                     in let
                                       rop_52 =
                                         (BIF.erlang__op_minus
                                            [lop_53,
                                             (ErlangInt (DBI.fromInt 10))])
                                     in (BIF.erlang__op_lesser [c_0, rop_52])
                                   _ -> (EXC.badarg1 lop_48)
                             _ -> (EXC.badarg1 lop_45)
                       _ -> (EXC.badarg1 lop_32)
                 _ -> (EXC.badarg1 lop_21)))) =
  (erlps__scan_based_int__9
     [cs_1, st_2, line_3, col_4, toks_5, b_6, (ErlangCons c_0 ncs_7),
      bcs_8, us_9])
erlps__scan_based_int__9 [(ErlangCons (ErlangInt num_0) (ErlangCons next_1 cs_2)),
                          st_3, line_4, col_5, toks_6, b_7,
                          ncs_9@(ErlangCons prev_8 _), bcs_10, _us_11]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_27 =
                 (BIF.erlang__op_greaterEq
                    [next_1, (ErlangInt (DBI.fromInt 48))])
             in let
               lop_26 =
                 case lop_27 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let
                       lop_30 =
                         (BIF.erlang__op_lesserEq
                            [next_1, (ErlangInt (DBI.fromInt 57))])
                     in
                       case lop_30 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             rop_34 =
                               (BIF.erlang__op_plus
                                  [(ErlangInt (DBI.fromInt 48)), b_7])
                           in (BIF.erlang__op_lesser [next_1, rop_34])
                         _ -> (EXC.badarg1 lop_30)
                   _ -> (EXC.badarg1 lop_27)
             in let
               lop_25 =
                 case lop_26 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let   
                       lop_38 =
                         (BIF.erlang__op_greaterEq
                            [next_1, (ErlangInt (DBI.fromInt 65))])
                     in let
                       lop_37 =
                         case lop_38 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             let
                               lop_41 =
                                 (BIF.erlang__op_greater
                                    [b_7, (ErlangInt (DBI.fromInt 10))])
                             in
                               case lop_41 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   let   
                                     lop_46 =
                                       (BIF.erlang__op_plus
                                          [(ErlangInt (DBI.fromInt 65)), b_7])
                                   in let
                                     rop_45 =
                                       (BIF.erlang__op_minus
                                          [lop_46,
                                           (ErlangInt (DBI.fromInt 10))])
                                   in (BIF.erlang__op_lesser [next_1, rop_45])
                                 _ -> (EXC.badarg1 lop_41)
                           _ -> (EXC.badarg1 lop_38)
                     in
                       case lop_37 of
                         (ErlangAtom "true") -> (ErlangAtom "true")
                         (ErlangAtom "false") ->
                           let
                             lop_50 =
                               (BIF.erlang__op_greaterEq
                                  [next_1, (ErlangInt (DBI.fromInt 97))])
                           in
                             case lop_50 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let
                                   lop_53 =
                                     (BIF.erlang__op_greater
                                        [b_7, (ErlangInt (DBI.fromInt 10))])
                                 in
                                   case lop_53 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       let   
                                         lop_58 =
                                           (BIF.erlang__op_plus
                                              [(ErlangInt (DBI.fromInt 97)),
                                               b_7])
                                       in let
                                         rop_57 =
                                           (BIF.erlang__op_minus
                                              [lop_58,
                                               (ErlangInt (DBI.fromInt 10))])
                                       in
                                         (BIF.erlang__op_lesser
                                            [next_1, rop_57])
                                     _ -> (EXC.badarg1 lop_53)
                               _ -> (EXC.badarg1 lop_50)
                         _ -> (EXC.badarg1 lop_37)
                   _ -> (EXC.badarg1 lop_26)
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_63 =
                       (BIF.erlang__op_greaterEq
                          [prev_8, (ErlangInt (DBI.fromInt 48))])
                   in let
                     lop_62 =
                       case lop_63 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             lop_66 =
                               (BIF.erlang__op_lesserEq
                                  [prev_8, (ErlangInt (DBI.fromInt 57))])
                           in
                             case lop_66 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let
                                   rop_70 =
                                     (BIF.erlang__op_plus
                                        [(ErlangInt (DBI.fromInt 48)), b_7])
                                 in (BIF.erlang__op_lesser [prev_8, rop_70])
                               _ -> (EXC.badarg1 lop_66)
                         _ -> (EXC.badarg1 lop_63)
                   in
                     case lop_62 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_74 =
                             (BIF.erlang__op_greaterEq
                                [prev_8, (ErlangInt (DBI.fromInt 65))])
                         in let
                           lop_73 =
                             case lop_74 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let
                                   lop_77 =
                                     (BIF.erlang__op_greater
                                        [b_7, (ErlangInt (DBI.fromInt 10))])
                                 in
                                   case lop_77 of
                                     (ErlangAtom "false") ->
                                       (ErlangAtom "false")
                                     (ErlangAtom "true") ->
                                       let   
                                         lop_82 =
                                           (BIF.erlang__op_plus
                                              [(ErlangInt (DBI.fromInt 65)),
                                               b_7])
                                       in let
                                         rop_81 =
                                           (BIF.erlang__op_minus
                                              [lop_82,
                                               (ErlangInt (DBI.fromInt 10))])
                                       in
                                         (BIF.erlang__op_lesser
                                            [prev_8, rop_81])
                                     _ -> (EXC.badarg1 lop_77)
                               _ -> (EXC.badarg1 lop_74)
                         in
                           case lop_73 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 lop_86 =
                                   (BIF.erlang__op_greaterEq
                                      [prev_8, (ErlangInt (DBI.fromInt 97))])
                               in
                                 case lop_86 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     let
                                       lop_89 =
                                         (BIF.erlang__op_greater
                                            [b_7, (ErlangInt (DBI.fromInt 10))])
                                     in
                                       case lop_89 of
                                         (ErlangAtom "false") ->
                                           (ErlangAtom "false")
                                         (ErlangAtom "true") ->
                                           let   
                                             lop_94 =
                                               (BIF.erlang__op_plus
                                                  [(ErlangInt (DBI.fromInt 97)),
                                                   b_7])
                                           in let
                                             rop_93 =
                                               (BIF.erlang__op_minus
                                                  [lop_94,
                                                   (ErlangInt
                                                      (DBI.fromInt 10))])
                                           in
                                             (BIF.erlang__op_lesser
                                                [prev_8, rop_93])
                                         _ -> (EXC.badarg1 lop_89)
                                   _ -> (EXC.badarg1 lop_86)
                             _ -> (EXC.badarg1 lop_73)
                       _ -> (EXC.badarg1 lop_62)
                 _ -> (EXC.badarg1 lop_25)))) =
  (erlps__scan_based_int__9
     [cs_2, st_3, line_4, col_5, toks_6, b_7,
      (ErlangCons next_1
         (ErlangCons (ErlangInt (DBI.fromInt 95)) ncs_9)),
      bcs_10, (ErlangAtom "with_underscore")])
erlps__scan_based_int__9 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                          _st_2, line_3, col_4, toks_5, b_6, ncs_7, bcs_8, us_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  let    tup_el_16 = (ErlangTuple [b_6, ncs_7, bcs_8, us_9])
  in let tup_el_21 = (ErlangFun 6 erlps__scan_based_int__6)
  in let
    tup_el_11 =
      (ErlangTuple [cs_1, col_4, toks_5, line_3, tup_el_16, tup_el_21])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_11])
erlps__scan_based_int__9 [cs_0@(ErlangEmptyList), _st_1, line_2,
                          col_3, toks_4, b_5, ncs_6, bcs_7, us_8]
  =
  let    tup_el_15 = (ErlangTuple [b_5, ncs_6, bcs_7, us_8])
  in let tup_el_20 = (ErlangFun 6 erlps__scan_based_int__6)
  in let
    tup_el_10 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, tup_el_15, tup_el_20])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_10])
erlps__scan_based_int__9 [cs_0, st_1, line_2, col_3, toks_4, b_5,
                          ncs0_6, bcs_7, us_8]
  =
  let   
    ncs_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_6])
  in let
    case_11 =
      (EXC.tryCatch
         (\ _ ->
            let arg_12 = (erlps__remove_digit_separators__2 [ncs_10, us_8])
            in (BIF.erlang__list_to_integer__2 [arg_12, b_5]))
         (\ ex_17 ->
            case ex_17 of
              (ErlangTuple [(ErlangAtom "throw"), payload_18, _]) -> payload_18
              (ErlangTuple [(ErlangAtom "error"), payload_19, stack_20]) ->
                let tup_el_22 = (ErlangTuple [payload_19, stack_20])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_22])
              (ErlangTuple [(ErlangAtom "exit"), payload_25, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_25])
              ex_17 -> (EXC.raise ex_17)))
  in
    case case_11 of
      n_28 | (isEInt n_28) ->
        let arg_35 = (BIF.erlang__op_append [bcs_7, ncs_10])
        in
          (erlps__tok3__8
             [cs_0, st_1, line_2, col_3, toks_4, (ErlangAtom "integer"),
              arg_35, n_28])
      _ ->
        let    lop_39 = (BIF.erlang__length__1 [bcs_7])
        in let rop_41 = (BIF.erlang__length__1 [ncs_10])
        in let len_43 = (BIF.erlang__op_plus [lop_39, rop_41])
        in let ncol_46 = (erlps__incr_column__2 [col_3, len_43])
        in let
          arg_47 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "integer")])
        in
          (erlps__scan_error__6
             [arg_47, line_2, col_3, line_2, ncol_46, cs_0])
      something_else -> (EXC.case_clause something_else)
erlps__scan_based_int__9 [arg_55, arg_56, arg_57, arg_58, arg_59,
                          arg_60, arg_61, arg_62, arg_63]
  =
  (EXC.function_clause unit)
erlps__scan_based_int__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_fraction__6 :: ErlangFun
erlps__scan_fraction__6 [cs_0, st_1, line_2, col_3, toks_4,
                         (ErlangTuple [ncs_5, us_6])]
  =
  (erlps__scan_fraction__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_fraction__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                         arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_fraction__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_fraction__7 :: ErlangFun
erlps__scan_fraction__7 [(ErlangCons c_0 cs_1), st_2, line_3,
                         col_4, toks_5, ncs_6, us_7]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_fraction__7
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6),
      us_7])
erlps__scan_fraction__7 [(ErlangCons (ErlangInt num_0) (ErlangCons next_1 cs_2)),
                         st_3, line_4, col_5, toks_6,
                         ncs_8@(ErlangCons prev_7 _), _us_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95)))
  , ((((weakGeq next_1 (ErlangInt (DBI.fromInt 48))) &&
         (weakLeq next_1 (ErlangInt (DBI.fromInt 57)))) &&
        (weakGeq prev_7 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq prev_7 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_fraction__7
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons next_1
         (ErlangCons (ErlangInt (DBI.fromInt 95)) ncs_8)),
      (ErlangAtom "with_underscore")])
erlps__scan_fraction__7 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                         _st_2, line_3, col_4, toks_5, ncs_6, us_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  let    tup_el_14 = (ErlangTuple [ncs_6, us_7])
  in let tup_el_17 = (ErlangFun 6 erlps__scan_fraction__6)
  in let
    tup_el_9 =
      (ErlangTuple [cs_1, col_4, toks_5, line_3, tup_el_14, tup_el_17])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_9])
erlps__scan_fraction__7 [(ErlangCons e_0 cs_1), st_2, line_3,
                         col_4, toks_5, ncs_6, us_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_17 =
                 (BIF.erlang__op_exactEq [e_0, (ErlangInt (DBI.fromInt 101))])
             in
               case lop_17 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [e_0, (ErlangInt (DBI.fromInt 69))])
                 _ -> (EXC.badarg1 lop_17)))) =
  (erlps__scan_exponent_sign__7
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons e_0 ncs_6),
      us_7])
erlps__scan_fraction__7 [cs_0@(ErlangEmptyList), _st_1, line_2,
                         col_3, toks_4, ncs_5, us_6]
  =
  let    tup_el_13 = (ErlangTuple [ncs_5, us_6])
  in let tup_el_16 = (ErlangFun 6 erlps__scan_fraction__6)
  in let
    tup_el_8 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, tup_el_13, tup_el_16])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan_fraction__7 [cs_0, st_1, line_2, col_3, toks_4,
                         ncs_5, us_6]
  =
  (erlps__float_end__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_fraction__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                         arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__scan_fraction__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_exponent_sign__6 :: ErlangFun
erlps__scan_exponent_sign__6 [cs_0, st_1, line_2, col_3, toks_4,
                              (ErlangTuple [ncs_5, us_6])]
  =
  (erlps__scan_exponent_sign__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_exponent_sign__6 [arg_14, arg_15, arg_16, arg_17,
                              arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_exponent_sign__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_exponent_sign__7 :: ErlangFun
erlps__scan_exponent_sign__7 [(ErlangCons c_0 cs_1), st_2,
                              line_3, col_4, toks_5, ncs_6, us_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_17 =
                 (BIF.erlang__op_exactEq [c_0, (ErlangInt (DBI.fromInt 43))])
             in
               case lop_17 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [c_0, (ErlangInt (DBI.fromInt 45))])
                 _ -> (EXC.badarg1 lop_17)))) =
  (erlps__scan_exponent__7
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6),
      us_7])
erlps__scan_exponent_sign__7 [cs_0@(ErlangEmptyList), _st_1,
                              line_2, col_3, toks_4, ncs_5, us_6]
  =
  let    tup_el_13 = (ErlangTuple [ncs_5, us_6])
  in let tup_el_16 = (ErlangFun 6 erlps__scan_exponent_sign__6)
  in let
    tup_el_8 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, tup_el_13, tup_el_16])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan_exponent_sign__7 [cs_0, st_1, line_2, col_3, toks_4,
                              ncs_5, us_6]
  =
  (erlps__scan_exponent__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_exponent_sign__7 [arg_14, arg_15, arg_16, arg_17,
                              arg_18, arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__scan_exponent_sign__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_exponent__6 :: ErlangFun
erlps__scan_exponent__6 [cs_0, st_1, line_2, col_3, toks_4,
                         (ErlangTuple [ncs_5, us_6])]
  =
  (erlps__scan_exponent__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_exponent__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                         arg_19]
  =
  (EXC.function_clause unit)
erlps__scan_exponent__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_exponent__7 :: ErlangFun
erlps__scan_exponent__7 [(ErlangCons c_0 cs_1), st_2, line_3,
                         col_4, toks_5, ncs_6, us_7]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_exponent__7
     [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6),
      us_7])
erlps__scan_exponent__7 [(ErlangCons (ErlangInt num_0) (ErlangCons next_1 cs_2)),
                         st_3, line_4, col_5, toks_6,
                         ncs_8@(ErlangCons prev_7 _), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95)))
  , ((((weakGeq next_1 (ErlangInt (DBI.fromInt 48))) &&
         (weakLeq next_1 (ErlangInt (DBI.fromInt 57)))) &&
        (weakGeq prev_7 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq prev_7 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__scan_exponent__7
     [cs_2, st_3, line_4, col_5, toks_6,
      (ErlangCons next_1
         (ErlangCons (ErlangInt (DBI.fromInt 95)) ncs_8)),
      (ErlangAtom "with_underscore")])
erlps__scan_exponent__7 [cs_1@(ErlangCons (ErlangInt num_0) (ErlangEmptyList)),
                         _st_2, line_3, col_4, toks_5, ncs_6, us_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  let    tup_el_14 = (ErlangTuple [ncs_6, us_7])
  in let tup_el_17 = (ErlangFun 6 erlps__scan_exponent__6)
  in let
    tup_el_9 =
      (ErlangTuple [cs_1, col_4, toks_5, line_3, tup_el_14, tup_el_17])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_9])
erlps__scan_exponent__7 [cs_0@(ErlangEmptyList), _st_1, line_2,
                         col_3, toks_4, ncs_5, us_6]
  =
  let    tup_el_13 = (ErlangTuple [ncs_5, us_6])
  in let tup_el_16 = (ErlangFun 6 erlps__scan_exponent__6)
  in let
    tup_el_8 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, tup_el_13, tup_el_16])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_8])
erlps__scan_exponent__7 [cs_0, st_1, line_2, col_3, toks_4,
                         ncs_5, us_6]
  =
  (erlps__float_end__7
     [cs_0, st_1, line_2, col_3, toks_4, ncs_5, us_6])
erlps__scan_exponent__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                         arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__scan_exponent__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_end__7 :: ErlangFun
erlps__float_end__7 [cs_0, st_1, line_2, col_3, toks_4, ncs0_5,
                     us_6]
  =
  let   
    ncs_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_5])
  in let
    case_9 =
      (EXC.tryCatch
         (\ _ ->
            let arg_10 = (erlps__remove_digit_separators__2 [ncs_8, us_6])
            in (BIF.erlang__list_to_float__1 [arg_10]))
         (\ ex_14 ->
            case ex_14 of
              (ErlangTuple [(ErlangAtom "throw"), payload_15, _]) -> payload_15
              (ErlangTuple [(ErlangAtom "error"), payload_16, stack_17]) ->
                let tup_el_19 = (ErlangTuple [payload_16, stack_17])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_19])
              (ErlangTuple [(ErlangAtom "exit"), payload_22, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_22])
              ex_14 -> (EXC.raise ex_14)))
  in
    case case_9 of
      f_25 | (isEFloat f_25) ->
        (erlps__tok3__8
           [cs_0, st_1, line_2, col_3, toks_4, (ErlangAtom "float"), ncs_8,
            f_25])
      _ ->
        let    arg_35 = (BIF.erlang__length__1 [ncs_8])
        in let ncol_37 = (erlps__incr_column__2 [col_3, arg_35])
        in let
          arg_38 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "float")])
        in
          (erlps__scan_error__6
             [arg_38, line_2, col_3, line_2, ncol_37, cs_0])
      something_else -> (EXC.case_clause something_else)
erlps__float_end__7 [arg_46, arg_47, arg_48, arg_49, arg_50,
                     arg_51, arg_52]
  =
  (EXC.function_clause unit)
erlps__float_end__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_comment__6 :: ErlangFun
erlps__skip_comment__6 [(ErlangCons c_0 cs_1), st_2, line_3,
                        col_4, toks_5, n_6]
  | ((((/=) c_0 (ErlangInt (DBI.fromInt 10))) && (isEInt c_0)) &&
       (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let    lop_8 = (BIF.erlang__is_integer__1 [c_0])
  in let
    case_7 =
      case lop_8 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let   
            lop_11 =
              (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 0))])
          in let
            lop_10 =
              case lop_11 of
                (ErlangAtom "false") -> (ErlangAtom "false")
                (ErlangAtom "true") ->
                  (BIF.erlang__op_lesser [c_0, (ErlangInt (DBI.fromInt 55296))])
                _ -> (EXC.badarg1 lop_11)
          in
            case lop_10 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let   
                  lop_17 =
                    (BIF.erlang__op_greater
                       [c_0, (ErlangInt (DBI.fromInt 57343))])
                in let
                  lop_16 =
                    case lop_17 of
                      (ErlangAtom "false") -> (ErlangAtom "false")
                      (ErlangAtom "true") ->
                        (BIF.erlang__op_lesser
                           [c_0, (ErlangInt (DBI.fromInt 65534))])
                      _ -> (EXC.badarg1 lop_17)
                in
                  case lop_16 of
                    (ErlangAtom "true") -> (ErlangAtom "true")
                    (ErlangAtom "false") ->
                      let
                        lop_22 =
                          (BIF.erlang__op_greater
                             [c_0, (ErlangInt (DBI.fromInt 65535))])
                      in
                        case lop_22 of
                          (ErlangAtom "false") -> (ErlangAtom "false")
                          (ErlangAtom "true") ->
                            (BIF.erlang__op_lesserEq
                               [c_0, (ErlangInt (DBI.fromInt 1114111))])
                          _ -> (EXC.badarg1 lop_22)
                    _ -> (EXC.badarg1 lop_16)
              _ -> (EXC.badarg1 lop_10)
        _ -> (EXC.badarg1 lop_8)
  in
    case case_7 of
      (ErlangAtom "true") ->
        let
          arg_32 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__skip_comment__6
             [cs_1, st_2, line_3, col_4, toks_5, arg_32])
      (ErlangAtom "false") ->
        let   
          arg_36 = (BIF.erlang__op_plus [n_6, (ErlangInt (DBI.fromInt 1))])
        in let ncol_39 = (erlps__incr_column__2 [col_4, arg_36])
        in let
          arg_40 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
        in
          (erlps__scan_error__6
             [arg_40, line_3, col_4, line_3, ncol_39, cs_1])
      something_else -> (EXC.case_clause something_else)
erlps__skip_comment__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                        col_3, toks_4, n_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__skip_comment__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, n_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__skip_comment__6 [cs_0, st_1, line_2, col_3, toks_4, n_5] =
  let arg_9 = (erlps__incr_column__2 [col_3, n_5])
  in (erlps__scan1__5 [cs_0, st_1, line_2, arg_9, toks_4])
erlps__skip_comment__6 [arg_13, arg_14, arg_15, arg_16, arg_17,
                        arg_18]
  =
  (EXC.function_clause unit)
erlps__skip_comment__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_comment__6 :: ErlangFun
erlps__scan_comment__6 [(ErlangCons c_0 cs_1), st_2, line_3,
                        col_4, toks_5, ncs_6]
  | ((((/=) c_0 (ErlangInt (DBI.fromInt 10))) && (isEInt c_0)) &&
       (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let    lop_8 = (BIF.erlang__is_integer__1 [c_0])
  in let
    case_7 =
      case lop_8 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let   
            lop_11 =
              (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 0))])
          in let
            lop_10 =
              case lop_11 of
                (ErlangAtom "false") -> (ErlangAtom "false")
                (ErlangAtom "true") ->
                  (BIF.erlang__op_lesser [c_0, (ErlangInt (DBI.fromInt 55296))])
                _ -> (EXC.badarg1 lop_11)
          in
            case lop_10 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let   
                  lop_17 =
                    (BIF.erlang__op_greater
                       [c_0, (ErlangInt (DBI.fromInt 57343))])
                in let
                  lop_16 =
                    case lop_17 of
                      (ErlangAtom "false") -> (ErlangAtom "false")
                      (ErlangAtom "true") ->
                        (BIF.erlang__op_lesser
                           [c_0, (ErlangInt (DBI.fromInt 65534))])
                      _ -> (EXC.badarg1 lop_17)
                in
                  case lop_16 of
                    (ErlangAtom "true") -> (ErlangAtom "true")
                    (ErlangAtom "false") ->
                      let
                        lop_22 =
                          (BIF.erlang__op_greater
                             [c_0, (ErlangInt (DBI.fromInt 65535))])
                      in
                        case lop_22 of
                          (ErlangAtom "false") -> (ErlangAtom "false")
                          (ErlangAtom "true") ->
                            (BIF.erlang__op_lesserEq
                               [c_0, (ErlangInt (DBI.fromInt 1114111))])
                          _ -> (EXC.badarg1 lop_22)
                    _ -> (EXC.badarg1 lop_16)
              _ -> (EXC.badarg1 lop_10)
        _ -> (EXC.badarg1 lop_8)
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__scan_comment__6
           [cs_1, st_2, line_3, col_4, toks_5, (ErlangCons c_0 ncs_6)])
      (ErlangAtom "false") ->
        let    lop_37 = (BIF.erlang__length__1 [ncs_6])
        in let
          arg_36 =
            (BIF.erlang__op_plus [lop_37, (ErlangInt (DBI.fromInt 1))])
        in let ncol_40 = (erlps__incr_column__2 [col_4, arg_36])
        in let
          arg_41 =
            (ErlangTuple [(ErlangAtom "illegal"), (ErlangAtom "character")])
        in
          (erlps__scan_error__6
             [arg_41, line_3, col_4, line_3, ncol_40, cs_1])
      something_else -> (EXC.case_clause something_else)
erlps__scan_comment__6 [cs_0@(ErlangEmptyList), _st_1, line_2,
                        col_3, toks_4, ncs_5]
  =
  let    tup_el_13 = (ErlangFun 6 erlps__scan_comment__6)
  in let
    tup_el_7 =
      (ErlangTuple [cs_0, col_3, toks_4, line_2, ncs_5, tup_el_13])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_7])
erlps__scan_comment__6 [cs_0, st_1, line_2, col_3, toks_4,
                        ncs0_5]
  =
  let
    ncs_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ncs0_5])
  in
    (erlps__tok3__8
       [cs_0, st_1, line_2, col_3, toks_4, (ErlangAtom "comment"),
        ncs_7, ncs_7])
erlps__scan_comment__6 [arg_16, arg_17, arg_18, arg_19, arg_20,
                        arg_21]
  =
  (EXC.function_clause unit)
erlps__scan_comment__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tok2__7 :: ErlangFun
erlps__tok2__7 [cs_0,
                st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                   (ErlangAtom "false")]),
                line_2, col_3@(ErlangAtom "no_col"), toks_4, _wcs_5, p_6]
  =
  let    tup_el_14 = (erlps__anno__1 [line_2])
  in let head_12 = (ErlangTuple [p_6, tup_el_14])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, col_3, (ErlangCons head_12 toks_4)])
erlps__tok2__7 [cs_0, st_1, line_2, col_3, toks_4, wcs_5, p_6] =
  let    anno_11 = (erlps__anno__4 [line_2, col_3, st_1, wcs_5])
  in let arg_17 = (BIF.erlang__length__1 [wcs_5])
  in let arg_15 = (erlps__incr_column__2 [col_3, arg_17])
  in let head_20 = (ErlangTuple [p_6, anno_11])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, arg_15, (ErlangCons head_20 toks_4)])
erlps__tok2__7 [arg_24, arg_25, arg_26, arg_27, arg_28, arg_29,
                arg_30]
  =
  (EXC.function_clause unit)
erlps__tok2__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tok2__8 :: ErlangFun
erlps__tok2__8 [cs_0,
                st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                   (ErlangAtom "false")]),
                line_2, col_3@(ErlangAtom "no_col"), toks_4, _wcs_5, p_6, _n_7]
  =
  let    tup_el_15 = (erlps__anno__1 [line_2])
  in let head_13 = (ErlangTuple [p_6, tup_el_15])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, col_3, (ErlangCons head_13 toks_4)])
erlps__tok2__8 [cs_0, st_1, line_2, col_3, toks_4, wcs_5, p_6,
                n_7]
  =
  let    anno_12 = (erlps__anno__4 [line_2, col_3, st_1, wcs_5])
  in let arg_16 = (erlps__incr_column__2 [col_3, n_7])
  in let head_20 = (ErlangTuple [p_6, anno_12])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, arg_16, (ErlangCons head_20 toks_4)])
erlps__tok2__8 [arg_24, arg_25, arg_26, arg_27, arg_28, arg_29,
                arg_30, arg_31]
  =
  (EXC.function_clause unit)
erlps__tok2__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tok3__8 :: ErlangFun
erlps__tok3__8 [cs_0,
                st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                   (ErlangAtom "false")]),
                line_2, col_3@(ErlangAtom "no_col"), toks_4, item_5, _s_6,
                sym_7]
  =
  let    tup_el_15 = (erlps__anno__1 [line_2])
  in let head_13 = (ErlangTuple [item_5, tup_el_15, sym_7])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, col_3, (ErlangCons head_13 toks_4)])
erlps__tok3__8 [cs_0, st_1, line_2, col_3, toks_4, item_5,
                string_6, sym_7]
  =
  let   
    tup_el_9 = (erlps__anno__4 [line_2, col_3, st_1, string_6])
  in let token_15 = (ErlangTuple [item_5, tup_el_9, sym_7])
  in let arg_21 = (BIF.erlang__length__1 [string_6])
  in let arg_19 = (erlps__incr_column__2 [col_3, arg_21])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, arg_19, (ErlangCons token_15 toks_4)])
erlps__tok3__8 [arg_26, arg_27, arg_28, arg_29, arg_30, arg_31,
                arg_32, arg_33]
  =
  (EXC.function_clause unit)
erlps__tok3__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tok3__9 :: ErlangFun
erlps__tok3__9 [cs_0,
                st_1@(ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                                   (ErlangAtom "false")]),
                line_2, col_3@(ErlangAtom "no_col"), toks_4, item_5, _string_6,
                sym_7, _length_8]
  =
  let    tup_el_16 = (erlps__anno__1 [line_2])
  in let head_14 = (ErlangTuple [item_5, tup_el_16, sym_7])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, col_3, (ErlangCons head_14 toks_4)])
erlps__tok3__9 [cs_0, st_1, line_2, col_3, toks_4, item_5,
                string_6, sym_7, length_8]
  =
  let   
    tup_el_10 = (erlps__anno__4 [line_2, col_3, st_1, string_6])
  in let token_16 = (ErlangTuple [item_5, tup_el_10, sym_7])
  in let arg_20 = (erlps__incr_column__2 [col_3, length_8])
  in
    (erlps__scan1__5
       [cs_0, st_1, line_2, arg_20, (ErlangCons token_16 toks_4)])
erlps__tok3__9 [arg_26, arg_27, arg_28, arg_29, arg_30, arg_31,
                arg_32, arg_33, arg_34]
  =
  (EXC.function_clause unit)
erlps__tok3__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_error__6 :: ErlangFun
erlps__scan_error__6 [error_0, line_1, col_2, endline_3,
                      endcol_4, rest_5]
  =
  let    loc_8 = (erlps__location__2 [line_1, col_2])
  in let endloc_11 = (erlps__location__2 [endline_3, endcol_4])
  in (erlps__scan_error__4 [error_0, loc_8, endloc_11, rest_5])
erlps__scan_error__6 [arg_16, arg_17, arg_18, arg_19, arg_20,
                      arg_21]
  =
  (EXC.function_clause unit)
erlps__scan_error__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_error__4 :: ErlangFun
erlps__scan_error__4 [error_0, errorloc_1, endloc_2, rest_3] =
  let   
    tup_el_6 =
      (ErlangTuple [errorloc_1, (ErlangAtom "erl_scan"), error_0])
  in let
    tup_el_4 =
      (ErlangTuple [(ErlangAtom "error"), tup_el_6, endloc_2])
  in (ErlangTuple [tup_el_4, rest_3])
erlps__scan_error__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__scan_error__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__anno__4 :: ErlangFun
erlps__anno__4 [line_0, (ErlangAtom "no_col"),
                (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                              (ErlangAtom "false")]),
                _string_1]
  =
  (erlps__anno__1 [line_0])
erlps__anno__4 [line_0, (ErlangAtom "no_col"),
                (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                              (ErlangAtom "true")]),
                string_1]
  =
  let anno_3 = (erlps__anno__1 [line_0])
  in
    (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_text__2"
       [string_1, anno_3])
erlps__anno__4 [line_0, col_1,
                (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                              (ErlangAtom "false")]),
                _string_2]
  =
  let arg_3 = (ErlangTuple [line_0, col_1])
  in (erlps__anno__1 [arg_3])
erlps__anno__4 [line_0, col_1,
                (ErlangTuple [(ErlangAtom "erl_scan"), _, _, _,
                              (ErlangAtom "true")]),
                string_2]
  =
  let    arg_3 = (ErlangTuple [line_0, col_1])
  in let anno_6 = (erlps__anno__1 [arg_3])
  in
    (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_text__2"
       [string_2, anno_6])
erlps__anno__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__anno__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__location__2 :: ErlangFun
erlps__location__2 [line_0, (ErlangAtom "no_col")] = line_0
erlps__location__2 [line_0, col_1] | (isEInt col_1) =
  (ErlangTuple [line_0, col_1])
erlps__location__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__location__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__anno__1 :: ErlangFun
erlps__anno__1 [location_0] =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [location_0])
erlps__anno__1 [arg_2] = (EXC.function_clause unit)
erlps__anno__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__incr_column__2 :: ErlangFun
erlps__incr_column__2 [col_0@(ErlangAtom "no_col"), _n_1] = col_0
erlps__incr_column__2 [col_0, n_1] | (isEInt col_0) =
  (BIF.erlang__op_plus [col_0, n_1])
erlps__incr_column__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__incr_column__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_column__2 :: ErlangFun
erlps__new_column__2 [col_0@(ErlangAtom "no_col"), _ncol_1] =
  col_0
erlps__new_column__2 [col_0, ncol_1] | (isEInt col_0) = ncol_1
erlps__new_column__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__new_column__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nl_spcs__1 :: ErlangFun
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (make_string "\n ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3))) =
  (make_string "\n  ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (make_string "\n   ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 5))) =
  (make_string "\n    ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 6))) =
  (make_string "\n     ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 7))) =
  (make_string "\n      ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (make_string "\n       ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (make_string "\n        ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (make_string "\n         ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (make_string "\n          ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (make_string "\n           ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (make_string "\n            ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 14))) =
  (make_string "\n             ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 15))) =
  (make_string "\n              ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 16))) =
  (make_string "\n               ")
erlps__nl_spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 17))) =
  (make_string "\n                ")
erlps__nl_spcs__1 [arg_1] = (EXC.function_clause unit)
erlps__nl_spcs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spcs__1 :: ErlangFun
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (make_string " ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (make_string "  ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3))) =
  (make_string "   ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (make_string "    ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 5))) =
  (make_string "     ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 6))) =
  (make_string "      ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 7))) =
  (make_string "       ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (make_string "        ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (make_string "         ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (make_string "          ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (make_string "           ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (make_string "            ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (make_string "             ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 14))) =
  (make_string "              ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 15))) =
  (make_string "               ")
erlps__spcs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 16))) =
  (make_string "                ")
erlps__spcs__1 [arg_1] = (EXC.function_clause unit)
erlps__spcs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nl_tabs__1 :: ErlangFun
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (make_string "\n\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3))) =
  (make_string "\n\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (make_string "\n\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 5))) =
  (make_string "\n\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 6))) =
  (make_string "\n\t\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 7))) =
  (make_string "\n\t\t\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (make_string "\n\t\t\t\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (make_string "\n\t\t\t\t\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (make_string "\n\t\t\t\t\t\t\t\t\t")
erlps__nl_tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (make_string "\n\t\t\t\t\t\t\t\t\t\t")
erlps__nl_tabs__1 [arg_1] = (EXC.function_clause unit)
erlps__nl_tabs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tabs__1 :: ErlangFun
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (make_string "\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (make_string "\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3))) =
  (make_string "\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (make_string "\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 5))) =
  (make_string "\t\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 6))) =
  (make_string "\t\t\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 7))) =
  (make_string "\t\t\t\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (make_string "\t\t\t\t\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (make_string "\t\t\t\t\t\t\t\t\t")
erlps__tabs__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (make_string "\t\t\t\t\t\t\t\t\t\t")
erlps__tabs__1 [arg_1] = (EXC.function_clause unit)
erlps__tabs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reserved_word__1 :: ErlangFun
erlps__reserved_word__1 [(ErlangAtom "after")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "begin")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "case")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "try")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "cond")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "catch")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "andalso")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "orelse")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "end")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "fun")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "if")] = (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "let")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "of")] = (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "receive")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "when")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "bnot")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "not")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "div")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "rem")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "band")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "and")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "bor")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "bxor")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "bsl")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "bsr")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "or")] = (ErlangAtom "true")
erlps__reserved_word__1 [(ErlangAtom "xor")] =
  (ErlangAtom "true")
erlps__reserved_word__1 [_] = (ErlangAtom "false")
erlps__reserved_word__1 [arg_0] = (EXC.function_clause unit)
erlps__reserved_word__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)