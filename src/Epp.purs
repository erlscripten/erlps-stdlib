module Epp(erlps__open__1, erlps__open__2, erlps__open__3,
           erlps__open__5, erlps__close__1, erlps__format_error__1,
           erlps__scan_erl_form__1, erlps__parse_erl_form__1,
           erlps__macro_defs__1, erlps__parse_file__1, erlps__parse_file__2,
           erlps__parse_file__3, erlps__default_encoding__0,
           erlps__encoding_to_string__1,
           erlps__read_encoding_from_binary__1,
           erlps__read_encoding_from_binary__2, erlps__set_encoding__1,
           erlps__set_encoding__2, erlps__read_encoding__1,
           erlps__read_encoding__2, erlps__interpret_file_attribute__1,
           erlps__normalize_typed_record_fields__1,
           erlps__restore_typed_record_fields__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__open__2 :: ErlangFun
erlps__open__2 [name_0, path_1] =
  (erlps__open__3 [name_0, path_1, ErlangEmptyList])
erlps__open__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__open__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__open__3 :: ErlangFun
erlps__open__3 [name_0, path_1, pdm_2] =
  let    head_4 = (ErlangTuple [(ErlangAtom "name"), name_0])
  in let head_8 = (ErlangTuple [(ErlangAtom "includes"), path_1])
  in let head_12 = (ErlangTuple [(ErlangAtom "macros"), pdm_2])
  in let tup_el_21 = (make_string "")
  in let tup_el_22 = (make_string "")
  in let tup_el_26 = (ErlangMap Map.empty)
  in let tup_el_27 = (ErlangMap Map.empty)
  in let
    arg_16 =
      (ErlangTuple
         [(ErlangAtom "epp"), (ErlangAtom "undefined"),
          (ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 0)),
          tup_el_21, tup_el_22, ErlangEmptyList, ErlangEmptyList,
          ErlangEmptyList, tup_el_26, tup_el_27, (ErlangAtom "utf8"),
          (ErlangAtom "false"), ErlangEmptyList])
  in
    (erlps__internal_open__2
       [(ErlangCons head_4
           (ErlangCons head_8 (ErlangCons head_12 ErlangEmptyList))),
        arg_16])
erlps__open__3 [arg_31, arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__open__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__open__5 :: ErlangFun
erlps__open__5 [name_0, file_1, startlocation_2, path_3, pdm_4] =
  let    head_6 = (ErlangTuple [(ErlangAtom "name"), name_0])
  in let head_10 = (ErlangTuple [(ErlangAtom "includes"), path_3])
  in let head_14 = (ErlangTuple [(ErlangAtom "macros"), pdm_4])
  in let tup_el_23 = (make_string "")
  in let tup_el_24 = (make_string "")
  in let tup_el_28 = (ErlangMap Map.empty)
  in let tup_el_29 = (ErlangMap Map.empty)
  in let
    arg_18 =
      (ErlangTuple
         [(ErlangAtom "epp"), file_1, startlocation_2,
          (ErlangInt (DBI.fromInt 0)), tup_el_23, tup_el_24,
          ErlangEmptyList, ErlangEmptyList, ErlangEmptyList, tup_el_28,
          tup_el_29, (ErlangAtom "utf8"), (ErlangAtom "true"),
          ErlangEmptyList])
  in
    (erlps__internal_open__2
       [(ErlangCons head_6
           (ErlangCons head_10 (ErlangCons head_14 ErlangEmptyList))),
        arg_18])
erlps__open__5 [arg_33, arg_34, arg_35, arg_36, arg_37] =
  (EXC.function_clause unit)
erlps__open__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__open__1 :: ErlangFun
erlps__open__1 [options_0] =
  let    tup_el_7 = (make_string "")
  in let tup_el_8 = (make_string "")
  in let tup_el_12 = (ErlangMap Map.empty)
  in let tup_el_13 = (ErlangMap Map.empty)
  in let
    arg_2 =
      (ErlangTuple
         [(ErlangAtom "epp"), (ErlangAtom "undefined"),
          (ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 0)),
          tup_el_7, tup_el_8, ErlangEmptyList, ErlangEmptyList,
          ErlangEmptyList, tup_el_12, tup_el_13, (ErlangAtom "utf8"),
          (ErlangAtom "false"), ErlangEmptyList])
  in (erlps__internal_open__2 [options_0, arg_2])
erlps__open__1 [arg_17] = (EXC.function_clause unit)
erlps__open__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__internal_open__2 :: ErlangFun
erlps__internal_open__2 [options_0, st_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
         [(ErlangAtom "name"), options_0])
  in
    case case_2 of
      (ErlangAtom "undefined") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      name_6 ->
        let    self_7 = (BIF.erlang__self__0 [])
        in let
          arg_8 =
            (ErlangFun 0
               let
                 lambda_9 [] =
                   (erlps__server__4 [self_7, name_6, options_0, st_1])
                 lambda_9 [] = (EXC.function_clause unit)
                 lambda_9 args = (EXC.badarity (ErlangFun 0 lambda_9) args)
               in lambda_9)
        in let epp_14 = (BIF.erlang__spawn__1 [arg_8])
        in let case_15 = (erlps__epp_request__1 [epp_14])
        in
          case case_15 of
            (ErlangTuple [(ErlangAtom "ok"), pid_17, encoding_18]) ->
              let
                case_19 =
                  (BIF.do_remote_fun_call "Proplists" "erlps__get_bool__2"
                     [(ErlangAtom "extra"), options_0])
              in
                case case_19 of
                  (ErlangAtom "true") ->
                    let
                      head_25 =
                        (ErlangTuple [(ErlangAtom "encoding"), encoding_18])
                    in
                      (ErlangTuple
                         [(ErlangAtom "ok"), pid_17,
                          (ErlangCons head_25 ErlangEmptyList)])
                  (ErlangAtom "false") ->
                    (ErlangTuple [(ErlangAtom "ok"), pid_17])
                  something_else -> (EXC.case_clause something_else)
            other_31 -> other_31
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__internal_open__2 [arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__internal_open__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__close__1 :: ErlangFun
erlps__close__1 [epp_0] =
  let   
    ref_3 = (BIF.erlang__monitor__2 [(ErlangAtom "process"), epp_0])
  in let
    r_6 = (erlps__epp_request__2 [epp_0, (ErlangAtom "close")])
  in
    case (ErlangInt (DBI.fromInt 1)) of
      (ErlangAtom "processes_unsuported") -> r_6
      _ -> (EXC.badmatch (ErlangInt (DBI.fromInt 1)))
erlps__close__1 [arg_8] = (EXC.function_clause unit)
erlps__close__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_erl_form__1 :: ErlangFun
erlps__scan_erl_form__1 [epp_0] =
  (erlps__epp_request__2 [epp_0, (ErlangAtom "scan_erl_form")])
erlps__scan_erl_form__1 [arg_3] = (EXC.function_clause unit)
erlps__scan_erl_form__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_erl_form__1 :: ErlangFun
erlps__parse_erl_form__1 [epp_0] =
  let
    case_1 =
      (erlps__epp_request__2 [epp_0, (ErlangAtom "scan_erl_form")])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"), toks_4]) ->
        (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_form__1"
           [toks_4])
      other_6 -> other_6
      something_else -> (EXC.case_clause something_else)
erlps__parse_erl_form__1 [arg_7] = (EXC.function_clause unit)
erlps__parse_erl_form__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_defs__1 :: ErlangFun
erlps__macro_defs__1 [epp_0] =
  (erlps__epp_request__2 [epp_0, (ErlangAtom "macro_defs")])
erlps__macro_defs__1 [arg_3] = (EXC.function_clause unit)
erlps__macro_defs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_error__1 :: ErlangFun
erlps__format_error__1 [(ErlangAtom "cannot_parse")] =
  let arg_0 = (make_string "cannot parse file, giving up")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_0, ErlangEmptyList])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "bad"), w_0])]
  =
  let arg_1 = (make_string "badly formed \'~s\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons w_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangAtom "missing_parenthesis")] =
  let
    arg_0 =
      (make_string
         "badly formed define: missing closing right parenthesis")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_0, ErlangEmptyList])
erlps__format_error__1 [(ErlangAtom "premature_end")] =
  (make_string "premature end")
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "call"),
                                      what_0])]
  =
  let arg_1 = (make_string "illegal macro call \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons what_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "undefined"),
                                      m_0, (ErlangAtom "none")])]
  =
  let arg_1 = (make_string "undefined macro \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "undefined"),
                                      m_0, a_1])]
  =
  let arg_2 = (make_string "undefined macro \'~ts/~p\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons m_0 (ErlangCons a_1 ErlangEmptyList))])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "depth"),
                                      what_0])]
  =
  let arg_1 = (make_string "~s too deep")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons what_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "mismatch"),
                                      m_0])]
  =
  let arg_1 = (make_string "argument mismatch for macro \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "arg_error"),
                                      m_0])]
  =
  let
    arg_1 = (make_string "badly formed argument for macro \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "redefine"),
                                      m_0])]
  =
  let arg_1 = (make_string "redefining macro \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "redefine_predef"),
                                      m_0])]
  =
  let arg_1 = (make_string "redefining predefined macro \'~s\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "circular"),
                                      m_0, (ErlangAtom "none")])]
  =
  let arg_1 = (make_string "circular macro \'~ts\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons m_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "circular"),
                                      m_0, a_1])]
  =
  let arg_2 = (make_string "circular macro \'~ts/~p\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons m_0 (ErlangCons a_1 ErlangEmptyList))])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "include"),
                                      w_0, f_1])]
  =
  let arg_2 = (make_string "can\'t find include ~s \"~ts\"")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons w_0 (ErlangCons f_1 ErlangEmptyList))])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "illegal"),
                                      how_0, what_1])]
  =
  let arg_2 = (make_string "~s \'-~s\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons how_0 (ErlangCons what_1 ErlangEmptyList))])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "illegal_function"),
                                      macro_0])]
  =
  let
    arg_1 = (make_string "?~s can only be used within a function")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons macro_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "illegal_function_usage"),
                                      macro_0])]
  =
  let arg_1 = (make_string "?~s must not begin a form")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons macro_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangAtom "elif_after_else")] =
  (make_string "\'elif\' following \'else\'")
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "NYI"),
                                      what_0])]
  =
  let arg_1 = (make_string "not yet implemented \'~s\'")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons what_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "error"),
                                      term_0])]
  =
  let arg_1 = (make_string "-error(~tp).")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons term_0 ErlangEmptyList)])
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "warning"),
                                      term_0])]
  =
  let arg_1 = (make_string "-warning(~tp).")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons term_0 ErlangEmptyList)])
erlps__format_error__1 [e_0] =
  (BIF.do_remote_fun_call "File" "erlps__format_error__1" [e_0])
erlps__format_error__1 [arg_2] = (EXC.function_clause unit)
erlps__format_error__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_file__3 :: ErlangFun
erlps__parse_file__3 [ifile_0, path_1, predefs_2] =
  let    head_5 = (ErlangTuple [(ErlangAtom "includes"), path_1])
  in let head_9 = (ErlangTuple [(ErlangAtom "macros"), predefs_2])
  in
    (erlps__parse_file__2
       [ifile_0,
        (ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList))])
erlps__parse_file__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__parse_file__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_file__2 :: ErlangFun
erlps__parse_file__2 [ifile_0, options_1] =
  let    head_4 = (ErlangTuple [(ErlangAtom "name"), ifile_0])
  in let tup_el_13 = (make_string "")
  in let tup_el_14 = (make_string "")
  in let tup_el_18 = (ErlangMap Map.empty)
  in let tup_el_19 = (ErlangMap Map.empty)
  in let
    arg_8 =
      (ErlangTuple
         [(ErlangAtom "epp"), (ErlangAtom "undefined"),
          (ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 0)),
          tup_el_13, tup_el_14, ErlangEmptyList, ErlangEmptyList,
          ErlangEmptyList, tup_el_18, tup_el_19, (ErlangAtom "utf8"),
          (ErlangAtom "false"), ErlangEmptyList])
  in let
    case_2 =
      (erlps__internal_open__2 [(ErlangCons head_4 options_1), arg_8])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), epp_23]) ->
        let    forms_25 = (erlps__parse_file__1 [epp_23])
        in let _ = (erlps__close__1 [epp_23])
        in (ErlangTuple [(ErlangAtom "ok"), forms_25])
      (ErlangTuple [(ErlangAtom "ok"), epp_29, extra_30]) ->
        let    forms_32 = (erlps__parse_file__1 [epp_29])
        in let _ = (erlps__close__1 [epp_29])
        in (ErlangTuple [(ErlangAtom "ok"), forms_32, extra_30])
      (ErlangTuple [(ErlangAtom "error"), e_37]) ->
        (ErlangTuple [(ErlangAtom "error"), e_37])
      something_else -> (EXC.case_clause something_else)
erlps__parse_file__2 [arg_40, arg_41] =
  (EXC.function_clause unit)
erlps__parse_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__parse_file__1 :: ErlangFun
erlps__parse_file__1 [epp_0] =
  let case_1 = (erlps__parse_erl_form__1 [epp_0])
  in
    case case_1 of
      (ErlangTuple [(ErlangAtom "ok"), form_3]) ->
        let tail_5 = (erlps__parse_file__1 [epp_0])
        in (ErlangCons form_3 tail_5)
      (ErlangTuple [(ErlangAtom "error"), e_7]) ->
        let    head_8 = (ErlangTuple [(ErlangAtom "error"), e_7])
        in let tail_11 = (erlps__parse_file__1 [epp_0])
        in (ErlangCons head_8 tail_11)
      (ErlangTuple [(ErlangAtom "warning"), w_13]) ->
        let    head_14 = (ErlangTuple [(ErlangAtom "warning"), w_13])
        in let tail_17 = (erlps__parse_file__1 [epp_0])
        in (ErlangCons head_14 tail_17)
      (ErlangTuple [(ErlangAtom "eof"), location_19]) ->
        let head_20 = (ErlangTuple [(ErlangAtom "eof"), location_19])
        in (ErlangCons head_20 ErlangEmptyList)
      something_else -> (EXC.case_clause something_else)
erlps__parse_file__1 [arg_24] = (EXC.function_clause unit)
erlps__parse_file__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__default_encoding__0 :: ErlangFun
erlps__default_encoding__0 [] = (ErlangAtom "utf8")
erlps__default_encoding__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__encoding_to_string__1 :: ErlangFun
erlps__encoding_to_string__1 [(ErlangAtom "latin1")] =
  (make_string "coding: latin-1")
erlps__encoding_to_string__1 [(ErlangAtom "utf8")] =
  (make_string "coding: utf-8")
erlps__encoding_to_string__1 [arg_0] = (EXC.function_clause unit)
erlps__encoding_to_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_encoding__1 :: ErlangFun
erlps__read_encoding__1 [name_0] =
  (erlps__read_encoding__2 [name_0, ErlangEmptyList])
erlps__read_encoding__1 [arg_3] = (EXC.function_clause unit)
erlps__read_encoding__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_encoding__2 :: ErlangFun
erlps__read_encoding__2 [name_0, options_1] =
  let   
    incomment_5 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "in_comment_only"), options_1, (ErlangAtom "true")])
  in let
    case_6 =
      (BIF.do_remote_fun_call "File" "erlps__open__2"
         [name_0, (ErlangCons (ErlangAtom "read") ErlangEmptyList)])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "ok"), file_11]) ->
        (EXC.tryCatchFinally
           (\ _ ->
              (erlps__read_encoding_from_file__2 [file_11, incomment_5]))
           (\ ex_15 -> case ex_15 of ex_15 -> (EXC.raise ex_15))
           (\ _ ->
              let
                match_final_16_18 =
                  (BIF.do_remote_fun_call "File" "erlps__close__1" [file_11])
              in
                case match_final_16_18 of
                  (ErlangAtom "ok") -> match_final_16_18
                  _ -> (EXC.badmatch match_final_16_18)))
      _error_20 -> (ErlangAtom "none")
      something_else -> (EXC.case_clause something_else)
erlps__read_encoding__2 [arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__read_encoding__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_encoding__1 :: ErlangFun
erlps__set_encoding__1 [file_0] =
  (erlps__set_encoding__2 [file_0, (ErlangAtom "utf8")])
erlps__set_encoding__1 [arg_3] = (EXC.function_clause unit)
erlps__set_encoding__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_encoding__2 :: ErlangFun
erlps__set_encoding__2 [file_0, default_1] =
  let   
    encoding_4 =
      (erlps__read_encoding_from_file__2 [file_0, (ErlangAtom "true")])
  in let
    enc_7 =
      case encoding_4 of
        (ErlangAtom "none") -> default_1
        encoding_6 | (encoding_6 == encoding_4) -> encoding_4
        something_else -> (EXC.case_clause something_else)
  in let head_10 = (ErlangTuple [(ErlangAtom "encoding"), enc_7])
  in let
    match_expr_14 =
      (BIF.do_remote_fun_call "Erlang.Io" "erlps__setopts__2"
         [file_0, (ErlangCons head_10 ErlangEmptyList)])
  in
    case match_expr_14 of
      (ErlangAtom "ok") -> encoding_4
      _ -> (EXC.badmatch match_expr_14)
erlps__set_encoding__2 [arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__set_encoding__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_encoding_from_binary__1 :: ErlangFun
erlps__read_encoding_from_binary__1 [binary_0] =
  (erlps__read_encoding_from_binary__2 [binary_0, ErlangEmptyList])
erlps__read_encoding_from_binary__1 [arg_3] =
  (EXC.function_clause unit)
erlps__read_encoding_from_binary__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_encoding_from_binary__2 :: ErlangFun
erlps__read_encoding_from_binary__2 [binary_0, options_1] =
  let
    incomment_5 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "in_comment_only"), options_1, (ErlangAtom "true")])
  in
    (EXC.tryCatch
       (\ _ ->
          let arg_7 = (erlps__fake_reader__1 [(ErlangInt (DBI.fromInt 0))])
          in
            (erlps__com_nl__4
               [binary_0, arg_7, (ErlangInt (DBI.fromInt 0)), incomment_5]))
       (\ ex_12 ->
          case ex_12 of
            (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "no"), _]) ->
              (ErlangAtom "none")
            ex_12 -> (EXC.raise ex_12)))
erlps__read_encoding_from_binary__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__read_encoding_from_binary__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fake_reader__1 :: ErlangFun
erlps__fake_reader__1 [n_0] =
  (ErlangFun 0
     let
       lambda_1 [] | ((==) n_0 (ErlangInt (DBI.fromInt 16))) =
         (BIF.erlang__throw__1 [(ErlangAtom "no")])
       lambda_1 [] =
         let    tup_el_3 = (ErlangBinary (BIN.concat []))
         in let
           arg_5 = (BIF.erlang__op_plus [n_0, (ErlangInt (DBI.fromInt 1))])
         in let tup_el_4 = (erlps__fake_reader__1 [arg_5])
         in (ErlangTuple [tup_el_3, tup_el_4])
       lambda_1 [] = (EXC.function_clause unit)
       lambda_1 args = (EXC.badarity (ErlangFun 0 lambda_1) args)
     in lambda_1)
erlps__fake_reader__1 [arg_8] = (EXC.function_clause unit)
erlps__fake_reader__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__read_encoding_from_file__2 :: ErlangFun
erlps__read_encoding_from_file__2 [file_0, incomment_1] =
  let
    match_expr_5 =
      (BIF.do_remote_fun_call "File" "erlps__position__2"
         [file_0, (ErlangAtom "cur")])
  in
    case match_expr_5 of
      (ErlangTuple [(ErlangAtom "ok"), pos0_4]) ->
        let   
          opts_7 =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__getopts__1" [file_0])
        in let
          encoding0_11 =
            (BIF.lists__keyfind__3
               [(ErlangAtom "encoding"), (ErlangInt (DBI.fromInt 1)), opts_7])
        in let
          binary0_15 =
            (BIF.lists__keyfind__3
               [(ErlangAtom "binary"), (ErlangInt (DBI.fromInt 1)), opts_7])
        in let
          head_20 =
            (ErlangTuple [(ErlangAtom "encoding"), (ErlangAtom "latin1")])
        in let
          match_expr_24 =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__setopts__2"
               [file_0,
                (ErlangCons (ErlangAtom "binary")
                   (ErlangCons head_20 ErlangEmptyList))])
        in
          case match_expr_24 of
            (ErlangAtom "ok") ->
              (EXC.tryCatchFinally
                 (\ _ ->
                    let   
                      fun_25 =
                        (erlps__reader__2 [file_0, (ErlangInt (DBI.fromInt 0))])
                    in let
                      match_expr_30 =
                        (BIF.erlang__apply__2 [fun_25, ErlangEmptyList])
                    in
                      case match_expr_30 of
                        (ErlangTuple [b_28, fun_29]) ->
                          (erlps__com_nl__4
                             [b_28, fun_29, (ErlangInt (DBI.fromInt 0)),
                              incomment_1])
                        _ -> (EXC.badmatch match_expr_30))
                 (\ ex_36 ->
                    case ex_36 of
                      (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "no"),
                                    _]) ->
                        (ErlangAtom "none")
                      ex_36 -> (EXC.raise ex_36))
                 (\ _ ->
                    let
                      match_expr_40 =
                        (BIF.do_remote_fun_call "File" "erlps__position__2"
                           [file_0, pos0_4])
                    in
                      case match_expr_40 of
                        (ErlangTuple [(ErlangAtom "ok"), pos0_39]) | (pos0_39 ==
                                                                        pos0_4) ->
                          let
                            match_final_41_48 =
                              (BIF.do_remote_fun_call "Erlang.Io"
                                 "erlps__setopts__2"
                                 [file_0,
                                  (ErlangCons binary0_15
                                     (ErlangCons encoding0_11
                                        ErlangEmptyList))])
                          in
                            case match_final_41_48 of
                              (ErlangAtom "ok") -> match_final_41_48
                              _ -> (EXC.badmatch match_final_41_48)
                        _ -> (EXC.badmatch match_expr_40)))
            _ -> (EXC.badmatch match_expr_24)
      _ -> (EXC.badmatch match_expr_5)
erlps__read_encoding_from_file__2 [arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__read_encoding_from_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reader__2 :: ErlangFun
erlps__reader__2 [fd_0, n_1] =
  (ErlangFun 0
     let
       lambda_2 [] | ((==) n_1 (ErlangInt (DBI.fromInt 16))) =
         (BIF.erlang__throw__1 [(ErlangAtom "no")])
       lambda_2 [] =
         let
           case_4 =
             (BIF.do_remote_fun_call "File" "erlps__read__2"
                [fd_0, (ErlangInt (DBI.fromInt 32))])
         in
           case case_4 of
             (ErlangAtom "eof") ->
               let    tup_el_7 = (ErlangBinary (BIN.concat []))
               in let
                 arg_10 =
                   (BIF.erlang__op_plus [n_1, (ErlangInt (DBI.fromInt 1))])
               in let tup_el_8 = (erlps__reader__2 [fd_0, arg_10])
               in (ErlangTuple [tup_el_7, tup_el_8])
             (ErlangTuple [(ErlangAtom "ok"), bin_13]) ->
               let   
                 arg_17 =
                   (BIF.erlang__op_plus [n_1, (ErlangInt (DBI.fromInt 1))])
               in let tup_el_15 = (erlps__reader__2 [fd_0, arg_17])
               in (ErlangTuple [bin_13, tup_el_15])
             (ErlangTuple [(ErlangAtom "error"), _]) ->
               (BIF.erlang__throw__1 [(ErlangAtom "no")])
             something_else -> (EXC.case_clause something_else)
       lambda_2 [] = (EXC.function_clause unit)
       lambda_2 args = (EXC.badarity (ErlangFun 0 lambda_2) args)
     in lambda_2)
erlps__reader__2 [arg_21, arg_22] = (EXC.function_clause unit)
erlps__reader__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_nl__4 :: ErlangFun
erlps__com_nl__4 [_, _, (ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (BIF.erlang__throw__1 [(ErlangAtom "no")])
erlps__com_nl__4 [b_0, fun_1, n_2, com_3@(ErlangAtom "false")] =
  (erlps__com_c__4 [b_0, fun_1, n_2, com_3])
erlps__com_nl__4 [b_0, fun_1, n_2, com_3@(ErlangAtom "true")] =
  (erlps__com__4 [b_0, fun_1, n_2, com_3])
erlps__com_nl__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__com_nl__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com__4 :: ErlangFun
erlps__com__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_12 = (BIF.erlang__op_plus [n_8, (ErlangInt (DBI.fromInt 1))])
  in (erlps__com_nl__4 [b_6, fun_7, arg_12, com_9])
erlps__com__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 37)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_c__4 [b_6, fun_7, n_8, com_9])
erlps__com__4 [(ErlangBinary bin_c_0), fun_6, n_7, com_8]
  | size_1 <- ((DBI.fromInt 1))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 8 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok b_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  (erlps__com__4 [b_5, fun_6, n_7, com_8])
erlps__com__4 [(ErlangBinary bin_e_0), fun_1, n_2, com_3]
  | (BIN.empty bin_e_0) =
  let
    match_expr_7 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case match_expr_7 of
      (ErlangTuple [b_5, fun1_6]) ->
        (erlps__com__4 [b_5, fun1_6, n_2, com_3])
      _ -> (EXC.badmatch match_expr_7)
erlps__com__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__com__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_c__4 :: ErlangFun
erlps__com_c__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 99)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_oding__4 [b_6, fun_7, n_8, com_9])
erlps__com_c__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let
    arg_12 = (BIF.erlang__op_plus [n_8, (ErlangInt (DBI.fromInt 1))])
  in (erlps__com_nl__4 [b_6, fun_7, arg_12, com_9])
erlps__com_c__4 [(ErlangBinary bin_c_0), fun_6, n_7, com_8]
  | size_1 <- ((DBI.fromInt 1))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 8 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok b_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  (erlps__com_c__4 [b_5, fun_6, n_7, com_8])
erlps__com_c__4 [(ErlangBinary bin_e_0), fun_1, n_2, com_3]
  | (BIN.empty bin_e_0) =
  let
    match_expr_7 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case match_expr_7 of
      (ErlangTuple [b_5, fun1_6]) ->
        (erlps__com_c__4 [b_5, fun1_6, n_2, com_3])
      _ -> (EXC.badmatch match_expr_7)
erlps__com_c__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__com_c__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_oding__4 :: ErlangFun
erlps__com_oding__4 [(ErlangBinary bin_c_0), fun_19, n_20,
                     com_21]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 111)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 100)))
  , size_7 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_9) bin_8) <-
      ((BIN.chop_int bin_5 size_7 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_9) == (ErlangInt (DBI.fromInt 105)))
  , size_10 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_12) bin_11) <-
      ((BIN.chop_int bin_8 size_10 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_12) == (ErlangInt (DBI.fromInt 110)))
  , size_13 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_15) bin_14) <-
      ((BIN.chop_int bin_11 size_13 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_15) == (ErlangInt (DBI.fromInt 103)))
  , (ErlangInt size_16) <- ((BIN.size bin_14))
  , (BIN.Ok b_18 bin_17) <- ((BIN.chop_bin bin_14 size_16 8))
  , (BIN.empty bin_17) =
  (erlps__com_sep__4 [b_18, fun_19, n_20, com_21])
erlps__com_oding__4 [b_0, fun_1, n_2, com_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_8 = (BIF.erlang__byte_size__1 [b_0])
             in let arg_11 = (make_string "oding")
             in let rop_10 = (BIF.erlang__length__1 [arg_11])
             in (BIF.erlang__op_greaterEq [lop_8, rop_10])))) =
  (erlps__com_c__4 [b_0, fun_1, n_2, com_3])
erlps__com_oding__4 [b_0, fun_1, n_2, com_3] =
  let
    match_expr_7 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case match_expr_7 of
      (ErlangTuple [b1_5, fun1_6]) ->
        let
          arg_8 =
            (BIF.erlang__list_to_binary__1
               [(ErlangCons b_0 (ErlangCons b1_5 ErlangEmptyList))])
        in (erlps__com_oding__4 [arg_8, fun1_6, n_2, com_3])
      _ -> (EXC.badmatch match_expr_7)
erlps__com_oding__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__com_oding__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_sep__4 :: ErlangFun
erlps__com_sep__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 58)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_space__4 [b_6, fun_7, n_8, com_9])
erlps__com_sep__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 61)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_space__4 [b_6, fun_7, n_8, com_9])
erlps__com_sep__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_sep__4 [b_6, fun_7, n_8, com_9])
erlps__com_sep__4 [(ErlangBinary bin_e_0), fun_1, n_2, com_3]
  | (BIN.empty bin_e_0) =
  let
    match_expr_7 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case match_expr_7 of
      (ErlangTuple [b_5, fun1_6]) ->
        (erlps__com_sep__4 [b_5, fun1_6, n_2, com_3])
      _ -> (EXC.badmatch match_expr_7)
erlps__com_sep__4 [b_0, fun_1, n_2, com_3] =
  (erlps__com_c__4 [b_0, fun_1, n_2, com_3])
erlps__com_sep__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__com_sep__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_space__4 :: ErlangFun
erlps__com_space__4 [(ErlangBinary bin_c_0), fun_7, n_8, com_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 32)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_space__4 [b_6, fun_7, n_8, com_9])
erlps__com_space__4 [(ErlangBinary bin_e_0), fun_1, n_2, com_3]
  | (BIN.empty bin_e_0) =
  let
    match_expr_7 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case match_expr_7 of
      (ErlangTuple [b_5, fun1_6]) ->
        (erlps__com_space__4 [b_5, fun1_6, n_2, com_3])
      _ -> (EXC.badmatch match_expr_7)
erlps__com_space__4 [b_0, fun_1, n_2, _com_3] =
  (erlps__com_enc__5
     [b_0, fun_1, n_2, ErlangEmptyList, ErlangEmptyList])
erlps__com_space__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__com_space__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_enc__5 :: ErlangFun
erlps__com_enc__5 [(ErlangBinary bin_c_0), fun_7, n_8, l_9,
                   ps_10]
  | size_1 <- ((DBI.fromInt 1))
  , (BIN.Ok c_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 8 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_20 =
                 (BIF.erlang__op_greaterEq [c_3, (ErlangInt (DBI.fromInt 97))])
             in let
               lop_19 =
                 case lop_20 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesserEq
                        [c_3, (ErlangInt (DBI.fromInt 122))])
                   _ -> (EXC.badarg1 lop_20)
             in let
               lop_18 =
                 case lop_19 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let
                       lop_25 =
                         (BIF.erlang__op_greaterEq
                            [c_3, (ErlangInt (DBI.fromInt 65))])
                     in
                       case lop_25 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesserEq
                              [c_3, (ErlangInt (DBI.fromInt 90))])
                         _ -> (EXC.badarg1 lop_25)
                   _ -> (EXC.badarg1 lop_19)
             in
               case lop_18 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let
                     lop_30 =
                       (BIF.erlang__op_greaterEq
                          [c_3, (ErlangInt (DBI.fromInt 48))])
                   in
                     case lop_30 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [c_3, (ErlangInt (DBI.fromInt 57))])
                       _ -> (EXC.badarg1 lop_30)
                 _ -> (EXC.badarg1 lop_18)))) =
  (erlps__com_enc__5
     [b_6, fun_7, n_8, (ErlangCons c_3 l_9), ps_10])
erlps__com_enc__5 [(ErlangBinary bin_e_0), fun_1, n_2, l_3, ps_4]
  | (BIN.empty bin_e_0) =
  let case_5 = (BIF.erlang__apply__2 [fun_1, ErlangEmptyList])
  in
    case case_5 of
      (ErlangTuple [(ErlangBinary bin_e_7), _]) | (BIN.empty
                                                     bin_e_7) ->
        (erlps__com_enc_end__1 [(ErlangCons l_3 ps_4)])
      (ErlangTuple [b_11, fun1_12]) ->
        (erlps__com_enc__5 [b_11, fun1_12, n_2, l_3, ps_4])
      something_else -> (EXC.case_clause something_else)
erlps__com_enc__5 [(ErlangBinary bin_c_0), fun_7, n_8, l_9,
                   ps_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 45)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok b_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  (erlps__com_enc__5
     [b_6, fun_7, n_8, ErlangEmptyList, (ErlangCons l_9 ps_10)])
erlps__com_enc__5 [_b_0, _fun_1, _n_2, l_3, ps_4] =
  (erlps__com_enc_end__1 [(ErlangCons l_3 ps_4)])
erlps__com_enc__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__com_enc__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_enc_end__1 :: ErlangFun
erlps__com_enc_end__1 [ps0_0] =
  let   
    arg_1 =
      (flmap
         (\ lc_4 ->
            case lc_4 of
              p_3 ->
                let    arg_6 = (erlps__lowercase__1 [p_3])
                in let
                  lc_ret_5 =
                    (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_6])
                in (ErlangCons lc_ret_5 ErlangEmptyList)
              _ -> ErlangEmptyList)
         ps0_0)
  in let
    ps_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_1])
  in (erlps__com_encoding__1 [ps_8])
erlps__com_enc_end__1 [arg_10] = (EXC.function_clause unit)
erlps__com_enc_end__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__com_encoding__1 :: ErlangFun
erlps__com_encoding__1 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) (ErlangCons (ErlangInt num_4) (ErlangEmptyList)))))) (ErlangCons (ErlangCons (ErlangInt num_5) (ErlangEmptyList)) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 97)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 105)))
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 110)))
  , ((ErlangInt num_5) == (ErlangInt (DBI.fromInt 49))) =
  (ErlangAtom "latin1")
erlps__com_encoding__1 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangEmptyList)))) (ErlangCons (ErlangCons (ErlangInt num_3) (ErlangEmptyList)) _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 117)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 102)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 56))) =
  (ErlangAtom "utf8")
erlps__com_encoding__1 [_] =
  (BIF.erlang__throw__1 [(ErlangAtom "no")])
erlps__com_encoding__1 [arg_1] = (EXC.function_clause unit)
erlps__com_encoding__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lowercase__1 :: ErlangFun
erlps__lowercase__1 [s_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "String" "erlps__lowercase__1" [s_0])
  in
    (BIF.do_remote_fun_call "Erlang.Unicode"
       "erlps__characters_to_list__1" [arg_1])
erlps__lowercase__1 [arg_3] = (EXC.function_clause unit)
erlps__lowercase__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__normalize_typed_record_fields__1 :: ErlangFun
erlps__normalize_typed_record_fields__1 [(ErlangEmptyList)] =
  (ErlangTuple [(ErlangAtom "typed"), ErlangEmptyList])
erlps__normalize_typed_record_fields__1 [fields_0] =
  (erlps__normalize_typed_record_fields__3
     [fields_0, ErlangEmptyList, (ErlangAtom "false")])
erlps__normalize_typed_record_fields__1 [arg_4] =
  (EXC.function_clause unit)
erlps__normalize_typed_record_fields__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__normalize_typed_record_fields__3 :: ErlangFun
erlps__normalize_typed_record_fields__3 [(ErlangEmptyList),
                                         newfields_0, typed_1]
  =
  case typed_1 of
    (ErlangAtom "true") ->
      let
        tup_el_4 =
          (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
             [newfields_0])
      in (ErlangTuple [(ErlangAtom "typed"), tup_el_4])
    (ErlangAtom "false") -> (ErlangAtom "not_typed")
    something_else -> (EXC.case_clause something_else)
erlps__normalize_typed_record_fields__3 [(ErlangCons (ErlangTuple [(ErlangAtom "typed_record_field"),
                                                                   field_0,
                                                                   _]) rest_1),
                                         newfields_2, _typed_3]
  =
  (erlps__normalize_typed_record_fields__3
     [rest_1, (ErlangCons field_0 newfields_2), (ErlangAtom "true")])
erlps__normalize_typed_record_fields__3 [(ErlangCons field_0 rest_1),
                                         newfields_2, typed_3]
  =
  (erlps__normalize_typed_record_fields__3
     [rest_1, (ErlangCons field_0 newfields_2), typed_3])
erlps__normalize_typed_record_fields__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__normalize_typed_record_fields__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__restore_typed_record_fields__1 :: ErlangFun
erlps__restore_typed_record_fields__1 [(ErlangEmptyList)] =
  ErlangEmptyList
erlps__restore_typed_record_fields__1 [(ErlangCons (ErlangTuple [(ErlangAtom "attribute"),
                                                                 la_0,
                                                                 (ErlangAtom "record"),
                                                                 (ErlangTuple [record_1,
                                                                               _newfields_2])]) (ErlangCons (ErlangTuple [(ErlangAtom "attribute"),
                                                                                                                          la_3,
                                                                                                                          (ErlangAtom "type"),
                                                                                                                          (ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                                                                                                                                      record_4]),
                                                                                                                                        fields_5,
                                                                                                                                        (ErlangEmptyList)])]) forms_6))]
  | (la_3 == la_0)
  , (record_4 == record_1) =
  let    tup_el_11 = (ErlangTuple [record_1, fields_5])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "attribute"), la_0, (ErlangAtom "record"),
          tup_el_11])
  in let
    tail_14 = (erlps__restore_typed_record_fields__1 [forms_6])
  in (ErlangCons head_7 tail_14)
erlps__restore_typed_record_fields__1 [(ErlangCons (ErlangTuple [(ErlangAtom "attribute"),
                                                                 la_0,
                                                                 (ErlangAtom "type"),
                                                                 (ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                                                                             record_1]),
                                                                               fields_2,
                                                                               (ErlangEmptyList)])]) forms_3)]
  =
  let    tup_el_8 = (ErlangTuple [record_1, fields_2])
  in let
    head_4 =
      (ErlangTuple
         [(ErlangAtom "attribute"), la_0, (ErlangAtom "record"),
          tup_el_8])
  in let
    tail_11 = (erlps__restore_typed_record_fields__1 [forms_3])
  in (ErlangCons head_4 tail_11)
erlps__restore_typed_record_fields__1 [(ErlangCons form_0 forms_1)]
  =
  let tail_3 = (erlps__restore_typed_record_fields__1 [forms_1])
  in (ErlangCons form_0 tail_3)
erlps__restore_typed_record_fields__1 [arg_5] =
  (EXC.function_clause unit)
erlps__restore_typed_record_fields__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__server__4 :: ErlangFun
erlps__server__4 [pid_0, name_1, options_2,
                  st_4@(ErlangTuple [(ErlangAtom "epp"), _, _, _, _, _, _, _, _,
                                     _, _, _, preopened_3, _])]
  =
  let
    _ =
      (BIF.erlang__process_flag__2
         [(ErlangAtom "trap_exit"), (ErlangAtom "true")])
  in
    case preopened_3 of
      (ErlangAtom "false") ->
        let
          case_8 =
            (BIF.do_remote_fun_call "File" "erlps__open__2"
               [name_1, (ErlangCons (ErlangAtom "read") ErlangEmptyList)])
        in
          case case_8 of
            (ErlangTuple [(ErlangAtom "ok"), file_13]) ->
              let
                arg_17 =
                  case st_4 of
                    (ErlangTuple [(ErlangAtom "epp"), file_20, location_21,
                                  delta_22, name_23, name2_24, istk_25, sstk_26,
                                  path_27, macs_28, uses_29,
                                  default_encoding_30, pre_opened_31,
                                  fname_32]) ->
                      (ErlangTuple
                         [(ErlangAtom "epp"), file_13, location_21, delta_22,
                          name_23, name2_24, istk_25, sstk_26, path_27, macs_28,
                          uses_29, default_encoding_30, pre_opened_31,
                          fname_32])
                    _ -> (EXC.badrecord (ErlangAtom "epp"))
              in (erlps__init_server__4 [pid_0, name_1, options_2, arg_17])
            (ErlangTuple [(ErlangAtom "error"), e_33]) ->
              let arg_35 = (ErlangTuple [(ErlangAtom "error"), e_33])
              in (erlps__epp_reply__2 [pid_0, arg_35])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "true") ->
        (erlps__init_server__4 [pid_0, name_1, options_2, st_4])
      something_else -> (EXC.case_clause something_else)
erlps__server__4 [arg_42, arg_43, arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__server__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__init_server__4 :: ErlangFun
erlps__init_server__4 [pid_0, filename_1, options_2, st0_3] =
  let   
    sourcename_7 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "source_name"), options_2, filename_1])
  in let
    pdm_11 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "macros"), options_2, ErlangEmptyList])
  in let ms0_13 = (erlps__predef_macros__1 [filename_1])
  in let case_14 = (erlps__user_predef__2 [pdm_11, ms0_13])
  in
    case case_14 of
      (ErlangTuple [(ErlangAtom "ok"), ms1_17]) ->
        case st0_3 of
          (ErlangTuple [(ErlangAtom "epp"), file_18, atlocation_19, _, _,
                        _, _, _, _, _, _, _, _, _]) ->
            let   
              defencoding_24 =
                (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
                   [(ErlangAtom "default_encoding"), options_2,
                    (ErlangAtom "utf8")])
            in let
              encoding_27 = (erlps__set_encoding__2 [file_18, defencoding_24])
            in let tup_el_31 = (BIF.erlang__self__0 [])
            in let
              arg_29 =
                (ErlangTuple [(ErlangAtom "ok"), tup_el_31, encoding_27])
            in let _ = (erlps__epp_reply__2 [pid_0, arg_29])
            in let
              head_33 =
                (BIF.do_remote_fun_call "Filename" "erlps__dirname__1"
                   [filename_1])
            in let
              tail_35 =
                (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
                   [(ErlangAtom "includes"), options_2, ErlangEmptyList])
            in let
              st_60 =
                case st0_3 of
                  (ErlangTuple [(ErlangAtom "epp"), file_47, location_48,
                                delta_49, name_50, name2_51, istk_52, sstk_53,
                                path_54, macs_55, uses_56, default_encoding_57,
                                pre_opened_58, fname_59]) ->
                    (ErlangTuple
                       [(ErlangAtom "epp"), file_47, location_48,
                        (ErlangInt (DBI.fromInt 0)), sourcename_7, sourcename_7,
                        istk_52, sstk_53, (ErlangCons head_33 tail_35), ms1_17,
                        uses_56, defencoding_24, pre_opened_58, fname_59])
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in let from_62 = (erlps__wait_request__1 [st_60])
            in let
              anno_64 =
                (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
                   [atlocation_19])
            in let arg_66 = (erlps__file_name__1 [sourcename_7])
            in let
              _ =
                (erlps__enter_file_reply__5
                   [from_62, arg_66, anno_64, atlocation_19,
                    (ErlangAtom "code")])
            in (erlps__wait_req_scan__1 [st_60])
          _ -> (EXC.badmatch st0_3)
      (ErlangTuple [(ErlangAtom "error"), e_72]) ->
        let arg_74 = (ErlangTuple [(ErlangAtom "error"), e_72])
        in (erlps__epp_reply__2 [pid_0, arg_74])
      something_else -> (EXC.case_clause something_else)
erlps__init_server__4 [arg_77, arg_78, arg_79, arg_80] =
  (EXC.function_clause unit)
erlps__init_server__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__predef_macros__1 :: ErlangFun
erlps__predef_macros__1 [file_0] =
  let   
    arg_1 = (BIF.erlang__system_info__1 [(ErlangAtom "machine")])
  in let machine_3 = (BIF.erlang__list_to_atom__1 [arg_1])
  in let anno_4 = (erlps__line1__0 [])
  in let
    arg_5 = (BIF.erlang__system_info__1 [(ErlangAtom "otp_release")])
  in let otpversion_7 = (BIF.erlang__list_to_integer__1 [arg_5])
  in let
    head_13 = (ErlangTuple [(ErlangAtom "string"), anno_4, file_0])
  in let
    tup_el_10 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_13 ErlangEmptyList)])
  in let head_8 = (ErlangTuple [(ErlangAtom "FILE"), tup_el_10])
  in let
    head_19 =
      (ErlangTuple
         [(ErlangAtom "FUNCTION_NAME"), (ErlangAtom "undefined")])
  in let
    head_23 =
      (ErlangTuple
         [(ErlangAtom "FUNCTION_ARITY"), (ErlangAtom "undefined")])
  in let
    head_32 =
      (ErlangTuple
         [(ErlangAtom "integer"), anno_4, (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_29 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_32 ErlangEmptyList)])
  in let head_27 = (ErlangTuple [(ErlangAtom "LINE"), tup_el_29])
  in let
    head_38 =
      (ErlangTuple [(ErlangAtom "MODULE"), (ErlangAtom "undefined")])
  in let
    head_42 =
      (ErlangTuple
         [(ErlangAtom "MODULE_STRING"), (ErlangAtom "undefined")])
  in let
    head_46 =
      (ErlangTuple
         [(ErlangAtom "BASE_MODULE"), (ErlangAtom "undefined")])
  in let
    head_50 =
      (ErlangTuple
         [(ErlangAtom "BASE_MODULE_STRING"), (ErlangAtom "undefined")])
  in let
    head_59 = (ErlangTuple [(ErlangAtom "atom"), anno_4, machine_3])
  in let
    tup_el_56 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_59 ErlangEmptyList)])
  in let
    head_54 = (ErlangTuple [(ErlangAtom "MACHINE"), tup_el_56])
  in let
    head_70 =
      (ErlangTuple [(ErlangAtom "atom"), anno_4, (ErlangAtom "true")])
  in let
    tup_el_67 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_70 ErlangEmptyList)])
  in let head_65 = (ErlangTuple [machine_3, tup_el_67])
  in let
    head_81 =
      (ErlangTuple [(ErlangAtom "integer"), anno_4, otpversion_7])
  in let
    tup_el_78 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_81 ErlangEmptyList)])
  in let
    head_76 = (ErlangTuple [(ErlangAtom "OTP_RELEASE"), tup_el_78])
  in
    (BIF.maps__from_list__1
       [(ErlangCons head_8
           (ErlangCons head_19
              (ErlangCons head_23
                 (ErlangCons head_27
                    (ErlangCons head_38
                       (ErlangCons head_42
                          (ErlangCons head_46
                             (ErlangCons head_50
                                (ErlangCons head_54
                                   (ErlangCons head_65
                                      (ErlangCons head_76
                                         ErlangEmptyList)))))))))))])
erlps__predef_macros__1 [arg_89] = (EXC.function_clause unit)
erlps__predef_macros__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__user_predef__2 :: ErlangFun
erlps__user_predef__2 [(ErlangCons (ErlangTuple [m_0, val_1,
                                                 (ErlangAtom "redefine")]) pdm_2),
                       ms_3]
  | (isEAtom m_0) =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [val_1])
  in let
    exp_6 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__tokens__1" [arg_4])
  in let val_11 = (ErlangTuple [(ErlangAtom "none"), exp_6])
  in let map_ext_14 = (ErlangMap (Map.singleton m_0 val_11))
  in let arg_8 = (BIF.maps__merge__2 [ms_3, map_ext_14])
  in (erlps__user_predef__2 [pdm_2, arg_8])
erlps__user_predef__2 [(ErlangCons (ErlangTuple [m_0,
                                                 val_1]) pdm_2),
                       ms_3]
  | (isEAtom m_0) =
  case ms_3 of
    (ErlangMap map_5) | (DM.Just defs_6) <- ((Map.lookup m_0 map_5))
                      , (isEList defs_6) ->
      let tup_el_8 = (ErlangTuple [(ErlangAtom "redefine"), m_0])
      in (ErlangTuple [(ErlangAtom "error"), tup_el_8])
    (ErlangMap map_11) | (DM.Just _defs_12) <-
                           ((Map.lookup m_0 map_11)) ->
      let
        tup_el_14 = (ErlangTuple [(ErlangAtom "redefine_predef"), m_0])
      in (ErlangTuple [(ErlangAtom "error"), tup_el_14])
    _ ->
      let   
        arg_17 =
          (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [val_1])
      in let
        exp_19 =
          (BIF.do_remote_fun_call "Erl.Parse" "erlps__tokens__1" [arg_17])
      in let tup_el_27 = (ErlangTuple [(ErlangAtom "none"), exp_19])
      in let head_25 = (ErlangTuple [(ErlangAtom "none"), tup_el_27])
      in let
        map_ext_31 =
          (ErlangMap
             (Map.singleton m_0 (ErlangCons head_25 ErlangEmptyList)))
      in let arg_21 = (BIF.maps__merge__2 [ms_3, map_ext_31])
      in (erlps__user_predef__2 [pdm_2, arg_21])
    something_else -> (EXC.case_clause something_else)
erlps__user_predef__2 [(ErlangCons m_0 pdm_1), ms_2]
  | (isEAtom m_0) =
  let head_4 = (ErlangTuple [m_0, (ErlangAtom "true")])
  in (erlps__user_predef__2 [(ErlangCons head_4 pdm_1), ms_2])
erlps__user_predef__2 [(ErlangCons md_0 _pdm_1), _ms_2] =
  let tup_el_4 = (ErlangTuple [(ErlangAtom "bad"), md_0])
  in (ErlangTuple [(ErlangAtom "error"), tup_el_4])
erlps__user_predef__2 [(ErlangEmptyList), ms_0] =
  (ErlangTuple [(ErlangAtom "ok"), ms_0])
erlps__user_predef__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__user_predef__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__wait_request__1 :: ErlangFun
erlps__wait_request__1 [st_0] =
  case (ErlangInt (DBI.fromInt 1)) of
    (ErlangAtom "processes_unsuported") ->
      (ErlangInt (DBI.fromInt 1))
    _ -> (EXC.badmatch (ErlangInt (DBI.fromInt 1)))
erlps__wait_request__1 [arg_4] = (EXC.function_clause unit)
erlps__wait_request__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__close_file__1 :: ErlangFun
erlps__close_file__1 [(ErlangTuple [(ErlangAtom "epp"), _, _, _,
                                    _, _, _, _, _, _, _, _, (ErlangAtom "true"),
                                    _])]
  =
  (ErlangAtom "ok")
erlps__close_file__1 [(ErlangTuple [(ErlangAtom "epp"), file_0,
                                    _, _, _, _, _, _, _, _, _, _,
                                    (ErlangAtom "false"), _])]
  =
  let
    match_final_1_3 =
      (BIF.do_remote_fun_call "File" "erlps__close__1" [file_0])
  in
    case match_final_1_3 of
      (ErlangAtom "ok") -> match_final_1_3
      _ -> (EXC.badmatch match_final_1_3)
erlps__close_file__1 [arg_5] = (EXC.function_clause unit)
erlps__close_file__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__wait_req_scan__1 :: ErlangFun
erlps__wait_req_scan__1 [st_0] =
  let from_2 = (erlps__wait_request__1 [st_0])
  in (erlps__scan_toks__2 [from_2, st_0])
erlps__wait_req_scan__1 [arg_5] = (EXC.function_clause unit)
erlps__wait_req_scan__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__wait_req_skip__2 :: ErlangFun
erlps__wait_req_skip__2 [st_0, sis_1] =
  let from_3 = (erlps__wait_request__1 [st_0])
  in (erlps__skip_toks__3 [from_3, st_0, sis_1])
erlps__wait_req_skip__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__wait_req_skip__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__enter_file__4 :: ErlangFun
erlps__enter_file__4 [_newname_0, inc_1, from_2, st_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               arg_16 =
                 case st_3 of
                   (ErlangTuple arr_19) | (DM.Just field_18) <-
                                            ((arr_19 DA.!! 7)) ->
                     field_18
                   _ -> (EXC.badrecord (ErlangAtom "epp"))
             in let lop_15 = (BIF.erlang__length__1 [arg_16])
             in
               (BIF.erlang__op_greaterEq
                  [lop_15, (ErlangInt (DBI.fromInt 8))])))) =
  let    tup_el_8 = (erlps__loc__1 [inc_1])
  in let tup_el_13 = (make_string "include")
  in let
    tup_el_11 = (ErlangTuple [(ErlangAtom "depth"), tup_el_13])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__enter_file__4 [newname_0, inc_1, from_2, st_3] =
  let   
    arg_5 =
      case st_3 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 8)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    case_4 =
      (BIF.do_remote_fun_call "File" "erlps__path_open__3"
         [arg_5, newname_0,
          (ErlangCons (ErlangAtom "read") ErlangEmptyList)])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "ok"), newf_13, pname_14]) ->
        let   
          arg_15 =
            case st_3 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 2)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let loc_19 = (erlps__start_loc__1 [arg_15])
        in let
          arg_20 =
            (erlps__enter_file2__5 [newf_13, pname_14, from_2, st_3, loc_19])
        in (erlps__wait_req_scan__1 [arg_20])
      (ErlangTuple [(ErlangAtom "error"), _e_26]) ->
        let    tup_el_31 = (erlps__loc__1 [inc_1])
        in let
          tup_el_34 =
            (ErlangTuple
               [(ErlangAtom "include"), (ErlangAtom "file"), newname_0])
        in let
          tup_el_30 =
            (ErlangTuple [tup_el_31, (ErlangAtom "epp"), tup_el_34])
        in let arg_28 = (ErlangTuple [(ErlangAtom "error"), tup_el_30])
        in let _ = (erlps__epp_reply__2 [from_2, arg_28])
        in (erlps__wait_req_scan__1 [st_3])
      something_else -> (EXC.case_clause something_else)
erlps__enter_file__4 [arg_39, arg_40, arg_41, arg_42] =
  (EXC.function_clause unit)
erlps__enter_file__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__enter_file2__5 :: ErlangFun
erlps__enter_file2__5 [newf_0, pname_1, from_2, st0_3,
                       atlocation_4]
  =
  let   
    anno_6 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
         [atlocation_4])
  in let
    _ =
      (erlps__enter_file_reply__5
         [from_2, pname_1, anno_6, atlocation_4, (ErlangAtom "code")])
  in let
    ms0_15 =
      case st0_3 of
        (ErlangTuple arr_14) | (DM.Just field_13) <-
                                 ((arr_14 DA.!! 9)) ->
          field_13
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    head_21 = (ErlangTuple [(ErlangAtom "string"), anno_6, pname_1])
  in let
    val_18 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_21 ErlangEmptyList)])
  in let
    map_ext_26 =
      (ErlangMap (Map.singleton (ErlangAtom "FILE") val_18))
  in let
    ms_29 =
      case (findMissingKey ms0_15 [(ErlangAtom "FILE")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [ms0_15, map_ext_26])
        (DM.Just missing_28) -> (EXC.badkey missing_28)
  in let
    head_30 =
      (BIF.do_remote_fun_call "Filename" "erlps__dirname__1" [pname_1])
  in let
    arg_33 =
      case st0_3 of
        (ErlangTuple arr_36) | (DM.Just field_35) <-
                                 ((arr_36 DA.!! 8)) ->
          field_35
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let tail_32 = (BIF.erlang__tl__1 [arg_33])
  in let
    defencoding_41 =
      case st0_3 of
        (ErlangTuple arr_40) | (DM.Just field_39) <-
                                 ((arr_40 DA.!! 11)) ->
          field_39
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    match_expr_44 = (erlps__set_encoding__2 [newf_0, defencoding_41])
  in let
    tail_54 =
      case st0_3 of
        (ErlangTuple arr_57) | (DM.Just field_56) <-
                                 ((arr_57 DA.!! 7)) ->
          field_56
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let tup_el_60 = (ErlangMap Map.empty)
  in
    (ErlangTuple
       [(ErlangAtom "epp"), newf_0, atlocation_4,
        (ErlangInt (DBI.fromInt 0)), pname_1, pname_1, ErlangEmptyList,
        (ErlangCons st0_3 tail_54), (ErlangCons head_30 tail_32), ms_29,
        tup_el_60, defencoding_41, (ErlangAtom "false"),
        ErlangEmptyList])
erlps__enter_file2__5 [arg_64, arg_65, arg_66, arg_67, arg_68] =
  (EXC.function_clause unit)
erlps__enter_file2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__enter_file_reply__5 :: ErlangFun
erlps__enter_file_reply__5 [from_0, name_1, locationanno_2,
                            atlocation_3, where_4]
  =
  let    anno0_6 = (erlps__loc_anno__1 [atlocation_3])
  in let
    anno_10 =
      case where_4 of
        (ErlangAtom "code") -> anno0_6
        (ErlangAtom "generated") ->
          (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_generated__2"
             [(ErlangAtom "true"), anno0_6])
        something_else -> (EXC.case_clause something_else)
  in let head_13 = (ErlangTuple [(ErlangAtom "-"), anno_10])
  in let
    head_17 =
      (ErlangTuple [(ErlangAtom "atom"), anno_10, (ErlangAtom "file")])
  in let head_22 = (ErlangTuple [(ErlangAtom "("), anno_10])
  in let
    head_26 = (ErlangTuple [(ErlangAtom "string"), anno_10, name_1])
  in let head_31 = (ErlangTuple [(ErlangAtom ","), anno_10])
  in let tup_el_38 = (erlps__get_line__1 [locationanno_2])
  in let
    head_35 =
      (ErlangTuple [(ErlangAtom "integer"), anno_10, tup_el_38])
  in let head_41 = (ErlangTuple [(ErlangAtom ")"), locationanno_2])
  in let head_45 = (ErlangTuple [(ErlangAtom "dot"), anno_10])
  in let
    rep_49 =
      (ErlangTuple
         [(ErlangAtom "ok"),
          (ErlangCons head_13
             (ErlangCons head_17
                (ErlangCons head_22
                   (ErlangCons head_26
                      (ErlangCons head_31
                         (ErlangCons head_35
                            (ErlangCons head_41
                               (ErlangCons head_45 ErlangEmptyList))))))))])
  in (erlps__epp_reply__2 [from_0, rep_49])
erlps__enter_file_reply__5 [arg_52, arg_53, arg_54, arg_55,
                            arg_56]
  =
  (EXC.function_clause unit)
erlps__enter_file_reply__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__file_name__1 :: ErlangFun
erlps__file_name__1 [(ErlangCons c_0 t_1)]
  | ((isEInt c_0) && (weakGt c_0 (ErlangInt (DBI.fromInt 0)))) =
  let tail_3 = (erlps__file_name__1 [t_1])
  in (ErlangCons c_0 tail_3)
erlps__file_name__1 [(ErlangCons h_0 t_1)] =
  let    lop_2 = (erlps__file_name__1 [h_0])
  in let rop_4 = (erlps__file_name__1 [t_1])
  in (BIF.erlang__op_append [lop_2, rop_4])
erlps__file_name__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__file_name__1 [n_0] | (isEAtom n_0) =
  (BIF.erlang__atom_to_list__1 [n_0])
erlps__file_name__1 [arg_2] = (EXC.function_clause unit)
erlps__file_name__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__leave_file__2 :: ErlangFun
erlps__leave_file__2 [from_0, st_1] =
  let
    case_2 =
      case st_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 6)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_2 of
      (ErlangCons i_6 cis_7) ->
        let   
          tup_el_12 =
            case st_1 of
              (ErlangTuple arr_15) | (DM.Just field_14) <-
                                       ((arr_15 DA.!! 2)) ->
                field_14
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let tup_el_19 = (make_string "unterminated")
        in let
          tup_el_17 =
            (ErlangTuple [(ErlangAtom "illegal"), tup_el_19, i_6])
        in let
          tup_el_11 =
            (ErlangTuple [tup_el_12, (ErlangAtom "epp"), tup_el_17])
        in let arg_9 = (ErlangTuple [(ErlangAtom "error"), tup_el_11])
        in let _ = (erlps__epp_reply__2 [from_0, arg_9])
        in let arg_21 = (erlps__wait_request__1 [st_1])
        in let
          arg_23 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_26, location_27, delta_28,
                            name_29, name2_30, istk_31, sstk_32, path_33,
                            macs_34, uses_35, default_encoding_36,
                            pre_opened_37, fname_38]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_26, location_27, delta_28, name_29,
                    name2_30, cis_7, sstk_32, path_33, macs_34, uses_35,
                    default_encoding_36, pre_opened_37, fname_38])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__leave_file__2 [arg_21, arg_23])
      (ErlangEmptyList) ->
        let
          case_39 =
            case st_1 of
              (ErlangTuple arr_42) | (DM.Just field_41) <-
                                       ((arr_42 DA.!! 7)) ->
                field_41
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          case case_39 of
            (ErlangCons oldst_43 sts_44) ->
              let _ = (erlps__close_file__1 [st_1])
              in
                case oldst_43 of
                  (ErlangTuple [(ErlangAtom "epp"), _, oldloc_46, delta_47,
                                oldname_48, oldname2_49, _, _, _, _, _, _, _,
                                _]) ->
                    let   
                      currloc_53 = (erlps__add_line__2 [oldloc_46, delta_47])
                    in let
                      anno_55 =
                        (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
                           [currloc_53])
                    in let
                      ms0_59 =
                        case st_1 of
                          (ErlangTuple arr_58) | (DM.Just field_57) <-
                                                   ((arr_58 DA.!! 9)) ->
                            field_57
                          _ -> (EXC.badrecord (ErlangAtom "epp"))
                    in let
                      head_65 =
                        (ErlangTuple
                           [(ErlangAtom "string"), anno_55, oldname2_49])
                    in let
                      val_62 =
                        (ErlangTuple
                           [(ErlangAtom "none"),
                            (ErlangCons head_65 ErlangEmptyList)])
                    in let
                      map_ext_70 =
                        (ErlangMap (Map.singleton (ErlangAtom "FILE") val_62))
                    in let
                      ms_73 =
                        case (findMissingKey ms0_59 [(ErlangAtom "FILE")]) of
                          (DM.Nothing) ->
                            (BIF.maps__merge__2 [ms0_59, map_ext_70])
                          (DM.Just missing_72) -> (EXC.badkey missing_72)
                    in let
                      record_updt_77 =
                        case st_1 of
                          (ErlangTuple arr_80) | (DM.Just field_79) <-
                                                   ((arr_80 DA.!! 10)) ->
                            field_79
                          _ -> (EXC.badrecord (ErlangAtom "epp"))
                    in let
                      nextst_94 =
                        case oldst_43 of
                          (ErlangTuple [(ErlangAtom "epp"), file_81,
                                        location_82, delta_83, name_84,
                                        name2_85, istk_86, sstk_87, path_88,
                                        macs_89, uses_90, default_encoding_91,
                                        pre_opened_92, fname_93]) ->
                            (ErlangTuple
                               [(ErlangAtom "epp"), file_81, location_82,
                                delta_83, name_84, name2_85, istk_86, sts_44,
                                path_88, ms_73, record_updt_77,
                                default_encoding_91, pre_opened_92, fname_93])
                          _ -> (EXC.badrecord (ErlangAtom "epp"))
                    in let
                      _ =
                        (erlps__enter_file_reply__5
                           [from_0, oldname_48, anno_55, currloc_53,
                            (ErlangAtom "code")])
                    in let
                      case_100 =
                        (BIF.erlang__op_exactEq [oldname2_49, oldname_48])
                    in let
                      _ =
                        case case_100 of
                          (ErlangAtom "true") -> (ErlangAtom "ok")
                          (ErlangAtom "false") ->
                            let   
                              nfrom_104 = (erlps__wait_request__1 [nextst_94])
                            in let
                              oldanno_106 =
                                (BIF.do_remote_fun_call "Erl.Anno"
                                   "erlps__new__1" [oldloc_46])
                            in
                              (erlps__enter_file_reply__5
                                 [nfrom_104, oldname2_49, oldanno_106,
                                  currloc_53, (ErlangAtom "generated")])
                          something_else -> (EXC.case_clause something_else)
                    in (erlps__wait_req_scan__1 [nextst_94])
                  _ -> (EXC.badmatch oldst_43)
            (ErlangEmptyList) ->
              let   
                tup_el_116 =
                  case st_1 of
                    (ErlangTuple arr_119) | (DM.Just field_118) <-
                                              ((arr_119 DA.!! 2)) ->
                      field_118
                    _ -> (EXC.badrecord (ErlangAtom "epp"))
              in let arg_114 = (ErlangTuple [(ErlangAtom "eof"), tup_el_116])
              in let _ = (erlps__epp_reply__2 [from_0, arg_114])
              in (erlps__wait_req_scan__1 [st_1])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__leave_file__2 [arg_121, arg_122] =
  (EXC.function_clause unit)
erlps__leave_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_toks__2 :: ErlangFun
erlps__scan_toks__2 [from_0, st_1] =
  let   
    arg_3 =
      case st_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 1)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    arg_8 =
      case st_1 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 2)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    case_2 =
      (BIF.do_remote_fun_call "Erlang.Io" "erlps__scan_erl_form__3"
         [arg_3, (ErlangAtom ""), arg_8])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), toks_12, cl_13]) ->
        let
          arg_16 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_19, location_20, delta_21,
                            name_22, name2_23, istk_24, sstk_25, path_26,
                            macs_27, uses_28, default_encoding_29,
                            pre_opened_30, fname_31]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_19, cl_13, delta_21, name_22,
                    name2_23, istk_24, sstk_25, path_26, macs_27, uses_28,
                    default_encoding_29, pre_opened_30, fname_31])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__3 [toks_12, from_0, arg_16])
      (ErlangTuple [(ErlangAtom "error"), e_32, cl_33]) ->
        let    arg_35 = (ErlangTuple [(ErlangAtom "error"), e_32])
        in let _ = (erlps__epp_reply__2 [from_0, arg_35])
        in let
          arg_38 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_41, location_42, delta_43,
                            name_44, name2_45, istk_46, sstk_47, path_48,
                            macs_49, uses_50, default_encoding_51,
                            pre_opened_52, fname_53]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_41, cl_33, delta_43, name_44,
                    name2_45, istk_46, sstk_47, path_48, macs_49, uses_50,
                    default_encoding_51, pre_opened_52, fname_53])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__wait_req_scan__1 [arg_38])
      (ErlangTuple [(ErlangAtom "eof"), cl_54]) ->
        let
          arg_56 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_59, location_60, delta_61,
                            name_62, name2_63, istk_64, sstk_65, path_66,
                            macs_67, uses_68, default_encoding_69,
                            pre_opened_70, fname_71]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_59, cl_54, delta_61, name_62,
                    name2_63, istk_64, sstk_65, path_66, macs_67, uses_68,
                    default_encoding_69, pre_opened_70, fname_71])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__leave_file__2 [from_0, arg_56])
      (ErlangTuple [(ErlangAtom "error"), _e_72]) ->
        let   
          tup_el_77 =
            case st_1 of
              (ErlangTuple arr_80) | (DM.Just field_79) <-
                                       ((arr_80 DA.!! 2)) ->
                field_79
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          tup_el_76 =
            (ErlangTuple
               [tup_el_77, (ErlangAtom "epp"), (ErlangAtom "cannot_parse")])
        in let arg_74 = (ErlangTuple [(ErlangAtom "error"), tup_el_76])
        in let _ = (erlps__epp_reply__2 [from_0, arg_74])
        in let arg_83 = (erlps__wait_request__1 [st_1])
        in (erlps__leave_file__2 [arg_83, st_1])
      something_else -> (EXC.case_clause something_else)
erlps__scan_toks__2 [arg_86, arg_87] = (EXC.function_clause unit)
erlps__scan_toks__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_toks__3 :: ErlangFun
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons define_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                          _ld_1,
                                                                                          (ErlangAtom "define")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_define__4 [toks_3, define_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons undef_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                         _ld_1,
                                                                                         (ErlangAtom "undef")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_undef__4 [toks_3, undef_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons error_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                         _ld_1,
                                                                                         (ErlangAtom "error")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_err_warn__4 [toks_3, error_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons warn_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                        _ld_1,
                                                                                        (ErlangAtom "warning")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_err_warn__4 [toks_3, warn_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons inc_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                       _li_1,
                                                                                       (ErlangAtom "include")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_include__4 [toks_3, inc_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons inclib_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                          _li_1,
                                                                                          (ErlangAtom "include_lib")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_include_lib__4 [toks_3, inclib_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons ifdef_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                         _li_1,
                                                                                         (ErlangAtom "ifdef")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_ifdef__4 [toks_3, ifdef_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons ifndef_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                          _li_1,
                                                                                          (ErlangAtom "ifndef")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_ifndef__4 [toks_3, ifndef_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons else_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                        _le_1,
                                                                                        (ErlangAtom "else")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_else__4 [toks_3, else_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons if_2@(ErlangTuple [(ErlangAtom "if"),
                                                                                      _le_1]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_if__4 [toks_3, if_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons elif_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                        _le_1,
                                                                                        (ErlangAtom "elif")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_elif__4 [toks_3, elif_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons endif_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                         _le_1,
                                                                                         (ErlangAtom "endif")]) toks_3)),
                     from_4, st_5]
  =
  (erlps__scan_endif__4 [toks_3, endif_2, from_4, st_5])
erlps__scan_toks__3 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                               _lh_0]) (ErlangCons filetoken_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                                             _lf_1,
                                                                                             (ErlangAtom "file")]) toks0_3)),
                     from_4, st_5]
  =
  let
    case_6 =
      (EXC.tryCatch (\ _ -> (erlps__expand_macros__2 [toks0_3, st_5]))
         (\ ex_10 ->
            case ex_10 of
              (ErlangTuple [(ErlangAtom "throw"), payload_11, _]) -> payload_11
              (ErlangTuple [(ErlangAtom "error"), payload_12, stack_13]) ->
                let tup_el_15 = (ErlangTuple [payload_12, stack_13])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_15])
              (ErlangTuple [(ErlangAtom "exit"), payload_18, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_18])
              ex_10 -> (EXC.raise ex_10)))
  in
    case case_6 of
      toks1_21 | (isEList toks1_21) ->
        (erlps__scan_file__4 [toks1_21, filetoken_2, from_4, st_5])
      (ErlangTuple [(ErlangAtom "error"), errl_26, what_27]) ->
        let   
          tup_el_31 = (ErlangTuple [errl_26, (ErlangAtom "epp"), what_27])
        in let arg_29 = (ErlangTuple [(ErlangAtom "error"), tup_el_31])
        in let _ = (erlps__epp_reply__2 [from_4, arg_29])
        in (erlps__wait_req_scan__1 [st_5])
      something_else -> (EXC.case_clause something_else)
erlps__scan_toks__3 [toks0_0, from_1, st_2] =
  let
    case_3 =
      (EXC.tryCatch
         (\ _ ->
            let
              arg_5 =
                case st_2 of
                  (ErlangTuple [(ErlangAtom "epp"), file_8, location_9,
                                delta_10, name_11, name2_12, istk_13, sstk_14,
                                path_15, macs_16, uses_17, default_encoding_18,
                                pre_opened_19, fname_20]) ->
                    (ErlangTuple
                       [(ErlangAtom "epp"), file_8, location_9, delta_10,
                        name_11, name2_12, istk_13, sstk_14, path_15, macs_16,
                        uses_17, default_encoding_18, pre_opened_19, toks0_0])
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in (erlps__expand_macros__2 [toks0_0, arg_5]))
         (\ ex_22 ->
            case ex_22 of
              (ErlangTuple [(ErlangAtom "throw"), payload_23, _]) -> payload_23
              (ErlangTuple [(ErlangAtom "error"), payload_24, stack_25]) ->
                let tup_el_27 = (ErlangTuple [payload_24, stack_25])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_27])
              (ErlangTuple [(ErlangAtom "exit"), payload_30, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_30])
              ex_22 -> (EXC.raise ex_22)))
  in
    case case_3 of
      toks1_33 | (isEList toks1_33) ->
        let    arg_35 = (ErlangTuple [(ErlangAtom "ok"), toks1_33])
        in let _ = (erlps__epp_reply__2 [from_1, arg_35])
        in let
          arg_42 =
            case st_2 of
              (ErlangTuple arr_45) | (DM.Just field_44) <-
                                       ((arr_45 DA.!! 9)) ->
                field_44
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          record_updt_40 = (erlps__scan_module__2 [toks1_33, arg_42])
        in let
          arg_38 =
            case st_2 of
              (ErlangTuple [(ErlangAtom "epp"), file_46, location_47, delta_48,
                            name_49, name2_50, istk_51, sstk_52, path_53,
                            macs_54, uses_55, default_encoding_56,
                            pre_opened_57, fname_58]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_46, location_47, delta_48, name_49,
                    name2_50, istk_51, sstk_52, path_53, record_updt_40,
                    uses_55, default_encoding_56, pre_opened_57, fname_58])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__wait_req_scan__1 [arg_38])
      (ErlangTuple [(ErlangAtom "error"), errl_59, what_60]) ->
        let   
          tup_el_64 = (ErlangTuple [errl_59, (ErlangAtom "epp"), what_60])
        in let arg_62 = (ErlangTuple [(ErlangAtom "error"), tup_el_64])
        in let _ = (erlps__epp_reply__2 [from_1, arg_62])
        in (erlps__wait_req_scan__1 [st_2])
      something_else -> (EXC.case_clause something_else)
erlps__scan_toks__3 [arg_69, arg_70, arg_71] =
  (EXC.function_clause unit)
erlps__scan_toks__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_module__2 :: ErlangFun
erlps__scan_module__2 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                                 _lh_0]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                   _lm_1,
                                                                                   (ErlangAtom "module")]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                                                                     _ll_2]) ts_3))),
                       ms_4]
  =
  (erlps__scan_module_1__2 [ts_3, ms_4])
erlps__scan_module__2 [(ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                                 _lh_0]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                   _lm_1,
                                                                                   (ErlangAtom "extends")]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                                                                      _ll_2]) ts_3))),
                       ms_4]
  =
  (erlps__scan_extends__2 [ts_3, ms_4])
erlps__scan_module__2 [_ts_0, ms_1] = ms_1
erlps__scan_module__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__scan_module__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_module_1__2 :: ErlangFun
erlps__scan_module_1__2 [(ErlangCons a_0@(ErlangTuple [(ErlangAtom "atom"),
                                                       _,
                                                       _]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                     l_1]) ts_2)),
                         ms_3]
  =
  let head_7 = (ErlangTuple [(ErlangAtom ")"), l_1])
  in
    (erlps__scan_module_1__2
       [(ErlangCons a_0 (ErlangCons head_7 ts_2)), ms_3])
erlps__scan_module_1__2 [(ErlangCons modatom_2@(ErlangTuple [(ErlangAtom "atom"),
                                                             ln_0,
                                                             a_1]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                             _lr_3]) _ts_4)),
                         ms0_5]
  =
  let    modstring_7 = (BIF.erlang__atom_to_list__1 [a_1])
  in let
    val_10 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons modatom_2 ErlangEmptyList)])
  in let
    map_ext_15 =
      (ErlangMap (Map.singleton (ErlangAtom "MODULE") val_10))
  in let
    ms_18 =
      case (findMissingKey ms0_5 [(ErlangAtom "MODULE")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [ms0_5, map_ext_15])
        (DM.Just missing_17) -> (EXC.badkey missing_17)
  in let
    head_24 =
      (ErlangTuple [(ErlangAtom "string"), ln_0, modstring_7])
  in let
    val_21 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_24 ErlangEmptyList)])
  in let
    map_ext_29 =
      (ErlangMap (Map.singleton (ErlangAtom "MODULE_STRING") val_21))
  in
    case (findMissingKey ms_18 [(ErlangAtom "MODULE_STRING")]) of
      (DM.Nothing) -> (BIF.maps__merge__2 [ms_18, map_ext_29])
      (DM.Just missing_31) -> (EXC.badkey missing_31)
erlps__scan_module_1__2 [_ts_0, ms_1] = ms_1
erlps__scan_module_1__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__scan_module_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_extends__2 :: ErlangFun
erlps__scan_extends__2 [(ErlangCons modatom_2@(ErlangTuple [(ErlangAtom "atom"),
                                                            ln_0,
                                                            a_1]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                            _lr_3]) _ts_4)),
                        ms0_5]
  =
  let    modstring_7 = (BIF.erlang__atom_to_list__1 [a_1])
  in let
    val_10 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons modatom_2 ErlangEmptyList)])
  in let
    map_ext_15 =
      (ErlangMap (Map.singleton (ErlangAtom "BASE_MODULE") val_10))
  in let
    ms_18 =
      case (findMissingKey ms0_5 [(ErlangAtom "BASE_MODULE")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [ms0_5, map_ext_15])
        (DM.Just missing_17) -> (EXC.badkey missing_17)
  in let
    head_24 =
      (ErlangTuple [(ErlangAtom "string"), ln_0, modstring_7])
  in let
    val_21 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_24 ErlangEmptyList)])
  in let
    map_ext_29 =
      (ErlangMap
         (Map.singleton (ErlangAtom "BASE_MODULE_STRING") val_21))
  in
    case (findMissingKey ms_18
            [(ErlangAtom "BASE_MODULE_STRING")]) of
      (DM.Nothing) -> (BIF.maps__merge__2 [ms_18, map_ext_29])
      (DM.Just missing_31) -> (EXC.badkey missing_31)
erlps__scan_extends__2 [_ts_0, ms_1] = ms_1
erlps__scan_extends__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__scan_extends__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_err_warn__4 :: ErlangFun
erlps__scan_err_warn__4 [toks0_0@(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                           _]) _),
                         token_2@(ErlangTuple [(ErlangAtom "atom"), _, tag_1]),
                         from_3, st_4]
  =
  let
    _ =
      (EXC.tryOfCatch
         (\ _ -> (erlps__expand_macros__2 [toks0_0, st_4]))
         (\ of_7 ->
            case of_7 of
              toks_9 | (isEList toks_9) ->
                let
                  case_10 =
                    (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_term__1"
                       [toks_9])
                in
                  case case_10 of
                    (ErlangTuple [(ErlangAtom "ok"), term_12]) ->
                      let    tup_el_17 = (erlps__loc__1 [token_2])
                      in let tup_el_20 = (ErlangTuple [tag_1, term_12])
                      in let
                        tup_el_16 =
                          (ErlangTuple
                             [tup_el_17, (ErlangAtom "epp"), tup_el_20])
                      in let arg_14 = (ErlangTuple [tag_1, tup_el_16])
                      in (erlps__epp_reply__2 [from_3, arg_14])
                    (ErlangTuple [(ErlangAtom "error"), _]) ->
                      let    tup_el_27 = (erlps__loc__1 [token_2])
                      in let
                        tup_el_30 = (ErlangTuple [(ErlangAtom "bad"), tag_1])
                      in let
                        tup_el_26 =
                          (ErlangTuple
                             [tup_el_27, (ErlangAtom "epp"), tup_el_30])
                      in let
                        arg_24 = (ErlangTuple [(ErlangAtom "error"), tup_el_26])
                      in (erlps__epp_reply__2 [from_3, arg_24])
                    something_else -> (EXC.case_clause something_else)
              something_else -> (EXC.try_clause something_else))
         (\ ex_8 ->
            case ex_8 of
              (ErlangTuple [_, _, _]) ->
                let    tup_el_37 = (erlps__loc__1 [token_2])
                in let tup_el_40 = (ErlangTuple [(ErlangAtom "bad"), tag_1])
                in let
                  tup_el_36 =
                    (ErlangTuple [tup_el_37, (ErlangAtom "epp"), tup_el_40])
                in let arg_34 = (ErlangTuple [(ErlangAtom "error"), tup_el_36])
                in (erlps__epp_reply__2 [from_3, arg_34])
              ex_8 -> (EXC.raise ex_8)))
  in (erlps__wait_req_scan__1 [st_4])
erlps__scan_err_warn__4 [_toks_0,
                         token_2@(ErlangTuple [(ErlangAtom "atom"), _, tag_1]),
                         from_3, st_4]
  =
  let    tup_el_9 = (erlps__loc__1 [token_2])
  in let tup_el_12 = (ErlangTuple [(ErlangAtom "bad"), tag_1])
  in let
    tup_el_8 =
      (ErlangTuple [tup_el_9, (ErlangAtom "epp"), tup_el_12])
  in let arg_6 = (ErlangTuple [(ErlangAtom "error"), tup_el_8])
  in let _ = (erlps__epp_reply__2 [from_3, arg_6])
  in (erlps__wait_req_scan__1 [st_4])
erlps__scan_err_warn__4 [arg_16, arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__scan_err_warn__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_define__4 :: ErlangFun
erlps__scan_define__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                 _lp_0]) (ErlangCons mac_3@(ErlangTuple [type_1,
                                                                                         _lm_2,
                                                                                         _]) toks_4)),
                       def_5, from_6, st_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_13 = (BIF.erlang__op_exactEq [type_1, (ErlangAtom "atom")])
             in
               case lop_13 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [type_1, (ErlangAtom "var")])
                 _ -> (EXC.badarg1 lop_13)))) =
  (erlps__scan_define_1__5 [toks_4, mac_3, def_5, from_6, st_7])
erlps__scan_define__4 [_toks_0, def_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [def_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "define")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_define__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_define__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_define_1__5 :: ErlangFun
erlps__scan_define_1__5 [(ErlangCons comma_0@(ErlangTuple [(ErlangAtom ","),
                                                           _]) toks_1),
                         mac_2, _def_3, from_4, st_5]
  =
  let
    case_6 =
      (EXC.tryCatch
         (\ _ -> (erlps__macro_expansion__2 [toks_1, comma_0]))
         (\ ex_10 ->
            case ex_10 of
              (ErlangTuple [(ErlangAtom "throw"), payload_11, _]) -> payload_11
              (ErlangTuple [(ErlangAtom "error"), payload_12, stack_13]) ->
                let tup_el_15 = (ErlangTuple [payload_12, stack_13])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_15])
              (ErlangTuple [(ErlangAtom "exit"), payload_18, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_18])
              ex_10 -> (EXC.raise ex_10)))
  in
    case case_6 of
      expansion_21 | (isEList expansion_21) ->
        let arg_23 = (ErlangTuple [(ErlangAtom "none"), expansion_21])
        in
          (erlps__scan_define_2__5
             [(ErlangAtom "none"), arg_23, mac_2, from_4, st_5])
      (ErlangTuple [(ErlangAtom "error"), errl_29, what_30]) ->
        let   
          tup_el_34 = (ErlangTuple [errl_29, (ErlangAtom "epp"), what_30])
        in let arg_32 = (ErlangTuple [(ErlangAtom "error"), tup_el_34])
        in let _ = (erlps__epp_reply__2 [from_4, arg_32])
        in (erlps__wait_req_scan__1 [st_5])
      something_else -> (EXC.case_clause something_else)
erlps__scan_define_1__5 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                   _lc_0]) toks_1),
                         mac_2, def_3, from_4, st_5]
  =
  let
    case_6 =
      (EXC.tryCatch
         (\ _ -> (erlps__macro_pars__2 [toks_1, ErlangEmptyList]))
         (\ ex_10 ->
            case ex_10 of
              (ErlangTuple [(ErlangAtom "throw"), payload_11, _]) -> payload_11
              (ErlangTuple [(ErlangAtom "error"), payload_12, stack_13]) ->
                let tup_el_15 = (ErlangTuple [payload_12, stack_13])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_15])
              (ErlangTuple [(ErlangAtom "exit"), payload_18, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_18])
              ex_10 -> (EXC.raise ex_10)))
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "ok"),
                    macrodef_22@(ErlangTuple [as_21, _])]) ->
        let len_24 = (BIF.erlang__length__1 [as_21])
        in
          (erlps__scan_define_2__5
             [len_24, macrodef_22, mac_2, from_4, st_5])
      (ErlangTuple [(ErlangAtom "error"), errl_30, what_31]) ->
        let   
          tup_el_35 = (ErlangTuple [errl_30, (ErlangAtom "epp"), what_31])
        in let arg_33 = (ErlangTuple [(ErlangAtom "error"), tup_el_35])
        in let _ = (erlps__epp_reply__2 [from_4, arg_33])
        in (erlps__wait_req_scan__1 [st_5])
      _ ->
        let    tup_el_44 = (erlps__loc__1 [def_3])
        in let
          tup_el_47 =
            (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "define")])
        in let
          tup_el_43 =
            (ErlangTuple [tup_el_44, (ErlangAtom "epp"), tup_el_47])
        in let arg_41 = (ErlangTuple [(ErlangAtom "error"), tup_el_43])
        in let _ = (erlps__epp_reply__2 [from_4, arg_41])
        in (erlps__wait_req_scan__1 [st_5])
      something_else -> (EXC.case_clause something_else)
erlps__scan_define_1__5 [_toks_0, _mac_1, def_2, from_3, st_4] =
  let    tup_el_9 = (erlps__loc__1 [def_2])
  in let
    tup_el_12 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "define")])
  in let
    tup_el_8 =
      (ErlangTuple [tup_el_9, (ErlangAtom "epp"), tup_el_12])
  in let arg_6 = (ErlangTuple [(ErlangAtom "error"), tup_el_8])
  in let _ = (erlps__epp_reply__2 [from_3, arg_6])
  in (erlps__wait_req_scan__1 [st_4])
erlps__scan_define_1__5 [arg_16, arg_17, arg_18, arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__scan_define_1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_define_2__5 :: ErlangFun
erlps__scan_define_2__5 [arity_0, def_1,
                         mac_3@(ErlangTuple [_, _, key_2]), from_4,
                         st_6@(ErlangTuple [(ErlangAtom "epp"), _, _, _, _, _,
                                            _, _, _, ms_5, _, _, _, _])]
  =
  case ms_5 of
    (ErlangMap map_8) | (DM.Just defs_9) <-
                          ((Map.lookup key_2 map_8))
                      , (isEList defs_9) ->
      let
        case_10 =
          (BIF.do_remote_fun_call "Proplists" "erlps__is_defined__2"
             [arity_0, defs_9])
      in
        case case_10 of
          (ErlangAtom "true") ->
            let    tup_el_17 = (erlps__loc__1 [mac_3])
            in let tup_el_20 = (ErlangTuple [(ErlangAtom "redefine"), key_2])
            in let
              tup_el_16 =
                (ErlangTuple [tup_el_17, (ErlangAtom "epp"), tup_el_20])
            in let arg_14 = (ErlangTuple [(ErlangAtom "error"), tup_el_16])
            in let _ = (erlps__epp_reply__2 [from_4, arg_14])
            in (erlps__wait_req_scan__1 [st_6])
          (ErlangAtom "false") ->
            (erlps__scan_define_cont__6
               [from_4, st_6, key_2, defs_9, arity_0, def_1])
          something_else -> (EXC.case_clause something_else)
    (ErlangMap map_30) | (DM.Just _) <-
                           ((Map.lookup key_2 map_30)) ->
      let    tup_el_35 = (erlps__loc__1 [mac_3])
      in let
        tup_el_38 = (ErlangTuple [(ErlangAtom "redefine_predef"), key_2])
      in let
        tup_el_34 =
          (ErlangTuple [tup_el_35, (ErlangAtom "epp"), tup_el_38])
      in let arg_32 = (ErlangTuple [(ErlangAtom "error"), tup_el_34])
      in let _ = (erlps__epp_reply__2 [from_4, arg_32])
      in (erlps__wait_req_scan__1 [st_6])
    _ ->
      (erlps__scan_define_cont__6
         [from_4, st_6, key_2, ErlangEmptyList, arity_0, def_1])
    something_else -> (EXC.case_clause something_else)
erlps__scan_define_2__5 [arg_48, arg_49, arg_50, arg_51, arg_52]
  =
  (EXC.function_clause unit)
erlps__scan_define_2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_define_cont__6 :: ErlangFun
erlps__scan_define_cont__6 [f_0,
                            st_2@(ErlangTuple [(ErlangAtom "epp"), _, _, _, _,
                                               _, _, _, _, ms0_1, _, _, _, _]),
                            m_3, defs_4, arity_5, def_6]
  =
  let    head_10 = (ErlangTuple [arity_5, def_6])
  in let
    map_ext_14 =
      (ErlangMap (Map.singleton m_3 (ErlangCons head_10 defs_4)))
  in let ms_16 = (BIF.maps__merge__2 [ms0_1, map_ext_14])
  in
    (EXC.tryOfCatch (\ _ -> (erlps__macro_uses__1 [def_6]))
       (\ of_18 ->
          case of_18 of
            u_20 ->
              let   
                uses0_24 =
                  case st_2 of
                    (ErlangTuple arr_23) | (DM.Just field_22) <-
                                             ((arr_23 DA.!! 10)) ->
                      field_22
                    _ -> (EXC.badrecord (ErlangAtom "epp"))
              in let head_25 = (ErlangTuple [arity_5, u_20])
              in let
                tail_28 =
                  case uses0_24 of
                    (ErlangMap map_30) | (DM.Just uselist_31) <-
                                           ((Map.lookup m_3 map_30)) ->
                      uselist_31
                    _ -> ErlangEmptyList
                    something_else -> (EXC.case_clause something_else)
              in let
                map_ext_36 =
                  (ErlangMap (Map.singleton m_3 (ErlangCons head_25 tail_28)))
              in let uses_38 = (BIF.maps__merge__2 [uses0_24, map_ext_36])
              in let
                arg_40 =
                  case st_2 of
                    (ErlangTuple [(ErlangAtom "epp"), file_44, location_45,
                                  delta_46, name_47, name2_48, istk_49, sstk_50,
                                  path_51, macs_52, uses_53,
                                  default_encoding_54, pre_opened_55,
                                  fname_56]) ->
                      (ErlangTuple
                         [(ErlangAtom "epp"), file_44, location_45, delta_46,
                          name_47, name2_48, istk_49, sstk_50, path_51, ms_16,
                          uses_38, default_encoding_54, pre_opened_55,
                          fname_56])
                    _ -> (EXC.badrecord (ErlangAtom "epp"))
              in (erlps__scan_toks__2 [f_0, arg_40])
            something_else -> (EXC.try_clause something_else))
       (\ ex_19 ->
          case ex_19 of
            (ErlangTuple [(ErlangAtom "throw"),
                          (ErlangTuple [(ErlangAtom "error"), line_57,
                                        reason_58]),
                          _]) ->
              let   
                tup_el_62 =
                  (ErlangTuple [line_57, (ErlangAtom "epp"), reason_58])
              in let arg_60 = (ErlangTuple [(ErlangAtom "error"), tup_el_62])
              in let _ = (erlps__epp_reply__2 [f_0, arg_60])
              in (erlps__wait_req_scan__1 [st_2])
            ex_19 -> (EXC.raise ex_19)))
erlps__scan_define_cont__6 [arg_67, arg_68, arg_69, arg_70,
                            arg_71, arg_72]
  =
  (EXC.function_clause unit)
erlps__scan_define_cont__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_uses__1 :: ErlangFun
erlps__macro_uses__1 [(ErlangTuple [_args_0, tokens_1])] =
  let uses0_3 = (erlps__macro_ref__1 [tokens_1])
  in (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [uses0_3])
erlps__macro_uses__1 [arg_5] = (EXC.function_clause unit)
erlps__macro_uses__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_ref__1 :: ErlangFun
erlps__macro_ref__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__macro_ref__1 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                               _]) (ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                                             _]) rest_0))]
  =
  (erlps__macro_ref__1 [rest_0])
erlps__macro_ref__1 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                               _]) (ErlangCons atom_1@(ErlangTuple [(ErlangAtom "atom"),
                                                                                    _,
                                                                                    a_0]) rest_2))]
  =
  let    lm_4 = (erlps__loc__1 [atom_1])
  in let arity_8 = (erlps__count_args__3 [rest_2, lm_4, a_0])
  in let head_9 = (ErlangTuple [a_0, arity_8])
  in let tail_12 = (erlps__macro_ref__1 [rest_2])
  in (ErlangCons head_9 tail_12)
erlps__macro_ref__1 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                               _]) (ErlangCons var_1@(ErlangTuple [(ErlangAtom "var"),
                                                                                   _,
                                                                                   a_0]) rest_2))]
  =
  let    lm_4 = (erlps__loc__1 [var_1])
  in let arity_8 = (erlps__count_args__3 [rest_2, lm_4, a_0])
  in let head_9 = (ErlangTuple [a_0, arity_8])
  in let tail_12 = (erlps__macro_ref__1 [rest_2])
  in (ErlangCons head_9 tail_12)
erlps__macro_ref__1 [(ErlangCons _token_0 rest_1)] =
  (erlps__macro_ref__1 [rest_1])
erlps__macro_ref__1 [arg_3] = (EXC.function_clause unit)
erlps__macro_ref__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_undef__4 :: ErlangFun
erlps__scan_undef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                   _lm_1,
                                                                                   m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                   _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                      _ld_4]) (ErlangEmptyList))))),
                      _undef_5, from_6, st_7]
  =
  let   
    arg_9 =
      case st_7 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 9)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let macs_13 = (BIF.maps__remove__2 [m_2, arg_9])
  in let
    arg_15 =
      case st_7 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 10)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let uses_19 = (BIF.maps__remove__2 [m_2, arg_15])
  in let
    arg_21 =
      case st_7 of
        (ErlangTuple [(ErlangAtom "epp"), file_25, location_26, delta_27,
                      name_28, name2_29, istk_30, sstk_31, path_32, macs_33,
                      uses_34, default_encoding_35, pre_opened_36, fname_37]) ->
          (ErlangTuple
             [(ErlangAtom "epp"), file_25, location_26, delta_27, name_28,
              name2_29, istk_30, sstk_31, path_32, macs_13, uses_19,
              default_encoding_35, pre_opened_36, fname_37])
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in (erlps__scan_toks__2 [from_6, arg_21])
erlps__scan_undef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                   _lm_1,
                                                                                   m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                   _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                      _ld_4]) (ErlangEmptyList))))),
                      _undef_5, from_6, st_7]
  =
  let   
    arg_9 =
      case st_7 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 9)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let macs_13 = (BIF.maps__remove__2 [m_2, arg_9])
  in let
    arg_15 =
      case st_7 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 10)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let uses_19 = (BIF.maps__remove__2 [m_2, arg_15])
  in let
    arg_21 =
      case st_7 of
        (ErlangTuple [(ErlangAtom "epp"), file_25, location_26, delta_27,
                      name_28, name2_29, istk_30, sstk_31, path_32, macs_33,
                      uses_34, default_encoding_35, pre_opened_36, fname_37]) ->
          (ErlangTuple
             [(ErlangAtom "epp"), file_25, location_26, delta_27, name_28,
              name2_29, istk_30, sstk_31, path_32, macs_13, uses_19,
              default_encoding_35, pre_opened_36, fname_37])
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in (erlps__scan_toks__2 [from_6, arg_21])
erlps__scan_undef__4 [_toks_0, undef_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [undef_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "undef")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_undef__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_undef__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_include__4 :: ErlangFun
erlps__scan_include__4 [tokens0_0, inc_1, from_2, st_3] =
  let tokens_5 = (erlps__coalesce_strings__1 [tokens0_0])
  in (erlps__scan_include1__4 [tokens_5, inc_1, from_2, st_3])
erlps__scan_include__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__scan_include__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_include1__4 :: ErlangFun
erlps__scan_include1__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                   _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                                                      _lf_1,
                                                                                      newname0_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                             _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                                _ld_4]) (ErlangEmptyList))))),
                         inc_5, from_6, st_7]
  =
  let newname_9 = (erlps__expand_var__1 [newname0_2])
  in (erlps__enter_file__4 [newname_9, inc_5, from_6, st_7])
erlps__scan_include1__4 [_toks_0, inc_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [inc_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "include")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_include1__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_include1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_lib_dir__1 :: ErlangFun
erlps__expand_lib_dir__1 [name_0] =
  (EXC.tryCatch
     (\ _ ->
        let
          match_expr_4 =
            (BIF.do_remote_fun_call "Filename" "erlps__split__1" [name_0])
        in
          case match_expr_4 of
            (ErlangCons app_2 path_3) ->
              let    arg_5 = (BIF.erlang__list_to_atom__1 [app_2])
              in let
                libdir_7 =
                  (BIF.do_remote_fun_call "Code" "erlps__lib_dir__1" [arg_5])
              in let
                tup_el_9 = (erlps__fname_join__1 [(ErlangCons libdir_7 path_3)])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_9])
            _ -> (EXC.badmatch match_expr_4))
     (\ ex_14 ->
        case ex_14 of
          (ErlangTuple [_, _, _]) -> (ErlangAtom "error")
          ex_14 -> (EXC.raise ex_14)))
erlps__expand_lib_dir__1 [arg_15] = (EXC.function_clause unit)
erlps__expand_lib_dir__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_include_lib__4 :: ErlangFun
erlps__scan_include_lib__4 [tokens0_0, inc_1, from_2, st_3] =
  let tokens_5 = (erlps__coalesce_strings__1 [tokens0_0])
  in (erlps__scan_include_lib1__4 [tokens_5, inc_1, from_2, st_3])
erlps__scan_include_lib__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__scan_include_lib__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_include_lib1__4 :: ErlangFun
erlps__scan_include_lib1__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                       _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                                                          _lf_1,
                                                                                          _newname0_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                                  _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                                     _ld_4]) (ErlangEmptyList))))),
                             inc_5, from_6, st_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               arg_20 =
                 case st_7 of
                   (ErlangTuple arr_23) | (DM.Just field_22) <-
                                            ((arr_23 DA.!! 7)) ->
                     field_22
                   _ -> (EXC.badrecord (ErlangAtom "epp"))
             in let lop_19 = (BIF.erlang__length__1 [arg_20])
             in
               (BIF.erlang__op_greaterEq
                  [lop_19, (ErlangInt (DBI.fromInt 8))])))) =
  let    tup_el_12 = (erlps__loc__1 [inc_5])
  in let tup_el_17 = (make_string "include_lib")
  in let
    tup_el_15 = (ErlangTuple [(ErlangAtom "depth"), tup_el_17])
  in let
    tup_el_11 =
      (ErlangTuple [tup_el_12, (ErlangAtom "epp"), tup_el_15])
  in let arg_9 = (ErlangTuple [(ErlangAtom "error"), tup_el_11])
  in let _ = (erlps__epp_reply__2 [from_6, arg_9])
  in (erlps__wait_req_scan__1 [st_7])
erlps__scan_include_lib1__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                       _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                                                          _lf_1,
                                                                                          newname0_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                                 _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                                    _ld_4]) (ErlangEmptyList))))),
                             inc_5, from_6, st_7]
  =
  let    newname_9 = (erlps__expand_var__1 [newname0_2])
  in let
    arg_10 =
      case st_7 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 2)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let loc_14 = (erlps__start_loc__1 [arg_10])
  in let
    arg_16 =
      case st_7 of
        (ErlangTuple arr_19) | (DM.Just field_18) <-
                                 ((arr_19 DA.!! 8)) ->
          field_18
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    case_15 =
      (BIF.do_remote_fun_call "File" "erlps__path_open__3"
         [arg_16, newname_9,
          (ErlangCons (ErlangAtom "read") ErlangEmptyList)])
  in
    case case_15 of
      (ErlangTuple [(ErlangAtom "ok"), newf_24, pname_25]) ->
        let
          arg_26 =
            (erlps__enter_file2__5 [newf_24, pname_25, from_6, st_7, loc_14])
        in (erlps__wait_req_scan__1 [arg_26])
      (ErlangTuple [(ErlangAtom "error"), _e1_32]) ->
        let case_33 = (erlps__expand_lib_dir__1 [newname_9])
        in
          case case_33 of
            (ErlangTuple [(ErlangAtom "ok"), header_35]) ->
              let
                case_36 =
                  (BIF.do_remote_fun_call "File" "erlps__open__2"
                     [header_35,
                      (ErlangCons (ErlangAtom "read") ErlangEmptyList)])
              in
                case case_36 of
                  (ErlangTuple [(ErlangAtom "ok"), newf_41]) ->
                    let
                      arg_42 =
                        (erlps__enter_file2__5
                           [newf_41, header_35, from_6, st_7, loc_14])
                    in (erlps__wait_req_scan__1 [arg_42])
                  (ErlangTuple [(ErlangAtom "error"), _e2_48]) ->
                    let    tup_el_53 = (erlps__loc__1 [inc_5])
                    in let
                      tup_el_56 =
                        (ErlangTuple
                           [(ErlangAtom "include"), (ErlangAtom "lib"),
                            newname_9])
                    in let
                      tup_el_52 =
                        (ErlangTuple [tup_el_53, (ErlangAtom "epp"), tup_el_56])
                    in let
                      arg_50 = (ErlangTuple [(ErlangAtom "error"), tup_el_52])
                    in let _ = (erlps__epp_reply__2 [from_6, arg_50])
                    in (erlps__wait_req_scan__1 [st_7])
                  something_else -> (EXC.case_clause something_else)
            (ErlangAtom "error") ->
              let    tup_el_65 = (erlps__loc__1 [inc_5])
              in let
                tup_el_68 =
                  (ErlangTuple
                     [(ErlangAtom "include"), (ErlangAtom "lib"), newname_9])
              in let
                tup_el_64 =
                  (ErlangTuple [tup_el_65, (ErlangAtom "epp"), tup_el_68])
              in let arg_62 = (ErlangTuple [(ErlangAtom "error"), tup_el_64])
              in let _ = (erlps__epp_reply__2 [from_6, arg_62])
              in (erlps__wait_req_scan__1 [st_7])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__scan_include_lib1__4 [_toks_0, inc_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [inc_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "include_lib")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_include_lib1__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_include_lib1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_ifdef__4 :: ErlangFun
erlps__scan_ifdef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                   _lm_1,
                                                                                   m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                   _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                      _ld_4]) (ErlangEmptyList))))),
                      _ifd_5, from_6, st_7]
  =
  let
    case_8 =
      case st_7 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 9)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_8 of
      (ErlangMap map_12) | (DM.Just _def_13) <-
                             ((Map.lookup m_2 map_12)) ->
        let   
          tail_19 =
            case st_7 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 6)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          arg_15 =
            case st_7 of
              (ErlangTuple [(ErlangAtom "epp"), file_23, location_24, delta_25,
                            name_26, name2_27, istk_28, sstk_29, path_30,
                            macs_31, uses_32, default_encoding_33,
                            pre_opened_34, fname_35]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_23, location_24, delta_25, name_26,
                    name2_27, (ErlangCons (ErlangAtom "ifdef") tail_19),
                    sstk_29, path_30, macs_31, uses_32, default_encoding_33,
                    pre_opened_34, fname_35])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__2 [from_6, arg_15])
      _ ->
        (erlps__skip_toks__3
           [from_6, st_7,
            (ErlangCons (ErlangAtom "ifdef") ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__scan_ifdef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                   _lm_1,
                                                                                   m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                   _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                      _ld_4]) (ErlangEmptyList))))),
                      _ifd_5, from_6, st_7]
  =
  let
    case_8 =
      case st_7 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 9)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_8 of
      (ErlangMap map_12) | (DM.Just _def_13) <-
                             ((Map.lookup m_2 map_12)) ->
        let   
          tail_19 =
            case st_7 of
              (ErlangTuple arr_22) | (DM.Just field_21) <-
                                       ((arr_22 DA.!! 6)) ->
                field_21
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          arg_15 =
            case st_7 of
              (ErlangTuple [(ErlangAtom "epp"), file_23, location_24, delta_25,
                            name_26, name2_27, istk_28, sstk_29, path_30,
                            macs_31, uses_32, default_encoding_33,
                            pre_opened_34, fname_35]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_23, location_24, delta_25, name_26,
                    name2_27, (ErlangCons (ErlangAtom "ifdef") tail_19),
                    sstk_29, path_30, macs_31, uses_32, default_encoding_33,
                    pre_opened_34, fname_35])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__2 [from_6, arg_15])
      _ ->
        (erlps__skip_toks__3
           [from_6, st_7,
            (ErlangCons (ErlangAtom "ifdef") ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__scan_ifdef__4 [_toks_0, ifdef_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [ifdef_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "ifdef")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in
    (erlps__wait_req_skip__2
       [st_3, (ErlangCons (ErlangAtom "ifdef") ErlangEmptyList)])
erlps__scan_ifdef__4 [arg_18, arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__scan_ifdef__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_ifndef__4 :: ErlangFun
erlps__scan_ifndef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                 _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                    _lm_1,
                                                                                    m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                    _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                       _ld_4]) (ErlangEmptyList))))),
                       _ifnd_5, from_6, st_7]
  =
  let
    case_8 =
      case st_7 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 9)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_8 of
      (ErlangMap map_12) | (DM.Just _def_13) <-
                             ((Map.lookup m_2 map_12)) ->
        (erlps__skip_toks__3
           [from_6, st_7,
            (ErlangCons (ErlangAtom "ifndef") ErlangEmptyList)])
      _ ->
        let   
          tail_24 =
            case st_7 of
              (ErlangTuple arr_27) | (DM.Just field_26) <-
                                       ((arr_27 DA.!! 6)) ->
                field_26
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          arg_20 =
            case st_7 of
              (ErlangTuple [(ErlangAtom "epp"), file_28, location_29, delta_30,
                            name_31, name2_32, istk_33, sstk_34, path_35,
                            macs_36, uses_37, default_encoding_38,
                            pre_opened_39, fname_40]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_28, location_29, delta_30, name_31,
                    name2_32, (ErlangCons (ErlangAtom "ifndef") tail_24),
                    sstk_34, path_35, macs_36, uses_37, default_encoding_38,
                    pre_opened_39, fname_40])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__2 [from_6, arg_20])
      something_else -> (EXC.case_clause something_else)
erlps__scan_ifndef__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                 _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                    _lm_1,
                                                                                    m_2]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                    _lrp_3]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                       _ld_4]) (ErlangEmptyList))))),
                       _ifnd_5, from_6, st_7]
  =
  let
    case_8 =
      case st_7 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 9)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_8 of
      (ErlangMap map_12) | (DM.Just _def_13) <-
                             ((Map.lookup m_2 map_12)) ->
        (erlps__skip_toks__3
           [from_6, st_7,
            (ErlangCons (ErlangAtom "ifndef") ErlangEmptyList)])
      _ ->
        let   
          tail_24 =
            case st_7 of
              (ErlangTuple arr_27) | (DM.Just field_26) <-
                                       ((arr_27 DA.!! 6)) ->
                field_26
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          arg_20 =
            case st_7 of
              (ErlangTuple [(ErlangAtom "epp"), file_28, location_29, delta_30,
                            name_31, name2_32, istk_33, sstk_34, path_35,
                            macs_36, uses_37, default_encoding_38,
                            pre_opened_39, fname_40]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_28, location_29, delta_30, name_31,
                    name2_32, (ErlangCons (ErlangAtom "ifndef") tail_24),
                    sstk_34, path_35, macs_36, uses_37, default_encoding_38,
                    pre_opened_39, fname_40])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__2 [from_6, arg_20])
      something_else -> (EXC.case_clause something_else)
erlps__scan_ifndef__4 [_toks_0, ifndef_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [ifndef_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "ifndef")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in
    (erlps__wait_req_skip__2
       [st_3, (ErlangCons (ErlangAtom "ifndef") ErlangEmptyList)])
erlps__scan_ifndef__4 [arg_18, arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__scan_ifndef__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_else__4 :: ErlangFun
erlps__scan_else__4 [(ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                               _ld_0]) (ErlangEmptyList)),
                     else_1, from_2, st_3]
  =
  let
    case_4 =
      case st_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_4 of
      (ErlangCons (ErlangAtom "else") cis_8) ->
        let    tup_el_13 = (erlps__loc__1 [else_1])
        in let tup_el_18 = (make_string "repeated")
        in let
          tup_el_16 =
            (ErlangTuple
               [(ErlangAtom "illegal"), tup_el_18, (ErlangAtom "else")])
        in let
          tup_el_12 =
            (ErlangTuple [tup_el_13, (ErlangAtom "epp"), tup_el_16])
        in let arg_10 = (ErlangTuple [(ErlangAtom "error"), tup_el_12])
        in let _ = (erlps__epp_reply__2 [from_2, arg_10])
        in let
          arg_20 =
            case st_3 of
              (ErlangTuple [(ErlangAtom "epp"), file_23, location_24, delta_25,
                            name_26, name2_27, istk_28, sstk_29, path_30,
                            macs_31, uses_32, default_encoding_33,
                            pre_opened_34, fname_35]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_23, location_24, delta_25, name_26,
                    name2_27, cis_8, sstk_29, path_30, macs_31, uses_32,
                    default_encoding_33, pre_opened_34, fname_35])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__wait_req_skip__2
             [arg_20, (ErlangCons (ErlangAtom "else") ErlangEmptyList)])
      (ErlangCons _i_39 cis_40) ->
        let
          arg_42 =
            case st_3 of
              (ErlangTuple [(ErlangAtom "epp"), file_45, location_46, delta_47,
                            name_48, name2_49, istk_50, sstk_51, path_52,
                            macs_53, uses_54, default_encoding_55,
                            pre_opened_56, fname_57]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_45, location_46, delta_47, name_48,
                    name2_49, cis_40, sstk_51, path_52, macs_53, uses_54,
                    default_encoding_55, pre_opened_56, fname_57])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3
             [from_2, arg_42,
              (ErlangCons (ErlangAtom "else") ErlangEmptyList)])
      (ErlangEmptyList) ->
        let    tup_el_65 = (erlps__loc__1 [else_1])
        in let tup_el_70 = (make_string "unbalanced")
        in let
          tup_el_68 =
            (ErlangTuple
               [(ErlangAtom "illegal"), tup_el_70, (ErlangAtom "else")])
        in let
          tup_el_64 =
            (ErlangTuple [tup_el_65, (ErlangAtom "epp"), tup_el_68])
        in let arg_62 = (ErlangTuple [(ErlangAtom "error"), tup_el_64])
        in let _ = (erlps__epp_reply__2 [from_2, arg_62])
        in (erlps__wait_req_scan__1 [st_3])
      something_else -> (EXC.case_clause something_else)
erlps__scan_else__4 [_toks_0, else_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [else_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "else")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_else__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_else__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_if__4 :: ErlangFun
erlps__scan_if__4 [toks_0@(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                    _]) _),
                   if_1, from_2, st_3]
  =
  (EXC.tryOfCatch (\ _ -> (erlps__eval_if__2 [toks_0, st_3]))
     (\ of_6 ->
        case of_6 of
          (ErlangAtom "true") ->
            let   
              tail_13 =
                case st_3 of
                  (ErlangTuple arr_16) | (DM.Just field_15) <-
                                           ((arr_16 DA.!! 6)) ->
                    field_15
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in let
              arg_9 =
                case st_3 of
                  (ErlangTuple [(ErlangAtom "epp"), file_17, location_18,
                                delta_19, name_20, name2_21, istk_22, sstk_23,
                                path_24, macs_25, uses_26, default_encoding_27,
                                pre_opened_28, fname_29]) ->
                    (ErlangTuple
                       [(ErlangAtom "epp"), file_17, location_18, delta_19,
                        name_20, name2_21,
                        (ErlangCons (ErlangAtom "if") tail_13), sstk_23,
                        path_24, macs_25, uses_26, default_encoding_27,
                        pre_opened_28, fname_29])
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in (erlps__scan_toks__2 [from_2, arg_9])
          _ ->
            (erlps__skip_toks__3
               [from_2, st_3, (ErlangCons (ErlangAtom "if") ErlangEmptyList)])
          something_else -> (EXC.try_clause something_else))
     (\ ex_7 ->
        case ex_7 of
          (ErlangTuple [(ErlangAtom "throw"), error0_35, _]) ->
            let   
              error_52 =
                case error0_35 of
                  (ErlangTuple [_, (ErlangAtom "erl_parse"), _]) ->
                    (ErlangTuple [(ErlangAtom "error"), error0_35])
                  (ErlangTuple [(ErlangAtom "error"), errl_39, what_40]) ->
                    let
                      tup_el_42 =
                        (ErlangTuple [errl_39, (ErlangAtom "epp"), what_40])
                    in (ErlangTuple [(ErlangAtom "error"), tup_el_42])
                  _ ->
                    let    tup_el_48 = (erlps__loc__1 [if_1])
                    in let
                      tup_el_47 =
                        (ErlangTuple [tup_el_48, (ErlangAtom "epp"), error0_35])
                    in (ErlangTuple [(ErlangAtom "error"), tup_el_47])
                  something_else -> (EXC.case_clause something_else)
            in let _ = (erlps__epp_reply__2 [from_2, error_52])
            in
              (erlps__wait_req_skip__2
                 [st_3, (ErlangCons (ErlangAtom "if") ErlangEmptyList)])
          ex_7 -> (EXC.raise ex_7)))
erlps__scan_if__4 [_toks_0, if_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [if_1])
  in let
    tup_el_11 = (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "if")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in
    (erlps__wait_req_skip__2
       [st_3, (ErlangCons (ErlangAtom "if") ErlangEmptyList)])
erlps__scan_if__4 [arg_18, arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__scan_if__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_if__2 :: ErlangFun
erlps__eval_if__2 [toks0_0, st_1] =
  let    toks_4 = (erlps__expand_macros__2 [toks0_0, st_1])
  in let
    case_5 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__parse_exprs__1"
         [toks_4])
  in let
    es1_10 =
      case case_5 of
        (ErlangTuple [(ErlangAtom "ok"), es0_7]) -> es0_7
        (ErlangTuple [(ErlangAtom "error"), e_8]) ->
          (BIF.erlang__throw__1 [e_8])
        something_else -> (EXC.case_clause something_else)
  in let es_13 = (erlps__rewrite_expr__2 [es1_10, st_1])
  in let _ = (erlps__assert_guard_expr__1 [es_13])
  in let
    bs_15 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__new_bindings__0" [])
  in let
    localfun_22 =
      (ErlangFun 2
         let
           lambda_16 [_name_19, _args_20] =
             (BIF.erlang__error__1 [(ErlangAtom "badarg")])
           lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
           lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
         in lambda_16)
  in
    (EXC.tryOfCatch
       (\ _ ->
          let arg_25 = (ErlangTuple [(ErlangAtom "value"), localfun_22])
          in
            (BIF.do_remote_fun_call "Erl.Eval" "erlps__exprs__3"
               [es_13, bs_15, arg_25]))
       (\ of_28 ->
          case of_28 of
            (ErlangTuple [(ErlangAtom "value"), res_30, _]) -> res_30
            something_else -> (EXC.try_clause something_else))
       (\ ex_29 ->
          case ex_29 of
            (ErlangTuple [_, _, _]) -> (ErlangAtom "false")
            ex_29 -> (EXC.raise ex_29)))
erlps__eval_if__2 [arg_31, arg_32] = (EXC.function_clause unit)
erlps__eval_if__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__assert_guard_expr__1 :: ErlangFun
erlps__assert_guard_expr__1 [(ErlangCons e0_0 (ErlangEmptyList))]
  =
  let    e_3 = (erlps__rewrite_expr__2 [e0_0, (ErlangAtom "none")])
  in let
    case_4 =
      (BIF.do_remote_fun_call "Erl.Lint" "erlps__is_guard_expr__1"
         [e_3])
  in
    case case_4 of
      (ErlangAtom "false") ->
        let arg_6 = (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "if")])
        in (BIF.erlang__throw__1 [arg_6])
      (ErlangAtom "true") -> (ErlangAtom "ok")
      something_else -> (EXC.case_clause something_else)
erlps__assert_guard_expr__1 [_] =
  let arg_0 = (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "if")])
  in (BIF.erlang__throw__1 [arg_0])
erlps__assert_guard_expr__1 [arg_3] = (EXC.function_clause unit)
erlps__assert_guard_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rewrite_expr__2 :: ErlangFun
erlps__rewrite_expr__2 [(ErlangTuple [(ErlangAtom "call"), _,
                                      (ErlangTuple [(ErlangAtom "atom"), _,
                                                    (ErlangAtom "defined")]),
                                      (ErlangCons n0_0 (ErlangEmptyList))]),
                        (ErlangTuple [(ErlangAtom "epp"), _, _, _, _, _, _, _,
                                      _, macs_1, _, _, _, _])]
  =
  let   
    n_8 =
      case n0_0 of
        (ErlangTuple [(ErlangAtom "var"), _, n1_3]) -> n1_3
        (ErlangTuple [(ErlangAtom "atom"), _, n1_4]) -> n1_4
        _ ->
          let arg_5 = (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "if")])
          in (BIF.erlang__throw__1 [arg_5])
        something_else -> (EXC.case_clause something_else)
  in let tup_el_11 = (BIF.maps__is_key__2 [n_8, macs_1])
  in
    (ErlangTuple
       [(ErlangAtom "atom"), (ErlangInt (DBI.fromInt 0)), tup_el_11])
erlps__rewrite_expr__2 [(ErlangTuple [(ErlangAtom "call"), _,
                                      (ErlangTuple [(ErlangAtom "atom"), _,
                                                    name_0]),
                                      as0_1]),
                        (ErlangAtom "none")]
  =
  let   
    as_4 = (erlps__rewrite_expr__2 [as0_1, (ErlangAtom "none")])
  in let arity_6 = (BIF.erlang__length__1 [as_4])
  in let
    lop_8 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
         [name_0, arity_6])
  in let
    case_7 =
      case lop_8 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let
            op_arg_11 =
              (BIF.do_remote_fun_call "Erl.Internal" "erlps__guard_bif__2"
                 [name_0, arity_6])
          in (BIF.erlang__not__1 [op_arg_11])
        _ -> (EXC.badarg1 lop_8)
  in
    case case_7 of
      (ErlangAtom "false") -> (erlps__to_conses__1 [as_4])
      (ErlangAtom "true") ->
        let
          arg_15 = (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "if")])
        in (BIF.erlang__throw__1 [arg_15])
      something_else -> (EXC.case_clause something_else)
erlps__rewrite_expr__2 [(ErlangCons h_0 t_1), st_2] =
  let    head_3 = (erlps__rewrite_expr__2 [h_0, st_2])
  in let tail_6 = (erlps__rewrite_expr__2 [t_1, st_2])
  in (ErlangCons head_3 tail_6)
erlps__rewrite_expr__2 [tuple_0, st_1] | (isETuple tuple_0) =
  let    arg_3 = (BIF.erlang__tuple_to_list__1 [tuple_0])
  in let arg_2 = (erlps__rewrite_expr__2 [arg_3, st_1])
  in (BIF.erlang__list_to_tuple__1 [arg_2])
erlps__rewrite_expr__2 [other_0, _] = other_0
erlps__rewrite_expr__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__rewrite_expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_conses__1 :: ErlangFun
erlps__to_conses__1 [(ErlangCons h_0 t_1)] =
  let tup_el_5 = (erlps__to_conses__1 [t_1])
  in
    (ErlangTuple
       [(ErlangAtom "cons"), (ErlangInt (DBI.fromInt 0)), h_0,
        tup_el_5])
erlps__to_conses__1 [(ErlangEmptyList)] =
  (ErlangTuple [(ErlangAtom "nil"), (ErlangInt (DBI.fromInt 0))])
erlps__to_conses__1 [arg_2] = (EXC.function_clause unit)
erlps__to_conses__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_elif__4 :: ErlangFun
erlps__scan_elif__4 [_toks_0, elif_1, from_2, st_3] =
  let
    case_4 =
      case st_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_4 of
      (ErlangCons (ErlangAtom "else") cis_8) ->
        let    tup_el_13 = (erlps__loc__1 [elif_1])
        in let tup_el_18 = (make_string "unbalanced")
        in let
          tup_el_16 =
            (ErlangTuple
               [(ErlangAtom "illegal"), tup_el_18, (ErlangAtom "elif")])
        in let
          tup_el_12 =
            (ErlangTuple [tup_el_13, (ErlangAtom "epp"), tup_el_16])
        in let arg_10 = (ErlangTuple [(ErlangAtom "error"), tup_el_12])
        in let _ = (erlps__epp_reply__2 [from_2, arg_10])
        in let
          arg_20 =
            case st_3 of
              (ErlangTuple [(ErlangAtom "epp"), file_23, location_24, delta_25,
                            name_26, name2_27, istk_28, sstk_29, path_30,
                            macs_31, uses_32, default_encoding_33,
                            pre_opened_34, fname_35]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_23, location_24, delta_25, name_26,
                    name2_27, cis_8, sstk_29, path_30, macs_31, uses_32,
                    default_encoding_33, pre_opened_34, fname_35])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__wait_req_skip__2
             [arg_20, (ErlangCons (ErlangAtom "else") ErlangEmptyList)])
      (ErlangCons _i_39 cis_40) ->
        let
          arg_42 =
            case st_3 of
              (ErlangTuple [(ErlangAtom "epp"), file_45, location_46, delta_47,
                            name_48, name2_49, istk_50, sstk_51, path_52,
                            macs_53, uses_54, default_encoding_55,
                            pre_opened_56, fname_57]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_45, location_46, delta_47, name_48,
                    name2_49, cis_40, sstk_51, path_52, macs_53, uses_54,
                    default_encoding_55, pre_opened_56, fname_57])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3
             [from_2, arg_42,
              (ErlangCons (ErlangAtom "elif") ErlangEmptyList)])
      (ErlangEmptyList) ->
        let    tup_el_65 = (erlps__loc__1 [elif_1])
        in let tup_el_70 = (make_string "unbalanced")
        in let
          tup_el_68 =
            (ErlangTuple
               [(ErlangAtom "illegal"), tup_el_70, (ErlangAtom "elif")])
        in let
          tup_el_64 =
            (ErlangTuple [tup_el_65, (ErlangAtom "epp"), tup_el_68])
        in let arg_62 = (ErlangTuple [(ErlangAtom "error"), tup_el_64])
        in let _ = (erlps__epp_reply__2 [from_2, arg_62])
        in (erlps__wait_req_scan__1 [st_3])
      something_else -> (EXC.case_clause something_else)
erlps__scan_elif__4 [arg_73, arg_74, arg_75, arg_76] =
  (EXC.function_clause unit)
erlps__scan_elif__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_endif__4 :: ErlangFun
erlps__scan_endif__4 [(ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                _ld_0]) (ErlangEmptyList)),
                      endif_1, from_2, st_3]
  =
  let
    case_4 =
      case st_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in
    case case_4 of
      (ErlangCons _i_8 cis_9) ->
        let
          arg_11 =
            case st_3 of
              (ErlangTuple [(ErlangAtom "epp"), file_14, location_15, delta_16,
                            name_17, name2_18, istk_19, sstk_20, path_21,
                            macs_22, uses_23, default_encoding_24,
                            pre_opened_25, fname_26]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_14, location_15, delta_16, name_17,
                    name2_18, cis_9, sstk_20, path_21, macs_22, uses_23,
                    default_encoding_24, pre_opened_25, fname_26])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__scan_toks__2 [from_2, arg_11])
      (ErlangEmptyList) ->
        let    tup_el_31 = (erlps__loc__1 [endif_1])
        in let tup_el_36 = (make_string "unbalanced")
        in let
          tup_el_34 =
            (ErlangTuple
               [(ErlangAtom "illegal"), tup_el_36, (ErlangAtom "endif")])
        in let
          tup_el_30 =
            (ErlangTuple [tup_el_31, (ErlangAtom "epp"), tup_el_34])
        in let arg_28 = (ErlangTuple [(ErlangAtom "error"), tup_el_30])
        in let _ = (erlps__epp_reply__2 [from_2, arg_28])
        in (erlps__wait_req_scan__1 [st_3])
      something_else -> (EXC.case_clause something_else)
erlps__scan_endif__4 [_toks_0, endif_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [endif_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "endif")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_endif__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_endif__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_file__4 :: ErlangFun
erlps__scan_file__4 [tokens0_0, tf_1, from_2, st_3] =
  let tokens_5 = (erlps__coalesce_strings__1 [tokens0_0])
  in (erlps__scan_file1__4 [tokens_5, tf_1, from_2, st_3])
erlps__scan_file__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__scan_file__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_file1__4 :: ErlangFun
erlps__scan_file1__4 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                                                   _ls_1,
                                                                                   name_2]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                                                      _lc_3]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                                                                        _li_4,
                                                                                                                                                        ln_5]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                                                                                                                         _lrp_6]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                                                                                                                                                            _ld_7]) (ErlangEmptyList))))))),
                      tf_8, from_9, st_10]
  =
  let   
    anno_12 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [ln_5])
  in let arg_16 = (erlps__loc__1 [tf_8])
  in let
    _ =
      (erlps__enter_file_reply__5
         [from_9, name_2, anno_12, arg_16, (ErlangAtom "generated")])
  in let
    ms0_22 =
      case st_10 of
        (ErlangTuple arr_21) | (DM.Just field_20) <-
                                 ((arr_21 DA.!! 9)) ->
          field_20
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let tup_el_30 = (erlps__line1__0 [])
  in let
    head_28 =
      (ErlangTuple [(ErlangAtom "string"), tup_el_30, name_2])
  in let
    val_25 =
      (ErlangTuple
         [(ErlangAtom "none"), (ErlangCons head_28 ErlangEmptyList)])
  in let
    map_ext_33 =
      (ErlangMap (Map.singleton (ErlangAtom "FILE") val_25))
  in let
    ms_36 =
      case (findMissingKey ms0_22 [(ErlangAtom "FILE")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [ms0_22, map_ext_33])
        (DM.Just missing_35) -> (EXC.badkey missing_35)
  in let locf_38 = (erlps__loc__1 [tf_8])
  in let
    arg_40 =
      case st_10 of
        (ErlangTuple arr_43) | (DM.Just field_42) <-
                                 ((arr_43 DA.!! 2)) ->
          field_42
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    newloc_45 = (erlps__new_location__3 [ln_5, arg_40, locf_38])
  in let
    arg_48 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), tf_8])
  in let lop_47 = (erlps__get_line__1 [arg_48])
  in let lop_46 = (BIF.erlang__op_minus [lop_47, ln_5])
  in let
    rop_52 =
      case st_10 of
        (ErlangTuple arr_55) | (DM.Just field_54) <-
                                 ((arr_55 DA.!! 3)) ->
          field_54
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let delta_56 = (BIF.erlang__op_plus [lop_46, rop_52])
  in let
    arg_57 =
      case st_10 of
        (ErlangTuple [(ErlangAtom "epp"), file_63, location_64, delta_65,
                      name_66, name2_67, istk_68, sstk_69, path_70, macs_71,
                      uses_72, default_encoding_73, pre_opened_74, fname_75]) ->
          (ErlangTuple
             [(ErlangAtom "epp"), file_63, newloc_45, delta_56, name_66,
              name_2, istk_68, sstk_69, path_70, ms_36, uses_72,
              default_encoding_73, pre_opened_74, fname_75])
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in (erlps__wait_req_scan__1 [arg_57])
erlps__scan_file1__4 [_toks_0, tf_1, from_2, st_3] =
  let    tup_el_8 = (erlps__loc__1 [tf_1])
  in let
    tup_el_11 =
      (ErlangTuple [(ErlangAtom "bad"), (ErlangAtom "file")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_2, arg_5])
  in (erlps__wait_req_scan__1 [st_3])
erlps__scan_file1__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__scan_file1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_location__3 :: ErlangFun
erlps__new_location__3 [ln_0, le_1, lf_2] | (isEInt lf_2) =
  let rop_4 = (BIF.erlang__op_minus [le_1, lf_2])
  in (BIF.erlang__op_plus [ln_0, rop_4])
erlps__new_location__3 [ln_0, (ErlangTuple [le_1, _]),
                        (ErlangTuple [lf_2, _])]
  =
  let    rop_5 = (BIF.erlang__op_minus [le_1, lf_2])
  in let tup_el_3 = (BIF.erlang__op_plus [ln_0, rop_5])
  in (ErlangTuple [tup_el_3, (ErlangInt (DBI.fromInt 1))])
erlps__new_location__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__new_location__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_toks__3 :: ErlangFun
erlps__skip_toks__3 [from_0, st_1, (ErlangCons i_2 sis_3)] =
  let   
    arg_5 =
      case st_1 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 1)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    arg_10 =
      case st_1 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 2)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    case_4 =
      (BIF.do_remote_fun_call "Erlang.Io" "erlps__scan_erl_form__3"
         [arg_5, (ErlangAtom ""), arg_10])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_14]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                 _li_15,
                                                                                 (ErlangAtom "ifdef")]) _toks_16)),
                    cl_17]) ->
        let
          arg_19 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_22, location_23, delta_24,
                            name_25, name2_26, istk_27, sstk_28, path_29,
                            macs_30, uses_31, default_encoding_32,
                            pre_opened_33, fname_34]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_22, cl_17, delta_24, name_25,
                    name2_26, istk_27, sstk_28, path_29, macs_30, uses_31,
                    default_encoding_32, pre_opened_33, fname_34])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3
             [from_0, arg_19,
              (ErlangCons (ErlangAtom "ifdef") (ErlangCons i_2 sis_3))])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_40]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                 _li_41,
                                                                                 (ErlangAtom "ifndef")]) _toks_42)),
                    cl_43]) ->
        let
          arg_45 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_48, location_49, delta_50,
                            name_51, name2_52, istk_53, sstk_54, path_55,
                            macs_56, uses_57, default_encoding_58,
                            pre_opened_59, fname_60]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_48, cl_43, delta_50, name_51,
                    name2_52, istk_53, sstk_54, path_55, macs_56, uses_57,
                    default_encoding_58, pre_opened_59, fname_60])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3
             [from_0, arg_45,
              (ErlangCons (ErlangAtom "ifndef") (ErlangCons i_2 sis_3))])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_66]) (ErlangCons (ErlangTuple [(ErlangAtom "if"),
                                                                                 _li_67]) _toks_68)),
                    cl_69]) ->
        let
          arg_71 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_74, location_75, delta_76,
                            name_77, name2_78, istk_79, sstk_80, path_81,
                            macs_82, uses_83, default_encoding_84,
                            pre_opened_85, fname_86]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_74, cl_69, delta_76, name_77,
                    name2_78, istk_79, sstk_80, path_81, macs_82, uses_83,
                    default_encoding_84, pre_opened_85, fname_86])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3
             [from_0, arg_71,
              (ErlangCons (ErlangAtom "if") (ErlangCons i_2 sis_3))])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_92]) (ErlangCons else_94@(ErlangTuple [(ErlangAtom "atom"),
                                                                                         _le_93,
                                                                                         (ErlangAtom "else")]) _toks_95)),
                    cl_96]) ->
        let
          arg_99 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_102, location_103,
                            delta_104, name_105, name2_106, istk_107, sstk_108,
                            path_109, macs_110, uses_111, default_encoding_112,
                            pre_opened_113, fname_114]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_102, cl_96, delta_104, name_105,
                    name2_106, istk_107, sstk_108, path_109, macs_110, uses_111,
                    default_encoding_112, pre_opened_113, fname_114])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_else__4
             [else_94, from_0, arg_99, (ErlangCons i_2 sis_3)])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_118]) (ErlangCons elif_120@(ErlangTuple [(ErlangAtom "atom"),
                                                                                           _le_119,
                                                                                           (ErlangAtom "elif")]) toks_121)),
                    cl_122]) ->
        let
          arg_126 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_129, location_130,
                            delta_131, name_132, name2_133, istk_134, sstk_135,
                            path_136, macs_137, uses_138, default_encoding_139,
                            pre_opened_140, fname_141]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_129, cl_122, delta_131, name_132,
                    name2_133, istk_134, sstk_135, path_136, macs_137, uses_138,
                    default_encoding_139, pre_opened_140, fname_141])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_elif__5
             [toks_121, elif_120, from_0, arg_126, (ErlangCons i_2 sis_3)])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangCons (ErlangTuple [(ErlangAtom "-"),
                                              _lh_145]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                  _le_146,
                                                                                  (ErlangAtom "endif")]) _toks_147)),
                    cl_148]) ->
        let
          arg_150 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_153, location_154,
                            delta_155, name_156, name2_157, istk_158, sstk_159,
                            path_160, macs_161, uses_162, default_encoding_163,
                            pre_opened_164, fname_165]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_153, cl_148, delta_155, name_156,
                    name2_157, istk_158, sstk_159, path_160, macs_161, uses_162,
                    default_encoding_163, pre_opened_164, fname_165])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__skip_toks__3 [from_0, arg_150, sis_3])
      (ErlangTuple [(ErlangAtom "ok"), _toks_167, cl_168]) ->
        let
          arg_170 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_173, location_174,
                            delta_175, name_176, name2_177, istk_178, sstk_179,
                            path_180, macs_181, uses_182, default_encoding_183,
                            pre_opened_184, fname_185]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_173, cl_168, delta_175, name_176,
                    name2_177, istk_178, sstk_179, path_180, macs_181, uses_182,
                    default_encoding_183, pre_opened_184, fname_185])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in
          (erlps__skip_toks__3 [from_0, arg_170, (ErlangCons i_2 sis_3)])
      (ErlangTuple [(ErlangAtom "error"), e_189, cl_190]) ->
        case e_189 of
          (ErlangTuple [_, (ErlangAtom "file_io_server"),
                        (ErlangAtom "invalid_unicode")]) ->
            let    arg_193 = (ErlangTuple [(ErlangAtom "error"), e_189])
            in let _ = (erlps__epp_reply__2 [from_0, arg_193])
            in let arg_196 = (erlps__wait_request__1 [st_1])
            in (erlps__leave_file__2 [arg_196, st_1])
          _ ->
            let
              arg_200 =
                case st_1 of
                  (ErlangTuple [(ErlangAtom "epp"), file_203, location_204,
                                delta_205, name_206, name2_207, istk_208,
                                sstk_209, path_210, macs_211, uses_212,
                                default_encoding_213, pre_opened_214,
                                fname_215]) ->
                    (ErlangTuple
                       [(ErlangAtom "epp"), file_203, cl_190, delta_205,
                        name_206, name2_207, istk_208, sstk_209, path_210,
                        macs_211, uses_212, default_encoding_213,
                        pre_opened_214, fname_215])
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in
              (erlps__skip_toks__3 [from_0, arg_200, (ErlangCons i_2 sis_3)])
          something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "eof"), cl_219]) ->
        let
          arg_221 =
            case st_1 of
              (ErlangTuple [(ErlangAtom "epp"), file_227, location_228,
                            delta_229, name_230, name2_231, istk_232, sstk_233,
                            path_234, macs_235, uses_236, default_encoding_237,
                            pre_opened_238, fname_239]) ->
                (ErlangTuple
                   [(ErlangAtom "epp"), file_227, cl_219, delta_229, name_230,
                    name2_231, (ErlangCons i_2 sis_3), sstk_233, path_234,
                    macs_235, uses_236, default_encoding_237, pre_opened_238,
                    fname_239])
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in (erlps__leave_file__2 [from_0, arg_221])
      (ErlangTuple [(ErlangAtom "error"), _e_240]) ->
        let   
          tup_el_245 =
            case st_1 of
              (ErlangTuple arr_248) | (DM.Just field_247) <-
                                        ((arr_248 DA.!! 2)) ->
                field_247
              _ -> (EXC.badrecord (ErlangAtom "epp"))
        in let
          tup_el_244 =
            (ErlangTuple
               [tup_el_245, (ErlangAtom "epp"), (ErlangAtom "cannot_parse")])
        in let arg_242 = (ErlangTuple [(ErlangAtom "error"), tup_el_244])
        in let _ = (erlps__epp_reply__2 [from_0, arg_242])
        in let arg_251 = (erlps__wait_request__1 [st_1])
        in (erlps__leave_file__2 [arg_251, st_1])
      something_else -> (EXC.case_clause something_else)
erlps__skip_toks__3 [from_0, st_1, (ErlangEmptyList)] =
  (erlps__scan_toks__2 [from_0, st_1])
erlps__skip_toks__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__skip_toks__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_else__4 :: ErlangFun
erlps__skip_else__4 [else_0, from_1, st_2,
                     (ErlangCons (ErlangAtom "else") sis_3)]
  =
  let    tup_el_8 = (erlps__loc__1 [else_0])
  in let tup_el_13 = (make_string "repeated")
  in let
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "illegal"), tup_el_13, (ErlangAtom "else")])
  in let
    tup_el_7 =
      (ErlangTuple [tup_el_8, (ErlangAtom "epp"), tup_el_11])
  in let arg_5 = (ErlangTuple [(ErlangAtom "error"), tup_el_7])
  in let _ = (erlps__epp_reply__2 [from_1, arg_5])
  in
    (erlps__wait_req_skip__2
       [st_2, (ErlangCons (ErlangAtom "else") sis_3)])
erlps__skip_else__4 [_else_0, from_1, st_2,
                     (ErlangCons (ErlangAtom "elif") sis_3)]
  =
  (erlps__skip_toks__3
     [from_1, st_2, (ErlangCons (ErlangAtom "else") sis_3)])
erlps__skip_else__4 [_else_0, from_1, st_2,
                     (ErlangCons _i_3 (ErlangEmptyList))]
  =
  let   
    tail_9 =
      case st_2 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 6)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    arg_5 =
      case st_2 of
        (ErlangTuple [(ErlangAtom "epp"), file_13, location_14, delta_15,
                      name_16, name2_17, istk_18, sstk_19, path_20, macs_21,
                      uses_22, default_encoding_23, pre_opened_24, fname_25]) ->
          (ErlangTuple
             [(ErlangAtom "epp"), file_13, location_14, delta_15, name_16,
              name2_17, (ErlangCons (ErlangAtom "else") tail_9), sstk_19,
              path_20, macs_21, uses_22, default_encoding_23, pre_opened_24,
              fname_25])
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in (erlps__scan_toks__2 [from_1, arg_5])
erlps__skip_else__4 [_else_0, from_1, st_2, sis_3] =
  (erlps__skip_toks__3 [from_1, st_2, sis_3])
erlps__skip_else__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__skip_else__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__skip_elif__5 :: ErlangFun
erlps__skip_elif__5 [_toks_0, elif_1, from_2, st_3,
                     sis_4@(ErlangCons (ErlangAtom "else") _)]
  =
  let    tup_el_9 = (erlps__loc__1 [elif_1])
  in let
    tup_el_8 =
      (ErlangTuple
         [tup_el_9, (ErlangAtom "epp"), (ErlangAtom "elif_after_else")])
  in let arg_6 = (ErlangTuple [(ErlangAtom "error"), tup_el_8])
  in let _ = (erlps__epp_reply__2 [from_2, arg_6])
  in (erlps__wait_req_skip__2 [st_3, sis_4])
erlps__skip_elif__5 [toks_0, elif_1, from_2, st_3,
                     (ErlangCons _i_4 (ErlangEmptyList))]
  =
  (erlps__scan_if__4 [toks_0, elif_1, from_2, st_3])
erlps__skip_elif__5 [_toks_0, _elif_1, from_2, st_3, sis_4] =
  (erlps__skip_toks__3 [from_2, st_3, sis_4])
erlps__skip_elif__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__skip_elif__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_pars__2 :: ErlangFun
erlps__macro_pars__2 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                _lp_0]) (ErlangCons comma_2@(ErlangTuple [(ErlangAtom ","),
                                                                                          _ld_1]) ex_3)),
                      args_4]
  =
  let   
    tup_el_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [args_4])
  in let tup_el_9 = (erlps__macro_expansion__2 [ex_3, comma_2])
  in let tup_el_6 = (ErlangTuple [tup_el_7, tup_el_9])
  in (ErlangTuple [(ErlangAtom "ok"), tup_el_6])
erlps__macro_pars__2 [(ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                _,
                                                name_0]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                   _lp_1]) (ErlangCons comma_3@(ErlangTuple [(ErlangAtom ","),
                                                                                                                             _ld_2]) ex_4))),
                      args_5]
  =
  let match_expr_8 = (BIF.lists__member__2 [name_0, args_5])
  in
    case match_expr_8 of
      (ErlangAtom "false") ->
        let   
          tup_el_11 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
               [(ErlangCons name_0 args_5)])
        in let tup_el_15 = (erlps__macro_expansion__2 [ex_4, comma_3])
        in let tup_el_10 = (ErlangTuple [tup_el_11, tup_el_15])
        in (ErlangTuple [(ErlangAtom "ok"), tup_el_10])
      _ -> (EXC.badmatch match_expr_8)
erlps__macro_pars__2 [(ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                _l_0,
                                                name_1]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                   _]) ts_2)),
                      args_3]
  =
  let match_expr_6 = (BIF.lists__member__2 [name_1, args_3])
  in
    case match_expr_6 of
      (ErlangAtom "false") ->
        (erlps__macro_pars__2 [ts_2, (ErlangCons name_1 args_3)])
      _ -> (EXC.badmatch match_expr_6)
erlps__macro_pars__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__macro_pars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_expansion__2 :: ErlangFun
erlps__macro_expansion__2 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                     _lp_0]) (ErlangCons (ErlangTuple [(ErlangAtom "dot"),
                                                                                       _ld_1]) (ErlangEmptyList))),
                           _t0_2]
  =
  ErlangEmptyList
erlps__macro_expansion__2 [(ErlangCons dot_0@(ErlangTuple [(ErlangAtom "dot"),
                                                           _]) (ErlangEmptyList)),
                           _t0_1]
  =
  let    tup_el_4 = (erlps__loc__1 [dot_0])
  in let
    arg_2 =
      (ErlangTuple
         [(ErlangAtom "error"), tup_el_4,
          (ErlangAtom "missing_parenthesis")])
  in (BIF.erlang__throw__1 [arg_2])
erlps__macro_expansion__2 [(ErlangCons t_0 ts_1), _t0_2] =
  let tail_4 = (erlps__macro_expansion__2 [ts_1, t_0])
  in (ErlangCons t_0 tail_4)
erlps__macro_expansion__2 [(ErlangEmptyList), t0_0] =
  let    tup_el_3 = (erlps__loc__1 [t0_0])
  in let
    arg_1 =
      (ErlangTuple
         [(ErlangAtom "error"), tup_el_3, (ErlangAtom "premature_end")])
  in (BIF.erlang__throw__1 [arg_1])
erlps__macro_expansion__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__macro_expansion__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_macros__4 :: ErlangFun
erlps__expand_macros__4 [mact_0, m_1, toks_2, st_3] =
  case st_3 of
    (ErlangTuple [(ErlangAtom "epp"), _, _, _, _, _, _, _, _, ms_4,
                  u_5, _, _, _]) ->
      let    lm_8 = (erlps__loc__1 [mact_0])
      in let
        tinfo_11 =
          (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), mact_0])
      in let
        case_12 = (erlps__expand_macro1__4 [lm_8, m_1, toks_2, ms_4])
      in
        case case_12 of
          (ErlangTuple [(ErlangAtom "ok"),
                        (ErlangTuple [(ErlangAtom "none"), exp_17])]) ->
            let    head_19 = (ErlangTuple [m_1, (ErlangAtom "none")])
            in let
              _ =
                (erlps__check_uses__4
                   [(ErlangCons head_19 ErlangEmptyList), ErlangEmptyList, u_5,
                    lm_8])
            in let arg_30 = (ErlangMap Map.empty)
            in let
              arg_26 =
                (erlps__expand_macro__4
                   [exp_17, tinfo_11, ErlangEmptyList, arg_30])
            in let toks1_32 = (erlps__expand_macros__2 [arg_26, st_3])
            in let arg_33 = (BIF.erlang__op_append [toks1_32, toks_2])
            in (erlps__expand_macros__2 [arg_33, st_3])
          (ErlangTuple [(ErlangAtom "ok"),
                        (ErlangTuple [as_37, exp_38])]) ->
            let    tup_el_42 = (BIF.erlang__length__1 [as_37])
            in let head_40 = (ErlangTuple [m_1, tup_el_42])
            in let
              _ =
                (erlps__check_uses__4
                   [(ErlangCons head_40 ErlangEmptyList), ErlangEmptyList, u_5,
                    lm_8])
            in let arg_52 = (ErlangMap Map.empty)
            in let
              match_expr_55 =
                (erlps__bind_args__5 [toks_2, lm_8, m_1, as_37, arg_52])
            in
              case match_expr_55 of
                (ErlangTuple [bs_53, toks1_54]) ->
                  let
                    arg_56 =
                      (erlps__expand_macro__4
                         [exp_38, tinfo_11, toks1_54, bs_53])
                  in (erlps__expand_macros__2 [arg_56, st_3])
                _ -> (EXC.badmatch match_expr_55)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch st_3)
erlps__expand_macros__4 [arg_62, arg_63, arg_64, arg_65] =
  (EXC.function_clause unit)
erlps__expand_macros__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_macro1__4 :: ErlangFun
erlps__expand_macro1__4 [lm_0, m_1, toks_2, ms_3] =
  let arity_7 = (erlps__count_args__3 [toks_2, lm_0, m_1])
  in
    case ms_3 of
      (ErlangMap map_9) | (DM.Just (ErlangAtom "undefined")) <-
                            ((Map.lookup m_1 map_9)) ->
        let   
          tup_el_13 =
            (ErlangTuple [(ErlangAtom "undefined"), m_1, arity_7])
        in let
          arg_10 = (ErlangTuple [(ErlangAtom "error"), lm_0, tup_el_13])
        in (BIF.erlang__throw__1 [arg_10])
      (ErlangMap map_17) | (DM.Just (ErlangCons (ErlangTuple [(ErlangAtom "none"),
                                                              def_18]) (ErlangEmptyList))) <-
                             ((Map.lookup m_1 map_17)) ->
        (ErlangTuple [(ErlangAtom "ok"), def_18])
      (ErlangMap map_21) | (DM.Just defs_22) <-
                             ((Map.lookup m_1 map_21))
                         , (isEList defs_22) ->
        let
          case_23 =
            (BIF.do_remote_fun_call "Proplists" "erlps__get_value__2"
               [arity_7, defs_22])
        in
          case case_23 of
            (ErlangAtom "undefined") ->
              let    tup_el_29 = (ErlangTuple [(ErlangAtom "mismatch"), m_1])
              in let
                arg_26 = (ErlangTuple [(ErlangAtom "error"), lm_0, tup_el_29])
              in (BIF.erlang__throw__1 [arg_26])
            def_32 -> (ErlangTuple [(ErlangAtom "ok"), def_32])
            something_else -> (EXC.case_clause something_else)
      (ErlangMap map_35) | (DM.Just predef_36) <-
                             ((Map.lookup m_1 map_35)) ->
        (ErlangTuple [(ErlangAtom "ok"), predef_36])
      _ ->
        let   
          tup_el_42 =
            (ErlangTuple [(ErlangAtom "undefined"), m_1, arity_7])
        in let
          arg_39 = (ErlangTuple [(ErlangAtom "error"), lm_0, tup_el_42])
        in (BIF.erlang__throw__1 [arg_39])
      something_else -> (EXC.case_clause something_else)
erlps__expand_macro1__4 [arg_46, arg_47, arg_48, arg_49] =
  (EXC.function_clause unit)
erlps__expand_macro1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_uses__4 :: ErlangFun
erlps__check_uses__4 [(ErlangEmptyList), _anc_0, _u_1, _lm_2] =
  (ErlangAtom "ok")
erlps__check_uses__4 [(ErlangCons m_0 rest_1), anc_2, u_3, lm_4]
  =
  let case_5 = (BIF.lists__member__2 [m_0, anc_2])
  in
    case case_5 of
      (ErlangAtom "true") ->
        case m_0 of
          (ErlangTuple [name_8, arity_9]) ->
            let   
              tup_el_14 =
                (ErlangTuple [(ErlangAtom "circular"), name_8, arity_9])
            in let
              arg_11 = (ErlangTuple [(ErlangAtom "error"), lm_4, tup_el_14])
            in (BIF.erlang__throw__1 [arg_11])
          _ -> (EXC.badmatch m_0)
      (ErlangAtom "false") ->
        let    l_20 = (erlps__get_macro_uses__2 [m_0, u_3])
        in let
          _ =
            (erlps__check_uses__4 [l_20, (ErlangCons m_0 anc_2), u_3, lm_4])
        in (erlps__check_uses__4 [rest_1, anc_2, u_3, lm_4])
      something_else -> (EXC.case_clause something_else)
erlps__check_uses__4 [arg_31, arg_32, arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__check_uses__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_macro_uses__2 :: ErlangFun
erlps__get_macro_uses__2 [(ErlangTuple [m_0, arity_1]), u_2] =
  case u_2 of
    (ErlangMap map_4) | (DM.Just l_5) <- ((Map.lookup m_0 map_4)) ->
      let
        arg_8 =
          (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
             [(ErlangAtom "none"), l_5, ErlangEmptyList])
      in
        (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
           [arity_1, l_5, arg_8])
    _ -> ErlangEmptyList
    something_else -> (EXC.case_clause something_else)
erlps__get_macro_uses__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__get_macro_uses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_macros__2 :: ErlangFun
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons mact_3@(ErlangTuple [(ErlangAtom "atom"),
                                                                                            _lm_1,
                                                                                            m_2]) toks_4)),
                         st_5]
  =
  (erlps__expand_macros__4 [mact_3, m_2, toks_4, st_5])
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons token_2@(ErlangTuple [(ErlangAtom "var"),
                                                                                             lm_1,
                                                                                             (ErlangAtom "FUNCTION_NAME")]) toks_3)),
                         st0_4]
  =
  let    st_7 = (erlps__update_fun_name__2 [token_2, st0_4])
  in let
    case_9 =
      case st_7 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 13)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    lop_8 =
      case case_9 of
        (ErlangAtom "undefined") ->
          let head_13 = (ErlangTuple [(ErlangAtom "?"), _lq_0])
          in (ErlangCons head_13 (ErlangCons token_2 ErlangEmptyList))
        (ErlangTuple [name_19, _]) ->
          let head_20 = (ErlangTuple [(ErlangAtom "atom"), lm_1, name_19])
          in (ErlangCons head_20 ErlangEmptyList)
        something_else -> (EXC.case_clause something_else)
  in let rop_25 = (erlps__expand_macros__2 [toks_3, st_7])
  in (BIF.erlang__op_append [lop_8, rop_25])
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons token_2@(ErlangTuple [(ErlangAtom "var"),
                                                                                             lm_1,
                                                                                             (ErlangAtom "FUNCTION_ARITY")]) toks_3)),
                         st0_4]
  =
  let    st_7 = (erlps__update_fun_name__2 [token_2, st0_4])
  in let
    case_9 =
      case st_7 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 13)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "epp"))
  in let
    lop_8 =
      case case_9 of
        (ErlangAtom "undefined") ->
          let head_13 = (ErlangTuple [(ErlangAtom "?"), _lq_0])
          in (ErlangCons head_13 (ErlangCons token_2 ErlangEmptyList))
        (ErlangTuple [_, arity_19]) ->
          let
            head_20 = (ErlangTuple [(ErlangAtom "integer"), lm_1, arity_19])
          in (ErlangCons head_20 ErlangEmptyList)
        something_else -> (EXC.case_clause something_else)
  in let rop_25 = (erlps__expand_macros__2 [toks_3, st_7])
  in (BIF.erlang__op_append [lop_8, rop_25])
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons tok_2@(ErlangTuple [(ErlangAtom "var"),
                                                                                           lm_1,
                                                                                           (ErlangAtom "LINE")]) toks_3)),
                         st_4]
  =
  let   
    line_6 =
      (BIF.do_remote_fun_call "Erl.Scan" "erlps__line__1" [tok_2])
  in let
    head_7 = (ErlangTuple [(ErlangAtom "integer"), lm_1, line_6])
  in let tail_11 = (erlps__expand_macros__2 [toks_3, st_4])
  in (ErlangCons head_7 tail_11)
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons mact_3@(ErlangTuple [(ErlangAtom "var"),
                                                                                            _lm_1,
                                                                                            m_2]) toks_4)),
                         st_5]
  =
  (erlps__expand_macros__4 [mact_3, m_2, toks_4, st_5])
erlps__expand_macros__2 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                   _lq_0]) (ErlangCons token_1 _toks_2)),
                         _st_3]
  =
  let   
    case_4 =
      (BIF.do_remote_fun_call "Erl.Scan" "erlps__text__1" [token_1])
  in let
    t_16 =
      case case_4 of
        text_6 | (isEList text_6) -> text_6
        (ErlangAtom "undefined") ->
          let   
            symbol_8 =
              (BIF.do_remote_fun_call "Erl.Scan" "erlps__symbol__1" [token_1])
          in let
            arg_9 =
              (ErlangBinary
                 (BIN.concat
                    [(BIN.from_int (ErlangInt (DBI.fromInt 126))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                     (BIN.from_int (ErlangInt (DBI.fromInt 116))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big),
                     (BIN.from_int (ErlangInt (DBI.fromInt 112))
                        (ErlangInt (DBI.fromInt 8)) 1 BIN.Big)]))
          in
            (BIF.do_remote_fun_call "Io.Lib" "erlps__fwrite__2"
               [arg_9, (ErlangCons symbol_8 ErlangEmptyList)])
        something_else -> (EXC.case_clause something_else)
  in let tup_el_19 = (erlps__loc__1 [token_1])
  in let
    tup_el_21 =
      (ErlangTuple
         [(ErlangAtom "call"),
          (ErlangCons (ErlangInt (DBI.fromInt 63)) t_16)])
  in let
    arg_17 =
      (ErlangTuple [(ErlangAtom "error"), tup_el_19, tup_el_21])
  in (BIF.erlang__throw__1 [arg_17])
erlps__expand_macros__2 [(ErlangCons t_0 ts_1), st_2] =
  let tail_4 = (erlps__expand_macros__2 [ts_1, st_2])
  in (ErlangCons t_0 tail_4)
erlps__expand_macros__2 [(ErlangEmptyList), _st_0] =
  ErlangEmptyList
erlps__expand_macros__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__expand_macros__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bind_args__5 :: ErlangFun
erlps__bind_args__5 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                               _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                  _lrp_1]) toks_2)),
                     _lm_3, _m_4, (ErlangEmptyList), bs_5]
  =
  (ErlangTuple [bs_5, toks_2])
erlps__bind_args__5 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                               _llp_0]) toks0_1),
                     lm_2, m_3, (ErlangCons a_4 as_5), bs_6]
  =
  let
    match_expr_12 =
      (erlps__macro_arg__3 [toks0_1, ErlangEmptyList, ErlangEmptyList])
  in
    case match_expr_12 of
      (ErlangTuple [arg_10, toks1_11]) ->
        let arg_17 = (erlps__store_arg__5 [lm_2, m_3, a_4, arg_10, bs_6])
        in (erlps__macro_args__5 [toks1_11, lm_2, m_3, as_5, arg_17])
      _ -> (EXC.badmatch match_expr_12)
erlps__bind_args__5 [_toks_0, lm_1, m_2, _as_3, _bs_4] =
  let    tup_el_8 = (ErlangTuple [(ErlangAtom "mismatch"), m_2])
  in let
    arg_5 = (ErlangTuple [(ErlangAtom "error"), lm_1, tup_el_8])
  in (BIF.erlang__throw__1 [arg_5])
erlps__bind_args__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__bind_args__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_args__5 :: ErlangFun
erlps__macro_args__5 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                _lrp_0]) toks_1),
                      _lm_2, _m_3, (ErlangEmptyList), bs_4]
  =
  (ErlangTuple [bs_4, toks_1])
erlps__macro_args__5 [(ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                _lc_0]) toks0_1),
                      lm_2, m_3, (ErlangCons a_4 as_5), bs_6]
  =
  let
    match_expr_12 =
      (erlps__macro_arg__3 [toks0_1, ErlangEmptyList, ErlangEmptyList])
  in
    case match_expr_12 of
      (ErlangTuple [arg_10, toks1_11]) ->
        let arg_17 = (erlps__store_arg__5 [lm_2, m_3, a_4, arg_10, bs_6])
        in (erlps__macro_args__5 [toks1_11, lm_2, m_3, as_5, arg_17])
      _ -> (EXC.badmatch match_expr_12)
erlps__macro_args__5 [(ErlangEmptyList), lm_0, m_1, _as_2, _bs_3]
  =
  let    tup_el_7 = (ErlangTuple [(ErlangAtom "arg_error"), m_1])
  in let
    arg_4 = (ErlangTuple [(ErlangAtom "error"), lm_0, tup_el_7])
  in (BIF.erlang__throw__1 [arg_4])
erlps__macro_args__5 [_toks_0, lm_1, m_2, _as_3, _bs_4] =
  let    tup_el_8 = (ErlangTuple [(ErlangAtom "mismatch"), m_2])
  in let
    arg_5 = (ErlangTuple [(ErlangAtom "error"), lm_1, tup_el_8])
  in (BIF.erlang__throw__1 [arg_5])
erlps__macro_args__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__macro_args__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__store_arg__5 :: ErlangFun
erlps__store_arg__5 [l_0, m_1, _a_2, (ErlangEmptyList), _bs_3] =
  let    tup_el_7 = (ErlangTuple [(ErlangAtom "mismatch"), m_1])
  in let
    arg_4 = (ErlangTuple [(ErlangAtom "error"), l_0, tup_el_7])
  in (BIF.erlang__throw__1 [arg_4])
erlps__store_arg__5 [_l_0, _m_1, a_2, arg_3, bs_4] =
  let map_ext_8 = (ErlangMap (Map.singleton a_2 arg_3))
  in (BIF.maps__merge__2 [bs_4, map_ext_8])
erlps__store_arg__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__store_arg__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count_args__3 :: ErlangFun
erlps__count_args__3 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                   _lrp_1]) _toks_2)),
                      _lm_3, _m_4]
  =
  (ErlangInt (DBI.fromInt 0))
erlps__count_args__3 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) (ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                                                   _lc_1]) _toks_2)),
                      lm_3, m_4]
  =
  let    tup_el_8 = (ErlangTuple [(ErlangAtom "arg_error"), m_4])
  in let
    arg_5 = (ErlangTuple [(ErlangAtom "error"), lm_3, tup_el_8])
  in (BIF.erlang__throw__1 [arg_5])
erlps__count_args__3 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                _llp_0]) toks0_1),
                      lm_2, m_3]
  =
  let
    match_expr_9 =
      (erlps__macro_arg__3 [toks0_1, ErlangEmptyList, ErlangEmptyList])
  in
    case match_expr_9 of
      (ErlangTuple [_arg_7, toks1_8]) ->
        (erlps__count_args__4
           [toks1_8, lm_2, m_3, (ErlangInt (DBI.fromInt 1))])
      _ -> (EXC.badmatch match_expr_9)
erlps__count_args__3 [_toks_0, _lm_1, _m_2] = (ErlangAtom "none")
erlps__count_args__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__count_args__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count_args__4 :: ErlangFun
erlps__count_args__4 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                _lrp_0]) _toks_1),
                      _lm_2, _m_3, nbargs_4]
  =
  nbargs_4
erlps__count_args__4 [(ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                _lc_0]) (ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                                                                  _lrp_1]) _toks_2)),
                      lm_3, m_4, _nbargs_5]
  =
  let    tup_el_9 = (ErlangTuple [(ErlangAtom "arg_error"), m_4])
  in let
    arg_6 = (ErlangTuple [(ErlangAtom "error"), lm_3, tup_el_9])
  in (BIF.erlang__throw__1 [arg_6])
erlps__count_args__4 [(ErlangCons (ErlangTuple [(ErlangAtom ","),
                                                _lc_0]) toks0_1),
                      lm_2, m_3, nbargs_4]
  =
  let
    match_expr_10 =
      (erlps__macro_arg__3 [toks0_1, ErlangEmptyList, ErlangEmptyList])
  in
    case match_expr_10 of
      (ErlangTuple [_arg_8, toks1_9]) ->
        let
          arg_14 =
            (BIF.erlang__op_plus [nbargs_4, (ErlangInt (DBI.fromInt 1))])
        in (erlps__count_args__4 [toks1_9, lm_2, m_3, arg_14])
      _ -> (EXC.badmatch match_expr_10)
erlps__count_args__4 [(ErlangEmptyList), lm_0, m_1, _nbargs_2] =
  let    tup_el_6 = (ErlangTuple [(ErlangAtom "arg_error"), m_1])
  in let
    arg_3 = (ErlangTuple [(ErlangAtom "error"), lm_0, tup_el_6])
  in (BIF.erlang__throw__1 [arg_3])
erlps__count_args__4 [_toks_0, lm_1, m_2, _nbargs_3] =
  let    tup_el_7 = (ErlangTuple [(ErlangAtom "mismatch"), m_2])
  in let
    arg_4 = (ErlangTuple [(ErlangAtom "error"), lm_1, tup_el_7])
  in (BIF.erlang__throw__1 [arg_4])
erlps__count_args__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__count_args__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__macro_arg__3 :: ErlangFun
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom ","),
                                               lc_0]) toks_1),
                     (ErlangEmptyList), arg_2]
  =
  let   
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_2])
  in let head_6 = (ErlangTuple [(ErlangAtom ","), lc_0])
  in (ErlangTuple [tup_el_3, (ErlangCons head_6 toks_1)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom ")"),
                                               lrp_0]) toks_1),
                     (ErlangEmptyList), arg_2]
  =
  let   
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_2])
  in let head_6 = (ErlangTuple [(ErlangAtom ")"), lrp_0])
  in (ErlangTuple [tup_el_3, (ErlangCons head_6 toks_1)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                               llp_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "("), llp_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom ")") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "<<"),
                                               lls_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "<<"), lls_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom ">>") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "["),
                                               lls_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "["), lls_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "]") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "{"),
                                               llc_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "{"), llc_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "}") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "begin"),
                                               lb_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "begin"), lb_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "if"),
                                               li_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "if"), li_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "case"),
                                               lc_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "case"), lc_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "fun"),
                                               lc_0]) toks_1@(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                       _]) _)),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "fun"), lc_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons fun_0@(ErlangTuple [(ErlangAtom "fun"),
                                                     _]) (ErlangCons name_1@(ErlangTuple [(ErlangAtom "var"),
                                                                                          _,
                                                                                          _]) toks_2@(ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                                                                               _]) _))),
                     e_3, arg_4]
  =
  (erlps__macro_arg__3
     [toks_2, (ErlangCons (ErlangAtom "end") e_3),
      (ErlangCons name_1 (ErlangCons fun_0 arg_4))])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "receive"),
                                               lr_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "receive"), lr_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "try"),
                                               lr_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "try"), lr_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [(ErlangAtom "cond"),
                                               lr_0]) toks_1),
                     e_2, arg_3]
  =
  let head_9 = (ErlangTuple [(ErlangAtom "cond"), lr_0])
  in
    (erlps__macro_arg__3
       [toks_1, (ErlangCons (ErlangAtom "end") e_2),
        (ErlangCons head_9 arg_3)])
erlps__macro_arg__3 [(ErlangCons (ErlangTuple [rb_0,
                                               lrb_1]) toks_2),
                     (ErlangCons rb_3 e_4), arg_5]
  | (rb_3 == rb_0) =
  let head_9 = (ErlangTuple [rb_0, lrb_1])
  in (erlps__macro_arg__3 [toks_2, e_4, (ErlangCons head_9 arg_5)])
erlps__macro_arg__3 [(ErlangCons t_0 toks_1), e_2, arg_3] =
  (erlps__macro_arg__3 [toks_1, e_2, (ErlangCons t_0 arg_3)])
erlps__macro_arg__3 [(ErlangEmptyList), _e_0, arg_1] =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [arg_1])
  in (ErlangTuple [tup_el_2, ErlangEmptyList])
erlps__macro_arg__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__macro_arg__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_macro__4 :: ErlangFun
erlps__expand_macro__4 [(ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                  _lv_0, v_1]) ts_2),
                        l_3, rest_4, bs_5]
  =
  case bs_5 of
    (ErlangMap map_7) | (DM.Just val_8) <-
                          ((Map.lookup v_1 map_7)) ->
      (erlps__expand_arg__5 [val_8, ts_2, l_3, rest_4, bs_5])
    _ ->
      let    head_14 = (ErlangTuple [(ErlangAtom "var"), l_3, v_1])
      in let
        tail_18 = (erlps__expand_macro__4 [ts_2, l_3, rest_4, bs_5])
      in (ErlangCons head_14 tail_18)
    something_else -> (EXC.case_clause something_else)
erlps__expand_macro__4 [(ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                  _]) (ErlangCons (ErlangTuple [(ErlangAtom "?"),
                                                                                _]) (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                                              _lv_0,
                                                                                                              v_1]) ts_2))),
                        l_3, rest_4, bs_5]
  =
  case bs_5 of
    (ErlangMap map_7) | (DM.Just val_8) <-
                          ((Map.lookup v_1 map_7)) ->
      let arg_9 = (erlps__stringify__2 [val_8, l_3])
      in (erlps__expand_arg__5 [arg_9, ts_2, l_3, rest_4, bs_5])
    _ ->
      let    head_16 = (ErlangTuple [(ErlangAtom "var"), l_3, v_1])
      in let
        tail_20 = (erlps__expand_macro__4 [ts_2, l_3, rest_4, bs_5])
      in (ErlangCons head_16 tail_20)
    something_else -> (EXC.case_clause something_else)
erlps__expand_macro__4 [(ErlangCons t_0 ts_1), l_2, rest_3, bs_4]
  =
  let   
    head_5 =
      (BIF.erlang__setelement__3
         [(ErlangInt (DBI.fromInt 2)), t_0, l_2])
  in let
    tail_9 = (erlps__expand_macro__4 [ts_1, l_2, rest_3, bs_4])
  in (ErlangCons head_5 tail_9)
erlps__expand_macro__4 [(ErlangEmptyList), _l_0, rest_1, _bs_2] =
  rest_1
erlps__expand_macro__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__expand_macro__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_arg__5 :: ErlangFun
erlps__expand_arg__5 [(ErlangCons a_0 as_1), ts_2, _l_3, rest_4,
                      bs_5]
  =
  let   
    nextl_8 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), a_0])
  in let
    tail_10 =
      (erlps__expand_arg__5 [as_1, ts_2, nextl_8, rest_4, bs_5])
  in (ErlangCons a_0 tail_10)
erlps__expand_arg__5 [(ErlangEmptyList), ts_0, l_1, rest_2, bs_3]
  =
  (erlps__expand_macro__4 [ts_0, l_1, rest_2, bs_3])
erlps__expand_arg__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__expand_arg__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_fun_name__2 :: ErlangFun
erlps__update_fun_name__2 [token_0,
                           st_2@(ErlangTuple [(ErlangAtom "epp"), _, _, _, _, _,
                                              _, _, _, _, _, _, _, toks0_1])]
  | (isEList toks0_1) =
  let
    toks1_32 =
      (EXC.tryCatch
         (\ _ ->
            let
              arg_4 =
                case st_2 of
                  (ErlangTuple [(ErlangAtom "epp"), file_7, location_8, delta_9,
                                name_10, name2_11, istk_12, sstk_13, path_14,
                                macs_15, uses_16, default_encoding_17,
                                pre_opened_18, fname_19]) ->
                    (ErlangTuple
                       [(ErlangAtom "epp"), file_7, location_8, delta_9,
                        name_10, name2_11, istk_12, sstk_13, path_14, macs_15,
                        uses_16, default_encoding_17, pre_opened_18,
                        (ErlangAtom "undefined")])
                  _ -> (EXC.badrecord (ErlangAtom "epp"))
            in (erlps__expand_macros__2 [toks0_1, arg_4]))
         (\ ex_21 ->
            case ex_21 of
              (ErlangTuple [(ErlangAtom "throw"), payload_22, _]) -> payload_22
              (ErlangTuple [(ErlangAtom "error"), payload_23, stack_24]) ->
                let tup_el_26 = (ErlangTuple [payload_23, stack_24])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_26])
              (ErlangTuple [(ErlangAtom "exit"), payload_29, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_29])
              ex_21 -> (EXC.raise ex_21)))
  in
    case toks1_32 of
      (ErlangCons (ErlangTuple [(ErlangAtom "atom"), _,
                                name_34]) (ErlangCons (ErlangTuple [(ErlangAtom "("),
                                                                    _]) toks_35)) ->
        let   
          arg_38 = (ErlangTuple [name_34, (ErlangInt (DBI.fromInt 0))])
        in let
          fa_42 =
            (erlps__update_fun_name_1__4
               [toks_35, (ErlangInt (DBI.fromInt 1)), arg_38, st_2])
        in
          case st_2 of
            (ErlangTuple [(ErlangAtom "epp"), file_45, location_46, delta_47,
                          name_48, name2_49, istk_50, sstk_51, path_52, macs_53,
                          uses_54, default_encoding_55, pre_opened_56,
                          fname_57]) ->
              (ErlangTuple
                 [(ErlangAtom "epp"), file_45, location_46, delta_47, name_48,
                  name2_49, istk_50, sstk_51, path_52, macs_53, uses_54,
                  default_encoding_55, pre_opened_56, fa_42])
            _ -> (EXC.badrecord (ErlangAtom "epp"))
      (ErlangCons (ErlangTuple [(ErlangAtom "?"), _]) _) ->
        case token_0 of
          (ErlangTuple [(ErlangAtom "var"), _, macro_58]) ->
            let    tup_el_62 = (erlps__loc__1 [token_0])
            in let
              tup_el_64 =
                (ErlangTuple [(ErlangAtom "illegal_function_usage"), macro_58])
            in let
              arg_60 =
                (ErlangTuple [(ErlangAtom "error"), tup_el_62, tup_el_64])
            in (BIF.erlang__throw__1 [arg_60])
          _ -> (EXC.badmatch token_0)
      _ | (isEList toks1_32) ->
        case token_0 of
          (ErlangTuple [(ErlangAtom "var"), _, macro_67]) ->
            let    tup_el_71 = (erlps__loc__1 [token_0])
            in let
              tup_el_73 =
                (ErlangTuple [(ErlangAtom "illegal_function"), macro_67])
            in let
              arg_69 =
                (ErlangTuple [(ErlangAtom "error"), tup_el_71, tup_el_73])
            in (BIF.erlang__throw__1 [arg_69])
          _ -> (EXC.badmatch token_0)
      _ ->
        let
          record_updt_77 =
            (ErlangTuple [(ErlangAtom "_"), (ErlangInt (DBI.fromInt 0))])
        in
          case st_2 of
            (ErlangTuple [(ErlangAtom "epp"), file_80, location_81, delta_82,
                          name_83, name2_84, istk_85, sstk_86, path_87, macs_88,
                          uses_89, default_encoding_90, pre_opened_91,
                          fname_92]) ->
              (ErlangTuple
                 [(ErlangAtom "epp"), file_80, location_81, delta_82, name_83,
                  name2_84, istk_85, sstk_86, path_87, macs_88, uses_89,
                  default_encoding_90, pre_opened_91, record_updt_77])
            _ -> (EXC.badrecord (ErlangAtom "epp"))
      something_else -> (EXC.case_clause something_else)
erlps__update_fun_name__2 [_token_0, st_1] = st_1
erlps__update_fun_name__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__update_fun_name__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_fun_name_1__4 :: ErlangFun
erlps__update_fun_name_1__4 [(ErlangCons tok_0 toks_1), l_2,
                             fa_3, st_4]
  =
  let case_5 = (erlps__classify_token__1 [tok_0])
  in
    case case_5 of
      (ErlangAtom "comma") ->
        case (ErlangAtom "true") of
          _ | ((==) l_2 (ErlangInt (DBI.fromInt 1))) ->
            case fa_3 of
              (ErlangTuple [name_7, arity_8]) ->
                let   
                  tup_el_14 =
                    (BIF.erlang__op_plus [arity_8, (ErlangInt (DBI.fromInt 1))])
                in let arg_12 = (ErlangTuple [name_7, tup_el_14])
                in (erlps__update_fun_name_1__4 [toks_1, l_2, arg_12, st_4])
              _ -> (EXC.badmatch fa_3)
          _ -> (erlps__update_fun_name_1__4 [toks_1, l_2, fa_3, st_4])
          _ -> (EXC.if_clause unit)
      (ErlangAtom "left") ->
        let
          arg_23 = (BIF.erlang__op_plus [l_2, (ErlangInt (DBI.fromInt 1))])
        in (erlps__update_fun_name_1__4 [toks_1, arg_23, fa_3, st_4])
      (ErlangAtom "right") | ((==) l_2 (ErlangInt (DBI.fromInt 1))) ->
        fa_3
      (ErlangAtom "right") ->
        let
          arg_29 =
            (BIF.erlang__op_minus [l_2, (ErlangInt (DBI.fromInt 1))])
        in (erlps__update_fun_name_1__4 [toks_1, arg_29, fa_3, st_4])
      (ErlangAtom "other") ->
        case fa_3 of
          (ErlangTuple [name_35, (ErlangInt num_36)]) | ((ErlangInt
                                                            num_36) ==
                                                           (ErlangInt
                                                              (DBI.fromInt
                                                                 0))) ->
            let arg_39 = (ErlangTuple [name_35, (ErlangInt (DBI.fromInt 1))])
            in (erlps__update_fun_name_1__4 [toks_1, l_2, arg_39, st_4])
          (ErlangTuple [_, _]) ->
            (erlps__update_fun_name_1__4 [toks_1, l_2, fa_3, st_4])
          something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__update_fun_name_1__4 [(ErlangEmptyList), _, fa_0, _] =
  fa_0
erlps__update_fun_name_1__4 [arg_1, arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__update_fun_name_1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__classify_token__1 :: ErlangFun
erlps__classify_token__1 [(ErlangTuple [c_0, _])] =
  (erlps__classify_token_1__1 [c_0])
erlps__classify_token__1 [_] = (ErlangAtom "other")
erlps__classify_token__1 [arg_0] = (EXC.function_clause unit)
erlps__classify_token__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__classify_token_1__1 :: ErlangFun
erlps__classify_token_1__1 [(ErlangAtom ",")] =
  (ErlangAtom "comma")
erlps__classify_token_1__1 [(ErlangAtom "(")] =
  (ErlangAtom "left")
erlps__classify_token_1__1 [(ErlangAtom "{")] =
  (ErlangAtom "left")
erlps__classify_token_1__1 [(ErlangAtom "[")] =
  (ErlangAtom "left")
erlps__classify_token_1__1 [(ErlangAtom "<<")] =
  (ErlangAtom "left")
erlps__classify_token_1__1 [(ErlangAtom ")")] =
  (ErlangAtom "right")
erlps__classify_token_1__1 [(ErlangAtom "}")] =
  (ErlangAtom "right")
erlps__classify_token_1__1 [(ErlangAtom "]")] =
  (ErlangAtom "right")
erlps__classify_token_1__1 [(ErlangAtom ">>")] =
  (ErlangAtom "right")
erlps__classify_token_1__1 [_] = (ErlangAtom "other")
erlps__classify_token_1__1 [arg_0] = (EXC.function_clause unit)
erlps__classify_token_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__token_src__1 :: ErlangFun
erlps__token_src__1 [(ErlangTuple [(ErlangAtom "dot"), _])] =
  (make_string ".")
erlps__token_src__1 [(ErlangTuple [x_0, _])] | (isEAtom x_0) =
  (BIF.erlang__atom_to_list__1 [x_0])
erlps__token_src__1 [(ErlangTuple [(ErlangAtom "var"), _, x_0])]
  =
  (BIF.erlang__atom_to_list__1 [x_0])
erlps__token_src__1 [(ErlangTuple [(ErlangAtom "char"), _, c_0])]
  =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_char__1" [c_0])
erlps__token_src__1 [(ErlangTuple [(ErlangAtom "string"), _,
                                   x_0])]
  =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__1" [x_0])
erlps__token_src__1 [(ErlangTuple [_, _, x_0])] =
  let arg_1 = (make_string "~w")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons x_0 ErlangEmptyList)])
erlps__token_src__1 [arg_5] = (EXC.function_clause unit)
erlps__token_src__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stringify1__1 :: ErlangFun
erlps__stringify1__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__stringify1__1 [(ErlangCons t_0 tokens_1)] =
  let    arg_3 = (make_string " ~ts")
  in let head_5 = (erlps__token_src__1 [t_0])
  in let
    head_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons head_5 ErlangEmptyList)])
  in let tail_8 = (erlps__stringify1__1 [tokens_1])
  in (ErlangCons head_2 tail_8)
erlps__stringify1__1 [arg_10] = (EXC.function_clause unit)
erlps__stringify1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stringify__2 :: ErlangFun
erlps__stringify__2 [ts_0, l_1] =
  let    arg_2 = (erlps__stringify1__1 [ts_0])
  in let
    match_expr_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_2])
  in
    case match_expr_6 of
      (ErlangCons (ErlangInt num_4) s_5) | ((ErlangInt num_4) ==
                                              (ErlangInt (DBI.fromInt 32))) ->
        let head_7 = (ErlangTuple [(ErlangAtom "string"), l_1, s_5])
        in (ErlangCons head_7 ErlangEmptyList)
      _ -> (EXC.badmatch match_expr_6)
erlps__stringify__2 [arg_12, arg_13] = (EXC.function_clause unit)
erlps__stringify__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__coalesce_strings__1 :: ErlangFun
erlps__coalesce_strings__1 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                      a_0, s_1]) tokens_2)]
  =
  (erlps__coalesce_strings__3
     [tokens_2, a_0, (ErlangCons s_1 ErlangEmptyList)])
erlps__coalesce_strings__1 [(ErlangCons t_0 tokens_1)] =
  let tail_3 = (erlps__coalesce_strings__1 [tokens_1])
  in (ErlangCons t_0 tail_3)
erlps__coalesce_strings__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__coalesce_strings__1 [arg_0] = (EXC.function_clause unit)
erlps__coalesce_strings__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__coalesce_strings__3 :: ErlangFun
erlps__coalesce_strings__3 [(ErlangCons (ErlangTuple [(ErlangAtom "string"),
                                                      _, s_0]) tokens_1),
                            a_2, s0_3]
  =
  (erlps__coalesce_strings__3
     [tokens_1, a_2, (ErlangCons s_0 s0_3)])
erlps__coalesce_strings__3 [tokens_0, a_1, s_2] =
  let   
    arg_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [s_2])
  in let
    tup_el_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_7])
  in let
    head_3 = (ErlangTuple [(ErlangAtom "string"), a_1, tup_el_6])
  in let tail_9 = (erlps__coalesce_strings__1 [tokens_0])
  in (ErlangCons head_3 tail_9)
erlps__coalesce_strings__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__coalesce_strings__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__epp_request__1 :: ErlangFun
erlps__epp_request__1 [epp_0] =
  let
    arg_2 = (BIF.erlang__monitor__2 [(ErlangAtom "process"), epp_0])
  in (erlps__wait_epp_reply__2 [epp_0, arg_2])
erlps__epp_request__1 [arg_5] = (EXC.function_clause unit)
erlps__epp_request__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__epp_request__2 :: ErlangFun
erlps__epp_request__2 [epp_0, req_1] =
  let    tup_el_5 = (BIF.erlang__self__0 [])
  in let
    rop_3 =
      (ErlangTuple [(ErlangAtom "epp_request"), tup_el_5, req_1])
  in let _ = (BIF.erlang__send__2 [epp_0, rop_3])
  in let
    arg_8 = (BIF.erlang__monitor__2 [(ErlangAtom "process"), epp_0])
  in (erlps__wait_epp_reply__2 [epp_0, arg_8])
erlps__epp_request__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__epp_request__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__epp_reply__2 :: ErlangFun
erlps__epp_reply__2 [from_0, rep_1] =
  let    tup_el_5 = (BIF.erlang__self__0 [])
  in let
    rop_3 = (ErlangTuple [(ErlangAtom "epp_reply"), tup_el_5, rep_1])
  in let _ = (BIF.erlang__send__2 [from_0, rop_3])
  in (ErlangAtom "ok")
erlps__epp_reply__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__epp_reply__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__wait_epp_reply__2 :: ErlangFun
erlps__wait_epp_reply__2 [epp_0, mref_1] =
  case (ErlangInt (DBI.fromInt 1)) of
    (ErlangAtom "processes_unsuported") ->
      (ErlangInt (DBI.fromInt 1))
    _ -> (EXC.badmatch (ErlangInt (DBI.fromInt 1)))
erlps__wait_epp_reply__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__wait_epp_reply__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_var__1 :: ErlangFun
erlps__expand_var__1 [newname_1@(ErlangCons (ErlangInt num_0) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 36))) =
  let
    case_2 =
      (EXC.tryCatch (\ _ -> (erlps__expand_var1__1 [newname_1]))
         (\ ex_5 ->
            case ex_5 of
              (ErlangTuple [(ErlangAtom "throw"), payload_6, _]) -> payload_6
              (ErlangTuple [(ErlangAtom "error"), payload_7, stack_8]) ->
                let tup_el_10 = (ErlangTuple [payload_7, stack_8])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_10])
              (ErlangTuple [(ErlangAtom "exit"), payload_13, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_13])
              ex_5 -> (EXC.raise ex_5)))
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), expname_16]) -> expname_16
      _ -> newname_1
      something_else -> (EXC.case_clause something_else)
erlps__expand_var__1 [newname_0] = newname_0
erlps__expand_var__1 [arg_1] = (EXC.function_clause unit)
erlps__expand_var__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_var1__1 :: ErlangFun
erlps__expand_var1__1 [newname_0] =
  let
    match_expr_5 =
      (BIF.do_remote_fun_call "Filename" "erlps__split__1" [newname_0])
  in
    case match_expr_5 of
      (ErlangCons (ErlangCons (ErlangInt num_2) var_3) rest_4) | ((ErlangInt
                                                                     num_2) ==
                                                                    (ErlangInt
                                                                       (DBI.fromInt
                                                                          36))) ->
        let   
          value_7 =
            (BIF.do_remote_fun_call "Os" "erlps__getenv__1" [var_3])
        in let
          match_expr_10 =
            (BIF.erlang__op_exactNeq [value_7, (ErlangAtom "false")])
        in
          case match_expr_10 of
            (ErlangAtom "true") ->
              let
                tup_el_12 = (erlps__fname_join__1 [(ErlangCons value_7 rest_4)])
              in (ErlangTuple [(ErlangAtom "ok"), tup_el_12])
            _ -> (EXC.badmatch match_expr_10)
      _ -> (EXC.badmatch match_expr_5)
erlps__expand_var1__1 [arg_16] = (EXC.function_clause unit)
erlps__expand_var1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fname_join__1 :: ErlangFun
erlps__fname_join__1 [(ErlangCons (ErlangCons (ErlangInt num_0) (ErlangEmptyList)) rest_1@(ErlangCons _ _))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__fname_join__1 [rest_1])
erlps__fname_join__1 [components_0] =
  (BIF.do_remote_fun_call "Filename" "erlps__join__1"
     [components_0])
erlps__fname_join__1 [arg_2] = (EXC.function_clause unit)
erlps__fname_join__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__loc_anno__1 :: ErlangFun
erlps__loc_anno__1 [line_0] | (isEInt line_0) =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [line_0])
erlps__loc_anno__1 [(ErlangTuple [line_0, _column_1])] =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [line_0])
erlps__loc_anno__1 [arg_3] = (EXC.function_clause unit)
erlps__loc_anno__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__loc__1 :: ErlangFun
erlps__loc__1 [token_0] =
  (BIF.do_remote_fun_call "Erl.Scan" "erlps__location__1"
     [token_0])
erlps__loc__1 [arg_2] = (EXC.function_clause unit)
erlps__loc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_line__2 :: ErlangFun
erlps__add_line__2 [line_0, offset_1] | (isEInt line_0) =
  (BIF.erlang__op_plus [line_0, offset_1])
erlps__add_line__2 [(ErlangTuple [line_0, column_1]), offset_2] =
  let tup_el_3 = (BIF.erlang__op_plus [line_0, offset_2])
  in (ErlangTuple [tup_el_3, column_1])
erlps__add_line__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__add_line__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start_loc__1 :: ErlangFun
erlps__start_loc__1 [line_0] | (isEInt line_0) =
  (ErlangInt (DBI.fromInt 1))
erlps__start_loc__1 [(ErlangTuple [_line_0, _column_1])] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 1))])
erlps__start_loc__1 [arg_4] = (EXC.function_clause unit)
erlps__start_loc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line1__0 :: ErlangFun
erlps__line1__0 [] =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
     [(ErlangInt (DBI.fromInt 1))])
erlps__line1__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_line__1 :: ErlangFun
erlps__get_line__1 [anno_0] =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [anno_0])
erlps__get_line__1 [arg_2] = (EXC.function_clause unit)
erlps__get_line__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__interpret_file_attribute__1 :: ErlangFun
erlps__interpret_file_attribute__1 [forms_0] =
  (erlps__interpret_file_attr__3
     [forms_0, (ErlangInt (DBI.fromInt 0)), ErlangEmptyList])
erlps__interpret_file_attribute__1 [arg_4] =
  (EXC.function_clause unit)
erlps__interpret_file_attribute__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__interpret_file_attr__3 :: ErlangFun
erlps__interpret_file_attr__3 [(ErlangCons form_3@(ErlangTuple [(ErlangAtom "attribute"),
                                                                anno_0,
                                                                (ErlangAtom "file"),
                                                                (ErlangTuple [file_1,
                                                                              line_2])]) forms_4),
                               delta_5, fs_6]
  =
  let    l_8 = (erlps__get_line__1 [anno_0])
  in let
    generated_10 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__generated__1"
         [anno_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors (\ _ -> generated_10))) ->
        let    lop_13 = (BIF.erlang__op_plus [l_8, delta_5])
        in let arg_12 = (BIF.erlang__op_minus [lop_13, line_2])
        in (erlps__interpret_file_attr__3 [forms_4, arg_12, fs_6])
      _ | ((ErlangAtom "true") ==
             (falsifyErrors (\ _ -> (BIF.erlang__not__1 [generated_10])))) ->
        case fs_6 of
          (ErlangCons _ (ErlangCons file_20 fs1_21)) | (file_20 ==
                                                          file_1) ->
            let
              tail_23 =
                (erlps__interpret_file_attr__3
                   [forms_4, (ErlangInt (DBI.fromInt 0)),
                    (ErlangCons file_1 fs1_21)])
            in (ErlangCons form_3 tail_23)
          _ ->
            let
              tail_30 =
                (erlps__interpret_file_attr__3
                   [forms_4, (ErlangInt (DBI.fromInt 0)),
                    (ErlangCons file_1 fs_6)])
            in (ErlangCons form_3 tail_30)
          something_else -> (EXC.case_clause something_else)
      _ -> (EXC.if_clause unit)
erlps__interpret_file_attr__3 [(ErlangCons form0_0 forms_1),
                               delta_2, fs_3]
  =
  let   
    f_13 =
      (ErlangFun 1
         let
           lambda_4 [anno_6] =
             let   
               line_8 =
                 (BIF.do_remote_fun_call "Erl.Anno" "erlps__line__1" [anno_6])
             in let arg_9 = (BIF.erlang__op_plus [line_8, delta_2])
             in
               (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_line__2"
                  [arg_9, anno_6])
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in let
    form_16 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
         [f_13, form0_0])
  in let
    tail_18 =
      (erlps__interpret_file_attr__3 [forms_1, delta_2, fs_3])
  in (ErlangCons form_16 tail_18)
erlps__interpret_file_attr__3 [(ErlangEmptyList), _delta_0,
                               _fs_1]
  =
  ErlangEmptyList
erlps__interpret_file_attr__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__interpret_file_attr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)