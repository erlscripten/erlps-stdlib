module Dict(erlps__new__0, erlps__is_key__2, erlps__to_list__1,
            erlps__from_list__1, erlps__size__1, erlps__is_empty__1,
            erlps__fetch__2, erlps__find__2, erlps__fetch_keys__1,
            erlps__erase__2, erlps__take__2, erlps__store__3,
            erlps__append__3, erlps__append_list__3, erlps__update__3,
            erlps__update__4, erlps__update_counter__3, erlps__fold__3,
            erlps__map__2, erlps__filter__2, erlps__merge__3) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__new__0 :: ErlangFun
erlps__new__0 [] =
  let   
    empty_1 = (erlps__mk_seg__1 [(ErlangInt (DBI.fromInt 16))])
  in let
    tup_el_6 =
      (BIF.erlang__op_div_strict
         [(ErlangInt (DBI.fromInt 16)), (ErlangInt (DBI.fromInt 2))])
  in let
    tup_el_9 =
      (BIF.erlang__op_mult
         [(ErlangInt (DBI.fromInt 16)), (ErlangInt (DBI.fromInt 5))])
  in let
    tup_el_12 =
      (BIF.erlang__op_mult
         [(ErlangInt (DBI.fromInt 16)), (ErlangInt (DBI.fromInt 3))])
  in let tup_el_16 = (ErlangTuple [empty_1])
  in
    (ErlangTuple
       [(ErlangAtom "dict"), (ErlangInt (DBI.fromInt 0)),
        (ErlangInt (DBI.fromInt 16)), (ErlangInt (DBI.fromInt 16)),
        tup_el_6, tup_el_9, tup_el_12, empty_1, tup_el_16])
erlps__new__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_key__2 :: ErlangFun
erlps__is_key__2 [key_0, d_1] =
  let    slot_4 = (erlps__get_slot__2 [d_1, key_0])
  in let bkt_7 = (erlps__get_bucket__2 [d_1, slot_4])
  in (erlps__find_key__2 [key_0, bkt_7])
erlps__is_key__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__is_key__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_key__2 :: ErlangFun
erlps__find_key__2 [k_0, (ErlangCons (ErlangCons k_1 _val_2) _)]
  | (k_1 == k_0) =
  (ErlangAtom "true")
erlps__find_key__2 [k_0, (ErlangCons _ bkt_1)] =
  (erlps__find_key__2 [k_0, bkt_1])
erlps__find_key__2 [_, (ErlangEmptyList)] = (ErlangAtom "false")
erlps__find_key__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__find_key__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list__1 :: ErlangFun
erlps__to_list__1 [d_0] =
  let
    arg_1 =
      (ErlangFun 3
         let
           lambda_2 [key_6, val_7, list_8] =
             let head_9 = (ErlangTuple [key_6, val_7])
             in (ErlangCons head_9 list_8)
           lambda_2 [arg_3, arg_4, arg_5] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 3 lambda_2) args)
         in lambda_2)
  in (erlps__fold__3 [arg_1, ErlangEmptyList, d_0])
erlps__to_list__1 [arg_15] = (EXC.function_clause unit)
erlps__to_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_list__1 :: ErlangFun
erlps__from_list__1 [l_0] =
  let   
    arg_1 =
      (ErlangFun 2
         let
           lambda_2 [(ErlangTuple [k_5, v_6]), d_7] =
             (erlps__store__3 [k_5, v_6, d_7])
           lambda_2 [arg_3, arg_4] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 2 lambda_2) args)
         in lambda_2)
  in let arg_11 = (erlps__new__0 [])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_1, arg_11, l_0])
erlps__from_list__1 [arg_13] = (EXC.function_clause unit)
erlps__from_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__size__1 :: ErlangFun
erlps__size__1 [(ErlangTuple [(ErlangAtom "dict"), n_0, _, _, _,
                              _, _, _, _])]
  | ((isEInt n_0) && (weakGeq n_0 (ErlangInt (DBI.fromInt 0)))) =
  n_0
erlps__size__1 [arg_1] = (EXC.function_clause unit)
erlps__size__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty__1 :: ErlangFun
erlps__is_empty__1 [(ErlangTuple [(ErlangAtom "dict"), n_0, _, _,
                                  _, _, _, _, _])]
  =
  (BIF.erlang__op_exactEq [n_0, (ErlangInt (DBI.fromInt 0))])
erlps__is_empty__1 [arg_3] = (EXC.function_clause unit)
erlps__is_empty__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fetch__2 :: ErlangFun
erlps__fetch__2 [key_0, d_1] =
  let    slot_4 = (erlps__get_slot__2 [d_1, key_0])
  in let bkt_7 = (erlps__get_bucket__2 [d_1, slot_4])
  in
    (EXC.tryCatch (\ _ -> (erlps__fetch_val__2 [key_0, bkt_7]))
       (\ ex_11 ->
          case ex_11 of
            (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "badarg"), _]) ->
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons key_0 (ErlangCons d_1 ErlangEmptyList))])
            ex_11 -> (EXC.raise ex_11)))
erlps__fetch__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__fetch__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fetch_val__2 :: ErlangFun
erlps__fetch_val__2 [k_0, (ErlangCons (ErlangCons k_1 val_2) _)]
  | (k_1 == k_0) =
  val_2
erlps__fetch_val__2 [k_0, (ErlangCons _ bkt_1)] =
  (erlps__fetch_val__2 [k_0, bkt_1])
erlps__fetch_val__2 [_, (ErlangEmptyList)] =
  (BIF.erlang__throw__1 [(ErlangAtom "badarg")])
erlps__fetch_val__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__fetch_val__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find__2 :: ErlangFun
erlps__find__2 [key_0, d_1] =
  let    slot_4 = (erlps__get_slot__2 [d_1, key_0])
  in let bkt_7 = (erlps__get_bucket__2 [d_1, slot_4])
  in (erlps__find_val__2 [key_0, bkt_7])
erlps__find__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__find__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_val__2 :: ErlangFun
erlps__find_val__2 [k_0, (ErlangCons (ErlangCons k_1 val_2) _)]
  | (k_1 == k_0) =
  (ErlangTuple [(ErlangAtom "ok"), val_2])
erlps__find_val__2 [k_0, (ErlangCons _ bkt_1)] =
  (erlps__find_val__2 [k_0, bkt_1])
erlps__find_val__2 [_, (ErlangEmptyList)] = (ErlangAtom "error")
erlps__find_val__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__find_val__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fetch_keys__1 :: ErlangFun
erlps__fetch_keys__1 [d_0] =
  let
    arg_1 =
      (ErlangFun 3
         let
           lambda_2 [key_6, _val_7, keys_8] = (ErlangCons key_6 keys_8)
           lambda_2 [arg_3, arg_4, arg_5] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 3 lambda_2) args)
         in lambda_2)
  in (erlps__fold__3 [arg_1, ErlangEmptyList, d_0])
erlps__fetch_keys__1 [arg_13] = (EXC.function_clause unit)
erlps__fetch_keys__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__erase__2 :: ErlangFun
erlps__erase__2 [key_0, d0_1] =
  let    slot_4 = (erlps__get_slot__2 [d0_1, key_0])
  in let
    arg_5 =
      (ErlangFun 1
         let
           lambda_6 [b0_8] = (erlps__erase_key__2 [key_0, b0_8])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    match_expr_15 = (erlps__on_bucket__3 [arg_5, d0_1, slot_4])
  in
    case match_expr_15 of
      (ErlangTuple [d1_13, dc_14]) ->
        (erlps__maybe_contract__2 [d1_13, dc_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__erase__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__erase__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__erase_key__2 :: ErlangFun
erlps__erase_key__2 [key_0,
                     (ErlangCons (ErlangCons key_1 _val_2) bkt_3)]
  | (key_1 == key_0) =
  (ErlangTuple [bkt_3, (ErlangInt (DBI.fromInt 1))])
erlps__erase_key__2 [key_0, (ErlangCons e_1 bkt0_2)] =
  let match_expr_7 = (erlps__erase_key__2 [key_0, bkt0_2])
  in
    case match_expr_7 of
      (ErlangTuple [bkt1_5, dc_6]) ->
        (ErlangTuple [(ErlangCons e_1 bkt1_5), dc_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__erase_key__2 [_, (ErlangEmptyList)] =
  (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
erlps__erase_key__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__erase_key__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take__2 :: ErlangFun
erlps__take__2 [key_0, d0_1] =
  let    slot_4 = (erlps__get_slot__2 [d0_1, key_0])
  in let
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [b0_9] = (erlps__take_key__2 [key_0, b0_9])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let case_5 = (erlps__on_bucket__3 [arg_6, d0_1, slot_4])
  in
    case case_5 of
      (ErlangTuple [d1_14, (ErlangTuple [value_15, dc_16])]) ->
        let tup_el_18 = (erlps__maybe_contract__2 [d1_14, dc_16])
        in (ErlangTuple [value_15, tup_el_18])
      (ErlangTuple [_, (ErlangAtom "error")]) -> (ErlangAtom "error")
      something_else -> (EXC.case_clause something_else)
erlps__take__2 [arg_21, arg_22] = (EXC.function_clause unit)
erlps__take__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_key__2 :: ErlangFun
erlps__take_key__2 [key_0,
                    (ErlangCons (ErlangCons key_1 val_2) bkt_3)]
  | (key_1 == key_0) =
  let tup_el_5 = (ErlangTuple [val_2, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [bkt_3, tup_el_5])
erlps__take_key__2 [key_0, (ErlangCons e_1 bkt0_2)] =
  let match_expr_7 = (erlps__take_key__2 [key_0, bkt0_2])
  in
    case match_expr_7 of
      (ErlangTuple [bkt1_5, res_6]) ->
        (ErlangTuple [(ErlangCons e_1 bkt1_5), res_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__take_key__2 [_, (ErlangEmptyList)] =
  (ErlangTuple [ErlangEmptyList, (ErlangAtom "error")])
erlps__take_key__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__take_key__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__store__3 :: ErlangFun
erlps__store__3 [key_0, val_1, d0_2] =
  let    slot_5 = (erlps__get_slot__2 [d0_2, key_0])
  in let
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [b0_9] = (erlps__store_bkt_val__3 [key_0, val_1, b0_9])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let
    match_expr_17 = (erlps__on_bucket__3 [arg_6, d0_2, slot_5])
  in
    case match_expr_17 of
      (ErlangTuple [d1_15, ic_16]) ->
        (erlps__maybe_expand__2 [d1_15, ic_16])
      _ -> (EXC.badmatch match_expr_17)
erlps__store__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__store__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__store_bkt_val__3 :: ErlangFun
erlps__store_bkt_val__3 [key_0, new_1,
                         (ErlangCons (ErlangCons key_2 _old_3) bkt_4)]
  | (key_2 == key_0) =
  (ErlangTuple
     [(ErlangCons (ErlangCons key_0 new_1) bkt_4),
      (ErlangInt (DBI.fromInt 0))])
erlps__store_bkt_val__3 [key_0, new_1,
                         (ErlangCons other_2 bkt0_3)]
  =
  let
    match_expr_9 = (erlps__store_bkt_val__3 [key_0, new_1, bkt0_3])
  in
    case match_expr_9 of
      (ErlangTuple [bkt1_7, ic_8]) ->
        (ErlangTuple [(ErlangCons other_2 bkt1_7), ic_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__store_bkt_val__3 [key_0, new_1, (ErlangEmptyList)] =
  (ErlangTuple
     [(ErlangCons (ErlangCons key_0 new_1) ErlangEmptyList),
      (ErlangInt (DBI.fromInt 1))])
erlps__store_bkt_val__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__store_bkt_val__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append__3 :: ErlangFun
erlps__append__3 [key_0, val_1, d0_2] =
  let    slot_5 = (erlps__get_slot__2 [d0_2, key_0])
  in let
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [b0_9] = (erlps__append_bkt__3 [key_0, val_1, b0_9])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let
    match_expr_17 = (erlps__on_bucket__3 [arg_6, d0_2, slot_5])
  in
    case match_expr_17 of
      (ErlangTuple [d1_15, ic_16]) ->
        (erlps__maybe_expand__2 [d1_15, ic_16])
      _ -> (EXC.badmatch match_expr_17)
erlps__append__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__append__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append_bkt__3 :: ErlangFun
erlps__append_bkt__3 [key_0, val_1,
                      (ErlangCons (ErlangCons key_2 bag_3) bkt_4)]
  | (key_2 == key_0) =
  let
    tail_8 =
      (BIF.erlang__op_append
         [bag_3, (ErlangCons val_1 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons (ErlangCons key_0 tail_8) bkt_4),
        (ErlangInt (DBI.fromInt 0))])
erlps__append_bkt__3 [key_0, val_1, (ErlangCons other_2 bkt0_3)]
  =
  let match_expr_9 = (erlps__append_bkt__3 [key_0, val_1, bkt0_3])
  in
    case match_expr_9 of
      (ErlangTuple [bkt1_7, ic_8]) ->
        (ErlangTuple [(ErlangCons other_2 bkt1_7), ic_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__append_bkt__3 [key_0, val_1, (ErlangEmptyList)] =
  (ErlangTuple
     [(ErlangCons
         (ErlangCons key_0 (ErlangCons val_1 ErlangEmptyList))
         ErlangEmptyList),
      (ErlangInt (DBI.fromInt 1))])
erlps__append_bkt__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__append_bkt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append_list__3 :: ErlangFun
erlps__append_list__3 [key_0, l_1, d0_2] =
  let    slot_5 = (erlps__get_slot__2 [d0_2, key_0])
  in let
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [b0_9] = (erlps__app_list_bkt__3 [key_0, l_1, b0_9])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let
    match_expr_17 = (erlps__on_bucket__3 [arg_6, d0_2, slot_5])
  in
    case match_expr_17 of
      (ErlangTuple [d1_15, ic_16]) ->
        (erlps__maybe_expand__2 [d1_15, ic_16])
      _ -> (EXC.badmatch match_expr_17)
erlps__append_list__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__append_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__app_list_bkt__3 :: ErlangFun
erlps__app_list_bkt__3 [key_0, l_1,
                        (ErlangCons (ErlangCons key_2 bag_3) bkt_4)]
  | (key_2 == key_0) =
  let tail_8 = (BIF.erlang__op_append [bag_3, l_1])
  in
    (ErlangTuple
       [(ErlangCons (ErlangCons key_0 tail_8) bkt_4),
        (ErlangInt (DBI.fromInt 0))])
erlps__app_list_bkt__3 [key_0, l_1, (ErlangCons other_2 bkt0_3)]
  =
  let match_expr_9 = (erlps__app_list_bkt__3 [key_0, l_1, bkt0_3])
  in
    case match_expr_9 of
      (ErlangTuple [bkt1_7, ic_8]) ->
        (ErlangTuple [(ErlangCons other_2 bkt1_7), ic_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__app_list_bkt__3 [key_0, l_1, (ErlangEmptyList)] =
  (ErlangTuple
     [(ErlangCons (ErlangCons key_0 l_1) ErlangEmptyList),
      (ErlangInt (DBI.fromInt 1))])
erlps__app_list_bkt__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__app_list_bkt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update__3 :: ErlangFun
erlps__update__3 [key_0, f_1, d0_2] =
  let slot_5 = (erlps__get_slot__2 [d0_2, key_0])
  in
    (EXC.tryOfCatch
       (\ _ ->
          let
            arg_6 =
              (ErlangFun 1
                 let
                   lambda_7 [b0_9] = (erlps__update_bkt__3 [key_0, f_1, b0_9])
                   lambda_7 [arg_8] = (EXC.function_clause unit)
                   lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
                 in lambda_7)
          in (erlps__on_bucket__3 [arg_6, d0_2, slot_5]))
       (\ of_15 ->
          case of_15 of
            (ErlangTuple [d1_17, _uv_18]) -> d1_17
            something_else -> (EXC.try_clause something_else))
       (\ ex_16 ->
          case ex_16 of
            (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "badarg"), _]) ->
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons key_0
                     (ErlangCons f_1 (ErlangCons d0_2 ErlangEmptyList)))])
            ex_16 -> (EXC.raise ex_16)))
erlps__update__3 [arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__update__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_bkt__3 :: ErlangFun
erlps__update_bkt__3 [key_0, f_1,
                      (ErlangCons (ErlangCons key_2 val_3) bkt_4)]
  | (key_2 == key_0) =
  let
    upd_7 =
      (BIF.erlang__apply__2 [f_1, (ErlangCons val_3 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons (ErlangCons key_0 upd_7) bkt_4), upd_7])
erlps__update_bkt__3 [key_0, f_1, (ErlangCons other_2 bkt0_3)] =
  let match_expr_9 = (erlps__update_bkt__3 [key_0, f_1, bkt0_3])
  in
    case match_expr_9 of
      (ErlangTuple [bkt1_7, upd_8]) ->
        (ErlangTuple [(ErlangCons other_2 bkt1_7), upd_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__update_bkt__3 [_key_0, _f_1, (ErlangEmptyList)] =
  (BIF.erlang__throw__1 [(ErlangAtom "badarg")])
erlps__update_bkt__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__update_bkt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update__4 :: ErlangFun
erlps__update__4 [key_0, f_1, init_2, d0_3] =
  let    slot_6 = (erlps__get_slot__2 [d0_3, key_0])
  in let
    arg_7 =
      (ErlangFun 1
         let
           lambda_8 [b0_10] =
             (erlps__update_bkt__4 [key_0, f_1, init_2, b0_10])
           lambda_8 [arg_9] = (EXC.function_clause unit)
           lambda_8 args = (EXC.badarity (ErlangFun 1 lambda_8) args)
         in lambda_8)
  in let
    match_expr_19 = (erlps__on_bucket__3 [arg_7, d0_3, slot_6])
  in
    case match_expr_19 of
      (ErlangTuple [d1_17, ic_18]) ->
        (erlps__maybe_expand__2 [d1_17, ic_18])
      _ -> (EXC.badmatch match_expr_19)
erlps__update__4 [arg_22, arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__update__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_bkt__4 :: ErlangFun
erlps__update_bkt__4 [key_0, f_1, _,
                      (ErlangCons (ErlangCons key_2 val_3) bkt_4)]
  | (key_2 == key_0) =
  let
    tail_8 =
      (BIF.erlang__apply__2 [f_1, (ErlangCons val_3 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangCons (ErlangCons key_0 tail_8) bkt_4),
        (ErlangInt (DBI.fromInt 0))])
erlps__update_bkt__4 [key_0, f_1, i_2,
                      (ErlangCons other_3 bkt0_4)]
  =
  let
    match_expr_11 = (erlps__update_bkt__4 [key_0, f_1, i_2, bkt0_4])
  in
    case match_expr_11 of
      (ErlangTuple [bkt1_9, ic_10]) ->
        (ErlangTuple [(ErlangCons other_3 bkt1_9), ic_10])
      _ -> (EXC.badmatch match_expr_11)
erlps__update_bkt__4 [key_0, f_1, i_2, (ErlangEmptyList)]
  | (isEFunA f_1 (ErlangInt (DBI.fromInt 1))) =
  (ErlangTuple
     [(ErlangCons (ErlangCons key_0 i_2) ErlangEmptyList),
      (ErlangInt (DBI.fromInt 1))])
erlps__update_bkt__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__update_bkt__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_counter__3 :: ErlangFun
erlps__update_counter__3 [key_0, incr_1, d0_2]
  | (isENum incr_1) =
  let    slot_5 = (erlps__get_slot__2 [d0_2, key_0])
  in let
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [b0_9] = (erlps__counter_bkt__3 [key_0, incr_1, b0_9])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let
    match_expr_17 = (erlps__on_bucket__3 [arg_6, d0_2, slot_5])
  in
    case match_expr_17 of
      (ErlangTuple [d1_15, ic_16]) ->
        (erlps__maybe_expand__2 [d1_15, ic_16])
      _ -> (EXC.badmatch match_expr_17)
erlps__update_counter__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__update_counter__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__counter_bkt__3 :: ErlangFun
erlps__counter_bkt__3 [key_0, i_1,
                       (ErlangCons (ErlangCons key_2 val_3) bkt_4)]
  | (key_2 == key_0) =
  let tail_8 = (BIF.erlang__op_plus [val_3, i_1])
  in
    (ErlangTuple
       [(ErlangCons (ErlangCons key_0 tail_8) bkt_4),
        (ErlangInt (DBI.fromInt 0))])
erlps__counter_bkt__3 [key_0, i_1, (ErlangCons other_2 bkt0_3)] =
  let match_expr_9 = (erlps__counter_bkt__3 [key_0, i_1, bkt0_3])
  in
    case match_expr_9 of
      (ErlangTuple [bkt1_7, ic_8]) ->
        (ErlangTuple [(ErlangCons other_2 bkt1_7), ic_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__counter_bkt__3 [key_0, i_1, (ErlangEmptyList)] =
  (ErlangTuple
     [(ErlangCons (ErlangCons key_0 i_1) ErlangEmptyList),
      (ErlangInt (DBI.fromInt 1))])
erlps__counter_bkt__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__counter_bkt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fold__3 :: ErlangFun
erlps__fold__3 [f_0, acc_1, d_2] =
  (erlps__fold_dict__3 [f_0, acc_1, d_2])
erlps__fold__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__fold__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map__2 :: ErlangFun
erlps__map__2 [f_0, d_1] = (erlps__map_dict__2 [f_0, d_1])
erlps__map__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__map__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter__2 :: ErlangFun
erlps__filter__2 [f_0, d_1] = (erlps__filter_dict__2 [f_0, d_1])
erlps__filter__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__filter__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge__3 :: ErlangFun
erlps__merge__3 [f_0, d1_1, d2_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_24 =
                 case d1_1 of
                   (ErlangTuple arr_27) | (DM.Just field_26) <-
                                            ((arr_27 DA.!! 1)) ->
                     field_26
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let
               rop_28 =
                 case d2_2 of
                   (ErlangTuple arr_31) | (DM.Just field_30) <-
                                            ((arr_31 DA.!! 1)) ->
                     field_30
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in (BIF.erlang__op_lesser [lop_24, rop_28])))) =
  let
    arg_3 =
      (ErlangFun 3
         let
           lambda_4 [k_8, v1_9, d_10] =
             let
               arg_12 =
                 (ErlangFun 1
                    let
                      lambda_13 [v2_15] =
                        (BIF.erlang__apply__2
                           [f_0,
                            (ErlangCons k_8
                               (ErlangCons v1_9
                                  (ErlangCons v2_15 ErlangEmptyList)))])
                      lambda_13 [arg_14] = (EXC.function_clause unit)
                      lambda_13 args =
                        (EXC.badarity (ErlangFun 1 lambda_13) args)
                    in lambda_13)
             in (erlps__update__4 [k_8, arg_12, v1_9, d_10])
           lambda_4 [arg_5, arg_6, arg_7] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 3 lambda_4) args)
         in lambda_4)
  in (erlps__fold_dict__3 [arg_3, d2_2, d1_1])
erlps__merge__3 [f_0, d1_1, d2_2] =
  let
    arg_3 =
      (ErlangFun 3
         let
           lambda_4 [k_8, v2_9, d_10] =
             let
               arg_12 =
                 (ErlangFun 1
                    let
                      lambda_13 [v1_15] =
                        (BIF.erlang__apply__2
                           [f_0,
                            (ErlangCons k_8
                               (ErlangCons v1_15
                                  (ErlangCons v2_9 ErlangEmptyList)))])
                      lambda_13 [arg_14] = (EXC.function_clause unit)
                      lambda_13 args =
                        (EXC.badarity (ErlangFun 1 lambda_13) args)
                    in lambda_13)
             in (erlps__update__4 [k_8, arg_12, v2_9, d_10])
           lambda_4 [arg_5, arg_6, arg_7] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 3 lambda_4) args)
         in lambda_4)
  in (erlps__fold_dict__3 [arg_3, d1_1, d2_2])
erlps__merge__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__merge__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_slot__2 :: ErlangFun
erlps__get_slot__2 [t_0, key_1] =
  let   
    arg_3 =
      case t_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let h_7 = (BIF.erlang__phash__2 [key_1, arg_3])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let
                     rop_9 =
                       case t_0 of
                         (ErlangTuple arr_12) | (DM.Just field_11) <-
                                                  ((arr_12 DA.!! 2)) ->
                           field_11
                         _ -> (EXC.badrecord (ErlangAtom "dict"))
                   in (BIF.erlang__op_greater [h_7, rop_9])))) ->
        let
          rop_14 =
            case t_0 of
              (ErlangTuple arr_17) | (DM.Just field_16) <-
                                       ((arr_17 DA.!! 4)) ->
                field_16
              _ -> (EXC.badrecord (ErlangAtom "dict"))
        in (BIF.erlang__op_minus [h_7, rop_14])
      _ -> h_7
      _ -> (EXC.if_clause unit)
erlps__get_slot__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__get_slot__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_bucket__2 :: ErlangFun
erlps__get_bucket__2 [t_0, slot_1] =
  let
    arg_2 =
      case t_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 8)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in (erlps__get_bucket_s__2 [arg_2, slot_1])
erlps__get_bucket__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__get_bucket__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__on_bucket__3 :: ErlangFun
erlps__on_bucket__3 [f_0, t_1, slot_2] =
  let   
    lop_4 =
      (BIF.erlang__op_minus [slot_2, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_3 =
      (BIF.erlang__op_div_strict [lop_4, (ErlangInt (DBI.fromInt 16))])
  in let
    segi_9 =
      (BIF.erlang__op_plus [lop_3, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_11 =
      (BIF.erlang__op_minus [slot_2, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_10 =
      (BIF.erlang__op_rem_strict
         [lop_11, (ErlangInt (DBI.fromInt 16))])
  in let
    bkti_16 =
      (BIF.erlang__op_plus [lop_10, (ErlangInt (DBI.fromInt 1))])
  in let
    segs_20 =
      case t_1 of
        (ErlangTuple arr_19) | (DM.Just field_18) <-
                                 ((arr_19 DA.!! 8)) ->
          field_18
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let seg_23 = (BIF.erlang__element__2 [segi_9, segs_20])
  in let b0_26 = (BIF.erlang__element__2 [bkti_16, seg_23])
  in let
    match_expr_31 =
      (BIF.erlang__apply__2 [f_0, (ErlangCons b0_26 ErlangEmptyList)])
  in
    case match_expr_31 of
      (ErlangTuple [b1_29, res_30]) ->
        let   
          arg_37 = (BIF.erlang__setelement__3 [bkti_16, seg_23, b1_29])
        in let
          record_updt_34 =
            (BIF.erlang__setelement__3 [segi_9, segs_20, arg_37])
        in let
          tup_el_32 =
            case t_1 of
              (ErlangTuple [(ErlangAtom "dict"), size_41, n_42, maxn_43,
                            bso_44, exp_size_45, con_size_46, empty_47,
                            segs_48]) ->
                (ErlangTuple
                   [(ErlangAtom "dict"), size_41, n_42, maxn_43, bso_44,
                    exp_size_45, con_size_46, empty_47, record_updt_34])
              _ -> (EXC.badrecord (ErlangAtom "dict"))
        in (ErlangTuple [tup_el_32, res_30])
      _ -> (EXC.badmatch match_expr_31)
erlps__on_bucket__3 [arg_50, arg_51, arg_52] =
  (EXC.function_clause unit)
erlps__on_bucket__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fold_dict__3 :: ErlangFun
erlps__fold_dict__3 [f_0, acc_1,
                     (ErlangTuple [(ErlangAtom "dict"), (ErlangInt num_2), _, _,
                                   _, _, _, _, _])]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0)))
  , (isEFunA f_0 (ErlangInt (DBI.fromInt 3))) =
  acc_1
erlps__fold_dict__3 [f_0, acc_1, d_2] =
  let   
    segs_6 =
      case d_2 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 8)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let arg_10 = (BIF.erlang__tuple_size__1 [segs_6])
  in (erlps__fold_segs__4 [f_0, acc_1, segs_6, arg_10])
erlps__fold_dict__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__fold_dict__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fold_segs__4 :: ErlangFun
erlps__fold_segs__4 [f_0, acc_1, segs_2, i_3]
  | (weakGeq i_3 (ErlangInt (DBI.fromInt 1))) =
  let    seg_6 = (BIF.erlang__element__2 [i_3, segs_2])
  in let arg_12 = (BIF.erlang__tuple_size__1 [seg_6])
  in let arg_8 = (erlps__fold_seg__4 [f_0, acc_1, seg_6, arg_12])
  in let
    arg_15 =
      (BIF.erlang__op_minus [i_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__fold_segs__4 [f_0, arg_8, segs_2, arg_15])
erlps__fold_segs__4 [f_0, acc_1, _, (ErlangInt num_2)]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0)))
  , (isEFunA f_0 (ErlangInt (DBI.fromInt 3))) =
  acc_1
erlps__fold_segs__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__fold_segs__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fold_seg__4 :: ErlangFun
erlps__fold_seg__4 [f_0, acc_1, seg_2, i_3]
  | (weakGeq i_3 (ErlangInt (DBI.fromInt 1))) =
  let    arg_8 = (BIF.erlang__element__2 [i_3, seg_2])
  in let arg_5 = (erlps__fold_bucket__3 [f_0, acc_1, arg_8])
  in let
    arg_12 =
      (BIF.erlang__op_minus [i_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__fold_seg__4 [f_0, arg_5, seg_2, arg_12])
erlps__fold_seg__4 [f_0, acc_1, _, (ErlangInt num_2)]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0)))
  , (isEFunA f_0 (ErlangInt (DBI.fromInt 3))) =
  acc_1
erlps__fold_seg__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__fold_seg__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fold_bucket__3 :: ErlangFun
erlps__fold_bucket__3 [f_0, acc_1,
                       (ErlangCons (ErlangCons key_2 val_3) bkt_4)]
  =
  let
    arg_6 =
      (BIF.erlang__apply__2
         [f_0,
          (ErlangCons key_2
             (ErlangCons val_3 (ErlangCons acc_1 ErlangEmptyList)))])
  in (erlps__fold_bucket__3 [f_0, arg_6, bkt_4])
erlps__fold_bucket__3 [f_0, acc_1, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 3))) =
  acc_1
erlps__fold_bucket__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__fold_bucket__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_dict__2 :: ErlangFun
erlps__map_dict__2 [f_0,
                    dict_2@(ErlangTuple [(ErlangAtom "dict"), (ErlangInt num_1),
                                         _, _, _, _, _, _, _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  dict_2
erlps__map_dict__2 [f_0, d_1] =
  let   
    arg_2 =
      case d_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 8)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let segs0_6 = (BIF.erlang__tuple_to_list__1 [arg_2])
  in let segs1_9 = (erlps__map_seg_list__2 [f_0, segs0_6])
  in let record_updt_11 = (BIF.erlang__list_to_tuple__1 [segs1_9])
  in
    case d_1 of
      (ErlangTuple [(ErlangAtom "dict"), size_13, n_14, maxn_15,
                    bso_16, exp_size_17, con_size_18, empty_19, segs_20]) ->
        (ErlangTuple
           [(ErlangAtom "dict"), size_13, n_14, maxn_15, bso_16,
            exp_size_17, con_size_18, empty_19, record_updt_11])
      _ -> (EXC.badrecord (ErlangAtom "dict"))
erlps__map_dict__2 [arg_21, arg_22] = (EXC.function_clause unit)
erlps__map_dict__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_seg_list__2 :: ErlangFun
erlps__map_seg_list__2 [f_0, (ErlangCons seg_1 segs_2)] =
  let    bkts0_4 = (BIF.erlang__tuple_to_list__1 [seg_1])
  in let bkts1_7 = (erlps__map_bkt_list__2 [f_0, bkts0_4])
  in let head_8 = (BIF.erlang__list_to_tuple__1 [bkts1_7])
  in let tail_10 = (erlps__map_seg_list__2 [f_0, segs_2])
  in (ErlangCons head_8 tail_10)
erlps__map_seg_list__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  ErlangEmptyList
erlps__map_seg_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__map_seg_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_bkt_list__2 :: ErlangFun
erlps__map_bkt_list__2 [f_0, (ErlangCons bkt0_1 bkts_2)] =
  let    head_3 = (erlps__map_bucket__2 [f_0, bkt0_1])
  in let tail_6 = (erlps__map_bkt_list__2 [f_0, bkts_2])
  in (ErlangCons head_3 tail_6)
erlps__map_bkt_list__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  ErlangEmptyList
erlps__map_bkt_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__map_bkt_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_bucket__2 :: ErlangFun
erlps__map_bucket__2 [f_0,
                      (ErlangCons (ErlangCons key_1 val_2) bkt_3)]
  =
  let   
    tail_6 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons key_1 (ErlangCons val_2 ErlangEmptyList))])
  in let tail_10 = (erlps__map_bucket__2 [f_0, bkt_3])
  in (ErlangCons (ErlangCons key_1 tail_6) tail_10)
erlps__map_bucket__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  ErlangEmptyList
erlps__map_bucket__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__map_bucket__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_dict__2 :: ErlangFun
erlps__filter_dict__2 [f_0,
                       dict_2@(ErlangTuple [(ErlangAtom "dict"),
                                            (ErlangInt num_1), _, _, _, _, _, _,
                                            _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  dict_2
erlps__filter_dict__2 [f_0, d_1] =
  let   
    arg_2 =
      case d_1 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 8)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let segs0_6 = (BIF.erlang__tuple_to_list__1 [arg_2])
  in let
    match_expr_13 =
      (erlps__filter_seg_list__4
         [f_0, segs0_6, ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_13 of
      (ErlangTuple [segs1_11, fc_12]) ->
        let    record_updt_16 = (BIF.erlang__list_to_tuple__1 [segs1_11])
        in let
          arg_14 =
            case d_1 of
              (ErlangTuple [(ErlangAtom "dict"), size_18, n_19, maxn_20,
                            bso_21, exp_size_22, con_size_23, empty_24,
                            segs_25]) ->
                (ErlangTuple
                   [(ErlangAtom "dict"), size_18, n_19, maxn_20, bso_21,
                    exp_size_22, con_size_23, empty_24, record_updt_16])
              _ -> (EXC.badrecord (ErlangAtom "dict"))
        in (erlps__maybe_contract__2 [arg_14, fc_12])
      _ -> (EXC.badmatch match_expr_13)
erlps__filter_dict__2 [arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__filter_dict__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_seg_list__4 :: ErlangFun
erlps__filter_seg_list__4 [f_0, (ErlangCons seg_1 segs_2), fss_3,
                           fc0_4]
  =
  let    bkts0_6 = (BIF.erlang__tuple_to_list__1 [seg_1])
  in let
    match_expr_13 =
      (erlps__filter_bkt_list__4
         [f_0, bkts0_6, ErlangEmptyList, fc0_4])
  in
    case match_expr_13 of
      (ErlangTuple [bkts1_11, fc1_12]) ->
        let head_17 = (BIF.erlang__list_to_tuple__1 [bkts1_11])
        in
          (erlps__filter_seg_list__4
             [f_0, segs_2, (ErlangCons head_17 fss_3), fc1_12])
      _ -> (EXC.badmatch match_expr_13)
erlps__filter_seg_list__4 [f_0, (ErlangEmptyList), fss_1, fc_2]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  let tup_el_3 = (BIF.lists__reverse__2 [fss_1, ErlangEmptyList])
  in (ErlangTuple [tup_el_3, fc_2])
erlps__filter_seg_list__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__filter_seg_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_bkt_list__4 :: ErlangFun
erlps__filter_bkt_list__4 [f_0, (ErlangCons bkt0_1 bkts_2),
                           fbs_3, fc0_4]
  =
  let
    match_expr_11 =
      (erlps__filter_bucket__4 [f_0, bkt0_1, ErlangEmptyList, fc0_4])
  in
    case match_expr_11 of
      (ErlangTuple [bkt1_9, fc1_10]) ->
        (erlps__filter_bkt_list__4
           [f_0, bkts_2, (ErlangCons bkt1_9 fbs_3), fc1_10])
      _ -> (EXC.badmatch match_expr_11)
erlps__filter_bkt_list__4 [f_0, (ErlangEmptyList), fbs_1, fc_2]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [fbs_1])
  in (ErlangTuple [tup_el_3, fc_2])
erlps__filter_bkt_list__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__filter_bkt_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_bucket__4 :: ErlangFun
erlps__filter_bucket__4 [f_0,
                         (ErlangCons e_3@(ErlangCons key_1 val_2) bkt_4), fb_5,
                         fc_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons key_1 (ErlangCons val_2 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__filter_bucket__4
           [f_0, bkt_4, (ErlangCons e_3 fb_5), fc_6])
      (ErlangAtom "false") ->
        let
          arg_20 =
            (BIF.erlang__op_plus [fc_6, (ErlangInt (DBI.fromInt 1))])
        in (erlps__filter_bucket__4 [f_0, bkt_4, fb_5, arg_20])
      something_else -> (EXC.case_clause something_else)
erlps__filter_bucket__4 [f_0, (ErlangEmptyList), fb_1, fc_2]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  let
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [fb_1])
  in (ErlangTuple [tup_el_3, fc_2])
erlps__filter_bucket__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__filter_bucket__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_bucket_s__2 :: ErlangFun
erlps__get_bucket_s__2 [segs_0, slot_1] =
  let   
    lop_3 =
      (BIF.erlang__op_minus [slot_1, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_2 =
      (BIF.erlang__op_div_strict [lop_3, (ErlangInt (DBI.fromInt 16))])
  in let
    segi_8 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_10 =
      (BIF.erlang__op_minus [slot_1, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_9 =
      (BIF.erlang__op_rem_strict
         [lop_10, (ErlangInt (DBI.fromInt 16))])
  in let
    bkti_15 =
      (BIF.erlang__op_plus [lop_9, (ErlangInt (DBI.fromInt 1))])
  in let arg_17 = (BIF.erlang__element__2 [segi_8, segs_0])
  in (BIF.erlang__element__2 [bkti_15, arg_17])
erlps__get_bucket_s__2 [arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__get_bucket_s__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__put_bucket_s__3 :: ErlangFun
erlps__put_bucket_s__3 [segs_0, slot_1, bkt_2] =
  let   
    lop_4 =
      (BIF.erlang__op_minus [slot_1, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_3 =
      (BIF.erlang__op_div_strict [lop_4, (ErlangInt (DBI.fromInt 16))])
  in let
    segi_9 =
      (BIF.erlang__op_plus [lop_3, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_11 =
      (BIF.erlang__op_minus [slot_1, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_10 =
      (BIF.erlang__op_rem_strict
         [lop_11, (ErlangInt (DBI.fromInt 16))])
  in let
    bkti_16 =
      (BIF.erlang__op_plus [lop_10, (ErlangInt (DBI.fromInt 1))])
  in let arg_18 = (BIF.erlang__element__2 [segi_9, segs_0])
  in let
    seg_22 = (BIF.erlang__setelement__3 [bkti_16, arg_18, bkt_2])
  in (BIF.erlang__setelement__3 [segi_9, segs_0, seg_22])
erlps__put_bucket_s__3 [arg_26, arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__put_bucket_s__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_expand__2 :: ErlangFun
erlps__maybe_expand__2 [t_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (erlps__maybe_expand_aux__2 [t_0, (ErlangInt (DBI.fromInt 0))])
erlps__maybe_expand__2 [t_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  (erlps__maybe_expand_aux__2 [t_0, (ErlangInt (DBI.fromInt 1))])
erlps__maybe_expand__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__maybe_expand__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_expand_aux__2 :: ErlangFun
erlps__maybe_expand_aux__2 [t0_0, ic_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_66 =
                 case t0_0 of
                   (ErlangTuple arr_69) | (DM.Just field_68) <-
                                            ((arr_69 DA.!! 1)) ->
                     field_68
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let lop_65 = (BIF.erlang__op_plus [lop_66, ic_1])
             in let
               rop_71 =
                 case t0_0 of
                   (ErlangTuple arr_74) | (DM.Just field_73) <-
                                            ((arr_74 DA.!! 5)) ->
                     field_73
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in (BIF.erlang__op_greater [lop_65, rop_71])))) =
  let    t_3 = (erlps__maybe_expand_segs__1 [t0_0])
  in let
    lop_4 =
      case t_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    n_9 = (BIF.erlang__op_plus [lop_4, (ErlangInt (DBI.fromInt 1))])
  in let
    segs0_13 =
      case t_3 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 8)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    rop_15 =
      case t_3 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 4)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let slot1_19 = (BIF.erlang__op_minus [n_9, rop_15])
  in let b_22 = (erlps__get_bucket_s__2 [segs0_13, slot1_19])
  in let
    arg_27 =
      case t_3 of
        (ErlangTuple arr_30) | (DM.Just field_29) <-
                                 ((arr_30 DA.!! 3)) ->
          field_29
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    match_expr_33 = (erlps__rehash__4 [b_22, slot1_19, n_9, arg_27])
  in
    case match_expr_33 of
      (ErlangCons b1_31 b2_32) ->
        let   
          segs1_37 = (erlps__put_bucket_s__3 [segs0_13, slot1_19, b1_31])
        in let segs2_41 = (erlps__put_bucket_s__3 [segs1_37, n_9, b2_32])
        in let
          lop_44 =
            case t_3 of
              (ErlangTuple arr_47) | (DM.Just field_46) <-
                                       ((arr_47 DA.!! 1)) ->
                field_46
              _ -> (EXC.badrecord (ErlangAtom "dict"))
        in let record_updt_43 = (BIF.erlang__op_plus [lop_44, ic_1])
        in let
          record_updt_50 =
            (BIF.erlang__op_mult [n_9, (ErlangInt (DBI.fromInt 5))])
        in let
          record_updt_53 =
            (BIF.erlang__op_mult [n_9, (ErlangInt (DBI.fromInt 3))])
        in
          case t_3 of
            (ErlangTuple [(ErlangAtom "dict"), size_57, n_58, maxn_59,
                          bso_60, exp_size_61, con_size_62, empty_63,
                          segs_64]) ->
              (ErlangTuple
                 [(ErlangAtom "dict"), record_updt_43, n_9, maxn_59, bso_60,
                  record_updt_50, record_updt_53, empty_63, segs2_41])
            _ -> (EXC.badrecord (ErlangAtom "dict"))
      _ -> (EXC.badmatch match_expr_33)
erlps__maybe_expand_aux__2 [t_0, ic_1] =
  let   
    lop_4 =
      case t_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 1)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let record_updt_3 = (BIF.erlang__op_plus [lop_4, ic_1])
  in
    case t_0 of
      (ErlangTuple [(ErlangAtom "dict"), size_9, n_10, maxn_11, bso_12,
                    exp_size_13, con_size_14, empty_15, segs_16]) ->
        (ErlangTuple
           [(ErlangAtom "dict"), record_updt_3, n_10, maxn_11, bso_12,
            exp_size_13, con_size_14, empty_15, segs_16])
      _ -> (EXC.badrecord (ErlangAtom "dict"))
erlps__maybe_expand_aux__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__maybe_expand_aux__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_expand_segs__1 :: ErlangFun
erlps__maybe_expand_segs__1 [t_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_31 =
                 case t_0 of
                   (ErlangTuple arr_34) | (DM.Just field_33) <-
                                            ((arr_34 DA.!! 2)) ->
                     field_33
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let
               rop_35 =
                 case t_0 of
                   (ErlangTuple arr_38) | (DM.Just field_37) <-
                                            ((arr_38 DA.!! 3)) ->
                     field_37
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in (BIF.erlang__op_exactEq [lop_31, rop_35])))) =
  let   
    rop_4 =
      case t_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 3)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    record_updt_2 =
      (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 2)), rop_4])
  in let
    rop_10 =
      case t_0 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 4)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    record_updt_8 =
      (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 2)), rop_10])
  in let
    arg_15 =
      case t_0 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 8)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    arg_19 =
      case t_0 of
        (ErlangTuple arr_22) | (DM.Just field_21) <-
                                 ((arr_22 DA.!! 7)) ->
          field_21
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let record_updt_14 = (erlps__expand_segs__2 [arg_15, arg_19])
  in
    case t_0 of
      (ErlangTuple [(ErlangAtom "dict"), size_23, n_24, maxn_25,
                    bso_26, exp_size_27, con_size_28, empty_29, segs_30]) ->
        (ErlangTuple
           [(ErlangAtom "dict"), size_23, n_24, record_updt_2,
            record_updt_8, exp_size_27, con_size_28, empty_29,
            record_updt_14])
      _ -> (EXC.badrecord (ErlangAtom "dict"))
erlps__maybe_expand_segs__1 [t_0] = t_0
erlps__maybe_expand_segs__1 [arg_1] = (EXC.function_clause unit)
erlps__maybe_expand_segs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_contract__2 :: ErlangFun
erlps__maybe_contract__2 [t_0, dc_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_62 =
                 case t_0 of
                   (ErlangTuple arr_65) | (DM.Just field_64) <-
                                            ((arr_65 DA.!! 1)) ->
                     field_64
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let lop_61 = (BIF.erlang__op_minus [lop_62, dc_1])
             in let
               rop_67 =
                 case t_0 of
                   (ErlangTuple arr_70) | (DM.Just field_69) <-
                                            ((arr_70 DA.!! 6)) ->
                     field_69
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let lop_60 = (BIF.erlang__op_lesser [lop_61, rop_67])
             in
               case lop_60 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     lop_71 =
                       case t_0 of
                         (ErlangTuple arr_74) | (DM.Just field_73) <-
                                                  ((arr_74 DA.!! 2)) ->
                           field_73
                         _ -> (EXC.badrecord (ErlangAtom "dict"))
                   in
                     (BIF.erlang__op_greater
                        [lop_71, (ErlangInt (DBI.fromInt 16))])
                 _ -> (EXC.badarg1 lop_60)))) =
  let   
    n_5 =
      case t_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    rop_7 =
      case t_0 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 4)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let slot1_11 = (BIF.erlang__op_minus [n_5, rop_7])
  in let
    segs0_15 =
      case t_0 of
        (ErlangTuple arr_14) | (DM.Just field_13) <-
                                 ((arr_14 DA.!! 8)) ->
          field_13
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let b1_18 = (erlps__get_bucket_s__2 [segs0_15, slot1_11])
  in let b2_22 = (erlps__get_bucket_s__2 [segs0_15, n_5])
  in let arg_25 = (BIF.erlang__op_append [b1_18, b2_22])
  in let
    segs1_28 = (erlps__put_bucket_s__3 [segs0_15, slot1_11, arg_25])
  in let
    segs2_32 =
      (erlps__put_bucket_s__3 [segs1_28, n_5, ErlangEmptyList])
  in let
    n1_35 = (BIF.erlang__op_minus [n_5, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_39 =
      case t_0 of
        (ErlangTuple arr_42) | (DM.Just field_41) <-
                                 ((arr_42 DA.!! 1)) ->
          field_41
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let record_updt_38 = (BIF.erlang__op_minus [lop_39, dc_1])
  in let
    record_updt_45 =
      (BIF.erlang__op_mult [n1_35, (ErlangInt (DBI.fromInt 5))])
  in let
    record_updt_48 =
      (BIF.erlang__op_mult [n1_35, (ErlangInt (DBI.fromInt 3))])
  in let
    arg_36 =
      case t_0 of
        (ErlangTuple [(ErlangAtom "dict"), size_52, n_53, maxn_54,
                      bso_55, exp_size_56, con_size_57, empty_58, segs_59]) ->
          (ErlangTuple
             [(ErlangAtom "dict"), record_updt_38, n1_35, maxn_54, bso_55,
              record_updt_45, record_updt_48, empty_58, segs2_32])
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in (erlps__maybe_contract_segs__1 [arg_36])
erlps__maybe_contract__2 [t_0, dc_1] =
  let   
    lop_4 =
      case t_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 1)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let record_updt_3 = (BIF.erlang__op_minus [lop_4, dc_1])
  in
    case t_0 of
      (ErlangTuple [(ErlangAtom "dict"), size_9, n_10, maxn_11, bso_12,
                    exp_size_13, con_size_14, empty_15, segs_16]) ->
        (ErlangTuple
           [(ErlangAtom "dict"), record_updt_3, n_10, maxn_11, bso_12,
            exp_size_13, con_size_14, empty_15, segs_16])
      _ -> (EXC.badrecord (ErlangAtom "dict"))
erlps__maybe_contract__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__maybe_contract__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_contract_segs__1 :: ErlangFun
erlps__maybe_contract_segs__1 [t_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_27 =
                 case t_0 of
                   (ErlangTuple arr_30) | (DM.Just field_29) <-
                                            ((arr_30 DA.!! 2)) ->
                     field_29
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in let
               rop_31 =
                 case t_0 of
                   (ErlangTuple arr_34) | (DM.Just field_33) <-
                                            ((arr_34 DA.!! 4)) ->
                     field_33
                   _ -> (EXC.badrecord (ErlangAtom "dict"))
             in (BIF.erlang__op_exactEq [lop_27, rop_31])))) =
  let   
    lop_3 =
      case t_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    record_updt_2 =
      (BIF.erlang__op_div_strict [lop_3, (ErlangInt (DBI.fromInt 2))])
  in let
    lop_9 =
      case t_0 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 4)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let
    record_updt_8 =
      (BIF.erlang__op_div_strict [lop_9, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_15 =
      case t_0 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 8)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "dict"))
  in let record_updt_14 = (erlps__contract_segs__1 [arg_15])
  in
    case t_0 of
      (ErlangTuple [(ErlangAtom "dict"), size_19, n_20, maxn_21,
                    bso_22, exp_size_23, con_size_24, empty_25, segs_26]) ->
        (ErlangTuple
           [(ErlangAtom "dict"), size_19, n_20, record_updt_2,
            record_updt_8, exp_size_23, con_size_24, empty_25,
            record_updt_14])
      _ -> (EXC.badrecord (ErlangAtom "dict"))
erlps__maybe_contract_segs__1 [t_0] = t_0
erlps__maybe_contract_segs__1 [arg_1] =
  (EXC.function_clause unit)
erlps__maybe_contract_segs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rehash__4 :: ErlangFun
erlps__rehash__4 [(ErlangCons keybag_2@(ErlangCons key_0 _bag_1) t_3),
                  slot1_4, slot2_5, maxn_6]
  =
  let
    match_expr_13 =
      (erlps__rehash__4 [t_3, slot1_4, slot2_5, maxn_6])
  in
    case match_expr_13 of
      (ErlangCons l1_11 l2_12) ->
        let case_14 = (BIF.erlang__phash__2 [key_0, maxn_6])
        in
          case case_14 of
            slot1_17 | (slot1_17 == slot1_4) ->
              (ErlangCons (ErlangCons keybag_2 l1_11) l2_12)
            slot2_22 | (slot2_22 == slot2_5) ->
              (ErlangCons l1_11 (ErlangCons keybag_2 l2_12))
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_13)
erlps__rehash__4 [(ErlangEmptyList), _slot1_0, _slot2_1, _maxn_2]
  =
  (ErlangCons ErlangEmptyList ErlangEmptyList)
erlps__rehash__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__rehash__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mk_seg__1 :: ErlangFun
erlps__mk_seg__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 16))) =
  (ErlangTuple
     [ErlangEmptyList, ErlangEmptyList, ErlangEmptyList,
      ErlangEmptyList, ErlangEmptyList, ErlangEmptyList,
      ErlangEmptyList, ErlangEmptyList, ErlangEmptyList,
      ErlangEmptyList, ErlangEmptyList, ErlangEmptyList,
      ErlangEmptyList, ErlangEmptyList, ErlangEmptyList,
      ErlangEmptyList])
erlps__mk_seg__1 [arg_17] = (EXC.function_clause unit)
erlps__mk_seg__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_segs__2 :: ErlangFun
erlps__expand_segs__2 [(ErlangTuple [b1_0]), empty_1] =
  (ErlangTuple [b1_0, empty_1])
erlps__expand_segs__2 [(ErlangTuple [b1_0, b2_1]), empty_2] =
  (ErlangTuple [b1_0, b2_1, empty_2, empty_2])
erlps__expand_segs__2 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3]),
                       empty_4]
  =
  (ErlangTuple
     [b1_0, b2_1, b3_2, b4_3, empty_4, empty_4, empty_4, empty_4])
erlps__expand_segs__2 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3,
                                     b5_4, b6_5, b7_6, b8_7]),
                       empty_8]
  =
  (ErlangTuple
     [b1_0, b2_1, b3_2, b4_3, b5_4, b6_5, b7_6, b8_7, empty_8,
      empty_8, empty_8, empty_8, empty_8, empty_8, empty_8, empty_8])
erlps__expand_segs__2 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3,
                                     b5_4, b6_5, b7_6, b8_7, b9_8, b10_9,
                                     b11_10, b12_11, b13_12, b14_13, b15_14,
                                     b16_15]),
                       empty_16]
  =
  (ErlangTuple
     [b1_0, b2_1, b3_2, b4_3, b5_4, b6_5, b7_6, b8_7, b9_8, b10_9,
      b11_10, b12_11, b13_12, b14_13, b15_14, b16_15, empty_16,
      empty_16, empty_16, empty_16, empty_16, empty_16, empty_16,
      empty_16, empty_16, empty_16, empty_16, empty_16, empty_16,
      empty_16, empty_16, empty_16])
erlps__expand_segs__2 [segs_0, empty_1] =
  let    lop_3 = (BIF.erlang__tuple_to_list__1 [segs_0])
  in let arg_6 = (BIF.erlang__tuple_size__1 [segs_0])
  in let
    rop_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [arg_6, empty_1])
  in let arg_2 = (BIF.erlang__op_append [lop_3, rop_5])
  in (BIF.erlang__list_to_tuple__1 [arg_2])
erlps__expand_segs__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__expand_segs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__contract_segs__1 :: ErlangFun
erlps__contract_segs__1 [(ErlangTuple [b1_0, _])] =
  (ErlangTuple [b1_0])
erlps__contract_segs__1 [(ErlangTuple [b1_0, b2_1, _, _])] =
  (ErlangTuple [b1_0, b2_1])
erlps__contract_segs__1 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3, _,
                                       _, _, _])]
  =
  (ErlangTuple [b1_0, b2_1, b3_2, b4_3])
erlps__contract_segs__1 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3,
                                       b5_4, b6_5, b7_6, b8_7, _, _, _, _, _, _,
                                       _, _])]
  =
  (ErlangTuple [b1_0, b2_1, b3_2, b4_3, b5_4, b6_5, b7_6, b8_7])
erlps__contract_segs__1 [(ErlangTuple [b1_0, b2_1, b3_2, b4_3,
                                       b5_4, b6_5, b7_6, b8_7, b9_8, b10_9,
                                       b11_10, b12_11, b13_12, b14_13, b15_14,
                                       b16_15, _, _, _, _, _, _, _, _, _, _, _,
                                       _, _, _, _, _])]
  =
  (ErlangTuple
     [b1_0, b2_1, b3_2, b4_3, b5_4, b6_5, b7_6, b8_7, b9_8, b10_9,
      b11_10, b12_11, b13_12, b14_13, b15_14, b16_15])
erlps__contract_segs__1 [segs_0] =
  let    lop_1 = (BIF.erlang__tuple_size__1 [segs_0])
  in let
    ss_4 =
      (BIF.erlang__op_div_strict [lop_1, (ErlangInt (DBI.fromInt 2))])
  in let arg_6 = (BIF.erlang__tuple_to_list__1 [segs_0])
  in let
    arg_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__sublist__3"
         [arg_6, (ErlangInt (DBI.fromInt 1)), ss_4])
  in (BIF.erlang__list_to_tuple__1 [arg_5])
erlps__contract_segs__1 [arg_10] = (EXC.function_clause unit)
erlps__contract_segs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)