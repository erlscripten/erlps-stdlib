module Digraph(erlps__new__0, erlps__new__1, erlps__delete__1,
               erlps__info__1, erlps__add_vertex__1, erlps__add_vertex__2,
               erlps__add_vertex__3, erlps__del_vertex__2,
               erlps__del_vertices__2, erlps__vertex__2, erlps__no_vertices__1,
               erlps__vertices__1, erlps__source_vertices__1,
               erlps__sink_vertices__1, erlps__add_edge__3, erlps__add_edge__4,
               erlps__add_edge__5, erlps__del_edge__2, erlps__del_edges__2,
               erlps__del_path__3, erlps__edge__2, erlps__no_edges__1,
               erlps__edges__1, erlps__out_neighbours__2,
               erlps__in_neighbours__2, erlps__out_edges__2, erlps__in_edges__2,
               erlps__edges__2, erlps__out_degree__2, erlps__in_degree__2,
               erlps__get_path__3, erlps__get_cycle__2,
               erlps__get_short_path__3, erlps__get_short_cycle__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__new__0 :: ErlangFun
erlps__new__0 [] = (erlps__new__1 [ErlangEmptyList])
erlps__new__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new__1 :: ErlangFun
erlps__new__1 [type_0] =
  let
    case_1 =
      (erlps__check_type__3
         [type_0, (ErlangAtom "protected"), ErlangEmptyList])
  in
    case case_1 of
      (ErlangTuple [access_5, ts_6]) ->
        let   
          v_13 =
            (BIF.do_remote_fun_call "Ets" "erlps__new__2"
               [(ErlangAtom "vertices"),
                (ErlangCons (ErlangAtom "set")
                   (ErlangCons access_5 ErlangEmptyList))])
        in let
          e_20 =
            (BIF.do_remote_fun_call "Ets" "erlps__new__2"
               [(ErlangAtom "edges"),
                (ErlangCons (ErlangAtom "set")
                   (ErlangCons access_5 ErlangEmptyList))])
        in let
          n_27 =
            (BIF.do_remote_fun_call "Ets" "erlps__new__2"
               [(ErlangAtom "neighbours"),
                (ErlangCons (ErlangAtom "bag")
                   (ErlangCons access_5 ErlangEmptyList))])
        in let
          head_30 =
            (ErlangTuple [(ErlangAtom "$vid"), (ErlangInt (DBI.fromInt 0))])
        in let
          head_34 =
            (ErlangTuple [(ErlangAtom "$eid"), (ErlangInt (DBI.fromInt 0))])
        in let
          _ =
            (BIF.do_remote_fun_call "Ets" "erlps__insert__2"
               [n_27,
                (ErlangCons head_30 (ErlangCons head_34 ErlangEmptyList))])
        in let
          arg_39 =
            (ErlangTuple
               [(ErlangAtom "digraph"), v_13, e_20, n_27, (ErlangAtom "true")])
        in (erlps__set_type__2 [ts_6, arg_39])
      (ErlangAtom "error") ->
        (BIF.erlang__error__1 [(ErlangAtom "badarg")])
      something_else -> (EXC.case_clause something_else)
erlps__new__1 [arg_46] = (EXC.function_clause unit)
erlps__new__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_type__3 :: ErlangFun
erlps__check_type__3 [(ErlangCons (ErlangAtom "acyclic") ts_0),
                      a_1, l_2]
  =
  let
    head_6 =
      (ErlangTuple [(ErlangAtom "cyclic"), (ErlangAtom "false")])
  in (erlps__check_type__3 [ts_0, a_1, (ErlangCons head_6 l_2)])
erlps__check_type__3 [(ErlangCons (ErlangAtom "cyclic") ts_0),
                      a_1, l_2]
  =
  let
    head_6 =
      (ErlangTuple [(ErlangAtom "cyclic"), (ErlangAtom "true")])
  in (erlps__check_type__3 [ts_0, a_1, (ErlangCons head_6 l_2)])
erlps__check_type__3 [(ErlangCons (ErlangAtom "protected") ts_0),
                      _, l_1]
  =
  (erlps__check_type__3 [ts_0, (ErlangAtom "protected"), l_1])
erlps__check_type__3 [(ErlangCons (ErlangAtom "private") ts_0),
                      _, l_1]
  =
  (erlps__check_type__3 [ts_0, (ErlangAtom "private"), l_1])
erlps__check_type__3 [(ErlangEmptyList), a_0, l_1] =
  (ErlangTuple [a_0, l_1])
erlps__check_type__3 [_, _, _] = (ErlangAtom "error")
erlps__check_type__3 [arg_0, arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__check_type__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_type__2 :: ErlangFun
erlps__set_type__2 [(ErlangCons (ErlangTuple [(ErlangAtom "cyclic"),
                                              v_0]) ks_1),
                    g_2]
  =
  let
    arg_4 =
      case g_2 of
        (ErlangTuple [(ErlangAtom "digraph"), vtab_7, etab_8, ntab_9,
                      cyclic_10]) ->
          (ErlangTuple
             [(ErlangAtom "digraph"), vtab_7, etab_8, ntab_9, v_0])
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in (erlps__set_type__2 [ks_1, arg_4])
erlps__set_type__2 [(ErlangEmptyList), g_0] = g_0
erlps__set_type__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__set_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__delete__1 :: ErlangFun
erlps__delete__1 [g_0] =
  let   
    arg_1 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    _ = (BIF.do_remote_fun_call "Ets" "erlps__delete__1" [arg_1])
  in let
    arg_5 =
      case g_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 2)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    _ = (BIF.do_remote_fun_call "Ets" "erlps__delete__1" [arg_5])
  in let
    arg_9 =
      case g_0 of
        (ErlangTuple arr_12) | (DM.Just field_11) <-
                                 ((arr_12 DA.!! 3)) ->
          field_11
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in (BIF.do_remote_fun_call "Ets" "erlps__delete__1" [arg_9])
erlps__delete__1 [arg_13] = (EXC.function_clause unit)
erlps__delete__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__info__1 :: ErlangFun
erlps__info__1 [g_0] =
  let   
    vt_4 =
      case g_0 of
        (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 1)) ->
          field_2
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    et_8 =
      case g_0 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    nt_12 =
      case g_0 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 3)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_13 =
      case g_0 of
        (ErlangTuple arr_16) | (DM.Just field_15) <-
                                 ((arr_16 DA.!! 4)) ->
          field_15
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    cyclicity_17 =
      case case_13 of
        (ErlangAtom "true") -> (ErlangAtom "cyclic")
        (ErlangAtom "false") -> (ErlangAtom "acyclic")
        something_else -> (EXC.case_clause something_else)
  in let
    protection_20 =
      (BIF.do_remote_fun_call "Ets" "erlps__info__2"
         [vt_4, (ErlangAtom "protection")])
  in let
    lop_22 =
      (BIF.do_remote_fun_call "Ets" "erlps__info__2"
         [vt_4, (ErlangAtom "memory")])
  in let
    rop_25 =
      (BIF.do_remote_fun_call "Ets" "erlps__info__2"
         [et_8, (ErlangAtom "memory")])
  in let lop_21 = (BIF.erlang__op_plus [lop_22, rop_25])
  in let
    rop_28 =
      (BIF.do_remote_fun_call "Ets" "erlps__info__2"
         [nt_12, (ErlangAtom "memory")])
  in let memory_31 = (BIF.erlang__op_plus [lop_21, rop_28])
  in let
    head_32 = (ErlangTuple [(ErlangAtom "cyclicity"), cyclicity_17])
  in let head_36 = (ErlangTuple [(ErlangAtom "memory"), memory_31])
  in let
    head_40 =
      (ErlangTuple [(ErlangAtom "protection"), protection_20])
  in
    (ErlangCons head_32
       (ErlangCons head_36 (ErlangCons head_40 ErlangEmptyList)))
erlps__info__1 [arg_44] = (EXC.function_clause unit)
erlps__info__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_vertex__1 :: ErlangFun
erlps__add_vertex__1 [g_0] =
  let    tup_el_2 = (erlps__new_vertex_id__1 [g_0])
  in let arg_1 = (ErlangTuple [tup_el_2, ErlangEmptyList])
  in (erlps__do_add_vertex__2 [arg_1, g_0])
erlps__add_vertex__1 [arg_6] = (EXC.function_clause unit)
erlps__add_vertex__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_vertex__2 :: ErlangFun
erlps__add_vertex__2 [g_0, v_1] =
  let arg_2 = (ErlangTuple [v_1, ErlangEmptyList])
  in (erlps__do_add_vertex__2 [arg_2, g_0])
erlps__add_vertex__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__add_vertex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_vertex__3 :: ErlangFun
erlps__add_vertex__3 [g_0, v_1, d_2] =
  let arg_3 = (ErlangTuple [v_1, d_2])
  in (erlps__do_add_vertex__2 [arg_3, g_0])
erlps__add_vertex__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__add_vertex__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_vertex__2 :: ErlangFun
erlps__del_vertex__2 [g_0, v_1] =
  (erlps__do_del_vertex__2 [v_1, g_0])
erlps__del_vertex__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__del_vertex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_vertices__2 :: ErlangFun
erlps__del_vertices__2 [g_0, vs_1] =
  (erlps__do_del_vertices__2 [vs_1, g_0])
erlps__del_vertices__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__del_vertices__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vertex__2 :: ErlangFun
erlps__vertex__2 [g_0, v_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 1)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, v_1])
  in
    case case_2 of
      (ErlangEmptyList) -> (ErlangAtom "false")
      (ErlangCons vertex_8 (ErlangEmptyList)) -> vertex_8
      something_else -> (EXC.case_clause something_else)
erlps__vertex__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__vertex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__no_vertices__1 :: ErlangFun
erlps__no_vertices__1 [g_0] =
  let
    arg_1 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in
    (BIF.do_remote_fun_call "Ets" "erlps__info__2"
       [arg_1, (ErlangAtom "size")])
erlps__no_vertices__1 [arg_6] = (EXC.function_clause unit)
erlps__no_vertices__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vertices__1 :: ErlangFun
erlps__vertices__1 [g_0] =
  let   
    arg_1 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 1)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    tup_el_7 = (ErlangTuple [(ErlangAtom "$1"), (ErlangAtom "_")])
  in let
    head_6 =
      (ErlangTuple
         [tup_el_7, ErlangEmptyList,
          (ErlangCons (ErlangAtom "$1") ErlangEmptyList)])
  in
    (BIF.do_remote_fun_call "Ets" "erlps__select__2"
       [arg_1, (ErlangCons head_6 ErlangEmptyList)])
erlps__vertices__1 [arg_15] = (EXC.function_clause unit)
erlps__vertices__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__source_vertices__1 :: ErlangFun
erlps__source_vertices__1 [g_0] =
  (erlps__collect_vertices__2 [g_0, (ErlangAtom "in")])
erlps__source_vertices__1 [arg_3] = (EXC.function_clause unit)
erlps__source_vertices__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sink_vertices__1 :: ErlangFun
erlps__sink_vertices__1 [g_0] =
  (erlps__collect_vertices__2 [g_0, (ErlangAtom "out")])
erlps__sink_vertices__1 [arg_3] = (EXC.function_clause unit)
erlps__sink_vertices__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__in_degree__2 :: ErlangFun
erlps__in_degree__2 [g_0, v_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_7 = (ErlangTuple [(ErlangAtom "in"), v_1])
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, arg_7])
  in (BIF.erlang__length__1 [arg_2])
erlps__in_degree__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__in_degree__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__in_neighbours__2 :: ErlangFun
erlps__in_neighbours__2 [g_0, v_1] =
  let   
    et_5 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    nt_9 =
      case g_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 3)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_12 = (ErlangTuple [(ErlangAtom "in"), v_1])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [nt_9, arg_12])
  in
    (erlps__collect_elems__3
       [arg_10, et_5, (ErlangInt (DBI.fromInt 2))])
erlps__in_neighbours__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__in_neighbours__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__in_edges__2 :: ErlangFun
erlps__in_edges__2 [g_0, v_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_7 = (ErlangTuple [(ErlangAtom "in"), v_1])
  in let
    lc_src_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, arg_7])
  in
    (flmap
       (\ lc_11 ->
          case lc_11 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "in"), _]), e_10]) ->
              (ErlangCons e_10 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_2)
erlps__in_edges__2 [arg_13, arg_14] = (EXC.function_clause unit)
erlps__in_edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__out_degree__2 :: ErlangFun
erlps__out_degree__2 [g_0, v_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_7 = (ErlangTuple [(ErlangAtom "out"), v_1])
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, arg_7])
  in (BIF.erlang__length__1 [arg_2])
erlps__out_degree__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__out_degree__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__out_neighbours__2 :: ErlangFun
erlps__out_neighbours__2 [g_0, v_1] =
  let   
    et_5 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    nt_9 =
      case g_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 3)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_12 = (ErlangTuple [(ErlangAtom "out"), v_1])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [nt_9, arg_12])
  in
    (erlps__collect_elems__3
       [arg_10, et_5, (ErlangInt (DBI.fromInt 3))])
erlps__out_neighbours__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__out_neighbours__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__out_edges__2 :: ErlangFun
erlps__out_edges__2 [g_0, v_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_7 = (ErlangTuple [(ErlangAtom "out"), v_1])
  in let
    lc_src_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, arg_7])
  in
    (flmap
       (\ lc_11 ->
          case lc_11 of
            (ErlangTuple [(ErlangTuple [(ErlangAtom "out"), _]), e_10]) ->
              (ErlangCons e_10 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_2)
erlps__out_edges__2 [arg_13, arg_14] = (EXC.function_clause unit)
erlps__out_edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_edge__3 :: ErlangFun
erlps__add_edge__3 [g_0, v1_1, v2_2] =
  let    tup_el_4 = (erlps__new_edge_id__1 [g_0])
  in let
    arg_3 = (ErlangTuple [tup_el_4, v1_1, v2_2, ErlangEmptyList])
  in (erlps__do_add_edge__2 [arg_3, g_0])
erlps__add_edge__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__add_edge__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_edge__4 :: ErlangFun
erlps__add_edge__4 [g_0, v1_1, v2_2, d_3] =
  let    tup_el_5 = (erlps__new_edge_id__1 [g_0])
  in let arg_4 = (ErlangTuple [tup_el_5, v1_1, v2_2, d_3])
  in (erlps__do_add_edge__2 [arg_4, g_0])
erlps__add_edge__4 [arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__add_edge__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_edge__5 :: ErlangFun
erlps__add_edge__5 [g_0, e_1, v1_2, v2_3, d_4] =
  let arg_5 = (ErlangTuple [e_1, v1_2, v2_3, d_4])
  in (erlps__do_add_edge__2 [arg_5, g_0])
erlps__add_edge__5 [arg_11, arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__add_edge__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_edge__2 :: ErlangFun
erlps__del_edge__2 [g_0, e_1] =
  (erlps__do_del_edges__2 [(ErlangCons e_1 ErlangEmptyList), g_0])
erlps__del_edge__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__del_edge__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_edges__2 :: ErlangFun
erlps__del_edges__2 [g_0, es_1] =
  (erlps__do_del_edges__2 [es_1, g_0])
erlps__del_edges__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__del_edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__no_edges__1 :: ErlangFun
erlps__no_edges__1 [g_0] =
  let
    arg_1 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in
    (BIF.do_remote_fun_call "Ets" "erlps__info__2"
       [arg_1, (ErlangAtom "size")])
erlps__no_edges__1 [arg_6] = (EXC.function_clause unit)
erlps__no_edges__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__edges__1 :: ErlangFun
erlps__edges__1 [g_0] =
  let   
    arg_1 =
      case g_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 2)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    tup_el_7 =
      (ErlangTuple
         [(ErlangAtom "$1"), (ErlangAtom "_"), (ErlangAtom "_"),
          (ErlangAtom "_")])
  in let
    head_6 =
      (ErlangTuple
         [tup_el_7, ErlangEmptyList,
          (ErlangCons (ErlangAtom "$1") ErlangEmptyList)])
  in
    (BIF.do_remote_fun_call "Ets" "erlps__select__2"
       [arg_1, (ErlangCons head_6 ErlangEmptyList)])
erlps__edges__1 [arg_17] = (EXC.function_clause unit)
erlps__edges__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__edges__2 :: ErlangFun
erlps__edges__2 [g_0, v_1] =
  let   
    arg_2 =
      case g_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 3)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let tup_el_9 = (ErlangTuple [(ErlangAtom "out"), v_1])
  in let tup_el_8 = (ErlangTuple [tup_el_9, (ErlangAtom "$1")])
  in let
    head_7 =
      (ErlangTuple
         [tup_el_8, ErlangEmptyList,
          (ErlangCons (ErlangAtom "$1") ErlangEmptyList)])
  in let tup_el_20 = (ErlangTuple [(ErlangAtom "in"), v_1])
  in let tup_el_19 = (ErlangTuple [tup_el_20, (ErlangAtom "$1")])
  in let
    head_18 =
      (ErlangTuple
         [tup_el_19, ErlangEmptyList,
          (ErlangCons (ErlangAtom "$1") ErlangEmptyList)])
  in
    (BIF.do_remote_fun_call "Ets" "erlps__select__2"
       [arg_2,
        (ErlangCons head_7 (ErlangCons head_18 ErlangEmptyList))])
erlps__edges__2 [arg_29, arg_30] = (EXC.function_clause unit)
erlps__edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__edge__2 :: ErlangFun
erlps__edge__2 [g_0, e_1] =
  let   
    arg_3 =
      case g_0 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, e_1])
  in
    case case_2 of
      (ErlangEmptyList) -> (ErlangAtom "false")
      (ErlangCons edge_8 (ErlangEmptyList)) -> edge_8
      something_else -> (EXC.case_clause something_else)
erlps__edge__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__edge__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_edge_id__1 :: ErlangFun
erlps__new_edge_id__1 [g_0] =
  let   
    nt_4 =
      case g_0 of
        (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 3)) ->
          field_2
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    match_expr_8 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2"
         [nt_4, (ErlangAtom "$eid")])
  in
    case match_expr_8 of
      (ErlangCons (ErlangTuple [(ErlangAtom "$eid"),
                                k_7]) (ErlangEmptyList)) ->
        let
          match_expr_11 =
            (BIF.do_remote_fun_call "Ets" "erlps__delete__2"
               [nt_4, (ErlangAtom "$eid")])
        in
          case match_expr_11 of
            (ErlangAtom "true") ->
              let   
                tup_el_15 =
                  (BIF.erlang__op_plus [k_7, (ErlangInt (DBI.fromInt 1))])
              in let arg_13 = (ErlangTuple [(ErlangAtom "$eid"), tup_el_15])
              in let
                match_expr_18 =
                  (BIF.do_remote_fun_call "Ets" "erlps__insert__2"
                     [nt_4, arg_13])
              in
                case match_expr_18 of
                  (ErlangAtom "true") -> (ErlangCons (ErlangAtom "$e") k_7)
                  _ -> (EXC.badmatch match_expr_18)
            _ -> (EXC.badmatch match_expr_11)
      _ -> (EXC.badmatch match_expr_8)
erlps__new_edge_id__1 [arg_21] = (EXC.function_clause unit)
erlps__new_edge_id__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__new_vertex_id__1 :: ErlangFun
erlps__new_vertex_id__1 [g_0] =
  let   
    nt_4 =
      case g_0 of
        (ErlangTuple arr_3) | (DM.Just field_2) <- ((arr_3 DA.!! 3)) ->
          field_2
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    match_expr_8 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2"
         [nt_4, (ErlangAtom "$vid")])
  in
    case match_expr_8 of
      (ErlangCons (ErlangTuple [(ErlangAtom "$vid"),
                                k_7]) (ErlangEmptyList)) ->
        let
          match_expr_11 =
            (BIF.do_remote_fun_call "Ets" "erlps__delete__2"
               [nt_4, (ErlangAtom "$vid")])
        in
          case match_expr_11 of
            (ErlangAtom "true") ->
              let   
                tup_el_15 =
                  (BIF.erlang__op_plus [k_7, (ErlangInt (DBI.fromInt 1))])
              in let arg_13 = (ErlangTuple [(ErlangAtom "$vid"), tup_el_15])
              in let
                match_expr_18 =
                  (BIF.do_remote_fun_call "Ets" "erlps__insert__2"
                     [nt_4, arg_13])
              in
                case match_expr_18 of
                  (ErlangAtom "true") -> (ErlangCons (ErlangAtom "$v") k_7)
                  _ -> (EXC.badmatch match_expr_18)
            _ -> (EXC.badmatch match_expr_11)
      _ -> (EXC.badmatch match_expr_8)
erlps__new_vertex_id__1 [arg_21] = (EXC.function_clause unit)
erlps__new_vertex_id__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_elems__3 :: ErlangFun
erlps__collect_elems__3 [keys_0, table_1, index_2] =
  (erlps__collect_elems__4
     [keys_0, table_1, index_2, ErlangEmptyList])
erlps__collect_elems__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__collect_elems__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_elems__4 :: ErlangFun
erlps__collect_elems__4 [(ErlangCons (ErlangTuple [_,
                                                   key_0]) keys_1),
                         table_2, index_3, acc_4]
  =
  let
    head_9 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup_element__3"
         [table_2, key_0, index_3])
  in
    (erlps__collect_elems__4
       [keys_1, table_2, index_3, (ErlangCons head_9 acc_4)])
erlps__collect_elems__4 [(ErlangEmptyList), _, _, acc_0] = acc_0
erlps__collect_elems__4 [arg_1, arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__collect_elems__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_add_vertex__2 :: ErlangFun
erlps__do_add_vertex__2 [vl_2@(ErlangTuple [v_0, _label_1]), g_3]
  =
  let   
    arg_4 =
      case g_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 1)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    _ =
      (BIF.do_remote_fun_call "Ets" "erlps__insert__2" [arg_4, vl_2])
  in v_0
erlps__do_add_vertex__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__do_add_vertex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_vertices__2 :: ErlangFun
erlps__collect_vertices__2 [g_0, type_1] =
  let    vs_3 = (erlps__vertices__1 [g_0])
  in let
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [v_8, a_9] =
             let   
               arg_11 =
                 case g_0 of
                   (ErlangTuple arr_14) | (DM.Just field_13) <-
                                            ((arr_14 DA.!! 3)) ->
                     field_13
                   _ -> (EXC.badrecord (ErlangAtom "digraph"))
             in let arg_15 = (ErlangTuple [type_1, v_8])
             in let
               case_10 =
                 (BIF.do_remote_fun_call "Ets" "erlps__member__2"
                    [arg_11, arg_15])
             in
               case case_10 of
                 (ErlangAtom "true") -> a_9
                 (ErlangAtom "false") -> (ErlangCons v_8 a_9)
                 something_else -> (EXC.case_clause something_else)
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_4, ErlangEmptyList, vs_3])
erlps__collect_vertices__2 [arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__collect_vertices__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_del_vertices__2 :: ErlangFun
erlps__do_del_vertices__2 [(ErlangCons v_0 vs_1), g_2] =
  let _ = (erlps__do_del_vertex__2 [v_0, g_2])
  in (erlps__do_del_vertices__2 [vs_1, g_2])
erlps__do_del_vertices__2 [(ErlangEmptyList),
                           (ErlangTuple [(ErlangAtom "digraph"), _, _, _, _])]
  =
  (ErlangAtom "true")
erlps__do_del_vertices__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__do_del_vertices__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_del_vertex__2 :: ErlangFun
erlps__do_del_vertex__2 [v_0, g_1] =
  let   
    arg_3 =
      case g_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_7 = (ErlangTuple [(ErlangAtom "in"), v_0])
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_3, arg_7])
  in let _ = (erlps__do_del_nedges__2 [arg_2, g_1])
  in let
    arg_12 =
      case g_1 of
        (ErlangTuple arr_15) | (DM.Just field_14) <-
                                 ((arr_15 DA.!! 3)) ->
          field_14
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let arg_16 = (ErlangTuple [(ErlangAtom "out"), v_0])
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2"
         [arg_12, arg_16])
  in let _ = (erlps__do_del_nedges__2 [arg_11, g_1])
  in let
    arg_20 =
      case g_1 of
        (ErlangTuple arr_23) | (DM.Just field_22) <-
                                 ((arr_23 DA.!! 1)) ->
          field_22
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in
    (BIF.do_remote_fun_call "Ets" "erlps__delete__2" [arg_20, v_0])
erlps__do_del_vertex__2 [arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__do_del_vertex__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_del_nedges__2 :: ErlangFun
erlps__do_del_nedges__2 [(ErlangCons (ErlangTuple [_,
                                                   e_0]) ns_1),
                         g_2]
  =
  let   
    arg_4 =
      case g_2 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_3 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_4, e_0])
  in
    case case_3 of
      (ErlangCons (ErlangTuple [e_9, v1_10, v2_11,
                                _]) (ErlangEmptyList)) | (e_9 == e_0) ->
        let _ = (erlps__do_del_edge__4 [e_0, v1_10, v2_11, g_2])
        in (erlps__do_del_nedges__2 [ns_1, g_2])
      (ErlangEmptyList) -> (erlps__do_del_nedges__2 [ns_1, g_2])
      something_else -> (EXC.case_clause something_else)
erlps__do_del_nedges__2 [(ErlangEmptyList),
                         (ErlangTuple [(ErlangAtom "digraph"), _, _, _, _])]
  =
  (ErlangAtom "true")
erlps__do_del_nedges__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__do_del_nedges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_del_edges__2 :: ErlangFun
erlps__do_del_edges__2 [(ErlangCons e_0 es_1), g_2] =
  let   
    arg_4 =
      case g_2 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 2)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_3 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_4, e_0])
  in
    case case_3 of
      (ErlangCons (ErlangTuple [e_9, v1_10, v2_11,
                                _]) (ErlangEmptyList)) | (e_9 == e_0) ->
        let _ = (erlps__do_del_edge__4 [e_0, v1_10, v2_11, g_2])
        in (erlps__do_del_edges__2 [es_1, g_2])
      (ErlangEmptyList) -> (erlps__do_del_edges__2 [es_1, g_2])
      something_else -> (EXC.case_clause something_else)
erlps__do_del_edges__2 [(ErlangEmptyList),
                        (ErlangTuple [(ErlangAtom "digraph"), _, _, _, _])]
  =
  (ErlangAtom "true")
erlps__do_del_edges__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__do_del_edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_del_edge__4 :: ErlangFun
erlps__do_del_edge__4 [e_0, v1_1, v2_2, g_3] =
  let   
    arg_4 =
      case g_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 3)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let tup_el_11 = (ErlangTuple [(ErlangAtom "in"), v2_2])
  in let tup_el_10 = (ErlangTuple [tup_el_11, e_0])
  in let
    head_9 =
      (ErlangTuple
         [tup_el_10, ErlangEmptyList,
          (ErlangCons (ErlangAtom "true") ErlangEmptyList)])
  in let tup_el_22 = (ErlangTuple [(ErlangAtom "out"), v1_1])
  in let tup_el_21 = (ErlangTuple [tup_el_22, e_0])
  in let
    head_20 =
      (ErlangTuple
         [tup_el_21, ErlangEmptyList,
          (ErlangCons (ErlangAtom "true") ErlangEmptyList)])
  in let
    _ =
      (BIF.do_remote_fun_call "Ets" "erlps__select_delete__2"
         [arg_4,
          (ErlangCons head_9 (ErlangCons head_20 ErlangEmptyList))])
  in let
    arg_31 =
      case g_3 of
        (ErlangTuple arr_34) | (DM.Just field_33) <-
                                 ((arr_34 DA.!! 2)) ->
          field_33
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in
    (BIF.do_remote_fun_call "Ets" "erlps__delete__2" [arg_31, e_0])
erlps__do_del_edge__4 [arg_36, arg_37, arg_38, arg_39] =
  (EXC.function_clause unit)
erlps__do_del_edge__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rm_edges__2 :: ErlangFun
erlps__rm_edges__2 [(ErlangCons v1_0 (ErlangCons v2_1 vs_2)),
                    g_3]
  =
  let _ = (erlps__rm_edge__3 [v1_0, v2_1, g_3])
  in (erlps__rm_edges__2 [(ErlangCons v2_1 vs_2), g_3])
erlps__rm_edges__2 [_, _] = (ErlangAtom "true")
erlps__rm_edges__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__rm_edges__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rm_edge__3 :: ErlangFun
erlps__rm_edge__3 [v1_0, v2_1, g_2] =
  let es_5 = (erlps__out_edges__2 [g_2, v1_0])
  in (erlps__rm_edge_0__4 [es_5, v1_0, v2_1, g_2])
erlps__rm_edge__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__rm_edge__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rm_edge_0__4 :: ErlangFun
erlps__rm_edge_0__4 [(ErlangCons e_0 es_1), v1_2, v2_3, g_4] =
  let   
    arg_6 =
      case g_4 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 2)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_5 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [arg_6, e_0])
  in
    case case_5 of
      (ErlangCons (ErlangTuple [e_11, v1_12, v2_13,
                                _]) (ErlangEmptyList)) | (e_11 == e_0)
                                                       , (v1_12 == v1_2)
                                                       , (v2_13 == v2_3) ->
        let _ = (erlps__do_del_edge__4 [e_0, v1_2, v2_3, g_4])
        in (erlps__rm_edge_0__4 [es_1, v1_2, v2_3, g_4])
      _ -> (erlps__rm_edge_0__4 [es_1, v1_2, v2_3, g_4])
      something_else -> (EXC.case_clause something_else)
erlps__rm_edge_0__4 [(ErlangEmptyList), _, _,
                     (ErlangTuple [(ErlangAtom "digraph"), _, _, _, _])]
  =
  (ErlangAtom "ok")
erlps__rm_edge_0__4 [arg_0, arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__rm_edge_0__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_add_edge__2 :: ErlangFun
erlps__do_add_edge__2 [(ErlangTuple [e_0, v1_1, v2_2, label_3]),
                       g_4]
  =
  let   
    arg_6 =
      case g_4 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 1)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "digraph"))
  in let
    case_5 =
      (BIF.do_remote_fun_call "Ets" "erlps__member__2" [arg_6, v1_1])
  in
    case case_5 of
      (ErlangAtom "false") ->
        let tup_el_12 = (ErlangTuple [(ErlangAtom "bad_vertex"), v1_1])
        in (ErlangTuple [(ErlangAtom "error"), tup_el_12])
      (ErlangAtom "true") ->
        let   
          arg_16 =
            case g_4 of
              (ErlangTuple arr_19) | (DM.Just field_18) <-
                                       ((arr_19 DA.!! 1)) ->
                field_18
              _ -> (EXC.badrecord (ErlangAtom "digraph"))
        in let
          case_15 =
            (BIF.do_remote_fun_call "Ets" "erlps__member__2" [arg_16, v2_2])
        in
          case case_15 of
            (ErlangAtom "false") ->
              let tup_el_22 = (ErlangTuple [(ErlangAtom "bad_vertex"), v2_2])
              in (ErlangTuple [(ErlangAtom "error"), tup_el_22])
            (ErlangAtom "true") ->
              let
                case_25 = (erlps__other_edge_exists__4 [g_4, e_0, v1_1, v2_2])
              in
                case case_25 of
                  (ErlangAtom "true") ->
                    let
                      tup_el_31 =
                        (ErlangTuple
                           [(ErlangAtom "bad_edge"),
                            (ErlangCons v1_1
                               (ErlangCons v2_2 ErlangEmptyList))])
                    in (ErlangTuple [(ErlangAtom "error"), tup_el_31])
                  (ErlangAtom "false") | ((ErlangAtom "true") ==
                                            (falsifyErrors
                                               (\ _ ->
                                                  let
                                                    lop_38 =
                                                      case g_4 of
                                                        (ErlangTuple arr_41) | (DM.Just field_40) <-
                                                                                 ((arr_41 DA.!!
                                                                                     4)) ->
                                                          field_40
                                                        _ ->
                                                          (EXC.badrecord
                                                             (ErlangAtom
                                                                "digraph"))
                                                  in
                                                    (BIF.erlang__op_exactEq
                                                       [lop_38,
                                                        (ErlangAtom
                                                           "false")])))) ->
                    (erlps__acyclic_add_edge__5 [e_0, v1_1, v2_2, label_3, g_4])
                  (ErlangAtom "false") ->
                    (erlps__do_insert_edge__5 [e_0, v1_1, v2_2, label_3, g_4])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__do_add_edge__2 [arg_53, arg_54] =
  (EXC.function_clause unit)
erlps__do_add_edge__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__other_edge_exists__4 :: ErlangFun
erlps__other_edge_exists__4 [(ErlangTuple [(ErlangAtom "digraph"),
                                           _, et_0, _, _]),
                             e_1, v1_2, v2_3]
  =
  let
    case_4 =
      (BIF.do_remote_fun_call "Ets" "erlps__lookup__2" [et_0, e_1])
  in
    case case_4 of
      (ErlangCons (ErlangTuple [e_7, vert1_8, vert2_9,
                                _]) (ErlangEmptyList)) | (e_7 == e_1)
                                                       , ((ErlangAtom "true") ==
                                                            (falsifyErrors
                                                               (\ _ ->
                                                                  let
                                                                    lop_10 =
                                                                      (BIF.erlang__op_exactNeq
                                                                         [vert1_8,
                                                                          v1_2])
                                                                  in
                                                                    case lop_10 of
                                                                      (ErlangAtom "true") ->
                                                                        (ErlangAtom
                                                                           "true")
                                                                      (ErlangAtom "false") ->
                                                                        (BIF.erlang__op_exactNeq
                                                                           [vert2_9,
                                                                            v2_3])
                                                                      _ ->
                                                                        (EXC.badarg1
                                                                           lop_10)))) ->
        (ErlangAtom "true")
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__other_edge_exists__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__other_edge_exists__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_insert_edge__5 :: ErlangFun
erlps__do_insert_edge__5 [e_0, v1_1, v2_2, label_3,
                          (ErlangTuple [(ErlangAtom "digraph"), _, et_4, nt_5,
                                        _])]
  =
  let    tup_el_9 = (ErlangTuple [(ErlangAtom "out"), v1_1])
  in let head_8 = (ErlangTuple [tup_el_9, e_0])
  in let tup_el_15 = (ErlangTuple [(ErlangAtom "in"), v2_2])
  in let head_14 = (ErlangTuple [tup_el_15, e_0])
  in let
    _ =
      (BIF.do_remote_fun_call "Ets" "erlps__insert__2"
         [nt_5, (ErlangCons head_8 (ErlangCons head_14 ErlangEmptyList))])
  in let arg_21 = (ErlangTuple [e_0, v1_1, v2_2, label_3])
  in let
    _ =
      (BIF.do_remote_fun_call "Ets" "erlps__insert__2" [et_4, arg_21])
  in e_0
erlps__do_insert_edge__5 [arg_26, arg_27, arg_28, arg_29, arg_30]
  =
  (EXC.function_clause unit)
erlps__do_insert_edge__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__acyclic_add_edge__5 :: ErlangFun
erlps__acyclic_add_edge__5 [_e_0, v1_1, v2_2, _l_3, _g_4]
  | ((==) v1_1 v2_2) =
  let
    tup_el_6 =
      (ErlangTuple
         [(ErlangAtom "bad_edge"),
          (ErlangCons v1_1 (ErlangCons v2_2 ErlangEmptyList))])
  in (ErlangTuple [(ErlangAtom "error"), tup_el_6])
erlps__acyclic_add_edge__5 [e_0, v1_1, v2_2, label_3, g_4] =
  let case_5 = (erlps__get_path__3 [g_4, v2_2, v1_1])
  in
    case case_5 of
      (ErlangAtom "false") ->
        (erlps__do_insert_edge__5 [e_0, v1_1, v2_2, label_3, g_4])
      path_14 ->
        let tup_el_16 = (ErlangTuple [(ErlangAtom "bad_edge"), path_14])
        in (ErlangTuple [(ErlangAtom "error"), tup_el_16])
      something_else -> (EXC.case_clause something_else)
erlps__acyclic_add_edge__5 [arg_19, arg_20, arg_21, arg_22,
                            arg_23]
  =
  (EXC.function_clause unit)
erlps__acyclic_add_edge__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__del_path__3 :: ErlangFun
erlps__del_path__3 [g_0, v1_1, v2_2] =
  let case_3 = (erlps__get_path__3 [g_0, v1_1, v2_2])
  in
    case case_3 of
      (ErlangAtom "false") -> (ErlangAtom "true")
      path_7 ->
        let _ = (erlps__rm_edges__2 [path_7, g_0])
        in (erlps__del_path__3 [g_0, v1_1, v2_2])
      something_else -> (EXC.case_clause something_else)
erlps__del_path__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__del_path__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_cycle__2 :: ErlangFun
erlps__get_cycle__2 [g_0, v_1] =
  let    arg_3 = (erlps__out_neighbours__2 [g_0, v_1])
  in let
    case_2 =
      (erlps__one_path__8
         [arg_3, v_1, ErlangEmptyList, (ErlangCons v_1 ErlangEmptyList),
          (ErlangCons v_1 ErlangEmptyList), (ErlangInt (DBI.fromInt 2)),
          g_0, (ErlangInt (DBI.fromInt 1))])
  in
    case case_2 of
      (ErlangAtom "false") ->
        let    arg_19 = (erlps__out_neighbours__2 [g_0, v_1])
        in let case_17 = (BIF.lists__member__2 [v_1, arg_19])
        in
          case case_17 of
            (ErlangAtom "true") -> (ErlangCons v_1 ErlangEmptyList)
            (ErlangAtom "false") -> (ErlangAtom "false")
            something_else -> (EXC.case_clause something_else)
      vs_24 -> vs_24
      something_else -> (EXC.case_clause something_else)
erlps__get_cycle__2 [arg_25, arg_26] = (EXC.function_clause unit)
erlps__get_cycle__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_path__3 :: ErlangFun
erlps__get_path__3 [g_0, v1_1, v2_2] =
  let arg_3 = (erlps__out_neighbours__2 [g_0, v1_1])
  in
    (erlps__one_path__8
       [arg_3, v2_2, ErlangEmptyList, (ErlangCons v1_1 ErlangEmptyList),
        (ErlangCons v1_1 ErlangEmptyList), (ErlangInt (DBI.fromInt 1)),
        g_0, (ErlangInt (DBI.fromInt 1))])
erlps__get_path__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__get_path__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prune_short_path__2 :: ErlangFun
erlps__prune_short_path__2 [counter_0, min_1]
  | (weakLt counter_0 min_1) =
  (ErlangAtom "short")
erlps__prune_short_path__2 [_counter_0, _min_1] =
  (ErlangAtom "ok")
erlps__prune_short_path__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__prune_short_path__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__one_path__8 :: ErlangFun
erlps__one_path__8 [(ErlangCons w_0 ws_1), w_2, cont_3, xs_4,
                    ps_5, prune_6, g_7, counter_8]
  | (w_2 == w_0) =
  let case_9 = (erlps__prune_short_path__2 [counter_8, prune_6])
  in
    case case_9 of
      (ErlangAtom "short") ->
        (erlps__one_path__8
           [ws_1, w_0, cont_3, xs_4, ps_5, prune_6, g_7, counter_8])
      (ErlangAtom "ok") ->
        (BIF.do_remote_fun_call "Lists" "erlps__reverse__1"
           [(ErlangCons w_0 ps_5)])
      something_else -> (EXC.case_clause something_else)
erlps__one_path__8 [(ErlangCons v_0 vs_1), w_2, cont_3, xs_4,
                    ps_5, prune_6, g_7, counter_8]
  =
  let case_9 = (BIF.lists__member__2 [v_0, xs_4])
  in
    case case_9 of
      (ErlangAtom "true") ->
        (erlps__one_path__8
           [vs_1, w_2, cont_3, xs_4, ps_5, prune_6, g_7, counter_8])
      (ErlangAtom "false") ->
        let    arg_20 = (erlps__out_neighbours__2 [g_7, v_0])
        in let head_25 = (ErlangTuple [vs_1, ps_5])
        in let
          arg_37 =
            (BIF.erlang__op_plus [counter_8, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__one_path__8
             [arg_20, w_2, (ErlangCons head_25 cont_3), (ErlangCons v_0 xs_4),
              (ErlangCons v_0 ps_5), prune_6, g_7, arg_37])
      something_else -> (EXC.case_clause something_else)
erlps__one_path__8 [(ErlangEmptyList), w_0,
                    (ErlangCons (ErlangTuple [vs_1, ps_2]) cont_3), xs_4, _,
                    prune_5, g_6, counter_7]
  =
  let
    arg_15 =
      (BIF.erlang__op_minus [counter_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__one_path__8
       [vs_1, w_0, cont_3, xs_4, ps_2, prune_5, g_6, arg_15])
erlps__one_path__8 [(ErlangEmptyList), _, (ErlangEmptyList), _,
                    _, _, _, _counter_0]
  =
  (ErlangAtom "false")
erlps__one_path__8 [arg_1, arg_2, arg_3, arg_4, arg_5, arg_6,
                    arg_7, arg_8]
  =
  (EXC.function_clause unit)
erlps__one_path__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_short_cycle__2 :: ErlangFun
erlps__get_short_cycle__2 [g_0, v_1] =
  (erlps__get_short_path__3 [g_0, v_1, v_1])
erlps__get_short_cycle__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__get_short_cycle__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_short_path__3 :: ErlangFun
erlps__get_short_path__3 [g_0, v1_1, v2_2] =
  let    t_3 = (erlps__new__0 [])
  in let _ = (erlps__add_vertex__2 [t_3, v1_1])
  in let q_6 = (BIF.do_remote_fun_call "Queue" "erlps__new__0" [])
  in let q1_10 = (erlps__queue_out_neighbours__3 [v1_1, g_0, q_6])
  in let l_15 = (erlps__spath__4 [q1_10, g_0, v2_2, t_3])
  in let _ = (erlps__delete__1 [t_3])
  in l_15
erlps__get_short_path__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__get_short_path__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spath__4 :: ErlangFun
erlps__spath__4 [q_0, g_1, sink_2, t_3] =
  let
    case_4 = (BIF.do_remote_fun_call "Queue" "erlps__out__1" [q_0])
  in
    case case_4 of
      (ErlangTuple [(ErlangTuple [(ErlangAtom "value"), e_6]),
                    q1_7]) ->
        let match_expr_14 = (erlps__edge__2 [g_1, e_6])
        in
          case match_expr_14 of
            (ErlangTuple [_e_10, v1_11, v2_12, _label_13]) ->
              case (ErlangAtom "true") of
                _ | ((==) sink_2 v2_12) ->
                  (erlps__follow_path__3
                     [v1_11, t_3, (ErlangCons v2_12 ErlangEmptyList)])
                _ ->
                  let case_20 = (erlps__vertex__2 [t_3, v2_12])
                  in
                    case case_20 of
                      (ErlangAtom "false") ->
                        let    _ = (erlps__add_vertex__2 [t_3, v2_12])
                        in let _ = (erlps__add_edge__3 [t_3, v2_12, v1_11])
                        in let
                          nq_31 =
                            (erlps__queue_out_neighbours__3 [v2_12, g_1, q1_7])
                        in (erlps__spath__4 [nq_31, g_1, sink_2, t_3])
                      _v_36 -> (erlps__spath__4 [q1_7, g_1, sink_2, t_3])
                      something_else -> (EXC.case_clause something_else)
                _ -> (EXC.if_clause unit)
            _ -> (EXC.badmatch match_expr_14)
      (ErlangTuple [(ErlangAtom "empty"), _q1_41]) ->
        (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__spath__4 [arg_42, arg_43, arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__spath__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__follow_path__3 :: ErlangFun
erlps__follow_path__3 [v_0, t_1, p_2] =
  let case_6 = (erlps__out_neighbours__2 [t_1, v_0])
  in
    case case_6 of
      (ErlangCons n_9 (ErlangEmptyList)) ->
        (erlps__follow_path__3 [n_9, t_1, (ErlangCons v_0 p_2)])
      (ErlangEmptyList) -> (ErlangCons v_0 p_2)
      something_else -> (EXC.case_clause something_else)
erlps__follow_path__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__follow_path__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__queue_out_neighbours__3 :: ErlangFun
erlps__queue_out_neighbours__3 [v_0, g_1, q0_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [e_7, q_8] =
             (BIF.do_remote_fun_call "Queue" "erlps__in__2" [e_7, q_8])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let arg_12 = (erlps__out_edges__2 [g_1, v_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, q0_2, arg_12])
erlps__queue_out_neighbours__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__queue_out_neighbours__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)