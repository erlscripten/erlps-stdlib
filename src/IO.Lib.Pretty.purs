module Io.Lib.Pretty(erlps__print__1, erlps__print__2,
                     erlps__print__3, erlps__print__4, erlps__print__5,
                     erlps__print__6, erlps__intermediate__6,
                     erlps__write__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__print__1 :: ErlangFun
erlps__print__1 [term_0] =
  let arg_4 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__4
       [term_0, (ErlangInt (DBI.fromInt 1)),
        (ErlangInt (DBI.fromInt 80)), arg_4])
erlps__print__1 [arg_6] = (EXC.function_clause unit)
erlps__print__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__2 :: ErlangFun
erlps__print__2 [term_0, options_1] | (isEList options_1) =
  let   
    col_5 =
      (erlps__get_option__3
         [(ErlangAtom "column"), options_1, (ErlangInt (DBI.fromInt 1))])
  in let
    ll_9 =
      (erlps__get_option__3
         [(ErlangAtom "line_length"), options_1,
          (ErlangInt (DBI.fromInt 80))])
  in let
    arg_12 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    d_14 =
      (erlps__get_option__3 [(ErlangAtom "depth"), options_1, arg_12])
  in let
    arg_17 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    m_19 =
      (erlps__get_option__3
         [(ErlangAtom "line_max_chars"), options_1, arg_17])
  in let
    arg_22 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    t_24 =
      (erlps__get_option__3
         [(ErlangAtom "chars_limit"), options_1, arg_22])
  in let
    recdeffun_28 =
      (erlps__get_option__3
         [(ErlangAtom "record_print_fun"), options_1,
          (ErlangAtom "no_fun")])
  in let
    arg_31 =
      (BIF.do_remote_fun_call "Epp" "erlps__default_encoding__0" [])
  in let
    encoding_32 =
      (erlps__get_option__3
         [(ErlangAtom "encoding"), options_1, arg_31])
  in let
    strings_36 =
      (erlps__get_option__3
         [(ErlangAtom "strings"), options_1, (ErlangAtom "true")])
  in
    (erlps__print__9
       [term_0, col_5, ll_9, d_14, m_19, t_24, recdeffun_28,
        encoding_32, strings_36])
erlps__print__2 [term_0, recdeffun_1] =
  let arg_3 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in (erlps__print__3 [term_0, arg_3, recdeffun_1])
erlps__print__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__print__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__3 :: ErlangFun
erlps__print__3 [term_0, depth_1, recdeffun_2] =
  (erlps__print__5
     [term_0, (ErlangInt (DBI.fromInt 1)),
      (ErlangInt (DBI.fromInt 80)), depth_1, recdeffun_2])
erlps__print__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__print__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__4 :: ErlangFun
erlps__print__4 [term_0, col_1, ll_2, d_3] =
  let    _m_10 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let _t_13 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__9
       [term_0, col_1, ll_2, d_3, _m_10, _t_13, (ErlangAtom "no_fun"),
        (ErlangAtom "latin1"), (ErlangAtom "true")])
erlps__print__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__print__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__5 :: ErlangFun
erlps__print__5 [term_0, col_1, ll_2, d_3, recdeffun_4] =
  let _m_11 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__6 [term_0, col_1, ll_2, d_3, _m_11, recdeffun_4])
erlps__print__5 [arg_13, arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__print__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__6 :: ErlangFun
erlps__print__6 [term_0, col_1, ll_2, d_3, m_4, recdeffun_5] =
  let _t_13 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__9
       [term_0, col_1, ll_2, d_3, m_4, _t_13, recdeffun_5,
        (ErlangAtom "latin1"), (ErlangAtom "true")])
erlps__print__6 [arg_17, arg_18, arg_19, arg_20, arg_21, arg_22]
  =
  (EXC.function_clause unit)
erlps__print__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__9 :: ErlangFun
erlps__print__9 [_, _, _, (ErlangInt num_0), _m_1, _t_2, _rf_3,
                 _enc_4, _str_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (make_string "...")
erlps__print__9 [_, _, _, _d_0, _m_1, (ErlangInt num_2), _rf_3,
                 _enc_4, _str_5]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0))) =
  (make_string "...")
erlps__print__9 [term_0, col_1, ll_2, d_3, m_4, t_5, recdeffun_6,
                 enc_7, str_8]
  | (weakLeq col_1 (ErlangInt (DBI.fromInt 0))) =
  (erlps__print__9
     [term_0, (ErlangInt (DBI.fromInt 1)), ll_2, d_3, m_4, t_5,
      recdeffun_6, enc_7, str_8])
erlps__print__9 [atom_0, _col_1, _ll_2, _d_3, _m_4, _t_5, _rf_6,
                 enc_7, _str_8]
  | (isEAtom atom_0) =
  (erlps__write_atom__2 [atom_0, enc_7])
erlps__print__9 [term_0, col_1, ll_2, d_3, m0_4, t_5,
                 recdeffun_6, enc_7, str_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_70 = (BIF.erlang__is_tuple__1 [term_0])
             in let
               lop_69 =
                 case lop_70 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (BIF.erlang__is_list__1 [term_0])
                   _ -> (EXC.badarg1 lop_70)
             in let
               lop_68 =
                 case lop_69 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (BIF.erlang__is_map__1 [term_0])
                   _ -> (EXC.badarg1 lop_69)
             in
               case lop_68 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_bitstring__1 [term_0])
                 _ -> (EXC.badarg1 lop_68)))) =
  let   
    case_9 =
      (BIF.erlang__op_lesser [t_5, (ErlangInt (DBI.fromInt 0))])
  in let
    if_24 =
      case case_9 of
        (ErlangAtom "true") ->
          (erlps__print_length__6
             [term_0, d_3, t_5, recdeffun_6, enc_7, str_8])
        (ErlangAtom "false") ->
          (erlps__intermediate__6
             [term_0, d_3, t_5, recdeffun_6, enc_7, str_8])
        something_else -> (EXC.case_clause something_else)
  in
    case if_24 of
      (ErlangTuple [_, len_25, _dots_26, _]) ->
        let m_30 = (erlps__max_cs__2 [m0_4, len_25])
        in
          case (ErlangAtom "true") of
            _ | ((==) ll_2 (ErlangInt (DBI.fromInt 0))) ->
              (erlps__write__1 [if_24])
            _ | ((ErlangAtom "true") ==
                   (falsifyErrors
                      (\ _ ->
                         let    rop_34 = (BIF.erlang__op_minus [ll_2, col_1])
                         in let
                           lop_32 = (BIF.erlang__op_lesser [len_25, rop_34])
                         in
                           case lop_32 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_lesserEq [len_25, m_30])
                             _ -> (EXC.badarg1 lop_32)))) ->
              (erlps__write__1 [if_24])
            _ ->
              let   
                head_41 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
              in let
                arg_46 =
                  (ErlangFun 1
                     let
                       lambda_47 [i_49] =
                         (erlps__cind__7
                            [if_24, col_1, ll_2, m_30, i_49,
                             (ErlangInt (DBI.fromInt 0)),
                             (ErlangInt (DBI.fromInt 0))])
                       lambda_47 [arg_48] = (EXC.function_clause unit)
                       lambda_47 args =
                         (EXC.badarity (ErlangFun 1 lambda_47) args)
                     in lambda_47)
              in let
                tind_58 =
                  (erlps__while_fail__3
                     [(ErlangCons head_41
                         (ErlangCons (ErlangInt (DBI.fromInt 4))
                            ErlangEmptyList)),
                      arg_46, (ErlangInt (DBI.fromInt 1))])
              in let arg_64 = (erlps__indent__1 [col_1])
              in
                (erlps__pp__8
                   [if_24, col_1, ll_2, m_30, tind_58, arg_64,
                    (ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 0))])
            _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch if_24)
erlps__print__9 [term_0, _col_1, _ll_2, _d_3, _m_4, _t_5, _rf_6,
                 _enc_7, _str_8]
  =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [term_0])
erlps__print__9 [arg_10, arg_11, arg_12, arg_13, arg_14, arg_15,
                 arg_16, arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__print__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__max_cs__2 :: ErlangFun
erlps__max_cs__2 [m_0, len_1]
  | (weakLt m_0 (ErlangInt (DBI.fromInt 0))) =
  len_1
erlps__max_cs__2 [m_0, _len_1] = m_0
erlps__max_cs__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__max_cs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp__8 :: ErlangFun
erlps__pp__8 [if_2@(ErlangTuple [_s_0, len_1, _, _]), col_3,
              ll_4, m_5, _tind_6, _ind_7, ld_8, w_9]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_14 = (BIF.erlang__op_minus [ll_4, col_3])
             in let rop_13 = (BIF.erlang__op_minus [lop_14, ld_8])
             in let lop_11 = (BIF.erlang__op_lesser [len_1, rop_13])
             in
               case lop_11 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_19 = (BIF.erlang__op_plus [len_1, w_9])
                   in let lop_18 = (BIF.erlang__op_plus [lop_19, ld_8])
                   in (BIF.erlang__op_lesserEq [lop_18, m_5])
                 _ -> (EXC.badarg1 lop_11)))) =
  (erlps__write__1 [if_2])
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "list"),
                                          l_0]),
                            _len_1, _, _]),
              col_2, ll_3, m_4, tind_5, ind_6, ld_7, w_8]
  =
  let   
    arg_13 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_19 = (erlps__indent__2 [(ErlangInt (DBI.fromInt 1)), ind_6])
  in let
    arg_24 = (BIF.erlang__op_plus [w_8, (ErlangInt (DBI.fromInt 1))])
  in let
    head_11 =
      (erlps__pp_list__9
         [l_0, arg_13, ll_3, m_4, tind_5, arg_19, ld_7,
          (ErlangInt (DBI.fromInt 124)), arg_24])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 91))
       (ErlangCons head_11
          (ErlangCons (ErlangInt (DBI.fromInt 93)) ErlangEmptyList)))
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                          (ErlangAtom "true"), l_0]),
                            _len_1, _, _]),
              col_2, ll_3, m_4, tind_5, ind_6, ld_7, w_8]
  =
  let   
    arg_19 = (BIF.erlang__op_plus [w_8, (ErlangInt (DBI.fromInt 1))])
  in let
    head_11 =
      (erlps__pp_tag_tuple__8
         [l_0, col_2, ll_3, m_4, tind_5, ind_6, ld_7, arg_19])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 123))
       (ErlangCons head_11
          (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList)))
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                          (ErlangAtom "false"), l_0]),
                            _len_1, _, _]),
              col_2, ll_3, m_4, tind_5, ind_6, ld_7, w_8]
  =
  let   
    arg_13 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_19 = (erlps__indent__2 [(ErlangInt (DBI.fromInt 1)), ind_6])
  in let
    arg_24 = (BIF.erlang__op_plus [w_8, (ErlangInt (DBI.fromInt 1))])
  in let
    head_11 =
      (erlps__pp_list__9
         [l_0, arg_13, ll_3, m_4, tind_5, arg_19, ld_7,
          (ErlangInt (DBI.fromInt 44)), arg_24])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 123))
       (ErlangCons head_11
          (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList)))
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map"),
                                          pairs_0]),
                            _len_1, _, _]),
              col_2, ll_3, m_4, tind_5, ind_6, ld_7, w_8]
  =
  let   
    arg_15 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_21 = (erlps__indent__2 [(ErlangInt (DBI.fromInt 2)), ind_6])
  in let
    arg_25 = (BIF.erlang__op_plus [w_8, (ErlangInt (DBI.fromInt 1))])
  in let
    head_13 =
      (erlps__pp_map__8
         [pairs_0, arg_15, ll_3, m_4, tind_5, arg_21, ld_7, arg_25])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 35))
       (ErlangCons (ErlangInt (DBI.fromInt 123))
          (ErlangCons head_13
             (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList))))
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                          (ErlangCons (ErlangTuple [name_0,
                                                                    nlen_1]) l_2)]),
                            _len_3, _, _]),
              col_4, ll_5, m_6, tind_7, ind_8, ld_9, w_10]
  =
  let    lop_25 = (BIF.erlang__op_plus [w_10, nlen_1])
  in let
    arg_24 =
      (BIF.erlang__op_plus [lop_25, (ErlangInt (DBI.fromInt 1))])
  in let
    head_15 =
      (erlps__pp_record__9
         [l_2, nlen_1, col_4, ll_5, m_6, tind_7, ind_8, ld_9, arg_24])
  in
    (ErlangCons name_0
       (ErlangCons (ErlangInt (DBI.fromInt 123))
          (ErlangCons head_15
             (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList))))
erlps__pp__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "bin"),
                                          s_0]),
                            _len_1, _, _]),
              col_2, ll_3, m_4, _tind_5, ind_6, ld_7, w_8]
  =
  let   
    arg_10 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_15 = (erlps__indent__2 [(ErlangInt (DBI.fromInt 2)), ind_6])
  in
    (erlps__pp_binary__7 [s_0, arg_10, ll_3, m_4, arg_15, ld_7, w_8])
erlps__pp__8 [(ErlangTuple [s_0, _len_1, _, _]), _col_2, _ll_3,
              _m_4, _tind_5, _ind_6, _ld_7, _w_8]
  =
  s_0
erlps__pp__8 [arg_9, arg_10, arg_11, arg_12, arg_13, arg_14,
              arg_15, arg_16]
  =
  (EXC.function_clause unit)
erlps__pp__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_tag_tuple__8 :: ErlangFun
erlps__pp_tag_tuple__8 [(ErlangCons (ErlangTuple [tag_0, tlen_1,
                                                  _, _]) l_2),
                        col_3, ll_4, m_5, tind_6, ind_7, ld_8, w_9]
  =
  let   
    tagind_12 =
      (BIF.erlang__op_plus [tlen_1, (ErlangInt (DBI.fromInt 2))])
  in let tcol_15 = (BIF.erlang__op_plus [col_3, tagind_12])
  in
    case (ErlangAtom "true") of
      _ | ((weakGt tind_6 (ErlangInt (DBI.fromInt 0))) &&
             (weakGt tagind_12 tind_6)) ->
        let    col1_19 = (BIF.erlang__op_plus [col_3, tind_6])
        in let indent_22 = (erlps__indent__2 [tind_6, ind_7])
        in let arg_34 = (BIF.erlang__op_plus [w_9, tlen_1])
        in let
          tail_24 =
            (erlps__pp_tail__10
               [l_2, col1_19, tcol_15, ll_4, m_5, tind_6, indent_22, ld_8,
                (ErlangInt (DBI.fromInt 44)), arg_34])
        in (ErlangCons tag_0 tail_24)
      _ ->
        let    indent_39 = (erlps__indent__2 [tagind_12, ind_7])
        in let lop_53 = (BIF.erlang__op_plus [w_9, tlen_1])
        in let
          arg_52 =
            (BIF.erlang__op_plus [lop_53, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_43 =
            (erlps__pp_list__9
               [l_2, tcol_15, ll_4, m_5, tind_6, indent_39, ld_8,
                (ErlangInt (DBI.fromInt 44)), arg_52])
        in
          (ErlangCons tag_0
             (ErlangCons (ErlangInt (DBI.fromInt 44)) tail_43))
      _ -> (EXC.if_clause unit)
erlps__pp_tag_tuple__8 [arg_57, arg_58, arg_59, arg_60, arg_61,
                        arg_62, arg_63, arg_64]
  =
  (EXC.function_clause unit)
erlps__pp_tag_tuple__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_map__8 :: ErlangFun
erlps__pp_map__8 [(ErlangEmptyList), _col_0, _ll_1, _m_2,
                  _tind_3, _ind_4, _ld_5, _w_6]
  =
  (make_string "")
erlps__pp_map__8 [(ErlangTuple [(ErlangAtom "dots"), _, _, _]),
                  _col_0, _ll_1, _m_2, _tind_3, _ind_4, _ld_5, _w_6]
  =
  (make_string "...")
erlps__pp_map__8 [(ErlangCons p_0 ps_1), col_2, ll_3, m_4,
                  tind_5, ind_6, ld_7, w_8]
  =
  let    arg_15 = (erlps__last_depth__2 [ps_1, ld_7])
  in let
    match_expr_21 =
      (erlps__pp_pair__8
         [p_0, col_2, ll_3, m_4, tind_5, ind_6, arg_15, w_8])
  in
    case match_expr_21 of
      (ErlangTuple [ps_19, pw_20]) ->
        let    arg_26 = (BIF.erlang__op_plus [col_2, pw_20])
        in let
          tail_23 =
            (erlps__pp_pairs_tail__9
               [ps_1, col_2, arg_26, ll_3, m_4, tind_5, ind_6, ld_7, pw_20])
        in (ErlangCons ps_19 tail_23)
      _ -> (EXC.badmatch match_expr_21)
erlps__pp_map__8 [arg_35, arg_36, arg_37, arg_38, arg_39, arg_40,
                  arg_41, arg_42]
  =
  (EXC.function_clause unit)
erlps__pp_map__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_pairs_tail__9 :: ErlangFun
erlps__pp_pairs_tail__9 [(ErlangEmptyList), _col0_0, _col_1,
                         _ll_2, _m_3, _tind_4, _ind_5, _ld_6, _w_7]
  =
  (make_string "")
erlps__pp_pairs_tail__9 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                       _]),
                         _col0_0, _col_1, _m_2, _ll_3, _tind_4, _ind_5, _ld_6,
                         _w_7]
  =
  (make_string ",...")
erlps__pp_pairs_tail__9 [(ErlangCons p_1@(ErlangTuple [_, len_0,
                                                       _, _]) ps_2),
                         col0_3, col_4, ll_5, m_6, tind_7, ind_8, ld_9, w_10]
  =
  let    ld1_13 = (erlps__last_depth__2 [ps_2, ld_9])
  in let
    elen_16 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_20 =
                       (BIF.erlang__op_exactEq
                          [ld1_13, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_23 =
                               (BIF.erlang__op_plus
                                  [elen_16, (ErlangInt (DBI.fromInt 1))])
                           in let rop_26 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_23, rop_26])
                         _ -> (EXC.badarg1 lop_20)
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_30 = (BIF.erlang__op_plus [w_10, elen_16])
                           in let
                             lop_29 =
                               (BIF.erlang__op_plus
                                  [lop_30, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_29, m_6])
                         _ -> (EXC.badarg1 lop_19)
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             arg_40 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), p_1])
                           in let
                             arg_38 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 2)), arg_40])
                           in let
                             arg_36 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), arg_38])
                           in let lop_35 = (BIF.erlang__is_list__1 [arg_36])
                           in
                             case lop_35 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   arg_47 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 1)), p_1])
                                 in let
                                   arg_45 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 3)), arg_47])
                                 in let
                                   arg_43 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 1)), arg_45])
                                 in (BIF.erlang__is_list__1 [arg_43])
                               _ -> (EXC.badarg1 lop_35)
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_52 =
                             (BIF.erlang__op_greater
                                [ld1_13, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_51 =
                             case lop_52 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_57 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_56 =
                                     (BIF.erlang__op_minus [lop_57, ld1_13])
                                 in (BIF.erlang__op_lesser [elen_16, rop_56])
                               _ -> (EXC.badarg1 lop_52)
                         in let
                           lop_50 =
                             case lop_51 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_62 =
                                     (BIF.erlang__op_plus [w_10, elen_16])
                                 in let
                                   lop_61 =
                                     (BIF.erlang__op_plus [lop_62, ld1_13])
                                 in (BIF.erlang__op_lesserEq [lop_61, m_6])
                               _ -> (EXC.badarg1 lop_51)
                         in
                           case lop_50 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let   
                                 arg_72 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), p_1])
                               in let
                                 arg_70 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 2)), arg_72])
                               in let
                                 arg_68 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), arg_70])
                               in let lop_67 = (BIF.erlang__is_list__1 [arg_68])
                               in
                                 case lop_67 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     let   
                                       arg_79 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 1)), p_1])
                                     in let
                                       arg_77 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 3)),
                                             arg_79])
                                     in let
                                       arg_75 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 1)),
                                             arg_77])
                                     in (BIF.erlang__is_list__1 [arg_75])
                                   _ -> (EXC.badarg1 lop_67)
                             _ -> (EXC.badarg1 lop_50)
                       _ -> (EXC.badarg1 lop_17)))) ->
        let    head_84 = (erlps__write_pair__1 [p_1])
        in let arg_89 = (BIF.erlang__op_plus [col_4, elen_16])
        in let arg_97 = (BIF.erlang__op_plus [w_10, elen_16])
        in let
          tail_86 =
            (erlps__pp_pairs_tail__9
               [ps_2, col0_3, arg_89, ll_5, m_6, tind_7, ind_8, ld_9, arg_97])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 44))
             (ErlangCons head_84 tail_86))
      _ ->
        let
          match_expr_110 =
            (erlps__pp_pair__8
               [p_1, col0_3, ll_5, m_6, tind_7, ind_8, ld1_13,
                (ErlangInt (DBI.fromInt 0))])
        in
          case match_expr_110 of
            (ErlangTuple [ps_108, pw_109]) ->
              let    arg_121 = (BIF.erlang__op_plus [col0_3, pw_109])
              in let
                tail_118 =
                  (erlps__pp_pairs_tail__9
                     [ps_2, col0_3, arg_121, ll_5, m_6, tind_7, ind_8, ld_9,
                      pw_109])
              in
                (ErlangCons (ErlangInt (DBI.fromInt 44))
                   (ErlangCons (ErlangInt (DBI.fromInt 10))
                      (ErlangCons ind_8 (ErlangCons ps_108 tail_118))))
            _ -> (EXC.badmatch match_expr_110)
      _ -> (EXC.if_clause unit)
erlps__pp_pairs_tail__9 [arg_130, arg_131, arg_132, arg_133,
                         arg_134, arg_135, arg_136, arg_137, arg_138]
  =
  (EXC.function_clause unit)
erlps__pp_pairs_tail__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_pair__8 :: ErlangFun
erlps__pp_pair__8 [pair_1@(ErlangTuple [_, len_0, _, _]), col_2,
                   ll_3, m_4, _tind_5, _ind_6, ld_7, w_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_30 = (BIF.erlang__op_minus [ll_3, col_2])
             in let rop_29 = (BIF.erlang__op_minus [lop_30, ld_7])
             in let lop_27 = (BIF.erlang__op_lesser [len_0, rop_29])
             in
               case lop_27 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_35 = (BIF.erlang__op_plus [len_0, w_8])
                   in let lop_34 = (BIF.erlang__op_plus [lop_35, ld_7])
                   in (BIF.erlang__op_lesserEq [lop_34, m_4])
                 _ -> (EXC.badarg1 lop_27)))) =
  let    tup_el_9 = (erlps__write_pair__1 [pair_1])
  in let
    tup_el_11 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let   
                       arg_17 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 1)), pair_1])
                     in let
                       arg_15 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 2)), arg_17])
                     in let
                       arg_13 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 1)), arg_15])
                     in let lop_12 = (BIF.erlang__is_list__1 [arg_13])
                     in
                       case lop_12 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             arg_24 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), pair_1])
                           in let
                             arg_22 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 3)), arg_24])
                           in let
                             arg_20 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), arg_22])
                           in (BIF.erlang__is_list__1 [arg_20])
                         _ -> (EXC.badarg1 lop_12)))) ->
          len_0
        _ -> ll_3
        _ -> (EXC.if_clause unit)
  in (ErlangTuple [tup_el_9, tup_el_11])
erlps__pp_pair__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                               k_0, v_1]),
                                 _len_2, _, _]),
                   col0_3, ll_4, m_5, tind_6, ind0_7, ld_8, w_9]
  =
  let    i_11 = (erlps__map_value_indent__1 [tind_6])
  in let ind_14 = (erlps__indent__2 [i_11, ind0_7])
  in let
    head_16 =
      (erlps__pp__8
         [k_0, col0_3, ll_4, m_5, tind_6, ind0_7, ld_8, w_9])
  in let head_26 = (make_string " =>\n")
  in let arg_31 = (BIF.erlang__op_plus [col0_3, i_11])
  in let
    tail_29 =
      (erlps__pp__8
         [v_1, arg_31, ll_4, m_5, tind_6, ind_14, ld_8,
          (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangTuple
       [(ErlangCons head_16
           (ErlangCons head_26 (ErlangCons ind_14 tail_29))),
        ll_4])
erlps__pp_pair__8 [arg_41, arg_42, arg_43, arg_44, arg_45,
                   arg_46, arg_47, arg_48]
  =
  (EXC.function_clause unit)
erlps__pp_pair__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_record__9 :: ErlangFun
erlps__pp_record__9 [(ErlangEmptyList), _nlen_0, _col_1, _ll_2,
                     _m_3, _tind_4, _ind_5, _ld_6, _w_7]
  =
  (make_string "")
erlps__pp_record__9 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                   _]),
                     _nlen_0, _col_1, _ll_2, _m_3, _tind_4, _ind_5, _ld_6, _w_7]
  =
  (make_string "...")
erlps__pp_record__9 [(ErlangCons f_0 fs_1), nlen_2, col0_3, ll_4,
                     m_5, tind_6, ind0_7, ld_8, w0_9]
  =
  let   
    nind_12 =
      (BIF.erlang__op_plus [nlen_2, (ErlangInt (DBI.fromInt 1))])
  in let
    match_expr_22 =
      (erlps__rec_indent__5 [nind_12, tind_6, col0_3, ind0_7, w0_9])
  in
    case match_expr_22 of
      (ErlangTuple [col_18, ind_19, s_20, w_21]) ->
        let    arg_29 = (erlps__last_depth__2 [fs_1, ld_8])
        in let
          match_expr_35 =
            (erlps__pp_field__8
               [f_0, col_18, ll_4, m_5, tind_6, ind_19, arg_29, w_21])
        in
          case match_expr_35 of
            (ErlangTuple [fs_33, fw_34]) ->
              let    arg_42 = (BIF.erlang__op_plus [col_18, fw_34])
              in let arg_50 = (BIF.erlang__op_plus [w_21, fw_34])
              in let
                tail_39 =
                  (erlps__pp_fields_tail__9
                     [fs_1, col_18, arg_42, ll_4, m_5, tind_6, ind_19, ld_8,
                      arg_50])
              in (ErlangCons s_20 (ErlangCons fs_33 tail_39))
            _ -> (EXC.badmatch match_expr_35)
      _ -> (EXC.badmatch match_expr_22)
erlps__pp_record__9 [arg_53, arg_54, arg_55, arg_56, arg_57,
                     arg_58, arg_59, arg_60, arg_61]
  =
  (EXC.function_clause unit)
erlps__pp_record__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_fields_tail__9 :: ErlangFun
erlps__pp_fields_tail__9 [(ErlangEmptyList), _col0_0, _col_1,
                          _ll_2, _m_3, _tind_4, _ind_5, _ld_6, _w_7]
  =
  (make_string "")
erlps__pp_fields_tail__9 [(ErlangTuple [(ErlangAtom "dots"), _,
                                        _, _]),
                          _col0_0, _col_1, _m_2, _ll_3, _tind_4, _ind_5, _ld_6,
                          _w_7]
  =
  (make_string ",...")
erlps__pp_fields_tail__9 [(ErlangCons f_1@(ErlangTuple [_, len_0,
                                                        _, _]) fs_2),
                          col0_3, col_4, ll_5, m_6, tind_7, ind_8, ld_9, w_10]
  =
  let    ld1_13 = (erlps__last_depth__2 [fs_2, ld_9])
  in let
    elen_16 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_20 =
                       (BIF.erlang__op_exactEq
                          [ld1_13, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_23 =
                               (BIF.erlang__op_plus
                                  [elen_16, (ErlangInt (DBI.fromInt 1))])
                           in let rop_26 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_23, rop_26])
                         _ -> (EXC.badarg1 lop_20)
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_30 = (BIF.erlang__op_plus [w_10, elen_16])
                           in let
                             lop_29 =
                               (BIF.erlang__op_plus
                                  [lop_30, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_29, m_6])
                         _ -> (EXC.badarg1 lop_19)
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             arg_39 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), f_1])
                           in let
                             arg_37 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 4)), arg_39])
                           in let
                             arg_35 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), arg_37])
                           in (BIF.erlang__is_list__1 [arg_35])
                         _ -> (EXC.badarg1 lop_18)
                   in
                     case lop_17 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_44 =
                             (BIF.erlang__op_greater
                                [ld1_13, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_43 =
                             case lop_44 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_49 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_48 =
                                     (BIF.erlang__op_minus [lop_49, ld1_13])
                                 in (BIF.erlang__op_lesser [elen_16, rop_48])
                               _ -> (EXC.badarg1 lop_44)
                         in let
                           lop_42 =
                             case lop_43 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_54 =
                                     (BIF.erlang__op_plus [w_10, elen_16])
                                 in let
                                   lop_53 =
                                     (BIF.erlang__op_plus [lop_54, ld1_13])
                                 in (BIF.erlang__op_lesserEq [lop_53, m_6])
                               _ -> (EXC.badarg1 lop_43)
                         in
                           case lop_42 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let   
                                 arg_63 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), f_1])
                               in let
                                 arg_61 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 4)), arg_63])
                               in let
                                 arg_59 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), arg_61])
                               in (BIF.erlang__is_list__1 [arg_59])
                             _ -> (EXC.badarg1 lop_42)
                       _ -> (EXC.badarg1 lop_17)))) ->
        let    head_68 = (erlps__write_field__1 [f_1])
        in let arg_73 = (BIF.erlang__op_plus [col_4, elen_16])
        in let arg_81 = (BIF.erlang__op_plus [w_10, elen_16])
        in let
          tail_70 =
            (erlps__pp_fields_tail__9
               [fs_2, col0_3, arg_73, ll_5, m_6, tind_7, ind_8, ld_9, arg_81])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 44))
             (ErlangCons head_68 tail_70))
      _ ->
        let
          match_expr_94 =
            (erlps__pp_field__8
               [f_1, col0_3, ll_5, m_6, tind_7, ind_8, ld1_13,
                (ErlangInt (DBI.fromInt 0))])
        in
          case match_expr_94 of
            (ErlangTuple [fs_92, fw_93]) ->
              let    arg_105 = (BIF.erlang__op_plus [col0_3, fw_93])
              in let
                tail_102 =
                  (erlps__pp_fields_tail__9
                     [fs_2, col0_3, arg_105, ll_5, m_6, tind_7, ind_8, ld_9,
                      fw_93])
              in
                (ErlangCons (ErlangInt (DBI.fromInt 44))
                   (ErlangCons (ErlangInt (DBI.fromInt 10))
                      (ErlangCons ind_8 (ErlangCons fs_92 tail_102))))
            _ -> (EXC.badmatch match_expr_94)
      _ -> (EXC.if_clause unit)
erlps__pp_fields_tail__9 [arg_114, arg_115, arg_116, arg_117,
                          arg_118, arg_119, arg_120, arg_121, arg_122]
  =
  (EXC.function_clause unit)
erlps__pp_fields_tail__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_field__8 :: ErlangFun
erlps__pp_field__8 [fl_1@(ErlangTuple [_, len_0, _, _]), col_2,
                    ll_3, m_4, _tind_5, _ind_6, ld_7, w_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_22 = (BIF.erlang__op_minus [ll_3, col_2])
             in let rop_21 = (BIF.erlang__op_minus [lop_22, ld_7])
             in let lop_19 = (BIF.erlang__op_lesser [len_0, rop_21])
             in
               case lop_19 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_27 = (BIF.erlang__op_plus [len_0, w_8])
                   in let lop_26 = (BIF.erlang__op_plus [lop_27, ld_7])
                   in (BIF.erlang__op_lesserEq [lop_26, m_4])
                 _ -> (EXC.badarg1 lop_19)))) =
  let    tup_el_9 = (erlps__write_field__1 [fl_1])
  in let
    tup_el_11 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let   
                       arg_16 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 1)), fl_1])
                     in let
                       arg_14 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 4)), arg_16])
                     in let
                       arg_12 =
                         (BIF.erlang__element__2
                            [(ErlangInt (DBI.fromInt 1)), arg_14])
                     in (BIF.erlang__is_list__1 [arg_12])))) ->
          len_0
        _ -> ll_3
        _ -> (EXC.if_clause unit)
  in (ErlangTuple [tup_el_9, tup_el_11])
erlps__pp_field__8 [(ErlangTuple [(ErlangTuple [(ErlangAtom "field"),
                                                name_0, namel_1, f_2]),
                                  _, _, _]),
                    col0_3, ll_4, m_5, tind_6, ind0_7, ld_8, w0_9]
  =
  let    arg_14 = (BIF.erlang__op_plus [w0_9, namel_1])
  in let
    match_expr_21 =
      (erlps__rec_indent__5 [namel_1, tind_6, col0_3, ind0_7, arg_14])
  in
    case match_expr_21 of
      (ErlangTuple [col_17, ind_18, s_19, w_20]) ->
        let   
          sep_24 =
            case s_19 of
              (ErlangCons (ErlangInt num_23) _) | ((ErlangInt num_23) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 10))) ->
                (make_string " =")
              _ -> (make_string " = ")
              something_else -> (EXC.case_clause something_else)
        in let
          tail_31 =
            (erlps__pp__8
               [f_2, col_17, ll_4, m_5, tind_6, ind_18, ld_8, w_20])
        in
          (ErlangTuple
             [(ErlangCons name_0
                 (ErlangCons sep_24 (ErlangCons s_19 tail_31))),
              ll_4])
      _ -> (EXC.badmatch match_expr_21)
erlps__pp_field__8 [arg_41, arg_42, arg_43, arg_44, arg_45,
                    arg_46, arg_47, arg_48]
  =
  (EXC.function_clause unit)
erlps__pp_field__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rec_indent__5 :: ErlangFun
erlps__rec_indent__5 [rind_0, tind_1, col0_2, ind0_3, w0_4] =
  let   
    lop_5 =
      (BIF.erlang__op_greater [tind_1, (ErlangInt (DBI.fromInt 0))])
  in let rop_8 = (BIF.erlang__op_greater [rind_0, tind_1])
  in let nl_11 = (BIF.erlang__op_and [lop_5, rop_8])
  in let
    dcol_13 =
      case nl_11 of
        (ErlangAtom "true") -> tind_1
        (ErlangAtom "false") -> rind_0
        something_else -> (EXC.case_clause something_else)
  in let col_16 = (BIF.erlang__op_plus [col0_2, dcol_13])
  in let ind_19 = (erlps__indent__2 [dcol_13, ind0_3])
  in let
    s_23 =
      case nl_11 of
        (ErlangAtom "true") ->
          (ErlangCons (ErlangInt (DBI.fromInt 10)) ind_19)
        (ErlangAtom "false") -> (make_string "")
        something_else -> (EXC.case_clause something_else)
  in let
    w_25 =
      case nl_11 of
        (ErlangAtom "true") -> (ErlangInt (DBI.fromInt 0))
        (ErlangAtom "false") -> w0_4
        something_else -> (EXC.case_clause something_else)
  in (ErlangTuple [col_16, ind_19, s_23, w_25])
erlps__rec_indent__5 [arg_30, arg_31, arg_32, arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__rec_indent__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_list__9 :: ErlangFun
erlps__pp_list__9 [(ErlangTuple [(ErlangAtom "dots"), _, _, _]),
                   _col0_0, _ll_1, _m_2, _tind_3, _ind_4, _ld_5, _s_6, _w_7]
  =
  (make_string "...")
erlps__pp_list__9 [(ErlangCons e_0 es_1), col0_2, ll_3, m_4,
                   tind_5, ind_6, ld_7, s_8, w_9]
  =
  let    arg_16 = (erlps__last_depth__2 [es_1, ld_7])
  in let
    match_expr_22 =
      (erlps__pp_element__8
         [e_0, col0_2, ll_3, m_4, tind_5, ind_6, arg_16, w_9])
  in
    case match_expr_22 of
      (ErlangTuple [es_20, we_21]) ->
        let    arg_27 = (BIF.erlang__op_plus [col0_2, we_21])
        in let arg_36 = (BIF.erlang__op_plus [w_9, we_21])
        in let
          tail_24 =
            (erlps__pp_tail__10
               [es_1, col0_2, arg_27, ll_3, m_4, tind_5, ind_6, ld_7, s_8,
                arg_36])
        in (ErlangCons es_20 tail_24)
      _ -> (EXC.badmatch match_expr_22)
erlps__pp_list__9 [arg_39, arg_40, arg_41, arg_42, arg_43,
                   arg_44, arg_45, arg_46, arg_47]
  =
  (EXC.function_clause unit)
erlps__pp_list__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_tail__10 :: ErlangFun
erlps__pp_tail__10 [(ErlangEmptyList), _col0_0, _col_1, _ll_2,
                    _m_3, _tind_4, _ind_5, _ld_6, _s_7, _w_8]
  =
  ErlangEmptyList
erlps__pp_tail__10 [(ErlangCons e_1@(ErlangTuple [_, len_0, _,
                                                  _]) es_2),
                    col0_3, col_4, ll_5, m_6, tind_7, ind_8, ld_9, s_10, w_11]
  =
  let    ld1_14 = (erlps__last_depth__2 [es_2, ld_9])
  in let
    elen_17 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_21 =
                       (BIF.erlang__op_exactEq
                          [ld1_14, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_20 =
                       case lop_21 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_24 =
                               (BIF.erlang__op_plus
                                  [elen_17, (ErlangInt (DBI.fromInt 1))])
                           in let rop_27 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_24, rop_27])
                         _ -> (EXC.badarg1 lop_21)
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_31 = (BIF.erlang__op_plus [w_11, elen_17])
                           in let
                             lop_30 =
                               (BIF.erlang__op_plus
                                  [lop_31, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_30, m_6])
                         _ -> (EXC.badarg1 lop_20)
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             arg_36 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), e_1])
                           in (BIF.erlang__is_list__1 [arg_36])
                         _ -> (EXC.badarg1 lop_19)
                   in
                     case lop_18 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_41 =
                             (BIF.erlang__op_greater
                                [ld1_14, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_40 =
                             case lop_41 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_46 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_45 =
                                     (BIF.erlang__op_minus [lop_46, ld1_14])
                                 in (BIF.erlang__op_lesser [elen_17, rop_45])
                               _ -> (EXC.badarg1 lop_41)
                         in let
                           lop_39 =
                             case lop_40 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_51 =
                                     (BIF.erlang__op_plus [w_11, elen_17])
                                 in let
                                   lop_50 =
                                     (BIF.erlang__op_plus [lop_51, ld1_14])
                                 in (BIF.erlang__op_lesserEq [lop_50, m_6])
                               _ -> (EXC.badarg1 lop_40)
                         in
                           case lop_39 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let
                                 arg_56 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), e_1])
                               in (BIF.erlang__is_list__1 [arg_56])
                             _ -> (EXC.badarg1 lop_39)
                       _ -> (EXC.badarg1 lop_18)))) ->
        let    head_61 = (erlps__write__1 [e_1])
        in let arg_66 = (BIF.erlang__op_plus [col_4, elen_17])
        in let arg_75 = (BIF.erlang__op_plus [w_11, elen_17])
        in let
          tail_63 =
            (erlps__pp_tail__10
               [es_2, col0_3, arg_66, ll_5, m_6, tind_7, ind_8, ld_9, s_10,
                arg_75])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 44))
             (ErlangCons head_61 tail_63))
      _ ->
        let
          match_expr_88 =
            (erlps__pp_element__8
               [e_1, col0_3, ll_5, m_6, tind_7, ind_8, ld1_14,
                (ErlangInt (DBI.fromInt 0))])
        in
          case match_expr_88 of
            (ErlangTuple [es_86, we_87]) ->
              let    arg_99 = (BIF.erlang__op_plus [col0_3, we_87])
              in let
                tail_96 =
                  (erlps__pp_tail__10
                     [es_2, col0_3, arg_99, ll_5, m_6, tind_7, ind_8, ld_9,
                      s_10, we_87])
              in
                (ErlangCons (ErlangInt (DBI.fromInt 44))
                   (ErlangCons (ErlangInt (DBI.fromInt 10))
                      (ErlangCons ind_8 (ErlangCons es_86 tail_96))))
            _ -> (EXC.badmatch match_expr_88)
      _ -> (EXC.if_clause unit)
erlps__pp_tail__10 [(ErlangTuple [(ErlangAtom "dots"), _, _, _]),
                    _col0_0, _col_1, _ll_2, _m_3, _tind_4, _ind_5, _ld_6, s_7,
                    _w_8]
  =
  let tail_10 = (make_string "...")
  in (ErlangCons s_7 tail_10)
erlps__pp_tail__10 [e_1@(ErlangTuple [_, len_0, _, _]), _col0_2,
                    col_3, ll_4, m_5, _tind_6, _ind_7, ld_8, s_9, w_10]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_16 =
                 (BIF.erlang__op_plus [len_0, (ErlangInt (DBI.fromInt 1))])
             in let lop_20 = (BIF.erlang__op_minus [ll_4, col_3])
             in let
               rop_23 =
                 (BIF.erlang__op_plus [ld_8, (ErlangInt (DBI.fromInt 1))])
             in let rop_19 = (BIF.erlang__op_minus [lop_20, rop_23])
             in let lop_15 = (BIF.erlang__op_lesser [lop_16, rop_19])
             in let
               lop_14 =
                 case lop_15 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_28 =
                         (BIF.erlang__op_plus
                            [len_0, (ErlangInt (DBI.fromInt 1))])
                     in let lop_27 = (BIF.erlang__op_plus [lop_28, w_10])
                     in let
                       rop_32 =
                         (BIF.erlang__op_plus
                            [ld_8, (ErlangInt (DBI.fromInt 1))])
                     in let lop_26 = (BIF.erlang__op_plus [lop_27, rop_32])
                     in (BIF.erlang__op_lesserEq [lop_26, m_5])
                   _ -> (EXC.badarg1 lop_15)
             in
               case lop_14 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_36 =
                       (BIF.erlang__element__2
                          [(ErlangInt (DBI.fromInt 1)), e_1])
                   in (BIF.erlang__is_list__1 [arg_36])
                 _ -> (EXC.badarg1 lop_14)))) =
  let tail_12 = (erlps__write__1 [e_1])
  in (ErlangCons s_9 tail_12)
erlps__pp_tail__10 [e_0, col0_1, _col_2, ll_3, m_4, tind_5,
                    ind_6, ld_7, s_8, _w_9]
  =
  let   
    arg_22 =
      (BIF.erlang__op_plus [ld_7, (ErlangInt (DBI.fromInt 1))])
  in let
    tail_15 =
      (erlps__pp__8
         [e_0, col0_1, ll_3, m_4, tind_5, ind_6, arg_22,
          (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangCons s_8
       (ErlangCons (ErlangInt (DBI.fromInt 10))
          (ErlangCons ind_6 tail_15)))
erlps__pp_tail__10 [arg_26, arg_27, arg_28, arg_29, arg_30,
                    arg_31, arg_32, arg_33, arg_34, arg_35]
  =
  (EXC.function_clause unit)
erlps__pp_tail__10 args =
  (EXC.badarity
     (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_element__8 :: ErlangFun
erlps__pp_element__8 [e_1@(ErlangTuple [_, len_0, _, _]), col_2,
                      ll_3, m_4, _tind_5, _ind_6, ld_7, w_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_16 = (BIF.erlang__op_minus [ll_3, col_2])
             in let rop_15 = (BIF.erlang__op_minus [lop_16, ld_7])
             in let lop_13 = (BIF.erlang__op_lesser [len_0, rop_15])
             in let
               lop_12 =
                 case lop_13 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let    lop_21 = (BIF.erlang__op_plus [len_0, w_8])
                     in let lop_20 = (BIF.erlang__op_plus [lop_21, ld_7])
                     in (BIF.erlang__op_lesserEq [lop_20, m_4])
                   _ -> (EXC.badarg1 lop_13)
             in
               case lop_12 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_26 =
                       (BIF.erlang__element__2
                          [(ErlangInt (DBI.fromInt 1)), e_1])
                   in (BIF.erlang__is_list__1 [arg_26])
                 _ -> (EXC.badarg1 lop_12)))) =
  let tup_el_9 = (erlps__write__1 [e_1])
  in (ErlangTuple [tup_el_9, len_0])
erlps__pp_element__8 [e_0, col_1, ll_2, m_3, tind_4, ind_5, ld_6,
                      w_7]
  =
  let
    tup_el_8 =
      (erlps__pp__8 [e_0, col_1, ll_2, m_3, tind_4, ind_5, ld_6, w_7])
  in (ErlangTuple [tup_el_8, ll_2])
erlps__pp_element__8 [arg_18, arg_19, arg_20, arg_21, arg_22,
                      arg_23, arg_24, arg_25]
  =
  (EXC.function_clause unit)
erlps__pp_element__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_binary__7 :: ErlangFun
erlps__pp_binary__7 [(ErlangCons lt_0 (ErlangCons lt_1 (ErlangCons s_2 (ErlangCons gt_3 (ErlangCons gt_4 (ErlangEmptyList)))))),
                     col_5, ll_6, m_7, ind_8, ld_9, w_10]
  | (lt_1 == lt_0)
  , (gt_4 == gt_3) =
  let    arg_14 = (BIF.erlang__op_minus [ll_6, col_5])
  in let
    lop_18 =
      (BIF.erlang__op_minus [m_7, (ErlangInt (DBI.fromInt 4))])
  in let arg_17 = (BIF.erlang__op_minus [lop_18, w_10])
  in let lop_13 = (BIF.erlang__min__2 [arg_14, arg_17])
  in let arg_12 = (BIF.erlang__op_minus [lop_13, ld_9])
  in let
    n_23 = (BIF.erlang__max__2 [(ErlangInt (DBI.fromInt 8)), arg_12])
  in let head_28 = (erlps__pp_binary__4 [s_2, n_23, n_23, ind_8])
  in
    (ErlangCons lt_0
       (ErlangCons lt_0
          (ErlangCons head_28
             (ErlangCons gt_3 (ErlangCons gt_3 ErlangEmptyList)))))
erlps__pp_binary__7 [arg_38, arg_39, arg_40, arg_41, arg_42,
                     arg_43, arg_44]
  =
  (EXC.function_clause unit)
erlps__pp_binary__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pp_binary__4 :: ErlangFun
erlps__pp_binary__4 [(ErlangCons bs_0 (ErlangCons (ErlangInt num_1) s_2)),
                     n_3, n0_4, ind_5]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 44))) =
  let    lop_6 = (BIF.erlang__length__1 [bs_0])
  in let
    len_9 =
      (BIF.erlang__op_plus [lop_6, (ErlangInt (DBI.fromInt 1))])
  in let case_10 = (BIF.erlang__op_minus [n_3, len_9])
  in
    case case_10 of
      n1_13 | (weakLt n1_13 (ErlangInt (DBI.fromInt 0))) ->
        let    arg_23 = (BIF.erlang__op_minus [n0_4, len_9])
        in let tail_21 = (erlps__pp_binary__4 [s_2, arg_23, n0_4, ind_5])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 10))
             (ErlangCons ind_5
                (ErlangCons bs_0
                   (ErlangCons (ErlangInt (DBI.fromInt 44)) tail_21))))
      n1_28 ->
        let tail_32 = (erlps__pp_binary__4 [s_2, n1_28, n0_4, ind_5])
        in
          (ErlangCons bs_0
             (ErlangCons (ErlangInt (DBI.fromInt 44)) tail_32))
      something_else -> (EXC.case_clause something_else)
erlps__pp_binary__4 [s_3@(ErlangCons bs1_0 (ErlangCons (ErlangInt num_1) (ErlangCons bs2_2 (ErlangEmptyList)))),
                     n_4, _n0_5, ind_6]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 58)))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_15 = (BIF.erlang__length__1 [bs1_0])
             in let rop_17 = (BIF.erlang__length__1 [bs2_2])
             in let lop_14 = (BIF.erlang__op_plus [lop_15, rop_17])
             in let
               lop_13 =
                 (BIF.erlang__op_plus [lop_14, (ErlangInt (DBI.fromInt 1))])
             in (BIF.erlang__op_greater [lop_13, n_4])))) =
  (ErlangCons (ErlangInt (DBI.fromInt 10))
     (ErlangCons ind_6 (ErlangCons s_3 ErlangEmptyList)))
erlps__pp_binary__4 [s_0, n_1, _n0_2, ind_3] =
  let    lop_5 = (BIF.erlang__iolist_size__1 [s_0])
  in let case_4 = (BIF.erlang__op_greater [lop_5, n_1])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (ErlangCons (ErlangInt (DBI.fromInt 10))
           (ErlangCons ind_3 (ErlangCons s_0 ErlangEmptyList)))
      (ErlangAtom "false") -> s_0
      something_else -> (EXC.case_clause something_else)
erlps__pp_binary__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__pp_binary__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write__1 :: ErlangFun
erlps__write__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                             _istagged_0, l_1]),
                               _, _, _])]
  =
  let
    head_4 =
      (erlps__write_list__2 [l_1, (ErlangInt (DBI.fromInt 44))])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 123))
       (ErlangCons head_4
          (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList)))
erlps__write__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "list"),
                                             l_0]),
                               _, _, _])]
  =
  let
    head_3 =
      (erlps__write_list__2 [l_0, (ErlangInt (DBI.fromInt 124))])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 91))
       (ErlangCons head_3
          (ErlangCons (ErlangInt (DBI.fromInt 93)) ErlangEmptyList)))
erlps__write__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map"),
                                             pairs_0]),
                               _, _, _])]
  =
  let
    head_5 =
      (erlps__write_list__2 [pairs_0, (ErlangInt (DBI.fromInt 44))])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 35))
       (ErlangCons (ErlangInt (DBI.fromInt 123))
          (ErlangCons head_5
             (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList))))
erlps__write__1 [pair_2@(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                                    _k_0, _v_1]),
                                      _, _, _])]
  =
  (erlps__write_pair__1 [pair_2])
erlps__write__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                             (ErlangCons (ErlangTuple [name_0,
                                                                       _]) l_1)]),
                               _, _, _])]
  =
  let head_6 = (erlps__write_fields__1 [l_1])
  in
    (ErlangCons name_0
       (ErlangCons (ErlangInt (DBI.fromInt 123))
          (ErlangCons head_6
             (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList))))
erlps__write__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "bin"),
                                             s_0]),
                               _, _, _])]
  =
  s_0
erlps__write__1 [(ErlangTuple [s_0, _, _, _])] = s_0
erlps__write__1 [arg_1] = (EXC.function_clause unit)
erlps__write__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_pair__1 :: ErlangFun
erlps__write_pair__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                                  k_0, v_1]),
                                    _, _, _])]
  =
  let    head_2 = (erlps__write__1 [k_0])
  in let head_5 = (make_string " => ")
  in let head_7 = (erlps__write__1 [v_1])
  in
    (ErlangCons head_2
       (ErlangCons head_5 (ErlangCons head_7 ErlangEmptyList)))
erlps__write_pair__1 [arg_10] = (EXC.function_clause unit)
erlps__write_pair__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_fields__1 :: ErlangFun
erlps__write_fields__1 [(ErlangEmptyList)] = (make_string "")
erlps__write_fields__1 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                      _])]
  =
  (make_string "...")
erlps__write_fields__1 [(ErlangCons f_0 fs_1)] =
  let    head_2 = (erlps__write_field__1 [f_0])
  in let tail_4 = (erlps__write_fields_tail__1 [fs_1])
  in (ErlangCons head_2 tail_4)
erlps__write_fields__1 [arg_6] = (EXC.function_clause unit)
erlps__write_fields__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_fields_tail__1 :: ErlangFun
erlps__write_fields_tail__1 [(ErlangEmptyList)] =
  (make_string "")
erlps__write_fields_tail__1 [(ErlangTuple [(ErlangAtom "dots"),
                                           _, _, _])]
  =
  (make_string ",...")
erlps__write_fields_tail__1 [(ErlangCons f_0 fs_1)] =
  let    head_4 = (erlps__write_field__1 [f_0])
  in let tail_6 = (erlps__write_fields_tail__1 [fs_1])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 44))
       (ErlangCons head_4 tail_6))
erlps__write_fields_tail__1 [arg_8] = (EXC.function_clause unit)
erlps__write_fields_tail__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_field__1 :: ErlangFun
erlps__write_field__1 [(ErlangTuple [(ErlangTuple [(ErlangAtom "field"),
                                                   name_0, _namel_1, f_2]),
                                     _, _, _])]
  =
  let    head_5 = (make_string " = ")
  in let tail_6 = (erlps__write__1 [f_2])
  in (ErlangCons name_0 (ErlangCons head_5 tail_6))
erlps__write_field__1 [arg_8] = (EXC.function_clause unit)
erlps__write_field__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_list__2 :: ErlangFun
erlps__write_list__2 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                    _]),
                      _s_0]
  =
  (make_string "...")
erlps__write_list__2 [(ErlangCons e_0 es_1), s_2] =
  let    head_3 = (erlps__write__1 [e_0])
  in let tail_5 = (erlps__write_tail__2 [es_1, s_2])
  in (ErlangCons head_3 tail_5)
erlps__write_list__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__write_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_tail__2 :: ErlangFun
erlps__write_tail__2 [(ErlangEmptyList), _s_0] = ErlangEmptyList
erlps__write_tail__2 [(ErlangCons e_0 es_1), s_2] =
  let    head_5 = (erlps__write__1 [e_0])
  in let tail_7 = (erlps__write_tail__2 [es_1, s_2])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 44))
       (ErlangCons head_5 tail_7))
erlps__write_tail__2 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                    _]),
                      s_0]
  =
  let tail_2 = (make_string "...")
  in (ErlangCons s_0 tail_2)
erlps__write_tail__2 [e_0, s_1] =
  let tail_3 = (erlps__write__1 [e_0])
  in (ErlangCons s_1 tail_3)
erlps__write_tail__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__write_tail__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__intermediate__6 :: ErlangFun
erlps__intermediate__6 [term_0, d_1, t_2, rf_3, enc_4, str_5]
  | (weakGt t_2 (ErlangInt (DBI.fromInt 0))) =
  let
    if_13 =
      (erlps__print_length__6
         [term_0, (ErlangInt (DBI.fromInt 1)), t_2, rf_3, enc_4, str_5])
  in
    case if_13 of
      (ErlangTuple [_, len_15, dots_16, _]) | ((ErlangAtom "true") ==
                                                 (falsifyErrors
                                                    (\ _ ->
                                                       let   
                                                         lop_18 =
                                                           (BIF.erlang__op_exactEq
                                                              [dots_16,
                                                               (ErlangInt
                                                                  (DBI.fromInt
                                                                     0))])
                                                       in let
                                                         lop_17 =
                                                           case lop_18 of
                                                             (ErlangAtom "true") ->
                                                               (ErlangAtom
                                                                  "true")
                                                             (ErlangAtom "false") ->
                                                               (BIF.erlang__op_greater
                                                                  [len_15, t_2])
                                                             _ ->
                                                               (EXC.badarg1
                                                                  lop_18)
                                                       in
                                                         case lop_17 of
                                                           (ErlangAtom "true") ->
                                                             (ErlangAtom "true")
                                                           (ErlangAtom "false") ->
                                                             (BIF.erlang__op_exactEq
                                                                [d_1,
                                                                 (ErlangInt
                                                                    (DBI.fromInt
                                                                       1))])
                                                           _ ->
                                                             (EXC.badarg1
                                                                lop_17)))) ->
        if_13
      _ ->
        (erlps__find_upper__9
           [if_13, term_0, t_2, (ErlangInt (DBI.fromInt 1)),
            (ErlangInt (DBI.fromInt 2)), d_1, rf_3, enc_4, str_5])
      something_else -> (EXC.case_clause something_else)
erlps__intermediate__6 [arg_34, arg_35, arg_36, arg_37, arg_38,
                        arg_39]
  =
  (EXC.function_clause unit)
erlps__intermediate__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_upper__9 :: ErlangFun
erlps__find_upper__9 [lower_0, term_1, t_2, dl_3, dd_4, d_5,
                      rf_6, enc_7, str_8]
  =
  let   
    dd2_11 =
      (BIF.erlang__op_mult [dd_4, (ErlangInt (DBI.fromInt 2))])
  in let
    case_12 =
      (BIF.erlang__op_lesser [d_5, (ErlangInt (DBI.fromInt 0))])
  in let
    d1_21 =
      case case_12 of
        (ErlangAtom "true") -> (BIF.erlang__op_plus [dl_3, dd2_11])
        (ErlangAtom "false") ->
          let arg_17 = (BIF.erlang__op_plus [dl_3, dd2_11])
          in (BIF.erlang__min__2 [arg_17, d_5])
        something_else -> (EXC.case_clause something_else)
  in let arg_24 = (BIF.erlang__op_minus [d1_21, dl_3])
  in let if_27 = (erlps__expand__3 [lower_0, t_2, arg_24])
  in
    case if_27 of
      (ErlangTuple [_, _, _dots_30@(ErlangInt num_29),
                    _]) | ((ErlangInt num_29) == (ErlangInt (DBI.fromInt 0))) ->
        if_27
      (ErlangTuple [_, _len_32@t_31, _, _]) | (t_31 == t_2) -> if_27
      (ErlangTuple [_, len_33, _, _]) | ((ErlangAtom "true") ==
                                           (falsifyErrors
                                              (\ _ ->
                                                 let
                                                   lop_34 =
                                                     (BIF.erlang__op_lesser
                                                        [len_33, t_2])
                                                 in
                                                   case lop_34 of
                                                     (ErlangAtom "false") ->
                                                       (ErlangAtom "false")
                                                     (ErlangAtom "true") ->
                                                       let
                                                         lop_37 =
                                                           (BIF.erlang__op_lesser
                                                              [d1_21, d_5])
                                                       in
                                                         case lop_37 of
                                                           (ErlangAtom "true") ->
                                                             (ErlangAtom "true")
                                                           (ErlangAtom "false") ->
                                                             (BIF.erlang__op_lesser
                                                                [d_5,
                                                                 (ErlangInt
                                                                    (DBI.fromInt
                                                                       0))])
                                                           _ ->
                                                             (EXC.badarg1
                                                                lop_37)
                                                     _ ->
                                                       (EXC.badarg1
                                                          lop_34)))) ->
        (erlps__find_upper__9
           [if_27, term_1, t_2, d1_21, dd2_11, d_5, rf_6, enc_7, str_8])
      _ ->
        (erlps__search_depth__9
           [lower_0, if_27, term_1, t_2, dl_3, d1_21, rf_6, enc_7, str_8])
      something_else -> (EXC.case_clause something_else)
erlps__find_upper__9 [arg_60, arg_61, arg_62, arg_63, arg_64,
                      arg_65, arg_66, arg_67, arg_68]
  =
  (EXC.function_clause unit)
erlps__find_upper__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__search_depth__9 :: ErlangFun
erlps__search_depth__9 [lower_0, upper_1, _term_2, t_3, dl_4,
                        du_5, _rf_6, _enc_7, _str_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_11 = (BIF.erlang__op_minus [du_5, dl_4])
             in
               (BIF.erlang__op_exactEq
                  [lop_11, (ErlangInt (DBI.fromInt 1))])))) =
  case lower_0 of
    (ErlangTuple [_, t_10, _, _]) | (t_10 == t_3) -> lower_0
    _ -> upper_1
    something_else -> (EXC.case_clause something_else)
erlps__search_depth__9 [lower_0, upper_1, term_2, t_3, dl_4,
                        du_5, rf_6, enc_7, str_8]
  =
  let    lop_9 = (BIF.erlang__op_plus [dl_4, du_5])
  in let
    d1_13 =
      (BIF.erlang__op_div_strict [lop_9, (ErlangInt (DBI.fromInt 2))])
  in let arg_16 = (BIF.erlang__op_minus [d1_13, dl_4])
  in let if_19 = (erlps__expand__3 [lower_0, t_3, arg_16])
  in
    case if_19 of
      (ErlangTuple [_, len_21, _, _]) | (weakGt len_21 t_3) ->
        (erlps__search_depth__9
           [lower_0, if_19, term_2, t_3, dl_4, d1_13, rf_6, enc_7, str_8])
      _ ->
        (erlps__search_depth__9
           [if_19, upper_1, term_2, t_3, d1_13, du_5, rf_6, enc_7, str_8])
      something_else -> (EXC.case_clause something_else)
erlps__search_depth__9 [arg_40, arg_41, arg_42, arg_43, arg_44,
                        arg_45, arg_46, arg_47, arg_48]
  =
  (EXC.function_clause unit)
erlps__search_depth__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length__6 :: ErlangFun
erlps__print_length__6 [(ErlangEmptyList), _d_0, _t_1, _rf_2,
                        _enc_3, _str_4]
  =
  let tup_el_5 = (make_string "[]")
  in
    (ErlangTuple
       [tup_el_5, (ErlangInt (DBI.fromInt 2)),
        (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
erlps__print_length__6 [(ErlangTuple []), _d_0, _t_1, _rf_2,
                        _enc_3, _str_4]
  =
  let tup_el_5 = (make_string "{}")
  in
    (ErlangTuple
       [tup_el_5, (ErlangInt (DBI.fromInt 2)),
        (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
erlps__print_length__6 [m_1@(ErlangMap map_0), _d_2, _t_3, _rf_4,
                        _enc_5, _str_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_11 = (BIF.erlang__map_size__1 [m_1])
             in
               (BIF.erlang__op_exactEq
                  [lop_11, (ErlangInt (DBI.fromInt 0))])))) =
  let tup_el_7 = (make_string "#{}")
  in
    (ErlangTuple
       [tup_el_7, (ErlangInt (DBI.fromInt 3)),
        (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
erlps__print_length__6 [atom_0, _d_1, _t_2, _rf_3, enc_4, _str_5]
  | (isEAtom atom_0) =
  let    s_8 = (erlps__write_atom__2 [atom_0, enc_4])
  in let
    tup_el_10 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_8])
  in
    (ErlangTuple
       [s_8, tup_el_10, (ErlangInt (DBI.fromInt 0)),
        (ErlangAtom "no_more")])
erlps__print_length__6 [list_0, d_1, t_2, rf_3, enc_4, str_5]
  | (isEList list_0) =
  let
    case_6 =
      case str_5 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          (erlps__printable_list__4 [list_0, d_1, t_2, enc_4])
        _ -> (EXC.badarg1 str_5)
  in
    case case_6 of
      (ErlangAtom "true") ->
        let    s_14 = (erlps__write_string__2 [list_0, enc_4])
        in let
          tup_el_16 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_14])
        in
          (ErlangTuple
             [s_14, tup_el_16, (ErlangInt (DBI.fromInt 0)),
              (ErlangAtom "no_more")])
      (ErlangTuple [(ErlangAtom "true"), prefix_20]) ->
        let    s_23 = (erlps__write_string__2 [prefix_20, enc_4])
        in let tail_26 = (make_string "...")
        in let
          rop_29 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_23])
        in let
          tup_el_27 =
            (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 3)), rop_29])
        in
          (ErlangTuple
             [(ErlangCons s_23 tail_26), tup_el_27,
              (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
      (ErlangAtom "false") ->
        let
          case_33 =
            (erlps__print_length_list__6
               [list_0, d_1, t_2, rf_3, enc_4, str_5])
        in
          case case_33 of
            (ErlangTuple [what_40, len_41, dots_42, _more_43]) | (weakGt
                                                                    dots_42
                                                                    (ErlangInt
                                                                       (DBI.fromInt
                                                                          0))) ->
              let
                more_57 =
                  (ErlangFun 2
                     let
                       lambda_44 [t1_47, dd_48] =
                         let arg_50 = (BIF.erlang__op_plus [d_1, dd_48])
                         in
                           (erlps__print_length__6
                              [list_0, arg_50, t1_47, rf_3, enc_4, str_5])
                       lambda_44 [arg_45, arg_46] = (EXC.function_clause unit)
                       lambda_44 args =
                         (EXC.badarity (ErlangFun 2 lambda_44) args)
                     in lambda_44)
              in (ErlangTuple [what_40, len_41, dots_42, more_57])
            if_62 -> if_62
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__print_length__6 [fun_0, _d_1, _t_2, _rf_3, _enc_4, _str_5]
  | (isEFun fun_0) =
  let   
    s_7 = (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [fun_0])
  in let tup_el_9 = (BIF.erlang__iolist_size__1 [s_7])
  in
    (ErlangTuple
       [s_7, tup_el_9, (ErlangInt (DBI.fromInt 0)),
        (ErlangAtom "no_more")])
erlps__print_length__6 [r_0, d_1, t_2, rf_3, enc_4, str_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               arg_30 =
                 (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), r_0])
             in let lop_29 = (BIF.erlang__is_atom__1 [arg_30])
             in
               case lop_29 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_function__1 [rf_3])
                 _ -> (EXC.badarg1 lop_29)))) =
  let   
    arg_7 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), r_0])
  in let lop_11 = (BIF.erlang__tuple_size__1 [r_0])
  in let
    arg_10 =
      (BIF.erlang__op_minus [lop_11, (ErlangInt (DBI.fromInt 1))])
  in let
    case_6 =
      (BIF.erlang__apply__2
         [rf_3, (ErlangCons arg_7 (ErlangCons arg_10 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "no") ->
        (erlps__print_length_tuple__6
           [r_0, d_1, t_2, rf_3, enc_4, str_5])
      rdefs_21 ->
        (erlps__print_length_record__7
           [r_0, d_1, t_2, rf_3, rdefs_21, enc_4, str_5])
      something_else -> (EXC.case_clause something_else)
erlps__print_length__6 [tuple_0, d_1, t_2, rf_3, enc_4, str_5]
  | (isETuple tuple_0) =
  (erlps__print_length_tuple__6
     [tuple_0, d_1, t_2, rf_3, enc_4, str_5])
erlps__print_length__6 [map_0, d_1, t_2, rf_3, enc_4, str_5]
  | (isEMap map_0) =
  (erlps__print_length_map__6
     [map_0, d_1, t_2, rf_3, enc_4, str_5])
erlps__print_length__6 [(ErlangBinary bin_e_0), _d_1, _t_2,
                        _rf_3, _enc_4, _str_5]
  | (BIN.empty bin_e_0) =
  let tup_el_6 = (make_string "<<>>")
  in
    (ErlangTuple
       [tup_el_6, (ErlangInt (DBI.fromInt 4)),
        (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
erlps__print_length__6 [bin_3@(ErlangBinary bin_c_0),
                        (ErlangInt num_4), _t_5, rf_6, enc_7, str_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2)
  , ((ErlangInt num_4) == (ErlangInt (DBI.fromInt 1))) =
  let   
    more_22 =
      (ErlangFun 2
         let
           lambda_9 [t1_12, dd_13] =
             let
               arg_15 =
                 (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), dd_13])
             in
               (erlps__print_length__6
                  [bin_3, arg_15, t1_12, rf_6, enc_7, str_8])
           lambda_9 [arg_10, arg_11] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 2 lambda_9) args)
         in lambda_9)
  in let tup_el_23 = (make_string "<<...>>")
  in
    (ErlangTuple
       [tup_el_23, (ErlangInt (DBI.fromInt 7)),
        (ErlangInt (DBI.fromInt 3)), more_22])
erlps__print_length__6 [bin_3@(ErlangBinary bin_c_0), d_4, t_5,
                        rf_6, enc_7, str_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  let   
    d1_11 = (BIF.erlang__op_minus [d_4, (ErlangInt (DBI.fromInt 1))])
  in let
    case_12 =
      case str_8 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let    lop_16 = (BIF.erlang__bit_size__1 [bin_3])
          in let
            lop_15 =
              (BIF.erlang__op_rem_strict [lop_16, (ErlangInt (DBI.fromInt 8))])
          in let
            lop_14 =
              (BIF.erlang__op_exactEq [lop_15, (ErlangInt (DBI.fromInt 0))])
          in
            case lop_14 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                let arg_22 = (erlps__tsub__2 [t_5, (ErlangInt (DBI.fromInt 6))])
                in (erlps__printable_bin0__4 [bin_3, d1_11, arg_22, enc_7])
              _ -> (EXC.badarg1 lop_14)
        _ -> (EXC.badarg1 str_8)
  in
    case case_12 of
      (ErlangTuple [(ErlangAtom "true"), list_26]) | (isEList
                                                        list_26) ->
        let   
          s_29 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
               [list_26, (ErlangInt (DBI.fromInt 34))])
        in let rop_43 = (BIF.erlang__length__1 [s_29])
        in let
          tup_el_41 =
            (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 4)), rop_43])
        in
          (ErlangTuple
             [(ErlangCons (ErlangInt (DBI.fromInt 60))
                 (ErlangCons (ErlangInt (DBI.fromInt 60))
                    (ErlangCons s_29
                       (ErlangCons (ErlangInt (DBI.fromInt 62))
                          (ErlangCons (ErlangInt (DBI.fromInt 62))
                             ErlangEmptyList))))),
              tup_el_41, (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
      (ErlangTuple [(ErlangAtom "false"), list_47]) | (isEList
                                                         list_47) ->
        let   
          s_50 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
               [list_47, (ErlangInt (DBI.fromInt 34))])
        in let head_58 = (make_string "/utf8>>")
        in let
          rop_62 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_50])
        in let
          tup_el_60 =
            (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 9)), rop_62])
        in
          (ErlangTuple
             [(ErlangCons (ErlangInt (DBI.fromInt 60))
                 (ErlangCons (ErlangInt (DBI.fromInt 60))
                    (ErlangCons s_50 (ErlangCons head_58 ErlangEmptyList)))),
              tup_el_60, (ErlangInt (DBI.fromInt 0)), (ErlangAtom "no_more")])
      (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "true"),
                    prefix_66]) ->
        let   
          s_69 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
               [prefix_66, (ErlangInt (DBI.fromInt 34))])
        in let
          more_83 =
            (ErlangFun 2
               let
                 lambda_70 [t1_73, dd_74] =
                   let arg_76 = (BIF.erlang__op_plus [d_4, dd_74])
                   in
                     (erlps__print_length__6
                        [bin_3, arg_76, t1_73, rf_6, enc_7, str_8])
                 lambda_70 [arg_71, arg_72] = (EXC.function_clause unit)
                 lambda_70 args = (EXC.badarity (ErlangFun 2 lambda_70) args)
               in lambda_70)
        in let tail_90 = (make_string "...>>")
        in let rop_93 = (BIF.erlang__length__1 [s_69])
        in let
          tup_el_91 =
            (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 7)), rop_93])
        in
          (ErlangTuple
             [(ErlangCons (ErlangInt (DBI.fromInt 60))
                 (ErlangCons (ErlangInt (DBI.fromInt 60))
                    (ErlangCons s_69 tail_90))),
              tup_el_91, (ErlangInt (DBI.fromInt 3)), more_83])
      (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "true"),
                    prefix_97]) ->
        let   
          s_100 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
               [prefix_97, (ErlangInt (DBI.fromInt 34))])
        in let
          more_114 =
            (ErlangFun 2
               let
                 lambda_101 [t1_104, dd_105] =
                   let arg_107 = (BIF.erlang__op_plus [d_4, dd_105])
                   in
                     (erlps__print_length__6
                        [bin_3, arg_107, t1_104, rf_6, enc_7, str_8])
                 lambda_101 [arg_102, arg_103] = (EXC.function_clause unit)
                 lambda_101 args = (EXC.badarity (ErlangFun 2 lambda_101) args)
               in lambda_101)
        in let tail_121 = (make_string "/utf8...>>")
        in let
          rop_124 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1"
               [s_100])
        in let
          tup_el_122 =
            (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 12)), rop_124])
        in
          (ErlangTuple
             [(ErlangCons (ErlangInt (DBI.fromInt 60))
                 (ErlangCons (ErlangInt (DBI.fromInt 60))
                    (ErlangCons s_100 tail_121))),
              tup_el_122, (ErlangInt (DBI.fromInt 3)), more_114])
      (ErlangAtom "false") ->
        let
          case_128 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__write_binary__3"
               [bin_3, d_4, t_5])
        in
          case case_128 of
            (ErlangTuple [s_132, (ErlangBinary bin_e_133)]) | (BIN.empty
                                                                 bin_e_133) ->
              let    tup_el_134 = (ErlangTuple [(ErlangAtom "bin"), s_132])
              in let tup_el_137 = (BIF.erlang__iolist_size__1 [s_132])
              in
                (ErlangTuple
                   [tup_el_134, tup_el_137, (ErlangInt (DBI.fromInt 0)),
                    (ErlangAtom "no_more")])
            (ErlangTuple [s_141, _rest_142]) ->
              let   
                more_156 =
                  (ErlangFun 2
                     let
                       lambda_143 [t1_146, dd_147] =
                         let arg_149 = (BIF.erlang__op_plus [d_4, dd_147])
                         in
                           (erlps__print_length__6
                              [bin_3, arg_149, t1_146, rf_6, enc_7, str_8])
                       lambda_143 [arg_144, arg_145] =
                         (EXC.function_clause unit)
                       lambda_143 args =
                         (EXC.badarity (ErlangFun 2 lambda_143) args)
                     in lambda_143)
              in let tup_el_157 = (ErlangTuple [(ErlangAtom "bin"), s_141])
              in let tup_el_160 = (BIF.erlang__iolist_size__1 [s_141])
              in
                (ErlangTuple
                   [tup_el_157, tup_el_160, (ErlangInt (DBI.fromInt 3)),
                    more_156])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__print_length__6 [term_0, _d_1, _t_2, _rf_3, _enc_4,
                        _str_5]
  =
  let   
    s_7 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [term_0])
  in let
    tup_el_9 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_7])
  in
    (ErlangTuple
       [s_7, tup_el_9, (ErlangInt (DBI.fromInt 0)),
        (ErlangAtom "no_more")])
erlps__print_length__6 [arg_13, arg_14, arg_15, arg_16, arg_17,
                        arg_18]
  =
  (EXC.function_clause unit)
erlps__print_length__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_map__6 :: ErlangFun
erlps__print_length_map__6 [map_0, (ErlangInt num_1), _t_2, rf_3,
                            enc_4, str_5]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  let   
    more_19 =
      (ErlangFun 2
         let
           lambda_6 [t1_9, dd_10] =
             let
               arg_12 =
                 (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), dd_10])
             in
               (erlps__print_length_map__6
                  [map_0, arg_12, t1_9, rf_3, enc_4, str_5])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in let tup_el_20 = (make_string "#{...}")
  in
    (ErlangTuple
       [tup_el_20, (ErlangInt (DBI.fromInt 6)),
        (ErlangInt (DBI.fromInt 3)), more_19])
erlps__print_length_map__6 [map_0, d_1, t_2, rf_3, enc_4, str_5]
  | (isEMap map_0) =
  let   
    arg_6 =
      (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [map_0])
  in let
    next_8 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [arg_6])
  in let
    arg_11 =
      (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_14 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 3))])
  in let
    pairss_20 =
      (erlps__print_length_map_pairs__7
         [next_8, d_1, arg_11, arg_14, rf_3, enc_4, str_5])
  in let
    match_expr_26 =
      (erlps__list_length__3
         [pairss_20, (ErlangInt (DBI.fromInt 3)),
          (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_26 of
      (ErlangTuple [len_24, dots_25]) ->
        let tup_el_27 = (ErlangTuple [(ErlangAtom "map"), pairss_20])
        in
          (ErlangTuple
             [tup_el_27, len_24, dots_25, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_26)
erlps__print_length_map__6 [arg_33, arg_34, arg_35, arg_36,
                            arg_37, arg_38]
  =
  (EXC.function_clause unit)
erlps__print_length_map__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_map_pairs__7 :: ErlangFun
erlps__print_length_map_pairs__7 [(ErlangAtom "none"), _d_0,
                                  _d0_1, _t_2, _rf_3, _enc_4, _str_5]
  =
  ErlangEmptyList
erlps__print_length_map_pairs__7 [term_0, d_1, d0_2, t_3, rf_4,
                                  enc_5, str_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_26 =
                 (BIF.erlang__op_exactEq [d_1, (ErlangInt (DBI.fromInt 1))])
             in
               case lop_26 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [t_3, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_26)))) =
  let
    more_21 =
      (ErlangFun 2
         let
           lambda_7 [t1_10, dd_11] =
             let arg_13 = (BIF.erlang__op_plus [d_1, dd_11])
             in
               (erlps__print_length_map_pairs__7
                  [term_0, arg_13, d0_2, t1_10, rf_4, enc_5, str_6])
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in
    (ErlangTuple
       [(ErlangAtom "dots"), (ErlangInt (DBI.fromInt 3)),
        (ErlangInt (DBI.fromInt 3)), more_21])
erlps__print_length_map_pairs__7 [(ErlangTuple [k_0, v_1,
                                                iter_2]),
                                  d_3, d0_4, t_5, rf_6, enc_7, str_8]
  =
  let   
    arg_12 = (erlps__tsub__2 [t_5, (ErlangInt (DBI.fromInt 1))])
  in let
    pair1_18 =
      (erlps__print_length_map_pair__7
         [k_0, v_1, d0_4, arg_12, rf_6, enc_7, str_8])
  in
    case pair1_18 of
      (ErlangTuple [_, len1_19, _, _]) ->
        let   
          next_22 =
            (BIF.do_remote_fun_call "Maps" "erlps__next__1" [iter_2])
        in let
          arg_26 =
            (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
        in let
          arg_32 =
            (BIF.erlang__op_plus [len1_19, (ErlangInt (DBI.fromInt 1))])
        in let arg_30 = (erlps__tsub__2 [t_5, arg_32])
        in let
          tail_24 =
            (erlps__print_length_map_pairs__7
               [next_22, arg_26, d0_4, arg_30, rf_6, enc_7, str_8])
        in (ErlangCons pair1_18 tail_24)
      _ -> (EXC.badmatch pair1_18)
erlps__print_length_map_pairs__7 [arg_38, arg_39, arg_40, arg_41,
                                  arg_42, arg_43, arg_44]
  =
  (EXC.function_clause unit)
erlps__print_length_map_pairs__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_map_pair__7 :: ErlangFun
erlps__print_length_map_pair__7 [k_0, v_1, d_2, t_3, rf_4, enc_5,
                                 str_6]
  =
  let
    p1_13 =
      (erlps__print_length__6 [k_0, d_2, t_3, rf_4, enc_5, str_6])
  in
    case p1_13 of
      (ErlangTuple [_, kl_14, kd_15, _]) ->
        let   
          kl1_19 =
            (BIF.erlang__op_plus [kl_14, (ErlangInt (DBI.fromInt 4))])
        in let arg_22 = (erlps__tsub__2 [t_3, kl1_19])
        in let
          p2_28 =
            (erlps__print_length__6 [v_1, d_2, arg_22, rf_4, enc_5, str_6])
        in
          case p2_28 of
            (ErlangTuple [_, vl_29, vd_30, _]) ->
              let   
                tup_el_32 =
                  (ErlangTuple [(ErlangAtom "map_pair"), p1_13, p2_28])
              in let tup_el_36 = (BIF.erlang__op_plus [kl1_19, vl_29])
              in let tup_el_39 = (BIF.erlang__op_plus [kd_15, vd_30])
              in
                (ErlangTuple
                   [tup_el_32, tup_el_36, tup_el_39, (ErlangAtom "no_more")])
            _ -> (EXC.badmatch p2_28)
      _ -> (EXC.badmatch p1_13)
erlps__print_length_map_pair__7 [arg_43, arg_44, arg_45, arg_46,
                                 arg_47, arg_48, arg_49]
  =
  (EXC.function_clause unit)
erlps__print_length_map_pair__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_tuple__6 :: ErlangFun
erlps__print_length_tuple__6 [tuple_0, (ErlangInt num_1), _t_2,
                              rf_3, enc_4, str_5]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  let   
    more_19 =
      (ErlangFun 2
         let
           lambda_6 [t1_9, dd_10] =
             let
               arg_12 =
                 (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), dd_10])
             in
               (erlps__print_length_tuple__6
                  [tuple_0, arg_12, t1_9, rf_3, enc_4, str_5])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in let tup_el_20 = (make_string "{...}")
  in
    (ErlangTuple
       [tup_el_20, (ErlangInt (DBI.fromInt 5)),
        (ErlangInt (DBI.fromInt 3)), more_19])
erlps__print_length_tuple__6 [tuple_0, d_1, t_2, rf_3, enc_4,
                              str_5]
  =
  let   
    arg_9 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 2))])
  in let
    l_15 =
      (erlps__print_length_tuple1__7
         [tuple_0, (ErlangInt (DBI.fromInt 1)), d_1, arg_9, rf_3, enc_4,
          str_5])
  in let
    arg_17 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), tuple_0])
  in let lop_16 = (BIF.erlang__is_atom__1 [arg_17])
  in let lop_21 = (BIF.erlang__tuple_size__1 [tuple_0])
  in let
    rop_20 =
      (BIF.erlang__op_greater [lop_21, (ErlangInt (DBI.fromInt 1))])
  in let istagged_24 = (BIF.erlang__op_and [lop_16, rop_20])
  in let
    match_expr_30 =
      (erlps__list_length__3
         [l_15, (ErlangInt (DBI.fromInt 2)), (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_30 of
      (ErlangTuple [len_28, dots_29]) ->
        let
          tup_el_31 =
            (ErlangTuple [(ErlangAtom "tuple"), istagged_24, l_15])
        in
          (ErlangTuple
             [tup_el_31, len_28, dots_29, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_30)
erlps__print_length_tuple__6 [arg_38, arg_39, arg_40, arg_41,
                              arg_42, arg_43]
  =
  (EXC.function_clause unit)
erlps__print_length_tuple__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_tuple1__7 :: ErlangFun
erlps__print_length_tuple1__7 [tuple_0, i_1, _d_2, _t_3, _rf_4,
                               _enc_5, _str_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_8 = (BIF.erlang__tuple_size__1 [tuple_0])
             in (BIF.erlang__op_greater [i_1, rop_8])))) =
  ErlangEmptyList
erlps__print_length_tuple1__7 [tuple_0, i_1, d_2, t_3, rf_4,
                               enc_5, str_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_26 =
                 (BIF.erlang__op_exactEq [d_2, (ErlangInt (DBI.fromInt 1))])
             in
               case lop_26 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [t_3, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_26)))) =
  let
    more_21 =
      (ErlangFun 2
         let
           lambda_7 [t1_10, dd_11] =
             let arg_14 = (BIF.erlang__op_plus [d_2, dd_11])
             in
               (erlps__print_length_tuple1__7
                  [tuple_0, i_1, arg_14, t1_10, rf_4, enc_5, str_6])
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in
    (ErlangTuple
       [(ErlangAtom "dots"), (ErlangInt (DBI.fromInt 3)),
        (ErlangInt (DBI.fromInt 3)), more_21])
erlps__print_length_tuple1__7 [tuple_0, i_1, d_2, t_3, rf_4,
                               enc_5, str_6]
  =
  let    e_9 = (BIF.erlang__element__2 [i_1, tuple_0])
  in let
    t1_12 = (erlps__tsub__2 [t_3, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_14 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let
    elem1_21 =
      (erlps__print_length__6 [e_9, arg_14, t1_12, rf_4, enc_5, str_6])
  in
    case elem1_21 of
      (ErlangTuple [_, len1_22, _, _]) ->
        let    t2_26 = (erlps__tsub__2 [t1_12, len1_22])
        in let
          arg_30 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
        in let
          arg_33 =
            (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_28 =
            (erlps__print_length_tuple1__7
               [tuple_0, arg_30, arg_33, t2_26, rf_4, enc_5, str_6])
        in (ErlangCons elem1_21 tail_28)
      _ -> (EXC.badmatch elem1_21)
erlps__print_length_tuple1__7 [arg_40, arg_41, arg_42, arg_43,
                               arg_44, arg_45, arg_46]
  =
  (EXC.function_clause unit)
erlps__print_length_tuple1__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_record__7 :: ErlangFun
erlps__print_length_record__7 [tuple_0, (ErlangInt num_1), _t_2,
                               rf_3, rdefs_4, enc_5, str_6]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  let   
    more_21 =
      (ErlangFun 2
         let
           lambda_7 [t1_10, dd_11] =
             let
               arg_13 =
                 (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), dd_11])
             in
               (erlps__print_length_record__7
                  [tuple_0, arg_13, t1_10, rf_3, rdefs_4, enc_5, str_6])
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let tup_el_22 = (make_string "{...}")
  in
    (ErlangTuple
       [tup_el_22, (ErlangInt (DBI.fromInt 5)),
        (ErlangInt (DBI.fromInt 3)), more_21])
erlps__print_length_record__7 [tuple_0, d_1, t_2, rf_3, rdefs_4,
                               enc_5, str_6]
  =
  let   
    arg_9 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), tuple_0])
  in let tail_8 = (erlps__write_atom__2 [arg_9, enc_5])
  in let
    namel_15 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1"
         [(ErlangCons (ErlangInt (DBI.fromInt 35)) tail_8)])
  in let
    arg_17 =
      (BIF.erlang__op_plus [namel_15, (ErlangInt (DBI.fromInt 2))])
  in let t1_20 = (erlps__tsub__2 [t_2, arg_17])
  in let
    arg_22 =
      (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in let
    l_31 =
      (erlps__print_length_fields__8
         [rdefs_4, arg_22, t1_20, tuple_0, (ErlangInt (DBI.fromInt 2)),
          rf_3, enc_5, str_6])
  in let
    arg_33 =
      (BIF.erlang__op_plus [namel_15, (ErlangInt (DBI.fromInt 2))])
  in let
    match_expr_39 =
      (erlps__list_length__3
         [l_31, arg_33, (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_39 of
      (ErlangTuple [len_37, dots_38]) ->
        let   
          head_43 =
            (ErlangTuple
               [(ErlangCons (ErlangInt (DBI.fromInt 35)) tail_8), namel_15])
        in let
          tup_el_40 =
            (ErlangTuple [(ErlangAtom "record"), (ErlangCons head_43 l_31)])
        in
          (ErlangTuple
             [tup_el_40, len_37, dots_38, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_39)
erlps__print_length_record__7 [arg_50, arg_51, arg_52, arg_53,
                               arg_54, arg_55, arg_56]
  =
  (EXC.function_clause unit)
erlps__print_length_record__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_fields__8 :: ErlangFun
erlps__print_length_fields__8 [(ErlangEmptyList), _d_0, _t_1,
                               tuple_2, i_3, _rf_4, _enc_5, _str_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_8 = (BIF.erlang__tuple_size__1 [tuple_2])
             in (BIF.erlang__op_greater [i_3, rop_8])))) =
  ErlangEmptyList
erlps__print_length_fields__8 [term_0, d_1, t_2, tuple_3, i_4,
                               rf_5, enc_6, str_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_28 =
                 (BIF.erlang__op_exactEq [d_1, (ErlangInt (DBI.fromInt 1))])
             in
               case lop_28 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [t_2, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_28)))) =
  let
    more_23 =
      (ErlangFun 2
         let
           lambda_8 [t1_11, dd_12] =
             let arg_14 = (BIF.erlang__op_plus [d_1, dd_12])
             in
               (erlps__print_length_fields__8
                  [term_0, arg_14, t1_11, tuple_3, i_4, rf_5, enc_6, str_7])
           lambda_8 [arg_9, arg_10] = (EXC.function_clause unit)
           lambda_8 args = (EXC.badarity (ErlangFun 2 lambda_8) args)
         in lambda_8)
  in
    (ErlangTuple
       [(ErlangAtom "dots"), (ErlangInt (DBI.fromInt 3)),
        (ErlangInt (DBI.fromInt 3)), more_23])
erlps__print_length_fields__8 [(ErlangCons def_0 defs_1), d_2,
                               t_3, tuple_4, i_5, rf_6, enc_7, str_8]
  =
  let    e_11 = (BIF.erlang__element__2 [i_5, tuple_4])
  in let
    t1_14 = (erlps__tsub__2 [t_3, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_16 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let
    field1_24 =
      (erlps__print_length_field__7
         [def_0, arg_16, t1_14, e_11, rf_6, enc_7, str_8])
  in
    case field1_24 of
      (ErlangTuple [_, len1_25, _, _]) ->
        let    t2_29 = (erlps__tsub__2 [t1_14, len1_25])
        in let
          arg_33 =
            (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
        in let
          arg_38 = (BIF.erlang__op_plus [i_5, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_31 =
            (erlps__print_length_fields__8
               [defs_1, arg_33, t2_29, tuple_4, arg_38, rf_6, enc_7, str_8])
        in (ErlangCons field1_24 tail_31)
      _ -> (EXC.badmatch field1_24)
erlps__print_length_fields__8 [arg_44, arg_45, arg_46, arg_47,
                               arg_48, arg_49, arg_50, arg_51]
  =
  (EXC.function_clause unit)
erlps__print_length_fields__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_field__7 :: ErlangFun
erlps__print_length_field__7 [def_0, d_1, t_2, e_3, rf_4, enc_5,
                              str_6]
  =
  let    name_9 = (erlps__write_atom__2 [def_0, enc_5])
  in let
    lop_10 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1"
         [name_9])
  in let
    namel_13 =
      (BIF.erlang__op_plus [lop_10, (ErlangInt (DBI.fromInt 3))])
  in let arg_16 = (erlps__tsub__2 [t_2, namel_13])
  in let
    field_22 =
      (erlps__print_length__6 [e_3, d_1, arg_16, rf_4, enc_5, str_6])
  in
    case field_22 of
      (ErlangTuple [_, len_23, dots_24, _]) ->
        let   
          tup_el_26 =
            (ErlangTuple [(ErlangAtom "field"), name_9, namel_13, field_22])
        in let tup_el_31 = (BIF.erlang__op_plus [namel_13, len_23])
        in
          (ErlangTuple
             [tup_el_26, tup_el_31, dots_24, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch field_22)
erlps__print_length_field__7 [arg_36, arg_37, arg_38, arg_39,
                              arg_40, arg_41, arg_42]
  =
  (EXC.function_clause unit)
erlps__print_length_field__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_list__6 :: ErlangFun
erlps__print_length_list__6 [list_0, d_1, t_2, rf_3, enc_4,
                             str_5]
  =
  let   
    arg_8 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 2))])
  in let
    l_14 =
      (erlps__print_length_list1__6
         [list_0, d_1, arg_8, rf_3, enc_4, str_5])
  in let
    match_expr_20 =
      (erlps__list_length__3
         [l_14, (ErlangInt (DBI.fromInt 2)), (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_20 of
      (ErlangTuple [len_18, dots_19]) ->
        let tup_el_21 = (ErlangTuple [(ErlangAtom "list"), l_14])
        in
          (ErlangTuple
             [tup_el_21, len_18, dots_19, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_20)
erlps__print_length_list__6 [arg_27, arg_28, arg_29, arg_30,
                             arg_31, arg_32]
  =
  (EXC.function_clause unit)
erlps__print_length_list__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_length_list1__6 :: ErlangFun
erlps__print_length_list1__6 [(ErlangEmptyList), _d_0, _t_1,
                              _rf_2, _enc_3, _str_4]
  =
  ErlangEmptyList
erlps__print_length_list1__6 [term_0, d_1, t_2, rf_3, enc_4,
                              str_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_24 =
                 (BIF.erlang__op_exactEq [d_1, (ErlangInt (DBI.fromInt 1))])
             in
               case lop_24 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [t_2, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_24)))) =
  let
    more_19 =
      (ErlangFun 2
         let
           lambda_6 [t1_9, dd_10] =
             let arg_12 = (BIF.erlang__op_plus [d_1, dd_10])
             in
               (erlps__print_length_list1__6
                  [term_0, arg_12, t1_9, rf_3, enc_4, str_5])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in
    (ErlangTuple
       [(ErlangAtom "dots"), (ErlangInt (DBI.fromInt 3)),
        (ErlangInt (DBI.fromInt 3)), more_19])
erlps__print_length_list1__6 [(ErlangCons e_0 es_1), d_2, t_3,
                              rf_4, enc_5, str_6]
  =
  let   
    arg_8 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_11 = (erlps__tsub__2 [t_3, (ErlangInt (DBI.fromInt 1))])
  in let
    elem1_17 =
      (erlps__print_length__6 [e_0, arg_8, arg_11, rf_4, enc_5, str_6])
  in
    case elem1_17 of
      (ErlangTuple [_, len1_18, _, _]) ->
        let   
          arg_23 =
            (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
        in let
          arg_28 =
            (BIF.erlang__op_plus [len1_18, (ErlangInt (DBI.fromInt 1))])
        in let arg_26 = (erlps__tsub__2 [t_3, arg_28])
        in let
          tail_21 =
            (erlps__print_length_list1__6
               [es_1, arg_23, arg_26, rf_4, enc_5, str_6])
        in (ErlangCons elem1_17 tail_21)
      _ -> (EXC.badmatch elem1_17)
erlps__print_length_list1__6 [e_0, d_1, t_2, rf_3, enc_4, str_5]
  =
  let
    arg_7 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__print_length__6 [e_0, arg_7, t_2, rf_3, enc_4, str_5])
erlps__print_length_list1__6 [arg_14, arg_15, arg_16, arg_17,
                              arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__print_length_list1__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_length__3 :: ErlangFun
erlps__list_length__3 [(ErlangEmptyList), acc_0, dotsacc_1] =
  (ErlangTuple [acc_0, dotsacc_1])
erlps__list_length__3 [(ErlangCons (ErlangTuple [_, len_0,
                                                 dots_1, _]) es_2),
                       acc_3, dotsacc_4]
  =
  let    arg_6 = (BIF.erlang__op_plus [acc_3, len_0])
  in let arg_9 = (BIF.erlang__op_plus [dotsacc_4, dots_1])
  in (erlps__list_length_tail__3 [es_2, arg_6, arg_9])
erlps__list_length__3 [(ErlangTuple [_, len_0, dots_1, _]),
                       acc_2, dotsacc_3]
  =
  let    tup_el_4 = (BIF.erlang__op_plus [acc_2, len_0])
  in let tup_el_7 = (BIF.erlang__op_plus [dotsacc_3, dots_1])
  in (ErlangTuple [tup_el_4, tup_el_7])
erlps__list_length__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__list_length__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list_length_tail__3 :: ErlangFun
erlps__list_length_tail__3 [(ErlangEmptyList), acc_0, dotsacc_1]
  =
  (ErlangTuple [acc_0, dotsacc_1])
erlps__list_length_tail__3 [(ErlangCons (ErlangTuple [_, len_0,
                                                      dots_1, _]) es_2),
                            acc_3, dotsacc_4]
  =
  let   
    lop_7 =
      (BIF.erlang__op_plus [acc_3, (ErlangInt (DBI.fromInt 1))])
  in let arg_6 = (BIF.erlang__op_plus [lop_7, len_0])
  in let arg_11 = (BIF.erlang__op_plus [dotsacc_4, dots_1])
  in (erlps__list_length_tail__3 [es_2, arg_6, arg_11])
erlps__list_length_tail__3 [(ErlangTuple [_, len_0, dots_1, _]),
                            acc_2, dotsacc_3]
  =
  let   
    lop_5 =
      (BIF.erlang__op_plus [acc_2, (ErlangInt (DBI.fromInt 1))])
  in let tup_el_4 = (BIF.erlang__op_plus [lop_5, len_0])
  in let tup_el_9 = (BIF.erlang__op_plus [dotsacc_3, dots_1])
  in (ErlangTuple [tup_el_4, tup_el_9])
erlps__list_length_tail__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__list_length_tail__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_list__4 :: ErlangFun
erlps__printable_list__4 [_l_0, (ErlangInt num_1), _t_2, _enc_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangAtom "false")
erlps__printable_list__4 [l_0, _d_1, t_2, (ErlangAtom "latin1")]
  | (weakLt t_2 (ErlangInt (DBI.fromInt 0))) =
  (BIF.do_remote_fun_call "Io.Lib"
     "erlps__printable_latin1_list__1" [l_0])
erlps__printable_list__4 [l_0, _d_1, t_2, (ErlangAtom "latin1")]
  | (weakGeq t_2 (ErlangInt (DBI.fromInt 0))) =
  let    n_5 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 2))])
  in let case_6 = (erlps__printable_latin1_list__2 [l_0, n_5])
  in
    case case_6 of
      (ErlangAtom "all") -> (ErlangAtom "true")
      (ErlangInt num_9) | ((ErlangInt num_9) ==
                             (ErlangInt (DBI.fromInt 0))) ->
        let
          match_expr_13 =
            (BIF.do_remote_fun_call "Lists" "erlps__split__2" [n_5, l_0])
        in
          case match_expr_13 of
            (ErlangTuple [l1_12, _]) ->
              (ErlangTuple [(ErlangAtom "true"), l1_12])
            _ -> (EXC.badmatch match_expr_13)
      _nc_16 -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__printable_list__4 [l_0, _d_1, t_2, _unicode_3]
  | (weakGeq t_2 (ErlangInt (DBI.fromInt 0))) =
  let n_6 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 2))])
  in
    (EXC.tryOfCatch
       (\ _ ->
          (BIF.do_remote_fun_call "String" "erlps__slice__3"
             [l_0, (ErlangInt (DBI.fromInt 0)), n_6]))
       (\ of_10 ->
          case of_10 of
            (ErlangEmptyList) -> (ErlangAtom "false")
            prefix_12 ->
              let   
                arg_15 =
                  (BIF.do_remote_fun_call "Lists" "erlps__flatlength__1"
                     [prefix_12])
              in let case_13 = (erlps__is_flat__2 [l_0, arg_15])
              in
                case case_13 of
                  (ErlangAtom "true") ->
                    let
                      case_17 =
                        (BIF.do_remote_fun_call "String" "erlps__equal__2"
                           [prefix_12, l_0])
                    in
                      case case_17 of
                        (ErlangAtom "true") ->
                          (BIF.do_remote_fun_call "Io.Lib"
                             "erlps__printable_list__1" [l_0])
                        (ErlangAtom "false") ->
                          let
                            lop_21 =
                              (BIF.do_remote_fun_call "Io.Lib"
                                 "erlps__printable_list__1" [prefix_12])
                          in
                            case lop_21 of
                              (ErlangAtom "false") -> (ErlangAtom "false")
                              (ErlangAtom "true") ->
                                (ErlangTuple [(ErlangAtom "true"), prefix_12])
                              _ -> (EXC.badarg1 lop_21)
                        something_else -> (EXC.case_clause something_else)
                  (ErlangAtom "false") -> (ErlangAtom "false")
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.try_clause something_else))
       (\ ex_11 ->
          case ex_11 of
            (ErlangTuple [_, _, _]) -> (ErlangAtom "false")
            ex_11 -> (EXC.raise ex_11)))
erlps__printable_list__4 [l_0, _d_1, t_2, _uni_3]
  | (weakLt t_2 (ErlangInt (DBI.fromInt 0))) =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__printable_list__1"
     [l_0])
erlps__printable_list__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__printable_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_flat__2 :: ErlangFun
erlps__is_flat__2 [_l_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__is_flat__2 [(ErlangCons c_0 cs_1), n_2] | (isEInt c_0) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__is_flat__2 [cs_1, arg_4])
erlps__is_flat__2 [_, _n_0] = (ErlangAtom "false")
erlps__is_flat__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__is_flat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_bin0__4 :: ErlangFun
erlps__printable_bin0__4 [bin_0, d_1, t_2, enc_3] =
  let   
    case_4 =
      (BIF.erlang__op_greaterEq [d_1, (ErlangInt (DBI.fromInt 0))])
  in let
    len_19 =
      case case_4 of
        (ErlangAtom "true") ->
          let   
            arg_7 = (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 4)), d_1])
          in let arg_10 = (BIF.erlang__byte_size__1 [bin_0])
          in let dchars_12 = (BIF.erlang__min__2 [arg_7, arg_10])
          in let
            case_13 =
              (BIF.erlang__op_greaterEq [t_2, (ErlangInt (DBI.fromInt 0))])
          in
            case case_13 of
              (ErlangAtom "true") -> (BIF.erlang__min__2 [t_2, dchars_12])
              (ErlangAtom "false") -> dchars_12
              something_else -> (EXC.case_clause something_else)
        (ErlangAtom "false") | (weakLt t_2
                                  (ErlangInt (DBI.fromInt 0))) ->
          (BIF.erlang__byte_size__1 [bin_0])
        (ErlangAtom "false") | (weakGeq t_2
                                  (ErlangInt (DBI.fromInt 0))) ->
          t_2
        something_else -> (EXC.case_clause something_else)
  in (erlps__printable_bin__4 [bin_0, len_19, d_1, enc_3])
erlps__printable_bin0__4 [arg_24, arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__printable_bin0__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_bin__4 :: ErlangFun
erlps__printable_bin__4 [_bin_0, (ErlangInt num_1), _d_2, _enc_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "false")
erlps__printable_bin__4 [bin_0, len_1, d_2,
                         (ErlangAtom "latin1")]
  =
  let   
    n_5 = (BIF.erlang__min__2 [(ErlangInt (DBI.fromInt 20)), len_1])
  in let
    l_9 =
      (BIF.erlang__binary_to_list__3
         [bin_0, (ErlangInt (DBI.fromInt 1)), n_5])
  in let case_10 = (erlps__printable_latin1_list__2 [l_9, n_5])
  in
    case case_10 of
      (ErlangAtom "all") | ((ErlangAtom "true") ==
                              (falsifyErrors
                                 (\ _ ->
                                    let
                                      rop_14 =
                                        (BIF.erlang__byte_size__1 [bin_0])
                                    in
                                      (BIF.erlang__op_exactEq
                                         [n_5, rop_14])))) ->
        (ErlangTuple [(ErlangAtom "true"), l_9])
      (ErlangAtom "all") | ((==) n_5 len_1) ->
        (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "true"), l_9])
      (ErlangAtom "all") ->
        let   
          arg_23 = (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), n_5])
        in let arg_26 = (BIF.erlang__op_minus [len_1, n_5])
        in let
          case_21 = (erlps__printable_bin1__3 [bin_0, arg_23, arg_26])
        in
          case case_21 of
            (ErlangInt num_29) | ((ErlangInt num_29) ==
                                    (ErlangInt (DBI.fromInt 0)))
                               , ((ErlangAtom "true") ==
                                    (falsifyErrors
                                       (\ _ ->
                                          let
                                            lop_30 =
                                              (BIF.erlang__byte_size__1 [bin_0])
                                          in
                                            (BIF.erlang__op_exactEq
                                               [lop_30, len_1])))) ->
              let tup_el_34 = (BIF.erlang__binary_to_list__1 [bin_0])
              in (ErlangTuple [(ErlangAtom "true"), tup_el_34])
            nc_36 | ((ErlangAtom "true") ==
                       (falsifyErrors
                          (\ _ ->
                             let
                               lop_37 =
                                 (BIF.erlang__op_greater
                                    [d_2, (ErlangInt (DBI.fromInt 0))])
                             in
                               case lop_37 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   let
                                     lop_40 =
                                       (BIF.erlang__op_minus [len_1, nc_36])
                                   in (BIF.erlang__op_greaterEq [lop_40, d_2])
                                 _ -> (EXC.badarg1 lop_37)))) ->
              let    arg_49 = (BIF.erlang__op_minus [len_1, nc_36])
              in let
                tup_el_46 =
                  (BIF.erlang__binary_to_list__3
                     [bin_0, (ErlangInt (DBI.fromInt 1)), arg_49])
              in
                (ErlangTuple
                   [(ErlangAtom "true"), (ErlangAtom "true"), tup_el_46])
            nc_52 | (isEInt nc_52) -> (ErlangAtom "false")
            something_else -> (EXC.case_clause something_else)
      nc_53 | ((ErlangAtom "true") ==
                 (falsifyErrors
                    (\ _ ->
                       let    lop_55 = (BIF.erlang__is_integer__1 [nc_53])
                       in let
                         lop_54 =
                           case lop_55 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               (BIF.erlang__op_greater
                                  [d_2, (ErlangInt (DBI.fromInt 0))])
                             _ -> (EXC.badarg1 lop_55)
                       in
                         case lop_54 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             let lop_59 = (BIF.erlang__op_minus [n_5, nc_53])
                             in (BIF.erlang__op_greaterEq [lop_59, d_2])
                           _ -> (EXC.badarg1 lop_54)))) ->
        let    arg_68 = (BIF.erlang__op_minus [n_5, nc_53])
        in let
          tup_el_65 =
            (BIF.erlang__binary_to_list__3
               [bin_0, (ErlangInt (DBI.fromInt 1)), arg_68])
        in
          (ErlangTuple
             [(ErlangAtom "true"), (ErlangAtom "true"), tup_el_65])
      nc_71 | (isEInt nc_71) -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__printable_bin__4 [bin_0, len_1, d_2, _uni_3] =
  let case_4 = (erlps__valid_utf8__2 [bin_0, len_1])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let   
          arg_11 =
            (BIF.do_remote_fun_call "Erlang.Io" "erlps__printable_range__0"
               [])
        in let
          case_7 =
            (erlps__printable_unicode__4
               [bin_0, len_1, ErlangEmptyList, arg_11])
        in
          case case_7 of
            (ErlangTuple [_, (ErlangBinary bin_e_12), l_13]) | (BIN.empty
                                                                  bin_e_12) ->
              let    lop_15 = (BIF.erlang__byte_size__1 [bin_0])
              in let rop_17 = (BIF.erlang__length__1 [l_13])
              in let tup_el_14 = (BIF.erlang__op_exactEq [lop_15, rop_17])
              in (ErlangTuple [tup_el_14, l_13])
            (ErlangTuple [nc_20, bin1_21, l_22]) | ((ErlangAtom "true") ==
                                                      (falsifyErrors
                                                         (\ _ ->
                                                            let
                                                              lop_23 =
                                                                (BIF.erlang__op_greater
                                                                   [d_2,
                                                                    (ErlangInt
                                                                       (DBI.fromInt
                                                                          0))])
                                                            in
                                                              case lop_23 of
                                                                (ErlangAtom "false") ->
                                                                  (ErlangAtom
                                                                     "false")
                                                                (ErlangAtom "true") ->
                                                                  let
                                                                    lop_26 =
                                                                      (BIF.erlang__op_minus
                                                                         [len_1,
                                                                          nc_20])
                                                                  in
                                                                    (BIF.erlang__op_greaterEq
                                                                       [lop_26,
                                                                        d_2])
                                                                _ ->
                                                                  (EXC.badarg1
                                                                     lop_23)))) ->
              let    lop_32 = (BIF.erlang__byte_size__1 [bin_0])
              in let rop_34 = (BIF.erlang__byte_size__1 [bin1_21])
              in let lop_31 = (BIF.erlang__op_minus [lop_32, rop_34])
              in let rop_36 = (BIF.erlang__length__1 [l_22])
              in let tup_el_30 = (BIF.erlang__op_exactEq [lop_31, rop_36])
              in (ErlangTuple [tup_el_30, (ErlangAtom "true"), l_22])
            (ErlangTuple [_nc_40, _bin_41, _l_42]) -> (ErlangAtom "false")
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        (erlps__printable_bin__4
           [bin_0, len_1, d_2, (ErlangAtom "latin1")])
      something_else -> (EXC.case_clause something_else)
erlps__printable_bin__4 [arg_47, arg_48, arg_49, arg_50] =
  (EXC.function_clause unit)
erlps__printable_bin__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_bin1__3 :: ErlangFun
erlps__printable_bin1__3 [_bin_0, _start_1, (ErlangInt num_2)]
  | ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangInt (DBI.fromInt 0))
erlps__printable_bin1__3 [bin_0, start_1, len_2] =
  let   
    n_5 =
      (BIF.erlang__min__2 [(ErlangInt (DBI.fromInt 10000)), len_2])
  in let lop_9 = (BIF.erlang__op_plus [start_1, n_5])
  in let
    arg_8 =
      (BIF.erlang__op_minus [lop_9, (ErlangInt (DBI.fromInt 1))])
  in let
    l_13 = (BIF.erlang__binary_to_list__3 [bin_0, start_1, arg_8])
  in let case_14 = (erlps__printable_latin1_list__2 [l_13, n_5])
  in
    case case_14 of
      (ErlangAtom "all") ->
        let    arg_18 = (BIF.erlang__op_plus [start_1, n_5])
        in let arg_21 = (BIF.erlang__op_minus [len_2, n_5])
        in (erlps__printable_bin1__3 [bin_0, arg_18, arg_21])
      nc_24 | (isEInt nc_24) ->
        let rop_26 = (BIF.erlang__op_minus [n_5, nc_24])
        in (BIF.erlang__op_minus [len_2, rop_26])
      something_else -> (EXC.case_clause something_else)
erlps__printable_bin1__3 [arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__printable_bin1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_latin1_list__2 :: ErlangFun
erlps__printable_latin1_list__2 [(ErlangCons _ _),
                                 (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangInt (DBI.fromInt 0))
erlps__printable_latin1_list__2 [(ErlangCons c_0 cs_1), n_2]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 32))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 126)))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons c_0 cs_1), n_2]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 160))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangCons (ErlangInt num_0) cs_1),
                                 n_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 27))) =
  let
    arg_4 = (BIF.erlang__op_minus [n_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__printable_latin1_list__2 [cs_1, arg_4])
erlps__printable_latin1_list__2 [(ErlangEmptyList), _] =
  (ErlangAtom "all")
erlps__printable_latin1_list__2 [_, n_0] = n_0
erlps__printable_latin1_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__printable_latin1_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__valid_utf8__2 :: ErlangFun
erlps__valid_utf8__2 [(ErlangBinary bin_e_0), _]
  | (BIN.empty bin_e_0) =
  (ErlangAtom "true")
erlps__valid_utf8__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__valid_utf8__2 [(ErlangBinary bin_c_0), n_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok r_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  let
    arg_8 = (BIF.erlang__op_minus [n_6, (ErlangInt (DBI.fromInt 1))])
  in (erlps__valid_utf8__2 [r_5, arg_8])
erlps__valid_utf8__2 [_, _] = (ErlangAtom "false")
erlps__valid_utf8__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__valid_utf8__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_unicode__4 :: ErlangFun
erlps__printable_unicode__4 [bin_7@(ErlangBinary bin_c_0), i_8,
                             l_9, range_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok c_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok r_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5)
  , (weakGt i_8 (ErlangInt (DBI.fromInt 0))) =
  let case_11 = (erlps__printable_char__2 [c_3, range_10])
  in
    case case_11 of
      (ErlangAtom "true") ->
        let
          arg_15 =
            (BIF.erlang__op_minus [i_8, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__printable_unicode__4
             [r_6, arg_15, (ErlangCons c_3 l_9), range_10])
      (ErlangAtom "false") ->
        let
          tup_el_24 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_9])
        in (ErlangTuple [i_8, bin_7, tup_el_24])
      something_else -> (EXC.case_clause something_else)
erlps__printable_unicode__4 [bin_0, i_1, l_2, _] =
  let
    tup_el_5 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [l_2])
  in (ErlangTuple [i_1, bin_0, tup_el_5])
erlps__printable_unicode__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__printable_unicode__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_char__2 :: ErlangFun
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangAtom "true")
erlps__printable_char__2 [(ErlangInt num_0), _]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 27))) =
  (ErlangAtom "true")
erlps__printable_char__2 [c_0, (ErlangAtom "latin1")] =
  let   
    lop_2 =
      (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 32))])
  in let
    lop_1 =
      case lop_2 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          (BIF.erlang__op_lesserEq [c_0, (ErlangInt (DBI.fromInt 126))])
        _ -> (EXC.badarg1 lop_2)
  in
    case lop_1 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") ->
        let
          lop_7 =
            (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 160))])
        in
          case lop_7 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") ->
              (BIF.erlang__op_lesserEq [c_0, (ErlangInt (DBI.fromInt 255))])
            _ -> (EXC.badarg1 lop_7)
      _ -> (EXC.badarg1 lop_1)
erlps__printable_char__2 [c_0, (ErlangAtom "unicode")] =
  let   
    lop_2 =
      (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 32))])
  in let
    lop_1 =
      case lop_2 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          (BIF.erlang__op_lesserEq [c_0, (ErlangInt (DBI.fromInt 126))])
        _ -> (EXC.badarg1 lop_2)
  in
    case lop_1 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") ->
        let   
          lop_8 =
            (BIF.erlang__op_greaterEq [c_0, (ErlangInt (DBI.fromInt 160))])
        in let
          lop_7 =
            case lop_8 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                (BIF.erlang__op_lesser [c_0, (ErlangInt (DBI.fromInt 55296))])
              _ -> (EXC.badarg1 lop_8)
        in
          case lop_7 of
            (ErlangAtom "true") -> (ErlangAtom "true")
            (ErlangAtom "false") ->
              let   
                lop_14 =
                  (BIF.erlang__op_greater
                     [c_0, (ErlangInt (DBI.fromInt 57343))])
              in let
                lop_13 =
                  case lop_14 of
                    (ErlangAtom "false") -> (ErlangAtom "false")
                    (ErlangAtom "true") ->
                      (BIF.erlang__op_lesser
                         [c_0, (ErlangInt (DBI.fromInt 65534))])
                    _ -> (EXC.badarg1 lop_14)
              in
                case lop_13 of
                  (ErlangAtom "true") -> (ErlangAtom "true")
                  (ErlangAtom "false") ->
                    let
                      lop_19 =
                        (BIF.erlang__op_greater
                           [c_0, (ErlangInt (DBI.fromInt 65535))])
                    in
                      case lop_19 of
                        (ErlangAtom "false") -> (ErlangAtom "false")
                        (ErlangAtom "true") ->
                          (BIF.erlang__op_lesserEq
                             [c_0, (ErlangInt (DBI.fromInt 1114111))])
                        _ -> (EXC.badarg1 lop_19)
                  _ -> (EXC.badarg1 lop_13)
            _ -> (EXC.badarg1 lop_7)
      _ -> (EXC.badarg1 lop_1)
erlps__printable_char__2 [arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__printable_char__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_atom__2 :: ErlangFun
erlps__write_atom__2 [a_0, (ErlangAtom "latin1")] =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_atom_as_latin1__1"
     [a_0])
erlps__write_atom__2 [a_0, _uni_1] =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_atom__1" [a_0])
erlps__write_atom__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__write_atom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string__2 :: ErlangFun
erlps__write_string__2 [s_0, (ErlangAtom "latin1")] =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_latin1_string__2"
     [s_0, (ErlangInt (DBI.fromInt 34))])
erlps__write_string__2 [s_0, _uni_1] =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
     [s_0, (ErlangInt (DBI.fromInt 34))])
erlps__write_string__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__write_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand__3 :: ErlangFun
erlps__expand__3 [if_2@(ErlangTuple [_, _,
                                     _dots_1@(ErlangInt num_0),
                                     (ErlangAtom "no_more")]),
                  _t_3, _dd_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  if_2
erlps__expand__3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                              istagged_0, l_1]),
                                _len_2, _, (ErlangAtom "no_more")]),
                  t_3, dd_4]
  =
  let
    match_expr_12 =
      (erlps__expand_list__4
         [l_1, t_3, dd_4, (ErlangInt (DBI.fromInt 2))])
  in
    case match_expr_12 of
      (ErlangTuple [nl_9, nlen_10, ndots_11]) ->
        let
          tup_el_13 =
            (ErlangTuple [(ErlangAtom "tuple"), istagged_0, nl_9])
        in
          (ErlangTuple
             [tup_el_13, nlen_10, ndots_11, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_12)
erlps__expand__3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map"),
                                              pairs_0]),
                                _len_1, _, (ErlangAtom "no_more")]),
                  t_2, dd_3]
  =
  let
    match_expr_11 =
      (erlps__expand_list__4
         [pairs_0, t_2, dd_3, (ErlangInt (DBI.fromInt 3))])
  in
    case match_expr_11 of
      (ErlangTuple [npairs_8, nlen_9, ndots_10]) ->
        let tup_el_12 = (ErlangTuple [(ErlangAtom "map"), npairs_8])
        in
          (ErlangTuple
             [tup_el_12, nlen_9, ndots_10, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_11)
erlps__expand__3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                              k_0, v_1]),
                                _len_2, _, (ErlangAtom "no_more")]),
                  t_3, dd_4]
  =
  let   
    arg_6 = (erlps__tsub__2 [t_3, (ErlangInt (DBI.fromInt 1))])
  in let p1_10 = (erlps__expand__3 [k_0, arg_6, dd_4])
  in
    case p1_10 of
      (ErlangTuple [_, kl_11, kd_12, _]) ->
        let   
          kl1_16 =
            (BIF.erlang__op_plus [kl_11, (ErlangInt (DBI.fromInt 4))])
        in let arg_18 = (erlps__tsub__2 [t_3, kl1_16])
        in let p2_22 = (erlps__expand__3 [v_1, arg_18, dd_4])
        in
          case p2_22 of
            (ErlangTuple [_, vl_23, vd_24, _]) ->
              let   
                tup_el_26 =
                  (ErlangTuple [(ErlangAtom "map_pair"), p1_10, p2_22])
              in let tup_el_30 = (BIF.erlang__op_plus [kl1_16, vl_23])
              in let tup_el_33 = (BIF.erlang__op_plus [kd_12, vd_24])
              in
                (ErlangTuple
                   [tup_el_26, tup_el_30, tup_el_33, (ErlangAtom "no_more")])
            _ -> (EXC.badmatch p2_22)
      _ -> (EXC.badmatch p1_10)
erlps__expand__3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                              (ErlangCons (ErlangTuple [name_0,
                                                                        namel_1]) l_2)]),
                                _len_3, _, (ErlangAtom "no_more")]),
                  t_4, dd_5]
  =
  let   
    arg_9 =
      (BIF.erlang__op_plus [namel_1, (ErlangInt (DBI.fromInt 2))])
  in let
    match_expr_15 = (erlps__expand_list__4 [l_2, t_4, dd_5, arg_9])
  in
    case match_expr_15 of
      (ErlangTuple [nl_12, nlen_13, ndots_14]) ->
        let    head_19 = (ErlangTuple [name_0, namel_1])
        in let
          tup_el_16 =
            (ErlangTuple [(ErlangAtom "record"), (ErlangCons head_19 nl_12)])
        in
          (ErlangTuple
             [tup_el_16, nlen_13, ndots_14, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_15)
erlps__expand__3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "field"),
                                              name_0, namel_1, field_2]),
                                _len_3, _, (ErlangAtom "no_more")]),
                  t_4, dd_5]
  =
  let    arg_7 = (erlps__tsub__2 [t_4, namel_1])
  in let match_expr_14 = (erlps__expand__3 [field_2, arg_7, dd_5])
  in
    case match_expr_14 of
      (ErlangTuple [_s_11, l_12, dots_13, _]) ->
        let   
          tup_el_16 =
            (ErlangTuple
               [(ErlangAtom "field"), name_0, namel_1, match_expr_14])
        in let tup_el_21 = (BIF.erlang__op_plus [namel_1, l_12])
        in
          (ErlangTuple
             [tup_el_16, tup_el_21, dots_13, (ErlangAtom "no_more")])
      _ -> (EXC.badmatch match_expr_14)
erlps__expand__3 [(ErlangTuple [_, _, _, more_0]), t_1, dd_2] =
  (BIF.erlang__apply__2
     [more_0, (ErlangCons t_1 (ErlangCons dd_2 ErlangEmptyList))])
erlps__expand__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__expand__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_list__4 :: ErlangFun
erlps__expand_list__4 [ifs_0, t_1, dd_2, l0_3] =
  let    arg_5 = (erlps__tsub__2 [t_1, l0_3])
  in let l_9 = (erlps__expand_list__3 [ifs_0, arg_5, dd_2])
  in let
    match_expr_15 =
      (erlps__list_length__3 [l_9, l0_3, (ErlangInt (DBI.fromInt 0))])
  in
    case match_expr_15 of
      (ErlangTuple [len_13, dots_14]) ->
        (ErlangTuple [l_9, len_13, dots_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__expand_list__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__expand_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expand_list__3 :: ErlangFun
erlps__expand_list__3 [(ErlangEmptyList), _t_0, _dd_1] =
  ErlangEmptyList
erlps__expand_list__3 [(ErlangCons if_0 ifs_1), t_2, dd_3] =
  let   
    arg_5 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 1))])
  in let elem1_9 = (erlps__expand__3 [if_0, arg_5, dd_3])
  in
    case elem1_9 of
      (ErlangTuple [_, len1_10, _, _]) ->
        let   
          arg_17 =
            (BIF.erlang__op_plus [len1_10, (ErlangInt (DBI.fromInt 1))])
        in let arg_15 = (erlps__tsub__2 [t_2, arg_17])
        in let tail_13 = (erlps__expand_list__3 [ifs_1, arg_15, dd_3])
        in (ErlangCons elem1_9 tail_13)
      _ -> (EXC.badmatch elem1_9)
erlps__expand_list__3 [(ErlangTuple [_, _, _, more_0]), t_1,
                       dd_2]
  =
  (BIF.erlang__apply__2
     [more_0, (ErlangCons t_1 (ErlangCons dd_2 ErlangEmptyList))])
erlps__expand_list__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__expand_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tsub__2 :: ErlangFun
erlps__tsub__2 [t_0, _]
  | (weakLt t_0 (ErlangInt (DBI.fromInt 0))) =
  t_0
erlps__tsub__2 [t_0, e_1] | (weakGeq t_0 e_1) =
  (BIF.erlang__op_minus [t_0, e_1])
erlps__tsub__2 [_, _] = (ErlangInt (DBI.fromInt 0))
erlps__tsub__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__tsub__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind__7 :: ErlangFun
erlps__cind__7 [(ErlangTuple [_s_0, len_1, _, _]), col_2, ll_3,
                m_4, ind_5, ld_6, w_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_11 = (BIF.erlang__op_minus [ll_3, col_2])
             in let rop_10 = (BIF.erlang__op_minus [lop_11, ld_6])
             in let lop_8 = (BIF.erlang__op_lesser [len_1, rop_10])
             in
               case lop_8 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_16 = (BIF.erlang__op_plus [len_1, w_7])
                   in let lop_15 = (BIF.erlang__op_plus [lop_16, ld_6])
                   in (BIF.erlang__op_lesserEq [lop_15, m_4])
                 _ -> (EXC.badarg1 lop_8)))) =
  ind_5
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "list"),
                                            l_0]),
                              _len_1, _, _]),
                col_2, ll_3, m_4, ind_5, ld_6, w_7]
  =
  let   
    arg_9 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_16 = (BIF.erlang__op_plus [w_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cind_list__7
       [l_0, arg_9, ll_3, m_4, ind_5, ld_6, arg_16])
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                            (ErlangAtom "true"), l_0]),
                              _len_1, _, _]),
                col_2, ll_3, m_4, ind_5, ld_6, w_7]
  =
  let
    arg_14 = (BIF.erlang__op_plus [w_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cind_tag_tuple__7
       [l_0, col_2, ll_3, m_4, ind_5, ld_6, arg_14])
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "tuple"),
                                            (ErlangAtom "false"), l_0]),
                              _len_1, _, _]),
                col_2, ll_3, m_4, ind_5, ld_6, w_7]
  =
  let   
    arg_9 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_16 = (BIF.erlang__op_plus [w_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cind_list__7
       [l_0, arg_9, ll_3, m_4, ind_5, ld_6, arg_16])
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map"),
                                            pairs_0]),
                              _len_1, _, _]),
                col_2, ll_3, m_4, ind_5, ld_6, w_7]
  =
  let   
    arg_9 =
      (BIF.erlang__op_plus [col_2, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_16 = (BIF.erlang__op_plus [w_7, (ErlangInt (DBI.fromInt 2))])
  in
    (erlps__cind_map__7
       [pairs_0, arg_9, ll_3, m_4, ind_5, ld_6, arg_16])
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                            (ErlangCons (ErlangTuple [_name_0,
                                                                      nlen_1]) l_2)]),
                              _len_3, _, _]),
                col_4, ll_5, m_6, ind_7, ld_8, w_9]
  =
  let    lop_18 = (BIF.erlang__op_plus [w_9, nlen_1])
  in let
    arg_17 =
      (BIF.erlang__op_plus [lop_18, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cind_record__8
       [l_2, nlen_1, col_4, ll_5, m_6, ind_7, ld_8, arg_17])
erlps__cind__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "bin"),
                                            _s_0]),
                              _len_1, _, _]),
                _col_2, _ll_3, _m_4, ind_5, _ld_6, _w_7]
  =
  ind_5
erlps__cind__7 [(ErlangTuple [_s_0, _len_1, _, _]), _col_2,
                _ll_3, _m_4, ind_5, _ld_6, _w_7]
  =
  ind_5
erlps__cind__7 [arg_8, arg_9, arg_10, arg_11, arg_12, arg_13,
                arg_14]
  =
  (EXC.function_clause unit)
erlps__cind__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_tag_tuple__7 :: ErlangFun
erlps__cind_tag_tuple__7 [(ErlangCons (ErlangTuple [_tag_0,
                                                    tlen_1, _, _]) l_2),
                          col_3, ll_4, m_5, ind_6, ld_7, w_8]
  =
  let   
    tagind_11 =
      (BIF.erlang__op_plus [tlen_1, (ErlangInt (DBI.fromInt 2))])
  in let tcol_14 = (BIF.erlang__op_plus [col_3, tagind_11])
  in
    case (ErlangAtom "true") of
      _ | ((weakGt ind_6 (ErlangInt (DBI.fromInt 0))) &&
             (weakGt tagind_11 ind_6)) ->
        let col1_17 = (BIF.erlang__op_plus [col_3, ind_6])
        in
          case (ErlangAtom "true") of
            _ | ((ErlangAtom "true") ==
                   (falsifyErrors
                      (\ _ ->
                         let    lop_19 = (BIF.erlang__op_plus [m_5, col1_17])
                         in let
                           lop_18 = (BIF.erlang__op_lesserEq [lop_19, ll_4])
                         in
                           case lop_18 of
                             (ErlangAtom "true") -> (ErlangAtom "true")
                             (ErlangAtom "false") ->
                               let
                                 rop_24 =
                                   (BIF.erlang__op_div_strict
                                      [ll_4, (ErlangInt (DBI.fromInt 2))])
                               in (BIF.erlang__op_lesserEq [col1_17, rop_24])
                             _ -> (EXC.badarg1 lop_18)))) ->
              let arg_34 = (BIF.erlang__op_plus [w_8, tlen_1])
              in
                (erlps__cind_tail__8
                   [l_2, col1_17, tcol_14, ll_4, m_5, ind_6, ld_7, arg_34])
            _ -> (BIF.erlang__throw__1 [(ErlangAtom "no_good")])
            _ -> (EXC.if_clause unit)
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let    lop_39 = (BIF.erlang__op_plus [m_5, tcol_14])
                   in let lop_38 = (BIF.erlang__op_lesser [lop_39, ll_4])
                   in
                     case lop_38 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           rop_44 =
                             (BIF.erlang__op_div_strict
                                [ll_4, (ErlangInt (DBI.fromInt 2))])
                         in (BIF.erlang__op_lesser [tcol_14, rop_44])
                       _ -> (EXC.badarg1 lop_38)))) ->
        let    lop_54 = (BIF.erlang__op_plus [w_8, tlen_1])
        in let
          arg_53 =
            (BIF.erlang__op_plus [lop_54, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__cind_list__7
             [l_2, tcol_14, ll_4, m_5, ind_6, ld_7, arg_53])
      _ -> (BIF.erlang__throw__1 [(ErlangAtom "no_good")])
      _ -> (EXC.if_clause unit)
erlps__cind_tag_tuple__7 [arg_59, arg_60, arg_61, arg_62, arg_63,
                          arg_64, arg_65]
  =
  (EXC.function_clause unit)
erlps__cind_tag_tuple__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_map__7 :: ErlangFun
erlps__cind_map__7 [(ErlangCons p_0 ps_1), col_2, ll_3, m_4,
                    ind_5, ld_6, w_7]
  =
  let    arg_13 = (erlps__last_depth__2 [ps_1, ld_6])
  in let
    pw_17 =
      (erlps__cind_pair__7 [p_0, col_2, ll_3, m_4, ind_5, arg_13, w_7])
  in let arg_20 = (BIF.erlang__op_plus [col_2, pw_17])
  in let arg_27 = (BIF.erlang__op_plus [w_7, pw_17])
  in
    (erlps__cind_pairs_tail__8
       [ps_1, col_2, arg_20, ll_3, m_4, ind_5, ld_6, arg_27])
erlps__cind_map__7 [_, _col_0, _ll_1, _m_2, ind_3, _ld_4, _w_5] =
  ind_3
erlps__cind_map__7 [arg_6, arg_7, arg_8, arg_9, arg_10, arg_11,
                    arg_12]
  =
  (EXC.function_clause unit)
erlps__cind_map__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_pairs_tail__8 :: ErlangFun
erlps__cind_pairs_tail__8 [(ErlangCons p_1@(ErlangTuple [_,
                                                         len_0, _, _]) ps_2),
                           col0_3, col_4, ll_5, m_6, ind_7, ld_8, w_9]
  =
  let    ld1_12 = (erlps__last_depth__2 [ps_2, ld_8])
  in let
    elen_15 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_19 =
                       (BIF.erlang__op_exactEq
                          [ld1_12, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_22 =
                               (BIF.erlang__op_plus
                                  [elen_15, (ErlangInt (DBI.fromInt 1))])
                           in let rop_25 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_22, rop_25])
                         _ -> (EXC.badarg1 lop_19)
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_29 = (BIF.erlang__op_plus [w_9, elen_15])
                           in let
                             lop_28 =
                               (BIF.erlang__op_plus
                                  [lop_29, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_28, m_6])
                         _ -> (EXC.badarg1 lop_18)
                   in let
                     lop_16 =
                       case lop_17 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             arg_39 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), p_1])
                           in let
                             arg_37 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 2)), arg_39])
                           in let
                             arg_35 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), arg_37])
                           in let lop_34 = (BIF.erlang__is_list__1 [arg_35])
                           in
                             case lop_34 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   arg_46 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 1)), p_1])
                                 in let
                                   arg_44 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 3)), arg_46])
                                 in let
                                   arg_42 =
                                     (BIF.erlang__element__2
                                        [(ErlangInt (DBI.fromInt 1)), arg_44])
                                 in (BIF.erlang__is_list__1 [arg_42])
                               _ -> (EXC.badarg1 lop_34)
                         _ -> (EXC.badarg1 lop_17)
                   in
                     case lop_16 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_51 =
                             (BIF.erlang__op_greater
                                [ld1_12, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_50 =
                             case lop_51 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_56 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_55 =
                                     (BIF.erlang__op_minus [lop_56, ld1_12])
                                 in (BIF.erlang__op_lesser [elen_15, rop_55])
                               _ -> (EXC.badarg1 lop_51)
                         in let
                           lop_49 =
                             case lop_50 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_61 = (BIF.erlang__op_plus [w_9, elen_15])
                                 in let
                                   lop_60 =
                                     (BIF.erlang__op_plus [lop_61, ld1_12])
                                 in (BIF.erlang__op_lesserEq [lop_60, m_6])
                               _ -> (EXC.badarg1 lop_50)
                         in
                           case lop_49 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let   
                                 arg_71 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), p_1])
                               in let
                                 arg_69 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 2)), arg_71])
                               in let
                                 arg_67 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), arg_69])
                               in let lop_66 = (BIF.erlang__is_list__1 [arg_67])
                               in
                                 case lop_66 of
                                   (ErlangAtom "false") -> (ErlangAtom "false")
                                   (ErlangAtom "true") ->
                                     let   
                                       arg_78 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 1)), p_1])
                                     in let
                                       arg_76 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 3)),
                                             arg_78])
                                     in let
                                       arg_74 =
                                         (BIF.erlang__element__2
                                            [(ErlangInt (DBI.fromInt 1)),
                                             arg_76])
                                     in (BIF.erlang__is_list__1 [arg_74])
                                   _ -> (EXC.badarg1 lop_66)
                             _ -> (EXC.badarg1 lop_49)
                       _ -> (EXC.badarg1 lop_16)))) ->
        let    arg_83 = (BIF.erlang__op_plus [col_4, elen_15])
        in let arg_90 = (BIF.erlang__op_plus [w_9, elen_15])
        in
          (erlps__cind_pairs_tail__8
             [ps_2, col0_3, arg_83, ll_5, m_6, ind_7, ld_8, arg_90])
      _ ->
        let   
          pw_100 =
            (erlps__cind_pair__7
               [p_1, col0_3, ll_5, m_6, ind_7, ld1_12,
                (ErlangInt (DBI.fromInt 0))])
        in let arg_103 = (BIF.erlang__op_plus [col0_3, pw_100])
        in
          (erlps__cind_pairs_tail__8
             [ps_2, col0_3, arg_103, ll_5, m_6, ind_7, ld_8, pw_100])
      _ -> (EXC.if_clause unit)
erlps__cind_pairs_tail__8 [_, _col0_0, _col_1, _ll_2, _m_3,
                           ind_4, _ld_5, _w_6]
  =
  ind_4
erlps__cind_pairs_tail__8 [arg_7, arg_8, arg_9, arg_10, arg_11,
                           arg_12, arg_13, arg_14]
  =
  (EXC.function_clause unit)
erlps__cind_pairs_tail__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_pair__7 :: ErlangFun
erlps__cind_pair__7 [pair_3@(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                                        _key_0, _value_1]),
                                          len_2, _, _]),
                     col_4, ll_5, m_6, _ind_7, ld_8, w_9]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_28 = (BIF.erlang__op_minus [ll_5, col_4])
             in let rop_27 = (BIF.erlang__op_minus [lop_28, ld_8])
             in let lop_25 = (BIF.erlang__op_lesser [len_2, rop_27])
             in
               case lop_25 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_33 = (BIF.erlang__op_plus [len_2, w_9])
                   in let lop_32 = (BIF.erlang__op_plus [lop_33, ld_8])
                   in (BIF.erlang__op_lesserEq [lop_32, m_6])
                 _ -> (EXC.badarg1 lop_25)))) =
  case (ErlangAtom "true") of
    _ | ((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let   
                   arg_15 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 1)), pair_3])
                 in let
                   arg_13 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 2)), arg_15])
                 in let
                   arg_11 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 1)), arg_13])
                 in let lop_10 = (BIF.erlang__is_list__1 [arg_11])
                 in
                   case lop_10 of
                     (ErlangAtom "false") -> (ErlangAtom "false")
                     (ErlangAtom "true") ->
                       let   
                         arg_22 =
                           (BIF.erlang__element__2
                              [(ErlangInt (DBI.fromInt 1)), pair_3])
                       in let
                         arg_20 =
                           (BIF.erlang__element__2
                              [(ErlangInt (DBI.fromInt 3)), arg_22])
                       in let
                         arg_18 =
                           (BIF.erlang__element__2
                              [(ErlangInt (DBI.fromInt 1)), arg_20])
                       in (BIF.erlang__is_list__1 [arg_18])
                     _ -> (EXC.badarg1 lop_10)))) ->
      len_2
    _ -> ll_5
    _ -> (EXC.if_clause unit)
erlps__cind_pair__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "map_pair"),
                                                 k_0, v_1]),
                                   _len_2, _, _]),
                     col0_3, ll_4, m_5, ind_6, ld_7, w0_8]
  =
  let   
    _ = (erlps__cind__7 [k_0, col0_3, ll_4, m_5, ind_6, ld_7, w0_8])
  in let i_17 = (erlps__map_value_indent__1 [ind_6])
  in let arg_19 = (BIF.erlang__op_plus [col0_3, i_17])
  in let
    _ =
      (erlps__cind__7
         [v_1, arg_19, ll_4, m_5, ind_6, ld_7,
          (ErlangInt (DBI.fromInt 0))])
  in ll_4
erlps__cind_pair__7 [arg_27, arg_28, arg_29, arg_30, arg_31,
                     arg_32, arg_33]
  =
  (EXC.function_clause unit)
erlps__cind_pair__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_value_indent__1 :: ErlangFun
erlps__map_value_indent__1 [tind_0] =
  let
    case_1 =
      (BIF.erlang__op_greater [tind_0, (ErlangInt (DBI.fromInt 0))])
  in
    case case_1 of
      (ErlangAtom "true") -> tind_0
      (ErlangAtom "false") -> (ErlangInt (DBI.fromInt 4))
      something_else -> (EXC.case_clause something_else)
erlps__map_value_indent__1 [arg_4] = (EXC.function_clause unit)
erlps__map_value_indent__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_record__8 :: ErlangFun
erlps__cind_record__8 [(ErlangCons f_0 fs_1), nlen_2, col0_3,
                       ll_4, m_5, ind_6, ld_7, w0_8]
  =
  let   
    nind_11 =
      (BIF.erlang__op_plus [nlen_2, (ErlangInt (DBI.fromInt 1))])
  in let
    match_expr_20 =
      (erlps__cind_rec__6 [nind_11, col0_3, ll_4, m_5, ind_6, w0_8])
  in
    case match_expr_20 of
      (ErlangTuple [col_18, w_19]) ->
        let    arg_26 = (erlps__last_depth__2 [fs_1, ld_7])
        in let
          fw_30 =
            (erlps__cind_field__7
               [f_0, col_18, ll_4, m_5, ind_6, arg_26, w_19])
        in let arg_33 = (BIF.erlang__op_plus [col_18, fw_30])
        in let arg_40 = (BIF.erlang__op_plus [w_19, fw_30])
        in
          (erlps__cind_fields_tail__8
             [fs_1, col_18, arg_33, ll_4, m_5, ind_6, ld_7, arg_40])
      _ -> (EXC.badmatch match_expr_20)
erlps__cind_record__8 [_, _nlen_0, _col_1, _ll_2, _m_3, ind_4,
                       _ld_5, _w_6]
  =
  ind_4
erlps__cind_record__8 [arg_7, arg_8, arg_9, arg_10, arg_11,
                       arg_12, arg_13, arg_14]
  =
  (EXC.function_clause unit)
erlps__cind_record__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_fields_tail__8 :: ErlangFun
erlps__cind_fields_tail__8 [(ErlangCons f_1@(ErlangTuple [_,
                                                          len_0, _, _]) fs_2),
                            col0_3, col_4, ll_5, m_6, ind_7, ld_8, w_9]
  =
  let    ld1_12 = (erlps__last_depth__2 [fs_2, ld_8])
  in let
    elen_15 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_19 =
                       (BIF.erlang__op_exactEq
                          [ld1_12, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_22 =
                               (BIF.erlang__op_plus
                                  [elen_15, (ErlangInt (DBI.fromInt 1))])
                           in let rop_25 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_22, rop_25])
                         _ -> (EXC.badarg1 lop_19)
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_29 = (BIF.erlang__op_plus [w_9, elen_15])
                           in let
                             lop_28 =
                               (BIF.erlang__op_plus
                                  [lop_29, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_28, m_6])
                         _ -> (EXC.badarg1 lop_18)
                   in let
                     lop_16 =
                       case lop_17 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             arg_38 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), f_1])
                           in let
                             arg_36 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 4)), arg_38])
                           in let
                             arg_34 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), arg_36])
                           in (BIF.erlang__is_list__1 [arg_34])
                         _ -> (EXC.badarg1 lop_17)
                   in
                     case lop_16 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_43 =
                             (BIF.erlang__op_greater
                                [ld1_12, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_42 =
                             case lop_43 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_48 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_47 =
                                     (BIF.erlang__op_minus [lop_48, ld1_12])
                                 in (BIF.erlang__op_lesser [elen_15, rop_47])
                               _ -> (EXC.badarg1 lop_43)
                         in let
                           lop_41 =
                             case lop_42 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_53 = (BIF.erlang__op_plus [w_9, elen_15])
                                 in let
                                   lop_52 =
                                     (BIF.erlang__op_plus [lop_53, ld1_12])
                                 in (BIF.erlang__op_lesserEq [lop_52, m_6])
                               _ -> (EXC.badarg1 lop_42)
                         in
                           case lop_41 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let   
                                 arg_62 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), f_1])
                               in let
                                 arg_60 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 4)), arg_62])
                               in let
                                 arg_58 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), arg_60])
                               in (BIF.erlang__is_list__1 [arg_58])
                             _ -> (EXC.badarg1 lop_41)
                       _ -> (EXC.badarg1 lop_16)))) ->
        let    arg_67 = (BIF.erlang__op_plus [col_4, elen_15])
        in let arg_74 = (BIF.erlang__op_plus [w_9, elen_15])
        in
          (erlps__cind_fields_tail__8
             [fs_2, col0_3, arg_67, ll_5, m_6, ind_7, ld_8, arg_74])
      _ ->
        let   
          fw_84 =
            (erlps__cind_field__7
               [f_1, col0_3, ll_5, m_6, ind_7, ld1_12,
                (ErlangInt (DBI.fromInt 0))])
        in let arg_87 = (BIF.erlang__op_plus [col_4, fw_84])
        in
          (erlps__cind_fields_tail__8
             [fs_2, col0_3, arg_87, ll_5, m_6, ind_7, ld_8, fw_84])
      _ -> (EXC.if_clause unit)
erlps__cind_fields_tail__8 [_, _col0_0, _col_1, _ll_2, _m_3,
                            ind_4, _ld_5, _w_6]
  =
  ind_4
erlps__cind_fields_tail__8 [arg_7, arg_8, arg_9, arg_10, arg_11,
                            arg_12, arg_13, arg_14]
  =
  (EXC.function_clause unit)
erlps__cind_fields_tail__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_field__7 :: ErlangFun
erlps__cind_field__7 [fl_4@(ErlangTuple [(ErlangTuple [(ErlangAtom "field"),
                                                       _n_0, _nl_1, _f_2]),
                                         len_3, _, _]),
                      col_5, ll_6, m_7, _ind_8, ld_9, w_10]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_21 = (BIF.erlang__op_minus [ll_6, col_5])
             in let rop_20 = (BIF.erlang__op_minus [lop_21, ld_9])
             in let lop_18 = (BIF.erlang__op_lesser [len_3, rop_20])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let    lop_26 = (BIF.erlang__op_plus [len_3, w_10])
                   in let lop_25 = (BIF.erlang__op_plus [lop_26, ld_9])
                   in (BIF.erlang__op_lesserEq [lop_25, m_7])
                 _ -> (EXC.badarg1 lop_18)))) =
  case (ErlangAtom "true") of
    _ | ((ErlangAtom "true") ==
           (falsifyErrors
              (\ _ ->
                 let   
                   arg_15 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 1)), fl_4])
                 in let
                   arg_13 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 4)), arg_15])
                 in let
                   arg_11 =
                     (BIF.erlang__element__2
                        [(ErlangInt (DBI.fromInt 1)), arg_13])
                 in (BIF.erlang__is_list__1 [arg_11])))) ->
      len_3
    _ -> ll_6
    _ -> (EXC.if_clause unit)
erlps__cind_field__7 [(ErlangTuple [(ErlangTuple [(ErlangAtom "field"),
                                                  _name_0, namel_1, f_2]),
                                    _len_3, _, _]),
                      col0_4, ll_5, m_6, ind_7, ld_8, w0_9]
  =
  let    arg_15 = (BIF.erlang__op_plus [w0_9, namel_1])
  in let
    match_expr_20 =
      (erlps__cind_rec__6 [namel_1, col0_4, ll_5, m_6, ind_7, arg_15])
  in
    case match_expr_20 of
      (ErlangTuple [col_18, w_19]) ->
        let
          _ = (erlps__cind__7 [f_2, col_18, ll_5, m_6, ind_7, ld_8, w_19])
        in ll_5
      _ -> (EXC.badmatch match_expr_20)
erlps__cind_field__7 [arg_28, arg_29, arg_30, arg_31, arg_32,
                      arg_33, arg_34]
  =
  (EXC.function_clause unit)
erlps__cind_field__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_rec__6 :: ErlangFun
erlps__cind_rec__6 [rind_0, col0_1, ll_2, m_3, ind_4, w0_5] =
  let   
    lop_6 =
      (BIF.erlang__op_greater [ind_4, (ErlangInt (DBI.fromInt 0))])
  in let rop_9 = (BIF.erlang__op_greater [rind_0, ind_4])
  in let nl_12 = (BIF.erlang__op_and [lop_6, rop_9])
  in let
    dcol_14 =
      case nl_12 of
        (ErlangAtom "true") -> ind_4
        (ErlangAtom "false") -> rind_0
        something_else -> (EXC.case_clause something_else)
  in let col_17 = (BIF.erlang__op_plus [col0_1, dcol_14])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let    lop_19 = (BIF.erlang__op_plus [m_3, col_17])
                   in let lop_18 = (BIF.erlang__op_lesserEq [lop_19, ll_2])
                   in
                     case lop_18 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let
                           rop_24 =
                             (BIF.erlang__op_div_strict
                                [ll_2, (ErlangInt (DBI.fromInt 2))])
                         in (BIF.erlang__op_lesserEq [col_17, rop_24])
                       _ -> (EXC.badarg1 lop_18)))) ->
        let
          w_28 =
            case nl_12 of
              (ErlangAtom "true") -> (ErlangInt (DBI.fromInt 0))
              (ErlangAtom "false") -> w0_5
              something_else -> (EXC.case_clause something_else)
        in (ErlangTuple [col_17, w_28])
      _ -> (BIF.erlang__throw__1 [(ErlangAtom "no_good")])
      _ -> (EXC.if_clause unit)
erlps__cind_rec__6 [arg_32, arg_33, arg_34, arg_35, arg_36,
                    arg_37]
  =
  (EXC.function_clause unit)
erlps__cind_rec__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_list__7 :: ErlangFun
erlps__cind_list__7 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                   _]),
                     _col0_0, _ll_1, _m_2, ind_3, _ld_4, _w_5]
  =
  ind_3
erlps__cind_list__7 [(ErlangCons e_0 es_1), col0_2, ll_3, m_4,
                     ind_5, ld_6, w_7]
  =
  let    arg_13 = (erlps__last_depth__2 [es_1, ld_6])
  in let
    we_17 =
      (erlps__cind_element__7
         [e_0, col0_2, ll_3, m_4, ind_5, arg_13, w_7])
  in let arg_20 = (BIF.erlang__op_plus [col0_2, we_17])
  in let arg_27 = (BIF.erlang__op_plus [w_7, we_17])
  in
    (erlps__cind_tail__8
       [es_1, col0_2, arg_20, ll_3, m_4, ind_5, ld_6, arg_27])
erlps__cind_list__7 [arg_30, arg_31, arg_32, arg_33, arg_34,
                     arg_35, arg_36]
  =
  (EXC.function_clause unit)
erlps__cind_list__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_tail__8 :: ErlangFun
erlps__cind_tail__8 [(ErlangEmptyList), _col0_0, _col_1, _ll_2,
                     _m_3, ind_4, _ld_5, _w_6]
  =
  ind_4
erlps__cind_tail__8 [(ErlangCons e_1@(ErlangTuple [_, len_0, _,
                                                   _]) es_2),
                     col0_3, col_4, ll_5, m_6, ind_7, ld_8, w_9]
  =
  let    ld1_12 = (erlps__last_depth__2 [es_2, ld_8])
  in let
    elen_15 =
      (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), len_0])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_19 =
                       (BIF.erlang__op_exactEq
                          [ld1_12, (ErlangInt (DBI.fromInt 0))])
                   in let
                     lop_18 =
                       case lop_19 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let   
                             lop_22 =
                               (BIF.erlang__op_plus
                                  [elen_15, (ErlangInt (DBI.fromInt 1))])
                           in let rop_25 = (BIF.erlang__op_minus [ll_5, col_4])
                           in (BIF.erlang__op_lesser [lop_22, rop_25])
                         _ -> (EXC.badarg1 lop_19)
                   in let
                     lop_17 =
                       case lop_18 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    lop_29 = (BIF.erlang__op_plus [w_9, elen_15])
                           in let
                             lop_28 =
                               (BIF.erlang__op_plus
                                  [lop_29, (ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_lesserEq [lop_28, m_6])
                         _ -> (EXC.badarg1 lop_18)
                   in let
                     lop_16 =
                       case lop_17 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             arg_34 =
                               (BIF.erlang__element__2
                                  [(ErlangInt (DBI.fromInt 1)), e_1])
                           in (BIF.erlang__is_list__1 [arg_34])
                         _ -> (EXC.badarg1 lop_17)
                   in
                     case lop_16 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_39 =
                             (BIF.erlang__op_greater
                                [ld1_12, (ErlangInt (DBI.fromInt 0))])
                         in let
                           lop_38 =
                             case lop_39 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_44 = (BIF.erlang__op_minus [ll_5, col_4])
                                 in let
                                   rop_43 =
                                     (BIF.erlang__op_minus [lop_44, ld1_12])
                                 in (BIF.erlang__op_lesser [elen_15, rop_43])
                               _ -> (EXC.badarg1 lop_39)
                         in let
                           lop_37 =
                             case lop_38 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 let   
                                   lop_49 = (BIF.erlang__op_plus [w_9, elen_15])
                                 in let
                                   lop_48 =
                                     (BIF.erlang__op_plus [lop_49, ld1_12])
                                 in (BIF.erlang__op_lesserEq [lop_48, m_6])
                               _ -> (EXC.badarg1 lop_38)
                         in
                           case lop_37 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let
                                 arg_54 =
                                   (BIF.erlang__element__2
                                      [(ErlangInt (DBI.fromInt 1)), e_1])
                               in (BIF.erlang__is_list__1 [arg_54])
                             _ -> (EXC.badarg1 lop_37)
                       _ -> (EXC.badarg1 lop_16)))) ->
        let    arg_59 = (BIF.erlang__op_plus [col_4, elen_15])
        in let arg_66 = (BIF.erlang__op_plus [w_9, elen_15])
        in
          (erlps__cind_tail__8
             [es_2, col0_3, arg_59, ll_5, m_6, ind_7, ld_8, arg_66])
      _ ->
        let   
          we_76 =
            (erlps__cind_element__7
               [e_1, col0_3, ll_5, m_6, ind_7, ld1_12,
                (ErlangInt (DBI.fromInt 0))])
        in let arg_79 = (BIF.erlang__op_plus [col0_3, we_76])
        in
          (erlps__cind_tail__8
             [es_2, col0_3, arg_79, ll_5, m_6, ind_7, ld_8, we_76])
      _ -> (EXC.if_clause unit)
erlps__cind_tail__8 [(ErlangTuple [(ErlangAtom "dots"), _, _,
                                   _]),
                     _col0_0, _col_1, _ll_2, _m_3, ind_4, _ld_5, _w_6]
  =
  ind_4
erlps__cind_tail__8 [e_1@(ErlangTuple [_, len_0, _, _]), _col0_2,
                     col_3, ll_4, m_5, ind_6, ld_7, w_8]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_11 =
                 (BIF.erlang__op_plus [len_0, (ErlangInt (DBI.fromInt 1))])
             in let lop_15 = (BIF.erlang__op_minus [ll_4, col_3])
             in let
               rop_18 =
                 (BIF.erlang__op_plus [ld_7, (ErlangInt (DBI.fromInt 1))])
             in let rop_14 = (BIF.erlang__op_minus [lop_15, rop_18])
             in let lop_10 = (BIF.erlang__op_lesser [lop_11, rop_14])
             in let
               lop_9 =
                 case lop_10 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let   
                       lop_23 =
                         (BIF.erlang__op_plus
                            [len_0, (ErlangInt (DBI.fromInt 1))])
                     in let lop_22 = (BIF.erlang__op_plus [lop_23, w_8])
                     in let
                       rop_27 =
                         (BIF.erlang__op_plus
                            [ld_7, (ErlangInt (DBI.fromInt 1))])
                     in let lop_21 = (BIF.erlang__op_plus [lop_22, rop_27])
                     in (BIF.erlang__op_lesserEq [lop_21, m_5])
                   _ -> (EXC.badarg1 lop_10)
             in
               case lop_9 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_31 =
                       (BIF.erlang__element__2
                          [(ErlangInt (DBI.fromInt 1)), e_1])
                   in (BIF.erlang__is_list__1 [arg_31])
                 _ -> (EXC.badarg1 lop_9)))) =
  ind_6
erlps__cind_tail__8 [e_0, _col0_1, col_2, ll_3, m_4, ind_5, ld_6,
                     _w_7]
  =
  let
    arg_13 =
      (BIF.erlang__op_plus [ld_6, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cind__7
       [e_0, col_2, ll_3, m_4, ind_5, arg_13,
        (ErlangInt (DBI.fromInt 0))])
erlps__cind_tail__8 [arg_17, arg_18, arg_19, arg_20, arg_21,
                     arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__cind_tail__8 args =
  (EXC.badarity
     (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cind_element__7 :: ErlangFun
erlps__cind_element__7 [e_1@(ErlangTuple [_, len_0, _, _]),
                        col_2, ll_3, m_4, _ind_5, ld_6, w_7]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_12 = (BIF.erlang__op_minus [ll_3, col_2])
             in let rop_11 = (BIF.erlang__op_minus [lop_12, ld_6])
             in let lop_9 = (BIF.erlang__op_lesser [len_0, rop_11])
             in let
               lop_8 =
                 case lop_9 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     let    lop_17 = (BIF.erlang__op_plus [len_0, w_7])
                     in let lop_16 = (BIF.erlang__op_plus [lop_17, ld_6])
                     in (BIF.erlang__op_lesserEq [lop_16, m_4])
                   _ -> (EXC.badarg1 lop_9)
             in
               case lop_8 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     arg_22 =
                       (BIF.erlang__element__2
                          [(ErlangInt (DBI.fromInt 1)), e_1])
                   in (BIF.erlang__is_list__1 [arg_22])
                 _ -> (EXC.badarg1 lop_8)))) =
  len_0
erlps__cind_element__7 [e_0, col_1, ll_2, m_3, ind_4, ld_5, w_6]
  =
  let
    _ = (erlps__cind__7 [e_0, col_1, ll_2, m_3, ind_4, ld_5, w_6])
  in ll_2
erlps__cind_element__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                        arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__cind_element__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__last_depth__2 :: ErlangFun
erlps__last_depth__2 [(ErlangCons _ _), _ld_0] =
  (ErlangInt (DBI.fromInt 0))
erlps__last_depth__2 [_, ld_0] =
  (BIF.erlang__op_plus [ld_0, (ErlangInt (DBI.fromInt 1))])
erlps__last_depth__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__last_depth__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__while_fail__3 :: ErlangFun
erlps__while_fail__3 [(ErlangEmptyList), _f_0, v_1] = v_1
erlps__while_fail__3 [(ErlangCons a_0 as_1), f_2, v_3] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.erlang__apply__2 [f_2, (ErlangCons a_0 ErlangEmptyList)]))
     (\ ex_7 ->
        case ex_7 of
          (ErlangTuple [(ErlangAtom "throw"), _, _]) ->
            (erlps__while_fail__3 [as_1, f_2, v_3])
          ex_7 -> (EXC.raise ex_7)))
erlps__while_fail__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__while_fail__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__1 :: ErlangFun
erlps__indent__1 [n_0]
  | ((isEInt n_0) && (weakGt n_0 (ErlangInt (DBI.fromInt 0)))) =
  let
    arg_2 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__chars__2 [(ErlangInt (DBI.fromInt 32)), arg_2])
erlps__indent__1 [arg_5] = (EXC.function_clause unit)
erlps__indent__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__2 :: ErlangFun
erlps__indent__2 [(ErlangInt num_0), ind_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons (ErlangInt (DBI.fromInt 32)) ind_1)
erlps__indent__2 [(ErlangInt num_0), ind_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (ErlangCons
     (ErlangCons (ErlangInt (DBI.fromInt 32))
        (ErlangCons (ErlangInt (DBI.fromInt 32)) ErlangEmptyList))
     (ErlangCons
        (ErlangCons (ErlangInt (DBI.fromInt 32))
           (ErlangCons (ErlangInt (DBI.fromInt 32)) ErlangEmptyList))
        ind_1))
erlps__indent__2 [n_0, ind_1]
  | ((isEInt n_0) && (weakGt n_0 (ErlangInt (DBI.fromInt 0)))) =
  let
    head_2 = (erlps__chars__2 [(ErlangInt (DBI.fromInt 32)), n_0])
  in (ErlangCons head_2 ind_1)
erlps__indent__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__indent__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chars__2 :: ErlangFun
erlps__chars__2 [_c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__chars__2 [c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 2))) =
  (ErlangCons c_0 (ErlangCons c_0 ErlangEmptyList))
erlps__chars__2 [c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 3))) =
  (ErlangCons c_0
     (ErlangCons c_0 (ErlangCons c_0 ErlangEmptyList)))
erlps__chars__2 [c_0, n_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_9 = (BIF.erlang__band__2 [n_1, (ErlangInt (DBI.fromInt 1))])
             in
               (BIF.erlang__op_exactEq
                  [lop_9, (ErlangInt (DBI.fromInt 0))])))) =
  let   
    arg_3 = (BIF.erlang__bsr__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let s_6 = (erlps__chars__2 [c_0, arg_3])
  in (ErlangCons s_6 s_6)
erlps__chars__2 [c_0, n_1] =
  let   
    arg_3 = (BIF.erlang__bsr__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let s_6 = (erlps__chars__2 [c_0, arg_3])
  in (ErlangCons c_0 (ErlangCons s_6 s_6))
erlps__chars__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__chars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_option__3 :: ErlangFun
erlps__get_option__3 [key_0, tuplelist_1, default_2] =
  let
    case_3 =
      (BIF.lists__keyfind__3
         [key_0, (ErlangInt (DBI.fromInt 1)), tuplelist_1])
  in
    case case_3 of
      (ErlangAtom "false") -> default_2
      (ErlangTuple [key_7, value_8]) | (key_7 == key_0) -> value_8
      _ -> default_2
      something_else -> (EXC.case_clause something_else)
erlps__get_option__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__get_option__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)