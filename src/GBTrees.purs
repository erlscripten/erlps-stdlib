module Gb.Trees(erlps__empty__0, erlps__is_empty__1,
                erlps__size__1, erlps__lookup__2, erlps__get__2,
                erlps__insert__3, erlps__update__3, erlps__enter__3,
                erlps__delete__2, erlps__delete_any__2, erlps__balance__1,
                erlps__is_defined__2, erlps__keys__1, erlps__values__1,
                erlps__to_list__1, erlps__from_orddict__1, erlps__smallest__1,
                erlps__largest__1, erlps__take__2, erlps__take_any__2,
                erlps__take_smallest__1, erlps__take_largest__1,
                erlps__iterator__1, erlps__iterator_from__2, erlps__next__1,
                erlps__map__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__empty__0 :: ErlangFun
erlps__empty__0 [] =
  (ErlangTuple [(ErlangInt (DBI.fromInt 0)), (ErlangAtom "nil")])
erlps__empty__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty__1 :: ErlangFun
erlps__is_empty__1 [(ErlangTuple [(ErlangInt num_0),
                                  (ErlangAtom "nil")])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__is_empty__1 [_] = (ErlangAtom "false")
erlps__is_empty__1 [arg_0] = (EXC.function_clause unit)
erlps__is_empty__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__size__1 :: ErlangFun
erlps__size__1 [(ErlangTuple [size_0, _])]
  | ((isEInt size_0) &&
       (weakGeq size_0 (ErlangInt (DBI.fromInt 0)))) =
  size_0
erlps__size__1 [arg_1] = (EXC.function_clause unit)
erlps__size__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lookup__2 :: ErlangFun
erlps__lookup__2 [key_0, (ErlangTuple [_, t_1])] =
  (erlps__lookup_1__2 [key_0, t_1])
erlps__lookup__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__lookup__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lookup_1__2 :: ErlangFun
erlps__lookup_1__2 [key_0,
                    (ErlangTuple [key1_1, _, smaller_2, _])]
  | (weakLt key_0 key1_1) =
  (erlps__lookup_1__2 [key_0, smaller_2])
erlps__lookup_1__2 [key_0,
                    (ErlangTuple [key1_1, _, _, bigger_2])]
  | (weakGt key_0 key1_1) =
  (erlps__lookup_1__2 [key_0, bigger_2])
erlps__lookup_1__2 [_, (ErlangTuple [_, value_0, _, _])] =
  (ErlangTuple [(ErlangAtom "value"), value_0])
erlps__lookup_1__2 [_, (ErlangAtom "nil")] = (ErlangAtom "none")
erlps__lookup_1__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__lookup_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_defined__2 :: ErlangFun
erlps__is_defined__2 [key_0, (ErlangTuple [_, t_1])] =
  (erlps__is_defined_1__2 [key_0, t_1])
erlps__is_defined__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__is_defined__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_defined_1__2 :: ErlangFun
erlps__is_defined_1__2 [key_0,
                        (ErlangTuple [key1_1, _, smaller_2, _])]
  | (weakLt key_0 key1_1) =
  (erlps__is_defined_1__2 [key_0, smaller_2])
erlps__is_defined_1__2 [key_0,
                        (ErlangTuple [key1_1, _, _, bigger_2])]
  | (weakGt key_0 key1_1) =
  (erlps__is_defined_1__2 [key_0, bigger_2])
erlps__is_defined_1__2 [_, (ErlangTuple [_, _, _, _])] =
  (ErlangAtom "true")
erlps__is_defined_1__2 [_, (ErlangAtom "nil")] =
  (ErlangAtom "false")
erlps__is_defined_1__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__is_defined_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get__2 :: ErlangFun
erlps__get__2 [key_0, (ErlangTuple [_, t_1])] =
  (erlps__get_1__2 [key_0, t_1])
erlps__get__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__get__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_1__2 :: ErlangFun
erlps__get_1__2 [key_0, (ErlangTuple [key1_1, _, smaller_2, _])]
  | (weakLt key_0 key1_1) =
  (erlps__get_1__2 [key_0, smaller_2])
erlps__get_1__2 [key_0, (ErlangTuple [key1_1, _, _, bigger_2])]
  | (weakGt key_0 key1_1) =
  (erlps__get_1__2 [key_0, bigger_2])
erlps__get_1__2 [_, (ErlangTuple [_, value_0, _, _])] = value_0
erlps__get_1__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__get_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update__3 :: ErlangFun
erlps__update__3 [key_0, val_1, (ErlangTuple [s_2, t_3])] =
  let t1_7 = (erlps__update_1__3 [key_0, val_1, t_3])
  in (ErlangTuple [s_2, t1_7])
erlps__update__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__update__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_1__3 :: ErlangFun
erlps__update_1__3 [key_0, value_1,
                    (ErlangTuple [key1_2, v_3, smaller_4, bigger_5])]
  | (weakLt key_0 key1_2) =
  let tup_el_8 = (erlps__update_1__3 [key_0, value_1, smaller_4])
  in (ErlangTuple [key1_2, v_3, tup_el_8, bigger_5])
erlps__update_1__3 [key_0, value_1,
                    (ErlangTuple [key1_2, v_3, smaller_4, bigger_5])]
  | (weakGt key_0 key1_2) =
  let tup_el_9 = (erlps__update_1__3 [key_0, value_1, bigger_5])
  in (ErlangTuple [key1_2, v_3, smaller_4, tup_el_9])
erlps__update_1__3 [key_0, value_1,
                    (ErlangTuple [_, _, smaller_2, bigger_3])]
  =
  (ErlangTuple [key_0, value_1, smaller_2, bigger_3])
erlps__update_1__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__update_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert__3 :: ErlangFun
erlps__insert__3 [key_0, val_1, (ErlangTuple [s_2, t_3])]
  | (isEInt s_2) =
  let   
    s1_6 = (BIF.erlang__op_plus [s_2, (ErlangInt (DBI.fromInt 1))])
  in let arg_12 = (BIF.erlang__op_mult [s1_6, s1_6])
  in let
    tup_el_8 = (erlps__insert_1__4 [key_0, val_1, t_3, arg_12])
  in (ErlangTuple [s1_6, tup_el_8])
erlps__insert__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__insert__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_1__4 :: ErlangFun
erlps__insert_1__4 [key_0, value_1,
                    (ErlangTuple [key1_2, v_3, smaller_4, bigger_5]), s_6]
  | (weakLt key_0 key1_2) =
  let   
    arg_11 = (BIF.erlang__bsr__2 [s_6, (ErlangInt (DBI.fromInt 1))])
  in let
    case_7 = (erlps__insert_1__4 [key_0, value_1, smaller_4, arg_11])
  in
    case case_7 of
      (ErlangTuple [t1_14, h1_15, s1_16]) ->
        let    t_21 = (ErlangTuple [key1_2, v_3, t1_14, bigger_5])
        in let match_expr_25 = (erlps__count__1 [bigger_5])
        in
          case match_expr_25 of
            (ErlangTuple [h2_23, s2_24]) ->
              let    lop_26 = (BIF.erlang__max__2 [h1_15, h2_23])
              in let
                h_30 =
                  (BIF.erlang__bsl__2 [lop_26, (ErlangInt (DBI.fromInt 1))])
              in let lop_31 = (BIF.erlang__op_plus [s1_16, s2_24])
              in let
                ss_35 =
                  (BIF.erlang__op_plus [lop_31, (ErlangInt (DBI.fromInt 1))])
              in let p_38 = (BIF.erlang__op_mult [ss_35, ss_35])
              in
                case (ErlangAtom "true") of
                  _ | (weakGt h_30 p_38) -> (erlps__balance__2 [t_21, ss_35])
                  _ -> (ErlangTuple [t_21, h_30, ss_35])
                  _ -> (EXC.if_clause unit)
            _ -> (EXC.badmatch match_expr_25)
      t1_44 -> (ErlangTuple [key1_2, v_3, t1_44, bigger_5])
      something_else -> (EXC.case_clause something_else)
erlps__insert_1__4 [key_0, value_1,
                    (ErlangTuple [key1_2, v_3, smaller_4, bigger_5]), s_6]
  | (weakGt key_0 key1_2) =
  let   
    arg_11 = (BIF.erlang__bsr__2 [s_6, (ErlangInt (DBI.fromInt 1))])
  in let
    case_7 = (erlps__insert_1__4 [key_0, value_1, bigger_5, arg_11])
  in
    case case_7 of
      (ErlangTuple [t1_14, h1_15, s1_16]) ->
        let    t_21 = (ErlangTuple [key1_2, v_3, smaller_4, t1_14])
        in let match_expr_25 = (erlps__count__1 [smaller_4])
        in
          case match_expr_25 of
            (ErlangTuple [h2_23, s2_24]) ->
              let    lop_26 = (BIF.erlang__max__2 [h1_15, h2_23])
              in let
                h_30 =
                  (BIF.erlang__bsl__2 [lop_26, (ErlangInt (DBI.fromInt 1))])
              in let lop_31 = (BIF.erlang__op_plus [s1_16, s2_24])
              in let
                ss_35 =
                  (BIF.erlang__op_plus [lop_31, (ErlangInt (DBI.fromInt 1))])
              in let p_38 = (BIF.erlang__op_mult [ss_35, ss_35])
              in
                case (ErlangAtom "true") of
                  _ | (weakGt h_30 p_38) -> (erlps__balance__2 [t_21, ss_35])
                  _ -> (ErlangTuple [t_21, h_30, ss_35])
                  _ -> (EXC.if_clause unit)
            _ -> (EXC.badmatch match_expr_25)
      t1_44 -> (ErlangTuple [key1_2, v_3, smaller_4, t1_44])
      something_else -> (EXC.case_clause something_else)
erlps__insert_1__4 [key_0, value_1, (ErlangAtom "nil"), s_2]
  | ((==) s_2 (ErlangInt (DBI.fromInt 0))) =
  let
    tup_el_3 =
      (ErlangTuple
         [key_0, value_1, (ErlangAtom "nil"), (ErlangAtom "nil")])
  in
    (ErlangTuple
       [tup_el_3, (ErlangInt (DBI.fromInt 1)),
        (ErlangInt (DBI.fromInt 1))])
erlps__insert_1__4 [key_0, value_1, (ErlangAtom "nil"), _s_2] =
  (ErlangTuple
     [key_0, value_1, (ErlangAtom "nil"), (ErlangAtom "nil")])
erlps__insert_1__4 [key_0, _, _, _] =
  let arg_1 = (ErlangTuple [(ErlangAtom "key_exists"), key_0])
  in (BIF.erlang__error__1 [arg_1])
erlps__insert_1__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__insert_1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__enter__3 :: ErlangFun
erlps__enter__3 [key_0, val_1, t_2] =
  let case_3 = (erlps__is_defined__2 [key_0, t_2])
  in
    case case_3 of
      (ErlangAtom "true") -> (erlps__update__3 [key_0, val_1, t_2])
      (ErlangAtom "false") -> (erlps__insert__3 [key_0, val_1, t_2])
      something_else -> (EXC.case_clause something_else)
erlps__enter__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__enter__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count__1 :: ErlangFun
erlps__count__1 [(ErlangTuple [_, _, (ErlangAtom "nil"),
                               (ErlangAtom "nil")])]
  =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 1))])
erlps__count__1 [(ErlangTuple [_, _, sm_0, bi_1])] =
  let match_expr_5 = (erlps__count__1 [sm_0])
  in
    case match_expr_5 of
      (ErlangTuple [h1_3, s1_4]) ->
        let match_expr_9 = (erlps__count__1 [bi_1])
        in
          case match_expr_9 of
            (ErlangTuple [h2_7, s2_8]) ->
              let    lop_11 = (BIF.erlang__max__2 [h1_3, h2_7])
              in let
                tup_el_10 =
                  (BIF.erlang__bsl__2 [lop_11, (ErlangInt (DBI.fromInt 1))])
              in let lop_16 = (BIF.erlang__op_plus [s1_4, s2_8])
              in let
                tup_el_15 =
                  (BIF.erlang__op_plus [lop_16, (ErlangInt (DBI.fromInt 1))])
              in (ErlangTuple [tup_el_10, tup_el_15])
            _ -> (EXC.badmatch match_expr_9)
      _ -> (EXC.badmatch match_expr_5)
erlps__count__1 [(ErlangAtom "nil")] =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 0))])
erlps__count__1 [arg_2] = (EXC.function_clause unit)
erlps__count__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__balance__1 :: ErlangFun
erlps__balance__1 [(ErlangTuple [s_0, t_1])] =
  let tup_el_3 = (erlps__balance__2 [t_1, s_0])
  in (ErlangTuple [s_0, tup_el_3])
erlps__balance__1 [arg_6] = (EXC.function_clause unit)
erlps__balance__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__balance__2 :: ErlangFun
erlps__balance__2 [t_0, s_1] =
  let arg_2 = (erlps__to_list_1__1 [t_0])
  in (erlps__balance_list__2 [arg_2, s_1])
erlps__balance__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__balance__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__balance_list__2 :: ErlangFun
erlps__balance_list__2 [l_0, s_1] =
  let match_expr_5 = (erlps__balance_list_1__2 [l_0, s_1])
  in
    case match_expr_5 of
      (ErlangTuple [t_4, (ErlangEmptyList)]) -> t_4
      _ -> (EXC.badmatch match_expr_5)
erlps__balance_list__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__balance_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__balance_list_1__2 :: ErlangFun
erlps__balance_list_1__2 [l_0, s_1]
  | (weakGt s_1 (ErlangInt (DBI.fromInt 1))) =
  let   
    sm_4 = (BIF.erlang__op_minus [s_1, (ErlangInt (DBI.fromInt 1))])
  in let
    s2_7 =
      (BIF.erlang__op_div_strict [sm_4, (ErlangInt (DBI.fromInt 2))])
  in let s1_10 = (BIF.erlang__op_minus [sm_4, s2_7])
  in let match_expr_17 = (erlps__balance_list_1__2 [l_0, s1_10])
  in
    case match_expr_17 of
      (ErlangTuple [t1_13,
                    (ErlangCons (ErlangTuple [k_14, v_15]) l1_16)]) ->
        let match_expr_22 = (erlps__balance_list_1__2 [l1_16, s2_7])
        in
          case match_expr_22 of
            (ErlangTuple [t2_20, l2_21]) ->
              let t_27 = (ErlangTuple [k_14, v_15, t1_13, t2_20])
              in (ErlangTuple [t_27, l2_21])
            _ -> (EXC.badmatch match_expr_22)
      _ -> (EXC.badmatch match_expr_17)
erlps__balance_list_1__2 [(ErlangCons (ErlangTuple [key_0,
                                                    val_1]) l_2),
                          (ErlangInt num_3)]
  | ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 1))) =
  let
    tup_el_4 =
      (ErlangTuple
         [key_0, val_1, (ErlangAtom "nil"), (ErlangAtom "nil")])
  in (ErlangTuple [tup_el_4, l_2])
erlps__balance_list_1__2 [l_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangTuple [(ErlangAtom "nil"), l_0])
erlps__balance_list_1__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__balance_list_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_orddict__1 :: ErlangFun
erlps__from_orddict__1 [l_0] =
  let    s_2 = (BIF.erlang__length__1 [l_0])
  in let tup_el_4 = (erlps__balance_list__2 [l_0, s_2])
  in (ErlangTuple [s_2, tup_el_4])
erlps__from_orddict__1 [arg_7] = (EXC.function_clause unit)
erlps__from_orddict__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__delete_any__2 :: ErlangFun
erlps__delete_any__2 [key_0, t_1] =
  let case_2 = (erlps__is_defined__2 [key_0, t_1])
  in
    case case_2 of
      (ErlangAtom "true") -> (erlps__delete__2 [key_0, t_1])
      (ErlangAtom "false") -> t_1
      something_else -> (EXC.case_clause something_else)
erlps__delete_any__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__delete_any__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__delete__2 :: ErlangFun
erlps__delete__2 [key_0, (ErlangTuple [s_1, t_2])]
  | ((isEInt s_1) && (weakGeq s_1 (ErlangInt (DBI.fromInt 0)))) =
  let   
    tup_el_3 =
      (BIF.erlang__op_minus [s_1, (ErlangInt (DBI.fromInt 1))])
  in let tup_el_6 = (erlps__delete_1__2 [key_0, t_2])
  in (ErlangTuple [tup_el_3, tup_el_6])
erlps__delete__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__delete__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__delete_1__2 :: ErlangFun
erlps__delete_1__2 [key_0,
                    (ErlangTuple [key1_1, value_2, smaller_3, larger_4])]
  | (weakLt key_0 key1_1) =
  let smaller1_7 = (erlps__delete_1__2 [key_0, smaller_3])
  in (ErlangTuple [key1_1, value_2, smaller1_7, larger_4])
erlps__delete_1__2 [key_0,
                    (ErlangTuple [key1_1, value_2, smaller_3, bigger_4])]
  | (weakGt key_0 key1_1) =
  let bigger1_7 = (erlps__delete_1__2 [key_0, bigger_4])
  in (ErlangTuple [key1_1, value_2, smaller_3, bigger1_7])
erlps__delete_1__2 [_, (ErlangTuple [_, _, smaller_0, larger_1])]
  =
  (erlps__merge__2 [smaller_0, larger_1])
erlps__delete_1__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__delete_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge__2 :: ErlangFun
erlps__merge__2 [smaller_0, (ErlangAtom "nil")] = smaller_0
erlps__merge__2 [(ErlangAtom "nil"), larger_0] = larger_0
erlps__merge__2 [smaller_0, larger_1] =
  let match_expr_6 = (erlps__take_smallest1__1 [larger_1])
  in
    case match_expr_6 of
      (ErlangTuple [key_3, value_4, larger1_5]) ->
        (ErlangTuple [key_3, value_4, smaller_0, larger1_5])
      _ -> (EXC.badmatch match_expr_6)
erlps__merge__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__merge__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_any__2 :: ErlangFun
erlps__take_any__2 [key_0, tree_1] =
  let case_2 = (erlps__is_defined__2 [key_0, tree_1])
  in
    case case_2 of
      (ErlangAtom "true") -> (erlps__take__2 [key_0, tree_1])
      (ErlangAtom "false") -> (ErlangAtom "error")
      something_else -> (EXC.case_clause something_else)
erlps__take_any__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__take_any__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take__2 :: ErlangFun
erlps__take__2 [key_0, (ErlangTuple [s_1, t_2])]
  | ((isEInt s_1) && (weakGeq s_1 (ErlangInt (DBI.fromInt 0)))) =
  let match_expr_7 = (erlps__take_1__2 [key_0, t_2])
  in
    case match_expr_7 of
      (ErlangTuple [value_5, res_6]) ->
        let   
          tup_el_10 =
            (BIF.erlang__op_minus [s_1, (ErlangInt (DBI.fromInt 1))])
        in let tup_el_9 = (ErlangTuple [tup_el_10, res_6])
        in (ErlangTuple [value_5, tup_el_9])
      _ -> (EXC.badmatch match_expr_7)
erlps__take__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__take__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_1__2 :: ErlangFun
erlps__take_1__2 [key_0,
                  (ErlangTuple [key1_1, value_2, smaller_3, larger_4])]
  | (weakLt key_0 key1_1) =
  let match_expr_9 = (erlps__take_1__2 [key_0, smaller_3])
  in
    case match_expr_9 of
      (ErlangTuple [value2_7, smaller1_8]) ->
        let
          tup_el_11 = (ErlangTuple [key1_1, value_2, smaller1_8, larger_4])
        in (ErlangTuple [value2_7, tup_el_11])
      _ -> (EXC.badmatch match_expr_9)
erlps__take_1__2 [key_0,
                  (ErlangTuple [key1_1, value_2, smaller_3, bigger_4])]
  | (weakGt key_0 key1_1) =
  let match_expr_9 = (erlps__take_1__2 [key_0, bigger_4])
  in
    case match_expr_9 of
      (ErlangTuple [value2_7, bigger1_8]) ->
        let
          tup_el_11 = (ErlangTuple [key1_1, value_2, smaller_3, bigger1_8])
        in (ErlangTuple [value2_7, tup_el_11])
      _ -> (EXC.badmatch match_expr_9)
erlps__take_1__2 [_,
                  (ErlangTuple [_key_0, value_1, smaller_2, larger_3])]
  =
  let tup_el_5 = (erlps__merge__2 [smaller_2, larger_3])
  in (ErlangTuple [value_1, tup_el_5])
erlps__take_1__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__take_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_smallest__1 :: ErlangFun
erlps__take_smallest__1 [(ErlangTuple [size_0, tree_1])]
  | ((isEInt size_0) &&
       (weakGeq size_0 (ErlangInt (DBI.fromInt 0)))) =
  let match_expr_6 = (erlps__take_smallest1__1 [tree_1])
  in
    case match_expr_6 of
      (ErlangTuple [key_3, value_4, larger_5]) ->
        let   
          tup_el_10 =
            (BIF.erlang__op_minus [size_0, (ErlangInt (DBI.fromInt 1))])
        in let tup_el_9 = (ErlangTuple [tup_el_10, larger_5])
        in (ErlangTuple [key_3, value_4, tup_el_9])
      _ -> (EXC.badmatch match_expr_6)
erlps__take_smallest__1 [arg_14] = (EXC.function_clause unit)
erlps__take_smallest__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_smallest1__1 :: ErlangFun
erlps__take_smallest1__1 [(ErlangTuple [key_0, value_1,
                                        (ErlangAtom "nil"), larger_2])]
  =
  (ErlangTuple [key_0, value_1, larger_2])
erlps__take_smallest1__1 [(ErlangTuple [key_0, value_1,
                                        smaller_2, larger_3])]
  =
  let match_expr_8 = (erlps__take_smallest1__1 [smaller_2])
  in
    case match_expr_8 of
      (ErlangTuple [key1_5, value1_6, smaller1_7]) ->
        let
          tup_el_11 = (ErlangTuple [key_0, value_1, smaller1_7, larger_3])
        in (ErlangTuple [key1_5, value1_6, tup_el_11])
      _ -> (EXC.badmatch match_expr_8)
erlps__take_smallest1__1 [arg_16] = (EXC.function_clause unit)
erlps__take_smallest1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__smallest__1 :: ErlangFun
erlps__smallest__1 [(ErlangTuple [_, tree_0])] =
  (erlps__smallest_1__1 [tree_0])
erlps__smallest__1 [arg_2] = (EXC.function_clause unit)
erlps__smallest__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__smallest_1__1 :: ErlangFun
erlps__smallest_1__1 [(ErlangTuple [key_0, value_1,
                                    (ErlangAtom "nil"), _larger_2])]
  =
  (ErlangTuple [key_0, value_1])
erlps__smallest_1__1 [(ErlangTuple [_key_0, _value_1, smaller_2,
                                    _larger_3])]
  =
  (erlps__smallest_1__1 [smaller_2])
erlps__smallest_1__1 [arg_5] = (EXC.function_clause unit)
erlps__smallest_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_largest__1 :: ErlangFun
erlps__take_largest__1 [(ErlangTuple [size_0, tree_1])]
  | ((isEInt size_0) &&
       (weakGeq size_0 (ErlangInt (DBI.fromInt 0)))) =
  let match_expr_6 = (erlps__take_largest1__1 [tree_1])
  in
    case match_expr_6 of
      (ErlangTuple [key_3, value_4, smaller_5]) ->
        let   
          tup_el_10 =
            (BIF.erlang__op_minus [size_0, (ErlangInt (DBI.fromInt 1))])
        in let tup_el_9 = (ErlangTuple [tup_el_10, smaller_5])
        in (ErlangTuple [key_3, value_4, tup_el_9])
      _ -> (EXC.badmatch match_expr_6)
erlps__take_largest__1 [arg_14] = (EXC.function_clause unit)
erlps__take_largest__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__take_largest1__1 :: ErlangFun
erlps__take_largest1__1 [(ErlangTuple [key_0, value_1, smaller_2,
                                       (ErlangAtom "nil")])]
  =
  (ErlangTuple [key_0, value_1, smaller_2])
erlps__take_largest1__1 [(ErlangTuple [key_0, value_1, smaller_2,
                                       larger_3])]
  =
  let match_expr_8 = (erlps__take_largest1__1 [larger_3])
  in
    case match_expr_8 of
      (ErlangTuple [key1_5, value1_6, larger1_7]) ->
        let
          tup_el_11 = (ErlangTuple [key_0, value_1, smaller_2, larger1_7])
        in (ErlangTuple [key1_5, value1_6, tup_el_11])
      _ -> (EXC.badmatch match_expr_8)
erlps__take_largest1__1 [arg_16] = (EXC.function_clause unit)
erlps__take_largest1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__largest__1 :: ErlangFun
erlps__largest__1 [(ErlangTuple [_, tree_0])] =
  (erlps__largest_1__1 [tree_0])
erlps__largest__1 [arg_2] = (EXC.function_clause unit)
erlps__largest__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__largest_1__1 :: ErlangFun
erlps__largest_1__1 [(ErlangTuple [key_0, value_1, _smaller_2,
                                   (ErlangAtom "nil")])]
  =
  (ErlangTuple [key_0, value_1])
erlps__largest_1__1 [(ErlangTuple [_key_0, _value_1, _smaller_2,
                                   larger_3])]
  =
  (erlps__largest_1__1 [larger_3])
erlps__largest_1__1 [arg_5] = (EXC.function_clause unit)
erlps__largest_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list__1 :: ErlangFun
erlps__to_list__1 [(ErlangTuple [_, t_0])] =
  (erlps__to_list__2 [t_0, ErlangEmptyList])
erlps__to_list__1 [arg_3] = (EXC.function_clause unit)
erlps__to_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list_1__1 :: ErlangFun
erlps__to_list_1__1 [t_0] =
  (erlps__to_list__2 [t_0, ErlangEmptyList])
erlps__to_list_1__1 [arg_3] = (EXC.function_clause unit)
erlps__to_list_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list__2 :: ErlangFun
erlps__to_list__2 [(ErlangTuple [key_0, value_1, small_2,
                                 big_3]),
                   l_4]
  =
  let    head_7 = (ErlangTuple [key_0, value_1])
  in let tail_10 = (erlps__to_list__2 [big_3, l_4])
  in (erlps__to_list__2 [small_2, (ErlangCons head_7 tail_10)])
erlps__to_list__2 [(ErlangAtom "nil"), l_0] = l_0
erlps__to_list__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__to_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keys__1 :: ErlangFun
erlps__keys__1 [(ErlangTuple [_, t_0])] =
  (erlps__keys__2 [t_0, ErlangEmptyList])
erlps__keys__1 [arg_3] = (EXC.function_clause unit)
erlps__keys__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keys__2 :: ErlangFun
erlps__keys__2 [(ErlangTuple [key_0, _value_1, small_2, big_3]),
                l_4]
  =
  let tail_8 = (erlps__keys__2 [big_3, l_4])
  in (erlps__keys__2 [small_2, (ErlangCons key_0 tail_8)])
erlps__keys__2 [(ErlangAtom "nil"), l_0] = l_0
erlps__keys__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__keys__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__values__1 :: ErlangFun
erlps__values__1 [(ErlangTuple [_, t_0])] =
  (erlps__values__2 [t_0, ErlangEmptyList])
erlps__values__1 [arg_3] = (EXC.function_clause unit)
erlps__values__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__values__2 :: ErlangFun
erlps__values__2 [(ErlangTuple [_key_0, value_1, small_2,
                                big_3]),
                  l_4]
  =
  let tail_8 = (erlps__values__2 [big_3, l_4])
  in (erlps__values__2 [small_2, (ErlangCons value_1 tail_8)])
erlps__values__2 [(ErlangAtom "nil"), l_0] = l_0
erlps__values__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__values__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator__1 :: ErlangFun
erlps__iterator__1 [(ErlangTuple [_, t_0])] =
  (erlps__iterator_1__1 [t_0])
erlps__iterator__1 [arg_2] = (EXC.function_clause unit)
erlps__iterator__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator_1__1 :: ErlangFun
erlps__iterator_1__1 [t_0] =
  (erlps__iterator__2 [t_0, ErlangEmptyList])
erlps__iterator_1__1 [arg_3] = (EXC.function_clause unit)
erlps__iterator_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator__2 :: ErlangFun
erlps__iterator__2 [t_0@(ErlangTuple [_, _, (ErlangAtom "nil"),
                                      _]),
                    as_1]
  =
  (ErlangCons t_0 as_1)
erlps__iterator__2 [t_1@(ErlangTuple [_, _, l_0, _]), as_2] =
  (erlps__iterator__2 [l_0, (ErlangCons t_1 as_2)])
erlps__iterator__2 [(ErlangAtom "nil"), as_0] = as_0
erlps__iterator__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__iterator__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator_from__2 :: ErlangFun
erlps__iterator_from__2 [s_0, (ErlangTuple [_, t_1])] =
  (erlps__iterator_1_from__2 [s_0, t_1])
erlps__iterator_from__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__iterator_from__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator_1_from__2 :: ErlangFun
erlps__iterator_1_from__2 [s_0, t_1] =
  (erlps__iterator_from__3 [s_0, t_1, ErlangEmptyList])
erlps__iterator_1_from__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__iterator_1_from__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iterator_from__3 :: ErlangFun
erlps__iterator_from__3 [s_0, (ErlangTuple [k_1, _, _, t_2]),
                         as_3]
  | (weakLt k_1 s_0) =
  (erlps__iterator_from__3 [s_0, t_2, as_3])
erlps__iterator_from__3 [_,
                         t_0@(ErlangTuple [_, _, (ErlangAtom "nil"), _]), as_1]
  =
  (ErlangCons t_0 as_1)
erlps__iterator_from__3 [s_0, t_2@(ErlangTuple [_, _, l_1, _]),
                         as_3]
  =
  (erlps__iterator_from__3 [s_0, l_1, (ErlangCons t_2 as_3)])
erlps__iterator_from__3 [_, (ErlangAtom "nil"), as_0] = as_0
erlps__iterator_from__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__iterator_from__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__next__1 :: ErlangFun
erlps__next__1 [(ErlangCons (ErlangTuple [x_0, v_1, _,
                                          t_2]) as_3)]
  =
  let tup_el_6 = (erlps__iterator__2 [t_2, as_3])
  in (ErlangTuple [x_0, v_1, tup_el_6])
erlps__next__1 [(ErlangEmptyList)] = (ErlangAtom "none")
erlps__next__1 [arg_0] = (EXC.function_clause unit)
erlps__next__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map__2 :: ErlangFun
erlps__map__2 [f_0, (ErlangTuple [size_1, tree_2])]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  let tup_el_4 = (erlps__map_1__2 [f_0, tree_2])
  in (ErlangTuple [size_1, tup_el_4])
erlps__map__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__map__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_1__2 :: ErlangFun
erlps__map_1__2 [_, (ErlangAtom "nil")] = (ErlangAtom "nil")
erlps__map_1__2 [f_0,
                 (ErlangTuple [k_1, v_2, smaller_3, larger_4])]
  =
  let   
    tup_el_6 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons k_1 (ErlangCons v_2 ErlangEmptyList))])
  in let tup_el_10 = (erlps__map_1__2 [f_0, smaller_3])
  in let tup_el_13 = (erlps__map_1__2 [f_0, larger_4])
  in (ErlangTuple [k_1, tup_el_6, tup_el_10, tup_el_13])
erlps__map_1__2 [arg_16, arg_17] = (EXC.function_clause unit)
erlps__map_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)