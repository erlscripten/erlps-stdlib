module Queue(erlps__new__0, erlps__is_queue__1,
             erlps__is_empty__1, erlps__len__1, erlps__to_list__1,
             erlps__from_list__1, erlps__member__2, erlps__in__2,
             erlps__in_r__2, erlps__out__1, erlps__out_r__1, erlps__get__1,
             erlps__get_r__1, erlps__peek__1, erlps__peek_r__1,
             erlps__drop__1, erlps__drop_r__1, erlps__reverse__1,
             erlps__join__2, erlps__split__2, erlps__filter__2,
             erlps__cons__2, erlps__head__1, erlps__tail__1, erlps__snoc__2,
             erlps__last__1, erlps__daeh__1, erlps__init__1, erlps__liat__1,
             erlps__lait__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__new__0 :: ErlangFun
erlps__new__0 [] =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__new__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_queue__1 :: ErlangFun
erlps__is_queue__1 [(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  (ErlangAtom "true")
erlps__is_queue__1 [_] = (ErlangAtom "false")
erlps__is_queue__1 [arg_0] = (EXC.function_clause unit)
erlps__is_queue__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_empty__1 :: ErlangFun
erlps__is_empty__1 [(ErlangTuple [(ErlangEmptyList),
                                  (ErlangEmptyList)])]
  =
  (ErlangAtom "true")
erlps__is_empty__1 [(ErlangTuple [in_0, out_1])]
  | ((isEList in_0) && (isEList out_1)) =
  (ErlangAtom "false")
erlps__is_empty__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__is_empty__1 [arg_5] = (EXC.function_clause unit)
erlps__is_empty__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__len__1 :: ErlangFun
erlps__len__1 [(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  let    lop_2 = (BIF.erlang__length__1 [r_0])
  in let rop_4 = (BIF.erlang__length__1 [f_1])
  in (BIF.erlang__op_plus [lop_2, rop_4])
erlps__len__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__len__1 [arg_5] = (EXC.function_clause unit)
erlps__len__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__to_list__1 :: ErlangFun
erlps__to_list__1 [(ErlangTuple [in_0, out_1])]
  | ((isEList in_0) && (isEList out_1)) =
  let rop_3 = (BIF.lists__reverse__2 [in_0, ErlangEmptyList])
  in (BIF.erlang__op_append [out_1, rop_3])
erlps__to_list__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__to_list__1 [arg_5] = (EXC.function_clause unit)
erlps__to_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__from_list__1 :: ErlangFun
erlps__from_list__1 [l_0] | (isEList l_0) = (erlps__f2r__1 [l_0])
erlps__from_list__1 [l_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons l_0 ErlangEmptyList)])
erlps__from_list__1 [arg_5] = (EXC.function_clause unit)
erlps__from_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__member__2 :: ErlangFun
erlps__member__2 [x_0, (ErlangTuple [r_1, f_2])]
  | ((isEList r_1) && (isEList f_2)) =
  let lop_3 = (BIF.lists__member__2 [x_0, r_1])
  in
    case lop_3 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") -> (BIF.lists__member__2 [x_0, f_2])
      _ -> (EXC.badarg1 lop_3)
erlps__member__2 [x_0, q_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons x_0 (ErlangCons q_1 ErlangEmptyList))])
erlps__member__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__member__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__in__2 :: ErlangFun
erlps__in__2 [x_0,
              (ErlangTuple [in_1@(ErlangCons _ (ErlangEmptyList)),
                            (ErlangEmptyList)])]
  =
  (ErlangTuple [(ErlangCons x_0 ErlangEmptyList), in_1])
erlps__in__2 [x_0, (ErlangTuple [in_1, out_2])]
  | ((isEList in_1) && (isEList out_2)) =
  (ErlangTuple [(ErlangCons x_0 in_1), out_2])
erlps__in__2 [x_0, q_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons x_0 (ErlangCons q_1 ErlangEmptyList))])
erlps__in__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__in__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__in_r__2 :: ErlangFun
erlps__in_r__2 [x_0,
                (ErlangTuple [(ErlangEmptyList),
                              f_1@(ErlangCons _ (ErlangEmptyList))])]
  =
  (ErlangTuple [f_1, (ErlangCons x_0 ErlangEmptyList)])
erlps__in_r__2 [x_0, (ErlangTuple [r_1, f_2])]
  | ((isEList r_1) && (isEList f_2)) =
  (ErlangTuple [r_1, (ErlangCons x_0 f_2)])
erlps__in_r__2 [x_0, q_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons x_0 (ErlangCons q_1 ErlangEmptyList))])
erlps__in_r__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__in_r__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__out__1 :: ErlangFun
erlps__out__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                 (ErlangEmptyList)])]
  =
  (ErlangTuple [(ErlangAtom "empty"), q_0])
erlps__out__1 [(ErlangTuple [(ErlangCons v_0 (ErlangEmptyList)),
                             (ErlangEmptyList)])]
  =
  let    tup_el_1 = (ErlangTuple [(ErlangAtom "value"), v_0])
  in let
    tup_el_4 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
  in (ErlangTuple [tup_el_1, tup_el_4])
erlps__out__1 [(ErlangTuple [(ErlangCons y_0 in_1),
                             (ErlangEmptyList)])]
  =
  let
    match_expr_6 = (BIF.lists__reverse__2 [in_1, ErlangEmptyList])
  in
    case match_expr_6 of
      (ErlangCons v_4 out_5) ->
        let    tup_el_7 = (ErlangTuple [(ErlangAtom "value"), v_4])
        in let
          tup_el_10 =
            (ErlangTuple [(ErlangCons y_0 ErlangEmptyList), out_5])
        in (ErlangTuple [tup_el_7, tup_el_10])
      _ -> (EXC.badmatch match_expr_6)
erlps__out__1 [(ErlangTuple [in_0,
                             (ErlangCons v_1 (ErlangEmptyList))])]
  | (isEList in_0) =
  let    tup_el_2 = (ErlangTuple [(ErlangAtom "value"), v_1])
  in let tup_el_5 = (erlps__r2f__1 [in_0])
  in (ErlangTuple [tup_el_2, tup_el_5])
erlps__out__1 [(ErlangTuple [in_0, (ErlangCons v_1 out_2)])]
  | (isEList in_0) =
  let    tup_el_3 = (ErlangTuple [(ErlangAtom "value"), v_1])
  in let tup_el_6 = (ErlangTuple [in_0, out_2])
  in (ErlangTuple [tup_el_3, tup_el_6])
erlps__out__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__out__1 [arg_5] = (EXC.function_clause unit)
erlps__out__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__out_r__1 :: ErlangFun
erlps__out_r__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                   (ErlangEmptyList)])]
  =
  (ErlangTuple [(ErlangAtom "empty"), q_0])
erlps__out_r__1 [(ErlangTuple [(ErlangEmptyList),
                               (ErlangCons v_0 (ErlangEmptyList))])]
  =
  let    tup_el_1 = (ErlangTuple [(ErlangAtom "value"), v_0])
  in let
    tup_el_4 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
  in (ErlangTuple [tup_el_1, tup_el_4])
erlps__out_r__1 [(ErlangTuple [(ErlangEmptyList),
                               (ErlangCons y_0 out_1)])]
  =
  let
    match_expr_6 = (BIF.lists__reverse__2 [out_1, ErlangEmptyList])
  in
    case match_expr_6 of
      (ErlangCons v_4 in_5) ->
        let    tup_el_7 = (ErlangTuple [(ErlangAtom "value"), v_4])
        in let
          tup_el_10 =
            (ErlangTuple [in_5, (ErlangCons y_0 ErlangEmptyList)])
        in (ErlangTuple [tup_el_7, tup_el_10])
      _ -> (EXC.badmatch match_expr_6)
erlps__out_r__1 [(ErlangTuple [(ErlangCons v_0 (ErlangEmptyList)),
                               out_1])]
  | (isEList out_1) =
  let    tup_el_2 = (ErlangTuple [(ErlangAtom "value"), v_0])
  in let tup_el_5 = (erlps__f2r__1 [out_1])
  in (ErlangTuple [tup_el_2, tup_el_5])
erlps__out_r__1 [(ErlangTuple [(ErlangCons v_0 in_1), out_2])]
  | (isEList out_2) =
  let    tup_el_3 = (ErlangTuple [(ErlangAtom "value"), v_0])
  in let tup_el_6 = (ErlangTuple [in_1, out_2])
  in (ErlangTuple [tup_el_3, tup_el_6])
erlps__out_r__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__out_r__1 [arg_5] = (EXC.function_clause unit)
erlps__out_r__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get__1 :: ErlangFun
erlps__get__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                 (ErlangEmptyList)])]
  =
  (BIF.erlang__error__2
     [(ErlangAtom "empty"), (ErlangCons q_0 ErlangEmptyList)])
erlps__get__1 [(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  (erlps__get__2 [r_0, f_1])
erlps__get__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__get__1 [arg_5] = (EXC.function_clause unit)
erlps__get__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get__2 :: ErlangFun
erlps__get__2 [r_0, (ErlangCons h_1 _)] | (isEList r_0) = h_1
erlps__get__2 [(ErlangCons h_0 (ErlangEmptyList)),
               (ErlangEmptyList)]
  =
  h_0
erlps__get__2 [(ErlangCons _ r_0), (ErlangEmptyList)] =
  (BIF.do_remote_fun_call "Lists" "erlps__last__1" [r_0])
erlps__get__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__get__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_r__1 :: ErlangFun
erlps__get_r__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                   (ErlangEmptyList)])]
  =
  (BIF.erlang__error__2
     [(ErlangAtom "empty"), (ErlangCons q_0 ErlangEmptyList)])
erlps__get_r__1 [(ErlangTuple [(ErlangCons h_0 _), f_1])]
  | (isEList f_1) =
  h_0
erlps__get_r__1 [(ErlangTuple [(ErlangEmptyList),
                               (ErlangCons h_0 (ErlangEmptyList))])]
  =
  h_0
erlps__get_r__1 [(ErlangTuple [(ErlangEmptyList),
                               (ErlangCons _ f_0)])]
  =
  (BIF.do_remote_fun_call "Lists" "erlps__last__1" [f_0])
erlps__get_r__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__get_r__1 [arg_5] = (EXC.function_clause unit)
erlps__get_r__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__peek__1 :: ErlangFun
erlps__peek__1 [(ErlangTuple [(ErlangEmptyList),
                              (ErlangEmptyList)])]
  =
  (ErlangAtom "empty")
erlps__peek__1 [(ErlangTuple [r_0, (ErlangCons h_1 _)])]
  | (isEList r_0) =
  (ErlangTuple [(ErlangAtom "value"), h_1])
erlps__peek__1 [(ErlangTuple [(ErlangCons h_0 (ErlangEmptyList)),
                              (ErlangEmptyList)])]
  =
  (ErlangTuple [(ErlangAtom "value"), h_0])
erlps__peek__1 [(ErlangTuple [(ErlangCons _ r_0),
                              (ErlangEmptyList)])]
  =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__last__1" [r_0])
  in (ErlangTuple [(ErlangAtom "value"), tup_el_2])
erlps__peek__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__peek__1 [arg_5] = (EXC.function_clause unit)
erlps__peek__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__peek_r__1 :: ErlangFun
erlps__peek_r__1 [(ErlangTuple [(ErlangEmptyList),
                                (ErlangEmptyList)])]
  =
  (ErlangAtom "empty")
erlps__peek_r__1 [(ErlangTuple [(ErlangCons h_0 _), f_1])]
  | (isEList f_1) =
  (ErlangTuple [(ErlangAtom "value"), h_0])
erlps__peek_r__1 [(ErlangTuple [(ErlangEmptyList),
                                (ErlangCons h_0 (ErlangEmptyList))])]
  =
  (ErlangTuple [(ErlangAtom "value"), h_0])
erlps__peek_r__1 [(ErlangTuple [(ErlangEmptyList),
                                (ErlangCons _ r_0)])]
  =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__last__1" [r_0])
  in (ErlangTuple [(ErlangAtom "value"), tup_el_2])
erlps__peek_r__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__peek_r__1 [arg_5] = (EXC.function_clause unit)
erlps__peek_r__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__drop__1 :: ErlangFun
erlps__drop__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                  (ErlangEmptyList)])]
  =
  (BIF.erlang__error__2
     [(ErlangAtom "empty"), (ErlangCons q_0 ErlangEmptyList)])
erlps__drop__1 [(ErlangTuple [(ErlangCons _ (ErlangEmptyList)),
                              (ErlangEmptyList)])]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__drop__1 [(ErlangTuple [(ErlangCons y_0 r_1),
                              (ErlangEmptyList)])]
  =
  let match_expr_5 = (BIF.lists__reverse__2 [r_1, ErlangEmptyList])
  in
    case match_expr_5 of
      (ErlangCons _ f_4) ->
        (ErlangTuple [(ErlangCons y_0 ErlangEmptyList), f_4])
      _ -> (EXC.badmatch match_expr_5)
erlps__drop__1 [(ErlangTuple [r_0,
                              (ErlangCons _ (ErlangEmptyList))])]
  | (isEList r_0) =
  (erlps__r2f__1 [r_0])
erlps__drop__1 [(ErlangTuple [r_0, (ErlangCons _ f_1)])]
  | (isEList r_0) =
  (ErlangTuple [r_0, f_1])
erlps__drop__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__drop__1 [arg_5] = (EXC.function_clause unit)
erlps__drop__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__drop_r__1 :: ErlangFun
erlps__drop_r__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                    (ErlangEmptyList)])]
  =
  (BIF.erlang__error__2
     [(ErlangAtom "empty"), (ErlangCons q_0 ErlangEmptyList)])
erlps__drop_r__1 [(ErlangTuple [(ErlangEmptyList),
                                (ErlangCons _ (ErlangEmptyList))])]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__drop_r__1 [(ErlangTuple [(ErlangEmptyList),
                                (ErlangCons y_0 f_1)])]
  =
  let match_expr_5 = (BIF.lists__reverse__2 [f_1, ErlangEmptyList])
  in
    case match_expr_5 of
      (ErlangCons _ r_4) ->
        (ErlangTuple [r_4, (ErlangCons y_0 ErlangEmptyList)])
      _ -> (EXC.badmatch match_expr_5)
erlps__drop_r__1 [(ErlangTuple [(ErlangCons _ (ErlangEmptyList)),
                                f_0])]
  | (isEList f_0) =
  (erlps__f2r__1 [f_0])
erlps__drop_r__1 [(ErlangTuple [(ErlangCons _ r_0), f_1])]
  | (isEList f_1) =
  (ErlangTuple [r_0, f_1])
erlps__drop_r__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__drop_r__1 [arg_5] = (EXC.function_clause unit)
erlps__drop_r__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse__1 :: ErlangFun
erlps__reverse__1 [(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  (ErlangTuple [f_1, r_0])
erlps__reverse__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__reverse__1 [arg_5] = (EXC.function_clause unit)
erlps__reverse__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__2 :: ErlangFun
erlps__join__2 [q_2@(ErlangTuple [r_0, f_1]),
                (ErlangTuple [(ErlangEmptyList), (ErlangEmptyList)])]
  | ((isEList r_0) && (isEList f_1)) =
  q_2
erlps__join__2 [(ErlangTuple [(ErlangEmptyList),
                              (ErlangEmptyList)]),
                q_2@(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  q_2
erlps__join__2 [(ErlangTuple [r1_0, f1_1]),
                (ErlangTuple [r2_2, f2_3])]
  | ((((isEList r1_0) && (isEList f1_1)) && (isEList r2_2)) &&
       (isEList f2_3)) =
  let    rop_7 = (BIF.lists__reverse__2 [r1_0, f2_3])
  in let tup_el_5 = (BIF.erlang__op_append [f1_1, rop_7])
  in (ErlangTuple [r2_2, tup_el_5])
erlps__join__2 [q1_0, q2_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons q1_0 (ErlangCons q2_1 ErlangEmptyList))])
erlps__join__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__join__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__2 :: ErlangFun
erlps__split__2 [(ErlangInt num_0), q_3@(ErlangTuple [r_1, f_2])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0)))
  , ((isEList r_1) && (isEList f_2)) =
  let tup_el_4 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
  in (ErlangTuple [tup_el_4, q_3])
erlps__split__2 [n_0, q_3@(ErlangTuple [r_1, f_2])]
  | ((((isEInt n_0) &&
         (weakGeq n_0 (ErlangInt (DBI.fromInt 1)))) &&
        (isEList r_1)) &&
       (isEList f_2)) =
  let lf_5 = (BIF.erlang__length__1 [f_2])
  in
    case (ErlangAtom "true") of
      _ | (weakLt n_0 lf_5) ->
        case f_2 of
          (ErlangCons x_6 f1_7) ->
            let
              arg_9 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
            in
              (erlps__split_f1_to_r2__5
                 [arg_9, r_1, f1_7, ErlangEmptyList,
                  (ErlangCons x_6 ErlangEmptyList)])
          _ -> (EXC.badmatch f_2)
      _ | (weakGt n_0 lf_5) ->
        let    lr_19 = (BIF.erlang__length__1 [r_1])
        in let rop_21 = (BIF.erlang__op_minus [n_0, lf_5])
        in let m_24 = (BIF.erlang__op_minus [lr_19, rop_21])
        in
          case (ErlangAtom "true") of
            _ | (weakLt m_24 (ErlangInt (DBI.fromInt 0))) ->
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons n_0 (ErlangCons q_3 ErlangEmptyList))])
            _ | (weakGt m_24 (ErlangInt (DBI.fromInt 0))) ->
              case r_1 of
                (ErlangCons x_31 r1_32) ->
                  let
                    arg_34 =
                      (BIF.erlang__op_minus [m_24, (ErlangInt (DBI.fromInt 1))])
                  in
                    (erlps__split_r1_to_f2__5
                       [arg_34, r1_32, f_2, (ErlangCons x_31 ErlangEmptyList),
                        ErlangEmptyList])
                _ -> (EXC.badmatch r_1)
            _ ->
              let tup_el_44 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
              in (ErlangTuple [q_3, tup_el_44])
            _ -> (EXC.if_clause unit)
      _ ->
        let    tup_el_47 = (erlps__f2r__1 [f_2])
        in let tup_el_49 = (erlps__r2f__1 [r_1])
        in (ErlangTuple [tup_el_47, tup_el_49])
      _ -> (EXC.if_clause unit)
erlps__split__2 [n_0, q_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons n_0 (ErlangCons q_1 ErlangEmptyList))])
erlps__split__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__split__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_f1_to_r2__5 :: ErlangFun
erlps__split_f1_to_r2__5 [(ErlangInt num_0), r1_1, f1_2, r2_3,
                          f2_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let    tup_el_5 = (ErlangTuple [r2_3, f2_4])
  in let tup_el_8 = (ErlangTuple [r1_1, f1_2])
  in (ErlangTuple [tup_el_5, tup_el_8])
erlps__split_f1_to_r2__5 [n_0, r1_1, (ErlangCons x_2 f1_3), r2_4,
                          f2_5]
  =
  let
    arg_6 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__split_f1_to_r2__5
       [arg_6, r1_1, f1_3, (ErlangCons x_2 r2_4), f2_5])
erlps__split_f1_to_r2__5 [arg_15, arg_16, arg_17, arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__split_f1_to_r2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_r1_to_f2__5 :: ErlangFun
erlps__split_r1_to_f2__5 [(ErlangInt num_0), r1_1, f1_2, r2_3,
                          f2_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let    tup_el_5 = (ErlangTuple [r1_1, f1_2])
  in let tup_el_8 = (ErlangTuple [r2_3, f2_4])
  in (ErlangTuple [tup_el_5, tup_el_8])
erlps__split_r1_to_f2__5 [n_0, (ErlangCons x_1 r1_2), f1_3, r2_4,
                          f2_5]
  =
  let
    arg_6 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__split_r1_to_f2__5
       [arg_6, r1_2, f1_3, r2_4, (ErlangCons x_1 f2_5)])
erlps__split_r1_to_f2__5 [arg_15, arg_16, arg_17, arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__split_r1_to_f2__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter__2 :: ErlangFun
erlps__filter__2 [fun_0, (ErlangTuple [r0_1, f0_2])]
  | (((isEFunA fun_0 (ErlangInt (DBI.fromInt 1))) &&
        (isEList r0_1)) &&
       (isEList f0_2)) =
  let    f_5 = (erlps__filter_f__2 [fun_0, f0_2])
  in let r_8 = (erlps__filter_r__2 [fun_0, r0_1])
  in
    case (ErlangAtom "true") of
      _ | ((==) r_8 ErlangEmptyList) -> (erlps__f2r__1 [f_5])
      _ | ((==) f_5 ErlangEmptyList) -> (erlps__r2f__1 [r_8])
      _ -> (ErlangTuple [r_8, f_5])
      _ -> (EXC.if_clause unit)
erlps__filter__2 [fun_0, q_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons fun_0 (ErlangCons q_1 ErlangEmptyList))])
erlps__filter__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__filter__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_f__2 :: ErlangFun
erlps__filter_f__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__filter_f__2 [fun_0, (ErlangCons x_1 f_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2 [fun_0, (ErlangCons x_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") ->
        let tail_7 = (erlps__filter_f__2 [fun_0, f_2])
        in (ErlangCons x_1 tail_7)
      (ErlangAtom "false") -> (erlps__filter_f__2 [fun_0, f_2])
      l_12 | (isEList l_12) ->
        let rop_14 = (erlps__filter_f__2 [fun_0, f_2])
        in (BIF.erlang__op_append [l_12, rop_14])
      something_else -> (EXC.case_clause something_else)
erlps__filter_f__2 [arg_17, arg_18] = (EXC.function_clause unit)
erlps__filter_f__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter_r__2 :: ErlangFun
erlps__filter_r__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__filter_r__2 [fun_0, (ErlangCons x_1 r0_2)] =
  let    r_5 = (erlps__filter_r__2 [fun_0, r0_2])
  in let
    case_6 =
      (BIF.erlang__apply__2 [fun_0, (ErlangCons x_1 ErlangEmptyList)])
  in
    case case_6 of
      (ErlangAtom "true") -> (ErlangCons x_1 r_5)
      (ErlangAtom "false") -> r_5
      l_11 | (isEList l_11) -> (BIF.lists__reverse__2 [l_11, r_5])
      something_else -> (EXC.case_clause something_else)
erlps__filter_r__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__filter_r__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cons__2 :: ErlangFun
erlps__cons__2 [x_0, q_1] = (erlps__in_r__2 [x_0, q_1])
erlps__cons__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__cons__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__head__1 :: ErlangFun
erlps__head__1 [q_0@(ErlangTuple [(ErlangEmptyList),
                                  (ErlangEmptyList)])]
  =
  (BIF.erlang__error__2
     [(ErlangAtom "empty"), (ErlangCons q_0 ErlangEmptyList)])
erlps__head__1 [(ErlangTuple [r_0, f_1])]
  | ((isEList r_0) && (isEList f_1)) =
  (erlps__get__2 [r_0, f_1])
erlps__head__1 [q_0] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"), (ErlangCons q_0 ErlangEmptyList)])
erlps__head__1 [arg_5] = (EXC.function_clause unit)
erlps__head__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tail__1 :: ErlangFun
erlps__tail__1 [q_0] = (erlps__drop__1 [q_0])
erlps__tail__1 [arg_2] = (EXC.function_clause unit)
erlps__tail__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__snoc__2 :: ErlangFun
erlps__snoc__2 [q_0, x_1] = (erlps__in__2 [x_1, q_0])
erlps__snoc__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__snoc__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__daeh__1 :: ErlangFun
erlps__daeh__1 [q_0] = (erlps__get_r__1 [q_0])
erlps__daeh__1 [arg_2] = (EXC.function_clause unit)
erlps__daeh__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__last__1 :: ErlangFun
erlps__last__1 [q_0] = (erlps__get_r__1 [q_0])
erlps__last__1 [arg_2] = (EXC.function_clause unit)
erlps__last__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__liat__1 :: ErlangFun
erlps__liat__1 [q_0] = (erlps__drop_r__1 [q_0])
erlps__liat__1 [arg_2] = (EXC.function_clause unit)
erlps__liat__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lait__1 :: ErlangFun
erlps__lait__1 [q_0] = (erlps__drop_r__1 [q_0])
erlps__lait__1 [arg_2] = (EXC.function_clause unit)
erlps__lait__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__init__1 :: ErlangFun
erlps__init__1 [q_0] = (erlps__drop_r__1 [q_0])
erlps__init__1 [arg_2] = (EXC.function_clause unit)
erlps__init__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__r2f__1 :: ErlangFun
erlps__r2f__1 [(ErlangEmptyList)] =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__r2f__1 [r_0@(ErlangCons _ (ErlangEmptyList))] =
  (ErlangTuple [ErlangEmptyList, r_0])
erlps__r2f__1 [(ErlangCons x_0 (ErlangCons y_1 (ErlangEmptyList)))]
  =
  (ErlangTuple
     [(ErlangCons x_0 ErlangEmptyList),
      (ErlangCons y_1 ErlangEmptyList)])
erlps__r2f__1 [list_0] =
  let    lop_3 = (BIF.erlang__length__1 [list_0])
  in let
    lop_2 =
      (BIF.erlang__op_div_strict [lop_3, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_1 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    match_expr_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__split__2"
         [arg_1, list_0])
  in
    case match_expr_10 of
      (ErlangTuple [ff_8, rr_9]) ->
        let tup_el_12 = (BIF.lists__reverse__2 [rr_9, ErlangEmptyList])
        in (ErlangTuple [ff_8, tup_el_12])
      _ -> (EXC.badmatch match_expr_10)
erlps__r2f__1 [arg_15] = (EXC.function_clause unit)
erlps__r2f__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__f2r__1 :: ErlangFun
erlps__f2r__1 [(ErlangEmptyList)] =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList])
erlps__f2r__1 [f_0@(ErlangCons _ (ErlangEmptyList))] =
  (ErlangTuple [f_0, ErlangEmptyList])
erlps__f2r__1 [(ErlangCons x_0 (ErlangCons y_1 (ErlangEmptyList)))]
  =
  (ErlangTuple
     [(ErlangCons y_1 ErlangEmptyList),
      (ErlangCons x_0 ErlangEmptyList)])
erlps__f2r__1 [list_0] =
  let    lop_3 = (BIF.erlang__length__1 [list_0])
  in let
    lop_2 =
      (BIF.erlang__op_div_strict [lop_3, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_1 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 1))])
  in let
    match_expr_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__split__2"
         [arg_1, list_0])
  in
    case match_expr_10 of
      (ErlangTuple [ff_8, rr_9]) ->
        let tup_el_11 = (BIF.lists__reverse__2 [rr_9, ErlangEmptyList])
        in (ErlangTuple [tup_el_11, ff_8])
      _ -> (EXC.badmatch match_expr_10)
erlps__f2r__1 [arg_15] = (EXC.function_clause unit)
erlps__f2r__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)