module Lists(erlps__append__2, erlps__append__1,
             erlps__subtract__2, erlps__reverse__1, erlps__nth__2,
             erlps__nthtail__2, erlps__prefix__2, erlps__suffix__2,
             erlps__droplast__1, erlps__last__1, erlps__seq__2, erlps__seq__3,
             erlps__sum__1, erlps__duplicate__2, erlps__min__1, erlps__max__1,
             erlps__sublist__2, erlps__sublist__3, erlps__delete__2,
             erlps__unzip__1, erlps__unzip3__1, erlps__zip__2, erlps__zip3__3,
             erlps__zipwith__3, erlps__zipwith3__4, erlps__sort__1,
             erlps__merge__1, erlps__merge__2, erlps__rmerge__2,
             erlps__merge3__3, erlps__rmerge3__3, erlps__usort__1,
             erlps__umerge__1, erlps__umerge3__3, erlps__umerge__2,
             erlps__rumerge3__3, erlps__rumerge__2, erlps__concat__1,
             erlps__flatten__1, erlps__flatten__2, erlps__flatlength__1,
             erlps__keydelete__3, erlps__keyreplace__4, erlps__keytake__3,
             erlps__keystore__4, erlps__keysort__2, erlps__keymerge__3,
             erlps__rkeymerge__3, erlps__rukeymerge__3, erlps__ukeysort__2,
             erlps__ukeymerge__3, erlps__keymap__3, erlps__merge__3,
             erlps__rmerge__3, erlps__sort__2, erlps__umerge__3,
             erlps__rumerge__3, erlps__usort__2, erlps__all__2, erlps__any__2,
             erlps__map__2, erlps__flatmap__2, erlps__foldl__3,
             erlps__foldr__3, erlps__filter__2, erlps__partition__2,
             erlps__zf__2, erlps__filtermap__2, erlps__mapfoldl__3,
             erlps__mapfoldr__3, erlps__foreach__2, erlps__takewhile__2,
             erlps__dropwhile__2, erlps__search__2, erlps__splitwith__2,
             erlps__split__2, erlps__join__2, erlps__keyfind__3,
             erlps__keymember__3, erlps__keysearch__3, erlps__member__2,
             erlps__reverse__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..))
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__keyfind__3 :: ErlangFun
erlps__keyfind__3 [_, _, _] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__keyfind__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__keyfind__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymember__3 :: ErlangFun
erlps__keymember__3 [_, _, _] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__keymember__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__keymember__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysearch__3 :: ErlangFun
erlps__keysearch__3 [_, _, _] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__keysearch__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__keysearch__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__member__2 :: ErlangFun
erlps__member__2 [_, _] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__member__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__member__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse__2 :: ErlangFun
erlps__reverse__2 [_, _] =
  (BIF.erlang__nif_error__1 [(ErlangAtom "undef")])
erlps__reverse__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__reverse__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append__2 :: ErlangFun
erlps__append__2 [l1_0, l2_1] =
  (BIF.erlang__op_append [l1_0, l2_1])
erlps__append__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__append__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__append__1 :: ErlangFun
erlps__append__1 [(ErlangCons e_0 (ErlangEmptyList))] = e_0
erlps__append__1 [(ErlangCons h_0 t_1)] =
  let rop_3 = (erlps__append__1 [t_1])
  in (BIF.erlang__op_append [h_0, rop_3])
erlps__append__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__append__1 [arg_0] = (EXC.function_clause unit)
erlps__append__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__subtract__2 :: ErlangFun
erlps__subtract__2 [l1_0, l2_1] =
  (BIF.erlang__op_unAppend [l1_0, l2_1])
erlps__subtract__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__subtract__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reverse__1 :: ErlangFun
erlps__reverse__1 [l_0@(ErlangEmptyList)] = l_0
erlps__reverse__1 [l_0@(ErlangCons _ (ErlangEmptyList))] = l_0
erlps__reverse__1 [(ErlangCons a_0 (ErlangCons b_1 (ErlangEmptyList)))]
  =
  (ErlangCons b_1 (ErlangCons a_0 ErlangEmptyList))
erlps__reverse__1 [(ErlangCons a_0 (ErlangCons b_1 l_2))] =
  (BIF.lists__reverse__2
     [l_2, (ErlangCons b_1 (ErlangCons a_0 ErlangEmptyList))])
erlps__reverse__1 [arg_9] = (EXC.function_clause unit)
erlps__reverse__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nth__2 :: ErlangFun
erlps__nth__2 [(ErlangInt num_0), (ErlangCons h_1 _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  h_1
erlps__nth__2 [n_0, (ErlangCons _ t_1)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greater [n_0, (ErlangInt (DBI.fromInt 1))])))) =
  let
    arg_2 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__nth__2 [arg_2, t_1])
erlps__nth__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__nth__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nthtail__2 :: ErlangFun
erlps__nthtail__2 [(ErlangInt num_0), (ErlangCons _ t_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  t_1
erlps__nthtail__2 [n_0, (ErlangCons _ t_1)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greater [n_0, (ErlangInt (DBI.fromInt 1))])))) =
  let
    arg_2 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__nthtail__2 [arg_2, t_1])
erlps__nthtail__2 [(ErlangInt num_0), l_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0)))
  , (isEList l_1) =
  l_1
erlps__nthtail__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__nthtail__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prefix__2 :: ErlangFun
erlps__prefix__2 [(ErlangCons x_0 pretail_1),
                  (ErlangCons x_2 tail_3)]
  | (x_2 == x_0) =
  (erlps__prefix__2 [pretail_1, tail_3])
erlps__prefix__2 [(ErlangEmptyList), list_0] | (isEList list_0) =
  (ErlangAtom "true")
erlps__prefix__2 [(ErlangCons _ _), list_0] | (isEList list_0) =
  (ErlangAtom "false")
erlps__prefix__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__prefix__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__suffix__2 :: ErlangFun
erlps__suffix__2 [suffix_0, list_1] =
  let    lop_2 = (BIF.erlang__length__1 [list_1])
  in let rop_4 = (BIF.erlang__length__1 [suffix_0])
  in let delta_6 = (BIF.erlang__op_minus [lop_2, rop_4])
  in let
    lop_7 =
      (BIF.erlang__op_greaterEq [delta_6, (ErlangInt (DBI.fromInt 0))])
  in
    case lop_7 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let lop_10 = (erlps__nthtail__2 [delta_6, list_1])
        in (BIF.erlang__op_exactEq [lop_10, suffix_0])
      _ -> (EXC.badarg1 lop_7)
erlps__suffix__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__suffix__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__droplast__1 :: ErlangFun
erlps__droplast__1 [(ErlangCons _t_0 (ErlangEmptyList))] =
  ErlangEmptyList
erlps__droplast__1 [(ErlangCons h_0 t_1)] =
  let tail_3 = (erlps__droplast__1 [t_1])
  in (ErlangCons h_0 tail_3)
erlps__droplast__1 [arg_5] = (EXC.function_clause unit)
erlps__droplast__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__last__1 :: ErlangFun
erlps__last__1 [(ErlangCons e_0 es_1)] =
  (erlps__last__2 [e_0, es_1])
erlps__last__1 [arg_4] = (EXC.function_clause unit)
erlps__last__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__last__2 :: ErlangFun
erlps__last__2 [_, (ErlangCons e_0 es_1)] =
  (erlps__last__2 [e_0, es_1])
erlps__last__2 [e_0, (ErlangEmptyList)] = e_0
erlps__last__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__last__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__seq__2 :: ErlangFun
erlps__seq__2 [first_0, last_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_10 = (BIF.erlang__is_integer__1 [first_0])
             in let
               lop_9 =
                 case lop_10 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") -> (BIF.erlang__is_integer__1 [last_1])
                   _ -> (EXC.badarg1 lop_10)
             in
               case lop_9 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     lop_13 =
                       (BIF.erlang__op_minus
                          [first_0, (ErlangInt (DBI.fromInt 1))])
                   in (BIF.erlang__op_lesserEq [lop_13, last_1])
                 _ -> (EXC.badarg1 lop_9)))) =
  let    lop_3 = (BIF.erlang__op_minus [last_1, first_0])
  in let
    arg_2 =
      (BIF.erlang__op_plus [lop_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__seq_loop__3 [arg_2, last_1, ErlangEmptyList])
erlps__seq__2 [arg_17, arg_18] = (EXC.function_clause unit)
erlps__seq__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__seq_loop__3 :: ErlangFun
erlps__seq_loop__3 [n_0, x_1, l_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greaterEq
                [n_0, (ErlangInt (DBI.fromInt 4))])))) =
  let   
    arg_3 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 4))])
  in let
    arg_6 = (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 4))])
  in let
    head_10 =
      (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 3))])
  in let
    head_14 =
      (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 2))])
  in let
    head_18 =
      (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__seq_loop__3
       [arg_3, arg_6,
        (ErlangCons head_10
           (ErlangCons head_14 (ErlangCons head_18 (ErlangCons x_1 l_2))))])
erlps__seq_loop__3 [n_0, x_1, l_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greaterEq
                [n_0, (ErlangInt (DBI.fromInt 2))])))) =
  let   
    arg_3 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 2))])
  in let
    arg_6 = (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 2))])
  in let
    head_10 =
      (BIF.erlang__op_minus [x_1, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__seq_loop__3
       [arg_3, arg_6, (ErlangCons head_10 (ErlangCons x_1 l_2))])
erlps__seq_loop__3 [(ErlangInt num_0), x_1, l_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons x_1 l_2)
erlps__seq_loop__3 [(ErlangInt num_0), _, l_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  l_1
erlps__seq_loop__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__seq_loop__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__seq__3 :: ErlangFun
erlps__seq__3 [first_0, last_1, inc_2]
  | (((isEInt first_0) && (isEInt last_1)) && (isEInt inc_2)) =
  case (ErlangAtom "true") of
    _ | (ErlangAtom "true") <-
          ((falsifyErrors
              (\ _ ->
                 let   
                   lop_4 =
                     (BIF.erlang__op_greater
                        [inc_2, (ErlangInt (DBI.fromInt 0))])
                 in let
                   lop_3 =
                     case lop_4 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         let lop_7 = (BIF.erlang__op_minus [first_0, inc_2])
                         in (BIF.erlang__op_lesserEq [lop_7, last_1])
                       _ -> (EXC.badarg1 lop_4)
                 in
                   case lop_3 of
                     (ErlangAtom "true") -> (ErlangAtom "true")
                     (ErlangAtom "false") ->
                       let
                         lop_11 =
                           (BIF.erlang__op_lesser
                              [inc_2, (ErlangInt (DBI.fromInt 0))])
                       in
                         case lop_11 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             let
                               lop_14 = (BIF.erlang__op_minus [first_0, inc_2])
                             in (BIF.erlang__op_greaterEq [lop_14, last_1])
                           _ -> (EXC.badarg1 lop_11)
                     _ -> (EXC.badarg1 lop_3)))) ->
      let    lop_19 = (BIF.erlang__op_minus [last_1, first_0])
      in let lop_18 = (BIF.erlang__op_plus [lop_19, inc_2])
      in let n_24 = (BIF.erlang__op_div_strict [lop_18, inc_2])
      in let
        rop_29 =
          (BIF.erlang__op_minus [n_24, (ErlangInt (DBI.fromInt 1))])
      in let lop_27 = (BIF.erlang__op_mult [inc_2, rop_29])
      in let arg_26 = (BIF.erlang__op_plus [lop_27, first_0])
      in (erlps__seq_loop__4 [n_24, arg_26, inc_2, ErlangEmptyList])
    _ | ((inc_2 == (ErlangInt (DBI.fromInt 0))) &&
           (first_0 == last_1)) ->
      (erlps__seq_loop__4
         [(ErlangInt (DBI.fromInt 1)), first_0, inc_2, ErlangEmptyList])
    _ -> (EXC.if_clause unit)
erlps__seq__3 [arg_39, arg_40, arg_41] =
  (EXC.function_clause unit)
erlps__seq__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__seq_loop__4 :: ErlangFun
erlps__seq_loop__4 [n_0, x_1, d_2, l_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greaterEq
                [n_0, (ErlangInt (DBI.fromInt 4))])))) =
  let    y_6 = (BIF.erlang__op_minus [x_1, d_2])
  in let z_9 = (BIF.erlang__op_minus [y_6, d_2])
  in let w_12 = (BIF.erlang__op_minus [z_9, d_2])
  in let
    arg_13 =
      (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 4))])
  in let arg_16 = (BIF.erlang__op_minus [w_12, d_2])
  in
    (erlps__seq_loop__4
       [arg_13, arg_16, d_2,
        (ErlangCons w_12
           (ErlangCons z_9 (ErlangCons y_6 (ErlangCons x_1 l_3))))])
erlps__seq_loop__4 [n_0, x_1, d_2, l_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greaterEq
                [n_0, (ErlangInt (DBI.fromInt 2))])))) =
  let    y_6 = (BIF.erlang__op_minus [x_1, d_2])
  in let
    arg_7 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 2))])
  in let arg_10 = (BIF.erlang__op_minus [y_6, d_2])
  in
    (erlps__seq_loop__4
       [arg_7, arg_10, d_2, (ErlangCons y_6 (ErlangCons x_1 l_3))])
erlps__seq_loop__4 [(ErlangInt num_0), x_1, _, l_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons x_1 l_2)
erlps__seq_loop__4 [(ErlangInt num_0), _, _, l_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  l_1
erlps__seq_loop__4 [arg_2, arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__seq_loop__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sum__1 :: ErlangFun
erlps__sum__1 [l_0] =
  (erlps__sum__2 [l_0, (ErlangInt (DBI.fromInt 0))])
erlps__sum__1 [arg_3] = (EXC.function_clause unit)
erlps__sum__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sum__2 :: ErlangFun
erlps__sum__2 [(ErlangCons h_0 t_1), sum_2] =
  let arg_4 = (BIF.erlang__op_plus [sum_2, h_0])
  in (erlps__sum__2 [t_1, arg_4])
erlps__sum__2 [(ErlangEmptyList), sum_0] = sum_0
erlps__sum__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__sum__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__duplicate__2 :: ErlangFun
erlps__duplicate__2 [n_0, x_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_5 = (BIF.erlang__is_integer__1 [n_0])
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greaterEq [n_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_5)))) =
  (erlps__duplicate__3 [n_0, x_1, ErlangEmptyList])
erlps__duplicate__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__duplicate__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__duplicate__3 :: ErlangFun
erlps__duplicate__3 [(ErlangInt num_0), _, l_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  l_1
erlps__duplicate__3 [n_0, x_1, l_2] =
  let
    arg_3 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__duplicate__3 [arg_3, x_1, (ErlangCons x_1 l_2)])
erlps__duplicate__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__duplicate__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__min__1 :: ErlangFun
erlps__min__1 [(ErlangCons h_0 t_1)] =
  (BIF.erlang__min__2 [t_1, h_0])
erlps__min__1 [arg_4] = (EXC.function_clause unit)
erlps__min__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__min__2 :: ErlangFun
erlps__min__2 [(ErlangCons h_0 t_1), min_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [h_0, min_2])))) =
  (BIF.erlang__min__2 [t_1, h_0])
erlps__min__2 [(ErlangCons _ t_0), min_1] =
  (BIF.erlang__min__2 [t_0, min_1])
erlps__min__2 [(ErlangEmptyList), min_0] = min_0
erlps__min__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__min__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__max__1 :: ErlangFun
erlps__max__1 [(ErlangCons h_0 t_1)] =
  (BIF.erlang__max__2 [t_1, h_0])
erlps__max__1 [arg_4] = (EXC.function_clause unit)
erlps__max__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__max__2 :: ErlangFun
erlps__max__2 [(ErlangCons h_0 t_1), max_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_greater [h_0, max_2])))) =
  (BIF.erlang__max__2 [t_1, h_0])
erlps__max__2 [(ErlangCons _ t_0), max_1] =
  (BIF.erlang__max__2 [t_0, max_1])
erlps__max__2 [(ErlangEmptyList), max_0] = max_0
erlps__max__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__max__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sublist__3 :: ErlangFun
erlps__sublist__3 [list_0, (ErlangInt num_1), l_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1)))
  , (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_6 = (BIF.erlang__is_list__1 [list_0])
             in let
               lop_5 =
                 case lop_6 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") -> (BIF.erlang__is_integer__1 [l_2])
                   _ -> (EXC.badarg1 lop_6)
             in
               case lop_5 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greaterEq [l_2, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_5)))) =
  (erlps__sublist__2 [list_0, l_2])
erlps__sublist__3 [(ErlangEmptyList), s_0, _l_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_2 = (BIF.erlang__is_integer__1 [s_0])
             in
               case lop_2 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greaterEq [s_0, (ErlangInt (DBI.fromInt 2))])
                 _ -> (EXC.badarg1 lop_2)))) =
  ErlangEmptyList
erlps__sublist__3 [(ErlangCons _h_0 t_1), s_2, l_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_9 = (BIF.erlang__is_integer__1 [s_2])
             in
               case lop_9 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greaterEq [s_2, (ErlangInt (DBI.fromInt 2))])
                 _ -> (EXC.badarg1 lop_9)))) =
  let
    arg_5 = (BIF.erlang__op_minus [s_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__sublist__3 [t_1, arg_5, l_3])
erlps__sublist__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__sublist__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sublist__2 :: ErlangFun
erlps__sublist__2 [list_0, l_1]
  | ((isEInt l_1) && (isEList list_0)) =
  (erlps__sublist_2__2 [list_0, l_1])
erlps__sublist__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__sublist__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sublist_2__2 :: ErlangFun
erlps__sublist_2__2 [(ErlangCons h_0 t_1), l_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             (BIF.erlang__op_greater [l_2, (ErlangInt (DBI.fromInt 0))])))) =
  let   
    arg_6 = (BIF.erlang__op_minus [l_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_4 = (erlps__sublist_2__2 [t_1, arg_6])
  in (ErlangCons h_0 tail_4)
erlps__sublist_2__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__sublist_2__2 [list_0, l_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_2 = (BIF.erlang__is_list__1 [list_0])
             in
               case lop_2 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater [l_1, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_2)))) =
  ErlangEmptyList
erlps__sublist_2__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__sublist_2__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__delete__2 :: ErlangFun
erlps__delete__2 [item_0, (ErlangCons item_1 rest_2)]
  | (item_1 == item_0) =
  rest_2
erlps__delete__2 [item_0, (ErlangCons h_1 rest_2)] =
  let tail_4 = (erlps__delete__2 [item_0, rest_2])
  in (ErlangCons h_1 tail_4)
erlps__delete__2 [_, (ErlangEmptyList)] = ErlangEmptyList
erlps__delete__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__delete__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zip__2 :: ErlangFun
erlps__zip__2 [(ErlangCons x_0 xs_1), (ErlangCons y_2 ys_3)] =
  let    head_4 = (ErlangTuple [x_0, y_2])
  in let tail_7 = (erlps__zip__2 [xs_1, ys_3])
  in (ErlangCons head_4 tail_7)
erlps__zip__2 [(ErlangEmptyList), (ErlangEmptyList)] =
  ErlangEmptyList
erlps__zip__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__zip__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unzip__1 :: ErlangFun
erlps__unzip__1 [ts_0] =
  (erlps__unzip__3 [ts_0, ErlangEmptyList, ErlangEmptyList])
erlps__unzip__1 [arg_4] = (EXC.function_clause unit)
erlps__unzip__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unzip__3 :: ErlangFun
erlps__unzip__3 [(ErlangCons (ErlangTuple [x_0, y_1]) ts_2),
                 xs_3, ys_4]
  =
  (erlps__unzip__3
     [ts_2, (ErlangCons x_0 xs_3), (ErlangCons y_1 ys_4)])
erlps__unzip__3 [(ErlangEmptyList), xs_0, ys_1] =
  let    tup_el_2 = (erlps__reverse__1 [xs_0])
  in let tup_el_4 = (erlps__reverse__1 [ys_1])
  in (ErlangTuple [tup_el_2, tup_el_4])
erlps__unzip__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__unzip__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zip3__3 :: ErlangFun
erlps__zip3__3 [(ErlangCons x_0 xs_1), (ErlangCons y_2 ys_3),
                (ErlangCons z_4 zs_5)]
  =
  let    head_6 = (ErlangTuple [x_0, y_2, z_4])
  in let tail_10 = (erlps__zip3__3 [xs_1, ys_3, zs_5])
  in (ErlangCons head_6 tail_10)
erlps__zip3__3 [(ErlangEmptyList), (ErlangEmptyList),
                (ErlangEmptyList)]
  =
  ErlangEmptyList
erlps__zip3__3 [arg_0, arg_1, arg_2] = (EXC.function_clause unit)
erlps__zip3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unzip3__1 :: ErlangFun
erlps__unzip3__1 [ts_0] =
  (erlps__unzip3__4
     [ts_0, ErlangEmptyList, ErlangEmptyList, ErlangEmptyList])
erlps__unzip3__1 [arg_5] = (EXC.function_clause unit)
erlps__unzip3__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unzip3__4 :: ErlangFun
erlps__unzip3__4 [(ErlangCons (ErlangTuple [x_0, y_1,
                                            z_2]) ts_3),
                  xs_4, ys_5, zs_6]
  =
  (erlps__unzip3__4
     [ts_3, (ErlangCons x_0 xs_4), (ErlangCons y_1 ys_5),
      (ErlangCons z_2 zs_6)])
erlps__unzip3__4 [(ErlangEmptyList), xs_0, ys_1, zs_2] =
  let    tup_el_3 = (erlps__reverse__1 [xs_0])
  in let tup_el_5 = (erlps__reverse__1 [ys_1])
  in let tup_el_7 = (erlps__reverse__1 [zs_2])
  in (ErlangTuple [tup_el_3, tup_el_5, tup_el_7])
erlps__unzip3__4 [arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__unzip3__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zipwith__3 :: ErlangFun
erlps__zipwith__3 [f_0, (ErlangCons x_1 xs_2),
                   (ErlangCons y_3 ys_4)]
  =
  let   
    head_5 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons x_1 (ErlangCons y_3 ErlangEmptyList))])
  in let tail_9 = (erlps__zipwith__3 [f_0, xs_2, ys_4])
  in (ErlangCons head_5 tail_9)
erlps__zipwith__3 [f_0, (ErlangEmptyList), (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  ErlangEmptyList
erlps__zipwith__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__zipwith__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zipwith3__4 :: ErlangFun
erlps__zipwith3__4 [f_0, (ErlangCons x_1 xs_2),
                    (ErlangCons y_3 ys_4), (ErlangCons z_5 zs_6)]
  =
  let   
    head_7 =
      (BIF.erlang__apply__2
         [f_0,
          (ErlangCons x_1
             (ErlangCons y_3 (ErlangCons z_5 ErlangEmptyList)))])
  in let tail_12 = (erlps__zipwith3__4 [f_0, xs_2, ys_4, zs_6])
  in (ErlangCons head_7 tail_12)
erlps__zipwith3__4 [f_0, (ErlangEmptyList), (ErlangEmptyList),
                    (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 3))) =
  ErlangEmptyList
erlps__zipwith3__4 [arg_1, arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__zipwith3__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort__1 :: ErlangFun
erlps__sort__1 [l0_3@(ErlangCons x_0 (ErlangCons y_1 l_2))]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [x_0, y_1])))) =
  case l_2 of
    (ErlangEmptyList) -> l0_3
    (ErlangCons z_5 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesserEq
                                                     [y_1, z_5])))) ->
      l0_3
    (ErlangCons z_8 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesserEq
                                                     [x_0, z_8])))) ->
      (ErlangCons x_0
         (ErlangCons z_8 (ErlangCons y_1 ErlangEmptyList)))
    (ErlangCons z_17 (ErlangEmptyList)) ->
      (ErlangCons z_17
         (ErlangCons x_0 (ErlangCons y_1 ErlangEmptyList)))
    _ | (ErlangAtom "true") <-
          ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [x_0, y_1])))) ->
      (erlps__sort_1__3 [y_1, l_2, (ErlangCons x_0 ErlangEmptyList)])
    _ ->
      (erlps__split_1__5
         [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__sort__1 [(ErlangCons x_0 (ErlangCons y_1 l_2))] =
  case l_2 of
    (ErlangEmptyList) ->
      (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList))
    (ErlangCons z_8 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesserEq
                                                     [x_0, z_8])))) ->
      (ErlangCons y_1 (ErlangCons x_0 l_2))
    (ErlangCons z_15 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_lesserEq
                                                      [y_1, z_15])))) ->
      (ErlangCons y_1
         (ErlangCons z_15 (ErlangCons x_0 ErlangEmptyList)))
    (ErlangCons z_24 (ErlangEmptyList)) ->
      (ErlangCons z_24
         (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList)))
    _ ->
      (erlps__split_2__5
         [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__sort__1 [l_0@(ErlangCons _ (ErlangEmptyList))] = l_0
erlps__sort__1 [l_0@(ErlangEmptyList)] = l_0
erlps__sort__1 [arg_1] = (EXC.function_clause unit)
erlps__sort__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort_1__3 :: ErlangFun
erlps__sort_1__3 [x_0, (ErlangCons y_1 l_2), r_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [x_0, y_1])))) =
  (erlps__sort_1__3 [y_1, l_2, (ErlangCons x_0 r_3)])
erlps__sort_1__3 [x_0, (ErlangCons y_1 l_2), r_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [x_0, y_1])))) =
  (erlps__split_1__5 [x_0, y_1, l_2, r_3, ErlangEmptyList])
erlps__sort_1__3 [x_0, (ErlangCons y_1 l_2), r_3] =
  (erlps__split_2__5 [x_0, y_1, l_2, r_3, ErlangEmptyList])
erlps__sort_1__3 [x_0, (ErlangEmptyList), r_1] =
  (BIF.lists__reverse__2 [r_1, (ErlangCons x_0 ErlangEmptyList)])
erlps__sort_1__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__sort_1__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge__1 :: ErlangFun
erlps__merge__1 [l_0] = (erlps__mergel__2 [l_0, ErlangEmptyList])
erlps__merge__1 [arg_3] = (EXC.function_clause unit)
erlps__merge__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3__3 :: ErlangFun
erlps__merge3__3 [l1_0, (ErlangEmptyList), l3_1] =
  (erlps__merge__2 [l1_0, l3_1])
erlps__merge3__3 [l1_0, l2_1, (ErlangEmptyList)] =
  (erlps__merge__2 [l1_0, l2_1])
erlps__merge3__3 [l1_0, (ErlangCons h2_1 t2_2),
                  (ErlangCons h3_3 t3_4)]
  =
  let
    arg_5 =
      (erlps__merge3_1__6
         [l1_0, ErlangEmptyList, h2_1, t2_2, h3_3, t3_4])
  in (BIF.lists__reverse__2 [arg_5, ErlangEmptyList])
erlps__merge3__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__merge3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3__3 :: ErlangFun
erlps__rmerge3__3 [l1_0, (ErlangEmptyList), l3_1] =
  (erlps__rmerge__2 [l1_0, l3_1])
erlps__rmerge3__3 [l1_0, l2_1, (ErlangEmptyList)] =
  (erlps__rmerge__2 [l1_0, l2_1])
erlps__rmerge3__3 [l1_0, (ErlangCons h2_1 t2_2),
                   (ErlangCons h3_3 t3_4)]
  =
  let
    arg_5 =
      (erlps__rmerge3_1__6
         [l1_0, ErlangEmptyList, h2_1, t2_2, h3_3, t3_4])
  in (BIF.lists__reverse__2 [arg_5, ErlangEmptyList])
erlps__rmerge3__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__rmerge3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge__2 :: ErlangFun
erlps__merge__2 [t1_0, (ErlangEmptyList)] = t1_0
erlps__merge__2 [t1_0, (ErlangCons h2_1 t2_2)] =
  let
    arg_3 = (erlps__merge2_1__4 [t1_0, h2_1, t2_2, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_3, ErlangEmptyList])
erlps__merge__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__merge__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge__2 :: ErlangFun
erlps__rmerge__2 [t1_0, (ErlangEmptyList)] = t1_0
erlps__rmerge__2 [t1_0, (ErlangCons h2_1 t2_2)] =
  let
    arg_3 = (erlps__rmerge2_1__4 [t1_0, h2_1, t2_2, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_3, ErlangEmptyList])
erlps__rmerge__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__rmerge__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__concat__1 :: ErlangFun
erlps__concat__1 [list_0] =
  let arg_1 = (ErlangFun 1 erlps__thing_to_list__1)
  in (erlps__flatmap__2 [arg_1, list_0])
erlps__concat__1 [arg_3] = (EXC.function_clause unit)
erlps__concat__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__thing_to_list__1 :: ErlangFun
erlps__thing_to_list__1 [x_0] | (isEInt x_0) =
  (BIF.erlang__integer_to_list__1 [x_0])
erlps__thing_to_list__1 [x_0] | (isEFloat x_0) =
  (BIF.erlang__float_to_list__1 [x_0])
erlps__thing_to_list__1 [x_0] | (isEAtom x_0) =
  (BIF.erlang__atom_to_list__1 [x_0])
erlps__thing_to_list__1 [x_0] | (isEList x_0) = x_0
erlps__thing_to_list__1 [arg_1] = (EXC.function_clause unit)
erlps__thing_to_list__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatten__1 :: ErlangFun
erlps__flatten__1 [list_0] | (isEList list_0) =
  (erlps__do_flatten__2 [list_0, ErlangEmptyList])
erlps__flatten__1 [arg_3] = (EXC.function_clause unit)
erlps__flatten__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatten__2 :: ErlangFun
erlps__flatten__2 [list_0, tail_1]
  | ((isEList list_0) && (isEList tail_1)) =
  (erlps__do_flatten__2 [list_0, tail_1])
erlps__flatten__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__flatten__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_flatten__2 :: ErlangFun
erlps__do_flatten__2 [(ErlangCons h_0 t_1), tail_2]
  | (isEList h_0) =
  let arg_4 = (erlps__do_flatten__2 [t_1, tail_2])
  in (erlps__do_flatten__2 [h_0, arg_4])
erlps__do_flatten__2 [(ErlangCons h_0 t_1), tail_2] =
  let tail_4 = (erlps__do_flatten__2 [t_1, tail_2])
  in (ErlangCons h_0 tail_4)
erlps__do_flatten__2 [(ErlangEmptyList), tail_0] = tail_0
erlps__do_flatten__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__do_flatten__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatlength__1 :: ErlangFun
erlps__flatlength__1 [list_0] =
  (erlps__flatlength__2 [list_0, (ErlangInt (DBI.fromInt 0))])
erlps__flatlength__1 [arg_3] = (EXC.function_clause unit)
erlps__flatlength__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatlength__2 :: ErlangFun
erlps__flatlength__2 [(ErlangCons h_0 t_1), l_2]
  | (isEList h_0) =
  let arg_4 = (erlps__flatlength__2 [t_1, l_2])
  in (erlps__flatlength__2 [h_0, arg_4])
erlps__flatlength__2 [(ErlangCons _ t_0), l_1] =
  let
    arg_3 = (BIF.erlang__op_plus [l_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__flatlength__2 [t_0, arg_3])
erlps__flatlength__2 [(ErlangEmptyList), l_0] = l_0
erlps__flatlength__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__flatlength__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keydelete__3 :: ErlangFun
erlps__keydelete__3 [k_0, n_1, l_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_6 = (BIF.erlang__is_integer__1 [n_1])
             in
               case lop_6 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater [n_1, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_6)))) =
  (erlps__keydelete3__3 [k_0, n_1, l_2])
erlps__keydelete__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__keydelete__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keydelete3__3 :: ErlangFun
erlps__keydelete3__3 [key_0, n_1, (ErlangCons h_2 t_3)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_4 = (BIF.erlang__element__2 [n_1, h_2])
             in (BIF.erlang__op_eq [lop_4, key_0])))) =
  t_3
erlps__keydelete3__3 [key_0, n_1, (ErlangCons h_2 t_3)] =
  let tail_5 = (erlps__keydelete3__3 [key_0, n_1, t_3])
  in (ErlangCons h_2 tail_5)
erlps__keydelete3__3 [_, _, (ErlangEmptyList)] = ErlangEmptyList
erlps__keydelete3__3 [arg_0, arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__keydelete3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keyreplace__4 :: ErlangFun
erlps__keyreplace__4 [k_0, n_1, l_2, new_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_9 = (BIF.erlang__is_integer__1 [n_1])
             in let
               lop_8 =
                 case lop_9 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greater [n_1, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_9)
             in
               case lop_8 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_tuple__1 [new_3])
                 _ -> (EXC.badarg1 lop_8)))) =
  (erlps__keyreplace3__4 [k_0, n_1, l_2, new_3])
erlps__keyreplace__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__keyreplace__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keyreplace3__4 :: ErlangFun
erlps__keyreplace3__4 [key_0, pos_1, (ErlangCons tup_2 tail_3),
                       new_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_7 = (BIF.erlang__element__2 [pos_1, tup_2])
             in (BIF.erlang__op_eq [lop_7, key_0])))) =
  (ErlangCons new_4 tail_3)
erlps__keyreplace3__4 [key_0, pos_1, (ErlangCons h_2 t_3), new_4]
  =
  let tail_6 = (erlps__keyreplace3__4 [key_0, pos_1, t_3, new_4])
  in (ErlangCons h_2 tail_6)
erlps__keyreplace3__4 [_, _, (ErlangEmptyList), _] =
  ErlangEmptyList
erlps__keyreplace3__4 [arg_0, arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__keyreplace3__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keytake__3 :: ErlangFun
erlps__keytake__3 [key_0, n_1, l_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_7 = (BIF.erlang__is_integer__1 [n_1])
             in
               case lop_7 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater [n_1, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_7)))) =
  (erlps__keytake__4 [key_0, n_1, l_2, ErlangEmptyList])
erlps__keytake__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__keytake__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keytake__4 :: ErlangFun
erlps__keytake__4 [key_0, n_1, (ErlangCons h_2 t_3), l_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_10 = (BIF.erlang__element__2 [n_1, h_2])
             in (BIF.erlang__op_eq [lop_10, key_0])))) =
  let tup_el_7 = (BIF.lists__reverse__2 [l_4, t_3])
  in (ErlangTuple [(ErlangAtom "value"), h_2, tup_el_7])
erlps__keytake__4 [key_0, n_1, (ErlangCons h_2 t_3), l_4] =
  (erlps__keytake__4 [key_0, n_1, t_3, (ErlangCons h_2 l_4)])
erlps__keytake__4 [_k_0, _n_1, (ErlangEmptyList), _l_2] =
  (ErlangAtom "false")
erlps__keytake__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__keytake__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keystore__4 :: ErlangFun
erlps__keystore__4 [k_0, n_1, l_2, new_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_9 = (BIF.erlang__is_integer__1 [n_1])
             in let
               lop_8 =
                 case lop_9 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greater [n_1, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_9)
             in
               case lop_8 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_tuple__1 [new_3])
                 _ -> (EXC.badarg1 lop_8)))) =
  (erlps__keystore2__4 [k_0, n_1, l_2, new_3])
erlps__keystore__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__keystore__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keystore2__4 :: ErlangFun
erlps__keystore2__4 [key_0, n_1, (ErlangCons h_2 t_3), new_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_7 = (BIF.erlang__element__2 [n_1, h_2])
             in (BIF.erlang__op_eq [lop_7, key_0])))) =
  (ErlangCons new_4 t_3)
erlps__keystore2__4 [key_0, n_1, (ErlangCons h_2 t_3), new_4] =
  let tail_6 = (erlps__keystore2__4 [key_0, n_1, t_3, new_4])
  in (ErlangCons h_2 tail_6)
erlps__keystore2__4 [_key_0, _n_1, (ErlangEmptyList), new_2] =
  (ErlangCons new_2 ErlangEmptyList)
erlps__keystore2__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__keystore2__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysort__2 :: ErlangFun
erlps__keysort__2 [i_0, l_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_100 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_100 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater [i_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_100)))) =
  case l_1 of
    (ErlangEmptyList) -> l_1
    (ErlangCons _ (ErlangEmptyList)) -> l_1
    (ErlangCons x_3 (ErlangCons y_4 t_5)) ->
      let    tup_el_7 = (BIF.erlang__element__2 [i_0, x_3])
      in let tup_el_10 = (BIF.erlang__element__2 [i_0, y_4])
      in let case_6 = (ErlangTuple [tup_el_7, tup_el_10])
      in
        case case_6 of
          (ErlangTuple [ex_13, ey_14]) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesserEq
                                                     [ex_13, ey_14])))) ->
            case t_5 of
              (ErlangEmptyList) -> l_1
              (ErlangCons z_18 (ErlangEmptyList)) ->
                let case_19 = (BIF.erlang__element__2 [i_0, z_18])
                in
                  case case_19 of
                    ez_22 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesserEq
                                        [ey_14, ez_22])))) ->
                      l_1
                    ez_25 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesserEq
                                        [ex_13, ez_25])))) ->
                      (ErlangCons x_3
                         (ErlangCons z_18 (ErlangCons y_4 ErlangEmptyList)))
                    _ez_34 ->
                      (ErlangCons z_18
                         (ErlangCons x_3 (ErlangCons y_4 ErlangEmptyList)))
                    something_else -> (EXC.case_clause something_else)
              _ | (ErlangAtom "true") <-
                    ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [x_3, y_4])))) ->
                (erlps__keysort_1__5
                   [i_0, y_4, ey_14, t_5, (ErlangCons x_3 ErlangEmptyList)])
              _ ->
                (erlps__keysplit_1__8
                   [i_0, x_3, ex_13, y_4, ey_14, t_5, ErlangEmptyList,
                    ErlangEmptyList])
              something_else -> (EXC.case_clause something_else)
          (ErlangTuple [ex_58, ey_59]) ->
            case t_5 of
              (ErlangEmptyList) ->
                (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList))
              (ErlangCons z_65 (ErlangEmptyList)) ->
                let case_66 = (BIF.erlang__element__2 [i_0, z_65])
                in
                  case case_66 of
                    ez_69 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesserEq
                                        [ex_58, ez_69])))) ->
                      (ErlangCons y_4 (ErlangCons x_3 t_5))
                    ez_76 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesserEq
                                        [ey_59, ez_76])))) ->
                      (ErlangCons y_4
                         (ErlangCons z_65 (ErlangCons x_3 ErlangEmptyList)))
                    _ez_85 ->
                      (ErlangCons z_65
                         (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList)))
                    something_else -> (EXC.case_clause something_else)
              _ ->
                (erlps__keysplit_2__8
                   [i_0, x_3, ex_58, y_4, ey_59, t_5, ErlangEmptyList,
                    ErlangEmptyList])
              something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    something_else -> (EXC.case_clause something_else)
erlps__keysort__2 [arg_104, arg_105] = (EXC.function_clause unit)
erlps__keysort__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysort_1__5 :: ErlangFun
erlps__keysort_1__5 [i_0, x_1, ex_2, (ErlangCons y_3 l_4), r_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [x_1, y_3])))) =
  (erlps__keysort_1__5 [i_0, y_3, ex_2, l_4, (ErlangCons x_1 r_5)])
erlps__keysort_1__5 [i_0, x_1, ex_2, (ErlangCons y_3 l_4), r_5] =
  let case_6 = (BIF.erlang__element__2 [i_0, y_3])
  in
    case case_6 of
      ey_9 | (ErlangAtom "true") <-
               ((falsifyErrors
                   (\ _ -> (BIF.erlang__op_lesserEq [ex_2, ey_9])))) ->
        (erlps__keysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_9, l_4, r_5, ErlangEmptyList])
      ey_20 ->
        (erlps__keysplit_2__8
           [i_0, x_1, ex_2, y_3, ey_20, l_4, r_5, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__keysort_1__5 [_i_0, x_1, _ex_2, (ErlangEmptyList), r_3] =
  (BIF.lists__reverse__2 [r_3, (ErlangCons x_1 ErlangEmptyList)])
erlps__keysort_1__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__keysort_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge__3 :: ErlangFun
erlps__keymerge__3 [index_0, t1_1, l2_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_18 = (BIF.erlang__is_integer__1 [index_0])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater
                      [index_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_18)))) =
  case l2_2 of
    (ErlangEmptyList) -> t1_1
    (ErlangCons h2_4 t2_5) ->
      let    e2_8 = (BIF.erlang__element__2 [index_0, h2_4])
      in let
        m_15 =
          (erlps__keymerge2_1__6
             [index_0, t1_1, e2_8, h2_4, t2_5, ErlangEmptyList])
      in (BIF.lists__reverse__2 [m_15, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__keymerge__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__keymerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge__3 :: ErlangFun
erlps__rkeymerge__3 [index_0, t1_1, l2_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_18 = (BIF.erlang__is_integer__1 [index_0])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater
                      [index_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_18)))) =
  case l2_2 of
    (ErlangEmptyList) -> t1_1
    (ErlangCons h2_4 t2_5) ->
      let    e2_8 = (BIF.erlang__element__2 [index_0, h2_4])
      in let
        m_15 =
          (erlps__rkeymerge2_1__6
             [index_0, t1_1, e2_8, h2_4, t2_5, ErlangEmptyList])
      in (BIF.lists__reverse__2 [m_15, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__rkeymerge__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__rkeymerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeysort__2 :: ErlangFun
erlps__ukeysort__2 [i_0, l_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_134 = (BIF.erlang__is_integer__1 [i_0])
             in
               case lop_134 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater [i_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_134)))) =
  case l_1 of
    (ErlangEmptyList) -> l_1
    (ErlangCons _ (ErlangEmptyList)) -> l_1
    (ErlangCons x_3 (ErlangCons y_4 t_5)) ->
      let    tup_el_7 = (BIF.erlang__element__2 [i_0, x_3])
      in let tup_el_10 = (BIF.erlang__element__2 [i_0, y_4])
      in let case_6 = (ErlangTuple [tup_el_7, tup_el_10])
      in
        case case_6 of
          (ErlangTuple [ex_13, ey_14]) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_eq
                                                     [ex_13, ey_14])))) ->
            (erlps__ukeysort_1__4 [i_0, x_3, ex_13, t_5])
          (ErlangTuple [ex_21, ey_22]) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesser
                                                     [ex_21, ey_22])))) ->
            case t_5 of
              (ErlangEmptyList) -> l_1
              (ErlangCons z_26 (ErlangEmptyList)) ->
                let case_27 = (BIF.erlang__element__2 [i_0, z_26])
                in
                  case case_27 of
                    ez_30 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_eq [ey_22, ez_30])))) ->
                      (ErlangCons x_3 (ErlangCons y_4 ErlangEmptyList))
                    ez_37 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesser
                                        [ey_22, ez_37])))) ->
                      (ErlangCons x_3
                         (ErlangCons y_4 (ErlangCons z_26 ErlangEmptyList)))
                    ez_46 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_eq [ez_46, ex_21])))) ->
                      (ErlangCons x_3 (ErlangCons y_4 ErlangEmptyList))
                    ez_53 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesserEq
                                        [ex_21, ez_53])))) ->
                      (ErlangCons x_3
                         (ErlangCons z_26 (ErlangCons y_4 ErlangEmptyList)))
                    _ez_62 ->
                      (ErlangCons z_26
                         (ErlangCons x_3 (ErlangCons y_4 ErlangEmptyList)))
                    something_else -> (EXC.case_clause something_else)
              _ ->
                (erlps__ukeysplit_1__8
                   [i_0, x_3, ex_21, y_4, ey_22, t_5, ErlangEmptyList,
                    ErlangEmptyList])
              something_else -> (EXC.case_clause something_else)
          (ErlangTuple [ex_77, ey_78]) ->
            case t_5 of
              (ErlangEmptyList) ->
                (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList))
              (ErlangCons z_84 (ErlangEmptyList)) ->
                let case_85 = (BIF.erlang__element__2 [i_0, z_84])
                in
                  case case_85 of
                    ez_88 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_eq [ex_77, ez_88])))) ->
                      (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList))
                    ez_95 | (ErlangAtom "true") <-
                              ((falsifyErrors
                                  (\ _ ->
                                     (BIF.erlang__op_lesser
                                        [ex_77, ez_95])))) ->
                      (ErlangCons y_4
                         (ErlangCons x_3 (ErlangCons z_84 ErlangEmptyList)))
                    ez_104 | (ErlangAtom "true") <-
                               ((falsifyErrors
                                   (\ _ ->
                                      (BIF.erlang__op_eq [ey_78, ez_104])))) ->
                      (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList))
                    ez_111 | (ErlangAtom "true") <-
                               ((falsifyErrors
                                   (\ _ ->
                                      (BIF.erlang__op_lesserEq
                                         [ey_78, ez_111])))) ->
                      (ErlangCons y_4
                         (ErlangCons z_84 (ErlangCons x_3 ErlangEmptyList)))
                    _ez_120 ->
                      (ErlangCons z_84
                         (ErlangCons y_4 (ErlangCons x_3 ErlangEmptyList)))
                    something_else -> (EXC.case_clause something_else)
              _ ->
                (erlps__ukeysplit_2__5
                   [i_0, y_4, ey_78, t_5, (ErlangCons x_3 ErlangEmptyList)])
              something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.case_clause something_else)
    something_else -> (EXC.case_clause something_else)
erlps__ukeysort__2 [arg_138, arg_139] =
  (EXC.function_clause unit)
erlps__ukeysort__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeysort_1__4 :: ErlangFun
erlps__ukeysort_1__4 [i_0, x_1, ex_2, (ErlangCons y_3 l_4)] =
  let case_5 = (BIF.erlang__element__2 [i_0, y_3])
  in
    case case_5 of
      ey_8 | (ErlangAtom "true") <-
               ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ex_2, ey_8])))) ->
        (erlps__ukeysort_1__4 [i_0, x_1, ex_2, l_4])
      ey_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ex_2, ey_15])))) ->
        (erlps__ukeysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_15, l_4, ErlangEmptyList,
            ErlangEmptyList])
      ey_26 ->
        (erlps__ukeysplit_2__5
           [i_0, y_3, ey_26, l_4, (ErlangCons x_1 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__ukeysort_1__4 [_i_0, x_1, _ex_2, (ErlangEmptyList)] =
  (ErlangCons x_1 ErlangEmptyList)
erlps__ukeysort_1__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__ukeysort_1__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge__3 :: ErlangFun
erlps__ukeymerge__3 [index_0, l1_1, t2_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_18 = (BIF.erlang__is_integer__1 [index_0])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater
                      [index_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_18)))) =
  case l1_1 of
    (ErlangEmptyList) -> t2_2
    (ErlangCons h1_4 t1_5) ->
      let    e1_8 = (BIF.erlang__element__2 [index_0, h1_4])
      in let
        m_15 =
          (erlps__ukeymerge2_2__6
             [index_0, t1_5, e1_8, h1_4, t2_2, ErlangEmptyList])
      in (BIF.lists__reverse__2 [m_15, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__ukeymerge__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__ukeymerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge__3 :: ErlangFun
erlps__rukeymerge__3 [index_0, t1_1, l2_2]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let lop_18 = (BIF.erlang__is_integer__1 [index_0])
             in
               case lop_18 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__op_greater
                      [index_0, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_18)))) =
  case l2_2 of
    (ErlangEmptyList) -> t1_1
    (ErlangCons h2_4 t2_5) ->
      let    e2_8 = (BIF.erlang__element__2 [index_0, h2_4])
      in let
        m_15 =
          (erlps__rukeymerge2_1__6
             [index_0, t1_1, e2_8, t2_5, ErlangEmptyList, h2_4])
      in (BIF.lists__reverse__2 [m_15, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__rukeymerge__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__rukeymerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymap__3 :: ErlangFun
erlps__keymap__3 [fun_0, index_1, (ErlangCons tup_2 tail_3)] =
  let    arg_8 = (BIF.erlang__element__2 [index_1, tup_2])
  in let
    arg_7 =
      (BIF.erlang__apply__2
         [fun_0, (ErlangCons arg_8 ErlangEmptyList)])
  in let
    head_4 = (BIF.erlang__setelement__3 [index_1, tup_2, arg_7])
  in let tail_12 = (erlps__keymap__3 [fun_0, index_1, tail_3])
  in (ErlangCons head_4 tail_12)
erlps__keymap__3 [fun_0, index_1, (ErlangEmptyList)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_3 = (BIF.erlang__is_integer__1 [index_1])
             in let
               lop_2 =
                 case lop_3 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [index_1, (ErlangInt (DBI.fromInt 1))])
                   _ -> (EXC.badarg1 lop_3)
             in
               case lop_2 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   (BIF.erlang__is_function__2
                      [fun_0, (ErlangInt (DBI.fromInt 1))])
                 _ -> (EXC.badarg1 lop_2)))) =
  ErlangEmptyList
erlps__keymap__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__keymap__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sort__2 :: ErlangFun
erlps__sort__2 [fun_0, (ErlangEmptyList)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  ErlangEmptyList
erlps__sort__2 [fun_0, l_1@(ErlangCons _ (ErlangEmptyList))]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  l_1
erlps__sort__2 [fun_0, (ErlangCons x_1 (ErlangCons y_2 t_3))] =
  let
    case_4 =
      (BIF.erlang__apply__2
         [fun_0, (ErlangCons x_1 (ErlangCons y_2 ErlangEmptyList))])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (erlps__fsplit_1__6
           [y_2, x_1, fun_0, t_3, ErlangEmptyList, ErlangEmptyList])
      (ErlangAtom "false") ->
        (erlps__fsplit_2__6
           [y_2, x_1, fun_0, t_3, ErlangEmptyList, ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__sort__2 [arg_20, arg_21] = (EXC.function_clause unit)
erlps__sort__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge__3 :: ErlangFun
erlps__merge__3 [fun_0, t1_1, (ErlangCons h2_2 t2_3)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  let
    arg_4 =
      (erlps__fmerge2_1__5 [t1_1, h2_2, fun_0, t2_3, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_4, ErlangEmptyList])
erlps__merge__3 [fun_0, t1_1, (ErlangEmptyList)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  t1_1
erlps__merge__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__merge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge__3 :: ErlangFun
erlps__rmerge__3 [fun_0, t1_1, (ErlangCons h2_2 t2_3)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  let
    arg_4 =
      (erlps__rfmerge2_1__5 [t1_1, h2_2, fun_0, t2_3, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_4, ErlangEmptyList])
erlps__rmerge__3 [fun_0, t1_1, (ErlangEmptyList)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  t1_1
erlps__rmerge__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__rmerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usort__2 :: ErlangFun
erlps__usort__2 [fun_0, l_1@(ErlangCons _ (ErlangEmptyList))]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  l_1
erlps__usort__2 [fun_0, l_1@(ErlangEmptyList)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  l_1
erlps__usort__2 [fun_0, (ErlangCons x_1 l_2)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  (erlps__usort_1__3 [fun_0, x_1, l_2])
erlps__usort__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__usort__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usort_1__3 :: ErlangFun
erlps__usort_1__3 [fun_0, x_1, (ErlangCons y_2 l_3)] =
  let
    case_4 =
      (BIF.erlang__apply__2
         [fun_0, (ErlangCons x_1 (ErlangCons y_2 ErlangEmptyList))])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let
          case_8 =
            (BIF.erlang__apply__2
               [fun_0, (ErlangCons y_2 (ErlangCons x_1 ErlangEmptyList))])
        in
          case case_8 of
            (ErlangAtom "true") ->
              case l_3 of
                (ErlangEmptyList) -> (ErlangCons x_1 ErlangEmptyList)
                _ -> (erlps__usort_1__3 [fun_0, x_1, l_3])
                something_else -> (EXC.case_clause something_else)
            (ErlangAtom "false") ->
              (erlps__ufsplit_1__6
                 [y_2, x_1, fun_0, l_3, ErlangEmptyList, ErlangEmptyList])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        (erlps__ufsplit_2__4
           [y_2, l_3, fun_0, (ErlangCons x_1 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__usort_1__3 [arg_30, arg_31, arg_32] =
  (EXC.function_clause unit)
erlps__usort_1__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge__3 :: ErlangFun
erlps__umerge__3 [fun_0, (ErlangEmptyList), t2_1]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  t2_1
erlps__umerge__3 [fun_0, (ErlangCons h1_1 t1_2), t2_3]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  let
    arg_4 =
      (erlps__ufmerge2_2__5 [h1_1, t1_2, fun_0, t2_3, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_4, ErlangEmptyList])
erlps__umerge__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__umerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge__3 :: ErlangFun
erlps__rumerge__3 [fun_0, t1_1, (ErlangEmptyList)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  t1_1
erlps__rumerge__3 [fun_0, t1_1, (ErlangCons h2_2 t2_3)]
  | (isEFunA fun_0 (ErlangInt (DBI.fromInt 2))) =
  let
    arg_4 =
      (erlps__rufmerge2_1__5
         [t1_1, h2_2, fun_0, t2_3, ErlangEmptyList])
  in (BIF.lists__reverse__2 [arg_4, ErlangEmptyList])
erlps__rumerge__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__rumerge__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usort__1 :: ErlangFun
erlps__usort__1 [l0_3@(ErlangCons x_0 (ErlangCons y_1 l_2))]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [x_0, y_1])))) =
  case l_2 of
    (ErlangEmptyList) -> l0_3
    (ErlangCons z_5 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesser
                                                     [y_1, z_5])))) ->
      l0_3
    (ErlangCons z_8 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_eq
                                                     [y_1, z_8])))) ->
      (ErlangCons x_0 (ErlangCons y_1 ErlangEmptyList))
    (ErlangCons z_15 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_lesser
                                                      [z_15, x_0])))) ->
      (ErlangCons z_15
         (ErlangCons x_0 (ErlangCons y_1 ErlangEmptyList)))
    (ErlangCons z_24 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_eq
                                                      [z_24, x_0])))) ->
      (ErlangCons x_0 (ErlangCons y_1 ErlangEmptyList))
    (ErlangCons z_31 (ErlangEmptyList)) ->
      (ErlangCons x_0
         (ErlangCons z_31 (ErlangCons y_1 ErlangEmptyList)))
    _ ->
      (erlps__usplit_1__5
         [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__usort__1 [(ErlangCons x_0 (ErlangCons y_1 l_2))]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [x_0, y_1])))) =
  case l_2 of
    (ErlangEmptyList) ->
      (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList))
    (ErlangCons z_8 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                           ((falsifyErrors
                                               (\ _ ->
                                                  (BIF.erlang__op_lesser
                                                     [x_0, z_8])))) ->
      (ErlangCons y_1 (ErlangCons x_0 l_2))
    (ErlangCons z_15 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_eq
                                                      [x_0, z_15])))) ->
      (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList))
    (ErlangCons z_22 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_lesser
                                                      [z_22, y_1])))) ->
      (ErlangCons z_22
         (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList)))
    (ErlangCons z_31 (ErlangEmptyList)) | (ErlangAtom "true") <-
                                            ((falsifyErrors
                                                (\ _ ->
                                                   (BIF.erlang__op_eq
                                                      [z_31, y_1])))) ->
      (ErlangCons y_1 (ErlangCons x_0 ErlangEmptyList))
    (ErlangCons z_38 (ErlangEmptyList)) ->
      (ErlangCons y_1
         (ErlangCons z_38 (ErlangCons x_0 ErlangEmptyList)))
    _ ->
      (erlps__usplit_2__5
         [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__usort__1 [(ErlangCons x_0 (ErlangCons _y_1 l_2))] =
  (erlps__usort_1__2 [x_0, l_2])
erlps__usort__1 [l_0@(ErlangCons _ (ErlangEmptyList))] = l_0
erlps__usort__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__usort__1 [arg_0] = (EXC.function_clause unit)
erlps__usort__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usort_1__2 :: ErlangFun
erlps__usort_1__2 [x_0, (ErlangCons y_1 l_2)]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [x_0, y_1])))) =
  (erlps__usort_1__2 [x_0, l_2])
erlps__usort_1__2 [x_0, (ErlangCons y_1 l_2)]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [x_0, y_1])))) =
  (erlps__usplit_1__5
     [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
erlps__usort_1__2 [x_0, (ErlangCons y_1 l_2)] =
  (erlps__usplit_2__5
     [x_0, y_1, l_2, ErlangEmptyList, ErlangEmptyList])
erlps__usort_1__2 [x_0, (ErlangEmptyList)] =
  (ErlangCons x_0 ErlangEmptyList)
erlps__usort_1__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__usort_1__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge__1 :: ErlangFun
erlps__umerge__1 [l_0] = (erlps__umergel__1 [l_0])
erlps__umerge__1 [arg_2] = (EXC.function_clause unit)
erlps__umerge__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3__3 :: ErlangFun
erlps__umerge3__3 [l1_0, (ErlangEmptyList), l3_1] =
  (erlps__umerge__2 [l1_0, l3_1])
erlps__umerge3__3 [l1_0, l2_1, (ErlangEmptyList)] =
  (erlps__umerge__2 [l1_0, l2_1])
erlps__umerge3__3 [l1_0, (ErlangCons h2_1 t2_2),
                   (ErlangCons h3_3 t3_4)]
  =
  let
    arg_5 =
      (erlps__umerge3_1__7
         [l1_0, (ErlangCons h2_1 h3_3), t2_2, h2_1, ErlangEmptyList, t3_4,
          h3_3])
  in (BIF.lists__reverse__2 [arg_5, ErlangEmptyList])
erlps__umerge3__3 [arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__umerge3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3__3 :: ErlangFun
erlps__rumerge3__3 [l1_0, (ErlangEmptyList), l3_1] =
  (erlps__rumerge__2 [l1_0, l3_1])
erlps__rumerge3__3 [l1_0, l2_1, (ErlangEmptyList)] =
  (erlps__rumerge__2 [l1_0, l2_1])
erlps__rumerge3__3 [l1_0, (ErlangCons h2_1 t2_2),
                    (ErlangCons h3_3 t3_4)]
  =
  let
    arg_5 =
      (erlps__rumerge3_1__6
         [l1_0, t2_2, h2_1, ErlangEmptyList, t3_4, h3_3])
  in (BIF.lists__reverse__2 [arg_5, ErlangEmptyList])
erlps__rumerge3__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__rumerge3__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge__2 :: ErlangFun
erlps__umerge__2 [(ErlangEmptyList), t2_0] = t2_0
erlps__umerge__2 [(ErlangCons h1_0 t1_1), t2_2] =
  let
    arg_3 = (erlps__umerge2_2__4 [t1_1, t2_2, ErlangEmptyList, h1_0])
  in (BIF.lists__reverse__2 [arg_3, ErlangEmptyList])
erlps__umerge__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__umerge__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge__2 :: ErlangFun
erlps__rumerge__2 [t1_0, (ErlangEmptyList)] = t1_0
erlps__rumerge__2 [t1_0, (ErlangCons h2_1 t2_2)] =
  let
    arg_3 =
      (erlps__rumerge2_1__4 [t1_0, t2_2, ErlangEmptyList, h2_1])
  in (BIF.lists__reverse__2 [arg_3, ErlangEmptyList])
erlps__rumerge__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__rumerge__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__all__2 :: ErlangFun
erlps__all__2 [pred_0, (ErlangCons hd_1 tail_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") -> (erlps__all__2 [pred_0, tail_2])
      (ErlangAtom "false") -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__all__2 [pred_0, (ErlangEmptyList)]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  (ErlangAtom "true")
erlps__all__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__all__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__any__2 :: ErlangFun
erlps__any__2 [pred_0, (ErlangCons hd_1 tail_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") -> (erlps__any__2 [pred_0, tail_2])
      something_else -> (EXC.case_clause something_else)
erlps__any__2 [pred_0, (ErlangEmptyList)]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  (ErlangAtom "false")
erlps__any__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__any__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map__2 :: ErlangFun
erlps__map__2 [f_0, (ErlangCons h_1 t_2)] =
  let   
    head_3 =
      (BIF.erlang__apply__2 [f_0, (ErlangCons h_1 ErlangEmptyList)])
  in let tail_6 = (erlps__map__2 [f_0, t_2])
  in (ErlangCons head_3 tail_6)
erlps__map__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 1))) =
  ErlangEmptyList
erlps__map__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__map__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flatmap__2 :: ErlangFun
erlps__flatmap__2 [f_0, (ErlangCons hd_1 tail_2)] =
  let   
    lop_3 =
      (BIF.erlang__apply__2 [f_0, (ErlangCons hd_1 ErlangEmptyList)])
  in let rop_6 = (erlps__flatmap__2 [f_0, tail_2])
  in (BIF.erlang__op_append [lop_3, rop_6])
erlps__flatmap__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 1))) =
  ErlangEmptyList
erlps__flatmap__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__flatmap__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__foldl__3 :: ErlangFun
erlps__foldl__3 [f_0, accu_1, (ErlangCons hd_2 tail_3)] =
  let
    arg_5 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons hd_2 (ErlangCons accu_1 ErlangEmptyList))])
  in (erlps__foldl__3 [f_0, arg_5, tail_3])
erlps__foldl__3 [f_0, accu_1, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  accu_1
erlps__foldl__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__foldl__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__foldr__3 :: ErlangFun
erlps__foldr__3 [f_0, accu_1, (ErlangCons hd_2 tail_3)] =
  let arg_5 = (erlps__foldr__3 [f_0, accu_1, tail_3])
  in
    (BIF.erlang__apply__2
       [f_0, (ErlangCons hd_2 (ErlangCons arg_5 ErlangEmptyList))])
erlps__foldr__3 [f_0, accu_1, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  accu_1
erlps__foldr__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__foldr__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filter__2 :: ErlangFun
erlps__filter__2 [pred_0, list_1]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  (flmap
     (\ lc_4 ->
        case lc_4 of
          e_3 ->
            let
              cond_5 =
                (BIF.erlang__apply__2
                   [pred_0, (ErlangCons e_3 ErlangEmptyList)])
            in
              case cond_5 of
                (ErlangAtom "true") -> (ErlangCons e_3 ErlangEmptyList)
                _ -> ErlangEmptyList
          _ -> ErlangEmptyList)
     list_1)
erlps__filter__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__filter__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition__2 :: ErlangFun
erlps__partition__2 [pred_0, l_1] =
  (erlps__partition__4
     [pred_0, l_1, ErlangEmptyList, ErlangEmptyList])
erlps__partition__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__partition__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__partition__4 :: ErlangFun
erlps__partition__4 [pred_0, (ErlangCons h_1 t_2), as_3, bs_4] =
  let
    case_5 =
      (BIF.erlang__apply__2 [pred_0, (ErlangCons h_1 ErlangEmptyList)])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (erlps__partition__4 [pred_0, t_2, (ErlangCons h_1 as_3), bs_4])
      (ErlangAtom "false") ->
        (erlps__partition__4 [pred_0, t_2, as_3, (ErlangCons h_1 bs_4)])
      something_else -> (EXC.case_clause something_else)
erlps__partition__4 [pred_0, (ErlangEmptyList), as_1, bs_2]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  let    tup_el_3 = (erlps__reverse__1 [as_1])
  in let tup_el_5 = (erlps__reverse__1 [bs_2])
  in (ErlangTuple [tup_el_3, tup_el_5])
erlps__partition__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__partition__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__filtermap__2 :: ErlangFun
erlps__filtermap__2 [f_0, (ErlangCons hd_1 tail_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2 [f_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") ->
        let tail_7 = (erlps__filtermap__2 [f_0, tail_2])
        in (ErlangCons hd_1 tail_7)
      (ErlangTuple [(ErlangAtom "true"), val_10]) ->
        let tail_12 = (erlps__filtermap__2 [f_0, tail_2])
        in (ErlangCons val_10 tail_12)
      (ErlangAtom "false") -> (erlps__filtermap__2 [f_0, tail_2])
      something_else -> (EXC.case_clause something_else)
erlps__filtermap__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 1))) =
  ErlangEmptyList
erlps__filtermap__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__filtermap__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__zf__2 :: ErlangFun
erlps__zf__2 [f_0, l_1] = (erlps__filtermap__2 [f_0, l_1])
erlps__zf__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__zf__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__foreach__2 :: ErlangFun
erlps__foreach__2 [f_0, (ErlangCons hd_1 tail_2)] =
  let
    _ =
      (BIF.erlang__apply__2 [f_0, (ErlangCons hd_1 ErlangEmptyList)])
  in (erlps__foreach__2 [f_0, tail_2])
erlps__foreach__2 [f_0, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 1))) =
  (ErlangAtom "ok")
erlps__foreach__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__foreach__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mapfoldl__3 :: ErlangFun
erlps__mapfoldl__3 [f_0, accu0_1, (ErlangCons hd_2 tail_3)] =
  let
    match_expr_9 =
      (BIF.erlang__apply__2
         [f_0, (ErlangCons hd_2 (ErlangCons accu0_1 ErlangEmptyList))])
  in
    case match_expr_9 of
      (ErlangTuple [r_7, accu1_8]) ->
        let match_expr_15 = (erlps__mapfoldl__3 [f_0, accu1_8, tail_3])
        in
          case match_expr_15 of
            (ErlangTuple [rs_13, accu2_14]) ->
              (ErlangTuple [(ErlangCons r_7 rs_13), accu2_14])
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_9)
erlps__mapfoldl__3 [f_0, accu_1, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  (ErlangTuple [ErlangEmptyList, accu_1])
erlps__mapfoldl__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__mapfoldl__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mapfoldr__3 :: ErlangFun
erlps__mapfoldr__3 [f_0, accu0_1, (ErlangCons hd_2 tail_3)] =
  let match_expr_9 = (erlps__mapfoldr__3 [f_0, accu0_1, tail_3])
  in
    case match_expr_9 of
      (ErlangTuple [rs_7, accu1_8]) ->
        let
          match_expr_15 =
            (BIF.erlang__apply__2
               [f_0, (ErlangCons hd_2 (ErlangCons accu1_8 ErlangEmptyList))])
        in
          case match_expr_15 of
            (ErlangTuple [r_13, accu2_14]) ->
              (ErlangTuple [(ErlangCons r_13 rs_7), accu2_14])
            _ -> (EXC.badmatch match_expr_15)
      _ -> (EXC.badmatch match_expr_9)
erlps__mapfoldr__3 [f_0, accu_1, (ErlangEmptyList)]
  | (isEFunA f_0 (ErlangInt (DBI.fromInt 2))) =
  (ErlangTuple [ErlangEmptyList, accu_1])
erlps__mapfoldr__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__mapfoldr__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__takewhile__2 :: ErlangFun
erlps__takewhile__2 [pred_0, (ErlangCons hd_1 tail_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") ->
        let tail_7 = (erlps__takewhile__2 [pred_0, tail_2])
        in (ErlangCons hd_1 tail_7)
      (ErlangAtom "false") -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__takewhile__2 [pred_0, (ErlangEmptyList)]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  ErlangEmptyList
erlps__takewhile__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__takewhile__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__dropwhile__2 :: ErlangFun
erlps__dropwhile__2 [pred_0, rest_3@(ErlangCons hd_1 tail_2)] =
  let
    case_4 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_4 of
      (ErlangAtom "true") -> (erlps__dropwhile__2 [pred_0, tail_2])
      (ErlangAtom "false") -> rest_3
      something_else -> (EXC.case_clause something_else)
erlps__dropwhile__2 [pred_0, (ErlangEmptyList)]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  ErlangEmptyList
erlps__dropwhile__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__dropwhile__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__search__2 :: ErlangFun
erlps__search__2 [pred_0, (ErlangCons hd_1 tail_2)] =
  let
    case_3 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_3 of
      (ErlangAtom "true") -> (ErlangTuple [(ErlangAtom "value"), hd_1])
      (ErlangAtom "false") -> (erlps__search__2 [pred_0, tail_2])
      something_else -> (EXC.case_clause something_else)
erlps__search__2 [pred_0, (ErlangEmptyList)]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  (ErlangAtom "false")
erlps__search__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__search__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__splitwith__2 :: ErlangFun
erlps__splitwith__2 [pred_0, list_1]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  (erlps__splitwith__3 [pred_0, list_1, ErlangEmptyList])
erlps__splitwith__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__splitwith__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__splitwith__3 :: ErlangFun
erlps__splitwith__3 [pred_0, (ErlangCons hd_1 tail_2), taken_3] =
  let
    case_4 =
      (BIF.erlang__apply__2
         [pred_0, (ErlangCons hd_1 ErlangEmptyList)])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (erlps__splitwith__3 [pred_0, tail_2, (ErlangCons hd_1 taken_3)])
      (ErlangAtom "false") ->
        let tup_el_12 = (erlps__reverse__1 [taken_3])
        in (ErlangTuple [tup_el_12, (ErlangCons hd_1 tail_2)])
      something_else -> (EXC.case_clause something_else)
erlps__splitwith__3 [pred_0, (ErlangEmptyList), taken_1]
  | (isEFunA pred_0 (ErlangInt (DBI.fromInt 1))) =
  let tup_el_2 = (erlps__reverse__1 [taken_1])
  in (ErlangTuple [tup_el_2, ErlangEmptyList])
erlps__splitwith__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__splitwith__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__2 :: ErlangFun
erlps__split__2 [n_0, list_1]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ ->
             let    lop_15 = (BIF.erlang__is_integer__1 [n_0])
             in let
               lop_14 =
                 case lop_15 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [n_0, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_15)
             in
               case lop_14 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") -> (BIF.erlang__is_list__1 [list_1])
                 _ -> (EXC.badarg1 lop_14)))) =
  let case_2 = (erlps__split__3 [n_0, list_1, ErlangEmptyList])
  in
    case case_2 of
      result_6@(ErlangTuple [_, _]) -> result_6
      fault_7 | (isEAtom fault_7) ->
        (BIF.erlang__error__2
           [fault_7, (ErlangCons n_0 (ErlangCons list_1 ErlangEmptyList))])
      something_else -> (EXC.case_clause something_else)
erlps__split__2 [n_0, list_1] =
  (BIF.erlang__error__2
     [(ErlangAtom "badarg"),
      (ErlangCons n_0 (ErlangCons list_1 ErlangEmptyList))])
erlps__split__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__split__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split__3 :: ErlangFun
erlps__split__3 [(ErlangInt num_0), l_1, r_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let tup_el_3 = (BIF.lists__reverse__2 [r_2, ErlangEmptyList])
  in (ErlangTuple [tup_el_3, l_1])
erlps__split__3 [n_0, (ErlangCons h_1 t_2), r_3] =
  let
    arg_4 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__split__3 [arg_4, t_2, (ErlangCons h_1 r_3)])
erlps__split__3 [_, (ErlangEmptyList), _] = (ErlangAtom "badarg")
erlps__split__3 [arg_0, arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__split__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join__2 :: ErlangFun
erlps__join__2 [_sep_0, (ErlangEmptyList)] = ErlangEmptyList
erlps__join__2 [sep_0, (ErlangCons h_1 t_2)] =
  let tail_4 = (erlps__join_prepend__2 [sep_0, t_2])
  in (ErlangCons h_1 tail_4)
erlps__join__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__join__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__join_prepend__2 :: ErlangFun
erlps__join_prepend__2 [_sep_0, (ErlangEmptyList)] =
  ErlangEmptyList
erlps__join_prepend__2 [sep_0, (ErlangCons h_1 t_2)] =
  let tail_6 = (erlps__join_prepend__2 [sep_0, t_2])
  in (ErlangCons sep_0 (ErlangCons h_1 tail_6))
erlps__join_prepend__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__join_prepend__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_1__5 :: ErlangFun
erlps__split_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_greaterEq [z_2, y_1])))) =
  (erlps__split_1__5 [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__split_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_greaterEq [z_2, x_0])))) =
  (erlps__split_1__5 [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__split_1__5 [x_0, y_1, (ErlangCons z_2 l_3),
                   (ErlangEmptyList), rs_4]
  =
  (erlps__split_1__5
     [x_0, y_1, l_3, (ErlangCons z_2 ErlangEmptyList), rs_4])
erlps__split_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5] =
  (erlps__split_1_1__6 [x_0, y_1, l_3, r_4, rs_5, z_2])
erlps__split_1__5 [x_0, y_1, (ErlangEmptyList), r_2, rs_3] =
  (erlps__rmergel__2
     [(ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3),
      ErlangEmptyList])
erlps__split_1__5 [arg_12, arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__split_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_1_1__6 :: ErlangFun
erlps__split_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_greaterEq [z_2, y_1])))) =
  (erlps__split_1_1__6
     [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__split_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_greaterEq [z_2, x_0])))) =
  (erlps__split_1_1__6
     [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__split_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [s_6, z_2])))) =
  (erlps__split_1__5
     [s_6, z_2, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__split_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  =
  (erlps__split_1__5
     [z_2, s_6, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__split_1_1__6 [x_0, y_1, (ErlangEmptyList), r_2, rs_3, s_4]
  =
  (erlps__rmergel__2
     [(ErlangCons (ErlangCons s_4 ErlangEmptyList)
         (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3)),
      ErlangEmptyList])
erlps__split_1_1__6 [arg_17, arg_18, arg_19, arg_20, arg_21,
                     arg_22]
  =
  (EXC.function_clause unit)
erlps__split_1_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_2__5 :: ErlangFun
erlps__split_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [z_2, y_1])))) =
  (erlps__split_2__5 [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__split_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [z_2, x_0])))) =
  (erlps__split_2__5 [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__split_2__5 [x_0, y_1, (ErlangCons z_2 l_3),
                   (ErlangEmptyList), rs_4]
  =
  (erlps__split_2__5
     [x_0, y_1, l_3, (ErlangCons z_2 ErlangEmptyList), rs_4])
erlps__split_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5] =
  (erlps__split_2_1__6 [x_0, y_1, l_3, r_4, rs_5, z_2])
erlps__split_2__5 [x_0, y_1, (ErlangEmptyList), r_2, rs_3] =
  (erlps__mergel__2
     [(ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3),
      ErlangEmptyList])
erlps__split_2__5 [arg_12, arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__split_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__split_2_1__6 :: ErlangFun
erlps__split_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [z_2, y_1])))) =
  (erlps__split_2_1__6
     [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__split_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesserEq [z_2, x_0])))) =
  (erlps__split_2_1__6
     [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__split_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [s_6, z_2])))) =
  (erlps__split_2__5
     [s_6, z_2, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__split_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                     s_6]
  =
  (erlps__split_2__5
     [z_2, s_6, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__split_2_1__6 [x_0, y_1, (ErlangEmptyList), r_2, rs_3, s_4]
  =
  (erlps__mergel__2
     [(ErlangCons (ErlangCons s_4 ErlangEmptyList)
         (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3)),
      ErlangEmptyList])
erlps__split_2_1__6 [arg_17, arg_18, arg_19, arg_20, arg_21,
                     arg_22]
  =
  (EXC.function_clause unit)
erlps__split_2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mergel__2 :: ErlangFun
erlps__mergel__2 [(ErlangCons (ErlangEmptyList) l_0), acc_1] =
  (erlps__mergel__2 [l_0, acc_1])
erlps__mergel__2 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons (ErlangCons h3_3 t3_4) l_5))),
                  acc_6]
  =
  let
    head_9 =
      (erlps__merge3_1__6
         [t1_0, ErlangEmptyList, h2_1, t2_2, h3_3, t3_4])
  in (erlps__mergel__2 [l_5, (ErlangCons head_9 acc_6)])
erlps__mergel__2 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) (ErlangEmptyList))),
                  acc_3]
  =
  let
    head_5 = (erlps__merge2_1__4 [t1_0, h2_1, t2_2, ErlangEmptyList])
  in
    (erlps__rmergel__2 [(ErlangCons head_5 acc_3), ErlangEmptyList])
erlps__mergel__2 [(ErlangCons l_0 (ErlangEmptyList)),
                  (ErlangEmptyList)]
  =
  l_0
erlps__mergel__2 [(ErlangCons l_0 (ErlangEmptyList)), acc_1] =
  let head_3 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__rmergel__2 [(ErlangCons head_3 acc_1), ErlangEmptyList])
erlps__mergel__2 [(ErlangEmptyList), (ErlangEmptyList)] =
  ErlangEmptyList
erlps__mergel__2 [(ErlangEmptyList), acc_0] =
  (erlps__rmergel__2 [acc_0, ErlangEmptyList])
erlps__mergel__2 [(ErlangCons a_0 (ErlangCons (ErlangEmptyList) l_1)),
                  acc_2]
  =
  (erlps__mergel__2 [(ErlangCons a_0 l_1), acc_2])
erlps__mergel__2 [(ErlangCons a_0 (ErlangCons b_1 (ErlangCons (ErlangEmptyList) l_2))),
                  acc_3]
  =
  (erlps__mergel__2 [(ErlangCons a_0 (ErlangCons b_1 l_2)), acc_3])
erlps__mergel__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__mergel__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmergel__2 :: ErlangFun
erlps__rmergel__2 [(ErlangCons (ErlangCons h3_0 t3_1) (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons t1_4 l_5))),
                   acc_6]
  =
  let
    head_9 =
      (erlps__rmerge3_1__6
         [t1_4, ErlangEmptyList, h2_2, t2_3, h3_0, t3_1])
  in (erlps__rmergel__2 [l_5, (ErlangCons head_9 acc_6)])
erlps__rmergel__2 [(ErlangCons (ErlangCons h2_0 t2_1) (ErlangCons t1_2 (ErlangEmptyList))),
                   acc_3]
  =
  let
    head_5 =
      (erlps__rmerge2_1__4 [t1_2, h2_0, t2_1, ErlangEmptyList])
  in
    (erlps__mergel__2 [(ErlangCons head_5 acc_3), ErlangEmptyList])
erlps__rmergel__2 [(ErlangCons l_0 (ErlangEmptyList)), acc_1] =
  let head_3 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__mergel__2 [(ErlangCons head_3 acc_1), ErlangEmptyList])
erlps__rmergel__2 [(ErlangEmptyList), acc_0] =
  (erlps__mergel__2 [acc_0, ErlangEmptyList])
erlps__rmergel__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__rmergel__2 args =
  (EXC.badarity (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_1__6 :: ErlangFun
erlps__merge3_1__6 [(ErlangCons h1_0 t1_1), m_2, h2_3, t2_4,
                    h3_5, t3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_3])))) =
  (erlps__merge3_12__7 [t1_1, h1_0, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__merge3_1__6 [(ErlangCons h1_0 t1_1), m_2, h2_3, t2_4,
                    h3_5, t3_6]
  =
  (erlps__merge3_21__7 [t1_1, h1_0, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__merge3_1__6 [(ErlangEmptyList), m_0, h2_1, t2_2, h3_3,
                    t3_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_1, h3_3])))) =
  (erlps__merge2_1__4 [t2_2, h3_3, t3_4, (ErlangCons h2_1 m_0)])
erlps__merge3_1__6 [(ErlangEmptyList), m_0, h2_1, t2_2, h3_3,
                    t3_4]
  =
  (erlps__merge2_2__5 [t2_2, h3_3, t3_4, m_0, h2_1])
erlps__merge3_1__6 [arg_10, arg_11, arg_12, arg_13, arg_14,
                    arg_15]
  =
  (EXC.function_clause unit)
erlps__merge3_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_2__6 :: ErlangFun
erlps__merge3_2__6 [t1_0, h1_1, m_2, (ErlangCons h2_3 t2_4),
                    h3_5, t3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h2_3])))) =
  (erlps__merge3_12__7 [t1_0, h1_1, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__merge3_2__6 [t1_0, h1_1, m_2, (ErlangCons h2_3 t2_4),
                    h3_5, t3_6]
  =
  (erlps__merge3_21__7 [t1_0, h1_1, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__merge3_2__6 [t1_0, h1_1, m_2, (ErlangEmptyList), h3_3,
                    t3_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_3])))) =
  (erlps__merge2_1__4 [t1_0, h3_3, t3_4, (ErlangCons h1_1 m_2)])
erlps__merge3_2__6 [t1_0, h1_1, m_2, (ErlangEmptyList), h3_3,
                    t3_4]
  =
  (erlps__merge2_2__5 [t1_0, h3_3, t3_4, m_2, h1_1])
erlps__merge3_2__6 [arg_10, arg_11, arg_12, arg_13, arg_14,
                    arg_15]
  =
  (EXC.function_clause unit)
erlps__merge3_2__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_12__7 :: ErlangFun
erlps__merge3_12__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_4])))) =
  (erlps__merge3_1__6
     [t1_0, (ErlangCons h1_1 m_6), h2_2, t2_3, h3_4, t3_5])
erlps__merge3_12__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6] =
  (erlps__merge3_12_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_4 m_6), t3_5])
erlps__merge3_12__7 [arg_15, arg_16, arg_17, arg_18, arg_19,
                     arg_20, arg_21]
  =
  (EXC.function_clause unit)
erlps__merge3_12__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_12_3__6 :: ErlangFun
erlps__merge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_5])))) =
  (erlps__merge3_1__6
     [t1_0, (ErlangCons h1_1 m_4), h2_2, t2_3, h3_5, t3_6])
erlps__merge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangCons h3_5 t3_6)]
  =
  (erlps__merge3_12_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__merge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangEmptyList)]
  =
  (erlps__merge2_1__4 [t1_0, h2_2, t2_3, (ErlangCons h1_1 m_4)])
erlps__merge3_12_3__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                       arg_16]
  =
  (EXC.function_clause unit)
erlps__merge3_12_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_21__7 :: ErlangFun
erlps__merge3_21__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_4])))) =
  (erlps__merge3_2__6
     [t1_0, h1_1, (ErlangCons h2_2 m_6), t2_3, h3_4, t3_5])
erlps__merge3_21__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6] =
  (erlps__merge3_21_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_4 m_6), t3_5])
erlps__merge3_21__7 [arg_15, arg_16, arg_17, arg_18, arg_19,
                     arg_20, arg_21]
  =
  (EXC.function_clause unit)
erlps__merge3_21__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge3_21_3__6 :: ErlangFun
erlps__merge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_5])))) =
  (erlps__merge3_2__6
     [t1_0, h1_1, (ErlangCons h2_2 m_4), t2_3, h3_5, t3_6])
erlps__merge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangCons h3_5 t3_6)]
  =
  (erlps__merge3_21_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__merge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                       (ErlangEmptyList)]
  =
  (erlps__merge2_2__5 [t1_0, h2_2, t2_3, m_4, h1_1])
erlps__merge3_21_3__6 [arg_10, arg_11, arg_12, arg_13, arg_14,
                       arg_15]
  =
  (EXC.function_clause unit)
erlps__merge3_21_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_1__6 :: ErlangFun
erlps__rmerge3_1__6 [(ErlangCons h1_0 t1_1), m_2, h2_3, t2_4,
                     h3_5, t3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_3])))) =
  (erlps__rmerge3_12__7 [t1_1, h1_0, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__rmerge3_1__6 [(ErlangCons h1_0 t1_1), m_2, h2_3, t2_4,
                     h3_5, t3_6]
  =
  (erlps__rmerge3_21__7 [t1_1, h1_0, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__rmerge3_1__6 [(ErlangEmptyList), m_0, h2_1, t2_2, h3_3,
                     t3_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_1, h3_3])))) =
  (erlps__rmerge2_2__5 [t2_2, h3_3, t3_4, m_0, h2_1])
erlps__rmerge3_1__6 [(ErlangEmptyList), m_0, h2_1, t2_2, h3_3,
                     t3_4]
  =
  (erlps__rmerge2_1__4 [t2_2, h3_3, t3_4, (ErlangCons h2_1 m_0)])
erlps__rmerge3_1__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                     arg_16]
  =
  (EXC.function_clause unit)
erlps__rmerge3_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_2__6 :: ErlangFun
erlps__rmerge3_2__6 [t1_0, h1_1, m_2, (ErlangCons h2_3 t2_4),
                     h3_5, t3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h2_3])))) =
  (erlps__rmerge3_12__7 [t1_0, h1_1, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__rmerge3_2__6 [t1_0, h1_1, m_2, (ErlangCons h2_3 t2_4),
                     h3_5, t3_6]
  =
  (erlps__rmerge3_21__7 [t1_0, h1_1, h2_3, t2_4, h3_5, t3_6, m_2])
erlps__rmerge3_2__6 [t1_0, h1_1, m_2, (ErlangEmptyList), h3_3,
                     t3_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_3])))) =
  (erlps__rmerge2_2__5 [t1_0, h3_3, t3_4, m_2, h1_1])
erlps__rmerge3_2__6 [t1_0, h1_1, m_2, (ErlangEmptyList), h3_3,
                     t3_4]
  =
  (erlps__rmerge2_1__4 [t1_0, h3_3, t3_4, (ErlangCons h1_1 m_2)])
erlps__rmerge3_2__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                     arg_16]
  =
  (EXC.function_clause unit)
erlps__rmerge3_2__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_12__7 :: ErlangFun
erlps__rmerge3_12__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_4])))) =
  (erlps__rmerge3_12_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_4 m_6), t3_5])
erlps__rmerge3_12__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6] =
  (erlps__rmerge3_2__6
     [t1_0, h1_1, (ErlangCons h2_2 m_6), t2_3, h3_4, t3_5])
erlps__rmerge3_12__7 [arg_15, arg_16, arg_17, arg_18, arg_19,
                      arg_20, arg_21]
  =
  (EXC.function_clause unit)
erlps__rmerge3_12__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_12_3__6 :: ErlangFun
erlps__rmerge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_5])))) =
  (erlps__rmerge3_12_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__rmerge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  =
  (erlps__rmerge3_2__6
     [t1_0, h1_1, (ErlangCons h2_2 m_4), t2_3, h3_5, t3_6])
erlps__rmerge3_12_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangEmptyList)]
  =
  (erlps__rmerge2_2__5 [t1_0, h2_2, t2_3, m_4, h1_1])
erlps__rmerge3_12_3__6 [arg_10, arg_11, arg_12, arg_13, arg_14,
                        arg_15]
  =
  (EXC.function_clause unit)
erlps__rmerge3_12_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_21__7 :: ErlangFun
erlps__rmerge3_21__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_4])))) =
  (erlps__rmerge3_21_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_4 m_6), t3_5])
erlps__rmerge3_21__7 [t1_0, h1_1, h2_2, t2_3, h3_4, t3_5, m_6] =
  (erlps__rmerge3_1__6
     [t1_0, (ErlangCons h1_1 m_6), h2_2, t2_3, h3_4, t3_5])
erlps__rmerge3_21__7 [arg_15, arg_16, arg_17, arg_18, arg_19,
                      arg_20, arg_21]
  =
  (EXC.function_clause unit)
erlps__rmerge3_21__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge3_21_3__6 :: ErlangFun
erlps__rmerge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_5])))) =
  (erlps__rmerge3_21_3__6
     [t1_0, h1_1, h2_2, t2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__rmerge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  =
  (erlps__rmerge3_1__6
     [t1_0, (ErlangCons h1_1 m_4), h2_2, t2_3, h3_5, t3_6])
erlps__rmerge3_21_3__6 [t1_0, h1_1, h2_2, t2_3, m_4,
                        (ErlangEmptyList)]
  =
  (erlps__rmerge2_1__4 [t1_0, h2_2, t2_3, (ErlangCons h1_1 m_4)])
erlps__rmerge3_21_3__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                        arg_16]
  =
  (EXC.function_clause unit)
erlps__rmerge3_21_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge2_1__4 :: ErlangFun
erlps__merge2_1__4 [(ErlangCons h1_0 t1_1), h2_2, t2_3, m_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_2])))) =
  (erlps__merge2_1__4 [t1_1, h2_2, t2_3, (ErlangCons h1_0 m_4)])
erlps__merge2_1__4 [(ErlangCons h1_0 t1_1), h2_2, t2_3, m_4] =
  (erlps__merge2_2__5 [t1_1, h2_2, t2_3, m_4, h1_0])
erlps__merge2_1__4 [(ErlangEmptyList), h2_0, t2_1, m_2] =
  (BIF.lists__reverse__2 [t2_1, (ErlangCons h2_0 m_2)])
erlps__merge2_1__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__merge2_1__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge2_2__5 :: ErlangFun
erlps__merge2_2__5 [t1_0, hdm_1, (ErlangCons h2_2 t2_3), m_4,
                    h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_5, h2_2])))) =
  (erlps__merge2_1__4
     [t1_0, h2_2, t2_3, (ErlangCons h1_5 (ErlangCons hdm_1 m_4))])
erlps__merge2_2__5 [t1_0, hdm_1, (ErlangCons h2_2 t2_3), m_4,
                    h1_5]
  =
  (erlps__merge2_2__5
     [t1_0, h2_2, t2_3, (ErlangCons hdm_1 m_4), h1_5])
erlps__merge2_2__5 [t1_0, hdm_1, (ErlangEmptyList), m_2, h1_3] =
  (BIF.lists__reverse__2
     [t1_0, (ErlangCons h1_3 (ErlangCons hdm_1 m_2))])
erlps__merge2_2__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__merge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge2_1__4 :: ErlangFun
erlps__rmerge2_1__4 [(ErlangCons h1_0 t1_1), h2_2, t2_3, m_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_2])))) =
  (erlps__rmerge2_2__5 [t1_1, h2_2, t2_3, m_4, h1_0])
erlps__rmerge2_1__4 [(ErlangCons h1_0 t1_1), h2_2, t2_3, m_4] =
  (erlps__rmerge2_1__4 [t1_1, h2_2, t2_3, (ErlangCons h1_0 m_4)])
erlps__rmerge2_1__4 [(ErlangEmptyList), h2_0, t2_1, m_2] =
  (BIF.lists__reverse__2 [t2_1, (ErlangCons h2_0 m_2)])
erlps__rmerge2_1__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__rmerge2_1__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rmerge2_2__5 :: ErlangFun
erlps__rmerge2_2__5 [t1_0, hdm_1, (ErlangCons h2_2 t2_3), m_4,
                     h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_5, h2_2])))) =
  (erlps__rmerge2_2__5
     [t1_0, h2_2, t2_3, (ErlangCons hdm_1 m_4), h1_5])
erlps__rmerge2_2__5 [t1_0, hdm_1, (ErlangCons h2_2 t2_3), m_4,
                     h1_5]
  =
  (erlps__rmerge2_1__4
     [t1_0, h2_2, t2_3, (ErlangCons h1_5 (ErlangCons hdm_1 m_4))])
erlps__rmerge2_2__5 [t1_0, hdm_1, (ErlangEmptyList), m_2, h1_3] =
  (BIF.lists__reverse__2
     [t1_0, (ErlangCons h1_3 (ErlangCons hdm_1 m_2))])
erlps__rmerge2_2__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__rmerge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usplit_1__5 :: ErlangFun
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [z_2, y_1])))) =
  (erlps__usplit_1__5 [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, y_1])))) =
  (erlps__usplit_1__5 [x_0, y_1, l_3, r_4, rs_5])
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [z_2, x_0])))) =
  (erlps__usplit_1__5 [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, x_0])))) =
  (erlps__usplit_1__5 [x_0, y_1, l_3, r_4, rs_5])
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3),
                    (ErlangEmptyList), rs_4]
  =
  (erlps__usplit_1__5
     [x_0, y_1, l_3, (ErlangCons z_2 ErlangEmptyList), rs_4])
erlps__usplit_1__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5] =
  (erlps__usplit_1_1__6 [x_0, y_1, l_3, r_4, rs_5, z_2])
erlps__usplit_1__5 [x_0, y_1, (ErlangEmptyList), r_2, rs_3] =
  (erlps__rumergel__3
     [(ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3),
      ErlangEmptyList, (ErlangAtom "asc")])
erlps__usplit_1__5 [arg_13, arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__usplit_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usplit_1_1__6 :: ErlangFun
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [z_2, y_1])))) =
  (erlps__usplit_1_1__6
     [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, y_1])))) =
  (erlps__usplit_1_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [z_2, x_0])))) =
  (erlps__usplit_1_1__6
     [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, x_0])))) =
  (erlps__usplit_1_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_greater [z_2, s_6])))) =
  (erlps__usplit_1__5
     [s_6, z_2, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, s_6])))) =
  (erlps__usplit_1_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  =
  (erlps__usplit_1__5
     [z_2, s_6, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__usplit_1_1__6 [x_0, y_1, (ErlangEmptyList), r_2, rs_3,
                      s_4]
  =
  (erlps__rumergel__3
     [(ErlangCons (ErlangCons s_4 ErlangEmptyList)
         (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3)),
      ErlangEmptyList, (ErlangAtom "asc")])
erlps__usplit_1_1__6 [arg_18, arg_19, arg_20, arg_21, arg_22,
                      arg_23]
  =
  (EXC.function_clause unit)
erlps__usplit_1_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usplit_2__5 :: ErlangFun
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [z_2, y_1])))) =
  (erlps__usplit_2__5 [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, y_1])))) =
  (erlps__usplit_2__5 [x_0, y_1, l_3, r_4, rs_5])
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [z_2, x_0])))) =
  (erlps__usplit_2__5 [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5])
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, x_0])))) =
  (erlps__usplit_2__5 [x_0, y_1, l_3, r_4, rs_5])
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3),
                    (ErlangEmptyList), rs_4]
  =
  (erlps__usplit_2__5
     [x_0, y_1, l_3, (ErlangCons z_2 ErlangEmptyList), rs_4])
erlps__usplit_2__5 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5] =
  (erlps__usplit_2_1__6 [x_0, y_1, l_3, r_4, rs_5, z_2])
erlps__usplit_2__5 [x_0, y_1, (ErlangEmptyList), r_2, rs_3] =
  (erlps__umergel__3
     [(ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3),
      ErlangEmptyList, (ErlangAtom "desc")])
erlps__usplit_2__5 [arg_13, arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__usplit_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__usplit_2_1__6 :: ErlangFun
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [z_2, y_1])))) =
  (erlps__usplit_2_1__6
     [y_1, z_2, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, y_1])))) =
  (erlps__usplit_2_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [z_2, x_0])))) =
  (erlps__usplit_2_1__6
     [z_2, y_1, l_3, (ErlangCons x_0 r_4), rs_5, s_6])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, x_0])))) =
  (erlps__usplit_2_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_lesser [z_2, s_6])))) =
  (erlps__usplit_2__5
     [s_6, z_2, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [z_2, s_6])))) =
  (erlps__usplit_2_1__6 [x_0, y_1, l_3, r_4, rs_5, s_6])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangCons z_2 l_3), r_4, rs_5,
                      s_6]
  =
  (erlps__usplit_2__5
     [z_2, s_6, l_3, ErlangEmptyList,
      (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_4)) rs_5)])
erlps__usplit_2_1__6 [x_0, y_1, (ErlangEmptyList), r_2, rs_3,
                      s_4]
  =
  (erlps__umergel__3
     [(ErlangCons (ErlangCons s_4 ErlangEmptyList)
         (ErlangCons (ErlangCons y_1 (ErlangCons x_0 r_2)) rs_3)),
      ErlangEmptyList, (ErlangAtom "desc")])
erlps__usplit_2_1__6 [arg_18, arg_19, arg_20, arg_21, arg_22,
                      arg_23]
  =
  (EXC.function_clause unit)
erlps__usplit_2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umergel__1 :: ErlangFun
erlps__umergel__1 [l_0] =
  (erlps__umergel__3 [l_0, ErlangEmptyList, (ErlangAtom "asc")])
erlps__umergel__1 [arg_4] = (EXC.function_clause unit)
erlps__umergel__1 args =
  (EXC.badarity (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umergel__3 :: ErlangFun
erlps__umergel__3 [(ErlangCons (ErlangEmptyList) l_0), acc_1,
                   o_2]
  =
  (erlps__umergel__3 [l_0, acc_1, o_2])
erlps__umergel__3 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons (ErlangCons h3_3 t3_4) l_5))),
                   acc_6, (ErlangAtom "asc")]
  =
  let
    head_9 =
      (erlps__umerge3_1__7
         [t1_0, (ErlangCons h2_1 h3_3), t2_2, h2_1, ErlangEmptyList, t3_4,
          h3_3])
  in
    (erlps__umergel__3
       [l_5, (ErlangCons head_9 acc_6), (ErlangAtom "asc")])
erlps__umergel__3 [(ErlangCons (ErlangCons h3_0 t3_1) (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons t1_4 l_5))),
                   acc_6, (ErlangAtom "desc")]
  =
  let
    head_9 =
      (erlps__umerge3_1__7
         [t1_4, (ErlangCons h2_2 h3_0), t2_3, h2_2, ErlangEmptyList, t3_1,
          h3_0])
  in
    (erlps__umergel__3
       [l_5, (ErlangCons head_9 acc_6), (ErlangAtom "desc")])
erlps__umergel__3 [(ErlangCons a_0 (ErlangCons (ErlangEmptyList) l_1)),
                   acc_2, o_3]
  =
  (erlps__umergel__3 [(ErlangCons a_0 l_1), acc_2, o_3])
erlps__umergel__3 [(ErlangCons a_0 (ErlangCons b_1 (ErlangCons (ErlangEmptyList) l_2))),
                   acc_3, o_4]
  =
  (erlps__umergel__3
     [(ErlangCons a_0 (ErlangCons b_1 l_2)), acc_3, o_4])
erlps__umergel__3 [(ErlangCons (ErlangCons h1_0 t1_1) (ErlangCons t2_2 l_3)),
                   acc_4, (ErlangAtom "asc")]
  =
  let
    head_7 =
      (erlps__umerge2_2__4 [t1_1, t2_2, ErlangEmptyList, h1_0])
  in
    (erlps__umergel__3
       [l_3, (ErlangCons head_7 acc_4), (ErlangAtom "asc")])
erlps__umergel__3 [(ErlangCons t2_0 (ErlangCons (ErlangCons h1_1 t1_2) l_3)),
                   acc_4, (ErlangAtom "desc")]
  =
  let
    head_7 =
      (erlps__umerge2_2__4 [t1_2, t2_0, ErlangEmptyList, h1_1])
  in
    (erlps__umergel__3
       [l_3, (ErlangCons head_7 acc_4), (ErlangAtom "desc")])
erlps__umergel__3 [(ErlangCons l_0 (ErlangEmptyList)),
                   (ErlangEmptyList), _o_1]
  =
  l_0
erlps__umergel__3 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                   o_2]
  =
  let head_4 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__rumergel__3
       [(ErlangCons head_4 acc_1), ErlangEmptyList, o_2])
erlps__umergel__3 [(ErlangEmptyList), (ErlangEmptyList), _o_0] =
  ErlangEmptyList
erlps__umergel__3 [(ErlangEmptyList), acc_0, o_1] =
  (erlps__rumergel__3 [acc_0, ErlangEmptyList, o_1])
erlps__umergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__umergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumergel__3 :: ErlangFun
erlps__rumergel__3 [(ErlangCons (ErlangCons h3_0 t3_1) (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons t1_4 l_5))),
                    acc_6, (ErlangAtom "asc")]
  =
  let
    head_9 =
      (erlps__rumerge3_1__6
         [t1_4, t2_3, h2_2, ErlangEmptyList, t3_1, h3_0])
  in
    (erlps__rumergel__3
       [l_5, (ErlangCons head_9 acc_6), (ErlangAtom "asc")])
erlps__rumergel__3 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons (ErlangCons h3_3 t3_4) l_5))),
                    acc_6, (ErlangAtom "desc")]
  =
  let
    head_9 =
      (erlps__rumerge3_1__6
         [t1_0, t2_2, h2_1, ErlangEmptyList, t3_4, h3_3])
  in
    (erlps__rumergel__3
       [l_5, (ErlangCons head_9 acc_6), (ErlangAtom "desc")])
erlps__rumergel__3 [(ErlangCons (ErlangCons h2_0 t2_1) (ErlangCons t1_2 l_3)),
                    acc_4, (ErlangAtom "asc")]
  =
  let
    head_7 =
      (erlps__rumerge2_1__4 [t1_2, t2_1, ErlangEmptyList, h2_0])
  in
    (erlps__rumergel__3
       [l_3, (ErlangCons head_7 acc_4), (ErlangAtom "asc")])
erlps__rumergel__3 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) l_3)),
                    acc_4, (ErlangAtom "desc")]
  =
  let
    head_7 =
      (erlps__rumerge2_1__4 [t1_0, t2_2, ErlangEmptyList, h2_1])
  in
    (erlps__rumergel__3
       [l_3, (ErlangCons head_7 acc_4), (ErlangAtom "desc")])
erlps__rumergel__3 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                    o_2]
  =
  let head_4 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__umergel__3
       [(ErlangCons head_4 acc_1), ErlangEmptyList, o_2])
erlps__rumergel__3 [(ErlangEmptyList), acc_0, o_1] =
  (erlps__umergel__3 [acc_0, ErlangEmptyList, o_1])
erlps__rumergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__rumergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_1__7 :: ErlangFun
erlps__umerge3_1__7 [(ErlangCons h1_0 t1_1), hdm_2, t2_3, h2_4,
                     m_5, t3_6, h3_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_4])))) =
  (erlps__umerge3_12__8
     [t1_1, h1_0, t2_3, h2_4, m_5, t3_6, h3_7, hdm_2])
erlps__umerge3_1__7 [(ErlangCons h1_0 t1_1), hdm_2, t2_3, h2_4,
                     m_5, t3_6, h3_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_4, hdm_2])))) =
  (erlps__umerge3_2__7 [t1_1, h1_0, t2_3, h2_4, m_5, t3_6, h3_7])
erlps__umerge3_1__7 [(ErlangCons h1_0 t1_1), hdm_2, t2_3, h2_4,
                     m_5, t3_6, h3_7]
  =
  (erlps__umerge3_21__8
     [t1_1, h1_0, t2_3, h2_4, m_5, t3_6, h3_7, hdm_2])
erlps__umerge3_1__7 [(ErlangEmptyList), hdm_0, t2_1, h2_2, m_3,
                     t3_4, h3_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_2, hdm_0])))) =
  (erlps__umerge2_1__5 [t2_1, t3_4, m_3, hdm_0, h3_5])
erlps__umerge3_1__7 [(ErlangEmptyList), _hdm_0, t2_1, h2_2, m_3,
                     t3_4, h3_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_5])))) =
  (erlps__umerge2_1__5
     [t2_1, t3_4, (ErlangCons h2_2 m_3), h2_2, h3_5])
erlps__umerge3_1__7 [(ErlangEmptyList), hdm_0, t2_1, h2_2, m_3,
                     t3_4, h3_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h3_5, hdm_0])))) =
  (erlps__umerge2_2__4 [t2_1, t3_4, m_3, h2_2])
erlps__umerge3_1__7 [(ErlangEmptyList), _hdm_0, t2_1, h2_2, m_3,
                     t3_4, h3_5]
  =
  (erlps__umerge2_2__4 [t2_1, t3_4, (ErlangCons h3_5 m_3), h2_2])
erlps__umerge3_1__7 [arg_12, arg_13, arg_14, arg_15, arg_16,
                     arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__umerge3_1__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_2__7 :: ErlangFun
erlps__umerge3_2__7 [t1_0, h1_1, (ErlangCons h2_2 t2_3), hdm_4,
                     m_5, t3_6, h3_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h2_2])))) =
  (erlps__umerge3_12__8
     [t1_0, h1_1, t2_3, h2_2, m_5, t3_6, h3_7, hdm_4])
erlps__umerge3_2__7 [t1_0, h1_1, (ErlangCons h2_2 t2_3), hdm_4,
                     m_5, t3_6, h3_7]
  =
  (erlps__umerge3_21__8
     [t1_0, h1_1, t2_3, h2_2, m_5, t3_6, h3_7, hdm_4])
erlps__umerge3_2__7 [t1_0, h1_1, (ErlangEmptyList), _hdm_2, m_3,
                     t3_4, h3_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_5])))) =
  (erlps__umerge2_1__5
     [t1_0, t3_4, (ErlangCons h1_1 m_3), h1_1, h3_5])
erlps__umerge3_2__7 [t1_0, h1_1, (ErlangEmptyList), hdm_2, m_3,
                     t3_4, h3_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h3_5, hdm_2])))) =
  (erlps__umerge2_2__4 [t1_0, t3_4, m_3, h1_1])
erlps__umerge3_2__7 [t1_0, h1_1, (ErlangEmptyList), _hdm_2, m_3,
                     t3_4, h3_5]
  =
  (erlps__umerge2_2__4 [t1_0, t3_4, (ErlangCons h3_5 m_3), h1_1])
erlps__umerge3_2__7 [arg_12, arg_13, arg_14, arg_15, arg_16,
                     arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__umerge3_2__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_12__8 :: ErlangFun
erlps__umerge3_12__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      _hdm_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_6])))) =
  (erlps__umerge3_1__7
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h1_1 m_4), t3_5, h3_6])
erlps__umerge3_12__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      hdm_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h3_6, hdm_7])))) =
  (erlps__umerge3_12_3__6 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5])
erlps__umerge3_12__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      _hdm_7]
  =
  (erlps__umerge3_12_3__6
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h3_6 m_4), t3_5])
erlps__umerge3_12__8 [arg_16, arg_17, arg_18, arg_19, arg_20,
                      arg_21, arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__umerge3_12__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_12_3__6 :: ErlangFun
erlps__umerge3_12_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_1, h3_5])))) =
  (erlps__umerge3_1__7
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h1_1 m_4), t3_6, h3_5])
erlps__umerge3_12_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  =
  (erlps__umerge3_12_3__6
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__umerge3_12_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangEmptyList)]
  =
  (erlps__umerge2_1__5
     [t1_0, t2_2, (ErlangCons h1_1 m_4), h1_1, h2_3])
erlps__umerge3_12_3__6 [arg_12, arg_13, arg_14, arg_15, arg_16,
                        arg_17]
  =
  (EXC.function_clause unit)
erlps__umerge3_12_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_21__8 :: ErlangFun
erlps__umerge3_21__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      _hdm_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_3, h3_6])))) =
  (erlps__umerge3_2__7
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h2_3 m_4), t3_5, h3_6])
erlps__umerge3_21__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      hdm_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h3_6, hdm_7])))) =
  (erlps__umerge3_21_3__6 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5])
erlps__umerge3_21__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                      _hdm_7]
  =
  (erlps__umerge3_21_3__6
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h3_6 m_4), t3_5])
erlps__umerge3_21__8 [arg_16, arg_17, arg_18, arg_19, arg_20,
                      arg_21, arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__umerge3_21__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge3_21_3__6 :: ErlangFun
erlps__umerge3_21_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_3, h3_5])))) =
  (erlps__umerge3_2__7
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h2_3 m_4), t3_6, h3_5])
erlps__umerge3_21_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangCons h3_5 t3_6)]
  =
  (erlps__umerge3_21_3__6
     [t1_0, h1_1, t2_2, h2_3, (ErlangCons h3_5 m_4), t3_6])
erlps__umerge3_21_3__6 [t1_0, h1_1, t2_2, h2_3, m_4,
                        (ErlangEmptyList)]
  =
  (erlps__umerge2_2__4 [t1_0, t2_2, (ErlangCons h2_3 m_4), h1_1])
erlps__umerge3_21_3__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                        arg_16]
  =
  (EXC.function_clause unit)
erlps__umerge3_21_3__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_1__6 :: ErlangFun
erlps__rumerge3_1__6 [(ErlangCons h1_0 t1_1), t2_2, h2_3, m_4,
                      t3_5, h3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_3])))) =
  (erlps__rumerge3_12a__7
     [t1_1, h1_0, t2_2, h2_3, m_4, t3_5, h3_6])
erlps__rumerge3_1__6 [(ErlangCons h1_0 t1_1), t2_2, h2_3, m_4,
                      t3_5, h3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h3_6])))) =
  (erlps__rumerge3_21_3__7
     [t1_1, t2_2, h2_3, m_4, t3_5, h3_6, h1_0])
erlps__rumerge3_1__6 [(ErlangCons h1_0 t1_1), t2_2, h2_3, m_4,
                      t3_5, h3_6]
  =
  (erlps__rumerge3_1__6
     [t1_1, t2_2, h2_3, (ErlangCons h1_0 m_4), t3_5, h3_6])
erlps__rumerge3_1__6 [(ErlangEmptyList), t2_0, h2_1, m_2, t3_3,
                      h3_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_1, h3_4])))) =
  (erlps__rumerge2_2__5 [t2_0, t3_3, m_2, h3_4, h2_1])
erlps__rumerge3_1__6 [(ErlangEmptyList), t2_0, h2_1, m_2, t3_3,
                      h3_4]
  =
  (erlps__rumerge2_1__4 [t2_0, t3_3, (ErlangCons h2_1 m_2), h3_4])
erlps__rumerge3_1__6 [arg_11, arg_12, arg_13, arg_14, arg_15,
                      arg_16]
  =
  (EXC.function_clause unit)
erlps__rumerge3_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_12a__7 :: ErlangFun
erlps__rumerge3_12a__7 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_3, h3_6])))) =
  (erlps__rumerge3_12_3__7
     [t1_0, t2_2, h2_3, m_4, t3_5, h3_6, h1_1])
erlps__rumerge3_12a__7 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6]
  =
  (erlps__rumerge3_2__7 [t1_0, t2_2, h2_3, m_4, t3_5, h3_6, h1_1])
erlps__rumerge3_12a__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                        arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__rumerge3_12a__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_2__7 :: ErlangFun
erlps__rumerge3_2__7 [t1_0, (ErlangCons h2_1 t2_2), h2m_3, m_4,
                      t3_5, h3_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_7, h2_1])))) =
  (erlps__rumerge3_12b__8
     [t1_0, h1_7, t2_2, h2_1, m_4, t3_5, h3_6, h2m_3])
erlps__rumerge3_2__7 [t1_0, (ErlangCons h2_1 t2_2), h2m_3, m_4,
                      t3_5, h3_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_7, h2m_3])))) =
  (erlps__rumerge3_1__6
     [t1_0, t2_2, h2_1, (ErlangCons h1_7 m_4), t3_5, h3_6])
erlps__rumerge3_2__7 [t1_0, (ErlangCons h2_1 t2_2), h2m_3, m_4,
                      t3_5, h3_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_7, h3_6])))) =
  (erlps__rumerge3_21_3__7
     [t1_0, t2_2, h2_1, (ErlangCons h2m_3 m_4), t3_5, h3_6, h1_7])
erlps__rumerge3_2__7 [t1_0, (ErlangCons h2_1 t2_2), h2m_3, m_4,
                      t3_5, h3_6, h1_7]
  =
  (erlps__rumerge3_1__6
     [t1_0, t2_2, h2_1, (ErlangCons h1_7 (ErlangCons h2m_3 m_4)),
      t3_5, h3_6])
erlps__rumerge3_2__7 [t1_0, (ErlangEmptyList), h2m_1, m_2, t3_3,
                      h3_4, h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_5, h2m_1])))) =
  (erlps__rumerge2_1__4 [t1_0, t3_3, (ErlangCons h1_5 m_2), h3_4])
erlps__rumerge3_2__7 [t1_0, (ErlangEmptyList), h2m_1, m_2, t3_3,
                      h3_4, h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_5, h3_4])))) =
  (erlps__rumerge2_2__5
     [t1_0, t3_3, (ErlangCons h2m_1 m_2), h3_4, h1_5])
erlps__rumerge3_2__7 [t1_0, (ErlangEmptyList), h2m_1, m_2, t3_3,
                      h3_4, h1_5]
  =
  (erlps__rumerge2_1__4
     [t1_0, t3_3, (ErlangCons h1_5 (ErlangCons h2m_1 m_2)), h3_4])
erlps__rumerge3_2__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                      arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__rumerge3_2__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_12b__8 :: ErlangFun
erlps__rumerge3_12b__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                        h2m_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_3, h3_6])))) =
  (erlps__rumerge3_12_3__7
     [t1_0, t2_2, h2_3, (ErlangCons h2m_7 m_4), t3_5, h3_6, h1_1])
erlps__rumerge3_12b__8 [t1_0, h1_1, t2_2, h2_3, m_4, t3_5, h3_6,
                        h2m_7]
  =
  (erlps__rumerge3_2__7
     [t1_0, t2_2, h2_3, (ErlangCons h2m_7 m_4), t3_5, h3_6, h1_1])
erlps__rumerge3_12b__8 [arg_17, arg_18, arg_19, arg_20, arg_21,
                        arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__rumerge3_12b__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_12_3__7 :: ErlangFun
erlps__rumerge3_12_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h2_2, h3_4])))) =
  (erlps__rumerge3_12_3__7
     [t1_0, t2_1, h2_2, (ErlangCons h3m_6 m_3), t3_5, h3_4, h1_7])
erlps__rumerge3_12_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_2, h3m_6])))) =
  (erlps__rumerge3_2__7 [t1_0, t2_1, h2_2, m_3, t3_5, h3_4, h1_7])
erlps__rumerge3_12_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  =
  (erlps__rumerge3_2__7
     [t1_0, t2_1, h2_2, (ErlangCons h3m_6 m_3), t3_5, h3_4, h1_7])
erlps__rumerge3_12_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangEmptyList), h3m_4, h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_2, h3m_4])))) =
  (erlps__rumerge2_2__5 [t1_0, t2_1, m_3, h2_2, h1_5])
erlps__rumerge3_12_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangEmptyList), h3m_4, h1_5]
  =
  (erlps__rumerge2_2__5
     [t1_0, t2_1, (ErlangCons h3m_4 m_3), h2_2, h1_5])
erlps__rumerge3_12_3__7 [arg_13, arg_14, arg_15, arg_16, arg_17,
                         arg_18, arg_19]
  =
  (EXC.function_clause unit)
erlps__rumerge3_12_3__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge3_21_3__7 :: ErlangFun
erlps__rumerge3_21_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_7, h3_4])))) =
  (erlps__rumerge3_21_3__7
     [t1_0, t2_1, h2_2, (ErlangCons h3m_6 m_3), t3_5, h3_4, h1_7])
erlps__rumerge3_21_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_7, h3m_6])))) =
  (erlps__rumerge3_1__6
     [t1_0, t2_1, h2_2, (ErlangCons h1_7 m_3), t3_5, h3_4])
erlps__rumerge3_21_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangCons h3_4 t3_5), h3m_6, h1_7]
  =
  (erlps__rumerge3_1__6
     [t1_0, t2_1, h2_2, (ErlangCons h1_7 (ErlangCons h3m_6 m_3)),
      t3_5, h3_4])
erlps__rumerge3_21_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangEmptyList), h3m_4, h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_5, h3m_4])))) =
  (erlps__rumerge2_1__4 [t1_0, t2_1, (ErlangCons h1_5 m_3), h2_2])
erlps__rumerge3_21_3__7 [t1_0, t2_1, h2_2, m_3,
                         (ErlangEmptyList), h3m_4, h1_5]
  =
  (erlps__rumerge2_1__4
     [t1_0, t2_1, (ErlangCons h1_5 (ErlangCons h3m_4 m_3)), h2_2])
erlps__rumerge3_21_3__7 [arg_14, arg_15, arg_16, arg_17, arg_18,
                         arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__rumerge3_21_3__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge2_1__5 :: ErlangFun
erlps__umerge2_1__5 [(ErlangCons h1_0 t1_1), t2_2, m_3, _hdm_4,
                     h2_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_5])))) =
  (erlps__umerge2_1__5
     [t1_1, t2_2, (ErlangCons h1_0 m_3), h1_0, h2_5])
erlps__umerge2_1__5 [(ErlangCons h1_0 t1_1), t2_2, m_3, hdm_4,
                     h2_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_5, hdm_4])))) =
  (erlps__umerge2_2__4 [t1_1, t2_2, m_3, h1_0])
erlps__umerge2_1__5 [(ErlangCons h1_0 t1_1), t2_2, m_3, _hdm_4,
                     h2_5]
  =
  (erlps__umerge2_2__4 [t1_1, t2_2, (ErlangCons h2_5 m_3), h1_0])
erlps__umerge2_1__5 [(ErlangEmptyList), t2_0, m_1, hdm_2, h2_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h2_3, hdm_2])))) =
  (BIF.lists__reverse__2 [t2_0, m_1])
erlps__umerge2_1__5 [(ErlangEmptyList), t2_0, m_1, _hdm_2, h2_3]
  =
  (BIF.lists__reverse__2 [t2_0, (ErlangCons h2_3 m_1)])
erlps__umerge2_1__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__umerge2_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__umerge2_2__4 :: ErlangFun
erlps__umerge2_2__4 [t1_0, (ErlangCons h2_1 t2_2), m_3, h1_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_4, h2_1])))) =
  (erlps__umerge2_1__5
     [t1_0, t2_2, (ErlangCons h1_4 m_3), h1_4, h2_1])
erlps__umerge2_2__4 [t1_0, (ErlangCons h2_1 t2_2), m_3, h1_4] =
  (erlps__umerge2_2__4 [t1_0, t2_2, (ErlangCons h2_1 m_3), h1_4])
erlps__umerge2_2__4 [t1_0, (ErlangEmptyList), m_1, h1_2] =
  (BIF.lists__reverse__2 [t1_0, (ErlangCons h1_2 m_1)])
erlps__umerge2_2__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__umerge2_2__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge2_1__4 :: ErlangFun
erlps__rumerge2_1__4 [(ErlangCons h1_0 t1_1), t2_2, m_3, h2_4]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_0, h2_4])))) =
  (erlps__rumerge2_2__5 [t1_1, t2_2, m_3, h2_4, h1_0])
erlps__rumerge2_1__4 [(ErlangCons h1_0 t1_1), t2_2, m_3, h2_4] =
  (erlps__rumerge2_1__4 [t1_1, t2_2, (ErlangCons h1_0 m_3), h2_4])
erlps__rumerge2_1__4 [(ErlangEmptyList), t2_0, m_1, h2_2] =
  (BIF.lists__reverse__2 [t2_0, (ErlangCons h2_2 m_1)])
erlps__rumerge2_1__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__rumerge2_1__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rumerge2_2__5 :: ErlangFun
erlps__rumerge2_2__5 [t1_0, (ErlangCons h2_1 t2_2), m_3, h2m_4,
                      h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [h1_5, h2_1])))) =
  (erlps__rumerge2_2__5
     [t1_0, t2_2, (ErlangCons h2m_4 m_3), h2_1, h1_5])
erlps__rumerge2_2__5 [t1_0, (ErlangCons h2_1 t2_2), m_3, h2m_4,
                      h1_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_5, h2m_4])))) =
  (erlps__rumerge2_1__4 [t1_0, t2_2, (ErlangCons h1_5 m_3), h2_1])
erlps__rumerge2_2__5 [t1_0, (ErlangCons h2_1 t2_2), m_3, h2m_4,
                      h1_5]
  =
  (erlps__rumerge2_1__4
     [t1_0, t2_2, (ErlangCons h1_5 (ErlangCons h2m_4 m_3)), h2_1])
erlps__rumerge2_2__5 [t1_0, (ErlangEmptyList), m_1, h2m_2, h1_3]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [h1_3, h2m_2])))) =
  (BIF.lists__reverse__2 [t1_0, (ErlangCons h1_3 m_1)])
erlps__rumerge2_2__5 [t1_0, (ErlangEmptyList), m_1, h2m_2, h1_3]
  =
  (BIF.lists__reverse__2
     [t1_0, (ErlangCons h1_3 (ErlangCons h2m_2 m_1))])
erlps__rumerge2_2__5 [arg_10, arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__rumerge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysplit_1__8 :: ErlangFun
erlps__keysplit_1__8 [i_0, x_1, ex_2, y_3, ey_4,
                      (ErlangCons z_5 l_6), r_7, rs_8]
  =
  let case_9 = (BIF.erlang__element__2 [i_0, z_5])
  in
    case case_9 of
      ez_12 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [ey_4, ez_12])))) ->
        (erlps__keysplit_1__8
           [i_0, y_3, ey_4, z_5, ez_12, l_6, (ErlangCons x_1 r_7), rs_8])
      ez_25 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [ex_2, ez_25])))) ->
        (erlps__keysplit_1__8
           [i_0, z_5, ez_25, y_3, ey_4, l_6, (ErlangCons x_1 r_7), rs_8])
      _ez_38 | (ErlangAtom "true") <-
                 ((falsifyErrors
                     (\ _ -> (BIF.erlang__op_eq [r_7, ErlangEmptyList])))) ->
        (erlps__keysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_4, l_6,
            (ErlangCons z_5 ErlangEmptyList), rs_8])
      ez_51 ->
        (erlps__keysplit_1_1__10
           [i_0, x_1, ex_2, y_3, ey_4, ez_51, r_7, rs_8, z_5, l_6])
      something_else -> (EXC.case_clause something_else)
erlps__keysplit_1__8 [i_0, x_1, _ex_2, y_3, _ey_4,
                      (ErlangEmptyList), r_5, rs_6]
  =
  (erlps__rkeymergel__4
     [i_0, (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_5)) rs_6),
      ErlangEmptyList, (ErlangAtom "asc")])
erlps__keysplit_1__8 [arg_17, arg_18, arg_19, arg_20, arg_21,
                      arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__keysplit_1__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysplit_1_1__10 :: ErlangFun
erlps__keysplit_1_1__10 [i_0, x_1, ex_2, y_3, ey_4, es_5, r_6,
                         rs_7, s_8, (ErlangCons z_9 l_10)]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, z_9])
  in
    case case_11 of
      ez_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [ey_4, ez_14])))) ->
        (erlps__keysplit_1_1__10
           [i_0, y_3, ey_4, z_9, ez_14, es_5, (ErlangCons x_1 r_6), rs_7,
            s_8, l_10])
      ez_29 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [ex_2, ez_29])))) ->
        (erlps__keysplit_1_1__10
           [i_0, z_9, ez_29, y_3, ey_4, es_5, (ErlangCons x_1 r_6), rs_7,
            s_8, l_10])
      ez_44 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [es_5, ez_44])))) ->
        (erlps__keysplit_1__8
           [i_0, s_8, es_5, z_9, ez_44, l_10, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)])
      ez_61 ->
        (erlps__keysplit_1__8
           [i_0, z_9, ez_61, s_8, es_5, l_10, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)])
      something_else -> (EXC.case_clause something_else)
erlps__keysplit_1_1__10 [i_0, x_1, _ex_2, y_3, _ey_4, _es_5, r_6,
                         rs_7, s_8, (ErlangEmptyList)]
  =
  (erlps__rkeymergel__4
     [i_0,
      (ErlangCons (ErlangCons s_8 ErlangEmptyList)
         (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)),
      ErlangEmptyList, (ErlangAtom "asc")])
erlps__keysplit_1_1__10 [arg_23, arg_24, arg_25, arg_26, arg_27,
                         arg_28, arg_29, arg_30, arg_31, arg_32]
  =
  (EXC.function_clause unit)
erlps__keysplit_1_1__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysplit_2__8 :: ErlangFun
erlps__keysplit_2__8 [i_0, x_1, ex_2, y_3, ey_4,
                      (ErlangCons z_5 l_6), r_7, rs_8]
  =
  let case_9 = (BIF.erlang__element__2 [i_0, z_5])
  in
    case case_9 of
      ez_12 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_greater [ey_4, ez_12])))) ->
        (erlps__keysplit_2__8
           [i_0, y_3, ey_4, z_5, ez_12, l_6, (ErlangCons x_1 r_7), rs_8])
      ez_25 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_greater [ex_2, ez_25])))) ->
        (erlps__keysplit_2__8
           [i_0, z_5, ez_25, y_3, ey_4, l_6, (ErlangCons x_1 r_7), rs_8])
      _ez_38 | (ErlangAtom "true") <-
                 ((falsifyErrors
                     (\ _ -> (BIF.erlang__op_eq [r_7, ErlangEmptyList])))) ->
        (erlps__keysplit_2__8
           [i_0, x_1, ex_2, y_3, ey_4, l_6,
            (ErlangCons z_5 ErlangEmptyList), rs_8])
      ez_51 ->
        (erlps__keysplit_2_1__10
           [i_0, x_1, ex_2, y_3, ey_4, ez_51, r_7, rs_8, z_5, l_6])
      something_else -> (EXC.case_clause something_else)
erlps__keysplit_2__8 [i_0, x_1, _ex_2, y_3, _ey_4,
                      (ErlangEmptyList), r_5, rs_6]
  =
  (erlps__keymergel__4
     [i_0, (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_5)) rs_6),
      ErlangEmptyList, (ErlangAtom "desc")])
erlps__keysplit_2__8 [arg_17, arg_18, arg_19, arg_20, arg_21,
                      arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__keysplit_2__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keysplit_2_1__10 :: ErlangFun
erlps__keysplit_2_1__10 [i_0, x_1, ex_2, y_3, ey_4, es_5, r_6,
                         rs_7, s_8, (ErlangCons z_9 l_10)]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, z_9])
  in
    case case_11 of
      ez_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_greater [ey_4, ez_14])))) ->
        (erlps__keysplit_2_1__10
           [i_0, y_3, ey_4, z_9, ez_14, es_5, (ErlangCons x_1 r_6), rs_7,
            s_8, l_10])
      ez_29 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_greater [ex_2, ez_29])))) ->
        (erlps__keysplit_2_1__10
           [i_0, z_9, ez_29, y_3, ey_4, es_5, (ErlangCons x_1 r_6), rs_7,
            s_8, l_10])
      ez_44 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_greater [es_5, ez_44])))) ->
        (erlps__keysplit_2__8
           [i_0, s_8, es_5, z_9, ez_44, l_10, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)])
      ez_61 ->
        (erlps__keysplit_2__8
           [i_0, z_9, ez_61, s_8, es_5, l_10, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)])
      something_else -> (EXC.case_clause something_else)
erlps__keysplit_2_1__10 [i_0, x_1, _ex_2, y_3, _ey_4, _es_5, r_6,
                         rs_7, s_8, (ErlangEmptyList)]
  =
  (erlps__keymergel__4
     [i_0,
      (ErlangCons (ErlangCons s_8 ErlangEmptyList)
         (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_6)) rs_7)),
      ErlangEmptyList, (ErlangAtom "desc")])
erlps__keysplit_2_1__10 [arg_23, arg_24, arg_25, arg_26, arg_27,
                         arg_28, arg_29, arg_30, arg_31, arg_32]
  =
  (EXC.function_clause unit)
erlps__keysplit_2_1__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymergel__4 :: ErlangFun
erlps__keymergel__4 [i_0,
                     (ErlangCons t1_1 (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons (ErlangCons h3_4 t3_5) l_6))),
                     acc_7, o_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_eq [o_8, (ErlangAtom "asc")])))) =
  let    arg_13 = (BIF.erlang__element__2 [i_0, h2_2])
  in let arg_18 = (BIF.erlang__element__2 [i_0, h3_4])
  in let
    m_23 =
      (erlps__keymerge3_1__10
         [i_0, t1_1, ErlangEmptyList, o_8, arg_13, h2_2, t2_3, arg_18,
          h3_4, t3_5])
  in (erlps__keymergel__4 [i_0, l_6, (ErlangCons m_23 acc_7), o_8])
erlps__keymergel__4 [i_0,
                     (ErlangCons (ErlangCons h3_1 t3_2) (ErlangCons (ErlangCons h2_3 t2_4) (ErlangCons t1_5 l_6))),
                     acc_7, o_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_eq [o_8, (ErlangAtom "desc")])))) =
  let    arg_13 = (BIF.erlang__element__2 [i_0, h2_3])
  in let arg_18 = (BIF.erlang__element__2 [i_0, h3_1])
  in let
    m_23 =
      (erlps__keymerge3_1__10
         [i_0, t1_5, ErlangEmptyList, o_8, arg_13, h2_3, t2_4, arg_18,
          h3_1, t3_2])
  in (erlps__keymergel__4 [i_0, l_6, (ErlangCons m_23 acc_7), o_8])
erlps__keymergel__4 [i_0,
                     (ErlangCons t1_1 (ErlangCons (ErlangCons h2_2 t2_3) l_4)),
                     acc_5, (ErlangAtom "asc")]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_2])
  in let
    head_9 =
      (erlps__keymerge2_1__6
         [i_0, t1_1, arg_12, h2_2, t2_3, ErlangEmptyList])
  in
    (erlps__keymergel__4
       [i_0, l_4, (ErlangCons head_9 acc_5), (ErlangAtom "asc")])
erlps__keymergel__4 [i_0,
                     (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons t1_3 l_4)),
                     acc_5, (ErlangAtom "desc")]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_1])
  in let
    head_9 =
      (erlps__keymerge2_1__6
         [i_0, t1_3, arg_12, h2_1, t2_2, ErlangEmptyList])
  in
    (erlps__keymergel__4
       [i_0, l_4, (ErlangCons head_9 acc_5), (ErlangAtom "desc")])
erlps__keymergel__4 [_i_0, (ErlangCons l_1 (ErlangEmptyList)),
                     (ErlangEmptyList), _o_2]
  =
  l_1
erlps__keymergel__4 [i_0, (ErlangCons l_1 (ErlangEmptyList)),
                     acc_2, o_3]
  =
  let head_6 = (BIF.lists__reverse__2 [l_1, ErlangEmptyList])
  in
    (erlps__rkeymergel__4
       [i_0, (ErlangCons head_6 acc_2), ErlangEmptyList, o_3])
erlps__keymergel__4 [i_0, (ErlangEmptyList), acc_1, o_2] =
  (erlps__rkeymergel__4 [i_0, acc_1, ErlangEmptyList, o_2])
erlps__keymergel__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__keymergel__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymergel__4 :: ErlangFun
erlps__rkeymergel__4 [i_0,
                      (ErlangCons (ErlangCons h3_1 t3_2) (ErlangCons (ErlangCons h2_3 t2_4) (ErlangCons t1_5 l_6))),
                      acc_7, o_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_eq [o_8, (ErlangAtom "asc")])))) =
  let    arg_13 = (BIF.erlang__element__2 [i_0, h2_3])
  in let arg_18 = (BIF.erlang__element__2 [i_0, h3_1])
  in let
    m_23 =
      (erlps__rkeymerge3_1__10
         [i_0, t1_5, ErlangEmptyList, o_8, arg_13, h2_3, t2_4, arg_18,
          h3_1, t3_2])
  in
    (erlps__rkeymergel__4 [i_0, l_6, (ErlangCons m_23 acc_7), o_8])
erlps__rkeymergel__4 [i_0,
                      (ErlangCons t1_1 (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons (ErlangCons h3_4 t3_5) l_6))),
                      acc_7, o_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_eq [o_8, (ErlangAtom "desc")])))) =
  let    arg_13 = (BIF.erlang__element__2 [i_0, h2_2])
  in let arg_18 = (BIF.erlang__element__2 [i_0, h3_4])
  in let
    m_23 =
      (erlps__rkeymerge3_1__10
         [i_0, t1_1, ErlangEmptyList, o_8, arg_13, h2_2, t2_3, arg_18,
          h3_4, t3_5])
  in
    (erlps__rkeymergel__4 [i_0, l_6, (ErlangCons m_23 acc_7), o_8])
erlps__rkeymergel__4 [i_0,
                      (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons t1_3 l_4)),
                      acc_5, (ErlangAtom "asc")]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_1])
  in let
    head_9 =
      (erlps__rkeymerge2_1__6
         [i_0, t1_3, arg_12, h2_1, t2_2, ErlangEmptyList])
  in
    (erlps__rkeymergel__4
       [i_0, l_4, (ErlangCons head_9 acc_5), (ErlangAtom "asc")])
erlps__rkeymergel__4 [i_0,
                      (ErlangCons t1_1 (ErlangCons (ErlangCons h2_2 t2_3) l_4)),
                      acc_5, (ErlangAtom "desc")]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_2])
  in let
    head_9 =
      (erlps__rkeymerge2_1__6
         [i_0, t1_1, arg_12, h2_2, t2_3, ErlangEmptyList])
  in
    (erlps__rkeymergel__4
       [i_0, l_4, (ErlangCons head_9 acc_5), (ErlangAtom "desc")])
erlps__rkeymergel__4 [i_0, (ErlangCons l_1 (ErlangEmptyList)),
                      acc_2, o_3]
  =
  let head_6 = (BIF.lists__reverse__2 [l_1, ErlangEmptyList])
  in
    (erlps__keymergel__4
       [i_0, (ErlangCons head_6 acc_2), ErlangEmptyList, o_3])
erlps__rkeymergel__4 [i_0, (ErlangEmptyList), acc_1, o_2] =
  (erlps__keymergel__4 [i_0, acc_1, ErlangEmptyList, o_2])
erlps__rkeymergel__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__rkeymergel__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_1__10 :: ErlangFun
erlps__keymerge3_1__10 [i_0, (ErlangCons h1_1 t1_2), m_3, d_4,
                        e2_5, h2_6, t2_7, e3_8, h3_9, t3_10]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_11 of
      e1_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_14, e2_5])))) ->
        (erlps__keymerge3_12__12
           [i_0, e1_14, h1_1, t1_2, e2_5, h2_6, t2_7, e3_8, h3_9, t3_10,
            m_3, d_4])
      e1_29 ->
        (erlps__keymerge3_21__12
           [i_0, e1_29, h1_1, t1_2, e2_5, h2_6, t2_7, e3_8, h3_9, t3_10,
            m_3, t2_7])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge3_1__10 [i_0, (ErlangEmptyList), m_1, _d_2, e2_3,
                        h2_4, t2_5, e3_6, h3_7, t3_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_3, e3_6])))) =
  (erlps__keymerge2_1__6
     [i_0, t2_5, e3_6, h3_7, t3_8, (ErlangCons h2_4 m_1)])
erlps__keymerge3_1__10 [i_0, (ErlangEmptyList), m_1, _d_2, e2_3,
                        h2_4, t2_5, _e3_6, h3_7, t3_8]
  =
  (erlps__keymerge2_2__7 [i_0, t2_5, e2_3, h3_7, t3_8, m_1, h2_4])
erlps__keymerge3_1__10 [arg_16, arg_17, arg_18, arg_19, arg_20,
                        arg_21, arg_22, arg_23, arg_24, arg_25]
  =
  (EXC.function_clause unit)
erlps__keymerge3_1__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_2__10 :: ErlangFun
erlps__keymerge3_2__10 [i_0, e1_1, h1_2, t1_3,
                        (ErlangCons h2_4 t2_5), m_6, d_7, e3_8, h3_9, t3_10]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_11 of
      e2_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e2_14])))) ->
        (erlps__keymerge3_12__12
           [i_0, e1_1, h1_2, t1_3, e2_14, h2_4, t2_5, e3_8, h3_9, t3_10,
            m_6, t1_3])
      e2_29 ->
        (erlps__keymerge3_21__12
           [i_0, e1_1, h1_2, t1_3, e2_29, h2_4, t2_5, e3_8, h3_9, t3_10,
            m_6, d_7])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge3_2__10 [i_0, e1_1, h1_2, t1_3, (ErlangEmptyList),
                        m_4, _d_5, e3_6, h3_7, t3_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_6])))) =
  (erlps__keymerge2_1__6
     [i_0, t1_3, e3_6, h3_7, t3_8, (ErlangCons h1_2 m_4)])
erlps__keymerge3_2__10 [i_0, e1_1, h1_2, t1_3, (ErlangEmptyList),
                        m_4, _d_5, _e3_6, h3_7, t3_8]
  =
  (erlps__keymerge2_2__7 [i_0, t1_3, e1_1, h3_7, t3_8, m_4, h1_2])
erlps__keymerge3_2__10 [arg_16, arg_17, arg_18, arg_19, arg_20,
                        arg_21, arg_22, arg_23, arg_24, arg_25]
  =
  (EXC.function_clause unit)
erlps__keymerge3_2__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_12__12 :: ErlangFun
erlps__keymerge3_12__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
                         e3_7, h3_8, t3_9, m_10, d_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__keymerge3_1__10
     [i_0, t1_3, (ErlangCons h1_2 m_10), d_11, e2_4, h2_5, t2_6, e3_7,
      h3_8, t3_9])
erlps__keymerge3_12__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
                         _e3_7, h3_8, t3_9, m_10, _d_11]
  =
  (erlps__keymerge3_12_3__9
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_9,
      (ErlangCons h3_8 m_10)])
erlps__keymerge3_12__12 [arg_23, arg_24, arg_25, arg_26, arg_27,
                         arg_28, arg_29, arg_30, arg_31, arg_32, arg_33, arg_34]
  =
  (EXC.function_clause unit)
erlps__keymerge3_12__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_12_3__9 :: ErlangFun
erlps__keymerge3_12_3__9 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, (ErlangCons h3_7 t3_8), m_9]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_7])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_13])))) ->
        (erlps__keymerge3_1__10
           [i_0, t1_3, (ErlangCons h1_2 m_9), t1_3, e2_4, h2_5, t2_6, e3_13,
            h3_7, t3_8])
      _e3_28 ->
        (erlps__keymerge3_12_3__9
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_8,
            (ErlangCons h3_7 m_9)])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge3_12_3__9 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, (ErlangEmptyList), m_7]
  =
  (erlps__keymerge2_1__6
     [i_0, t1_3, e2_4, h2_5, t2_6, (ErlangCons h1_2 m_7)])
erlps__keymerge3_12_3__9 [arg_16, arg_17, arg_18, arg_19, arg_20,
                          arg_21, arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__keymerge3_12_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_21__12 :: ErlangFun
erlps__keymerge3_21__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
                         e3_7, h3_8, t3_9, m_10, d_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_7])))) =
  (erlps__keymerge3_2__10
     [i_0, e1_1, h1_2, t1_3, t2_6, (ErlangCons h2_5 m_10), d_11, e3_7,
      h3_8, t3_9])
erlps__keymerge3_21__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
                         _e3_7, h3_8, t3_9, m_10, _d_11]
  =
  (erlps__keymerge3_21_3__9
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_9,
      (ErlangCons h3_8 m_10)])
erlps__keymerge3_21__12 [arg_23, arg_24, arg_25, arg_26, arg_27,
                         arg_28, arg_29, arg_30, arg_31, arg_32, arg_33, arg_34]
  =
  (EXC.function_clause unit)
erlps__keymerge3_21__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge3_21_3__9 :: ErlangFun
erlps__keymerge3_21_3__9 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, (ErlangCons h3_7 t3_8), m_9]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_7])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_13])))) ->
        (erlps__keymerge3_2__10
           [i_0, e1_1, h1_2, t1_3, t2_6, (ErlangCons h2_5 m_9), t2_6, e3_13,
            h3_7, t3_8])
      _e3_28 ->
        (erlps__keymerge3_21_3__9
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_8,
            (ErlangCons h3_7 m_9)])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge3_21_3__9 [i_0, e1_1, h1_2, t1_3, _e2_4, h2_5,
                          t2_6, (ErlangEmptyList), m_7]
  =
  (erlps__keymerge2_2__7 [i_0, t1_3, e1_1, h2_5, t2_6, m_7, h1_2])
erlps__keymerge3_21_3__9 [arg_15, arg_16, arg_17, arg_18, arg_19,
                          arg_20, arg_21, arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__keymerge3_21_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_1__10 :: ErlangFun
erlps__rkeymerge3_1__10 [i_0, (ErlangCons h1_1 t1_2), m_3, d_4,
                         e2_5, h2_6, t2_7, e3_8, h3_9, t3_10]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_11 of
      e1_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_14, e2_5])))) ->
        (erlps__rkeymerge3_12__12
           [i_0, e1_14, h1_1, t1_2, e2_5, h2_6, t2_7, e3_8, h3_9, t3_10,
            m_3, t2_7])
      e1_29 ->
        (erlps__rkeymerge3_21__12
           [i_0, e1_29, h1_1, t1_2, e2_5, h2_6, t2_7, e3_8, h3_9, t3_10,
            m_3, d_4])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge3_1__10 [i_0, (ErlangEmptyList), m_1, _d_2, e2_3,
                         h2_4, t2_5, e3_6, h3_7, t3_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_3, e3_6])))) =
  (erlps__rkeymerge2_2__7 [i_0, e2_3, t2_5, h3_7, t3_8, m_1, h2_4])
erlps__rkeymerge3_1__10 [i_0, (ErlangEmptyList), m_1, _d_2,
                         _e2_3, h2_4, t2_5, e3_6, h3_7, t3_8]
  =
  (erlps__rkeymerge2_1__6
     [i_0, t2_5, e3_6, h3_7, t3_8, (ErlangCons h2_4 m_1)])
erlps__rkeymerge3_1__10 [arg_17, arg_18, arg_19, arg_20, arg_21,
                         arg_22, arg_23, arg_24, arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_1__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_2__10 :: ErlangFun
erlps__rkeymerge3_2__10 [i_0, e1_1, h1_2, t1_3,
                         (ErlangCons h2_4 t2_5), m_6, d_7, e3_8, h3_9, t3_10]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_11 of
      e2_14 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e2_14])))) ->
        (erlps__rkeymerge3_12__12
           [i_0, e1_1, h1_2, t1_3, e2_14, h2_4, t2_5, e3_8, h3_9, t3_10,
            m_6, d_7])
      e2_29 ->
        (erlps__rkeymerge3_21__12
           [i_0, e1_1, h1_2, t1_3, e2_29, h2_4, t2_5, e3_8, h3_9, t3_10,
            m_6, t1_3])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge3_2__10 [i_0, e1_1, h1_2, t1_3,
                         (ErlangEmptyList), m_4, _d_5, e3_6, h3_7, t3_8]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_6])))) =
  (erlps__rkeymerge2_2__7 [i_0, e1_1, t1_3, h3_7, t3_8, m_4, h1_2])
erlps__rkeymerge3_2__10 [i_0, _e1_1, h1_2, t1_3,
                         (ErlangEmptyList), m_4, _d_5, e3_6, h3_7, t3_8]
  =
  (erlps__rkeymerge2_1__6
     [i_0, t1_3, e3_6, h3_7, t3_8, (ErlangCons h1_2 m_4)])
erlps__rkeymerge3_2__10 [arg_17, arg_18, arg_19, arg_20, arg_21,
                         arg_22, arg_23, arg_24, arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_2__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_12__12 :: ErlangFun
erlps__rkeymerge3_12__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, _d_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_7])))) =
  (erlps__rkeymerge3_12_3__9
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_9,
      (ErlangCons h3_8 m_10)])
erlps__rkeymerge3_12__12 [i_0, e1_1, h1_2, t1_3, _e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, d_11]
  =
  (erlps__rkeymerge3_2__10
     [i_0, e1_1, h1_2, t1_3, t2_6, (ErlangCons h2_5 m_10), d_11, e3_7,
      h3_8, t3_9])
erlps__rkeymerge3_12__12 [arg_24, arg_25, arg_26, arg_27, arg_28,
                          arg_29, arg_30, arg_31, arg_32, arg_33, arg_34,
                          arg_35]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_12__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_12_3__9 :: ErlangFun
erlps__rkeymerge3_12_3__9 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                           t2_6, (ErlangCons h3_7 t3_8), m_9]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_7])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_13])))) ->
        (erlps__rkeymerge3_12_3__9
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_8,
            (ErlangCons h3_7 m_9)])
      e3_27 ->
        (erlps__rkeymerge3_2__10
           [i_0, e1_1, h1_2, t1_3, t2_6, (ErlangCons h2_5 m_9), t2_6, e3_27,
            h3_7, t3_8])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge3_12_3__9 [i_0, e1_1, h1_2, t1_3, _e2_4, h2_5,
                           t2_6, (ErlangEmptyList), m_7]
  =
  (erlps__rkeymerge2_2__7 [i_0, e1_1, t1_3, h2_5, t2_6, m_7, h1_2])
erlps__rkeymerge3_12_3__9 [arg_15, arg_16, arg_17, arg_18,
                           arg_19, arg_20, arg_21, arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_12_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_21__12 :: ErlangFun
erlps__rkeymerge3_21__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, _d_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__rkeymerge3_21_3__9
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_9,
      (ErlangCons h3_8 m_10)])
erlps__rkeymerge3_21__12 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, d_11]
  =
  (erlps__rkeymerge3_1__10
     [i_0, t1_3, (ErlangCons h1_2 m_10), d_11, e2_4, h2_5, t2_6, e3_7,
      h3_8, t3_9])
erlps__rkeymerge3_21__12 [arg_24, arg_25, arg_26, arg_27, arg_28,
                          arg_29, arg_30, arg_31, arg_32, arg_33, arg_34,
                          arg_35]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_21__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge3_21_3__9 :: ErlangFun
erlps__rkeymerge3_21_3__9 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                           t2_6, (ErlangCons h3_7 t3_8), m_9]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_7])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_13])))) ->
        (erlps__rkeymerge3_21_3__9
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, t3_8,
            (ErlangCons h3_7 m_9)])
      e3_27 ->
        (erlps__rkeymerge3_1__10
           [i_0, t1_3, (ErlangCons h1_2 m_9), t1_3, e2_4, h2_5, t2_6, e3_27,
            h3_7, t3_8])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge3_21_3__9 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                           t2_6, (ErlangEmptyList), m_7]
  =
  (erlps__rkeymerge2_1__6
     [i_0, t1_3, e2_4, h2_5, t2_6, (ErlangCons h1_2 m_7)])
erlps__rkeymerge3_21_3__9 [arg_16, arg_17, arg_18, arg_19,
                           arg_20, arg_21, arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__rkeymerge3_21_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge2_1__6 :: ErlangFun
erlps__keymerge2_1__6 [i_0, (ErlangCons h1_1 t1_2), e2_3, h2_4,
                       t2_5, m_6]
  =
  let case_7 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_7 of
      e1_10 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_10, e2_3])))) ->
        (erlps__keymerge2_1__6
           [i_0, t1_2, e2_3, h2_4, t2_5, (ErlangCons h1_1 m_6)])
      e1_21 ->
        (erlps__keymerge2_2__7 [i_0, t1_2, e1_21, h2_4, t2_5, m_6, h1_1])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge2_1__6 [_i_0, (ErlangEmptyList), _e2_1, h2_2,
                       t2_3, m_4]
  =
  (BIF.lists__reverse__2 [t2_3, (ErlangCons h2_2 m_4)])
erlps__keymerge2_1__6 [arg_9, arg_10, arg_11, arg_12, arg_13,
                       arg_14]
  =
  (EXC.function_clause unit)
erlps__keymerge2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keymerge2_2__7 :: ErlangFun
erlps__keymerge2_2__7 [i_0, t1_1, e1_2, hdm_3,
                       (ErlangCons h2_4 t2_5), m_6, h1_7]
  =
  let case_8 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_8 of
      e2_11 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_2, e2_11])))) ->
        (erlps__keymerge2_1__6
           [i_0, t1_1, e2_11, h2_4, t2_5,
            (ErlangCons h1_7 (ErlangCons hdm_3 m_6))])
      _e2_24 ->
        (erlps__keymerge2_2__7
           [i_0, t1_1, e1_2, h2_4, t2_5, (ErlangCons hdm_3 m_6), h1_7])
      something_else -> (EXC.case_clause something_else)
erlps__keymerge2_2__7 [_i_0, t1_1, _e1_2, hdm_3,
                       (ErlangEmptyList), m_4, h1_5]
  =
  (BIF.lists__reverse__2
     [t1_1, (ErlangCons h1_5 (ErlangCons hdm_3 m_4))])
erlps__keymerge2_2__7 [arg_12, arg_13, arg_14, arg_15, arg_16,
                       arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__keymerge2_2__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge2_1__6 :: ErlangFun
erlps__rkeymerge2_1__6 [i_0, (ErlangCons h1_1 t1_2), e2_3, h2_4,
                        t2_5, m_6]
  =
  let case_7 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_7 of
      e1_10 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_10, e2_3])))) ->
        (erlps__rkeymerge2_2__7
           [i_0, e1_10, t1_2, h2_4, t2_5, m_6, h1_1])
      _e1_20 ->
        (erlps__rkeymerge2_1__6
           [i_0, t1_2, e2_3, h2_4, t2_5, (ErlangCons h1_1 m_6)])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge2_1__6 [_i_0, (ErlangEmptyList), _e2_1, h2_2,
                        t2_3, m_4]
  =
  (BIF.lists__reverse__2 [t2_3, (ErlangCons h2_2 m_4)])
erlps__rkeymerge2_1__6 [arg_9, arg_10, arg_11, arg_12, arg_13,
                        arg_14]
  =
  (EXC.function_clause unit)
erlps__rkeymerge2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rkeymerge2_2__7 :: ErlangFun
erlps__rkeymerge2_2__7 [i_0, e1_1, t1_2, hdm_3,
                        (ErlangCons h2_4 t2_5), m_6, h1_7]
  =
  let case_8 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_8 of
      e2_11 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e2_11])))) ->
        (erlps__rkeymerge2_2__7
           [i_0, e1_1, t1_2, h2_4, t2_5, (ErlangCons hdm_3 m_6), h1_7])
      e2_23 ->
        (erlps__rkeymerge2_1__6
           [i_0, t1_2, e2_23, h2_4, t2_5,
            (ErlangCons h1_7 (ErlangCons hdm_3 m_6))])
      something_else -> (EXC.case_clause something_else)
erlps__rkeymerge2_2__7 [_i_0, _e1_1, t1_2, hdm_3,
                        (ErlangEmptyList), m_4, h1_5]
  =
  (BIF.lists__reverse__2
     [t1_2, (ErlangCons h1_5 (ErlangCons hdm_3 m_4))])
erlps__rkeymerge2_2__7 [arg_12, arg_13, arg_14, arg_15, arg_16,
                        arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__rkeymerge2_2__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeysplit_1__8 :: ErlangFun
erlps__ukeysplit_1__8 [i_0, x_1, ex_2, y_3, ey_4,
                       (ErlangCons z_5 l_6), r_7, rs_8]
  =
  let case_9 = (BIF.erlang__element__2 [i_0, z_5])
  in
    case case_9 of
      ez_12 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ey_4, ez_12])))) ->
        (erlps__ukeysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8])
      ez_23 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ey_4, ez_23])))) ->
        (erlps__ukeysplit_1__8
           [i_0, y_3, ey_4, z_5, ez_23, l_6, (ErlangCons x_1 r_7), rs_8])
      ez_36 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ex_2, ez_36])))) ->
        (erlps__ukeysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8])
      ez_47 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ex_2, ez_47])))) ->
        (erlps__ukeysplit_1__8
           [i_0, z_5, ez_47, y_3, ey_4, l_6, (ErlangCons x_1 r_7), rs_8])
      _ez_60 | (ErlangAtom "true") <-
                 ((falsifyErrors
                     (\ _ -> (BIF.erlang__op_eq [r_7, ErlangEmptyList])))) ->
        (erlps__ukeysplit_1__8
           [i_0, x_1, ex_2, y_3, ey_4, l_6,
            (ErlangCons z_5 ErlangEmptyList), rs_8])
      ez_73 ->
        (erlps__ukeysplit_1_1__10
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8, z_5, ez_73])
      something_else -> (EXC.case_clause something_else)
erlps__ukeysplit_1__8 [i_0, x_1, _ex_2, y_3, _ey_4,
                       (ErlangEmptyList), r_5, rs_6]
  =
  (erlps__rukeymergel__3
     [i_0, (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_5)) rs_6),
      ErlangEmptyList])
erlps__ukeysplit_1__8 [arg_16, arg_17, arg_18, arg_19, arg_20,
                       arg_21, arg_22, arg_23]
  =
  (EXC.function_clause unit)
erlps__ukeysplit_1__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeysplit_1_1__10 :: ErlangFun
erlps__ukeysplit_1_1__10 [i_0, x_1, ex_2, y_3, ey_4,
                          (ErlangCons z_5 l_6), r_7, rs_8, s_9, es_10]
  =
  let case_11 = (BIF.erlang__element__2 [i_0, z_5])
  in
    case case_11 of
      ez_14 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ey_4, ez_14])))) ->
        (erlps__ukeysplit_1_1__10
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8, s_9, es_10])
      ez_27 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ey_4, ez_27])))) ->
        (erlps__ukeysplit_1_1__10
           [i_0, y_3, ey_4, z_5, ez_27, l_6, (ErlangCons x_1 r_7), rs_8,
            s_9, es_10])
      ez_42 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ex_2, ez_42])))) ->
        (erlps__ukeysplit_1_1__10
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8, s_9, es_10])
      ez_55 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ex_2, ez_55])))) ->
        (erlps__ukeysplit_1_1__10
           [i_0, z_5, ez_55, y_3, ey_4, l_6, (ErlangCons x_1 r_7), rs_8,
            s_9, es_10])
      ez_70 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [es_10, ez_70])))) ->
        (erlps__ukeysplit_1_1__10
           [i_0, x_1, ex_2, y_3, ey_4, l_6, r_7, rs_8, s_9, es_10])
      ez_83 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [es_10, ez_83])))) ->
        (erlps__ukeysplit_1__8
           [i_0, s_9, es_10, z_5, ez_83, l_6, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_7)) rs_8)])
      ez_100 ->
        (erlps__ukeysplit_1__8
           [i_0, z_5, ez_100, s_9, es_10, l_6, ErlangEmptyList,
            (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_7)) rs_8)])
      something_else -> (EXC.case_clause something_else)
erlps__ukeysplit_1_1__10 [i_0, x_1, _ex_2, y_3, _ey_4,
                          (ErlangEmptyList), r_5, rs_6, s_7, _es_8]
  =
  (erlps__rukeymergel__3
     [i_0,
      (ErlangCons (ErlangCons s_7 ErlangEmptyList)
         (ErlangCons (ErlangCons y_3 (ErlangCons x_1 r_5)) rs_6)),
      ErlangEmptyList])
erlps__ukeysplit_1_1__10 [arg_22, arg_23, arg_24, arg_25, arg_26,
                          arg_27, arg_28, arg_29, arg_30, arg_31]
  =
  (EXC.function_clause unit)
erlps__ukeysplit_1_1__10 args =
  (EXC.badarity (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeysplit_2__5 :: ErlangFun
erlps__ukeysplit_2__5 [i_0, y_1, ey_2, (ErlangCons z_3 l_4), r_5]
  =
  let case_6 = (BIF.erlang__element__2 [i_0, z_3])
  in
    case case_6 of
      ez_9 | (ErlangAtom "true") <-
               ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [ey_2, ez_9])))) ->
        (erlps__ukeysplit_2__5 [i_0, y_1, ey_2, l_4, r_5])
      ez_17 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesser [ey_2, ez_17])))) ->
        let head_28 = (BIF.lists__reverse__2 [r_5, ErlangEmptyList])
        in
          (erlps__ukeysplit_1__8
             [i_0, y_1, ey_2, z_3, ez_17, l_4, ErlangEmptyList,
              (ErlangCons head_28 ErlangEmptyList)])
      ez_32 ->
        (erlps__ukeysplit_2__5
           [i_0, z_3, ez_32, l_4, (ErlangCons y_1 r_5)])
      something_else -> (EXC.case_clause something_else)
erlps__ukeysplit_2__5 [_i_0, y_1, _ey_2, (ErlangEmptyList), r_3]
  =
  (ErlangCons y_1 r_3)
erlps__ukeysplit_2__5 [arg_6, arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__ukeysplit_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymergel__3 :: ErlangFun
erlps__ukeymergel__3 [i_0,
                      (ErlangCons t1_1 (ErlangCons (ErlangCons h2_2 t2_3) (ErlangCons (ErlangCons h3_4 t3_5) l_6))),
                      acc_7]
  =
  let    arg_14 = (BIF.erlang__element__2 [i_0, h2_2])
  in let arg_20 = (BIF.erlang__element__2 [i_0, h3_4])
  in let
    m_25 =
      (erlps__ukeymerge3_1__11
         [i_0, t1_1, acc_7, (ErlangCons h2_2 h3_4), arg_14, h2_2, t2_3,
          ErlangEmptyList, arg_20, h3_4, t3_5])
  in (erlps__ukeymergel__3 [i_0, l_6, (ErlangCons m_25 acc_7)])
erlps__ukeymergel__3 [i_0,
                      (ErlangCons (ErlangCons h1_1 t1_2) (ErlangCons t2_3 l_4)),
                      acc_5]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h1_1])
  in let
    head_9 =
      (erlps__ukeymerge2_2__6
         [i_0, t1_2, arg_12, h1_1, t2_3, ErlangEmptyList])
  in (erlps__ukeymergel__3 [i_0, l_4, (ErlangCons head_9 acc_5)])
erlps__ukeymergel__3 [_i_0, (ErlangCons l_1 (ErlangEmptyList)),
                      (ErlangEmptyList)]
  =
  l_1
erlps__ukeymergel__3 [i_0, (ErlangCons l_1 (ErlangEmptyList)),
                      acc_2]
  =
  let head_5 = (BIF.lists__reverse__2 [l_1, ErlangEmptyList])
  in
    (erlps__rukeymergel__3
       [i_0, (ErlangCons head_5 acc_2), ErlangEmptyList])
erlps__ukeymergel__3 [i_0, (ErlangEmptyList), acc_1] =
  (erlps__rukeymergel__3 [i_0, acc_1, ErlangEmptyList])
erlps__ukeymergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__ukeymergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymergel__3 :: ErlangFun
erlps__rukeymergel__3 [i_0,
                       (ErlangCons (ErlangCons h3_1 t3_2) (ErlangCons (ErlangCons h2_3 t2_4) (ErlangCons t1_5 l_6))),
                       acc_7]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_3])
  in let arg_18 = (BIF.erlang__element__2 [i_0, h3_1])
  in let
    m_23 =
      (erlps__rukeymerge3_1__11
         [i_0, t1_5, acc_7, ErlangEmptyList, arg_12, h2_3, t2_4,
          ErlangEmptyList, arg_18, h3_1, t3_2])
  in (erlps__rukeymergel__3 [i_0, l_6, (ErlangCons m_23 acc_7)])
erlps__rukeymergel__3 [i_0,
                       (ErlangCons (ErlangCons h2_1 t2_2) (ErlangCons t1_3 l_4)),
                       acc_5]
  =
  let    arg_12 = (BIF.erlang__element__2 [i_0, h2_1])
  in let
    head_9 =
      (erlps__rukeymerge2_1__6
         [i_0, t1_3, arg_12, t2_2, ErlangEmptyList, h2_1])
  in (erlps__rukeymergel__3 [i_0, l_4, (ErlangCons head_9 acc_5)])
erlps__rukeymergel__3 [i_0, (ErlangCons l_1 (ErlangEmptyList)),
                       acc_2]
  =
  let head_5 = (BIF.lists__reverse__2 [l_1, ErlangEmptyList])
  in
    (erlps__ukeymergel__3
       [i_0, (ErlangCons head_5 acc_2), ErlangEmptyList])
erlps__rukeymergel__3 [i_0, (ErlangEmptyList), acc_1] =
  (erlps__ukeymergel__3 [i_0, acc_1, ErlangEmptyList])
erlps__rukeymergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__rukeymergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_1__11 :: ErlangFun
erlps__ukeymerge3_1__11 [i_0, (ErlangCons h1_1 t1_2), d_3, hdm_4,
                         e2_5, h2_6, t2_7, m_8, e3_9, h3_10, t3_11]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_12 of
      e1_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_15, e2_5])))) ->
        (erlps__ukeymerge3_12__13
           [i_0, e1_15, t1_2, h1_1, e2_5, h2_6, t2_7, e3_9, h3_10, t3_11,
            m_8, hdm_4, d_3])
      e1_31 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_5, hdm_4])))) ->
        (erlps__ukeymerge3_2__11
           [i_0, e1_31, t1_2, h1_1, t2_7, hdm_4, t2_7, m_8, e3_9, h3_10,
            t3_11])
      e1_45 ->
        (erlps__ukeymerge3_21__13
           [i_0, e1_45, t1_2, h1_1, e2_5, h2_6, t2_7, e3_9, h3_10, t3_11,
            m_8, hdm_4, t2_7])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge3_1__11 [i_0, (ErlangEmptyList), _d_1, hdm_2,
                         e2_3, _h2_4, t2_5, m_6, e3_7, h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_3, hdm_2])))) =
  (erlps__ukeymerge2_1__7
     [i_0, t2_5, e3_7, hdm_2, t3_9, m_6, h3_8])
erlps__ukeymerge3_1__11 [i_0, (ErlangEmptyList), _d_1, _hdm_2,
                         e2_3, h2_4, t2_5, m_6, e3_7, h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_3, e3_7])))) =
  (erlps__ukeymerge2_1__7
     [i_0, t2_5, e3_7, e2_3, t3_9, (ErlangCons h2_4 m_6), h3_8])
erlps__ukeymerge3_1__11 [i_0, (ErlangEmptyList), _d_1, hdm_2,
                         e2_3, h2_4, t2_5, m_6, e3_7, _h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e3_7, hdm_2])))) =
  (erlps__ukeymerge2_2__6 [i_0, t2_5, e2_3, h2_4, t3_9, m_6])
erlps__ukeymerge3_1__11 [i_0, (ErlangEmptyList), _d_1, _hdm_2,
                         e2_3, h2_4, t2_5, m_6, _e3_7, h3_8, t3_9]
  =
  (erlps__ukeymerge2_2__6
     [i_0, t2_5, e2_3, h2_4, t3_9, (ErlangCons h3_8 m_6)])
erlps__ukeymerge3_1__11 [arg_18, arg_19, arg_20, arg_21, arg_22,
                         arg_23, arg_24, arg_25, arg_26, arg_27, arg_28]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_1__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_2__11 :: ErlangFun
erlps__ukeymerge3_2__11 [i_0, e1_1, t1_2, h1_3,
                         (ErlangCons h2_4 t2_5), hdm_6, d_7, m_8, e3_9, h3_10,
                         t3_11]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_12 of
      e2_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e2_15])))) ->
        (erlps__ukeymerge3_12__13
           [i_0, e1_1, t1_2, h1_3, e2_15, h2_4, t2_5, e3_9, h3_10, t3_11,
            m_8, hdm_6, t1_2])
      e2_31 ->
        (erlps__ukeymerge3_21__13
           [i_0, e1_1, t1_2, h1_3, e2_31, h2_4, t2_5, e3_9, h3_10, t3_11,
            m_8, hdm_6, d_7])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge3_2__11 [i_0, e1_1, t1_2, h1_3,
                         (ErlangEmptyList), _hdm_4, _d_5, m_6, e3_7, h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__ukeymerge2_1__7
     [i_0, t1_2, e3_7, e1_1, t3_9, (ErlangCons h1_3 m_6), h3_8])
erlps__ukeymerge3_2__11 [i_0, e1_1, t1_2, h1_3,
                         (ErlangEmptyList), hdm_4, _d_5, m_6, e3_7, _h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e3_7, hdm_4])))) =
  (erlps__ukeymerge2_2__6 [i_0, t1_2, e1_1, h1_3, t3_9, m_6])
erlps__ukeymerge3_2__11 [i_0, e1_1, t1_2, h1_3,
                         (ErlangEmptyList), _hdm_4, _d_5, m_6, _e3_7, h3_8,
                         t3_9]
  =
  (erlps__ukeymerge2_2__6
     [i_0, t1_2, e1_1, h1_3, t3_9, (ErlangCons h3_8 m_6)])
erlps__ukeymerge3_2__11 [arg_18, arg_19, arg_20, arg_21, arg_22,
                         arg_23, arg_24, arg_25, arg_26, arg_27, arg_28]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_2__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_12__13 :: ErlangFun
erlps__ukeymerge3_12__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, _hdm_11, d_12]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__ukeymerge3_1__11
     [i_0, t1_2, d_12, e1_1, e2_4, h2_5, t2_6, (ErlangCons h1_3 m_10),
      e3_7, h3_8, t3_9])
erlps__ukeymerge3_12__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, e3_7, _h3_8, t3_9, m_10, hdm_11, _d_12]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e3_7, hdm_11])))) =
  (erlps__ukeymerge3_12_3__9
     [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, m_10, t3_9])
erlps__ukeymerge3_12__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, _e3_7, h3_8, t3_9, m_10, _hdm_11, _d_12]
  =
  (erlps__ukeymerge3_12_3__9
     [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, (ErlangCons h3_8 m_10),
      t3_9])
erlps__ukeymerge3_12__13 [arg_24, arg_25, arg_26, arg_27, arg_28,
                          arg_29, arg_30, arg_31, arg_32, arg_33, arg_34,
                          arg_35, arg_36]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_12__13 args =
  (EXC.badarity (ErlangFun 13 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_12_3__9 :: ErlangFun
erlps__ukeymerge3_12_3__9 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                           t2_6, m_7, (ErlangCons h3_8 t3_9)]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_8])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_13])))) ->
        (erlps__ukeymerge3_1__11
           [i_0, t1_2, t1_2, e1_1, e2_4, h2_5, t2_6, (ErlangCons h1_3 m_7),
            e3_13, h3_8, t3_9])
      _e3_29 ->
        (erlps__ukeymerge3_12_3__9
           [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, (ErlangCons h3_8 m_7),
            t3_9])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge3_12_3__9 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                           t2_6, m_7, (ErlangEmptyList)]
  =
  (erlps__ukeymerge2_1__7
     [i_0, t1_2, e2_4, e1_1, t2_6, (ErlangCons h1_3 m_7), h2_5])
erlps__ukeymerge3_12_3__9 [arg_17, arg_18, arg_19, arg_20,
                           arg_21, arg_22, arg_23, arg_24, arg_25]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_12_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_21__13 :: ErlangFun
erlps__ukeymerge3_21__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, e3_7, h3_8, t3_9, m_10, _hdm_11, d_12]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_7])))) =
  (erlps__ukeymerge3_2__11
     [i_0, e1_1, t1_2, h1_3, t2_6, e2_4, d_12, (ErlangCons h2_5 m_10),
      e3_7, h3_8, t3_9])
erlps__ukeymerge3_21__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, e3_7, _h3_8, t3_9, m_10, hdm_11, _d_12]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e3_7, hdm_11])))) =
  (erlps__ukeymerge3_21_3__9
     [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, m_10, t3_9])
erlps__ukeymerge3_21__13 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                          t2_6, _e3_7, h3_8, t3_9, m_10, _hdm_11, _d_12]
  =
  (erlps__ukeymerge3_21_3__9
     [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, (ErlangCons h3_8 m_10),
      t3_9])
erlps__ukeymerge3_21__13 [arg_24, arg_25, arg_26, arg_27, arg_28,
                          arg_29, arg_30, arg_31, arg_32, arg_33, arg_34,
                          arg_35, arg_36]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_21__13 args =
  (EXC.badarity (ErlangFun 13 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge3_21_3__9 :: ErlangFun
erlps__ukeymerge3_21_3__9 [i_0, e1_1, t1_2, h1_3, e2_4, h2_5,
                           t2_6, m_7, (ErlangCons h3_8 t3_9)]
  =
  let case_10 = (BIF.erlang__element__2 [i_0, h3_8])
  in
    case case_10 of
      e3_13 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_13])))) ->
        (erlps__ukeymerge3_2__11
           [i_0, e1_1, t1_2, h1_3, t2_6, e2_4, t2_6, (ErlangCons h2_5 m_7),
            e3_13, h3_8, t3_9])
      _e3_29 ->
        (erlps__ukeymerge3_21_3__9
           [i_0, e1_1, t1_2, h1_3, e2_4, h2_5, t2_6, (ErlangCons h3_8 m_7),
            t3_9])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge3_21_3__9 [i_0, e1_1, t1_2, h1_3, _e2_4, h2_5,
                           t2_6, m_7, (ErlangEmptyList)]
  =
  (erlps__ukeymerge2_2__6
     [i_0, t1_2, e1_1, h1_3, t2_6, (ErlangCons h2_5 m_7)])
erlps__ukeymerge3_21_3__9 [arg_16, arg_17, arg_18, arg_19,
                           arg_20, arg_21, arg_22, arg_23, arg_24]
  =
  (EXC.function_clause unit)
erlps__ukeymerge3_21_3__9 args =
  (EXC.badarity (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_1__11 :: ErlangFun
erlps__rukeymerge3_1__11 [i_0, (ErlangCons h1_1 t1_2), d1_3,
                          d2_4, e2_5, h2_6, t2_7, m_8, e3_9, h3_10, t3_11]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_12 of
      e1_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_15, e2_5])))) ->
        (erlps__rukeymerge3_12a__11
           [i_0, e1_15, h1_1, t1_2, e2_5, h2_6, t2_7, e3_9, h3_10, t3_11,
            m_8])
      e1_29 ->
        (erlps__rukeymerge3_21a__13
           [i_0, e1_29, h1_1, t1_2, e2_5, h2_6, t2_7, e3_9, h3_10, t3_11,
            m_8, d1_3, d2_4])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge3_1__11 [i_0, (ErlangEmptyList), _d1_1, _d2_2,
                          e2_3, h2_4, t2_5, m_6, e3_7, h3_8, t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_3, e3_7])))) =
  (erlps__rukeymerge2_2__8
     [i_0, t2_5, e2_3, t3_9, m_6, e3_7, h3_8, h2_4])
erlps__rukeymerge3_1__11 [i_0, (ErlangEmptyList), _d1_1, _d2_2,
                          _e2_3, h2_4, t2_5, m_6, e3_7, h3_8, t3_9]
  =
  (erlps__rukeymerge2_1__6
     [i_0, t2_5, e3_7, t3_9, (ErlangCons h2_4 m_6), h3_8])
erlps__rukeymerge3_1__11 [arg_18, arg_19, arg_20, arg_21, arg_22,
                          arg_23, arg_24, arg_25, arg_26, arg_27, arg_28]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_1__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_12a__11 :: ErlangFun
erlps__rukeymerge3_12a__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_7])))) =
  (erlps__rukeymerge3_12_3__11
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, m_10, e3_7, h3_8,
      t3_9])
erlps__rukeymerge3_12a__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10]
  =
  (erlps__rukeymerge3_2__11
     [i_0, e1_1, h1_2, t1_3, t2_6, h2_5, e2_4, m_10, e3_7, h3_8,
      t3_9])
erlps__rukeymerge3_12a__11 [arg_22, arg_23, arg_24, arg_25,
                            arg_26, arg_27, arg_28, arg_29, arg_30, arg_31,
                            arg_32]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_12a__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_21a__13 :: ErlangFun
erlps__rukeymerge3_21a__13 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, _d1_11, _d2_12]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__rukeymerge3_21_3__11
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, m_10, e3_7, h3_8,
      t3_9])
erlps__rukeymerge3_21a__13 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, d1_11, d2_12]
  =
  (erlps__rukeymerge3_1__11
     [i_0, t1_3, d1_11, d2_12, e2_4, h2_5, t2_6,
      (ErlangCons h1_2 m_10), e3_7, h3_8, t3_9])
erlps__rukeymerge3_21a__13 [arg_26, arg_27, arg_28, arg_29,
                            arg_30, arg_31, arg_32, arg_33, arg_34, arg_35,
                            arg_36, arg_37, arg_38]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_21a__13 args =
  (EXC.badarity (ErlangFun 13 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_2__11 :: ErlangFun
erlps__rukeymerge3_2__11 [i_0, e1_1, h1_2, t1_3,
                          (ErlangCons h2_4 t2_5), h2m_6, e2m_7, m_8, e3_9,
                          h3_10, t3_11]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_12 of
      e2_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e2_15])))) ->
        (erlps__rukeymerge3_12b__12
           [i_0, e1_1, h1_2, t1_3, e2_15, h2_4, t2_5, e3_9, h3_10, t3_11,
            m_8, h2m_6])
      e2_30 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_1, e2m_7])))) ->
        (erlps__rukeymerge3_1__11
           [i_0, t1_3, h1_2, t1_3, e2_30, h2_4, t2_5, (ErlangCons h1_2 m_8),
            e3_9, h3_10, t3_11])
      e2_46 ->
        (erlps__rukeymerge3_21b__12
           [i_0, e1_1, h1_2, t1_3, e2_46, h2_4, t2_5, e3_9, h3_10, t3_11,
            m_8, h2m_6])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge3_2__11 [i_0, e1_1, h1_2, t1_3,
                          (ErlangEmptyList), _h2m_4, e2m_5, m_6, e3_7, h3_8,
                          t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_1, e2m_5])))) =
  (erlps__rukeymerge2_1__6
     [i_0, t1_3, e3_7, t3_9, (ErlangCons h1_2 m_6), h3_8])
erlps__rukeymerge3_2__11 [i_0, e1_1, h1_2, t1_3,
                          (ErlangEmptyList), h2m_4, _e2m_5, m_6, e3_7, h3_8,
                          t3_9]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__rukeymerge2_2__8
     [i_0, t1_3, e1_1, t3_9, (ErlangCons h2m_4 m_6), e3_7, h3_8,
      h1_2])
erlps__rukeymerge3_2__11 [i_0, _e1_1, h1_2, t1_3,
                          (ErlangEmptyList), h2m_4, _e2m_5, m_6, e3_7, h3_8,
                          t3_9]
  =
  (erlps__rukeymerge2_1__6
     [i_0, t1_3, e3_7, t3_9, (ErlangCons h1_2 (ErlangCons h2m_4 m_6)),
      h3_8])
erlps__rukeymerge3_2__11 [arg_20, arg_21, arg_22, arg_23, arg_24,
                          arg_25, arg_26, arg_27, arg_28, arg_29, arg_30]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_2__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_12b__12 :: ErlangFun
erlps__rukeymerge3_12b__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, h2m_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_7])))) =
  (erlps__rukeymerge3_12_3__11
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
      (ErlangCons h2m_11 m_10), e3_7, h3_8, t3_9])
erlps__rukeymerge3_12b__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, h2m_11]
  =
  (erlps__rukeymerge3_2__11
     [i_0, e1_1, h1_2, t1_3, t2_6, h2_5, e2_4,
      (ErlangCons h2m_11 m_10), e3_7, h3_8, t3_9])
erlps__rukeymerge3_12b__12 [arg_25, arg_26, arg_27, arg_28,
                            arg_29, arg_30, arg_31, arg_32, arg_33, arg_34,
                            arg_35, arg_36]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_12b__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_21b__12 :: ErlangFun
erlps__rukeymerge3_21b__12 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, h2m_11]
  | (ErlangAtom "true") <-
      ((falsifyErrors
          (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_7])))) =
  (erlps__rukeymerge3_21_3__11
     [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6,
      (ErlangCons h2m_11 m_10), e3_7, h3_8, t3_9])
erlps__rukeymerge3_21b__12 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                            t2_6, e3_7, h3_8, t3_9, m_10, h2m_11]
  =
  (erlps__rukeymerge3_1__11
     [i_0, t1_3, h1_2, t1_3, e2_4, h2_5, t2_6,
      (ErlangCons h1_2 (ErlangCons h2m_11 m_10)), e3_7, h3_8, t3_9])
erlps__rukeymerge3_21b__12 [arg_27, arg_28, arg_29, arg_30,
                            arg_31, arg_32, arg_33, arg_34, arg_35, arg_36,
                            arg_37, arg_38]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_21b__12 args =
  (EXC.badarity (ErlangFun 12 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_12_3__11 :: ErlangFun
erlps__rukeymerge3_12_3__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, e3m_8, h3m_9, (ErlangCons h3_10 t3_11)]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h3_10])
  in
    case case_12 of
      e3_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e2_4, e3_15])))) ->
        (erlps__rukeymerge3_12_3__11
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, (ErlangCons h3m_9 m_7),
            e3_15, h3_10, t3_11])
      e3_31 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_4, e3m_8])))) ->
        (erlps__rukeymerge3_2__11
           [i_0, e1_1, h1_2, t1_3, t2_6, h2_5, e2_4, m_7, e3_31, h3_10,
            t3_11])
      e3_45 ->
        (erlps__rukeymerge3_2__11
           [i_0, e1_1, h1_2, t1_3, t2_6, h2_5, e2_4, (ErlangCons h3m_9 m_7),
            e3_45, h3_10, t3_11])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge3_12_3__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, e3m_8, _h3m_9, (ErlangEmptyList)]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_4, e3m_8])))) =
  (erlps__rukeymerge2_2__8
     [i_0, t1_3, e1_1, t2_6, m_7, e2_4, h2_5, h1_2])
erlps__rukeymerge3_12_3__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, _e3m_8, h3m_9, (ErlangEmptyList)]
  =
  (erlps__rukeymerge2_2__8
     [i_0, t1_3, e1_1, t2_6, (ErlangCons h3m_9 m_7), e2_4, h2_5,
      h1_2])
erlps__rukeymerge3_12_3__11 [arg_20, arg_21, arg_22, arg_23,
                             arg_24, arg_25, arg_26, arg_27, arg_28, arg_29,
                             arg_30]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_12_3__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge3_21_3__11 :: ErlangFun
erlps__rukeymerge3_21_3__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, e3m_8, h3m_9, (ErlangCons h3_10 t3_11)]
  =
  let case_12 = (BIF.erlang__element__2 [i_0, h3_10])
  in
    case case_12 of
      e3_15 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_1, e3_15])))) ->
        (erlps__rukeymerge3_21_3__11
           [i_0, e1_1, h1_2, t1_3, e2_4, h2_5, t2_6, (ErlangCons h3m_9 m_7),
            e3_15, h3_10, t3_11])
      e3_31 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_1, e3m_8])))) ->
        (erlps__rukeymerge3_1__11
           [i_0, t1_3, h1_2, t1_3, e2_4, h2_5, t2_6, (ErlangCons h1_2 m_7),
            e3_31, h3_10, t3_11])
      e3_47 ->
        (erlps__rukeymerge3_1__11
           [i_0, t1_3, h1_2, t1_3, e2_4, h2_5, t2_6,
            (ErlangCons h1_2 (ErlangCons h3m_9 m_7)), e3_47, h3_10, t3_11])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge3_21_3__11 [i_0, e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, e3m_8, _h3m_9, (ErlangEmptyList)]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_1, e3m_8])))) =
  (erlps__rukeymerge2_1__6
     [i_0, t1_3, e2_4, t2_6, (ErlangCons h1_2 m_7), h2_5])
erlps__rukeymerge3_21_3__11 [i_0, _e1_1, h1_2, t1_3, e2_4, h2_5,
                             t2_6, m_7, _e3m_8, h3m_9, (ErlangEmptyList)]
  =
  (erlps__rukeymerge2_1__6
     [i_0, t1_3, e2_4, t2_6, (ErlangCons h1_2 (ErlangCons h3m_9 m_7)),
      h2_5])
erlps__rukeymerge3_21_3__11 [arg_20, arg_21, arg_22, arg_23,
                             arg_24, arg_25, arg_26, arg_27, arg_28, arg_29,
                             arg_30]
  =
  (EXC.function_clause unit)
erlps__rukeymerge3_21_3__11 args =
  (EXC.badarity (ErlangFun 11 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge2_1__7 :: ErlangFun
erlps__ukeymerge2_1__7 [i_0, (ErlangCons h1_1 t1_2), e2_3, hdm_4,
                        t2_5, m_6, h2_7]
  =
  let case_8 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_8 of
      e1_11 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_11, e2_3])))) ->
        (erlps__ukeymerge2_1__7
           [i_0, t1_2, e2_3, e1_11, t2_5, (ErlangCons h1_1 m_6), h2_7])
      e1_23 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_3, hdm_4])))) ->
        (erlps__ukeymerge2_2__6 [i_0, t1_2, e1_23, h1_1, t2_5, m_6])
      e1_32 ->
        (erlps__ukeymerge2_2__6
           [i_0, t1_2, e1_32, h1_1, t2_5, (ErlangCons h2_7 m_6)])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge2_1__7 [_i_0, (ErlangEmptyList), e2_1, hdm_2,
                        t2_3, m_4, _h2_5]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e2_1, hdm_2])))) =
  (BIF.lists__reverse__2 [t2_3, m_4])
erlps__ukeymerge2_1__7 [_i_0, (ErlangEmptyList), _e2_1, _hdm_2,
                        t2_3, m_4, h2_5]
  =
  (BIF.lists__reverse__2 [t2_3, (ErlangCons h2_5 m_4)])
erlps__ukeymerge2_1__7 [arg_10, arg_11, arg_12, arg_13, arg_14,
                        arg_15, arg_16]
  =
  (EXC.function_clause unit)
erlps__ukeymerge2_1__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ukeymerge2_2__6 :: ErlangFun
erlps__ukeymerge2_2__6 [i_0, t1_1, e1_2, h1_3,
                        (ErlangCons h2_4 t2_5), m_6]
  =
  let case_7 = (BIF.erlang__element__2 [i_0, h2_4])
  in
    case case_7 of
      e2_10 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_2, e2_10])))) ->
        (erlps__ukeymerge2_1__7
           [i_0, t1_1, e2_10, e1_2, t2_5, (ErlangCons h1_3 m_6), h2_4])
      _e2_22 ->
        (erlps__ukeymerge2_2__6
           [i_0, t1_1, e1_2, h1_3, t2_5, (ErlangCons h2_4 m_6)])
      something_else -> (EXC.case_clause something_else)
erlps__ukeymerge2_2__6 [_i_0, t1_1, _e1_2, h1_3,
                        (ErlangEmptyList), m_4]
  =
  (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_3 m_4)])
erlps__ukeymerge2_2__6 [arg_9, arg_10, arg_11, arg_12, arg_13,
                        arg_14]
  =
  (EXC.function_clause unit)
erlps__ukeymerge2_2__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge2_1__6 :: ErlangFun
erlps__rukeymerge2_1__6 [i_0, (ErlangCons h1_1 t1_2), e2_3, t2_4,
                         m_5, h2_6]
  =
  let case_7 = (BIF.erlang__element__2 [i_0, h1_1])
  in
    case case_7 of
      e1_10 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_10, e2_3])))) ->
        (erlps__rukeymerge2_2__8
           [i_0, t1_2, e1_10, t2_4, m_5, e2_3, h2_6, h1_1])
      _e1_21 ->
        (erlps__rukeymerge2_1__6
           [i_0, t1_2, e2_3, t2_4, (ErlangCons h1_1 m_5), h2_6])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge2_1__6 [_i_0, (ErlangEmptyList), _e2_1, t2_2,
                         m_3, h2_4]
  =
  (BIF.lists__reverse__2 [t2_2, (ErlangCons h2_4 m_3)])
erlps__rukeymerge2_1__6 [arg_9, arg_10, arg_11, arg_12, arg_13,
                         arg_14]
  =
  (EXC.function_clause unit)
erlps__rukeymerge2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rukeymerge2_2__8 :: ErlangFun
erlps__rukeymerge2_2__8 [i_0, t1_1, e1_2, (ErlangCons h2_3 t2_4),
                         m_5, e2m_6, h2m_7, h1_8]
  =
  let case_9 = (BIF.erlang__element__2 [i_0, h2_3])
  in
    case case_9 of
      e2_12 | (ErlangAtom "true") <-
                ((falsifyErrors
                    (\ _ -> (BIF.erlang__op_lesserEq [e1_2, e2_12])))) ->
        (erlps__rukeymerge2_2__8
           [i_0, t1_1, e1_2, t2_4, (ErlangCons h2m_7 m_5), e2_12, h2_3,
            h1_8])
      e2_25 | (ErlangAtom "true") <-
                ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_2, e2m_6])))) ->
        (erlps__rukeymerge2_1__6
           [i_0, t1_1, e2_25, t2_4, (ErlangCons h1_8 m_5), h2_3])
      e2_36 ->
        (erlps__rukeymerge2_1__6
           [i_0, t1_1, e2_36, t2_4,
            (ErlangCons h1_8 (ErlangCons h2m_7 m_5)), h2_3])
      something_else -> (EXC.case_clause something_else)
erlps__rukeymerge2_2__8 [_i_0, t1_1, e1_2, (ErlangEmptyList),
                         m_3, e2m_4, _h2m_5, h1_6]
  | (ErlangAtom "true") <-
      ((falsifyErrors (\ _ -> (BIF.erlang__op_eq [e1_2, e2m_4])))) =
  (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_6 m_3)])
erlps__rukeymerge2_2__8 [_i_0, t1_1, _e1_2, (ErlangEmptyList),
                         m_3, _e2m_4, h2m_5, h1_6]
  =
  (BIF.lists__reverse__2
     [t1_1, (ErlangCons h1_6 (ErlangCons h2m_5 m_3))])
erlps__rukeymerge2_2__8 [arg_13, arg_14, arg_15, arg_16, arg_17,
                         arg_18, arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__rukeymerge2_2__8 args =
  (EXC.badarity (ErlangFun 8 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fsplit_1__6 :: ErlangFun
erlps__fsplit_1__6 [y_0, x_1, fun_2, (ErlangCons z_3 l_4), r_5,
                    rs_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__fsplit_1__6
           [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
      (ErlangAtom "false") ->
        let
          case_19 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_19 of
            (ErlangAtom "true") ->
              (erlps__fsplit_1__6
                 [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
            (ErlangAtom "false") | (ErlangAtom "true") <-
                               ((falsifyErrors
                                   (\ _ ->
                                      (BIF.erlang__op_eq
                                         [r_5, ErlangEmptyList])))) ->
              (erlps__fsplit_1__6
                 [y_0, x_1, fun_2, l_4, (ErlangCons z_3 ErlangEmptyList), rs_6])
            (ErlangAtom "false") ->
              (erlps__fsplit_1_1__7 [y_0, x_1, fun_2, l_4, r_5, rs_6, z_3])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__fsplit_1__6 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                    rs_4]
  =
  (erlps__rfmergel__4
     [(ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4),
      ErlangEmptyList, fun_2, (ErlangAtom "asc")])
erlps__fsplit_1__6 [arg_15, arg_16, arg_17, arg_18, arg_19,
                    arg_20]
  =
  (EXC.function_clause unit)
erlps__fsplit_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fsplit_1_1__7 :: ErlangFun
erlps__fsplit_1_1__7 [y_0, x_1, fun_2, (ErlangCons z_3 l_4), r_5,
                      rs_6, s_7]
  =
  let
    case_8 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_8 of
      (ErlangAtom "true") ->
        (erlps__fsplit_1_1__7
           [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
      (ErlangAtom "false") ->
        let
          case_21 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_21 of
            (ErlangAtom "true") ->
              (erlps__fsplit_1_1__7
                 [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
            (ErlangAtom "false") ->
              let
                case_34 =
                  (BIF.erlang__apply__2
                     [fun_2, (ErlangCons s_7 (ErlangCons z_3 ErlangEmptyList))])
              in
                case case_34 of
                  (ErlangAtom "true") ->
                    (erlps__fsplit_1__6
                       [z_3, s_7, fun_2, l_4, ErlangEmptyList,
                        (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                           rs_6)])
                  (ErlangAtom "false") ->
                    (erlps__fsplit_1__6
                       [s_7, z_3, fun_2, l_4, ErlangEmptyList,
                        (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                           rs_6)])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__fsplit_1_1__7 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                      rs_4, s_5]
  =
  (erlps__rfmergel__4
     [(ErlangCons (ErlangCons s_5 ErlangEmptyList)
         (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4)),
      ErlangEmptyList, fun_2, (ErlangAtom "asc")])
erlps__fsplit_1_1__7 [arg_20, arg_21, arg_22, arg_23, arg_24,
                      arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__fsplit_1_1__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fsplit_2__6 :: ErlangFun
erlps__fsplit_2__6 [y_0, x_1, fun_2, (ErlangCons z_3 l_4), r_5,
                    rs_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "false") ->
        (erlps__fsplit_2__6
           [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
      (ErlangAtom "true") ->
        let
          case_19 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_19 of
            (ErlangAtom "false") ->
              (erlps__fsplit_2__6
                 [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
            (ErlangAtom "true") | (ErlangAtom "true") <-
                               ((falsifyErrors
                                   (\ _ ->
                                      (BIF.erlang__op_eq
                                         [r_5, ErlangEmptyList])))) ->
              (erlps__fsplit_2__6
                 [y_0, x_1, fun_2, l_4, (ErlangCons z_3 ErlangEmptyList), rs_6])
            (ErlangAtom "true") ->
              (erlps__fsplit_2_1__7 [y_0, x_1, fun_2, l_4, r_5, rs_6, z_3])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__fsplit_2__6 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                    rs_4]
  =
  (erlps__fmergel__4
     [(ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4),
      ErlangEmptyList, fun_2, (ErlangAtom "desc")])
erlps__fsplit_2__6 [arg_15, arg_16, arg_17, arg_18, arg_19,
                    arg_20]
  =
  (EXC.function_clause unit)
erlps__fsplit_2__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fsplit_2_1__7 :: ErlangFun
erlps__fsplit_2_1__7 [y_0, x_1, fun_2, (ErlangCons z_3 l_4), r_5,
                      rs_6, s_7]
  =
  let
    case_8 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_8 of
      (ErlangAtom "false") ->
        (erlps__fsplit_2_1__7
           [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
      (ErlangAtom "true") ->
        let
          case_21 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_21 of
            (ErlangAtom "false") ->
              (erlps__fsplit_2_1__7
                 [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
            (ErlangAtom "true") ->
              let
                case_34 =
                  (BIF.erlang__apply__2
                     [fun_2, (ErlangCons s_7 (ErlangCons z_3 ErlangEmptyList))])
              in
                case case_34 of
                  (ErlangAtom "false") ->
                    (erlps__fsplit_2__6
                       [z_3, s_7, fun_2, l_4, ErlangEmptyList,
                        (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                           rs_6)])
                  (ErlangAtom "true") ->
                    (erlps__fsplit_2__6
                       [s_7, z_3, fun_2, l_4, ErlangEmptyList,
                        (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                           rs_6)])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__fsplit_2_1__7 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                      rs_4, s_5]
  =
  (erlps__fmergel__4
     [(ErlangCons (ErlangCons s_5 ErlangEmptyList)
         (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4)),
      ErlangEmptyList, fun_2, (ErlangAtom "desc")])
erlps__fsplit_2_1__7 [arg_20, arg_21, arg_22, arg_23, arg_24,
                      arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__fsplit_2_1__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fmergel__4 :: ErlangFun
erlps__fmergel__4 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) l_3)),
                   acc_4, fun_5, (ErlangAtom "asc")]
  =
  let
    head_8 =
      (erlps__fmerge2_1__5 [t1_0, h2_1, fun_5, t2_2, ErlangEmptyList])
  in
    (erlps__fmergel__4
       [l_3, (ErlangCons head_8 acc_4), fun_5, (ErlangAtom "asc")])
erlps__fmergel__4 [(ErlangCons (ErlangCons h2_0 t2_1) (ErlangCons t1_2 l_3)),
                   acc_4, fun_5, (ErlangAtom "desc")]
  =
  let
    head_8 =
      (erlps__fmerge2_1__5 [t1_2, h2_0, fun_5, t2_1, ErlangEmptyList])
  in
    (erlps__fmergel__4
       [l_3, (ErlangCons head_8 acc_4), fun_5, (ErlangAtom "desc")])
erlps__fmergel__4 [(ErlangCons l_0 (ErlangEmptyList)),
                   (ErlangEmptyList), _fun_1, _o_2]
  =
  l_0
erlps__fmergel__4 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                   fun_2, o_3]
  =
  let head_5 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__rfmergel__4
       [(ErlangCons head_5 acc_1), ErlangEmptyList, fun_2, o_3])
erlps__fmergel__4 [(ErlangEmptyList), acc_0, fun_1, o_2] =
  (erlps__rfmergel__4 [acc_0, ErlangEmptyList, fun_1, o_2])
erlps__fmergel__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__fmergel__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rfmergel__4 :: ErlangFun
erlps__rfmergel__4 [(ErlangCons (ErlangCons h2_0 t2_1) (ErlangCons t1_2 l_3)),
                    acc_4, fun_5, (ErlangAtom "asc")]
  =
  let
    head_8 =
      (erlps__rfmerge2_1__5 [t1_2, h2_0, fun_5, t2_1, ErlangEmptyList])
  in
    (erlps__rfmergel__4
       [l_3, (ErlangCons head_8 acc_4), fun_5, (ErlangAtom "asc")])
erlps__rfmergel__4 [(ErlangCons t1_0 (ErlangCons (ErlangCons h2_1 t2_2) l_3)),
                    acc_4, fun_5, (ErlangAtom "desc")]
  =
  let
    head_8 =
      (erlps__rfmerge2_1__5 [t1_0, h2_1, fun_5, t2_2, ErlangEmptyList])
  in
    (erlps__rfmergel__4
       [l_3, (ErlangCons head_8 acc_4), fun_5, (ErlangAtom "desc")])
erlps__rfmergel__4 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                    fun_2, o_3]
  =
  let head_5 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__fmergel__4
       [(ErlangCons head_5 acc_1), ErlangEmptyList, fun_2, o_3])
erlps__rfmergel__4 [(ErlangEmptyList), acc_0, fun_1, o_2] =
  (erlps__fmergel__4 [acc_0, ErlangEmptyList, fun_1, o_2])
erlps__rfmergel__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__rfmergel__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fmerge2_1__5 :: ErlangFun
erlps__fmerge2_1__5 [(ErlangCons h1_0 t1_1), h2_2, fun_3, t2_4,
                     m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons h1_0 (ErlangCons h2_2 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__fmerge2_1__5
           [t1_1, h2_2, fun_3, t2_4, (ErlangCons h1_0 m_5)])
      (ErlangAtom "false") ->
        (erlps__fmerge2_2__5
           [h1_0, t1_1, fun_3, t2_4, (ErlangCons h2_2 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__fmerge2_1__5 [(ErlangEmptyList), h2_0, _fun_1, t2_2, m_3]
  =
  (BIF.lists__reverse__2 [t2_2, (ErlangCons h2_0 m_3)])
erlps__fmerge2_1__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__fmerge2_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fmerge2_2__5 :: ErlangFun
erlps__fmerge2_2__5 [h1_0, t1_1, fun_2, (ErlangCons h2_3 t2_4),
                     m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons h1_0 (ErlangCons h2_3 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__fmerge2_1__5
           [t1_1, h2_3, fun_2, t2_4, (ErlangCons h1_0 m_5)])
      (ErlangAtom "false") ->
        (erlps__fmerge2_2__5
           [h1_0, t1_1, fun_2, t2_4, (ErlangCons h2_3 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__fmerge2_2__5 [h1_0, t1_1, _fun_2, (ErlangEmptyList), m_3]
  =
  (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_0 m_3)])
erlps__fmerge2_2__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__fmerge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rfmerge2_1__5 :: ErlangFun
erlps__rfmerge2_1__5 [(ErlangCons h1_0 t1_1), h2_2, fun_3, t2_4,
                      m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons h1_0 (ErlangCons h2_2 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__rfmerge2_2__5
           [h1_0, t1_1, fun_3, t2_4, (ErlangCons h2_2 m_5)])
      (ErlangAtom "false") ->
        (erlps__rfmerge2_1__5
           [t1_1, h2_2, fun_3, t2_4, (ErlangCons h1_0 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__rfmerge2_1__5 [(ErlangEmptyList), h2_0, _fun_1, t2_2, m_3]
  =
  (BIF.lists__reverse__2 [t2_2, (ErlangCons h2_0 m_3)])
erlps__rfmerge2_1__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__rfmerge2_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rfmerge2_2__5 :: ErlangFun
erlps__rfmerge2_2__5 [h1_0, t1_1, fun_2, (ErlangCons h2_3 t2_4),
                      m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons h1_0 (ErlangCons h2_3 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__rfmerge2_2__5
           [h1_0, t1_1, fun_2, t2_4, (ErlangCons h2_3 m_5)])
      (ErlangAtom "false") ->
        (erlps__rfmerge2_1__5
           [t1_1, h2_3, fun_2, t2_4, (ErlangCons h1_0 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__rfmerge2_2__5 [h1_0, t1_1, _fun_2, (ErlangEmptyList), m_3]
  =
  (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_0 m_3)])
erlps__rfmerge2_2__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__rfmerge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufsplit_1__6 :: ErlangFun
erlps__ufsplit_1__6 [y_0, x_1, fun_2, (ErlangCons z_3 l_4), r_5,
                     rs_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        let
          case_11 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons z_3 (ErlangCons y_0 ErlangEmptyList))])
        in
          case case_11 of
            (ErlangAtom "true") ->
              (erlps__ufsplit_1__6 [y_0, x_1, fun_2, l_4, r_5, rs_6])
            (ErlangAtom "false") ->
              (erlps__ufsplit_1__6
                 [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let
          case_29 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_29 of
            (ErlangAtom "true") ->
              let
                case_33 =
                  (BIF.erlang__apply__2
                     [fun_2, (ErlangCons z_3 (ErlangCons x_1 ErlangEmptyList))])
              in
                case case_33 of
                  (ErlangAtom "true") ->
                    (erlps__ufsplit_1__6 [y_0, x_1, fun_2, l_4, r_5, rs_6])
                  (ErlangAtom "false") ->
                    (erlps__ufsplit_1__6
                       [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6])
                  something_else -> (EXC.case_clause something_else)
            (ErlangAtom "false") | (ErlangAtom "true") <-
                               ((falsifyErrors
                                   (\ _ ->
                                      (BIF.erlang__op_eq
                                         [r_5, ErlangEmptyList])))) ->
              (erlps__ufsplit_1__6
                 [y_0, x_1, fun_2, l_4, (ErlangCons z_3 ErlangEmptyList), rs_6])
            (ErlangAtom "false") ->
              (erlps__ufsplit_1_1__7 [y_0, x_1, fun_2, l_4, r_5, rs_6, z_3])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__ufsplit_1__6 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                     rs_4]
  =
  (erlps__rufmergel__3
     [(ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4),
      ErlangEmptyList, fun_2])
erlps__ufsplit_1__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                     arg_19]
  =
  (EXC.function_clause unit)
erlps__ufsplit_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufsplit_1_1__7 :: ErlangFun
erlps__ufsplit_1_1__7 [y_0, x_1, fun_2, (ErlangCons z_3 l_4),
                       r_5, rs_6, s_7]
  =
  let
    case_8 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons y_0 (ErlangCons z_3 ErlangEmptyList))])
  in
    case case_8 of
      (ErlangAtom "true") ->
        let
          case_12 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons z_3 (ErlangCons y_0 ErlangEmptyList))])
        in
          case case_12 of
            (ErlangAtom "true") ->
              (erlps__ufsplit_1_1__7 [y_0, x_1, fun_2, l_4, r_5, rs_6, s_7])
            (ErlangAtom "false") ->
              (erlps__ufsplit_1_1__7
                 [z_3, y_0, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let
          case_32 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons x_1 (ErlangCons z_3 ErlangEmptyList))])
        in
          case case_32 of
            (ErlangAtom "true") ->
              let
                case_36 =
                  (BIF.erlang__apply__2
                     [fun_2, (ErlangCons z_3 (ErlangCons x_1 ErlangEmptyList))])
              in
                case case_36 of
                  (ErlangAtom "true") ->
                    (erlps__ufsplit_1_1__7
                       [y_0, x_1, fun_2, l_4, r_5, rs_6, s_7])
                  (ErlangAtom "false") ->
                    (erlps__ufsplit_1_1__7
                       [y_0, z_3, fun_2, l_4, (ErlangCons x_1 r_5), rs_6, s_7])
                  something_else -> (EXC.case_clause something_else)
            (ErlangAtom "false") ->
              let
                case_56 =
                  (BIF.erlang__apply__2
                     [fun_2, (ErlangCons s_7 (ErlangCons z_3 ErlangEmptyList))])
              in
                case case_56 of
                  (ErlangAtom "true") ->
                    let
                      case_60 =
                        (BIF.erlang__apply__2
                           [fun_2,
                            (ErlangCons z_3 (ErlangCons s_7 ErlangEmptyList))])
                    in
                      case case_60 of
                        (ErlangAtom "true") ->
                          (erlps__ufsplit_1_1__7
                             [y_0, x_1, fun_2, l_4, r_5, rs_6, s_7])
                        (ErlangAtom "false") ->
                          (erlps__ufsplit_1__6
                             [z_3, s_7, fun_2, l_4, ErlangEmptyList,
                              (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                                 rs_6)])
                        something_else -> (EXC.case_clause something_else)
                  (ErlangAtom "false") ->
                    (erlps__ufsplit_1__6
                       [s_7, z_3, fun_2, l_4, ErlangEmptyList,
                        (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_5))
                           rs_6)])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__ufsplit_1_1__7 [y_0, x_1, fun_2, (ErlangEmptyList), r_3,
                       rs_4, s_5]
  =
  (erlps__rufmergel__3
     [(ErlangCons (ErlangCons s_5 ErlangEmptyList)
         (ErlangCons (ErlangCons y_0 (ErlangCons x_1 r_3)) rs_4)),
      ErlangEmptyList, fun_2])
erlps__ufsplit_1_1__7 [arg_19, arg_20, arg_21, arg_22, arg_23,
                       arg_24, arg_25]
  =
  (EXC.function_clause unit)
erlps__ufsplit_1_1__7 args =
  (EXC.badarity (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufsplit_2__4 :: ErlangFun
erlps__ufsplit_2__4 [y_0, (ErlangCons z_1 l_2), fun_3, r_4] =
  let
    case_5 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons y_0 (ErlangCons z_1 ErlangEmptyList))])
  in
    case case_5 of
      (ErlangAtom "true") ->
        let
          case_9 =
            (BIF.erlang__apply__2
               [fun_3, (ErlangCons z_1 (ErlangCons y_0 ErlangEmptyList))])
        in
          case case_9 of
            (ErlangAtom "true") -> (erlps__ufsplit_2__4 [y_0, l_2, fun_3, r_4])
            (ErlangAtom "false") ->
              let head_23 = (BIF.lists__reverse__2 [r_4, ErlangEmptyList])
              in
                (erlps__ufsplit_1__6
                   [z_1, y_0, fun_3, l_2, ErlangEmptyList,
                    (ErlangCons head_23 ErlangEmptyList)])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        (erlps__ufsplit_2__4 [z_1, l_2, fun_3, (ErlangCons y_0 r_4)])
      something_else -> (EXC.case_clause something_else)
erlps__ufsplit_2__4 [y_0, (ErlangEmptyList), _fun_1, r_2] =
  (ErlangCons y_0 r_2)
erlps__ufsplit_2__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__ufsplit_2__4 args =
  (EXC.badarity (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufmergel__3 :: ErlangFun
erlps__ufmergel__3 [(ErlangCons (ErlangCons h1_0 t1_1) (ErlangCons t2_2 l_3)),
                    acc_4, fun_5]
  =
  let
    head_8 =
      (erlps__ufmerge2_2__5 [h1_0, t1_1, fun_5, t2_2, ErlangEmptyList])
  in (erlps__ufmergel__3 [l_3, (ErlangCons head_8 acc_4), fun_5])
erlps__ufmergel__3 [(ErlangCons l_0 (ErlangEmptyList)),
                    (ErlangEmptyList), _fun_1]
  =
  l_0
erlps__ufmergel__3 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                    fun_2]
  =
  let head_4 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__rufmergel__3
       [(ErlangCons head_4 acc_1), ErlangEmptyList, fun_2])
erlps__ufmergel__3 [(ErlangEmptyList), acc_0, fun_1] =
  (erlps__rufmergel__3 [acc_0, ErlangEmptyList, fun_1])
erlps__ufmergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__ufmergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rufmergel__3 :: ErlangFun
erlps__rufmergel__3 [(ErlangCons (ErlangCons h2_0 t2_1) (ErlangCons t1_2 l_3)),
                     acc_4, fun_5]
  =
  let
    head_8 =
      (erlps__rufmerge2_1__5
         [t1_2, h2_0, fun_5, t2_1, ErlangEmptyList])
  in (erlps__rufmergel__3 [l_3, (ErlangCons head_8 acc_4), fun_5])
erlps__rufmergel__3 [(ErlangCons l_0 (ErlangEmptyList)), acc_1,
                     fun_2]
  =
  let head_4 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in
    (erlps__ufmergel__3
       [(ErlangCons head_4 acc_1), ErlangEmptyList, fun_2])
erlps__rufmergel__3 [(ErlangEmptyList), acc_0, fun_1] =
  (erlps__ufmergel__3 [acc_0, ErlangEmptyList, fun_1])
erlps__rufmergel__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__rufmergel__3 args =
  (EXC.badarity (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufmerge2_1__6 :: ErlangFun
erlps__ufmerge2_1__6 [(ErlangCons h1_0 t1_1), h2_2, fun_3, t2_4,
                      m_5, hdm_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons h1_0 (ErlangCons h2_2 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__ufmerge2_1__6
           [t1_1, h2_2, fun_3, t2_4, (ErlangCons h1_0 m_5), h1_0])
      (ErlangAtom "false") ->
        let
          case_19 =
            (BIF.erlang__apply__2
               [fun_3, (ErlangCons h2_2 (ErlangCons hdm_6 ErlangEmptyList))])
        in
          case case_19 of
            (ErlangAtom "true") ->
              (erlps__ufmerge2_2__5 [h1_0, t1_1, fun_3, t2_4, m_5])
            (ErlangAtom "false") ->
              (erlps__ufmerge2_2__5
                 [h1_0, t1_1, fun_3, t2_4, (ErlangCons h2_2 m_5)])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__ufmerge2_1__6 [(ErlangEmptyList), h2_0, fun_1, t2_2, m_3,
                      hdm_4]
  =
  let
    case_5 =
      (BIF.erlang__apply__2
         [fun_1, (ErlangCons h2_0 (ErlangCons hdm_4 ErlangEmptyList))])
  in
    case case_5 of
      (ErlangAtom "true") -> (BIF.lists__reverse__2 [t2_2, m_3])
      (ErlangAtom "false") ->
        (BIF.lists__reverse__2 [t2_2, (ErlangCons h2_0 m_3)])
      something_else -> (EXC.case_clause something_else)
erlps__ufmerge2_1__6 [arg_15, arg_16, arg_17, arg_18, arg_19,
                      arg_20]
  =
  (EXC.function_clause unit)
erlps__ufmerge2_1__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ufmerge2_2__5 :: ErlangFun
erlps__ufmerge2_2__5 [h1_0, t1_1, fun_2, (ErlangCons h2_3 t2_4),
                      m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons h1_0 (ErlangCons h2_3 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__ufmerge2_1__6
           [t1_1, h2_3, fun_2, t2_4, (ErlangCons h1_0 m_5), h1_0])
      (ErlangAtom "false") ->
        (erlps__ufmerge2_2__5
           [h1_0, t1_1, fun_2, t2_4, (ErlangCons h2_3 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__ufmerge2_2__5 [h1_0, t1_1, _fun_2, (ErlangEmptyList), m_3]
  =
  (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_0 m_3)])
erlps__ufmerge2_2__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__ufmerge2_2__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rufmerge2_1__5 :: ErlangFun
erlps__rufmerge2_1__5 [(ErlangCons h1_0 t1_1), h2_2, fun_3, t2_4,
                       m_5]
  =
  let
    case_6 =
      (BIF.erlang__apply__2
         [fun_3, (ErlangCons h1_0 (ErlangCons h2_2 ErlangEmptyList))])
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__rufmerge2_2__6 [h1_0, t1_1, fun_3, t2_4, m_5, h2_2])
      (ErlangAtom "false") ->
        (erlps__rufmerge2_1__5
           [t1_1, h2_2, fun_3, t2_4, (ErlangCons h1_0 m_5)])
      something_else -> (EXC.case_clause something_else)
erlps__rufmerge2_1__5 [(ErlangEmptyList), h2_0, _fun_1, t2_2,
                       m_3]
  =
  (BIF.lists__reverse__2 [t2_2, (ErlangCons h2_0 m_3)])
erlps__rufmerge2_1__5 [arg_8, arg_9, arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__rufmerge2_1__5 args =
  (EXC.badarity (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rufmerge2_2__6 :: ErlangFun
erlps__rufmerge2_2__6 [h1_0, t1_1, fun_2, (ErlangCons h2_3 t2_4),
                       m_5, h2m_6]
  =
  let
    case_7 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons h1_0 (ErlangCons h2_3 ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__rufmerge2_2__6
           [h1_0, t1_1, fun_2, t2_4, (ErlangCons h2m_6 m_5), h2_3])
      (ErlangAtom "false") ->
        let
          case_19 =
            (BIF.erlang__apply__2
               [fun_2, (ErlangCons h2m_6 (ErlangCons h1_0 ErlangEmptyList))])
        in
          case case_19 of
            (ErlangAtom "true") ->
              (erlps__rufmerge2_1__5
                 [t1_1, h2_3, fun_2, t2_4, (ErlangCons h1_0 m_5)])
            (ErlangAtom "false") ->
              (erlps__rufmerge2_1__5
                 [t1_1, h2_3, fun_2, t2_4,
                  (ErlangCons h1_0 (ErlangCons h2m_6 m_5))])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__rufmerge2_2__6 [h1_0, t1_1, fun_2, (ErlangEmptyList), m_3,
                       h2m_4]
  =
  let
    case_5 =
      (BIF.erlang__apply__2
         [fun_2, (ErlangCons h2m_4 (ErlangCons h1_0 ErlangEmptyList))])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (BIF.lists__reverse__2 [t1_1, (ErlangCons h1_0 m_3)])
      (ErlangAtom "false") ->
        (BIF.lists__reverse__2
           [t1_1, (ErlangCons h1_0 (ErlangCons h2m_4 m_3))])
      something_else -> (EXC.case_clause something_else)
erlps__rufmerge2_2__6 [arg_19, arg_20, arg_21, arg_22, arg_23,
                       arg_24]
  =
  (EXC.function_clause unit)
erlps__rufmerge2_2__6 args =
  (EXC.badarity (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)