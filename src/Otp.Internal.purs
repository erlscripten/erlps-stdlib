module Otp.Internal(erlps__obsolete__3,
                    erlps__obsolete_type__3) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__obsolete__3 :: ErlangFun
erlps__obsolete__3 [(ErlangAtom "auth"), (ErlangAtom "cookie"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use erlang:get_cookie/0 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "auth"), (ErlangAtom "cookie"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use erlang:set_cookie/2 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "auth"), (ErlangAtom "is_auth"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use net_adm:ping/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "calendar"),
                    (ErlangAtom "local_time_to_universal_time"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let
    tup_el_2 =
      toErl "use calendar:local_time_to_universal_time_dst/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "code"),
                    (ErlangAtom "is_module_native"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "HiPE has been removed"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "code"), (ErlangAtom "rehash"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let   
    tup_el_2 = toErl "the code path cache feature has been removed"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "crypto_dyn_iv_init"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let    tup_el_2 = toErl "see the documentation for details"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "crypto_dyn_iv_update"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let    tup_el_2 = toErl "see the documentation for details"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "rand_uniform"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use rand:uniform/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "disk_log"),
                    (ErlangAtom "accessible_logs"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let    tup_el_2 = toErl "use disk_log:all/0 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "disk_log"),
                    (ErlangAtom "lclose"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use disk_log:close/1 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "disk_log"),
                    (ErlangAtom "lclose"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let    tup_el_2 = toErl "use disk_log:close/1 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "erlang"), (ErlangAtom "now"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let
    tup_el_2 =
      toErl
        "see the \"Time and Time Correction in Erlang\" chapter of the ERTS User\'s Guide for more information"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erlang"), (ErlangAtom "phash"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use erlang:phash2/2 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "ftp"),
                    (ErlangAtom "start_service"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use ftp:open/2 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "ftp"),
                    (ErlangAtom "stop_service"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use ftp:close/1 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "http_uri"),
                    (ErlangAtom "decode"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use uri_string:unquote function instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "http_uri"),
                    (ErlangAtom "encode"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use uri_string:quote function instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd"),
                    (ErlangAtom "parse_query"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use uri_string:dissect_query/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "decode_hex"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use uri_string:unquote function instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "encode_hex"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use uri_string:quote function instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "flatlength"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use erlang:iolist_size/1 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "hexlist_to_integer"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let   
    tup_el_2 =
      toErl "use erlang:list_to_integer/2 with base 16 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "integer_to_hexlist"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let   
    tup_el_2 =
      toErl "use erlang:integer_to_list/2 with base 16 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "strip"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use string:trim/1 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "httpd_util"),
                    (ErlangAtom "suffix"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let   
    tup_el_2 =
      toErl "use filename:extension/1 and string:trim/2 instead"
  in let tup_el_3 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "broadcast"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let tup_el_2 = toErl "use rpc:eval_everywhere/3 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "call"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let tup_el_2 = toErl "use rpc:call/4 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "cast"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let tup_el_2 = toErl "use rpc:cast/4 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "ping"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use net_adm:ping/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "sleep"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use \'receive after T -> ok end\' instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "queue"), (ErlangAtom "lait"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use queue:liat/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "sys"), (ErlangAtom "get_debug"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let
    tup_el_2 =
      toErl
        "incorrectly documented and only for internal use. Can often be replaced with sys:get_log/1"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "wxCalendarCtrl"),
                    (ErlangAtom "enableYearChange"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "not available in wxWidgets-2.9 and later"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "wxCalendarCtrl"),
                    (ErlangAtom "enableYearChange"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "not available in wxWidgets-2.9 and later"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "zlib"), (ErlangAtom "adler32"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let    tup_el_2 = toErl "use erlang:adler32/1 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"), (ErlangAtom "adler32"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let    tup_el_2 = toErl "use erlang:adler32/2 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "adler32_combine"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let    tup_el_2 = toErl "use erlang:adler_combine/3 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"), (ErlangAtom "crc32"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let   
    tup_el_2 =
      toErl "use erlang:crc32/1 on the uncompressed data instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"), (ErlangAtom "crc32"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let    tup_el_2 = toErl "use erlang:crc32/1 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"), (ErlangAtom "crc32"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let    tup_el_2 = toErl "use erlang:crc32/2 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "crc32_combine"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let    tup_el_2 = toErl "use erlang:crc32_combine/3 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "getBufSize"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let   
    tup_el_2 =
      toErl "this function will be removed in a future release"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "inflateChunk"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let    tup_el_2 = toErl "use safeInflate/2 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "inflateChunk"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let    tup_el_2 = toErl "use safeInflate/2 instead"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "zlib"),
                    (ErlangAtom "setBufSize"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let   
    tup_el_2 =
      toErl "this function will be removed in a future release"
  in let tup_el_3 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_2, tup_el_3]
erlps__obsolete__3 [(ErlangAtom "core_lib"),
                    (ErlangAtom "get_anno"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use cerl:get_ann/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "core_lib"),
                    (ErlangAtom "is_literal"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use cerl:is_literal/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "core_lib"),
                    (ErlangAtom "is_literal_list"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use cerl:is_literal_list/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "core_lib"),
                    (ErlangAtom "literal_value"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use cerl:concrete/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "core_lib"),
                    (ErlangAtom "set_anno"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use cerl:set_ann/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "block_decrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let
    tup_el_2 =
      toErl
        "use crypto:crypto_one_time/4 or crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "block_decrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let
    tup_el_2 =
      toErl
        "use crypto:crypto_one_time/5, crypto:crypto_one_time_aead/6,7 or crypto:crypto_(dyn_iv)?_init + crypto:crypto_(dyn_iv)?_update + crypto:crypto_final instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "block_encrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let
    tup_el_2 =
      toErl
        "use crypto:crypto_one_time/4 or crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "block_encrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let
    tup_el_2 =
      toErl
        "use crypto:crypto_one_time/5, crypto:crypto_one_time_aead/6,7 or crypto:crypto_(dyn_iv)?_init + crypto:crypto_(dyn_iv)?_update + crypto:crypto_final instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"), (ErlangAtom "cmac"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let tup_el_2 = toErl "use crypto:mac/4 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"), (ErlangAtom "cmac"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let tup_el_2 = toErl "use crypto:macN/5 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"), (ErlangAtom "hmac"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let tup_el_2 = toErl "use crypto:mac/4 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"), (ErlangAtom "hmac"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 4) =
  let tup_el_2 = toErl "use crypto:macN/5 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "hmac_final"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use crypto:mac_final/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "hmac_final_n"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:mac_finalN/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "hmac_init"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:mac_init/3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "hmac_update"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:mac_update/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "poly1305"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:mac/3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "stream_decrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:crypto_update/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "stream_encrypt"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use crypto:crypto_update/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erl_lint"),
                    (ErlangAtom "modify_line"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use erl_parse:map_anno/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erl_parse"),
                    (ErlangAtom "get_attribute"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let
    tup_el_2 = toErl "erl_anno:{column,line,location,text}/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erl_parse"),
                    (ErlangAtom "get_attributes"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let
    tup_el_2 = toErl "erl_anno:{column,line,location,text}/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erl_parse"),
                    (ErlangAtom "set_line"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use erl_anno:set_line/2"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erl_scan"),
                    (ErlangAtom "set_attribute"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let tup_el_2 = toErl "use erl_anno:set_line/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erlang"),
                    (ErlangAtom "get_stacktrace"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let
    tup_el_2 =
      toErl
        "use the new try/catch syntax for retrieving the stack backtrace"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erlang"), (ErlangAtom "hash"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use erlang:phash2/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "filename"),
                    (ErlangAtom "safe_relative_path"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use filelib:safe_relative_path/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "http_uri"),
                    (ErlangAtom "parse"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use uri_string functions instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "http_uri"),
                    (ErlangAtom "parse"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use uri_string functions instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "http_uri"),
                    (ErlangAtom "scheme_defaults"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string functions instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "check_enum"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use lists:member/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "clean"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let
    tup_el_2 =
      toErl "use string:strip/1 instead or possibly the re module"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "custom_clean"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let
    tup_el_2 =
      toErl "use string:strip/1 instead or possibly the re module"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "is_directory"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use filelib:is_dir/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "is_file"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use filelib:is_file/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "httpd_conf"),
                    (ErlangAtom "make_integer"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use erlang:list_to_integer/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "net"), (ErlangAtom "relay"),
                    (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let
    tup_el_2 =
      toErl
        "use fun Relay(Pid) -> receive X -> Pid ! X end, Relay(Pid) instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "public_key"),
                    (ErlangAtom "ssh_decode"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use ssh_file:decode/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "public_key"),
                    (ErlangAtom "ssh_encode"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use ssh_file:encode/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "public_key"),
                    (ErlangAtom "ssh_hostkey_fingerprint"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use ssh:hostkey_fingerprint/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "public_key"),
                    (ErlangAtom "ssh_hostkey_fingerprint"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use ssh:hostkey_fingerprint/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "rpc"),
                    (ErlangAtom "safe_multi_server_call"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 2) =
  let tup_el_2 = toErl "use rpc:multi_server_call/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "rpc"),
                    (ErlangAtom "safe_multi_server_call"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 3) =
  let tup_el_2 = toErl "use rpc:multi_server_call/3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "ssl"),
                    (ErlangAtom "cipher_suites"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use cipher_suites/2,3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "ssl"),
                    (ErlangAtom "cipher_suites"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use cipher_suites/2,3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "ssl"),
                    (ErlangAtom "connection_info"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let
    tup_el_2 = toErl "use ssl:connection_information/[1,2] instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "ssl"),
                    (ErlangAtom "negotiated_next_protocol"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 1) =
  let tup_el_2 = toErl "use ssl:negotiated_protocol/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete__3 [(ErlangAtom "auth"),
                    (ErlangAtom "node_cookie"), _]
  =
  let
    tup_el_1 =
      toErl "use erlang:set_cookie/2 and net_adm:ping/1 instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "asn1ct"), (ErlangAtom "decode"),
                    _]
  =
  let tup_el_1 = toErl "use Mod:decode/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "asn1ct"), (ErlangAtom "encode"),
                    _]
  =
  let tup_el_1 = toErl "use Mod:encode/2 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "next_iv"), _]
  =
  let
    tup_el_1 =
      toErl
        "see the \'New and Old API\' chapter of the CRYPTO User\'s guide"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "crypto"),
                    (ErlangAtom "stream_init"), _]
  =
  let
    tup_el_1 =
      toErl
        "use crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 or crypto:crypto_one_time/4 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "erl_scan"),
                    (ErlangAtom "attributes_info"), _]
  =
  let
    tup_el_1 =
      toErl "use erl_anno:{column,line,location,text}/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "erl_scan"),
                    (ErlangAtom "token_info"), _]
  =
  let
    tup_el_1 =
      toErl
        "use erl_scan:{category,column,line,location,symbol,text}/1 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "filename"),
                    (ErlangAtom "find_src"), _]
  =
  let tup_el_1 = toErl "use filelib:find_source/1,3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "ssl"),
                    (ErlangAtom "ssl_accept"), _]
  =
  let tup_el_1 = toErl "use ssl_handshake/1,2,3 instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "ct_slave"), _, _] =
  let   
    tup_el_1 = toErl "use ?CT_PEER(), or the \'peer\' module instead"
  in let tup_el_2 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1, tup_el_2]
erlps__obsolete__3 [(ErlangAtom "erts_alloc_config"), _, _] =
  let   
    tup_el_1 =
      toErl
        "this module will be removed in OTP 26.0. See the documentation for details"
  in let tup_el_2 = toErl "OTP 26"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1, tup_el_2]
erlps__obsolete__3 [(ErlangAtom "gen_fsm"), _, _] =
  let tup_el_1 = toErl "use the \'gen_statem\' module instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "random"), _, _] =
  let tup_el_1 = toErl "use the \'rand\' module instead"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "slave"), _, _] =
  let    tup_el_1 = toErl "use the \'peer\' module instead"
  in let tup_el_2 = toErl "OTP 27"
  in ErlangTuple [ErlangAtom "deprecated", tup_el_1, tup_el_2]
erlps__obsolete__3 [(ErlangAtom "os_mon_mib"), _, _] =
  let tup_el_1 = toErl "this module was removed in OTP 22.0"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [(ErlangAtom "pg2"), _, _] =
  let
    tup_el_1 =
      toErl "this module was removed in OTP 24. Use \'pg\' instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_1]
erlps__obsolete__3 [_, _, _] = ErlangAtom "no"
erlps__obsolete__3 [arg_0, arg_1, arg_2] =
  EXC.function_clause unit
erlps__obsolete__3 args =
  EXC.badarity (ErlangFun 3 erlps__obsolete__3) args

erlps__obsolete_type__3 :: ErlangFun
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "hmac_state"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let
    tup_el_2 =
      toErl
        "see the \'New and Old API\' chapter of the CRYPTO User\'s guide"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "retired_cbc_cipher_aliases"),
                         (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "Use aes_*_cbc or des_ede3_cbc"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "retired_cfb_cipher_aliases"),
                         (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let
    tup_el_2 = toErl "Use aes_*_cfb8, aes_*_cfb128 or des_ede3_cfb"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "retired_ctr_cipher_aliases"),
                         (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "Use aes_*_ctr"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "retired_ecb_cipher_aliases"),
                         (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "Use aes_*_ecb"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "crypto"),
                         (ErlangAtom "stream_state"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let
    tup_el_2 =
      toErl
        "see the \'New and Old API\' chapter of the CRYPTO User\'s guide"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "erl_scan"),
                         (ErlangAtom "column"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use erl_anno:column() instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "erl_scan"),
                         (ErlangAtom "line"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use erl_anno:line() instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "erl_scan"),
                         (ErlangAtom "location"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use erl_anno:location() instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "default_scheme_port_number"),
                         (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "fragment"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "host"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "path"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "query"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "scheme"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [(ErlangAtom "http_uri"),
                         (ErlangAtom "user_info"), (ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  let tup_el_2 = toErl "use uri_string instead"
  in ErlangTuple [ErlangAtom "removed", tup_el_2]
erlps__obsolete_type__3 [_, _, _] = ErlangAtom "no"
erlps__obsolete_type__3 [arg_0, arg_1, arg_2] =
  EXC.function_clause unit
erlps__obsolete_type__3 args =
  EXC.badarity (ErlangFun 3 erlps__obsolete_type__3) args