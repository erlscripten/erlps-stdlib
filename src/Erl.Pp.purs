module Erl.Pp(erlps__form__1, erlps__form__2,
              erlps__attribute__1, erlps__attribute__2, erlps__function__1,
              erlps__function__2, erlps__guard__1, erlps__guard__2,
              erlps__exprs__1, erlps__exprs__2, erlps__exprs__3,
              erlps__expr__1, erlps__expr__2, erlps__expr__3,
              erlps__expr__4) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__form__1 :: ErlangFun
erlps__form__1 [thing_0] =
  (erlps__form__2 [thing_0, (ErlangAtom "none")])
erlps__form__1 [arg_3] = (EXC.function_clause unit)
erlps__form__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__form__2 :: ErlangFun
erlps__form__2 [thing_0, options_1] =
  let    state_3 = (erlps__state__1 [options_1])
  in let arg_6 = (erlps__options__1 [options_1])
  in let arg_4 = (erlps__lform__2 [thing_0, arg_6])
  in (erlps__frmt__2 [arg_4, state_3])
erlps__form__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__form__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__attribute__1 :: ErlangFun
erlps__attribute__1 [thing_0] =
  (erlps__attribute__2 [thing_0, (ErlangAtom "none")])
erlps__attribute__1 [arg_3] = (EXC.function_clause unit)
erlps__attribute__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__attribute__2 :: ErlangFun
erlps__attribute__2 [thing_0, options_1] =
  let    state_3 = (erlps__state__1 [options_1])
  in let arg_6 = (erlps__options__1 [options_1])
  in let arg_4 = (erlps__lattribute__2 [thing_0, arg_6])
  in (erlps__frmt__2 [arg_4, state_3])
erlps__attribute__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__attribute__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function__1 :: ErlangFun
erlps__function__1 [f_0] =
  (erlps__function__2 [f_0, (ErlangAtom "none")])
erlps__function__1 [arg_3] = (EXC.function_clause unit)
erlps__function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function__2 :: ErlangFun
erlps__function__2 [f_0, options_1] =
  let    arg_4 = (erlps__options__1 [options_1])
  in let arg_2 = (erlps__lfunction__2 [f_0, arg_4])
  in let arg_6 = (erlps__state__1 [options_1])
  in (erlps__frmt__2 [arg_2, arg_6])
erlps__function__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard__1 :: ErlangFun
erlps__guard__1 [gs_0] =
  (erlps__guard__2 [gs_0, (ErlangAtom "none")])
erlps__guard__1 [arg_3] = (EXC.function_clause unit)
erlps__guard__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard__2 :: ErlangFun
erlps__guard__2 [gs_0, options_1] =
  let    arg_4 = (erlps__options__1 [options_1])
  in let arg_2 = (erlps__lguard__2 [gs_0, arg_4])
  in let arg_6 = (erlps__state__1 [options_1])
  in (erlps__frmt__2 [arg_2, arg_6])
erlps__guard__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__guard__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__1 :: ErlangFun
erlps__exprs__1 [es_0] =
  (erlps__exprs__3
     [es_0, (ErlangInt (DBI.fromInt 0)), (ErlangAtom "none")])
erlps__exprs__1 [arg_4] = (EXC.function_clause unit)
erlps__exprs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__2 :: ErlangFun
erlps__exprs__2 [es_0, options_1] =
  (erlps__exprs__3 [es_0, (ErlangInt (DBI.fromInt 0)), options_1])
erlps__exprs__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__exprs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__3 :: ErlangFun
erlps__exprs__3 [es_0, i_1, options_2] =
  let    arg_12 = (erlps__options__1 [options_2])
  in let tup_el_10 = (erlps__lexprs__2 [es_0, arg_12])
  in let
    arg_3 =
      (ErlangTuple
         [(ErlangAtom "seq"), ErlangEmptyList, ErlangEmptyList,
          (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
          tup_el_10])
  in let arg_15 = (erlps__state__1 [options_2])
  in (erlps__frmt__3 [arg_3, i_1, arg_15])
erlps__exprs__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__exprs__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__1 :: ErlangFun
erlps__expr__1 [e_0] =
  let    arg_4 = (erlps__options__1 [(ErlangAtom "none")])
  in let
    arg_1 =
      (erlps__lexpr__3 [e_0, (ErlangInt (DBI.fromInt 0)), arg_4])
  in let arg_6 = (erlps__state__1 [(ErlangAtom "none")])
  in (erlps__frmt__2 [arg_1, arg_6])
erlps__expr__1 [arg_8] = (EXC.function_clause unit)
erlps__expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__2 :: ErlangFun
erlps__expr__2 [e_0, options_1] =
  let    arg_5 = (erlps__options__1 [options_1])
  in let
    arg_2 =
      (erlps__lexpr__3 [e_0, (ErlangInt (DBI.fromInt 0)), arg_5])
  in let arg_7 = (erlps__state__1 [options_1])
  in (erlps__frmt__2 [arg_2, arg_7])
erlps__expr__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__3 :: ErlangFun
erlps__expr__3 [e_0, i_1, options_2] =
  let    arg_6 = (erlps__options__1 [options_2])
  in let
    arg_3 =
      (erlps__lexpr__3 [e_0, (ErlangInt (DBI.fromInt 0)), arg_6])
  in let arg_9 = (erlps__state__1 [options_2])
  in (erlps__frmt__3 [arg_3, i_1, arg_9])
erlps__expr__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__expr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__4 :: ErlangFun
erlps__expr__4 [e_0, i_1, p_2, options_3] =
  let    arg_7 = (erlps__options__1 [options_3])
  in let arg_4 = (erlps__lexpr__3 [e_0, p_2, arg_7])
  in let arg_10 = (erlps__state__1 [options_3])
  in (erlps__frmt__3 [arg_4, i_1, arg_10])
erlps__expr__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__expr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__options__1 :: ErlangFun
erlps__options__1 [options_0] | (isEList options_0) =
  let   
    hook_4 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "hook"), options_0, (ErlangAtom "none")])
  in let encoding_6 = (erlps__encoding__1 [options_0])
  in
    (ErlangTuple
       [(ErlangAtom "options"), hook_4, encoding_6, options_0])
erlps__options__1 [hook_0] =
  let tup_el_3 = (erlps__encoding__1 [ErlangEmptyList])
  in
    (ErlangTuple [(ErlangAtom "options"), hook_0, tup_el_3, hook_0])
erlps__options__1 [arg_6] = (EXC.function_clause unit)
erlps__options__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__state__1 :: ErlangFun
erlps__state__1 [options_0] | (isEList options_0) =
  let   
    quote_3 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_bool__2"
         [(ErlangAtom "quote_singleton_atom_types"), options_0])
  in let case_4 = (erlps__encoding__1 [options_0])
  in let
    state_8 =
      case case_4 of
        (ErlangAtom "latin1") -> (erlps__latin1_state__1 [quote_3])
        (ErlangAtom "unicode") -> (erlps__unicode_state__1 [quote_3])
        something_else -> (EXC.case_clause something_else)
  in let
    indent_12 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "indent"), options_0, (ErlangInt (DBI.fromInt 4))])
  in let
    linewidth_16 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "linewidth"), options_0,
          (ErlangInt (DBI.fromInt 72))])
  in
    case state_8 of
      (ErlangTuple [(ErlangAtom "pp"), value_fun_20,
                    singleton_atom_type_fun_21, string_fun_22, char_fun_23,
                    linewidth_24, indent_25]) ->
        (ErlangTuple
           [(ErlangAtom "pp"), value_fun_20, singleton_atom_type_fun_21,
            string_fun_22, char_fun_23, linewidth_16, indent_12])
      _ -> (EXC.badrecord (ErlangAtom "pp"))
erlps__state__1 [_hook_0] =
  (erlps__latin1_state__1 [(ErlangAtom "false")])
erlps__state__1 [arg_2] = (EXC.function_clause unit)
erlps__state__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__latin1_state__1 :: ErlangFun
erlps__latin1_state__1 [quote_0] =
  let   
    head_1 =
      (ErlangTuple [(ErlangAtom "encoding"), (ErlangAtom "latin1")])
  in let
    valuefun_11 =
      (ErlangFun 1
         let
           lambda_6 [v_8] =
             (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__2"
                [v_8, (ErlangCons head_1 ErlangEmptyList)])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    singletonfun_19 =
      case quote_0 of
        (ErlangAtom "true") ->
          (ErlangFun 1
             let
               lambda_13 [a_15] =
                 let arg_16 = (BIF.erlang__atom_to_list__1 [a_15])
                 in
                   (BIF.do_remote_fun_call "Io.Lib"
                      "erlps__write_string_as_latin1__2"
                      [arg_16, (ErlangInt (DBI.fromInt 39))])
               lambda_13 [arg_14] = (EXC.function_clause unit)
               lambda_13 args = (EXC.badarity (ErlangFun 1 lambda_13) args)
             in lambda_13)
        (ErlangAtom "false") -> valuefun_11
        something_else -> (EXC.case_clause something_else)
  in let
    tup_el_23 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "io_lib"), (ErlangAtom "write_string_as_latin1"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_27 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "io_lib"), (ErlangAtom "write_char_as_latin1"),
          (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "pp"), valuefun_11, singletonfun_19, tup_el_23,
        tup_el_27, (ErlangInt (DBI.fromInt 72)),
        (ErlangInt (DBI.fromInt 4))])
erlps__latin1_state__1 [arg_33] = (EXC.function_clause unit)
erlps__latin1_state__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unicode_state__1 :: ErlangFun
erlps__unicode_state__1 [quote_0] =
  let   
    head_1 =
      (ErlangTuple [(ErlangAtom "encoding"), (ErlangAtom "unicode")])
  in let
    valuefun_11 =
      (ErlangFun 1
         let
           lambda_6 [v_8] =
             (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__2"
                [v_8, (ErlangCons head_1 ErlangEmptyList)])
           lambda_6 [arg_7] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
         in lambda_6)
  in let
    singletonfun_19 =
      case quote_0 of
        (ErlangAtom "true") ->
          (ErlangFun 1
             let
               lambda_13 [a_15] =
                 let arg_16 = (BIF.erlang__atom_to_list__1 [a_15])
                 in
                   (BIF.do_remote_fun_call "Io.Lib" "erlps__write_string__2"
                      [arg_16, (ErlangInt (DBI.fromInt 39))])
               lambda_13 [arg_14] = (EXC.function_clause unit)
               lambda_13 args = (EXC.badarity (ErlangFun 1 lambda_13) args)
             in lambda_13)
        (ErlangAtom "false") -> valuefun_11
        something_else -> (EXC.case_clause something_else)
  in let
    tup_el_23 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "io_lib"), (ErlangAtom "write_string"),
          (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_27 =
      (BIF.erlang__make_fun__3
         [(ErlangAtom "io_lib"), (ErlangAtom "write_char"),
          (ErlangInt (DBI.fromInt 1))])
  in
    (ErlangTuple
       [(ErlangAtom "pp"), valuefun_11, singletonfun_19, tup_el_23,
        tup_el_27, (ErlangInt (DBI.fromInt 72)),
        (ErlangInt (DBI.fromInt 4))])
erlps__unicode_state__1 [arg_33] = (EXC.function_clause unit)
erlps__unicode_state__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__encoding__1 :: ErlangFun
erlps__encoding__1 [options_0] =
  let   
    arg_4 =
      (BIF.do_remote_fun_call "Epp" "erlps__default_encoding__0" [])
  in let
    case_1 =
      (BIF.do_remote_fun_call "Proplists" "erlps__get_value__3"
         [(ErlangAtom "encoding"), options_0, arg_4])
  in
    case case_1 of
      (ErlangAtom "latin1") -> (ErlangAtom "latin1")
      (ErlangAtom "utf8") -> (ErlangAtom "unicode")
      (ErlangAtom "unicode") -> (ErlangAtom "unicode")
      something_else -> (EXC.case_clause something_else)
erlps__encoding__1 [arg_5] = (EXC.function_clause unit)
erlps__encoding__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lform__2 :: ErlangFun
erlps__lform__2 [(ErlangTuple [(ErlangAtom "attribute"), line_0,
                               name_1, arg_2]),
                 opts_3]
  =
  let
    arg_4 =
      (ErlangTuple [(ErlangAtom "attribute"), line_0, name_1, arg_2])
  in (erlps__lattribute__2 [arg_4, opts_3])
erlps__lform__2 [(ErlangTuple [(ErlangAtom "function"), line_0,
                               name_1, arity_2, clauses_3]),
                 opts_4]
  =
  let
    arg_5 =
      (ErlangTuple
         [(ErlangAtom "function"), line_0, name_1, arity_2, clauses_3])
  in (erlps__lfunction__2 [arg_5, opts_4])
erlps__lform__2 [e_0@(ErlangTuple [(ErlangAtom "error"), _]),
                 opts_1]
  =
  (erlps__message__2 [e_0, opts_1])
erlps__lform__2 [w_0@(ErlangTuple [(ErlangAtom "warning"), _]),
                 opts_1]
  =
  (erlps__message__2 [w_0, opts_1])
erlps__lform__2 [(ErlangTuple [(ErlangAtom "eof"), _line_0]),
                 _opts_1]
  =
  (ErlangInt (DBI.fromInt 10))
erlps__lform__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__lform__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__message__2 :: ErlangFun
erlps__message__2 [m_0,
                   (ErlangTuple [(ErlangAtom "options"), _, encoding_1, _])]
  =
  let   
    f_3 =
      case encoding_1 of
        (ErlangAtom "latin1") -> (make_string "~p\n")
        (ErlangAtom "unicode") -> (make_string "~tp\n")
        something_else -> (EXC.case_clause something_else)
  in let
    arg_4 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [f_3, (ErlangCons m_0 ErlangEmptyList)])
  in (erlps__leaf__1 [arg_4])
erlps__message__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__message__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lattribute__2 :: ErlangFun
erlps__lattribute__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                    _line_0, (ErlangAtom "type"), type_1]),
                      opts_2]
  =
  let   
    head_3 =
      (erlps__typeattr__3 [(ErlangAtom "type"), type_1, opts_2])
  in let arg_9 = (make_string ".\n")
  in let head_8 = (erlps__leaf__1 [arg_9])
  in (ErlangCons head_3 (ErlangCons head_8 ErlangEmptyList))
erlps__lattribute__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                    _line_0, (ErlangAtom "opaque"), type_1]),
                      opts_2]
  =
  let   
    head_3 =
      (erlps__typeattr__3 [(ErlangAtom "opaque"), type_1, opts_2])
  in let arg_9 = (make_string ".\n")
  in let head_8 = (erlps__leaf__1 [arg_9])
  in (ErlangCons head_3 (ErlangCons head_8 ErlangEmptyList))
erlps__lattribute__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                    _line_0, (ErlangAtom "spec"), arg_1]),
                      _opts_2]
  =
  let    head_3 = (erlps__specattr__2 [(ErlangAtom "spec"), arg_1])
  in let arg_8 = (make_string ".\n")
  in let head_7 = (erlps__leaf__1 [arg_8])
  in (ErlangCons head_3 (ErlangCons head_7 ErlangEmptyList))
erlps__lattribute__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                    _line_0, (ErlangAtom "callback"), arg_1]),
                      _opts_2]
  =
  let   
    head_3 = (erlps__specattr__2 [(ErlangAtom "callback"), arg_1])
  in let arg_8 = (make_string ".\n")
  in let head_7 = (erlps__leaf__1 [arg_8])
  in (ErlangCons head_3 (ErlangCons head_7 ErlangEmptyList))
erlps__lattribute__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                    _line_0, name_1, arg_2]),
                      opts_3]
  =
  let    head_4 = (erlps__lattribute__3 [name_1, arg_2, opts_3])
  in let arg_10 = (make_string ".\n")
  in let head_9 = (erlps__leaf__1 [arg_10])
  in (ErlangCons head_4 (ErlangCons head_9 ErlangEmptyList))
erlps__lattribute__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__lattribute__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lattribute__3 :: ErlangFun
erlps__lattribute__3 [(ErlangAtom "module"),
                      (ErlangTuple [m_0, vs_1]), _opts_2]
  =
  let    a_3 = (erlps__a0__0 [])
  in let tup_el_9 = (erlps__pname__1 [m_0])
  in let head_6 = (ErlangTuple [(ErlangAtom "var"), a_3, tup_el_9])
  in let
    arg_13 =
      (ErlangFun 2
         let
           lambda_14 [v_17, c_18] =
             let tup_el_21 = (ErlangTuple [(ErlangAtom "var"), a_3, v_17])
             in (ErlangTuple [(ErlangAtom "cons"), a_3, tup_el_21, c_18])
           lambda_14 [arg_15, arg_16] = (EXC.function_clause unit)
           lambda_14 args = (EXC.badarity (ErlangFun 2 lambda_14) args)
         in lambda_14)
  in let arg_26 = (ErlangTuple [(ErlangAtom "nil"), a_3])
  in let
    head_12 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
         [arg_13, arg_26, vs_1])
  in
    (erlps__attr__2
       [(ErlangAtom "module"),
        (ErlangCons head_6 (ErlangCons head_12 ErlangEmptyList))])
erlps__lattribute__3 [(ErlangAtom "module"), m_0, _opts_1] =
  let    tup_el_6 = (erlps__a0__0 [])
  in let tup_el_7 = (erlps__pname__1 [m_0])
  in let
    head_4 = (ErlangTuple [(ErlangAtom "var"), tup_el_6, tup_el_7])
  in
    (erlps__attr__2
       [(ErlangAtom "module"), (ErlangCons head_4 ErlangEmptyList)])
erlps__lattribute__3 [(ErlangAtom "export"), falist_0, _opts_1] =
  let arg_3 = (erlps__falist__1 [falist_0])
  in (erlps__attrib__2 [(ErlangAtom "export"), arg_3])
erlps__lattribute__3 [(ErlangAtom "import"), name_0, _opts_1]
  | (isEList name_0) =
  let    tup_el_6 = (erlps__a0__0 [])
  in let tup_el_7 = (erlps__pname__1 [name_0])
  in let
    head_4 = (ErlangTuple [(ErlangAtom "var"), tup_el_6, tup_el_7])
  in
    (erlps__attr__2
       [(ErlangAtom "import"), (ErlangCons head_4 ErlangEmptyList)])
erlps__lattribute__3 [(ErlangAtom "import"),
                      (ErlangTuple [from_0, falist_1]), _opts_2]
  =
  let    arg_6 = (erlps__pname__1 [from_0])
  in let head_5 = (erlps__leaf__1 [arg_6])
  in let head_9 = (erlps__falist__1 [falist_1])
  in
    (erlps__attrib__2
       [(ErlangAtom "import"),
        (ErlangCons head_5 (ErlangCons head_9 ErlangEmptyList))])
erlps__lattribute__3 [(ErlangAtom "export_type"), talist_0,
                      _opts_1]
  =
  let arg_3 = (erlps__falist__1 [talist_0])
  in (erlps__attrib__2 [(ErlangAtom "export_type"), arg_3])
erlps__lattribute__3 [(ErlangAtom "optional_callbacks"),
                      falist_0, opts_1]
  =
  (EXC.tryCatch
     (\ _ ->
        let arg_3 = (erlps__falist__1 [falist_0])
        in (erlps__attrib__2 [(ErlangAtom "optional_callbacks"), arg_3]))
     (\ ex_6 ->
        case ex_6 of
          (ErlangTuple [_, _, _]) ->
            let head_9 = (erlps__abstract__2 [falist_0, opts_1])
            in
              (erlps__attr__2
                 [(ErlangAtom "optional_callbacks"),
                  (ErlangCons head_9 ErlangEmptyList)])
          ex_6 -> (EXC.raise ex_6)))
erlps__lattribute__3 [(ErlangAtom "file"),
                      (ErlangTuple [name_0, line_1]), _opts_2]
  =
  let    tup_el_7 = (erlps__a0__0 [])
  in let
    head_5 = (ErlangTuple [(ErlangAtom "string"), tup_el_7, name_0])
  in let tup_el_12 = (erlps__a0__0 [])
  in let
    head_10 =
      (ErlangTuple [(ErlangAtom "integer"), tup_el_12, line_1])
  in
    (erlps__attr__2
       [(ErlangAtom "file"),
        (ErlangCons head_5 (ErlangCons head_10 ErlangEmptyList))])
erlps__lattribute__3 [(ErlangAtom "record"),
                      (ErlangTuple [name_0, is_1]), opts_2]
  =
  let    arg_4 = (make_string "-record(")
  in let head_3 = (erlps__leaf__1 [arg_4])
  in let head_6 = (ErlangTuple [(ErlangAtom "atom"), name_0])
  in let tup_el_16 = (erlps__record_fields__2 [is_1, opts_2])
  in let
    head_13 =
      (ErlangTuple
         [(ErlangAtom "first"),
          (ErlangCons head_3
             (ErlangCons head_6
                (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList))),
          tup_el_16])
  in
    (ErlangCons head_13
       (ErlangCons (ErlangInt (DBI.fromInt 41)) ErlangEmptyList))
erlps__lattribute__3 [name_0, arg_1, options_2] =
  let head_5 = (erlps__abstract__2 [arg_1, options_2])
  in (erlps__attr__2 [name_0, (ErlangCons head_5 ErlangEmptyList)])
erlps__lattribute__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__lattribute__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__abstract__2 :: ErlangFun
erlps__abstract__2 [arg_0,
                    (ErlangTuple [(ErlangAtom "options"), _, encoding_1, _])]
  =
  let head_4 = (ErlangTuple [(ErlangAtom "encoding"), encoding_1])
  in
    (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__2"
       [arg_0, (ErlangCons head_4 ErlangEmptyList)])
erlps__abstract__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__abstract__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__typeattr__3 :: ErlangFun
erlps__typeattr__3 [tag_0,
                    (ErlangTuple [typename_1, type_2, args_3]), _opts_4]
  =
  let    lop_8 = (make_string "-")
  in let lop_10 = (BIF.erlang__atom_to_list__1 [tag_0])
  in let rop_12 = (make_string " ")
  in let rop_9 = (BIF.erlang__op_append [lop_10, rop_12])
  in let arg_7 = (BIF.erlang__op_append [lop_8, rop_9])
  in let tup_el_6 = (erlps__leaf__1 [arg_7])
  in let tup_el_17 = (erlps__a0__0 [])
  in let
    arg_15 =
      (ErlangTuple [(ErlangAtom "atom"), tup_el_17, typename_1])
  in let arg_21 = (erlps__options__1 [(ErlangAtom "none")])
  in let
    arg_14 =
      (erlps__call__4
         [arg_15, args_3, (ErlangInt (DBI.fromInt 0)), arg_21])
  in let tup_el_13 = (erlps__typed__2 [arg_14, type_2])
  in (ErlangTuple [(ErlangAtom "first"), tup_el_6, tup_el_13])
erlps__typeattr__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__typeattr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ltype__1 :: ErlangFun
erlps__ltype__1 [t_0] =
  (erlps__ltype__2 [t_0, (ErlangInt (DBI.fromInt 0))])
erlps__ltype__1 [arg_3] = (EXC.function_clause unit)
erlps__ltype__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ltype__2 :: ErlangFun
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "ann_type"), _line_0,
                               (ErlangCons v_1 (ErlangCons t_2 (ErlangEmptyList)))]),
                 prec_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__type_inop_prec__1"
         [(ErlangAtom "::")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, p_6, r_7]) ->
        let    vl_11 = (erlps__ltype__2 [v_1, l_5])
        in let tr_14 = (erlps__ltype__2 [t_2, r_7])
        in let
          head_17 =
            (ErlangTuple
               [(ErlangAtom "cstep"),
                (ErlangCons vl_11
                   (ErlangCons (ErlangAtom " ::") ErlangEmptyList)),
                tr_14])
        in let
          el_26 =
            (ErlangTuple
               [(ErlangAtom "list"), (ErlangCons head_17 ErlangEmptyList)])
        in (erlps__maybe_paren__3 [p_6, prec_3, el_26])
      _ -> (EXC.badmatch match_expr_8)
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "paren_type"),
                               _line_0, (ErlangCons t_1 (ErlangEmptyList))]),
                 p_2]
  =
  (erlps__ltype__2 [t_1, p_2])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "union"), ts_1]),
                 prec_2]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__type_inop_prec__1"
         [(ErlangAtom "|")])
  in
    case match_expr_7 of
      (ErlangTuple [_l_4, p_5, r_6]) ->
        let    tup_el_14 = (erlps__ltypes__2 [ts_1, r_6])
        in let
          e_17 =
            (ErlangTuple
               [(ErlangAtom "seq"), ErlangEmptyList, ErlangEmptyList,
                (ErlangCons (ErlangAtom " |") ErlangEmptyList), tup_el_14])
        in (erlps__maybe_paren__3 [p_5, prec_2, e_17])
      _ -> (EXC.badmatch match_expr_7)
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "list"),
                               (ErlangCons t_1 (ErlangEmptyList))]),
                 _]
  =
  let head_7 = (erlps__ltype__1 [t_1])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
        (ErlangInt (DBI.fromInt 93)), (ErlangInt (DBI.fromInt 44)),
        (ErlangCons head_7 ErlangEmptyList)])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "nonempty_list"),
                               (ErlangCons t_1 (ErlangEmptyList))]),
                 _]
  =
  let    head_9 = (erlps__ltype__1 [t_1])
  in let arg_13 = (make_string "...")
  in let head_12 = (erlps__leaf__1 [arg_13])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
        (ErlangInt (DBI.fromInt 93)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        (ErlangCons head_9 (ErlangCons head_12 ErlangEmptyList))])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), line_0,
                               (ErlangAtom "nil"), (ErlangEmptyList)]),
                 _]
  =
  let    arg_1 = (ErlangTuple [(ErlangAtom "nil"), line_0])
  in let arg_4 = (erlps__options__1 [(ErlangAtom "none")])
  in (erlps__lexpr__2 [arg_1, arg_4])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), line_0,
                               (ErlangAtom "map"), (ErlangAtom "any")]),
                 _]
  =
  let
    arg_1 =
      (ErlangTuple [(ErlangAtom "atom"), line_0, (ErlangAtom "map")])
  in (erlps__simple_type__2 [arg_1, ErlangEmptyList])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "map"), pairs_1]),
                 prec_2]
  =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__type_preop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_6 of
      (ErlangTuple [p_4, _r_5]) ->
        let e_8 = (erlps__map_type__1 [pairs_1])
        in (erlps__maybe_paren__3 [p_4, prec_2, e_8])
      _ -> (EXC.badmatch match_expr_6)
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), line_0,
                               (ErlangAtom "tuple"), (ErlangAtom "any")]),
                 _]
  =
  let
    arg_1 =
      (ErlangTuple [(ErlangAtom "atom"), line_0, (ErlangAtom "tuple")])
  in (erlps__simple_type__2 [arg_1, ErlangEmptyList])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "tuple"), ts_1]),
                 _]
  =
  let arg_3 = (ErlangFun 2 erlps__ltype__2)
  in (erlps__tuple_type__2 [ts_1, arg_3])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "record"),
                               (ErlangCons (ErlangTuple [(ErlangAtom "atom"), _,
                                                         n_1]) fs_2)]),
                 prec_3]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__type_preop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_7 of
      (ErlangTuple [p_5, _r_6]) ->
        let e_10 = (erlps__record_type__2 [n_1, fs_2])
        in (erlps__maybe_paren__3 [p_5, prec_3, e_10])
      _ -> (EXC.badmatch match_expr_7)
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "range"),
                               es_3@(ErlangCons _i1_1 (ErlangCons _i2_2 (ErlangEmptyList)))]),
                 prec_4]
  =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__type_inop_prec__1"
         [(ErlangAtom "..")])
  in
    case match_expr_9 of
      (ErlangTuple [_l_6, p_7, r_8]) ->
        let   
          f_18 =
            (ErlangFun 2
               let
                 lambda_10 [e_13, opts_14] =
                   (erlps__lexpr__3 [e_13, r_8, opts_14])
                 lambda_10 [arg_11, arg_12] = (EXC.function_clause unit)
                 lambda_10 args = (EXC.badarity (ErlangFun 2 lambda_10) args)
               in lambda_10)
        in let arg_22 = (erlps__options__1 [(ErlangAtom "none")])
        in let
          e_24 =
            (erlps__expr_list__4 [es_3, (ErlangAtom ".."), f_18, arg_22])
        in (erlps__maybe_paren__3 [p_7, prec_4, e_24])
      _ -> (EXC.badmatch match_expr_9)
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "binary"),
                               (ErlangCons i1_1 (ErlangCons i2_2 (ErlangEmptyList)))]),
                 _]
  =
  (erlps__binary_type__2 [i1_1, i2_2])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                               (ErlangAtom "fun"), (ErlangEmptyList)]),
                 _]
  =
  let arg_1 = (make_string "fun()")
  in (erlps__leaf__1 [arg_1])
erlps__ltype__2 [funtype_0@(ErlangTuple [(ErlangAtom "type"), _,
                                         (ErlangAtom "fun"),
                                         (ErlangCons (ErlangTuple [(ErlangAtom "type"),
                                                                   _,
                                                                   (ErlangAtom "any")]) (ErlangCons _ (ErlangEmptyList)))]),
                 _]
  =
  let
    head_1 =
      (erlps__fun_type__2
         [(ErlangCons (ErlangAtom "fun")
             (ErlangCons (ErlangInt (DBI.fromInt 40)) ErlangEmptyList)),
          funtype_0])
  in
    (ErlangCons head_1
       (ErlangCons (ErlangInt (DBI.fromInt 41)) ErlangEmptyList))
erlps__ltype__2 [funtype_1@(ErlangTuple [(ErlangAtom "type"),
                                         _line_0, (ErlangAtom "fun"),
                                         (ErlangCons (ErlangTuple [(ErlangAtom "type"),
                                                                   _,
                                                                   (ErlangAtom "product"),
                                                                   _]) (ErlangCons _ (ErlangEmptyList)))]),
                 _]
  =
  let
    head_2 =
      (erlps__fun_type__2
         [(ErlangCons (ErlangAtom "fun")
             (ErlangCons (ErlangInt (DBI.fromInt 40)) ErlangEmptyList)),
          funtype_1])
  in
    (ErlangCons head_2
       (ErlangCons (ErlangInt (DBI.fromInt 41)) ErlangEmptyList))
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "type"), line_0, t_1,
                               ts_2]),
                 _]
  =
  let arg_3 = (ErlangTuple [(ErlangAtom "atom"), line_0, t_1])
  in (erlps__simple_type__2 [arg_3, ts_2])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "user_type"), line_0,
                               t_1, ts_2]),
                 _]
  =
  let arg_3 = (ErlangTuple [(ErlangAtom "atom"), line_0, t_1])
  in (erlps__simple_type__2 [arg_3, ts_2])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "remote_type"),
                               line_0,
                               (ErlangCons m_1 (ErlangCons f_2 (ErlangCons ts_3 (ErlangEmptyList))))]),
                 _]
  =
  let
    arg_4 = (ErlangTuple [(ErlangAtom "remote"), line_0, m_1, f_2])
  in (erlps__simple_type__2 [arg_4, ts_3])
erlps__ltype__2 [(ErlangTuple [(ErlangAtom "atom"), _, t_0]), _]
  =
  (ErlangTuple [(ErlangAtom "singleton_atom_type"), t_0])
erlps__ltype__2 [e_0, p_1] =
  let arg_4 = (erlps__options__1 [(ErlangAtom "none")])
  in (erlps__lexpr__3 [e_0, p_1, arg_4])
erlps__ltype__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__ltype__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binary_type__2 :: ErlangFun
erlps__binary_type__2 [i1_0, i2_1] =
  let   
    lop_2 =
      (flmap
         (\ lc_7 ->
            case lc_7 of
              (ErlangTuple [(ErlangAtom "integer"), _,
                            (ErlangInt num_6)]) | ((ErlangInt num_6) ==
                                                     (ErlangInt
                                                        (DBI.fromInt 0))) ->
                (ErlangCons ErlangEmptyList ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons i1_0 ErlangEmptyList))
  in let b_10 = (BIF.erlang__op_exactEq [lop_2, ErlangEmptyList])
  in let
    lop_11 =
      (flmap
         (\ lc_16 ->
            case lc_16 of
              (ErlangTuple [(ErlangAtom "integer"), _,
                            (ErlangInt num_15)]) | ((ErlangInt num_15) ==
                                                      (ErlangInt
                                                         (DBI.fromInt 0))) ->
                (ErlangCons ErlangEmptyList ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons i2_1 ErlangEmptyList))
  in let u_19 = (BIF.erlang__op_exactEq [lop_11, ErlangEmptyList])
  in let
    p_20 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__max_prec__0" [])
  in let
    e1_32 =
      case b_10 of
        (ErlangAtom "true") ->
          let    arg_24 = (make_string "_:")
          in let head_23 = (erlps__leaf__1 [arg_24])
          in let arg_29 = (erlps__options__1 [(ErlangAtom "none")])
          in let head_26 = (erlps__lexpr__3 [i1_0, p_20, arg_29])
          in
            (ErlangCons
               (ErlangCons head_23 (ErlangCons head_26 ErlangEmptyList))
               ErlangEmptyList)
        _ -> ErlangEmptyList
  in let
    e2_44 =
      case u_19 of
        (ErlangAtom "true") ->
          let    arg_36 = (make_string "_:_*")
          in let head_35 = (erlps__leaf__1 [arg_36])
          in let arg_41 = (erlps__options__1 [(ErlangAtom "none")])
          in let head_38 = (erlps__lexpr__3 [i2_1, p_20, arg_41])
          in
            (ErlangCons
               (ErlangCons head_35 (ErlangCons head_38 ErlangEmptyList))
               ErlangEmptyList)
        _ -> ErlangEmptyList
  in let case_45 = (BIF.erlang__op_append [e1_32, e2_44])
  in
    case case_45 of
      (ErlangEmptyList) ->
        let arg_48 = (make_string "<<>>")
        in (erlps__leaf__1 [arg_48])
      es_49 ->
        (ErlangTuple
           [(ErlangAtom "seq"), (ErlangAtom "<<"), (ErlangAtom ">>"),
            (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
            es_49])
      something_else -> (EXC.case_clause something_else)
erlps__binary_type__2 [arg_57, arg_58] =
  (EXC.function_clause unit)
erlps__binary_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_type__1 :: ErlangFun
erlps__map_type__1 [fs_0] =
  let tup_el_5 = (erlps__map_pair_types__1 [fs_0])
  in
    (ErlangTuple
       [(ErlangAtom "first"),
        (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList),
        tup_el_5])
erlps__map_type__1 [arg_7] = (EXC.function_clause unit)
erlps__map_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_pair_types__1 :: ErlangFun
erlps__map_pair_types__1 [fs_0] =
  let arg_2 = (ErlangFun 2 erlps__map_pair_type__2)
  in (erlps__tuple_type__2 [fs_0, arg_2])
erlps__map_pair_types__1 [arg_3] = (EXC.function_clause unit)
erlps__map_pair_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_pair_type__2 :: ErlangFun
erlps__map_pair_type__2 [(ErlangTuple [(ErlangAtom "type"),
                                       _line_0, (ErlangAtom "map_field_assoc"),
                                       (ErlangCons ktype_1 (ErlangCons vtype_2 (ErlangEmptyList)))]),
                         prec_3]
  =
  let    head_9 = (erlps__ltype__2 [ktype_1, prec_3])
  in let arg_14 = (make_string " =>")
  in let head_13 = (erlps__leaf__1 [arg_14])
  in let tup_el_16 = (erlps__ltype__2 [vtype_2, prec_3])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "cstep"),
          (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)),
          tup_el_16])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_6 ErlangEmptyList)])
erlps__map_pair_type__2 [(ErlangTuple [(ErlangAtom "type"),
                                       _line_0, (ErlangAtom "map_field_exact"),
                                       (ErlangCons ktype_1 (ErlangCons vtype_2 (ErlangEmptyList)))]),
                         prec_3]
  =
  let    head_9 = (erlps__ltype__2 [ktype_1, prec_3])
  in let arg_14 = (make_string " :=")
  in let head_13 = (erlps__leaf__1 [arg_14])
  in let tup_el_16 = (erlps__ltype__2 [vtype_2, prec_3])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "cstep"),
          (ErlangCons head_9 (ErlangCons head_13 ErlangEmptyList)),
          tup_el_16])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_6 ErlangEmptyList)])
erlps__map_pair_type__2 [arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__map_pair_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_type__2 :: ErlangFun
erlps__record_type__2 [name_0, fields_1] =
  let    head_4 = (erlps__record_name__1 [name_0])
  in let tup_el_7 = (erlps__field_types__1 [fields_1])
  in
    (ErlangTuple
       [(ErlangAtom "first"), (ErlangCons head_4 ErlangEmptyList),
        tup_el_7])
erlps__record_type__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__record_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_types__1 :: ErlangFun
erlps__field_types__1 [fs_0] =
  let arg_2 = (ErlangFun 2 erlps__field_type__2)
  in (erlps__tuple_type__2 [fs_0, arg_2])
erlps__field_types__1 [arg_3] = (EXC.function_clause unit)
erlps__field_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_type__2 :: ErlangFun
erlps__field_type__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                    (ErlangAtom "field_type"),
                                    (ErlangCons name_1 (ErlangCons type_2 (ErlangEmptyList)))]),
                      _prec_3]
  =
  let    arg_6 = (erlps__options__1 [(ErlangAtom "none")])
  in let arg_4 = (erlps__lexpr__2 [name_1, arg_6])
  in (erlps__typed__2 [arg_4, type_2])
erlps__field_type__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__field_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__typed__2 :: ErlangFun
erlps__typed__2 [b_0, type_1] =
  let    tup_el_11 = (erlps__ltype__1 [type_1])
  in let
    head_4 =
      (ErlangTuple
         [(ErlangAtom "cstep"),
          (ErlangCons b_0 (ErlangCons (ErlangAtom " ::") ErlangEmptyList)),
          tup_el_11])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_4 ErlangEmptyList)])
erlps__typed__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__typed__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple_type__2 :: ErlangFun
erlps__tuple_type__2 [(ErlangEmptyList), _] =
  let arg_0 = (make_string "{}")
  in (erlps__leaf__1 [arg_0])
erlps__tuple_type__2 [ts_0, f_1] =
  let
    tup_el_8 =
      (erlps__ltypes__3 [ts_0, f_1, (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 123)),
        (ErlangInt (DBI.fromInt 125)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_8])
erlps__tuple_type__2 [arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__tuple_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__specattr__2 :: ErlangFun
erlps__specattr__2 [speckind_0,
                    (ErlangTuple [funcspec_1, typespecs_2])]
  =
  let   
    func_21 =
      case funcspec_1 of
        (ErlangTuple [f_4, _a_5]) ->
          (ErlangTuple [(ErlangAtom "atom"), f_4])
        (ErlangTuple [m_8, f_9, _a_10]) ->
          let    head_11 = (ErlangTuple [(ErlangAtom "atom"), m_8])
          in let head_17 = (ErlangTuple [(ErlangAtom "atom"), f_9])
          in
            (ErlangCons head_11
               (ErlangCons (ErlangInt (DBI.fromInt 58))
                  (ErlangCons head_17 ErlangEmptyList)))
        something_else -> (EXC.case_clause something_else)
  in let head_26 = (make_string "-")
  in let head_30 = (make_string " ")
  in let
    arg_24 =
      (BIF.do_remote_fun_call "Lists" "erlps__concat__1"
         [(ErlangCons head_26
             (ErlangCons speckind_0 (ErlangCons head_30 ErlangEmptyList)))])
  in let tup_el_23 = (erlps__leaf__1 [arg_24])
  in let tup_el_38 = (erlps__spec_clauses__1 [typespecs_2])
  in let
    head_35 =
      (ErlangTuple [(ErlangAtom "first"), func_21, tup_el_38])
  in let
    tup_el_32 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_35 ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "first"), tup_el_23, tup_el_32])
erlps__specattr__2 [arg_41, arg_42] = (EXC.function_clause unit)
erlps__specattr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spec_clauses__1 :: ErlangFun
erlps__spec_clauses__1 [typespecs_0] =
  let
    tup_el_5 =
      (flmap
         (\ lc_8 ->
            case lc_8 of
              t_7 ->
                let lc_ret_9 = (erlps__sig_type__1 [t_7])
                in (ErlangCons lc_ret_9 ErlangEmptyList)
              _ -> ErlangEmptyList)
         typespecs_0)
  in
    (ErlangTuple
       [(ErlangAtom "prefer_nl"),
        (ErlangCons (ErlangInt (DBI.fromInt 59)) ErlangEmptyList),
        tup_el_5])
erlps__spec_clauses__1 [arg_11] = (EXC.function_clause unit)
erlps__spec_clauses__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sig_type__1 :: ErlangFun
erlps__sig_type__1 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                  (ErlangAtom "bounded_fun"),
                                  (ErlangCons t_1 (ErlangCons gs_2 (ErlangEmptyList)))])]
  =
  let arg_3 = (erlps__fun_type__2 [ErlangEmptyList, t_1])
  in (erlps__guard_type__2 [arg_3, gs_2])
erlps__sig_type__1 [funtype_0] =
  (erlps__fun_type__2 [ErlangEmptyList, funtype_0])
erlps__sig_type__1 [arg_3] = (EXC.function_clause unit)
erlps__sig_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_type__2 :: ErlangFun
erlps__guard_type__2 [before_0, gs_1] =
  let    opts_3 = (erlps__options__1 [(ErlangAtom "none")])
  in let arg_14 = (ErlangFun 2 erlps__constraint__2)
  in let
    tup_el_9 =
      (erlps__expr_list__4
         [gs_1, (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
          arg_14, opts_3])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "when"), tup_el_9])
  in let
    gl_17 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_6 ErlangEmptyList)])
  in let
    head_20 = (ErlangTuple [(ErlangAtom "step"), before_0, gl_17])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_20 ErlangEmptyList)])
erlps__guard_type__2 [arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__guard_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__constraint__2 :: ErlangFun
erlps__constraint__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                    (ErlangAtom "constraint"),
                                    (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                              _,
                                                              (ErlangAtom "is_subtype")]) (ErlangCons (ErlangCons v_1@(ErlangTuple [(ErlangAtom "var"),
                                                                                                                                    _,
                                                                                                                                    _]) (ErlangCons type_2 (ErlangEmptyList))) (ErlangEmptyList)))]),
                      _opts_3]
  =
  let    arg_6 = (erlps__options__1 [(ErlangAtom "none")])
  in let arg_4 = (erlps__lexpr__2 [v_1, arg_6])
  in (erlps__typed__2 [arg_4, type_2])
erlps__constraint__2 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                    (ErlangAtom "constraint"),
                                    (ErlangCons tag_1 (ErlangCons as_2 (ErlangEmptyList)))]),
                      _opts_3]
  =
  (erlps__simple_type__2 [tag_1, as_2])
erlps__constraint__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__constraint__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_type__2 :: ErlangFun
erlps__fun_type__2 [before_0,
                    (ErlangTuple [(ErlangAtom "type"), _, (ErlangAtom "fun"),
                                  (ErlangCons ftype_1 (ErlangCons ret_2 (ErlangEmptyList)))])]
  =
  let    head_8 = (erlps__type_args__1 [ftype_1])
  in let tup_el_13 = (erlps__ltype__1 [ret_2])
  in let
    tup_el_5 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons head_8
             (ErlangCons (ErlangAtom " ->") ErlangEmptyList)),
          tup_el_13])
  in (ErlangTuple [(ErlangAtom "first"), before_0, tup_el_5])
erlps__fun_type__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__fun_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type_args__1 :: ErlangFun
erlps__type_args__1 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                   (ErlangAtom "any")])]
  =
  let arg_1 = (make_string "(...)")
  in (erlps__leaf__1 [arg_1])
erlps__type_args__1 [(ErlangTuple [(ErlangAtom "type"), _line_0,
                                   (ErlangAtom "product"), ts_1])]
  =
  (erlps__targs__1 [ts_1])
erlps__type_args__1 [arg_3] = (EXC.function_clause unit)
erlps__type_args__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__simple_type__2 :: ErlangFun
erlps__simple_type__2 [tag_0, types_1] =
  let    arg_5 = (erlps__options__1 [(ErlangAtom "none")])
  in let tup_el_3 = (erlps__lexpr__2 [tag_0, arg_5])
  in let tup_el_7 = (erlps__targs__1 [types_1])
  in (ErlangTuple [(ErlangAtom "first"), tup_el_3, tup_el_7])
erlps__simple_type__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__simple_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__targs__1 :: ErlangFun
erlps__targs__1 [ts_0] =
  let
    tup_el_7 = (erlps__ltypes__2 [ts_0, (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 40)),
        (ErlangInt (DBI.fromInt 41)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_7])
erlps__targs__1 [arg_10] = (EXC.function_clause unit)
erlps__targs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ltypes__2 :: ErlangFun
erlps__ltypes__2 [ts_0, prec_1] =
  let arg_3 = (ErlangFun 2 erlps__ltype__2)
  in (erlps__ltypes__3 [ts_0, arg_3, prec_1])
erlps__ltypes__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__ltypes__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ltypes__3 :: ErlangFun
erlps__ltypes__3 [ts_0, f_1, prec_2] =
  (flmap
     (\ lc_5 ->
        case lc_5 of
          t_4 ->
            let
              lc_ret_6 =
                (BIF.erlang__apply__2
                   [f_1, (ErlangCons t_4 (ErlangCons prec_2 ErlangEmptyList))])
            in (ErlangCons lc_ret_6 ErlangEmptyList)
          _ -> ErlangEmptyList)
     ts_0)
erlps__ltypes__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__ltypes__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__attr__2 :: ErlangFun
erlps__attr__2 [name_0, args_1] =
  let    head_6 = (ErlangTuple [(ErlangAtom "atom"), name_0])
  in let arg_12 = (erlps__options__1 [(ErlangAtom "none")])
  in let tup_el_10 = (erlps__args__2 [args_1, arg_12])
  in
    (ErlangTuple
       [(ErlangAtom "first"),
        (ErlangCons (ErlangInt (DBI.fromInt 45))
           (ErlangCons head_6 ErlangEmptyList)),
        tup_el_10])
erlps__attr__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__attr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__attrib__2 :: ErlangFun
erlps__attrib__2 [name_0, args_1] =
  let    head_6 = (ErlangTuple [(ErlangAtom "atom"), name_0])
  in let
    head_11 =
      (ErlangTuple
         [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 40)),
          (ErlangInt (DBI.fromInt 41)),
          (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
          args_1])
  in
    (ErlangTuple
       [(ErlangAtom "first"),
        (ErlangCons (ErlangInt (DBI.fromInt 45))
           (ErlangCons head_6 ErlangEmptyList)),
        (ErlangCons head_11 ErlangEmptyList)])
erlps__attrib__2 [arg_20, arg_21] = (EXC.function_clause unit)
erlps__attrib__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pname__1 :: ErlangFun
erlps__pname__1 [(ErlangCons (ErlangAtom "") as_0)] =
  let tail_2 = (erlps__pname__1 [as_0])
  in (ErlangCons (ErlangInt (DBI.fromInt 46)) tail_2)
erlps__pname__1 [(ErlangCons a_0 (ErlangEmptyList))] =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [a_0])
erlps__pname__1 [(ErlangCons a_0 as_1)] =
  let   
    head_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [a_0])
  in let tail_6 = (erlps__pname__1 [as_1])
  in
    (ErlangCons head_2
       (ErlangCons (ErlangInt (DBI.fromInt 46)) tail_6))
erlps__pname__1 [a_0] | (isEAtom a_0) =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [a_0])
erlps__pname__1 [arg_2] = (EXC.function_clause unit)
erlps__pname__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__falist__1 :: ErlangFun
erlps__falist__1 [(ErlangEmptyList)] =
  (ErlangCons (ErlangAtom "[]") ErlangEmptyList)
erlps__falist__1 [falist_0] =
  let   
    l_19 =
      (flmap
         (\ lc_3 ->
            case lc_3 of
              fa_2 ->
                case fa_2 of
                  (ErlangTuple [name_5, arity_6]) ->
                    let
                      head_8 = (ErlangTuple [(ErlangAtom "atom"), name_5])
                      arg_14 = (make_string "/~w")
                      arg_13 =
                        (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
                           [arg_14, (ErlangCons arity_6 ErlangEmptyList)])
                      head_12 = (erlps__leaf__1 [arg_13])
                    in
                      (ErlangCons
                         (ErlangCons head_8
                            (ErlangCons head_12 ErlangEmptyList))
                         ErlangEmptyList)
                  _ -> (EXC.badmatch fa_2)
              _ -> ErlangEmptyList)
         falist_0)
  in let
    head_20 =
      (ErlangTuple
         [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
          (ErlangInt (DBI.fromInt 93)), (ErlangInt (DBI.fromInt 44)),
          l_19])
  in (ErlangCons head_20 ErlangEmptyList)
erlps__falist__1 [arg_27] = (EXC.function_clause unit)
erlps__falist__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lfunction__2 :: ErlangFun
erlps__lfunction__2 [(ErlangTuple [(ErlangAtom "function"),
                                   _line_0, name_1, _arity_2, cs_3]),
                     opts_4]
  =
  let   
    arg_5 =
      (ErlangFun 2
         let
           lambda_6 [c_9, h_10] =
             (erlps__func_clause__3 [name_1, c_9, h_10])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in let
    cll_17 =
      (erlps__nl_clauses__4
         [arg_5, (ErlangInt (DBI.fromInt 59)), opts_4, cs_3])
  in let arg_21 = (make_string ".\n")
  in let head_20 = (erlps__leaf__1 [arg_21])
  in (ErlangCons cll_17 (ErlangCons head_20 ErlangEmptyList))
erlps__lfunction__2 [arg_23, arg_24] = (EXC.function_clause unit)
erlps__lfunction__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func_clause__3 :: ErlangFun
erlps__func_clause__3 [name_0,
                       (ErlangTuple [(ErlangAtom "clause"), line_1, head_2,
                                     guard_3, body_4]),
                       opts_5]
  =
  let   
    arg_6 = (ErlangTuple [(ErlangAtom "atom"), line_1, name_0])
  in let
    hl_13 =
      (erlps__call__4
         [arg_6, head_2, (ErlangInt (DBI.fromInt 0)), opts_5])
  in let gl_17 = (erlps__guard_when__3 [hl_13, guard_3, opts_5])
  in let bl_20 = (erlps__body__2 [body_4, opts_5])
  in (ErlangTuple [(ErlangAtom "step"), gl_17, bl_20])
erlps__func_clause__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__func_clause__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_when__3 :: ErlangFun
erlps__guard_when__3 [before_0, guard_1, opts_2] =
  (erlps__guard_when__4
     [before_0, guard_1, opts_2, (ErlangAtom " ->")])
erlps__guard_when__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__guard_when__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_when__4 :: ErlangFun
erlps__guard_when__4 [before_0, guard_1, opts_2, after_3] =
  let    gl_6 = (erlps__lguard__2 [guard_1, opts_2])
  in let
    head_10 = (ErlangTuple [(ErlangAtom "step"), before_0, gl_6])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_10 ErlangEmptyList)])
  in (ErlangCons head_7 (ErlangCons after_3 ErlangEmptyList))
erlps__guard_when__4 [arg_18, arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__guard_when__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lguard__2 :: ErlangFun
erlps__lguard__2 [(ErlangCons e_0 es_1), opts_2]
  | (isEList e_0) =
  let    arg_15 = (ErlangFun 2 erlps__guard0__2)
  in let
    tup_el_8 =
      (erlps__expr_list__4
         [(ErlangCons e_0 es_1),
          (ErlangCons (ErlangInt (DBI.fromInt 59)) ErlangEmptyList),
          arg_15, opts_2])
  in let
    head_5 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "when"), tup_el_8])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_5 ErlangEmptyList)])
erlps__lguard__2 [(ErlangCons e_0 es_1), opts_2] =
  (erlps__lguard__2
     [(ErlangCons (ErlangCons e_0 es_1) ErlangEmptyList), opts_2])
erlps__lguard__2 [(ErlangEmptyList), _] = ErlangEmptyList
erlps__lguard__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__lguard__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard0__2 :: ErlangFun
erlps__guard0__2 [es_0, opts_1] =
  let arg_6 = (ErlangFun 2 erlps__lexpr__2)
  in
    (erlps__expr_list__4
       [es_0, (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        arg_6, opts_1])
erlps__guard0__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__guard0__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__body__2 :: ErlangFun
erlps__body__2 [(ErlangCons e_0 (ErlangEmptyList)), opts_1] =
  (erlps__lexpr__2 [e_0, opts_1])
erlps__body__2 [es_0, opts_1] =
  let tup_el_6 = (erlps__lexprs__2 [es_0, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "prefer_nl"),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_6])
erlps__body__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__body__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexpr__2 :: ErlangFun
erlps__lexpr__2 [e_0, opts_1] =
  (erlps__lexpr__3 [e_0, (ErlangInt (DBI.fromInt 0)), opts_1])
erlps__lexpr__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__lexpr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexpr__3 :: ErlangFun
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "var"), _, v_0]), _,
                 _]
  | (isEInt v_0) =
  let    arg_2 = (make_string "_~w")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_2, (ErlangCons v_0 ErlangEmptyList)])
  in (erlps__leaf__1 [arg_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "var"), _, v_0]), _,
                 _]
  =
  let    arg_2 = (make_string "~ts")
  in let
    arg_1 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_2, (ErlangCons v_0 ErlangEmptyList)])
  in (erlps__leaf__1 [arg_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "char"), _, c_0]), _,
                 _]
  =
  (ErlangTuple [(ErlangAtom "char"), c_0])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "integer"), _, n_0]),
                 _, _]
  =
  let
    arg_1 = (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [n_0])
  in (erlps__leaf__1 [arg_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "float"), _, f_0]), _,
                 _]
  =
  let
    arg_1 = (BIF.do_remote_fun_call "Io.Lib" "erlps__write__1" [f_0])
  in (erlps__leaf__1 [arg_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "atom"), _, a_0]), _,
                 _]
  =
  (ErlangTuple [(ErlangAtom "atom"), a_0])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "string"), _, s_0]),
                 _, _]
  =
  (ErlangTuple [(ErlangAtom "string"), s_0])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "nil"), _]), _, _] =
  (ErlangAtom "[]")
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "cons"), _, h_0,
                               t_1]),
                 _, opts_2]
  =
  (erlps__list__3 [t_1, (ErlangCons h_0 ErlangEmptyList), opts_2])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "lc"), _, e_0, qs_1]),
                 _prec_2, opts_3]
  =
  let   
    p_4 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__max_prec__0" [])
  in let head_10 = (erlps__lexpr__3 [e_0, p_4, opts_3])
  in let arg_16 = (make_string " ||")
  in let head_15 = (erlps__leaf__1 [arg_16])
  in let tup_el_18 = (erlps__lc_quals__2 [qs_1, opts_3])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons head_10 (ErlangCons head_15 ErlangEmptyList)),
          tup_el_18])
  in let
    lcl_22 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_7 ErlangEmptyList)])
  in let arg_36 = (make_string " ")
  in let tup_el_35 = (erlps__leaf__1 [arg_36])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "force_nl"), tup_el_35,
          (ErlangCons lcl_22 ErlangEmptyList)])
  in let
    head_25 =
      (ErlangTuple
         [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
          ErlangEmptyList, (ErlangCons ErlangEmptyList ErlangEmptyList),
          (ErlangCons head_33 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_25
           (ErlangCons (ErlangInt (DBI.fromInt 93)) ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "bc"), _, e_0, qs_1]),
                 _prec_2, opts_3]
  =
  let   
    p_4 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__max_prec__0" [])
  in let head_10 = (erlps__lexpr__3 [e_0, p_4, opts_3])
  in let arg_16 = (make_string " ||")
  in let head_15 = (erlps__leaf__1 [arg_16])
  in let tup_el_18 = (erlps__lc_quals__2 [qs_1, opts_3])
  in let
    head_7 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons head_10 (ErlangCons head_15 ErlangEmptyList)),
          tup_el_18])
  in let
    lcl_22 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_7 ErlangEmptyList)])
  in let arg_36 = (make_string " ")
  in let tup_el_35 = (erlps__leaf__1 [arg_36])
  in let
    head_33 =
      (ErlangTuple
         [(ErlangAtom "force_nl"), tup_el_35,
          (ErlangCons lcl_22 ErlangEmptyList)])
  in let
    head_25 =
      (ErlangTuple
         [(ErlangAtom "seq"), (ErlangAtom "<<"), ErlangEmptyList,
          (ErlangCons ErlangEmptyList ErlangEmptyList),
          (ErlangCons head_33 ErlangEmptyList)])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_25
           (ErlangCons (ErlangAtom ">>") ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "tuple"), _, elts_0]),
                 _, opts_1]
  =
  (erlps__tuple__2 [elts_0, opts_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record_index"), _,
                               name_0, f_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__preop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_7 of
      (ErlangTuple [p_5, r_6]) ->
        let    nl_9 = (erlps__record_name__1 [name_0])
        in let head_14 = (erlps__lexpr__3 [f_1, r_6, opts_3])
        in
          (erlps__maybe_paren__3
             [p_5, prec_2,
              (ErlangCons nl_9
                 (ErlangCons (ErlangInt (DBI.fromInt 46))
                    (ErlangCons head_14 ErlangEmptyList)))])
      _ -> (EXC.badmatch match_expr_7)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record"), _, name_0,
                               fs_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__preop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_7 of
      (ErlangTuple [p_5, _r_6]) ->
        let    nl_9 = (erlps__record_name__1 [name_0])
        in let tup_el_12 = (erlps__record_fields__2 [fs_1, opts_3])
        in let
          el_15 = (ErlangTuple [(ErlangAtom "first"), nl_9, tup_el_12])
        in (erlps__maybe_paren__3 [p_5, prec_2, el_15])
      _ -> (EXC.badmatch match_expr_7)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record_field"), _,
                               rec_0, name_1, f_2]),
                 prec_3, opts_4]
  =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_9 of
      (ErlangTuple [l_6, p_7, r_8]) ->
        let    rl_13 = (erlps__lexpr__3 [rec_0, l_6, opts_4])
        in let
          sep_18 =
            (erlps__hash_after_integer__2
               [rec_0,
                (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList)])
        in let head_21 = (ErlangTuple [(ErlangAtom "atom"), name_1])
        in let head_32 = (erlps__lexpr__3 [f_2, r_8, opts_4])
        in
          (erlps__maybe_paren__3
             [p_7, prec_3,
              (ErlangCons rl_13
                 (ErlangCons
                    (ErlangCons sep_18
                       (ErlangCons head_21
                          (ErlangCons (ErlangInt (DBI.fromInt 46))
                             ErlangEmptyList)))
                    (ErlangCons head_32 ErlangEmptyList)))])
      _ -> (EXC.badmatch match_expr_9)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record"), _, rec_0,
                               name_1, fs_2]),
                 prec_3, opts_4]
  =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_9 of
      (ErlangTuple [l_6, p_7, _r_8]) ->
        let    rl_13 = (erlps__lexpr__3 [rec_0, l_6, opts_4])
        in let
          sep_16 = (erlps__hash_after_integer__2 [rec_0, ErlangEmptyList])
        in let nl_18 = (erlps__record_name__1 [name_1])
        in let tup_el_27 = (erlps__record_fields__2 [fs_2, opts_4])
        in let
          el_30 =
            (ErlangTuple
               [(ErlangAtom "first"),
                (ErlangCons rl_13
                   (ErlangCons sep_16 (ErlangCons nl_18 ErlangEmptyList))),
                tup_el_27])
        in (erlps__maybe_paren__3 [p_7, prec_3, el_30])
      _ -> (EXC.badmatch match_expr_9)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record_field"), _,
                               (ErlangTuple [(ErlangAtom "atom"), _,
                                             (ErlangAtom "")]),
                               f_0]),
                 prec_1, opts_2]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom ".")])
  in
    case match_expr_7 of
      (ErlangTuple [_l_4, p_5, r_6]) ->
        let head_10 = (erlps__lexpr__3 [f_0, r_6, opts_2])
        in
          (erlps__maybe_paren__3
             [p_5, prec_1,
              (ErlangCons (ErlangInt (DBI.fromInt 46))
                 (ErlangCons head_10 ErlangEmptyList))])
      _ -> (EXC.badmatch match_expr_7)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "record_field"), _,
                               rec_0, f_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom ".")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, p_6, r_7]) ->
        let    head_9 = (erlps__lexpr__3 [rec_0, l_5, opts_3])
        in let head_16 = (erlps__lexpr__3 [f_1, r_7, opts_3])
        in
          (erlps__maybe_paren__3
             [p_6, prec_2,
              (ErlangCons head_9
                 (ErlangCons (ErlangInt (DBI.fromInt 46))
                    (ErlangCons head_16 ErlangEmptyList)))])
      _ -> (EXC.badmatch match_expr_8)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "map"), _, fs_0]),
                 prec_1, opts_2]
  =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__preop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_6 of
      (ErlangTuple [p_4, _r_5]) ->
        let    tup_el_9 = (erlps__map_fields__2 [fs_0, opts_2])
        in let
          el_12 =
            (ErlangTuple
               [(ErlangAtom "first"), (ErlangInt (DBI.fromInt 35)), tup_el_9])
        in (erlps__maybe_paren__3 [p_4, prec_1, el_12])
      _ -> (EXC.badmatch match_expr_6)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "map"), _, map_0,
                               fs_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "#")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, p_6, _r_7]) ->
        let    rl_12 = (erlps__lexpr__3 [map_0, l_5, opts_3])
        in let
          sep_17 =
            (erlps__hash_after_integer__2
               [map_0,
                (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList)])
        in let tup_el_22 = (erlps__map_fields__2 [fs_1, opts_3])
        in let
          el_25 =
            (ErlangTuple
               [(ErlangAtom "first"), (ErlangCons rl_12 sep_17), tup_el_22])
        in (erlps__maybe_paren__3 [p_6, prec_2, el_25])
      _ -> (EXC.badmatch match_expr_8)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "block"), _, es_0]),
                 _, opts_1]
  =
  let    tup_el_7 = (erlps__body__2 [es_0, opts_1])
  in let
    head_4 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "begin"), tup_el_7])
  in let
    head_11 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_4 (ErlangCons head_11 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "if"), _, cs_0]), _,
                 opts_1]
  =
  let    tup_el_7 = (erlps__if_clauses__2 [cs_0, opts_1])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "step"), (ErlangAtom "if"), tup_el_7])
  in let
    head_11 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_4 (ErlangCons head_11 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "case"), _, expr_0,
                               cs_1]),
                 _, opts_2]
  =
  let    tup_el_13 = (erlps__lexpr__2 [expr_0, opts_2])
  in let
    head_10 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "case"), tup_el_13])
  in let
    head_17 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "of")])
  in let
    tup_el_7 =
      (ErlangTuple
         [(ErlangAtom "list"),
          (ErlangCons head_10 (ErlangCons head_17 ErlangEmptyList))])
  in let tup_el_21 = (erlps__cr_clauses__2 [cs_1, opts_2])
  in let
    head_5 = (ErlangTuple [(ErlangAtom "step"), tup_el_7, tup_el_21])
  in let
    head_25 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_5 (ErlangCons head_25 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "cond"), _, cs_0]), _,
                 opts_1]
  =
  let    arg_7 = (make_string "cond")
  in let tup_el_6 = (erlps__leaf__1 [arg_7])
  in let tup_el_8 = (erlps__cond_clauses__2 [cs_0, opts_1])
  in let
    head_4 = (ErlangTuple [(ErlangAtom "step"), tup_el_6, tup_el_8])
  in let
    head_12 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_4 (ErlangCons head_12 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0]),
                 _, opts_1]
  =
  let    tup_el_7 = (erlps__cr_clauses__2 [cs_0, opts_1])
  in let
    head_4 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "receive"), tup_el_7])
  in let
    head_11 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_4 (ErlangCons head_11 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "receive"), _, cs_0,
                               to_1, toopt_2]),
                 _, opts_3]
  =
  let    head_9 = (erlps__lexpr__2 [to_1, opts_3])
  in let tup_el_15 = (erlps__body__2 [toopt_2, opts_3])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons head_9
             (ErlangCons (ErlangAtom " ->") ErlangEmptyList)),
          tup_el_15])
  in let
    al_19 =
      (ErlangTuple
         [(ErlangAtom "list"), (ErlangCons head_6 ErlangEmptyList)])
  in let tup_el_25 = (erlps__cr_clauses__2 [cs_0, opts_3])
  in let
    head_22 =
      (ErlangTuple
         [(ErlangAtom "step"), (ErlangAtom "receive"), tup_el_25])
  in let
    head_29 =
      (ErlangTuple [(ErlangAtom "step"), (ErlangAtom "after"), al_19])
  in let
    head_34 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_22
           (ErlangCons head_29 (ErlangCons head_34 ErlangEmptyList)))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), _,
                               (ErlangTuple [(ErlangAtom "function"), f_0,
                                             a_1])]),
                 _prec_2, _opts_3]
  =
  let    arg_5 = (make_string "fun ")
  in let head_4 = (erlps__leaf__1 [arg_5])
  in let head_7 = (ErlangTuple [(ErlangAtom "atom"), f_0])
  in let arg_13 = (make_string "/~w")
  in let
    arg_12 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_13, (ErlangCons a_1 ErlangEmptyList)])
  in let head_11 = (erlps__leaf__1 [arg_12])
  in
    (ErlangCons head_4
       (ErlangCons head_7 (ErlangCons head_11 ErlangEmptyList)))
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), l_0,
                               func_1@(ErlangTuple [(ErlangAtom "function"), _,
                                                    _]),
                               extra_2]),
                 prec_3, opts_4]
  =
  let    tup_el_6 = (erlps__fun_info__1 [extra_2])
  in let arg_9 = (ErlangTuple [(ErlangAtom "fun"), l_0, func_1])
  in let tup_el_8 = (erlps__lexpr__3 [arg_9, prec_3, opts_4])
  in (ErlangTuple [(ErlangAtom "force_nl"), tup_el_6, tup_el_8])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), l_0,
                               (ErlangTuple [(ErlangAtom "function"), m_1, f_2,
                                             a_3])]),
                 prec_4, opts_5]
  | (((isEAtom m_1) && (isEAtom f_2)) && (isEInt a_3)) =
  let   
    mod_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [m_1])
  in let
    fun_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [f_2])
  in let
    arity_11 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [a_3])
  in let
    tup_el_15 =
      (ErlangTuple [(ErlangAtom "function"), mod_7, fun_9, arity_11])
  in let
    arg_12 = (ErlangTuple [(ErlangAtom "fun"), l_0, tup_el_15])
  in (erlps__lexpr__3 [arg_12, prec_4, opts_5])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), _,
                               (ErlangTuple [(ErlangAtom "function"), m_0, f_1,
                                             a_2])]),
                 _prec_3, opts_4]
  =
  let    nameitem_7 = (erlps__lexpr__2 [m_0, opts_4])
  in let callitem_10 = (erlps__lexpr__2 [f_1, opts_4])
  in let arityitem_13 = (erlps__lexpr__2 [a_2, opts_4])
  in let head_14 = (make_string "fun ")
  in
    (ErlangCons head_14
       (ErlangCons nameitem_7
          (ErlangCons (ErlangInt (DBI.fromInt 58))
             (ErlangCons callitem_10
                (ErlangCons (ErlangInt (DBI.fromInt 47))
                   (ErlangCons arityitem_13 ErlangEmptyList))))))
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), _,
                               (ErlangTuple [(ErlangAtom "clauses"), cs_0])]),
                 _prec_1, opts_2]
  =
  let   
    tup_el_8 =
      (erlps__fun_clauses__3 [cs_0, opts_2, (ErlangAtom "unnamed")])
  in let
    head_5 =
      (ErlangTuple
         [(ErlangAtom "first"), (ErlangAtom "fun"), tup_el_8])
  in let
    head_13 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_5 (ErlangCons head_13 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "named_fun"), _,
                               name_0, cs_1]),
                 _prec_2, opts_3]
  =
  let    head_11 = (make_string " ")
  in let arg_16 = (ErlangTuple [(ErlangAtom "named"), name_0])
  in let tup_el_13 = (erlps__fun_clauses__3 [cs_1, opts_3, arg_16])
  in let
    head_6 =
      (ErlangTuple
         [(ErlangAtom "first"),
          (ErlangCons (ErlangAtom "fun")
             (ErlangCons head_11 ErlangEmptyList)),
          tup_el_13])
  in let
    head_20 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in
    (ErlangTuple
       [(ErlangAtom "list"),
        (ErlangCons head_6 (ErlangCons head_20 ErlangEmptyList))])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "fun"), _,
                               (ErlangTuple [(ErlangAtom "clauses"), cs_0]),
                               extra_1]),
                 _prec_2, opts_3]
  =
  let    tup_el_5 = (erlps__fun_info__1 [extra_1])
  in let
    tup_el_13 =
      (erlps__fun_clauses__3 [cs_0, opts_3, (ErlangAtom "unnamed")])
  in let
    head_10 =
      (ErlangTuple
         [(ErlangAtom "first"), (ErlangAtom "fun"), tup_el_13])
  in let
    head_18 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in let
    tup_el_7 =
      (ErlangTuple
         [(ErlangAtom "list"),
          (ErlangCons head_10 (ErlangCons head_18 ErlangEmptyList))])
  in (ErlangTuple [(ErlangAtom "force_nl"), tup_el_5, tup_el_7])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "named_fun"), _,
                               name_0, cs_1, extra_2]),
                 _prec_3, opts_4]
  =
  let    tup_el_6 = (erlps__fun_info__1 [extra_2])
  in let head_16 = (make_string " ")
  in let arg_21 = (ErlangTuple [(ErlangAtom "named"), name_0])
  in let tup_el_18 = (erlps__fun_clauses__3 [cs_1, opts_4, arg_21])
  in let
    head_11 =
      (ErlangTuple
         [(ErlangAtom "first"),
          (ErlangCons (ErlangAtom "fun")
             (ErlangCons head_16 ErlangEmptyList)),
          tup_el_18])
  in let
    head_25 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in let
    tup_el_8 =
      (ErlangTuple
         [(ErlangAtom "list"),
          (ErlangCons head_11 (ErlangCons head_25 ErlangEmptyList))])
  in (ErlangTuple [(ErlangAtom "force_nl"), tup_el_6, tup_el_8])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "call"), _,
                               name_3@(ErlangTuple [(ErlangAtom "remote"), _,
                                                    (ErlangTuple [(ErlangAtom "atom"),
                                                                  _, m_0]),
                                                    n_2@(ErlangTuple [(ErlangAtom "atom"),
                                                                      _,
                                                                      f_1])]),
                               args_4]),
                 prec_5, opts_6]
  =
  let    arg_10 = (BIF.erlang__length__1 [args_4])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__3"
         [m_0, f_1, arg_10])
  in
    case case_7 of
      (ErlangAtom "true") | ((/=) f_1 (ErlangAtom "float")) ->
        (erlps__call__4 [n_2, args_4, prec_5, opts_6])
      (ErlangAtom "true") ->
        (erlps__call__4 [name_3, args_4, prec_5, opts_6])
      (ErlangAtom "false") ->
        (erlps__call__4 [name_3, args_4, prec_5, opts_6])
      something_else -> (EXC.case_clause something_else)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "call"), _, name_0,
                               args_1]),
                 prec_2, opts_3]
  =
  (erlps__call__4 [name_0, args_1, prec_2, opts_3])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "try"), _, es_0,
                               scs_1, ccs_2, as_3]),
                 _, opts_4]
  =
  let   
    head_8 =
      case (ErlangAtom "true") of
        _ | ((==) scs_1 ErlangEmptyList) ->
          let tup_el_11 = (erlps__body__2 [es_0, opts_4])
          in
            (ErlangTuple
               [(ErlangAtom "step"), (ErlangAtom "try"), tup_el_11])
        _ ->
          let    tup_el_21 = (erlps__body__2 [es_0, opts_4])
          in let
            head_18 =
              (ErlangTuple
                 [(ErlangAtom "step"), (ErlangAtom "try"), tup_el_21])
          in let
            head_25 =
              (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "of")])
          in let
            tup_el_15 =
              (ErlangTuple
                 [(ErlangAtom "list"),
                  (ErlangCons head_18 (ErlangCons head_25 ErlangEmptyList))])
          in let tup_el_29 = (erlps__cr_clauses__2 [scs_1, opts_4])
          in (ErlangTuple [(ErlangAtom "step"), tup_el_15, tup_el_29])
        _ -> (EXC.if_clause unit)
  in let
    lop_34 =
      case (ErlangAtom "true") of
        _ | ((==) ccs_2 ErlangEmptyList) -> ErlangEmptyList
        _ ->
          let    tup_el_38 = (erlps__try_clauses__2 [ccs_2, opts_4])
          in let
            head_35 =
              (ErlangTuple
                 [(ErlangAtom "step"), (ErlangAtom "catch"), tup_el_38])
          in (ErlangCons head_35 ErlangEmptyList)
        _ -> (EXC.if_clause unit)
  in let
    lop_43 =
      case (ErlangAtom "true") of
        _ | ((==) as_3 ErlangEmptyList) -> ErlangEmptyList
        _ ->
          let    tup_el_47 = (erlps__body__2 [as_3, opts_4])
          in let
            head_44 =
              (ErlangTuple
                 [(ErlangAtom "step"), (ErlangAtom "after"), tup_el_47])
          in (ErlangCons head_44 ErlangEmptyList)
        _ -> (EXC.if_clause unit)
  in let
    head_52 =
      (ErlangTuple [(ErlangAtom "reserved"), (ErlangAtom "end")])
  in let
    rop_42 =
      (BIF.erlang__op_append
         [lop_43, (ErlangCons head_52 ErlangEmptyList)])
  in let rop_33 = (BIF.erlang__op_append [lop_34, rop_42])
  in let
    tup_el_6 =
      (BIF.erlang__op_append
         [(ErlangCons head_8 ErlangEmptyList), rop_33])
  in (ErlangTuple [(ErlangAtom "list"), tup_el_6])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "catch"), _, expr_0]),
                 prec_1, opts_2]
  =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__preop_prec__1"
         [(ErlangAtom "catch")])
  in
    case match_expr_6 of
      (ErlangTuple [p_4, r_5]) ->
        let    tup_el_12 = (erlps__lexpr__3 [expr_0, r_5, opts_2])
        in let
          head_9 =
            (ErlangTuple
               [(ErlangAtom "step"), (ErlangAtom "catch"), tup_el_12])
        in let
          el_17 =
            (ErlangTuple
               [(ErlangAtom "list"), (ErlangCons head_9 ErlangEmptyList)])
        in (erlps__maybe_paren__3 [p_4, prec_1, el_17])
      _ -> (EXC.badmatch match_expr_6)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "match"), _, lhs_0,
                               rhs_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "=")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, p_6, r_7]) ->
        let    pl_12 = (erlps__lexpr__3 [lhs_0, l_5, opts_3])
        in let rl_16 = (erlps__lexpr__3 [rhs_1, r_7, opts_3])
        in let
          head_19 =
            (ErlangTuple
               [(ErlangAtom "cstep"),
                (ErlangCons pl_12
                   (ErlangCons (ErlangAtom " =") ErlangEmptyList)),
                rl_16])
        in let
          el_28 =
            (ErlangTuple
               [(ErlangAtom "list"), (ErlangCons head_19 ErlangEmptyList)])
        in (erlps__maybe_paren__3 [p_6, prec_2, el_28])
      _ -> (EXC.badmatch match_expr_8)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "op"), _, op_0,
                               arg_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__preop_prec__1"
         [op_0])
  in
    case match_expr_7 of
      (ErlangTuple [p_5, r_6]) ->
        let    arg_11 = (make_string "~s ")
        in let
          arg_10 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_11, (ErlangCons op_0 ErlangEmptyList)])
        in let tup_el_9 = (erlps__leaf__1 [arg_10])
        in let ol_15 = (ErlangTuple [(ErlangAtom "reserved"), tup_el_9])
        in let head_18 = (erlps__lexpr__3 [arg_1, r_6, opts_3])
        in
          (erlps__maybe_paren__3
             [p_5, prec_2,
              (ErlangCons ol_15 (ErlangCons head_18 ErlangEmptyList))])
      _ -> (EXC.badmatch match_expr_7)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "op"), _, op_0,
                               larg_1, rarg_2]),
                 prec_3, opts_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_41 = (BIF.erlang__op_exactEq [op_0, (ErlangAtom "orelse")])
             in
               case lop_41 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [op_0, (ErlangAtom "andalso")])
                 _ -> (EXC.badarg1 lop_41)))) =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1" [op_0])
  in
    case match_expr_9 of
      (ErlangTuple [l_6, p_7, r_8]) ->
        let    ll_13 = (erlps__lexpr__3 [larg_1, l_6, opts_4])
        in let arg_17 = (make_string "~s")
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_17, (ErlangCons op_0 ErlangEmptyList)])
        in let tup_el_15 = (erlps__leaf__1 [arg_16])
        in let ol_21 = (ErlangTuple [(ErlangAtom "reserved"), tup_el_15])
        in let lr_25 = (erlps__lexpr__3 [rarg_2, r_8, opts_4])
        in let
          el_37 =
            (ErlangTuple
               [(ErlangAtom "prefer_nl"),
                (ErlangCons ErlangEmptyList ErlangEmptyList),
                (ErlangCons ll_13
                   (ErlangCons ol_21 (ErlangCons lr_25 ErlangEmptyList)))])
        in (erlps__maybe_paren__3 [p_7, prec_3, el_37])
      _ -> (EXC.badmatch match_expr_9)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "op"), _, op_0,
                               larg_1, rarg_2]),
                 prec_3, opts_4]
  =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1" [op_0])
  in
    case match_expr_9 of
      (ErlangTuple [l_6, p_7, r_8]) ->
        let    ll_13 = (erlps__lexpr__3 [larg_1, l_6, opts_4])
        in let arg_17 = (make_string "~s")
        in let
          arg_16 =
            (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
               [arg_17, (ErlangCons op_0 ErlangEmptyList)])
        in let tup_el_15 = (erlps__leaf__1 [arg_16])
        in let ol_21 = (ErlangTuple [(ErlangAtom "reserved"), tup_el_15])
        in let lr_25 = (erlps__lexpr__3 [rarg_2, r_8, opts_4])
        in let
          el_34 =
            (ErlangTuple
               [(ErlangAtom "list"),
                (ErlangCons ll_13
                   (ErlangCons ol_21 (ErlangCons lr_25 ErlangEmptyList)))])
        in (erlps__maybe_paren__3 [p_7, prec_3, el_34])
      _ -> (EXC.badmatch match_expr_9)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "remote"), _, m_0,
                               f_1]),
                 prec_2, opts_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom ":")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, p_6, r_7]) ->
        let    nameitem_12 = (erlps__lexpr__3 [m_0, l_5, opts_3])
        in let callitem_16 = (erlps__lexpr__3 [f_1, r_7, opts_3])
        in
          (erlps__maybe_paren__3
             [p_6, prec_2,
              (ErlangCons nameitem_12
                 (ErlangCons (ErlangInt (DBI.fromInt 58))
                    (ErlangCons callitem_16 ErlangEmptyList)))])
      _ -> (EXC.badmatch match_expr_8)
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]), _,
                 opts_1]
  =
  (erlps__bit_grp__2 [fs_0, opts_1])
erlps__lexpr__3 [(ErlangTuple [(ErlangAtom "value"), _, val_0]),
                 _, _]
  =
  (ErlangTuple [(ErlangAtom "value"), val_0])
erlps__lexpr__3 [other_0, _precedence_1,
                 (ErlangTuple [(ErlangAtom "options"), (ErlangAtom "none"), _,
                               _])]
  =
  let    arg_3 = (make_string "INVALID-FORM:~w:")
  in let
    arg_2 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
         [arg_3, (ErlangCons other_0 ErlangEmptyList)])
  in (erlps__leaf__1 [arg_2])
erlps__lexpr__3 [hookexpr_0, precedence_1,
                 (ErlangTuple [(ErlangAtom "options"),
                               (ErlangTuple [mod_2, func_3, eas_4]), _, _])]
  | ((/=) mod_2 (ErlangAtom "fun")) =
  let tup_el_8 = (ErlangTuple [mod_2, func_3, eas_4])
  in
    (ErlangTuple
       [(ErlangAtom "ehook"), hookexpr_0, precedence_1, tup_el_8])
erlps__lexpr__3 [hookexpr_0, precedence_1,
                 (ErlangTuple [(ErlangAtom "options"), func_2, _, options_3])]
  =
  (ErlangTuple
     [(ErlangAtom "hook"), hookexpr_0, precedence_1, func_2,
      options_3])
erlps__lexpr__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__lexpr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__hash_after_integer__2 :: ErlangFun
erlps__hash_after_integer__2 [(ErlangTuple [(ErlangAtom "integer"),
                                            _, _]),
                              c_0]
  =
  (ErlangCons (ErlangInt (DBI.fromInt 32)) c_0)
erlps__hash_after_integer__2 [(ErlangTuple [(ErlangAtom "fun"),
                                            _,
                                            (ErlangTuple [(ErlangAtom "function"),
                                                          _, _])]),
                              c_0]
  =
  (ErlangCons (ErlangInt (DBI.fromInt 32)) c_0)
erlps__hash_after_integer__2 [(ErlangTuple [(ErlangAtom "fun"),
                                            _,
                                            (ErlangTuple [(ErlangAtom "function"),
                                                          _, _, _])]),
                              c_0]
  =
  (ErlangCons (ErlangInt (DBI.fromInt 32)) c_0)
erlps__hash_after_integer__2 [_, c_0] = c_0
erlps__hash_after_integer__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__hash_after_integer__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__call__4 :: ErlangFun
erlps__call__4 [name_0, args_1, prec_2, opts_3] =
  let
    match_expr_6 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__func_prec__0" [])
  in
    case match_expr_6 of
      (ErlangTuple [f_4, p_5]) ->
        let    tup_el_8 = (erlps__lexpr__3 [name_0, f_4, opts_3])
        in let tup_el_12 = (erlps__args__2 [args_1, opts_3])
        in let
          item_15 =
            (ErlangTuple [(ErlangAtom "first"), tup_el_8, tup_el_12])
        in (erlps__maybe_paren__3 [p_5, prec_2, item_15])
      _ -> (EXC.badmatch match_expr_6)
erlps__call__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__call__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_info__1 :: ErlangFun
erlps__fun_info__1 [extra_0] =
  let    arg_2 = (make_string "% fun-info: ")
  in let head_1 = (erlps__leaf__1 [arg_2])
  in let head_4 = (ErlangTuple [(ErlangAtom "value"), extra_0])
  in (ErlangCons head_1 (ErlangCons head_4 ErlangEmptyList))
erlps__fun_info__1 [arg_8] = (EXC.function_clause unit)
erlps__fun_info__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_grp__2 :: ErlangFun
erlps__bit_grp__2 [(ErlangEmptyList), _opts_0] =
  let arg_1 = (make_string "<<>>")
  in (erlps__leaf__1 [arg_1])
erlps__bit_grp__2 [fs_0, opts_1] =
  let head_8 = (erlps__bit_elems__2 [fs_0, opts_1])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__append__1"
       [(ErlangCons (ErlangCons (ErlangAtom "<<") ErlangEmptyList)
           (ErlangCons (ErlangCons head_8 ErlangEmptyList)
              (ErlangCons (ErlangCons (ErlangAtom ">>") ErlangEmptyList)
                 ErlangEmptyList)))])
erlps__bit_grp__2 [arg_17, arg_18] = (EXC.function_clause unit)
erlps__bit_grp__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_elems__2 :: ErlangFun
erlps__bit_elems__2 [es_0, opts_1] =
  let arg_4 = (ErlangFun 2 erlps__bit_elem__2)
  in
    (erlps__expr_list__4
       [es_0, (ErlangInt (DBI.fromInt 44)), arg_4, opts_1])
erlps__bit_elems__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__bit_elems__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_elem__2 :: ErlangFun
erlps__bit_elem__2 [(ErlangTuple [(ErlangAtom "bin_element"), _,
                                  expr_0, sz_1, types_2]),
                    opts_3]
  =
  let   
    p_4 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__max_prec__0" [])
  in let vchars_8 = (erlps__lexpr__3 [expr_0, p_4, opts_3])
  in let
    schars_18 =
      case (ErlangAtom "true") of
        _ | ((/=) sz_1 (ErlangAtom "default")) ->
          let head_13 = (erlps__lexpr__3 [sz_1, p_4, opts_3])
          in
            (ErlangCons vchars_8
               (ErlangCons (ErlangInt (DBI.fromInt 58))
                  (ErlangCons head_13 ErlangEmptyList)))
        _ -> vchars_8
        _ -> (EXC.if_clause unit)
  in
    case (ErlangAtom "true") of
      _ | ((/=) types_2 (ErlangAtom "default")) ->
        let tail_22 = (erlps__bit_elem_types__1 [types_2])
        in
          (ErlangCons schars_18
             (ErlangCons (ErlangInt (DBI.fromInt 47)) tail_22))
      _ -> schars_18
      _ -> (EXC.if_clause unit)
erlps__bit_elem__2 [arg_24, arg_25] = (EXC.function_clause unit)
erlps__bit_elem__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_elem_types__1 :: ErlangFun
erlps__bit_elem_types__1 [(ErlangCons t_0 (ErlangEmptyList))] =
  let head_1 = (erlps__bit_elem_type__1 [t_0])
  in (ErlangCons head_1 ErlangEmptyList)
erlps__bit_elem_types__1 [(ErlangCons t_0 rest_1)] =
  let    head_2 = (erlps__bit_elem_type__1 [t_0])
  in let tail_6 = (erlps__bit_elem_types__1 [rest_1])
  in
    (ErlangCons head_2
       (ErlangCons (ErlangInt (DBI.fromInt 45)) tail_6))
erlps__bit_elem_types__1 [arg_8] = (EXC.function_clause unit)
erlps__bit_elem_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_elem_type__1 :: ErlangFun
erlps__bit_elem_type__1 [(ErlangTuple [a_0, b_1])] =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [a_0])
  in let arg_5 = (erlps__options__1 [(ErlangAtom "none")])
  in let head_2 = (erlps__lexpr__2 [arg_3, arg_5])
  in let
    arg_11 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [b_1])
  in let arg_13 = (erlps__options__1 [(ErlangAtom "none")])
  in let head_10 = (erlps__lexpr__2 [arg_11, arg_13])
  in
    (ErlangCons head_2
       (ErlangCons (ErlangInt (DBI.fromInt 58))
          (ErlangCons head_10 ErlangEmptyList)))
erlps__bit_elem_type__1 [t_0] =
  let   
    arg_1 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__abstract__1" [t_0])
  in let arg_3 = (erlps__options__1 [(ErlangAtom "none")])
  in (erlps__lexpr__2 [arg_1, arg_3])
erlps__bit_elem_type__1 [arg_5] = (EXC.function_clause unit)
erlps__bit_elem_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_name__1 :: ErlangFun
erlps__record_name__1 [name_0] =
  let head_3 = (ErlangTuple [(ErlangAtom "atom"), name_0])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 35))
       (ErlangCons head_3 ErlangEmptyList))
erlps__record_name__1 [arg_7] = (EXC.function_clause unit)
erlps__record_name__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_fields__2 :: ErlangFun
erlps__record_fields__2 [fs_0, opts_1] =
  let arg_3 = (ErlangFun 2 erlps__record_field__2)
  in (erlps__tuple__3 [fs_0, arg_3, opts_1])
erlps__record_fields__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__record_fields__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_field__2 :: ErlangFun
erlps__record_field__2 [(ErlangTuple [(ErlangAtom "record_field"),
                                      _, f_0, val_1]),
                        opts_2]
  =
  let
    match_expr_7 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "=")])
  in
    case match_expr_7 of
      (ErlangTuple [l_4, _p_5, r_6]) ->
        let    fl_11 = (erlps__lexpr__3 [f_0, l_4, opts_2])
        in let vl_15 = (erlps__lexpr__3 [val_1, r_6, opts_2])
        in let
          head_18 =
            (ErlangTuple
               [(ErlangAtom "cstep"),
                (ErlangCons fl_11
                   (ErlangCons (ErlangAtom " =") ErlangEmptyList)),
                vl_15])
        in
          (ErlangTuple
             [(ErlangAtom "list"), (ErlangCons head_18 ErlangEmptyList)])
      _ -> (EXC.badmatch match_expr_7)
erlps__record_field__2 [(ErlangTuple [(ErlangAtom "typed_record_field"),
                                      (ErlangTuple [(ErlangAtom "record_field"),
                                                    _, f_0, val_1]),
                                      type_2]),
                        opts_3]
  =
  let
    match_expr_8 =
      (BIF.do_remote_fun_call "Erl.Parse" "erlps__inop_prec__1"
         [(ErlangAtom "=")])
  in
    case match_expr_8 of
      (ErlangTuple [l_5, _p_6, r_7]) ->
        let    fl_12 = (erlps__lexpr__3 [f_0, l_5, opts_3])
        in let arg_13 = (erlps__lexpr__3 [val_1, r_7, opts_3])
        in let vl_18 = (erlps__typed__2 [arg_13, type_2])
        in let
          head_21 =
            (ErlangTuple
               [(ErlangAtom "cstep"),
                (ErlangCons fl_12
                   (ErlangCons (ErlangAtom " =") ErlangEmptyList)),
                vl_18])
        in
          (ErlangTuple
             [(ErlangAtom "list"), (ErlangCons head_21 ErlangEmptyList)])
      _ -> (EXC.badmatch match_expr_8)
erlps__record_field__2 [(ErlangTuple [(ErlangAtom "typed_record_field"),
                                      field_0, type_1]),
                        opts_2]
  =
  let arg_3 = (erlps__record_field__2 [field_0, opts_2])
  in (erlps__typed__2 [arg_3, type_1])
erlps__record_field__2 [(ErlangTuple [(ErlangAtom "record_field"),
                                      _, f_0]),
                        opts_1]
  =
  (erlps__lexpr__3 [f_0, (ErlangInt (DBI.fromInt 0)), opts_1])
erlps__record_field__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__record_field__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_fields__2 :: ErlangFun
erlps__map_fields__2 [fs_0, opts_1] =
  let arg_3 = (ErlangFun 2 erlps__map_field__2)
  in (erlps__tuple__3 [fs_0, arg_3, opts_1])
erlps__map_fields__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__map_fields__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_field__2 :: ErlangFun
erlps__map_field__2 [(ErlangTuple [(ErlangAtom "map_field_assoc"),
                                   _, k_0, v_1]),
                     opts_2]
  =
  let   
    pl_6 =
      (erlps__lexpr__3 [k_0, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let arg_15 = (make_string " =>")
  in let head_14 = (erlps__leaf__1 [arg_15])
  in let
    tup_el_17 =
      (erlps__lexpr__3 [v_1, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let
    head_9 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons pl_6 (ErlangCons head_14 ErlangEmptyList)),
          tup_el_17])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_9 ErlangEmptyList)])
erlps__map_field__2 [(ErlangTuple [(ErlangAtom "map_field_exact"),
                                   _, k_0, v_1]),
                     opts_2]
  =
  let   
    pl_6 =
      (erlps__lexpr__3 [k_0, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let arg_15 = (make_string " :=")
  in let head_14 = (erlps__leaf__1 [arg_15])
  in let
    tup_el_17 =
      (erlps__lexpr__3 [v_1, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let
    head_9 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons pl_6 (ErlangCons head_14 ErlangEmptyList)),
          tup_el_17])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_9 ErlangEmptyList)])
erlps__map_field__2 [arg_22, arg_23] = (EXC.function_clause unit)
erlps__map_field__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__list__3 :: ErlangFun
erlps__list__3 [(ErlangTuple [(ErlangAtom "cons"), _, h_0, t_1]),
                es_2, opts_3]
  =
  (erlps__list__3 [t_1, (ErlangCons h_0 es_2), opts_3])
erlps__list__3 [(ErlangTuple [(ErlangAtom "nil"), _]), es_0,
                opts_1]
  =
  let
    arg_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [es_0])
  in (erlps__proper_list__2 [arg_2, opts_1])
erlps__list__3 [other_0, es_1, opts_2] =
  let
    arg_3 =
      (BIF.lists__reverse__2
         [es_1, (ErlangCons other_0 ErlangEmptyList)])
  in (erlps__improper_list__2 [arg_3, opts_2])
erlps__list__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__if_clauses__2 :: ErlangFun
erlps__if_clauses__2 [cs_0, opts_1] =
  let arg_2 = (ErlangFun 2 erlps__if_clause__2)
  in (erlps__clauses__3 [arg_2, opts_1, cs_0])
erlps__if_clauses__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__if_clauses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__if_clause__2 :: ErlangFun
erlps__if_clause__2 [(ErlangTuple [(ErlangAtom "clause"), _,
                                   (ErlangEmptyList), g_0, b_1]),
                     opts_2]
  =
  let    head_3 = (erlps__guard_no_when__2 [g_0, opts_2])
  in let tup_el_12 = (erlps__body__2 [b_1, opts_2])
  in
    (ErlangTuple
       [(ErlangAtom "step"),
        (ErlangCons head_3
           (ErlangCons (ErlangAtom " ->") ErlangEmptyList)),
        tup_el_12])
erlps__if_clause__2 [arg_15, arg_16] = (EXC.function_clause unit)
erlps__if_clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_no_when__2 :: ErlangFun
erlps__guard_no_when__2 [(ErlangCons e_0 es_1), opts_2]
  | (isEList e_0) =
  let arg_7 = (ErlangFun 2 erlps__guard0__2)
  in
    (erlps__expr_list__4
       [(ErlangCons e_0 es_1), (ErlangInt (DBI.fromInt 59)), arg_7,
        opts_2])
erlps__guard_no_when__2 [(ErlangCons e_0 es_1), opts_2] =
  (erlps__guard_no_when__2
     [(ErlangCons (ErlangCons e_0 es_1) ErlangEmptyList), opts_2])
erlps__guard_no_when__2 [(ErlangEmptyList), _] =
  let arg_0 = (make_string "true")
  in (erlps__leaf__1 [arg_0])
erlps__guard_no_when__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__guard_no_when__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cr_clauses__2 :: ErlangFun
erlps__cr_clauses__2 [cs_0, opts_1] =
  let arg_2 = (ErlangFun 2 erlps__cr_clause__2)
  in (erlps__clauses__3 [arg_2, opts_1, cs_0])
erlps__cr_clauses__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__cr_clauses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cr_clause__2 :: ErlangFun
erlps__cr_clause__2 [(ErlangTuple [(ErlangAtom "clause"), _,
                                   (ErlangCons t_0 (ErlangEmptyList)), g_1,
                                   b_2]),
                     opts_3]
  =
  let   
    el_7 =
      (erlps__lexpr__3 [t_0, (ErlangInt (DBI.fromInt 0)), opts_3])
  in let gl_11 = (erlps__guard_when__3 [el_7, g_1, opts_3])
  in let bl_14 = (erlps__body__2 [b_2, opts_3])
  in (ErlangTuple [(ErlangAtom "step"), gl_11, bl_14])
erlps__cr_clause__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__cr_clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__try_clauses__2 :: ErlangFun
erlps__try_clauses__2 [cs_0, opts_1] =
  let arg_2 = (ErlangFun 2 erlps__try_clause__2)
  in (erlps__clauses__3 [arg_2, opts_1, cs_0])
erlps__try_clauses__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__try_clauses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__try_clause__2 :: ErlangFun
erlps__try_clause__2 [(ErlangTuple [(ErlangAtom "clause"), _,
                                    (ErlangCons (ErlangTuple [(ErlangAtom "tuple"),
                                                              _,
                                                              (ErlangCons c_0 (ErlangCons v_1 (ErlangCons s_2 (ErlangEmptyList))))]) (ErlangEmptyList)),
                                    g_3, b_4]),
                      opts_5]
  =
  let   
    cs_9 =
      (erlps__lexpr__3 [c_0, (ErlangInt (DBI.fromInt 0)), opts_5])
  in let
    el_13 =
      (erlps__lexpr__3 [v_1, (ErlangInt (DBI.fromInt 0)), opts_5])
  in let
    sl_24 =
      (erlps__stack_backtrace__3
         [s_2,
          (ErlangCons cs_9
             (ErlangCons (ErlangInt (DBI.fromInt 58))
                (ErlangCons el_13 ErlangEmptyList))),
          opts_5])
  in let gl_28 = (erlps__guard_when__3 [sl_24, g_3, opts_5])
  in let bl_31 = (erlps__body__2 [b_4, opts_5])
  in (ErlangTuple [(ErlangAtom "step"), gl_28, bl_31])
erlps__try_clause__2 [arg_35, arg_36] =
  (EXC.function_clause unit)
erlps__try_clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__stack_backtrace__3 :: ErlangFun
erlps__stack_backtrace__3 [(ErlangTuple [(ErlangAtom "var"), _,
                                         (ErlangAtom "_")]),
                           el_0, _opts_1]
  =
  el_0
erlps__stack_backtrace__3 [s_0, el_1, opts_2] =
  let
    head_7 =
      (erlps__lexpr__3 [s_0, (ErlangInt (DBI.fromInt 0)), opts_2])
  in
    (BIF.erlang__op_append
       [el_1,
        (ErlangCons (ErlangInt (DBI.fromInt 58))
           (ErlangCons head_7 ErlangEmptyList))])
erlps__stack_backtrace__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__stack_backtrace__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_clauses__3 :: ErlangFun
erlps__fun_clauses__3 [cs_0, opts_1, (ErlangAtom "unnamed")] =
  let arg_2 = (ErlangFun 2 erlps__fun_clause__2)
  in
    (erlps__nl_clauses__4
       [arg_2,
        (ErlangCons (ErlangInt (DBI.fromInt 59)) ErlangEmptyList),
        opts_1, cs_0])
erlps__fun_clauses__3 [cs_0, opts_1,
                       (ErlangTuple [(ErlangAtom "named"), name_2])]
  =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [c_7, h_8] =
             let match_expr_13 = (erlps__fun_clause__2 [c_7, h_8])
             in
               case match_expr_13 of
                 (ErlangTuple [(ErlangAtom "step"), gl_11, bl_12]) ->
                   let head_16 = (BIF.erlang__atom_to_list__1 [name_2])
                   in
                     (ErlangTuple
                        [(ErlangAtom "step"),
                         (ErlangCons head_16
                            (ErlangCons gl_11 ErlangEmptyList)),
                         bl_12])
                 _ -> (EXC.badmatch match_expr_13)
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (erlps__nl_clauses__4
       [arg_3,
        (ErlangCons (ErlangInt (DBI.fromInt 59)) ErlangEmptyList),
        opts_1, cs_0])
erlps__fun_clauses__3 [arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__fun_clauses__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_clause__2 :: ErlangFun
erlps__fun_clause__2 [(ErlangTuple [(ErlangAtom "clause"), _,
                                    a_0, g_1, b_2]),
                      opts_3]
  =
  let    el_6 = (erlps__args__2 [a_0, opts_3])
  in let gl_10 = (erlps__guard_when__3 [el_6, g_1, opts_3])
  in let bl_13 = (erlps__body__2 [b_2, opts_3])
  in (ErlangTuple [(ErlangAtom "step"), gl_10, bl_13])
erlps__fun_clause__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__fun_clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cond_clauses__2 :: ErlangFun
erlps__cond_clauses__2 [cs_0, opts_1] =
  let arg_2 = (ErlangFun 2 erlps__cond_clause__2)
  in (erlps__clauses__3 [arg_2, opts_1, cs_0])
erlps__cond_clauses__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__cond_clauses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cond_clause__2 :: ErlangFun
erlps__cond_clause__2 [(ErlangTuple [(ErlangAtom "clause"), _,
                                     (ErlangEmptyList),
                                     (ErlangCons (ErlangCons e_0 (ErlangEmptyList)) (ErlangEmptyList)),
                                     b_1]),
                       opts_2]
  =
  let    head_5 = (erlps__lexpr__2 [e_0, opts_2])
  in let tup_el_11 = (erlps__body__2 [b_1, opts_2])
  in
    (ErlangTuple
       [(ErlangAtom "step"),
        (ErlangCons head_5
           (ErlangCons (ErlangAtom " ->") ErlangEmptyList)),
        tup_el_11])
erlps__cond_clause__2 [arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__cond_clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nl_clauses__4 :: ErlangFun
erlps__nl_clauses__4 [type_0, sep_1, opts_2, cs_3] =
  let tup_el_6 = (erlps__lexprs__3 [cs_3, type_0, opts_2])
  in (ErlangTuple [(ErlangAtom "prefer_nl"), sep_1, tup_el_6])
erlps__nl_clauses__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__nl_clauses__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__clauses__3 :: ErlangFun
erlps__clauses__3 [type_0, opts_1, cs_2] =
  let tup_el_7 = (erlps__lexprs__3 [cs_2, type_0, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "prefer_nl"),
        (ErlangCons (ErlangInt (DBI.fromInt 59)) ErlangEmptyList),
        tup_el_7])
erlps__clauses__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__clauses__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lc_quals__2 :: ErlangFun
erlps__lc_quals__2 [qs_0, opts_1] =
  let    arg_8 = (ErlangFun 2 erlps__lc_qual__2)
  in let tup_el_6 = (erlps__lexprs__3 [qs_0, arg_8, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "prefer_nl"),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_6])
erlps__lc_quals__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__lc_quals__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lc_qual__2 :: ErlangFun
erlps__lc_qual__2 [(ErlangTuple [(ErlangAtom "b_generate"), _,
                                 pat_0, e_1]),
                   opts_2]
  =
  let   
    pl_6 =
      (erlps__lexpr__3 [pat_0, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let arg_15 = (make_string " <=")
  in let head_14 = (erlps__leaf__1 [arg_15])
  in let
    tup_el_17 =
      (erlps__lexpr__3 [e_1, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let
    head_9 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons pl_6 (ErlangCons head_14 ErlangEmptyList)),
          tup_el_17])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_9 ErlangEmptyList)])
erlps__lc_qual__2 [(ErlangTuple [(ErlangAtom "generate"), _,
                                 pat_0, e_1]),
                   opts_2]
  =
  let   
    pl_6 =
      (erlps__lexpr__3 [pat_0, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let arg_15 = (make_string " <-")
  in let head_14 = (erlps__leaf__1 [arg_15])
  in let
    tup_el_17 =
      (erlps__lexpr__3 [e_1, (ErlangInt (DBI.fromInt 0)), opts_2])
  in let
    head_9 =
      (ErlangTuple
         [(ErlangAtom "step"),
          (ErlangCons pl_6 (ErlangCons head_14 ErlangEmptyList)),
          tup_el_17])
  in
    (ErlangTuple
       [(ErlangAtom "list"), (ErlangCons head_9 ErlangEmptyList)])
erlps__lc_qual__2 [q_0, opts_1] =
  (erlps__lexpr__3 [q_0, (ErlangInt (DBI.fromInt 0)), opts_1])
erlps__lc_qual__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__lc_qual__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__proper_list__2 :: ErlangFun
erlps__proper_list__2 [es_0, opts_1] =
  let tup_el_8 = (erlps__lexprs__2 [es_0, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
        (ErlangInt (DBI.fromInt 93)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_8])
erlps__proper_list__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__proper_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__improper_list__2 :: ErlangFun
erlps__improper_list__2 [es_0, opts_1] =
  let   
    head_6 =
      (ErlangTuple [(ErlangInt (DBI.fromInt 44)), (ErlangAtom " |")])
  in let tup_el_10 = (erlps__lexprs__2 [es_0, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 91)),
        (ErlangInt (DBI.fromInt 93)),
        (ErlangCons head_6 ErlangEmptyList), tup_el_10])
erlps__improper_list__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__improper_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple__2 :: ErlangFun
erlps__tuple__2 [l_0, opts_1] =
  let arg_3 = (ErlangFun 2 erlps__lexpr__2)
  in (erlps__tuple__3 [l_0, arg_3, opts_1])
erlps__tuple__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__tuple__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tuple__3 :: ErlangFun
erlps__tuple__3 [(ErlangEmptyList), _f_0, _opts_1] =
  let arg_2 = (make_string "{}")
  in (erlps__leaf__1 [arg_2])
erlps__tuple__3 [es_0, f_1, opts_2] =
  let tup_el_9 = (erlps__lexprs__3 [es_0, f_1, opts_2])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 123)),
        (ErlangInt (DBI.fromInt 125)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_9])
erlps__tuple__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__tuple__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args__2 :: ErlangFun
erlps__args__2 [as_0, opts_1] =
  let tup_el_8 = (erlps__lexprs__2 [as_0, opts_1])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), (ErlangInt (DBI.fromInt 40)),
        (ErlangInt (DBI.fromInt 41)),
        (ErlangCons (ErlangInt (DBI.fromInt 44)) ErlangEmptyList),
        tup_el_8])
erlps__args__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__args__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__4 :: ErlangFun
erlps__expr_list__4 [es_0, sep_1, f_2, opts_3] =
  let tup_el_8 = (erlps__lexprs__3 [es_0, f_2, opts_3])
  in
    (ErlangTuple
       [(ErlangAtom "seq"), ErlangEmptyList, ErlangEmptyList, sep_1,
        tup_el_8])
erlps__expr_list__4 [arg_12, arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__expr_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexprs__2 :: ErlangFun
erlps__lexprs__2 [es_0, opts_1] =
  let arg_3 = (ErlangFun 2 erlps__lexpr__2)
  in (erlps__lexprs__3 [es_0, arg_3, opts_1])
erlps__lexprs__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__lexprs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lexprs__3 :: ErlangFun
erlps__lexprs__3 [es_0, f_1, opts_2] =
  (flmap
     (\ lc_5 ->
        case lc_5 of
          e_4 ->
            let
              lc_ret_6 =
                (BIF.erlang__apply__2
                   [f_1, (ErlangCons e_4 (ErlangCons opts_2 ErlangEmptyList))])
            in (ErlangCons lc_ret_6 ErlangEmptyList)
          _ -> ErlangEmptyList)
     es_0)
erlps__lexprs__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__lexprs__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_paren__3 :: ErlangFun
erlps__maybe_paren__3 [p_0, prec_1, expr_2]
  | (weakLt p_0 prec_1) =
  (ErlangCons (ErlangInt (DBI.fromInt 40))
     (ErlangCons expr_2
        (ErlangCons (ErlangInt (DBI.fromInt 41)) ErlangEmptyList)))
erlps__maybe_paren__3 [_p_0, _prec_1, expr_2] = expr_2
erlps__maybe_paren__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__maybe_paren__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__leaf__1 :: ErlangFun
erlps__leaf__1 [s_0] =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "String" "erlps__length__1" [s_0])
  in (ErlangTuple [(ErlangAtom "leaf"), tup_el_2, s_0])
erlps__leaf__1 [arg_5] = (EXC.function_clause unit)
erlps__leaf__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__frmt__2 :: ErlangFun
erlps__frmt__2 [item_0, pp_1] =
  (erlps__frmt__3 [item_0, (ErlangInt (DBI.fromInt 0)), pp_1])
erlps__frmt__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__frmt__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__frmt__3 :: ErlangFun
erlps__frmt__3 [item_0, i_1, pp_2] =
  let    st_3 = (erlps__spacetab__0 [])
  in let wt_4 = (erlps__wordtable__0 [])
  in let
    match_expr_12 = (erlps__f__5 [item_0, i_1, st_3, wt_4, pp_2])
  in
    case match_expr_12 of
      (ErlangTuple [chars_10, _length_11]) ->
        (ErlangCons chars_10 ErlangEmptyList)
      _ -> (EXC.badmatch match_expr_12)
erlps__frmt__3 [arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__frmt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__f__5 :: ErlangFun
erlps__f__5 [nil_0@(ErlangEmptyList), _i0_1, _st_2, _wt_3, _pp_4]
  =
  (ErlangTuple [nil_0, (ErlangInt (DBI.fromInt 0))])
erlps__f__5 [c_0, _i0_1, _st_2, _wt_3, _pp_4] | (isEInt c_0) =
  (ErlangTuple [c_0, (ErlangInt (DBI.fromInt 1))])
erlps__f__5 [(ErlangTuple [(ErlangAtom "leaf"), length_0,
                           chars_1]),
             _i0_2, _st_3, _wt_4, _pp_5]
  =
  (ErlangTuple [chars_1, length_0])
erlps__f__5 [(ErlangCons item_0 items_1), i0_2, st_3, wt_4, pp_5]
  =
  let arg_7 = (erlps__f__5 [item_0, i0_2, st_3, wt_4, pp_5])
  in
    (erlps__consecutive__6 [items_1, arg_7, i0_2, st_3, wt_4, pp_5])
erlps__f__5 [(ErlangTuple [(ErlangAtom "list"), items_0]), i0_1,
             st_2, wt_3, pp_4]
  =
  let
    arg_5 =
      (ErlangTuple
         [(ErlangAtom "seq"), ErlangEmptyList, ErlangEmptyList,
          (ErlangCons ErlangEmptyList ErlangEmptyList), items_0])
  in (erlps__f__5 [arg_5, i0_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "first"), e_0, item_1]),
             i0_2, st_3, wt_4, pp_5]
  =
  let
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "seq"), e_0, ErlangEmptyList,
          (ErlangCons ErlangEmptyList ErlangEmptyList),
          (ErlangCons item_1 ErlangEmptyList)])
  in (erlps__f__5 [arg_6, i0_2, st_3, wt_4, pp_5])
erlps__f__5 [(ErlangTuple [(ErlangAtom "seq"), before_0, after_1,
                           sep_2, litems_3]),
             i0_4, st_5, wt_6, pp_7]
  =
  let   
    bcharssize_13 = (erlps__f__5 [before_0, i0_4, st_5, wt_6, pp_7])
  in let i_16 = (erlps__indent__2 [bcharssize_13, i0_4])
  in let
    charssizel_24 =
      (erlps__fl__7 [litems_3, sep_2, i_16, after_1, st_5, wt_6, pp_7])
  in let match_expr_28 = (erlps__unz__1 [charssizel_24])
  in
    case match_expr_28 of
      (ErlangTuple [charsl_26, sizel_27]) ->
        let
          match_expr_34 =
            (erlps__unz1__1 [(ErlangCons bcharssize_13 ErlangEmptyList)])
        in
          case match_expr_34 of
            (ErlangTuple [bcharsl_32, bsizel_33]) ->
              let    sizes_37 = (BIF.erlang__op_append [bsizel_33, sizel_27])
              in let
                nsepchars_43 =
                  case (ErlangAtom "true") of
                    _ | ((isEList sep_2) && ((/=) sep_2 ErlangEmptyList)) ->
                      let    lop_40 = (BIF.erlang__length__1 [charsl_26])
                      in let
                        arg_39 =
                          (BIF.erlang__op_minus
                             [lop_40, (ErlangInt (DBI.fromInt 1))])
                      in
                        (BIF.erlang__max__2
                           [(ErlangInt (DBI.fromInt 0)), arg_39])
                    _ -> (ErlangInt (DBI.fromInt 0))
                    _ -> (EXC.if_clause unit)
              in let
                case_44 =
                  (erlps__same_line__4 [i0_4, sizes_37, nsepchars_43, pp_7])
              in
                case case_44 of
                  (ErlangTuple [(ErlangAtom "yes"), size_49]) ->
                    let   
                      chars_52 =
                        case (ErlangAtom "true") of
                          _ | (weakGt nsepchars_43
                                 (ErlangInt (DBI.fromInt 0))) ->
                            (erlps__insert_sep__2
                               [charsl_26, (ErlangInt (DBI.fromInt 32))])
                          _ -> charsl_26
                          _ -> (EXC.if_clause unit)
                    in let
                      tup_el_53 = (BIF.erlang__op_append [bcharsl_32, chars_52])
                    in (ErlangTuple [tup_el_53, size_49])
                  (ErlangAtom "no") ->
                    let   
                      charslist_61 =
                        (erlps__handle_step__4
                           [charssizel_24, i_16, st_5, pp_7])
                    in let
                      match_expr_70 =
                        (erlps__maybe_newlines__6
                           [charslist_61, litems_3, i_16, nsepchars_43, st_5,
                            pp_7])
                    in
                      case match_expr_70 of
                        (ErlangTuple [lchars_68, lsize_69]) ->
                          let tup_el_76 = (erlps__nsz__2 [lsize_69, i0_4])
                          in
                            (ErlangTuple
                               [(ErlangCons bcharsl_32
                                   (ErlangCons lchars_68 ErlangEmptyList)),
                                tup_el_76])
                        _ -> (EXC.badmatch match_expr_70)
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_34)
      _ -> (EXC.badmatch match_expr_28)
erlps__f__5 [(ErlangTuple [(ErlangAtom "force_nl"),
                           _extrainfoitem_0, item_1]),
             i_2, st_3, wt_4, pp_5]
  | (weakLt i_2 (ErlangInt (DBI.fromInt 0))) =
  (erlps__f__5 [item_1, i_2, st_3, wt_4, pp_5])
erlps__f__5 [(ErlangTuple [(ErlangAtom "force_nl"),
                           extrainfoitem_0, item_1]),
             i_2, st_3, wt_4, pp_5]
  =
  let
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "prefer_nl"), ErlangEmptyList,
          (ErlangCons extrainfoitem_0
             (ErlangCons item_1 ErlangEmptyList))])
  in (erlps__f__5 [arg_6, i_2, st_3, wt_4, pp_5])
erlps__f__5 [(ErlangTuple [(ErlangAtom "prefer_nl"), sep_0,
                           litems_1]),
             i_2, st_3, wt_4, pp_5]
  | (weakLt i_2 (ErlangInt (DBI.fromInt 0))) =
  let
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "seq"), ErlangEmptyList, ErlangEmptyList, sep_0,
          litems_1])
  in (erlps__f__5 [arg_6, i_2, st_3, wt_4, pp_5])
erlps__f__5 [(ErlangTuple [(ErlangAtom "prefer_nl"), sep_0,
                           litems_1]),
             i0_2, st_3, wt_4, pp_5]
  =
  let   
    charssize2l_13 =
      (erlps__fl__7
         [litems_1, sep_0, i0_2, ErlangEmptyList, st_3, wt_4, pp_5])
  in let match_expr_17 = (erlps__unz__1 [charssize2l_13])
  in
    case match_expr_17 of
      (ErlangTuple [_charsl_15, sizes_16]) ->
        case (ErlangAtom "true") of
          _ | ((==) sizes_16 ErlangEmptyList) ->
            (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
          _ ->
            let   
              tup_el_20 =
                (erlps__insert_newlines__4 [charssize2l_13, i0_2, st_3, pp_5])
            in let
              arg_26 =
                (BIF.do_remote_fun_call "Lists" "erlps__last__1" [sizes_16])
            in let tup_el_25 = (erlps__nsz__2 [arg_26, i0_2])
            in (ErlangTuple [tup_el_20, tup_el_25])
          _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_17)
erlps__f__5 [(ErlangTuple [(ErlangAtom "value"), v_0]), i_1,
             st_2, wt_3, pp_4]
  =
  let arg_5 = (erlps__write_a_value__2 [v_0, pp_4])
  in (erlps__f__5 [arg_5, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "atom"), a_0]), i_1, st_2,
             wt_3, pp_4]
  =
  let arg_5 = (erlps__write_an_atom__2 [a_0, pp_4])
  in (erlps__f__5 [arg_5, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "singleton_atom_type"),
                           a_0]),
             i_1, st_2, wt_3, pp_4]
  =
  let arg_5 = (erlps__write_a_singleton_atom_type__2 [a_0, pp_4])
  in (erlps__f__5 [arg_5, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "char"), c_0]), i_1, st_2,
             wt_3, pp_4]
  =
  let arg_5 = (erlps__write_a_char__2 [c_0, pp_4])
  in (erlps__f__5 [arg_5, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "string"), s_0]), i_1,
             st_2, wt_3, pp_4]
  =
  let arg_5 = (erlps__write_a_string__3 [s_0, i_1, pp_4])
  in (erlps__f__5 [arg_5, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "reserved"), r_0]), i_1,
             st_2, wt_3, pp_4]
  =
  (erlps__f__5 [r_0, i_1, st_2, wt_3, pp_4])
erlps__f__5 [(ErlangTuple [(ErlangAtom "hook"), hookexpr_0,
                           precedence_1, func_2, options_3]),
             i_4, _st_5, _wt_6, _pp_7]
  =
  let   
    chars_13 =
      (BIF.erlang__apply__2
         [func_2,
          (ErlangCons hookexpr_0
             (ErlangCons i_4
                (ErlangCons precedence_1
                   (ErlangCons options_3 ErlangEmptyList))))])
  in let tup_el_15 = (erlps__indentation__2 [chars_13, i_4])
  in (ErlangTuple [chars_13, tup_el_15])
erlps__f__5 [(ErlangTuple [(ErlangAtom "ehook"), hookexpr_0,
                           precedence_1,
                           modfunceas_5@(ErlangTuple [mod_2, func_3, eas_4])]),
             i_6, _st_7, _wt_8, _pp_9]
  =
  let   
    chars_21 =
      (BIF.erlang__apply__3
         [mod_2, func_3,
          (ErlangCons hookexpr_0
             (ErlangCons i_6
                (ErlangCons precedence_1 (ErlangCons modfunceas_5 eas_4))))])
  in let tup_el_23 = (erlps__indentation__2 [chars_21, i_6])
  in (ErlangTuple [chars_21, tup_el_23])
erlps__f__5 [wordname_0, _i_1, _st_2, wt_3, _pp_4]
  | (isEAtom wordname_0) =
  (erlps__word__2 [wordname_0, wt_3])
erlps__f__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__f__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fl__7 :: ErlangFun
erlps__fl__7 [(ErlangEmptyList), _sep_0, i0_1, after_2, st_3,
              wt_4, pp_5]
  =
  let    head_7 = (erlps__f__5 [after_2, i0_1, st_3, wt_4, pp_5])
  in let
    head_14 =
      (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
  in
    (ErlangCons
       (ErlangCons head_7 (ErlangCons head_14 ErlangEmptyList))
       ErlangEmptyList)
erlps__fl__7 [citems_0, sep0_1, i0_2, after_3, st_4, wt_5, pp_6]
  =
  let   
    f_126 =
      (ErlangFun 2
         let
           lambda_7 [(ErlangTuple [(ErlangAtom "step"), item1_10,
                                   item2_11]),
                     s_12]
             =
             let    head_13 = (erlps__f__5 [item1_10, i0_2, st_4, wt_5, pp_6])
             in let
               arg_28 =
                 case pp_6 of
                   (ErlangTuple arr_31) | (DM.Just field_30) <-
                                            ((arr_31 DA.!! 6)) ->
                     field_30
                   _ -> (EXC.badrecord (ErlangAtom "pp"))
             in let arg_26 = (erlps__incr__2 [i0_2, arg_28])
             in let
               head_20 =
                 (erlps__f__5
                    [(ErlangCons item2_11 (ErlangCons s_12 ErlangEmptyList)),
                     arg_26, st_4, wt_5, pp_6])
             in (ErlangCons head_13 (ErlangCons head_20 ErlangEmptyList))
           lambda_7 [(ErlangTuple [(ErlangAtom "cstep"), item1_36,
                                   item2_37]),
                     s_38]
             =
             let
               charsize1_44 = (erlps__f__5 [item1_36, i0_2, st_4, wt_5, pp_6])
             in
               case charsize1_44 of
                 (ErlangTuple [_, sz1_45]) ->
                   case (ErlangAtom "true") of
                     _ | ((ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let
                                    lop_47 =
                                      (BIF.erlang__is_integer__1 [sz1_45])
                                  in
                                    case lop_47 of
                                      (ErlangAtom "false") ->
                                        (ErlangAtom "false")
                                      (ErlangAtom "true") ->
                                        let
                                          rop_50 =
                                            case pp_6 of
                                              (ErlangTuple arr_53) | (DM.Just field_52) <-
                                                                       ((arr_53 DA.!!
                                                                           6)) ->
                                                field_52
                                              _ ->
                                                (EXC.badrecord
                                                   (ErlangAtom "pp"))
                                        in
                                          (BIF.erlang__op_lesser
                                             [sz1_45, rop_50])
                                      _ -> (EXC.badarg1 lop_47)))) ->
                       let    arg_55 = (make_string " ")
                       in let head_54 = (erlps__leaf__1 [arg_55])
                       in let
                         head_62 =
                           (erlps__consecutive__6
                              [(ErlangCons head_54
                                  (ErlangCons item2_37
                                     (ErlangCons s_38 ErlangEmptyList))),
                               charsize1_44, i0_2, st_4, wt_5, pp_6])
                       in let
                         head_70 =
                           (ErlangTuple
                              [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
                       in
                         (ErlangCons head_62
                            (ErlangCons head_70 ErlangEmptyList))
                     _ ->
                       let   
                         arg_84 =
                           case pp_6 of
                             (ErlangTuple arr_87) | (DM.Just field_86) <-
                                                      ((arr_87 DA.!! 6)) ->
                               field_86
                             _ -> (EXC.badrecord (ErlangAtom "pp"))
                       in let arg_82 = (erlps__incr__2 [i0_2, arg_84])
                       in let
                         head_76 =
                           (erlps__f__5
                              [(ErlangCons item2_37
                                  (ErlangCons s_38 ErlangEmptyList)),
                               arg_82, st_4, wt_5, pp_6])
                       in
                         (ErlangCons charsize1_44
                            (ErlangCons head_76 ErlangEmptyList))
                     _ -> (EXC.if_clause unit)
                 _ -> (EXC.badmatch charsize1_44)
           lambda_7 [(ErlangTuple [(ErlangAtom "reserved"), word_92]), s_93]
             =
             let   
               head_94 =
                 (erlps__f__5
                    [(ErlangCons word_92 (ErlangCons s_93 ErlangEmptyList)),
                     i0_2, st_4, wt_5, pp_6])
             in let
               head_105 =
                 (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
             in (ErlangCons head_94 (ErlangCons head_105 ErlangEmptyList))
           lambda_7 [item_109, s_110] =
             let   
               head_111 =
                 (erlps__f__5
                    [(ErlangCons item_109 (ErlangCons s_110 ErlangEmptyList)),
                     i0_2, st_4, wt_5, pp_6])
             in let
               head_122 =
                 (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
             in (ErlangCons head_111 (ErlangCons head_122 ErlangEmptyList))
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let match_expr_130 = (erlps__sep__1 [sep0_1])
  in
    case match_expr_130 of
      (ErlangTuple [sep_128, lastsep_129]) ->
        (erlps__fl1__5 [citems_0, f_126, sep_128, lastsep_129, after_3])
      _ -> (EXC.badmatch match_expr_130)
erlps__fl__7 [arg_136, arg_137, arg_138, arg_139, arg_140,
              arg_141, arg_142]
  =
  (EXC.function_clause unit)
erlps__fl__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sep__1 :: ErlangFun
erlps__sep__1 [(ErlangCons (ErlangTuple [s_0,
                                         ls_1]) (ErlangEmptyList))]
  =
  (ErlangTuple
     [(ErlangCons s_0 ErlangEmptyList),
      (ErlangCons ls_1 ErlangEmptyList)])
erlps__sep__1 [sep_0@(ErlangTuple [_, _])] = sep_0
erlps__sep__1 [s_0] = (ErlangTuple [s_0, s_0])
erlps__sep__1 [arg_3] = (EXC.function_clause unit)
erlps__sep__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fl1__5 :: ErlangFun
erlps__fl1__5 [(ErlangCons citem_0 (ErlangEmptyList)), f_1,
               _sep_2, _lastsep_3, after_4]
  =
  let
    head_5 =
      (BIF.erlang__apply__2
         [f_1, (ErlangCons citem_0 (ErlangCons after_4 ErlangEmptyList))])
  in (ErlangCons head_5 ErlangEmptyList)
erlps__fl1__5 [(ErlangCons citem1_0 (ErlangCons citem2_1 (ErlangEmptyList))),
               f_2, _sep_3, lastsep_4, after_5]
  =
  let   
    head_6 =
      (BIF.erlang__apply__2
         [f_2,
          (ErlangCons citem1_0 (ErlangCons lastsep_4 ErlangEmptyList))])
  in let
    head_11 =
      (BIF.erlang__apply__2
         [f_2,
          (ErlangCons citem2_1 (ErlangCons after_5 ErlangEmptyList))])
  in (ErlangCons head_6 (ErlangCons head_11 ErlangEmptyList))
erlps__fl1__5 [(ErlangCons citem_0 citems_1), f_2, sep_3,
               lastsep_4, after_5]
  =
  let   
    head_6 =
      (BIF.erlang__apply__2
         [f_2, (ErlangCons citem_0 (ErlangCons sep_3 ErlangEmptyList))])
  in let
    tail_10 =
      (erlps__fl1__5 [citems_1, f_2, sep_3, lastsep_4, after_5])
  in (ErlangCons head_6 tail_10)
erlps__fl1__5 [arg_16, arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__fl1__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__consecutive__6 :: ErlangFun
erlps__consecutive__6 [items_0, charsize1_1, i0_2, st_3, wt_4,
                       pp_5]
  =
  let   
    arg_6 =
      (ErlangFun 2
         let
           lambda_7 [item_10, len_11] =
             let   
               charssize_17 = (erlps__f__5 [item_10, len_11, st_3, wt_4, pp_5])
             in let tup_el_19 = (erlps__indent__2 [charssize_17, len_11])
             in (ErlangTuple [charssize_17, tup_el_19])
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let arg_22 = (erlps__indent__2 [charsize1_1, i0_2])
  in let
    match_expr_28 =
      (BIF.do_remote_fun_call "Lists" "erlps__mapfoldl__3"
         [arg_6, arg_22, items_0])
  in
    case match_expr_28 of
      (ErlangTuple [charssizes_26, _length_27]) ->
        let
          match_expr_34 =
            (erlps__unz1__1 [(ErlangCons charsize1_1 charssizes_26)])
        in
          case match_expr_34 of
            (ErlangTuple [charsl_32, sizel_33]) ->
              let tup_el_36 = (erlps__line_size__1 [sizel_33])
              in (ErlangTuple [charsl_32, tup_el_36])
            _ -> (EXC.badmatch match_expr_34)
      _ -> (EXC.badmatch match_expr_28)
erlps__consecutive__6 [arg_38, arg_39, arg_40, arg_41, arg_42,
                       arg_43]
  =
  (EXC.function_clause unit)
erlps__consecutive__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unz__1 :: ErlangFun
erlps__unz__1 [charssizesl_0] =
  let
    arg_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1"
         [charssizesl_0])
  in (erlps__unz1__1 [arg_1])
erlps__unz__1 [arg_3] = (EXC.function_clause unit)
erlps__unz__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unz1__1 :: ErlangFun
erlps__unz1__1 [charsizes_0] =
  let arg_1 = (erlps__nonzero__1 [charsizes_0])
  in (BIF.do_remote_fun_call "Lists" "erlps__unzip__1" [arg_1])
erlps__unz1__1 [arg_3] = (EXC.function_clause unit)
erlps__unz1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nonzero__1 :: ErlangFun
erlps__nonzero__1 [charsizes_0] =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [(ErlangTuple [_, sz_4])] =
             (BIF.erlang__op_exactNeq [sz_4, (ErlangInt (DBI.fromInt 0))])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__filter__2"
       [arg_1, charsizes_0])
erlps__nonzero__1 [arg_8] = (EXC.function_clause unit)
erlps__nonzero__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_newlines__6 :: ErlangFun
erlps__maybe_newlines__6 [(ErlangCons (ErlangTuple [chars_0,
                                                    size_1]) (ErlangEmptyList)),
                          (ErlangEmptyList), _i_2, _nsepchars_3, _st_4, _pp_5]
  =
  (ErlangTuple [chars_0, size_1])
erlps__maybe_newlines__6 [charssizelist_0, items_1, i_2,
                          nsepchars_3, st_4, pp_5]
  | (weakGeq i_2 (ErlangInt (DBI.fromInt 0))) =
  let arg_10 = (erlps__nl_indent__2 [i_2, st_4])
  in
    (erlps__maybe_sep__6
       [charssizelist_0, items_1, i_2, nsepchars_3, arg_10, pp_5])
erlps__maybe_newlines__6 [arg_14, arg_15, arg_16, arg_17, arg_18,
                          arg_19]
  =
  (EXC.function_clause unit)
erlps__maybe_newlines__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_sep__6 :: ErlangFun
erlps__maybe_sep__6 [(ErlangCons (ErlangTuple [chars1_0,
                                               size1_1]) charssizel_2),
                     (ErlangCons item_3 items_4), i0_5, nsepchars_6, sep_7,
                     pp_8]
  =
  let    case_9 = (erlps__classify_item__1 [item_3])
  in let
    i1_18 =
      case case_9 of
        (ErlangAtom "atomic") -> (BIF.erlang__op_plus [i0_5, size1_1])
        _ ->
          let
            lop_13 =
              case pp_8 of
                (ErlangTuple arr_16) | (DM.Just field_15) <-
                                         ((arr_16 DA.!! 5)) ->
                  field_15
                _ -> (EXC.badrecord (ErlangAtom "pp"))
          in (BIF.erlang__op_plus [lop_13, (ErlangInt (DBI.fromInt 1))])
        something_else -> (EXC.case_clause something_else)
  in
    (erlps__maybe_sep1__9
       [charssizel_2, items_4, i0_5, i1_18, sep_7, nsepchars_6, size1_1,
        (ErlangCons chars1_0 ErlangEmptyList), pp_8])
erlps__maybe_sep__6 [arg_30, arg_31, arg_32, arg_33, arg_34,
                     arg_35]
  =
  (EXC.function_clause unit)
erlps__maybe_sep__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maybe_sep1__9 :: ErlangFun
erlps__maybe_sep1__9 [(ErlangCons (ErlangTuple [chars_0,
                                                size_1]) charssizel_2),
                      (ErlangCons item_3 items_4), i0_5, i_6, sep_7,
                      nsepchars_8, sz0_9, a_10, pp_11]
  =
  let case_12 = (erlps__classify_item__1 [item_3])
  in
    case case_12 of
      (ErlangAtom "atomic") | (isEInt size_1) ->
        let   
          size1_16 =
            (BIF.erlang__op_plus [size_1, (ErlangInt (DBI.fromInt 1))])
        in let i1_19 = (BIF.erlang__op_plus [i_6, size1_16])
        in
          case (ErlangAtom "true") of
            _ | ((ErlangAtom "true") ==
                   (falsifyErrors
                      (\ _ ->
                         let
                           rop_21 =
                             case pp_11 of
                               (ErlangTuple arr_24) | (DM.Just field_23) <-
                                                        ((arr_24 DA.!! 5)) ->
                                 field_23
                               _ -> (EXC.badrecord (ErlangAtom "pp"))
                         in (BIF.erlang__op_lesserEq [i1_19, rop_21])))) ->
              let   
                a1_31 =
                  case (ErlangAtom "true") of
                    _ | (weakGt nsepchars_8 (ErlangInt (DBI.fromInt 0))) ->
                      (ErlangCons chars_0
                         (ErlangCons (ErlangInt (DBI.fromInt 32)) a_10))
                    _ -> (ErlangCons chars_0 a_10)
                    _ -> (EXC.if_clause unit)
              in let arg_38 = (BIF.erlang__op_plus [sz0_9, size1_16])
              in
                (erlps__maybe_sep1__9
                   [charssizel_2, items_4, i0_5, i1_19, sep_7, nsepchars_8,
                    arg_38, a1_31, pp_11])
            _ ->
              let arg_51 = (BIF.erlang__op_plus [i0_5, size_1])
              in
                (erlps__maybe_sep1__9
                   [charssizel_2, items_4, i0_5, arg_51, sep_7, nsepchars_8,
                    size1_16, (ErlangCons chars_0 (ErlangCons sep_7 a_10)),
                    pp_11])
            _ -> (EXC.if_clause unit)
      _ ->
        let   
          lop_68 =
            case pp_11 of
              (ErlangTuple arr_71) | (DM.Just field_70) <-
                                       ((arr_71 DA.!! 5)) ->
                field_70
              _ -> (EXC.badrecord (ErlangAtom "pp"))
        in let
          arg_67 =
            (BIF.erlang__op_plus [lop_68, (ErlangInt (DBI.fromInt 1))])
        in
          (erlps__maybe_sep1__9
             [charssizel_2, items_4, i0_5, arg_67, sep_7, nsepchars_8,
              (ErlangInt (DBI.fromInt 0)),
              (ErlangCons chars_0 (ErlangCons sep_7 a_10)), pp_11])
      something_else -> (EXC.case_clause something_else)
erlps__maybe_sep1__9 [_charssizel_0, _items_1, _io_2, _i_3,
                      _sep_4, _nsepchars_5, sz_6, a_7, _pp_8]
  =
  let
    tup_el_9 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [a_7])
  in (ErlangTuple [tup_el_9, sz_6])
erlps__maybe_sep1__9 [arg_12, arg_13, arg_14, arg_15, arg_16,
                      arg_17, arg_18, arg_19, arg_20]
  =
  (EXC.function_clause unit)
erlps__maybe_sep1__9 args =
  (EXC.badarity
     (ErlangFun 9 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_newlines__4 :: ErlangFun
erlps__insert_newlines__4 [charssizesl_0, i_1, st_2, pp_3]
  | (weakGeq i_1 (ErlangInt (DBI.fromInt 0))) =
  let   
    arg_4 = (erlps__handle_step__4 [charssizesl_0, i_1, st_2, pp_3])
  in let match_expr_10 = (erlps__unz1__1 [arg_4])
  in
    case match_expr_10 of
      (ErlangTuple [charsl_9, _]) ->
        (erlps__insert_nl__3 [charsl_9, i_1, st_2])
      _ -> (EXC.badmatch match_expr_10)
erlps__insert_newlines__4 [arg_14, arg_15, arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__insert_newlines__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_step__4 :: ErlangFun
erlps__handle_step__4 [charssizesl_0, i_1, st_2, pp_3] =
  let
    arg_4 =
      (ErlangFun 1
         let
           lambda_5 [(ErlangCons (ErlangTuple [_c1_7,
                                               (ErlangInt num_8)]) (ErlangCons (ErlangTuple [_c2_9,
                                                                                             (ErlangInt num_10)]) (ErlangEmptyList)))]
             | ((ErlangInt num_8) == (ErlangInt (DBI.fromInt 0)))
             , ((ErlangInt num_10) == (ErlangInt (DBI.fromInt 0))) =
             (ErlangTuple [ErlangEmptyList, (ErlangInt (DBI.fromInt 0))])
           lambda_5 [(ErlangCons (ErlangTuple [c1_13,
                                               sz1_14]) (ErlangCons (ErlangTuple [_c2_15,
                                                                                  (ErlangInt num_16)]) (ErlangEmptyList)))]
             | ((ErlangInt num_16) == (ErlangInt (DBI.fromInt 0))) =
             (ErlangTuple [c1_13, sz1_14])
           lambda_5 [(ErlangCons (ErlangTuple [c1_19,
                                               sz1_20]) (ErlangCons (ErlangTuple [c2_21,
                                                                                  sz2_22]) (ErlangEmptyList)))]
             | (weakGt sz2_22 (ErlangInt (DBI.fromInt 0))) =
             let   
               rop_31 =
                 case pp_3 of
                   (ErlangTuple arr_34) | (DM.Just field_33) <-
                                            ((arr_34 DA.!! 6)) ->
                     field_33
                   _ -> (EXC.badrecord (ErlangAtom "pp"))
             in let arg_29 = (BIF.erlang__op_plus [i_1, rop_31])
             in let
               tup_el_23 =
                 (erlps__insert_nl__3
                    [(ErlangCons c1_19 (ErlangCons c2_21 ErlangEmptyList)),
                     arg_29, st_2])
             in let
               tup_el_36 =
                 (erlps__line_size__1
                    [(ErlangCons sz1_20 (ErlangCons sz2_22 ErlangEmptyList))])
             in (ErlangTuple [tup_el_23, tup_el_36])
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__map__2"
       [arg_4, charssizesl_0])
erlps__handle_step__4 [arg_43, arg_44, arg_45, arg_46] =
  (EXC.function_clause unit)
erlps__handle_step__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_nl__3 :: ErlangFun
erlps__insert_nl__3 [charsl_0, i_1, st_2] =
  let arg_4 = (erlps__nl_indent__2 [i_1, st_2])
  in (erlps__insert_sep__2 [charsl_0, arg_4])
erlps__insert_nl__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__insert_nl__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_sep__2 :: ErlangFun
erlps__insert_sep__2 [(ErlangCons chars1_0 charsl_1), sep_2] =
  let
    tail_4 =
      (flmap
         (\ lc_7 ->
            case lc_7 of
              chars_6 ->
                (ErlangCons
                   (ErlangCons sep_2 (ErlangCons chars_6 ErlangEmptyList))
                   ErlangEmptyList)
              _ -> ErlangEmptyList)
         charsl_1)
  in (ErlangCons chars1_0 tail_4)
erlps__insert_sep__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__insert_sep__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nl_indent__2 :: ErlangFun
erlps__nl_indent__2 [(ErlangInt num_0), _t_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangInt (DBI.fromInt 10))
erlps__nl_indent__2 [i_0, t_1]
  | (weakGt i_0 (ErlangInt (DBI.fromInt 0))) =
  let tail_3 = (erlps__spaces__2 [i_0, t_1])
  in (ErlangCons (ErlangInt (DBI.fromInt 10)) tail_3)
erlps__nl_indent__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__nl_indent__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__classify_item__1 :: ErlangFun
erlps__classify_item__1 [(ErlangTuple [(ErlangAtom "atom"), _])]
  =
  (ErlangAtom "atomic")
erlps__classify_item__1 [(ErlangTuple [(ErlangAtom "singleton_atom_type"),
                                       _])]
  =
  (ErlangAtom "atomic")
erlps__classify_item__1 [atom_0] | (isEAtom atom_0) =
  (ErlangAtom "atomic")
erlps__classify_item__1 [(ErlangTuple [(ErlangAtom "leaf"), _,
                                       _])]
  =
  (ErlangAtom "atomic")
erlps__classify_item__1 [_] = (ErlangAtom "complex")
erlps__classify_item__1 [arg_0] = (EXC.function_clause unit)
erlps__classify_item__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__same_line__4 :: ErlangFun
erlps__same_line__4 [i0_0, sizel_1, nsepchars_2, pp_3] =
  (EXC.tryCatch
     (\ _ ->
        let   
          lop_4 =
            (BIF.do_remote_fun_call "Lists" "erlps__sum__1" [sizel_1])
        in let size_7 = (BIF.erlang__op_plus [lop_4, nsepchars_2])
        in let lop_8 = (erlps__incr__2 [i0_0, size_7])
        in let
          rop_11 =
            case pp_3 of
              (ErlangTuple arr_14) | (DM.Just field_13) <-
                                       ((arr_14 DA.!! 5)) ->
                field_13
              _ -> (EXC.badrecord (ErlangAtom "pp"))
        in let match_expr_15 = (BIF.erlang__op_lesserEq [lop_8, rop_11])
        in
          case match_expr_15 of
            (ErlangAtom "true") -> (ErlangTuple [(ErlangAtom "yes"), size_7])
            _ -> (EXC.badmatch match_expr_15))
     (\ ex_19 ->
        case ex_19 of
          (ErlangTuple [_, _, _]) -> (ErlangAtom "no")
          ex_19 -> (EXC.raise ex_19)))
erlps__same_line__4 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__same_line__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line_size__1 :: ErlangFun
erlps__line_size__1 [sizel_0] =
  (erlps__line_size__3
     [sizel_0, (ErlangInt (DBI.fromInt 0)), (ErlangAtom "false")])
erlps__line_size__1 [arg_4] = (EXC.function_clause unit)
erlps__line_size__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__line_size__3 :: ErlangFun
erlps__line_size__3 [(ErlangEmptyList), size_0,
                     (ErlangAtom "false")]
  =
  size_0
erlps__line_size__3 [(ErlangEmptyList), size_0,
                     (ErlangAtom "true")]
  =
  (ErlangTuple [(ErlangAtom "line"), size_0])
erlps__line_size__3 [(ErlangCons (ErlangTuple [(ErlangAtom "line"),
                                               len_0]) sizel_1),
                     _, _]
  =
  (erlps__line_size__3 [sizel_1, len_0, (ErlangAtom "true")])
erlps__line_size__3 [(ErlangCons sz_0 sizel_1), sizesofar_2,
                     lf_3]
  =
  let arg_5 = (BIF.erlang__op_plus [sizesofar_2, sz_0])
  in (erlps__line_size__3 [sizel_1, arg_5, lf_3])
erlps__line_size__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__line_size__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nsz__2 :: ErlangFun
erlps__nsz__2 [sz_1@(ErlangTuple [(ErlangAtom "line"), _len_0]),
               _i_2]
  =
  sz_1
erlps__nsz__2 [size_0, i_1]
  | (weakGeq i_1 (ErlangInt (DBI.fromInt 0))) =
  let tup_el_3 = (BIF.erlang__op_plus [size_0, i_1])
  in (ErlangTuple [(ErlangAtom "line"), tup_el_3])
erlps__nsz__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__nsz__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indent__2 :: ErlangFun
erlps__indent__2 [(ErlangTuple [_chars_0,
                                (ErlangTuple [(ErlangAtom "line"), len_1])]),
                  _i_2]
  =
  len_1
erlps__indent__2 [(ErlangTuple [_chars_0, size_1]), i_2] =
  (erlps__incr__2 [i_2, size_1])
erlps__indent__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__indent__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__incr__2 :: ErlangFun
erlps__incr__2 [i_0, _incr_1]
  | (weakLt i_0 (ErlangInt (DBI.fromInt 0))) =
  i_0
erlps__incr__2 [i_0, incr_1] =
  (BIF.erlang__op_plus [i_0, incr_1])
erlps__incr__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__incr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indentation__2 :: ErlangFun
erlps__indentation__2 [e_0, i_1]
  | (weakLt i_1 (ErlangInt (DBI.fromInt 0))) =
  (BIF.do_remote_fun_call "String" "erlps__length__1" [e_0])
erlps__indentation__2 [e_0, i0_1] =
  let   
    i_4 =
      (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__indentation__2"
         [e_0, i0_1])
  in let case_5 = (erlps__has_nl__1 [e_0])
  in
    case case_5 of
      (ErlangAtom "true") -> (ErlangTuple [(ErlangAtom "line"), i_4])
      (ErlangAtom "false") -> i_4
      something_else -> (EXC.case_clause something_else)
erlps__indentation__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__indentation__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__has_nl__1 :: ErlangFun
erlps__has_nl__1 [(ErlangCons (ErlangInt num_0) _)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangAtom "true")
erlps__has_nl__1 [(ErlangCons c_0 cs_1)] | (isEInt c_0) =
  (erlps__has_nl__1 [cs_1])
erlps__has_nl__1 [(ErlangCons c_0 cs_1)] =
  let lop_2 = (erlps__has_nl__1 [c_0])
  in
    case lop_2 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") -> (erlps__has_nl__1 [cs_1])
      _ -> (EXC.badarg1 lop_2)
erlps__has_nl__1 [(ErlangEmptyList)] = (ErlangAtom "false")
erlps__has_nl__1 [arg_0] = (EXC.function_clause unit)
erlps__has_nl__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_a_value__2 :: ErlangFun
erlps__write_a_value__2 [v_0, pp_1] =
  let arg_2 = (erlps__write_value__2 [v_0, pp_1])
  in (erlps__flat_leaf__1 [arg_2])
erlps__write_a_value__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__write_a_value__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_an_atom__2 :: ErlangFun
erlps__write_an_atom__2 [a_0, pp_1] =
  let arg_2 = (erlps__write_atom__2 [a_0, pp_1])
  in (erlps__flat_leaf__1 [arg_2])
erlps__write_an_atom__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__write_an_atom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_a_singleton_atom_type__2 :: ErlangFun
erlps__write_a_singleton_atom_type__2 [a_0, pp_1] =
  let arg_2 = (erlps__write_singleton_atom_type__2 [a_0, pp_1])
  in (erlps__flat_leaf__1 [arg_2])
erlps__write_a_singleton_atom_type__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__write_a_singleton_atom_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_a_char__2 :: ErlangFun
erlps__write_a_char__2 [c_0, pp_1] =
  let arg_2 = (erlps__write_char__2 [c_0, pp_1])
  in (erlps__flat_leaf__1 [arg_2])
erlps__write_a_char__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__write_a_char__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_a_string__3 :: ErlangFun
erlps__write_a_string__3 [s_0, i_1, pp_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_6 =
                 (BIF.erlang__op_lesser [i_1, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_6 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [s_0, ErlangEmptyList])
                 _ -> (EXC.badarg1 lop_6)))) =
  let arg_3 = (erlps__write_string__2 [s_0, pp_2])
  in (erlps__flat_leaf__1 [arg_3])
erlps__write_a_string__3 [s_0, i_1, pp_2] =
  let   
    lop_4 =
      case pp_2 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 5)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in let arg_3 = (BIF.erlang__op_minus [lop_4, i_1])
  in let
    len_10 =
      (BIF.erlang__max__2 [arg_3, (ErlangInt (DBI.fromInt 5))])
  in let
    tup_el_12 =
      (erlps__write_a_string__4 [s_0, len_10, len_10, pp_2])
  in (ErlangTuple [(ErlangAtom "list"), tup_el_12])
erlps__write_a_string__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__write_a_string__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_a_string__4 :: ErlangFun
erlps__write_a_string__4 [(ErlangEmptyList), _n_0, _len_1, _pp_2]
  =
  ErlangEmptyList
erlps__write_a_string__4 [s_0, n_1, len_2, pp_3] =
  let   
    ss_7 =
      (BIF.do_remote_fun_call "String" "erlps__slice__3"
         [s_0, (ErlangInt (DBI.fromInt 0)), n_1])
  in let sl_10 = (erlps__write_string__2 [ss_7, pp_3])
  in let
    lop_13 =
      (BIF.do_remote_fun_call "String" "erlps__length__1" [sl_10])
  in let lop_12 = (BIF.erlang__op_greater [lop_13, len_2])
  in let
    rop_16 =
      (BIF.erlang__op_greater [n_1, (ErlangInt (DBI.fromInt 5))])
  in let case_11 = (BIF.erlang__op_and [lop_12, rop_16])
  in
    case case_11 of
      (ErlangAtom "true") ->
        let
          arg_20 =
            (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 1))])
        in (erlps__write_a_string__4 [s_0, arg_20, len_2, pp_3])
      (ErlangAtom "false") ->
        let    head_25 = (erlps__flat_leaf__1 [sl_10])
        in let
          arg_30 =
            (BIF.do_remote_fun_call "String" "erlps__length__1" [ss_7])
        in let
          arg_28 =
            (BIF.do_remote_fun_call "String" "erlps__slice__2" [s_0, arg_30])
        in let
          tail_27 = (erlps__write_a_string__4 [arg_28, len_2, len_2, pp_3])
        in (ErlangCons head_25 tail_27)
      something_else -> (EXC.case_clause something_else)
erlps__write_a_string__4 [arg_35, arg_36, arg_37, arg_38] =
  (EXC.function_clause unit)
erlps__write_a_string__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flat_leaf__1 :: ErlangFun
erlps__flat_leaf__1 [s_0] =
  let   
    l_2 = (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [s_0])
  in let
    tup_el_4 =
      (BIF.do_remote_fun_call "String" "erlps__length__1" [l_2])
  in (ErlangTuple [(ErlangAtom "leaf"), tup_el_4, l_2])
erlps__flat_leaf__1 [arg_7] = (EXC.function_clause unit)
erlps__flat_leaf__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_value__2 :: ErlangFun
erlps__write_value__2 [v_0, pp_1] =
  let
    fun_3 =
      case pp_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 1)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in
    (BIF.erlang__apply__2 [fun_3, (ErlangCons v_0 ErlangEmptyList)])
erlps__write_value__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__write_value__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_atom__2 :: ErlangFun
erlps__write_atom__2 [a_0, pp_1] =
  let
    fun_3 =
      case pp_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 1)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in
    (BIF.erlang__apply__2 [fun_3, (ErlangCons a_0 ErlangEmptyList)])
erlps__write_atom__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__write_atom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_singleton_atom_type__2 :: ErlangFun
erlps__write_singleton_atom_type__2 [a_0, pp_1] =
  let
    fun_3 =
      case pp_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 2)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in
    (BIF.erlang__apply__2 [fun_3, (ErlangCons a_0 ErlangEmptyList)])
erlps__write_singleton_atom_type__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__write_singleton_atom_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string__2 :: ErlangFun
erlps__write_string__2 [s_0, pp_1] =
  let
    fun_3 =
      case pp_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 3)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in
    (BIF.erlang__apply__2 [fun_3, (ErlangCons s_0 ErlangEmptyList)])
erlps__write_string__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__write_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_char__2 :: ErlangFun
erlps__write_char__2 [c_0, pp_1] =
  let
    fun_3 =
      case pp_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 4)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "pp"))
  in
    (BIF.erlang__apply__2 [fun_3, (ErlangCons c_0 ErlangEmptyList)])
erlps__write_char__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__write_char__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__a0__0 :: ErlangFun
erlps__a0__0 [] =
  (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
     [(ErlangInt (DBI.fromInt 0))])
erlps__a0__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spacetab__0 :: ErlangFun
erlps__spacetab__0 [] =
  let   
    arg_0 =
      (ErlangFun 2
         let
           lambda_1 [_, a_4] =
             (ErlangTuple
                [a_4, (ErlangCons (ErlangInt (DBI.fromInt 32)) a_4)])
           lambda_1 [arg_2, arg_3] = (EXC.function_clause unit)
           lambda_1 args = (EXC.badarity (ErlangFun 2 lambda_1) args)
         in lambda_1)
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__seq__2"
         [(ErlangInt (DBI.fromInt 0)), (ErlangInt (DBI.fromInt 30))])
  in let
    match_expr_14 =
      (BIF.do_remote_fun_call "Lists" "erlps__mapfoldl__3"
         [arg_0, ErlangEmptyList, arg_10])
  in
    case match_expr_14 of
      (ErlangTuple [(ErlangCons _ l_13), _]) ->
        (BIF.erlang__list_to_tuple__1 [l_13])
      _ -> (EXC.badmatch match_expr_14)
erlps__spacetab__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spaces__2 :: ErlangFun
erlps__spaces__2 [n_0, t_1]
  | (weakLeq n_0 (ErlangInt (DBI.fromInt 30))) =
  (BIF.erlang__element__2 [n_0, t_1])
erlps__spaces__2 [n_0, t_1] =
  let   
    head_2 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 30)), t_1])
  in let
    arg_6 =
      (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 30))])
  in let tail_5 = (erlps__spaces__2 [arg_6, t_1])
  in (ErlangCons head_2 tail_5)
erlps__spaces__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__spaces__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__wordtable__0 :: ErlangFun
erlps__wordtable__0 [] =
  let    head_1 = (make_string " ->")
  in let head_3 = (make_string " =")
  in let head_5 = (make_string "<<")
  in let head_7 = (make_string ">>")
  in let head_9 = (make_string "[]")
  in let head_11 = (make_string "after")
  in let head_13 = (make_string "begin")
  in let head_15 = (make_string "case")
  in let head_17 = (make_string "catch")
  in let head_19 = (make_string "end")
  in let head_21 = (make_string "fun")
  in let head_23 = (make_string "if")
  in let head_25 = (make_string "of")
  in let head_27 = (make_string "receive")
  in let head_29 = (make_string "try")
  in let head_31 = (make_string "when")
  in let head_33 = (make_string " ::")
  in let head_35 = (make_string "..")
  in let head_37 = (make_string " |")
  in let
    l_48 =
      (flmap
         (\ lc_40 ->
            case lc_40 of
              w_39 ->
                let match_expr_45 = (erlps__leaf__1 [w_39])
                in
                  case match_expr_45 of
                    (ErlangTuple [(ErlangAtom "leaf"), sz_43, s_44]) ->
                      let lc_ret_41 = (ErlangTuple [s_44, sz_43])
                      in (ErlangCons lc_ret_41 ErlangEmptyList)
                    _ -> (EXC.badmatch match_expr_45)
              _ -> ErlangEmptyList)
         (ErlangCons head_1
            (ErlangCons head_3
               (ErlangCons head_5
                  (ErlangCons head_7
                     (ErlangCons head_9
                        (ErlangCons head_11
                           (ErlangCons head_13
                              (ErlangCons head_15
                                 (ErlangCons head_17
                                    (ErlangCons head_19
                                       (ErlangCons head_21
                                          (ErlangCons head_23
                                             (ErlangCons head_25
                                                (ErlangCons head_27
                                                   (ErlangCons head_29
                                                      (ErlangCons head_31
                                                         (ErlangCons head_33
                                                            (ErlangCons head_35
                                                               (ErlangCons
                                                                  head_37
                                                                  ErlangEmptyList))))))))))))))))))))
  in (BIF.erlang__list_to_tuple__1 [l_48])
erlps__wordtable__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__word__2 :: ErlangFun
erlps__word__2 [(ErlangAtom " ->"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), wt_0])
erlps__word__2 [(ErlangAtom " ="), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), wt_0])
erlps__word__2 [(ErlangAtom "<<"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 3)), wt_0])
erlps__word__2 [(ErlangAtom ">>"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 4)), wt_0])
erlps__word__2 [(ErlangAtom "[]"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 5)), wt_0])
erlps__word__2 [(ErlangAtom "after"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 6)), wt_0])
erlps__word__2 [(ErlangAtom "begin"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 7)), wt_0])
erlps__word__2 [(ErlangAtom "case"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 8)), wt_0])
erlps__word__2 [(ErlangAtom "catch"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 9)), wt_0])
erlps__word__2 [(ErlangAtom "end"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 10)), wt_0])
erlps__word__2 [(ErlangAtom "fun"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 11)), wt_0])
erlps__word__2 [(ErlangAtom "if"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 12)), wt_0])
erlps__word__2 [(ErlangAtom "of"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 13)), wt_0])
erlps__word__2 [(ErlangAtom "receive"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 14)), wt_0])
erlps__word__2 [(ErlangAtom "try"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 15)), wt_0])
erlps__word__2 [(ErlangAtom "when"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 16)), wt_0])
erlps__word__2 [(ErlangAtom " ::"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 17)), wt_0])
erlps__word__2 [(ErlangAtom ".."), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 18)), wt_0])
erlps__word__2 [(ErlangAtom " |"), wt_0] =
  (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 19)), wt_0])
erlps__word__2 [arg_3, arg_4] = (EXC.function_clause unit)
erlps__word__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)