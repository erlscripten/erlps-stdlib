module Io.Lib(erlps__fwrite__2, erlps__fwrite__3,
              erlps__fread__2, erlps__fread__3, erlps__format__2,
              erlps__format__3, erlps__scan_format__2, erlps__unscan_format__1,
              erlps__build_text__1, erlps__build_text__2, erlps__print__1,
              erlps__print__4, erlps__indentation__2, erlps__write__1,
              erlps__write__2, erlps__write__3, erlps__nl__0,
              erlps__format_prompt__1, erlps__format_prompt__2,
              erlps__write_binary__3, erlps__write_atom__1,
              erlps__write_string__1, erlps__write_string__2,
              erlps__write_latin1_string__1, erlps__write_latin1_string__2,
              erlps__write_char__1, erlps__write_latin1_char__1,
              erlps__write_atom_as_latin1__1, erlps__write_string_as_latin1__1,
              erlps__write_string_as_latin1__2, erlps__write_char_as_latin1__1,
              erlps__quote_atom__2, erlps__char_list__1,
              erlps__latin1_char_list__1, erlps__deep_char_list__1,
              erlps__deep_latin1_char_list__1, erlps__printable_list__1,
              erlps__printable_latin1_list__1,
              erlps__printable_unicode_list__1, erlps__collect_chars__3,
              erlps__collect_chars__4, erlps__collect_line__3,
              erlps__collect_line__4, erlps__get_until__3, erlps__get_until__4,
              erlps__write_unicode_string__1, erlps__write_unicode_char__1,
              erlps__deep_unicode_char_list__1, erlps__limit_term__2,
              erlps__chars_length__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__fwrite__2 :: ErlangFun
erlps__fwrite__2 [format_0, args_1] =
  (erlps__format__2 [format_0, args_1])
erlps__fwrite__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__fwrite__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite__3 :: ErlangFun
erlps__fwrite__3 [format_0, args_1, options_2] =
  (erlps__format__3 [format_0, args_1, options_2])
erlps__fwrite__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__fwrite__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fread__2 :: ErlangFun
erlps__fread__2 [chars_0, format_1] =
  (BIF.do_remote_fun_call "Io.Lib.Fread" "erlps__fread__2"
     [chars_0, format_1])
erlps__fread__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__fread__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fread__3 :: ErlangFun
erlps__fread__3 [cont_0, chars_1, format_2] =
  (BIF.do_remote_fun_call "Io.Lib.Fread" "erlps__fread__3"
     [cont_0, chars_1, format_2])
erlps__fread__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__fread__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__2 :: ErlangFun
erlps__format__2 [format_0, args_1] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__fwrite__2"
           [format_0, args_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [c_6, r_7, s_8]) ->
            let _ = (erlps__test_modules_loaded__3 [c_6, r_7, s_8])
            in
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons format_0 (ErlangCons args_1 ErlangEmptyList))])
          ex_5 -> (EXC.raise ex_5)))
erlps__format__2 [arg_18, arg_19] = (EXC.function_clause unit)
erlps__format__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format__3 :: ErlangFun
erlps__format__3 [format_0, args_1, options_2] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__fwrite__3"
           [format_0, args_1, options_2]))
     (\ ex_7 ->
        case ex_7 of
          (ErlangTuple [c_8, r_9, s_10]) ->
            let _ = (erlps__test_modules_loaded__3 [c_8, r_9, s_10])
            in
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons format_0 (ErlangCons args_1 ErlangEmptyList))])
          ex_7 -> (EXC.raise ex_7)))
erlps__format__3 [arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__format__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan_format__2 :: ErlangFun
erlps__scan_format__2 [format_0, args_1] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__scan__2"
           [format_0, args_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [c_6, r_7, s_8]) ->
            let _ = (erlps__test_modules_loaded__3 [c_6, r_7, s_8])
            in
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons format_0 (ErlangCons args_1 ErlangEmptyList))])
          ex_5 -> (EXC.raise ex_5)))
erlps__scan_format__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__scan_format__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unscan_format__1 :: ErlangFun
erlps__unscan_format__1 [formatlist_0] =
  (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__unscan__1"
     [formatlist_0])
erlps__unscan_format__1 [arg_2] = (EXC.function_clause unit)
erlps__unscan_format__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build_text__1 :: ErlangFun
erlps__build_text__1 [formatlist_0] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__build__1"
           [formatlist_0]))
     (\ ex_3 ->
        case ex_3 of
          (ErlangTuple [c_4, r_5, s_6]) ->
            let _ = (erlps__test_modules_loaded__3 [c_4, r_5, s_6])
            in
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons formatlist_0 ErlangEmptyList)])
          ex_3 -> (EXC.raise ex_3)))
erlps__build_text__1 [arg_14] = (EXC.function_clause unit)
erlps__build_text__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build_text__2 :: ErlangFun
erlps__build_text__2 [formatlist_0, options_1] =
  (EXC.tryCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__build__2"
           [formatlist_0, options_1]))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [c_6, r_7, s_8]) ->
            let _ = (erlps__test_modules_loaded__3 [c_6, r_7, s_8])
            in
              (BIF.erlang__error__2
                 [(ErlangAtom "badarg"),
                  (ErlangCons formatlist_0
                     (ErlangCons options_1 ErlangEmptyList))])
          ex_5 -> (EXC.raise ex_5)))
erlps__build_text__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__build_text__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_modules_loaded__3 :: ErlangFun
erlps__test_modules_loaded__3 [_c_0, _r_1, _s_2] =
  let
    case_12 =
      (BIF.do_remote_fun_call "Code" "erlps__ensure_modules_loaded__1"
         [(ErlangCons (ErlangAtom "io_lib_format")
             (ErlangCons (ErlangAtom "io_lib_pretty")
                (ErlangCons (ErlangAtom "string")
                   (ErlangCons (ErlangAtom "unicode") ErlangEmptyList))))])
  in
    case case_12 of
      (ErlangAtom "ok") -> (ErlangAtom "ok")
      error_14 -> (BIF.erlang__error__1 [error_14])
      something_else -> (EXC.case_clause something_else)
erlps__test_modules_loaded__3 [arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__test_modules_loaded__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__1 :: ErlangFun
erlps__print__1 [term_0] =
  (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__1"
     [term_0])
erlps__print__1 [arg_2] = (EXC.function_clause unit)
erlps__print__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__4 :: ErlangFun
erlps__print__4 [term_0, column_1, linelength_2, depth_3] =
  (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__4"
     [term_0, column_1, linelength_2, depth_3])
erlps__print__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__print__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indentation__2 :: ErlangFun
erlps__indentation__2 [chars_0, current_1] =
  (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__indentation__2"
     [chars_0, current_1])
erlps__indentation__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__indentation__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_prompt__1 :: ErlangFun
erlps__format_prompt__1 [prompt_0] =
  (erlps__format_prompt__2 [prompt_0, (ErlangAtom "latin1")])
erlps__format_prompt__1 [arg_3] = (EXC.function_clause unit)
erlps__format_prompt__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_prompt__2 :: ErlangFun
erlps__format_prompt__2 [(ErlangTuple [(ErlangAtom "format"),
                                       format_0, args_1]),
                         _encoding_2]
  =
  (erlps__do_format_prompt__2 [format_0, args_1])
erlps__format_prompt__2 [prompt_0, encoding_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_9 = (BIF.erlang__is_list__1 [prompt_0])
             in let
               lop_8 =
                 case lop_9 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (BIF.erlang__is_atom__1 [prompt_0])
                   _ -> (EXC.badarg1 lop_9)
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_binary__1 [prompt_0])
                 _ -> (EXC.badarg1 lop_8)))) =
  let    arg_4 = (make_string "s")
  in let arg_2 = (erlps__add_modifier__2 [encoding_1, arg_4])
  in
    (erlps__do_format_prompt__2
       [arg_2, (ErlangCons prompt_0 ErlangEmptyList)])
erlps__format_prompt__2 [prompt_0, encoding_1] =
  let    arg_4 = (make_string "p")
  in let arg_2 = (erlps__add_modifier__2 [encoding_1, arg_4])
  in
    (erlps__do_format_prompt__2
       [arg_2, (ErlangCons prompt_0 ErlangEmptyList)])
erlps__format_prompt__2 [arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__format_prompt__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_format_prompt__2 :: ErlangFun
erlps__do_format_prompt__2 [format_0, args_1] =
  let
    case_2 =
      (EXC.tryCatch (\ _ -> (erlps__format__2 [format_0, args_1]))
         (\ ex_6 ->
            case ex_6 of
              (ErlangTuple [(ErlangAtom "throw"), payload_7, _]) -> payload_7
              (ErlangTuple [(ErlangAtom "error"), payload_8, stack_9]) ->
                let tup_el_11 = (ErlangTuple [payload_8, stack_9])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_11])
              (ErlangTuple [(ErlangAtom "exit"), payload_14, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_14])
              ex_6 -> (EXC.raise ex_6)))
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "EXIT"), _]) -> (make_string "???")
      list_17 -> list_17
      something_else -> (EXC.case_clause something_else)
erlps__do_format_prompt__2 [arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__do_format_prompt__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_modifier__2 :: ErlangFun
erlps__add_modifier__2 [(ErlangAtom "latin1"), c_0] =
  let lop_1 = (make_string "~")
  in (BIF.erlang__op_append [lop_1, c_0])
erlps__add_modifier__2 [_, c_0] =
  let lop_1 = (make_string "~t")
  in (BIF.erlang__op_append [lop_1, c_0])
erlps__add_modifier__2 [arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__add_modifier__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write__1 :: ErlangFun
erlps__write__1 [term_0] =
  let arg_2 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in (erlps__write1__3 [term_0, arg_2, (ErlangAtom "latin1")])
erlps__write__1 [arg_5] = (EXC.function_clause unit)
erlps__write__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write__3 :: ErlangFun
erlps__write__3 [term_0, d_1, (ErlangAtom "true")] =
  (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__4"
     [term_0, (ErlangInt (DBI.fromInt 1)),
      (ErlangInt (DBI.fromInt 80)), d_1])
erlps__write__3 [term_0, d_1, (ErlangAtom "false")] =
  (erlps__write__2 [term_0, d_1])
erlps__write__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__write__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write__2 :: ErlangFun
erlps__write__2 [term_0, options_1] | (isEList options_1) =
  let    arg_4 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    depth_6 =
      (erlps__get_option__3 [(ErlangAtom "depth"), options_1, arg_4])
  in let
    arg_9 =
      (BIF.do_remote_fun_call "Epp" "erlps__default_encoding__0" [])
  in let
    encoding_10 =
      (erlps__get_option__3
         [(ErlangAtom "encoding"), options_1, arg_9])
  in let
    arg_13 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    charslimit_15 =
      (erlps__get_option__3
         [(ErlangAtom "chars_limit"), options_1, arg_13])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let
                     lop_16 =
                       (BIF.erlang__op_exactEq
                          [depth_6, (ErlangInt (DBI.fromInt 0))])
                   in
                     case lop_16 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         (BIF.erlang__op_exactEq
                            [charslimit_15, (ErlangInt (DBI.fromInt 0))])
                       _ -> (EXC.badarg1 lop_16)))) ->
        (make_string "...")
      _ | (weakLt charslimit_15 (ErlangInt (DBI.fromInt 0))) ->
        (erlps__write1__3 [term_0, depth_6, encoding_10])
      _ | (weakGt charslimit_15 (ErlangInt (DBI.fromInt 0))) ->
        let   
          recdeffun_27 =
            (ErlangFun 2
               let
                 lambda_24 [_, _] = (ErlangAtom "no")
                 lambda_24 [arg_25, arg_26] = (EXC.function_clause unit)
                 lambda_24 args = (EXC.badarity (ErlangFun 2 lambda_24) args)
               in lambda_24)
        in let
          if_35 =
            (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__intermediate__6"
               [term_0, depth_6, charslimit_15, recdeffun_27, encoding_10,
                (ErlangAtom "false")])
        in
          (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__write__1"
             [if_35])
      _ -> (EXC.if_clause unit)
erlps__write__2 [term_0, depth_1] =
  let    head_4 = (ErlangTuple [(ErlangAtom "depth"), depth_1])
  in let
    head_8 =
      (ErlangTuple [(ErlangAtom "encoding"), (ErlangAtom "latin1")])
  in
    (erlps__write__2
       [term_0,
        (ErlangCons head_4 (ErlangCons head_8 ErlangEmptyList))])
erlps__write__2 [arg_12, arg_13] = (EXC.function_clause unit)
erlps__write__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write1__3 :: ErlangFun
erlps__write1__3 [_term_0, (ErlangInt num_1), _e_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (make_string "...")
erlps__write1__3 [term_0, _d_1, _e_2] | (isEInt term_0) =
  (BIF.erlang__integer_to_list__1 [term_0])
erlps__write1__3 [term_0, _d_1, _e_2] | (isEFloat term_0) =
  (BIF.do_remote_fun_call "Io.Lib.Format" "erlps__fwrite_g__1"
     [term_0])
erlps__write1__3 [atom_0, _d_1, (ErlangAtom "latin1")]
  | (isEAtom atom_0) =
  (erlps__write_atom_as_latin1__1 [atom_0])
erlps__write1__3 [atom_0, _d_1, _e_2] | (isEAtom atom_0) =
  (erlps__write_atom__1 [atom_0])
erlps__write1__3 [term_0, _d_1, _e_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_port__1 [term_0])))) =
  (erlps__write_port__1 [term_0])
erlps__write1__3 [term_0, _d_1, _e_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_pid__1 [term_0])))) =
  (BIF.erlang__pid_to_list__1 [term_0])
erlps__write1__3 [term_0, _d_1, _e_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ -> (BIF.erlang__is_reference__1 [term_0])))) =
  (erlps__write_ref__1 [term_0])
erlps__write1__3 [term_3@(ErlangBinary bin_c_0), d_4, _e_5]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  (erlps__write_binary__2 [term_3, d_4])
erlps__write1__3 [(ErlangEmptyList), _d_0, _e_1] =
  (make_string "[]")
erlps__write1__3 [(ErlangTuple []), _d_0, _e_1] =
  (make_string "{}")
erlps__write1__3 [(ErlangCons h_0 t_1), d_2, e_3] =
  case (ErlangAtom "true") of
    _ | ((==) d_2 (ErlangInt (DBI.fromInt 1))) ->
      (make_string "[...]")
    _ ->
      let   
        arg_9 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
      in let head_7 = (erlps__write1__3 [h_0, arg_9, e_3])
      in let
        arg_15 =
          (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
      in let tail_13 = (erlps__write_tail__3 [t_1, arg_15, e_3])
      in
        (ErlangCons (ErlangInt (DBI.fromInt 91))
           (ErlangCons (ErlangCons head_7 tail_13)
              (ErlangCons (ErlangInt (DBI.fromInt 93)) ErlangEmptyList)))
    _ -> (EXC.if_clause unit)
erlps__write1__3 [f_0, _d_1, _e_2] | (isEFun f_0) =
  (BIF.erlang__fun_to_list__1 [f_0])
erlps__write1__3 [term_0, d_1, e_2] | (isEMap term_0) =
  (erlps__write_map__3 [term_0, d_1, e_2])
erlps__write1__3 [t_0, d_1, e_2] | (isETuple t_0) =
  case (ErlangAtom "true") of
    _ | ((==) d_1 (ErlangInt (DBI.fromInt 1))) ->
      (make_string "{...}")
    _ ->
      let   
        arg_7 =
          (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), t_0])
      in let
        arg_10 =
          (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
      in let head_6 = (erlps__write1__3 [arg_7, arg_10, e_2])
      in let
        arg_17 =
          (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
      in let
        tail_14 =
          (erlps__write_tuple__4
             [t_0, (ErlangInt (DBI.fromInt 2)), arg_17, e_2])
      in
        (ErlangCons (ErlangInt (DBI.fromInt 123))
           (ErlangCons (ErlangCons head_6 tail_14)
              (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList)))
    _ -> (EXC.if_clause unit)
erlps__write1__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__write1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_tail__3 :: ErlangFun
erlps__write_tail__3 [(ErlangEmptyList), _d_0, _e_1] =
  (make_string "")
erlps__write_tail__3 [_, (ErlangInt num_0), _e_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  let tail_3 = (make_string "...")
  in (ErlangCons (ErlangInt (DBI.fromInt 124)) tail_3)
erlps__write_tail__3 [(ErlangCons h_0 t_1), d_2, e_3] =
  let   
    arg_8 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let head_6 = (erlps__write1__3 [h_0, arg_8, e_3])
  in let
    arg_14 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_12 = (erlps__write_tail__3 [t_1, arg_14, e_3])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 44))
       (ErlangCons head_6 tail_12))
erlps__write_tail__3 [other_0, d_1, e_2] =
  let   
    arg_7 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in let head_5 = (erlps__write1__3 [other_0, arg_7, e_2])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 124))
       (ErlangCons head_5 ErlangEmptyList))
erlps__write_tail__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__write_tail__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_tuple__4 :: ErlangFun
erlps__write_tuple__4 [t_0, i_1, _d_2, _e_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_5 = (BIF.erlang__tuple_size__1 [t_0])
             in (BIF.erlang__op_greater [i_1, rop_5])))) =
  (make_string "")
erlps__write_tuple__4 [_, _i_0, (ErlangInt num_1), _e_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  let tail_4 = (make_string "...")
  in (ErlangCons (ErlangInt (DBI.fromInt 44)) tail_4)
erlps__write_tuple__4 [t_0, i_1, d_2, e_3] =
  let    arg_7 = (BIF.erlang__element__2 [i_1, t_0])
  in let
    arg_10 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let head_6 = (erlps__write1__3 [arg_7, arg_10, e_3])
  in let
    arg_16 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_19 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let
    tail_14 = (erlps__write_tuple__4 [t_0, arg_16, arg_19, e_3])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 44))
       (ErlangCons head_6 tail_14))
erlps__write_tuple__4 [arg_23, arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__write_tuple__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_port__1 :: ErlangFun
erlps__write_port__1 [port_0] =
  (BIF.erlang__port_to_list__1 [port_0])
erlps__write_port__1 [arg_2] = (EXC.function_clause unit)
erlps__write_port__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_ref__1 :: ErlangFun
erlps__write_ref__1 [ref_0] =
  (BIF.erlang__ref_to_list__1 [ref_0])
erlps__write_ref__1 [arg_2] = (EXC.function_clause unit)
erlps__write_ref__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_map__3 :: ErlangFun
erlps__write_map__3 [_, (ErlangInt num_0), _e_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (make_string "#{}")
erlps__write_map__3 [map_0, d_1, e_2] | (isEInt d_1) =
  let   
    i_4 =
      (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [map_0])
  in let
    case_5 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i_4])
  in
    case case_5 of
      (ErlangTuple [k_7, v_8, nexti_9]) ->
        let   
          d0_12 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
        in let w_17 = (erlps__write_map_assoc__4 [k_7, v_8, d0_12, e_2])
        in let
          tail_24 = (erlps__write_map_body__4 [nexti_9, d0_12, d0_12, e_2])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 35))
             (ErlangCons (ErlangInt (DBI.fromInt 123))
                (ErlangCons (ErlangCons w_17 tail_24)
                   (ErlangCons (ErlangInt (DBI.fromInt 125)) ErlangEmptyList))))
      (ErlangAtom "none") -> (make_string "#{}")
      something_else -> (EXC.case_clause something_else)
erlps__write_map__3 [arg_32, arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__write_map__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_map_body__4 :: ErlangFun
erlps__write_map_body__4 [_, (ErlangInt num_0), _d0_1, _e_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (make_string ",...")
erlps__write_map_body__4 [i_0, d_1, d0_2, e_3] =
  let
    case_4 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i_0])
  in
    case case_4 of
      (ErlangTuple [k_6, v_7, nexti_8]) ->
        let    w_13 = (erlps__write_map_assoc__4 [k_6, v_7, d0_2, e_3])
        in let
          arg_19 =
            (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_17 = (erlps__write_map_body__4 [nexti_8, arg_19, d0_2, e_3])
        in
          (ErlangCons (ErlangInt (DBI.fromInt 44))
             (ErlangCons w_13 tail_17))
      (ErlangAtom "none") -> (make_string "")
      something_else -> (EXC.case_clause something_else)
erlps__write_map_body__4 [arg_24, arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__write_map_body__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_map_assoc__4 :: ErlangFun
erlps__write_map_assoc__4 [k_0, v_1, d_2, e_3] =
  let    head_4 = (erlps__write1__3 [k_0, d_2, e_3])
  in let head_9 = (make_string " => ")
  in let head_11 = (erlps__write1__3 [v_1, d_2, e_3])
  in
    (ErlangCons head_4
       (ErlangCons head_9 (ErlangCons head_11 ErlangEmptyList)))
erlps__write_map_assoc__4 [arg_16, arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__write_map_assoc__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_binary__2 :: ErlangFun
erlps__write_binary__2 [b_0, d_1] | (isEInt d_1) =
  let    arg_4 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let match_expr_7 = (erlps__write_binary__3 [b_0, d_1, arg_4])
  in
    case match_expr_7 of
      (ErlangTuple [s_6, _]) -> s_6
      _ -> (EXC.badmatch match_expr_7)
erlps__write_binary__2 [arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__write_binary__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_binary__3 :: ErlangFun
erlps__write_binary__3 [b_0, d_1, t_2] =
  let   
    arg_5 = (erlps__tsub__2 [t_2, (ErlangInt (DBI.fromInt 4))])
  in let
    match_expr_11 =
      (erlps__write_binary_body__4 [b_0, d_1, arg_5, ErlangEmptyList])
  in
    case match_expr_11 of
      (ErlangTuple [s_9, rest_10]) ->
        let
          head_17 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [s_9])
        in
          (ErlangTuple
             [(ErlangCons (ErlangInt (DBI.fromInt 60))
                 (ErlangCons (ErlangInt (DBI.fromInt 60))
                    (ErlangCons head_17
                       (ErlangCons (ErlangInt (DBI.fromInt 62))
                          (ErlangCons (ErlangInt (DBI.fromInt 62))
                             ErlangEmptyList))))),
              rest_10])
      _ -> (EXC.badmatch match_expr_11)
erlps__write_binary__3 [arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__write_binary__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_binary_body__4 :: ErlangFun
erlps__write_binary_body__4 [b_1@(ErlangBinary bin_e_0), _d_2,
                             _t_3, acc_4]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [acc_4, b_1])
erlps__write_binary_body__4 [b_0, d_1, t_2, acc_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_8 =
                 (BIF.erlang__op_exactEq [d_1, (ErlangInt (DBI.fromInt 1))])
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [t_2, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_8)))) =
  let head_5 = (make_string "...")
  in (ErlangTuple [(ErlangCons head_5 acc_3), b_0])
erlps__write_binary_body__4 [(ErlangBinary bin_c_0), _d_4, _t_5,
                             acc_6]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  let    head_8 = (BIF.erlang__integer_to_list__1 [x_3])
  in let tup_el_11 = (ErlangBinary (BIN.concat []))
  in (ErlangTuple [(ErlangCons head_8 acc_6), tup_el_11])
erlps__write_binary_body__4 [(ErlangBinary bin_c_0), d_7, t_8,
                             acc_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok x_3 bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok rest_6 bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_5) =
  let    s_11 = (BIF.erlang__integer_to_list__1 [x_3])
  in let
    arg_13 =
      (BIF.erlang__op_minus [d_7, (ErlangInt (DBI.fromInt 1))])
  in let lop_19 = (BIF.erlang__length__1 [s_11])
  in let
    arg_18 =
      (BIF.erlang__op_plus [lop_19, (ErlangInt (DBI.fromInt 1))])
  in let arg_16 = (erlps__tsub__2 [t_8, arg_18])
  in
    (erlps__write_binary_body__4
       [rest_6, arg_13, arg_16,
        (ErlangCons (ErlangInt (DBI.fromInt 44))
           (ErlangCons s_11 acc_9))])
erlps__write_binary_body__4 [b_0, _d_1, _t_2, acc_3] =
  let l_5 = (BIF.erlang__bit_size__1 [b_0])
  in
    case b_0 of
      (ErlangBinary bin_c_6) | (ErlangInt size_7) <- (l_5)
                             , (BIN.Ok x_9 bin_8) <-
                                 ((BIN.chop_int bin_c_6 size_7 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_8) ->
        let    head_12 = (BIF.erlang__integer_to_list__1 [l_5])
        in let head_17 = (BIF.erlang__integer_to_list__1 [x_9])
        in let tup_el_20 = (ErlangBinary (BIN.concat []))
        in
          (ErlangTuple
             [(ErlangCons head_12
                 (ErlangCons (ErlangInt (DBI.fromInt 58))
                    (ErlangCons head_17 acc_3))),
              tup_el_20])
      _ -> (EXC.badmatch b_0)
erlps__write_binary_body__4 [arg_21, arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__write_binary_body__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__tsub__2 :: ErlangFun
erlps__tsub__2 [t_0, _]
  | (weakLt t_0 (ErlangInt (DBI.fromInt 0))) =
  t_0
erlps__tsub__2 [t_0, e_1] | (weakGeq t_0 e_1) =
  (BIF.erlang__op_minus [t_0, e_1])
erlps__tsub__2 [_, _] = (ErlangInt (DBI.fromInt 0))
erlps__tsub__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__tsub__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_option__3 :: ErlangFun
erlps__get_option__3 [key_0, tuplelist_1, default_2] =
  let
    case_3 =
      (BIF.lists__keyfind__3
         [key_0, (ErlangInt (DBI.fromInt 1)), tuplelist_1])
  in
    case case_3 of
      (ErlangAtom "false") -> default_2
      (ErlangTuple [key_7, value_8]) | (key_7 == key_0) -> value_8
      _ -> default_2
      something_else -> (EXC.case_clause something_else)
erlps__get_option__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__get_option__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_atom__1 :: ErlangFun
erlps__write_atom__1 [atom_0] =
  let arg_2 = (ErlangFun 2 erlps__write_string__2)
  in (erlps__write_possibly_quoted_atom__2 [atom_0, arg_2])
erlps__write_atom__1 [arg_3] = (EXC.function_clause unit)
erlps__write_atom__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_atom_as_latin1__1 :: ErlangFun
erlps__write_atom_as_latin1__1 [atom_0] =
  let arg_2 = (ErlangFun 2 erlps__write_string_as_latin1__2)
  in (erlps__write_possibly_quoted_atom__2 [atom_0, arg_2])
erlps__write_atom_as_latin1__1 [arg_3] =
  (EXC.function_clause unit)
erlps__write_atom_as_latin1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_possibly_quoted_atom__2 :: ErlangFun
erlps__write_possibly_quoted_atom__2 [atom_0, pfun_1] =
  let    chars_3 = (BIF.erlang__atom_to_list__1 [atom_0])
  in let case_4 = (erlps__quote_atom__2 [atom_0, chars_3])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (BIF.erlang__apply__2
           [pfun_1,
            (ErlangCons chars_3
               (ErlangCons (ErlangInt (DBI.fromInt 39)) ErlangEmptyList))])
      (ErlangAtom "false") -> chars_3
      something_else -> (EXC.case_clause something_else)
erlps__write_possibly_quoted_atom__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__write_possibly_quoted_atom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__quote_atom__2 :: ErlangFun
erlps__quote_atom__2 [atom_0, cs0_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Erl.Scan" "erlps__reserved_word__1"
         [atom_0])
  in
    case case_2 of
      (ErlangAtom "true") -> (ErlangAtom "true")
      (ErlangAtom "false") ->
        case cs0_1 of
          (ErlangCons c_5 cs_6) | ((weakGeq c_5
                                      (ErlangInt (DBI.fromInt 97))) &&
                                     (weakLeq c_5
                                        (ErlangInt (DBI.fromInt 122)))) ->
            let op_arg_7 = (erlps__name_chars__1 [cs_6])
            in (BIF.erlang__not__1 [op_arg_7])
          (ErlangCons c_9 cs_10) | (((weakGeq c_9
                                        (ErlangInt (DBI.fromInt 223))) &&
                                       (weakLeq c_9
                                          (ErlangInt (DBI.fromInt 255)))) &&
                                      ((/=) c_9
                                         (ErlangInt (DBI.fromInt 247)))) ->
            let op_arg_11 = (erlps__name_chars__1 [cs_10])
            in (BIF.erlang__not__1 [op_arg_11])
          _ -> (ErlangAtom "true")
          something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__quote_atom__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__quote_atom__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__name_chars__1 :: ErlangFun
erlps__name_chars__1 [(ErlangCons c_0 cs_1)] =
  let case_2 = (erlps__name_char__1 [c_0])
  in
    case case_2 of
      (ErlangAtom "true") -> (erlps__name_chars__1 [cs_1])
      (ErlangAtom "false") -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__name_chars__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__name_chars__1 [arg_0] = (EXC.function_clause unit)
erlps__name_chars__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__name_char__1 :: ErlangFun
erlps__name_char__1 [c_0]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 97))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 122)))) =
  (ErlangAtom "true")
erlps__name_char__1 [c_0]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 223))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) &&
       ((/=) c_0 (ErlangInt (DBI.fromInt 247)))) =
  (ErlangAtom "true")
erlps__name_char__1 [c_0]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 65))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 90)))) =
  (ErlangAtom "true")
erlps__name_char__1 [c_0]
  | (((weakGeq c_0 (ErlangInt (DBI.fromInt 192))) &&
        (weakLeq c_0 (ErlangInt (DBI.fromInt 222)))) &&
       ((/=) c_0 (ErlangInt (DBI.fromInt 215)))) =
  (ErlangAtom "true")
erlps__name_char__1 [c_0]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (ErlangAtom "true")
erlps__name_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 95))) =
  (ErlangAtom "true")
erlps__name_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 64))) =
  (ErlangAtom "true")
erlps__name_char__1 [_] = (ErlangAtom "false")
erlps__name_char__1 [arg_0] = (EXC.function_clause unit)
erlps__name_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string__1 :: ErlangFun
erlps__write_string__1 [s_0] =
  (erlps__write_string__2 [s_0, (ErlangInt (DBI.fromInt 34))])
erlps__write_string__1 [arg_3] = (EXC.function_clause unit)
erlps__write_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string__2 :: ErlangFun
erlps__write_string__2 [s_0, q_1] =
  let
    tail_3 =
      (erlps__write_string1__3
         [(ErlangAtom "unicode_as_unicode"), s_0, q_1])
  in (ErlangCons q_1 tail_3)
erlps__write_string__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__write_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_unicode_string__1 :: ErlangFun
erlps__write_unicode_string__1 [s_0] =
  (erlps__write_string__1 [s_0])
erlps__write_unicode_string__1 [arg_2] =
  (EXC.function_clause unit)
erlps__write_unicode_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_latin1_string__1 :: ErlangFun
erlps__write_latin1_string__1 [s_0] =
  (erlps__write_latin1_string__2
     [s_0, (ErlangInt (DBI.fromInt 34))])
erlps__write_latin1_string__1 [arg_3] =
  (EXC.function_clause unit)
erlps__write_latin1_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_latin1_string__2 :: ErlangFun
erlps__write_latin1_string__2 [s_0, q_1] =
  let
    tail_3 =
      (erlps__write_string1__3 [(ErlangAtom "latin1"), s_0, q_1])
  in (ErlangCons q_1 tail_3)
erlps__write_latin1_string__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__write_latin1_string__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string_as_latin1__1 :: ErlangFun
erlps__write_string_as_latin1__1 [s_0] =
  (erlps__write_string_as_latin1__2
     [s_0, (ErlangInt (DBI.fromInt 34))])
erlps__write_string_as_latin1__1 [arg_3] =
  (EXC.function_clause unit)
erlps__write_string_as_latin1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string_as_latin1__2 :: ErlangFun
erlps__write_string_as_latin1__2 [s_0, q_1] =
  let
    tail_3 =
      (erlps__write_string1__3
         [(ErlangAtom "unicode_as_latin1"), s_0, q_1])
  in (ErlangCons q_1 tail_3)
erlps__write_string_as_latin1__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__write_string_as_latin1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_string1__3 :: ErlangFun
erlps__write_string1__3 [_, (ErlangEmptyList), q_0] =
  (ErlangCons q_0 ErlangEmptyList)
erlps__write_string1__3 [enc_0, (ErlangCons c_1 cs_2), q_3] =
  let arg_7 = (erlps__write_string1__3 [enc_0, cs_2, q_3])
  in (erlps__string_char__4 [enc_0, c_1, q_3, arg_7])
erlps__write_string1__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__write_string1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_char__4 :: ErlangFun
erlps__string_char__4 [_, q_0, q_1, tail_2] | (q_1 == q_0) =
  (ErlangCons (ErlangInt (DBI.fromInt 92)) (ErlangCons q_0 tail_2))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 92))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 92)) tail_1))
erlps__string_char__4 [_, c_0, _, tail_1]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 32))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 126)))) =
  (ErlangCons c_0 tail_1)
erlps__string_char__4 [(ErlangAtom "latin1"), c_0, _, tail_1]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 160))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  (ErlangCons c_0 tail_1)
erlps__string_char__4 [(ErlangAtom "unicode_as_unicode"), c_0, _,
                       tail_1]
  | (weakGeq c_0 (ErlangInt (DBI.fromInt 160))) =
  (ErlangCons c_0 tail_1)
erlps__string_char__4 [(ErlangAtom "unicode_as_latin1"), c_0, _,
                       tail_1]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 160))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  (ErlangCons c_0 tail_1)
erlps__string_char__4 [(ErlangAtom "unicode_as_latin1"), c_0, _,
                       tail_1]
  | (weakGeq c_0 (ErlangInt (DBI.fromInt 255))) =
  let    lop_2 = (make_string "\\x{")
  in let
    lop_4 =
      (BIF.erlang__integer_to_list__2
         [c_0, (ErlangInt (DBI.fromInt 16))])
  in let lop_8 = (make_string "}")
  in let rop_7 = (BIF.erlang__op_append [lop_8, tail_1])
  in let rop_3 = (BIF.erlang__op_append [lop_4, rop_7])
  in (BIF.erlang__op_append [lop_2, rop_3])
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 110)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 114)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 116)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 118)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 98)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 102)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 27))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 101)) tail_1))
erlps__string_char__4 [_, (ErlangInt num_0), _, tail_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 127))) =
  (ErlangCons (ErlangInt (DBI.fromInt 92))
     (ErlangCons (ErlangInt (DBI.fromInt 100)) tail_1))
erlps__string_char__4 [_, c_0, _, tail_1]
  | (weakLt c_0 (ErlangInt (DBI.fromInt 160))) =
  let   
    lop_2 = (BIF.erlang__bsr__2 [c_0, (ErlangInt (DBI.fromInt 6))])
  in let
    c1_6 =
      (BIF.erlang__op_plus [lop_2, (ErlangInt (DBI.fromInt 48))])
  in let
    lop_8 = (BIF.erlang__bsr__2 [c_0, (ErlangInt (DBI.fromInt 3))])
  in let
    lop_7 =
      (BIF.erlang__band__2 [lop_8, (ErlangInt (DBI.fromInt 7))])
  in let
    c2_13 =
      (BIF.erlang__op_plus [lop_7, (ErlangInt (DBI.fromInt 48))])
  in let
    lop_14 = (BIF.erlang__band__2 [c_0, (ErlangInt (DBI.fromInt 7))])
  in let
    c3_18 =
      (BIF.erlang__op_plus [lop_14, (ErlangInt (DBI.fromInt 48))])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 92))
       (ErlangCons c1_6 (ErlangCons c2_13 (ErlangCons c3_18 tail_1))))
erlps__string_char__4 [arg_27, arg_28, arg_29, arg_30] =
  (EXC.function_clause unit)
erlps__string_char__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_char__1 :: ErlangFun
erlps__write_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (make_string "$\\s")
erlps__write_char__1 [c_0]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let    arg_5 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    tail_2 =
      (erlps__string_char__4
         [(ErlangAtom "unicode_as_unicode"), c_0, arg_5, ErlangEmptyList])
  in (ErlangCons (ErlangInt (DBI.fromInt 36)) tail_2)
erlps__write_char__1 [arg_8] = (EXC.function_clause unit)
erlps__write_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_unicode_char__1 :: ErlangFun
erlps__write_unicode_char__1 [c_0] = (erlps__write_char__1 [c_0])
erlps__write_unicode_char__1 [arg_2] = (EXC.function_clause unit)
erlps__write_unicode_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_latin1_char__1 :: ErlangFun
erlps__write_latin1_char__1 [lat1_0]
  | (((isEInt lat1_0) &&
        (weakGeq lat1_0 (ErlangInt (DBI.fromInt 0)))) &&
       (weakLeq lat1_0 (ErlangInt (DBI.fromInt 255)))) =
  let    arg_5 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    tail_2 =
      (erlps__string_char__4
         [(ErlangAtom "latin1"), lat1_0, arg_5, ErlangEmptyList])
  in (ErlangCons (ErlangInt (DBI.fromInt 36)) tail_2)
erlps__write_latin1_char__1 [arg_8] = (EXC.function_clause unit)
erlps__write_latin1_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__write_char_as_latin1__1 :: ErlangFun
erlps__write_char_as_latin1__1 [uni_0]
  | ((isEInt uni_0) &&
       (weakGeq uni_0 (ErlangInt (DBI.fromInt 0)))) =
  let    arg_5 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    tail_2 =
      (erlps__string_char__4
         [(ErlangAtom "unicode_as_latin1"), uni_0, arg_5,
          ErlangEmptyList])
  in (ErlangCons (ErlangInt (DBI.fromInt 36)) tail_2)
erlps__write_char_as_latin1__1 [arg_8] =
  (EXC.function_clause unit)
erlps__write_char_as_latin1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__latin1_char_list__1 :: ErlangFun
erlps__latin1_char_list__1 [(ErlangCons c_0 cs_1)]
  | (((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  (erlps__latin1_char_list__1 [cs_1])
erlps__latin1_char_list__1 [(ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__latin1_char_list__1 [_] = (ErlangAtom "false")
erlps__latin1_char_list__1 [arg_0] = (EXC.function_clause unit)
erlps__latin1_char_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__char_list__1 :: ErlangFun
erlps__char_list__1 [(ErlangCons c_0 cs_1)]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_6 = (BIF.erlang__is_integer__1 [c_0])
             in let
               lop_5 =
                 case lop_6 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [c_0, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_6)
             in let
               lop_4 =
                 case lop_5 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesser
                        [c_0, (ErlangInt (DBI.fromInt 55296))])
                   _ -> (EXC.badarg1 lop_5)
             in let
               lop_3 =
                 case lop_4 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let    lop_13 = (BIF.erlang__is_integer__1 [c_0])
                     in let
                       lop_12 =
                         case lop_13 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                           _ -> (EXC.badarg1 lop_13)
                     in
                       case lop_12 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 65534))])
                         _ -> (EXC.badarg1 lop_12)
                   _ -> (EXC.badarg1 lop_4)
             in
               case lop_3 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let    lop_20 = (BIF.erlang__is_integer__1 [c_0])
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_greater
                              [c_0, (ErlangInt (DBI.fromInt 65535))])
                         _ -> (EXC.badarg1 lop_20)
                   in
                     case lop_19 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [c_0, (ErlangInt (DBI.fromInt 1114111))])
                       _ -> (EXC.badarg1 lop_19)
                 _ -> (EXC.badarg1 lop_3)))) =
  (erlps__char_list__1 [cs_1])
erlps__char_list__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__char_list__1 [_] = (ErlangAtom "false")
erlps__char_list__1 [arg_0] = (EXC.function_clause unit)
erlps__char_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_latin1_char_list__1 :: ErlangFun
erlps__deep_latin1_char_list__1 [cs_0] =
  (erlps__deep_latin1_char_list__2 [cs_0, ErlangEmptyList])
erlps__deep_latin1_char_list__1 [arg_3] =
  (EXC.function_clause unit)
erlps__deep_latin1_char_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_latin1_char_list__2 :: ErlangFun
erlps__deep_latin1_char_list__2 [(ErlangCons c_0 cs_1), more_2]
  | (isEList c_0) =
  (erlps__deep_latin1_char_list__2 [c_0, (ErlangCons cs_1 more_2)])
erlps__deep_latin1_char_list__2 [(ErlangCons c_0 cs_1), more_2]
  | (((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  (erlps__deep_latin1_char_list__2 [cs_1, more_2])
erlps__deep_latin1_char_list__2 [(ErlangEmptyList),
                                 (ErlangCons cs_0 more_1)]
  =
  (erlps__deep_latin1_char_list__2 [cs_0, more_1])
erlps__deep_latin1_char_list__2 [(ErlangEmptyList),
                                 (ErlangEmptyList)]
  =
  (ErlangAtom "true")
erlps__deep_latin1_char_list__2 [_, _more_0] =
  (ErlangAtom "false")
erlps__deep_latin1_char_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__deep_latin1_char_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_char_list__1 :: ErlangFun
erlps__deep_char_list__1 [cs_0] =
  (erlps__deep_char_list__2 [cs_0, ErlangEmptyList])
erlps__deep_char_list__1 [arg_3] = (EXC.function_clause unit)
erlps__deep_char_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_char_list__2 :: ErlangFun
erlps__deep_char_list__2 [(ErlangCons c_0 cs_1), more_2]
  | (isEList c_0) =
  (erlps__deep_char_list__2 [c_0, (ErlangCons cs_1 more_2)])
erlps__deep_char_list__2 [(ErlangCons c_0 cs_1), more_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_8 = (BIF.erlang__is_integer__1 [c_0])
             in let
               lop_7 =
                 case lop_8 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [c_0, (ErlangInt (DBI.fromInt 0))])
                   _ -> (EXC.badarg1 lop_8)
             in let
               lop_6 =
                 case lop_7 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesser
                        [c_0, (ErlangInt (DBI.fromInt 55296))])
                   _ -> (EXC.badarg1 lop_7)
             in let
               lop_5 =
                 case lop_6 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let    lop_15 = (BIF.erlang__is_integer__1 [c_0])
                     in let
                       lop_14 =
                         case lop_15 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                           _ -> (EXC.badarg1 lop_15)
                     in
                       case lop_14 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 65534))])
                         _ -> (EXC.badarg1 lop_14)
                   _ -> (EXC.badarg1 lop_6)
             in
               case lop_5 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let    lop_22 = (BIF.erlang__is_integer__1 [c_0])
                   in let
                     lop_21 =
                       case lop_22 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_greater
                              [c_0, (ErlangInt (DBI.fromInt 65535))])
                         _ -> (EXC.badarg1 lop_22)
                   in
                     case lop_21 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [c_0, (ErlangInt (DBI.fromInt 1114111))])
                       _ -> (EXC.badarg1 lop_21)
                 _ -> (EXC.badarg1 lop_5)))) =
  (erlps__deep_char_list__2 [cs_1, more_2])
erlps__deep_char_list__2 [(ErlangEmptyList),
                          (ErlangCons cs_0 more_1)]
  =
  (erlps__deep_char_list__2 [cs_0, more_1])
erlps__deep_char_list__2 [(ErlangEmptyList), (ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__deep_char_list__2 [_, _more_0] = (ErlangAtom "false")
erlps__deep_char_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__deep_char_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deep_unicode_char_list__1 :: ErlangFun
erlps__deep_unicode_char_list__1 [term_0] =
  (erlps__deep_char_list__1 [term_0])
erlps__deep_unicode_char_list__1 [arg_2] =
  (EXC.function_clause unit)
erlps__deep_unicode_char_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_latin1_list__1 :: ErlangFun
erlps__printable_latin1_list__1 [(ErlangCons c_0 cs_1)]
  | (((isEInt c_0) &&
        (weakGeq c_0 (ErlangInt (DBI.fromInt 32)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 126)))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons c_0 cs_1)]
  | (((isEInt c_0) &&
        (weakGeq c_0 (ErlangInt (DBI.fromInt 160)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 27))) =
  (erlps__printable_latin1_list__1 [cs_1])
erlps__printable_latin1_list__1 [(ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__printable_latin1_list__1 [_] = (ErlangAtom "false")
erlps__printable_latin1_list__1 [arg_0] =
  (EXC.function_clause unit)
erlps__printable_latin1_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_list__1 :: ErlangFun
erlps__printable_list__1 [l_0] =
  let
    case_1 =
      (BIF.do_remote_fun_call "Erlang.Io" "erlps__printable_range__0"
         [])
  in
    case case_1 of
      (ErlangAtom "latin1") -> (erlps__printable_latin1_list__1 [l_0])
      (ErlangAtom "unicode") ->
        (erlps__printable_unicode_list__1 [l_0])
      something_else -> (EXC.case_clause something_else)
erlps__printable_list__1 [arg_4] = (EXC.function_clause unit)
erlps__printable_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__printable_unicode_list__1 :: ErlangFun
erlps__printable_unicode_list__1 [(ErlangCons c_0 cs_1)]
  | (((isEInt c_0) &&
        (weakGeq c_0 (ErlangInt (DBI.fromInt 32)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 126)))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons c_0 cs_1)]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let    lop_6 = (BIF.erlang__is_integer__1 [c_0])
             in let
               lop_5 =
                 case lop_6 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_greaterEq
                        [c_0, (ErlangInt (DBI.fromInt 160))])
                   _ -> (EXC.badarg1 lop_6)
             in let
               lop_4 =
                 case lop_5 of
                   (ErlangAtom "false") -> (ErlangAtom "false")
                   (ErlangAtom "true") ->
                     (BIF.erlang__op_lesser
                        [c_0, (ErlangInt (DBI.fromInt 55296))])
                   _ -> (EXC.badarg1 lop_5)
             in let
               lop_3 =
                 case lop_4 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     let    lop_13 = (BIF.erlang__is_integer__1 [c_0])
                     in let
                       lop_12 =
                         case lop_13 of
                           (ErlangAtom "false") -> (ErlangAtom "false")
                           (ErlangAtom "true") ->
                             (BIF.erlang__op_greater
                                [c_0, (ErlangInt (DBI.fromInt 57343))])
                           _ -> (EXC.badarg1 lop_13)
                     in
                       case lop_12 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_lesser
                              [c_0, (ErlangInt (DBI.fromInt 65534))])
                         _ -> (EXC.badarg1 lop_12)
                   _ -> (EXC.badarg1 lop_4)
             in
               case lop_3 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   let    lop_20 = (BIF.erlang__is_integer__1 [c_0])
                   in let
                     lop_19 =
                       case lop_20 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_greater
                              [c_0, (ErlangInt (DBI.fromInt 65535))])
                         _ -> (EXC.badarg1 lop_20)
                   in
                     case lop_19 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_lesserEq
                            [c_0, (ErlangInt (DBI.fromInt 1114111))])
                       _ -> (EXC.badarg1 lop_19)
                 _ -> (EXC.badarg1 lop_3)))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 13))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 11))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 8))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 12))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangCons (ErlangInt num_0) cs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 27))) =
  (erlps__printable_unicode_list__1 [cs_1])
erlps__printable_unicode_list__1 [(ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__printable_unicode_list__1 [_] = (ErlangAtom "false")
erlps__printable_unicode_list__1 [arg_0] =
  (EXC.function_clause unit)
erlps__printable_unicode_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nl__0 :: ErlangFun
erlps__nl__0 [] = (make_string "\n")
erlps__nl__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count_and_find_utf8__2 :: ErlangFun
erlps__count_and_find_utf8__2 [bin_0, n_1] =
  (erlps__cafu__5
     [bin_0, n_1, (ErlangInt (DBI.fromInt 0)),
      (ErlangInt (DBI.fromInt 0)), (ErlangAtom "none")])
erlps__count_and_find_utf8__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__count_and_find_utf8__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cafu__5 :: ErlangFun
erlps__cafu__5 [(ErlangBinary bin_e_0), _n_1, count_2,
                _bytecount_3, savepos_4]
  | (BIN.empty bin_e_0) =
  (ErlangTuple [count_2, savepos_4])
erlps__cafu__5 [(ErlangBinary bin_c_0), (ErlangInt num_6),
                count_7, bytecount_8, _savepos_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4)
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 0))) =
  let   
    arg_11 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    arg_13 =
      (BIF.erlang__op_plus [count_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cafu__5
       [rest_5, arg_11, arg_13, (ErlangInt (DBI.fromInt 0)),
        bytecount_8])
erlps__cafu__5 [(ErlangBinary bin_c_0), n_6, count_7,
                _bytecount_8, savepos_9]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4)
  , (weakLt n_6 (ErlangInt (DBI.fromInt 0))) =
  let   
    arg_11 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    arg_13 =
      (BIF.erlang__op_plus [count_7, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__cafu__5
       [rest_5, arg_11, arg_13, (ErlangInt (DBI.fromInt 0)), savepos_9])
erlps__cafu__5 [whole_6@(ErlangBinary bin_c_0), n_7, count_8,
                bytecount_9, savepos_10]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok rest_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  let    lop_11 = (BIF.erlang__byte_size__1 [whole_6])
  in let rop_13 = (BIF.erlang__byte_size__1 [rest_5])
  in let delta_15 = (BIF.erlang__op_minus [lop_11, rop_13])
  in let
    arg_17 =
      (BIF.erlang__op_minus [n_7, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_20 =
      (BIF.erlang__op_plus [count_8, (ErlangInt (DBI.fromInt 1))])
  in let arg_23 = (BIF.erlang__op_plus [bytecount_9, delta_15])
  in (erlps__cafu__5 [rest_5, arg_17, arg_20, arg_23, savepos_10])
erlps__cafu__5 [_other_0, _n_1, count_2, _bytecount_3, savepos_4]
  =
  (ErlangTuple [count_2, savepos_4])
erlps__cafu__5 [arg_7, arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__cafu__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_chars__3 :: ErlangFun
erlps__collect_chars__3 [tag_0, data_1, n_2] =
  (erlps__collect_chars__4
     [tag_0, data_1, (ErlangAtom "latin1"), n_2])
erlps__collect_chars__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__collect_chars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_chars__4 :: ErlangFun
erlps__collect_chars__4 [(ErlangAtom "start"), data_0,
                         (ErlangAtom "unicode"), n_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [data_0])))) =
  let match_expr_6 = (erlps__count_and_find_utf8__2 [data_0, n_1])
  in
    case match_expr_6 of
      (ErlangTuple [size_4, npos_5]) ->
        case (ErlangAtom "true") of
          _ | (weakGt size_4 n_1) ->
            let
              match_expr_11 = (BIF.erlang__split_binary__2 [data_0, npos_5])
            in
              case match_expr_11 of
                (ErlangTuple [b1_9, b2_10]) ->
                  (ErlangTuple [(ErlangAtom "stop"), b1_9, b2_10])
                _ -> (EXC.badmatch match_expr_11)
          _ | (weakLt size_4 n_1) ->
            let tup_el_19 = (BIF.erlang__op_minus [n_1, size_4])
            in
              (ErlangTuple
                 [(ErlangAtom "binary"), (ErlangCons data_0 ErlangEmptyList),
                  tup_el_19])
          _ ->
            (ErlangTuple [(ErlangAtom "stop"), data_0, (ErlangAtom "eof")])
          _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_6)
erlps__collect_chars__4 [(ErlangAtom "start"), data_0,
                         (ErlangAtom "latin1"), n_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [data_0])))) =
  let size_3 = (BIF.erlang__byte_size__1 [data_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt size_3 n_1) ->
        let match_expr_8 = (BIF.erlang__split_binary__2 [data_0, n_1])
        in
          case match_expr_8 of
            (ErlangTuple [b1_6, b2_7]) ->
              (ErlangTuple [(ErlangAtom "stop"), b1_6, b2_7])
            _ -> (EXC.badmatch match_expr_8)
      _ | (weakLt size_3 n_1) ->
        let tup_el_16 = (BIF.erlang__op_minus [n_1, size_3])
        in
          (ErlangTuple
             [(ErlangAtom "binary"), (ErlangCons data_0 ErlangEmptyList),
              tup_el_16])
      _ ->
        (ErlangTuple [(ErlangAtom "stop"), data_0, (ErlangAtom "eof")])
      _ -> (EXC.if_clause unit)
erlps__collect_chars__4 [(ErlangAtom "start"), data_0, _, n_1]
  | (isEList data_0) =
  (erlps__collect_chars_list__3 [ErlangEmptyList, n_1, data_0])
erlps__collect_chars__4 [(ErlangAtom "start"),
                         (ErlangAtom "eof"), _, _]
  =
  (ErlangTuple
     [(ErlangAtom "stop"), (ErlangAtom "eof"), (ErlangAtom "eof")])
erlps__collect_chars__4 [(ErlangTuple [(ErlangAtom "binary"),
                                       stack_0, _n_1]),
                         (ErlangAtom "eof"), _, _]
  =
  let tup_el_3 = (erlps__binrev__1 [stack_0])
  in
    (ErlangTuple [(ErlangAtom "stop"), tup_el_3, (ErlangAtom "eof")])
erlps__collect_chars__4 [(ErlangTuple [(ErlangAtom "binary"),
                                       stack_0, n_1]),
                         data_2, (ErlangAtom "unicode"), _]
  =
  let match_expr_7 = (erlps__count_and_find_utf8__2 [data_2, n_1])
  in
    case match_expr_7 of
      (ErlangTuple [size_5, npos_6]) ->
        case (ErlangAtom "true") of
          _ | (weakGt size_5 n_1) ->
            let
              match_expr_12 = (BIF.erlang__split_binary__2 [data_2, npos_6])
            in
              case match_expr_12 of
                (ErlangTuple [b1_10, b2_11]) ->
                  let
                    tup_el_14 =
                      (erlps__binrev__2
                         [stack_0, (ErlangCons b1_10 ErlangEmptyList)])
                  in (ErlangTuple [(ErlangAtom "stop"), tup_el_14, b2_11])
                _ -> (EXC.badmatch match_expr_12)
          _ | (weakLt size_5 n_1) ->
            let tup_el_24 = (BIF.erlang__op_minus [n_1, size_5])
            in
              (ErlangTuple
                 [(ErlangAtom "binary"), (ErlangCons data_2 stack_0),
                  tup_el_24])
          _ ->
            let
              tup_el_28 =
                (erlps__binrev__2
                   [stack_0, (ErlangCons data_2 ErlangEmptyList)])
            in
              (ErlangTuple
                 [(ErlangAtom "stop"), tup_el_28, (ErlangAtom "eof")])
          _ -> (EXC.if_clause unit)
      _ -> (EXC.badmatch match_expr_7)
erlps__collect_chars__4 [(ErlangTuple [(ErlangAtom "binary"),
                                       stack_0, n_1]),
                         data_2, (ErlangAtom "latin1"), _]
  =
  let size_4 = (BIF.erlang__byte_size__1 [data_2])
  in
    case (ErlangAtom "true") of
      _ | (weakGt size_4 n_1) ->
        let match_expr_9 = (BIF.erlang__split_binary__2 [data_2, n_1])
        in
          case match_expr_9 of
            (ErlangTuple [b1_7, b2_8]) ->
              let
                tup_el_11 =
                  (erlps__binrev__2
                     [stack_0, (ErlangCons b1_7 ErlangEmptyList)])
              in (ErlangTuple [(ErlangAtom "stop"), tup_el_11, b2_8])
            _ -> (EXC.badmatch match_expr_9)
      _ | (weakLt size_4 n_1) ->
        let tup_el_21 = (BIF.erlang__op_minus [n_1, size_4])
        in
          (ErlangTuple
             [(ErlangAtom "binary"), (ErlangCons data_2 stack_0), tup_el_21])
      _ ->
        let
          tup_el_25 =
            (erlps__binrev__2 [stack_0, (ErlangCons data_2 ErlangEmptyList)])
        in
          (ErlangTuple
             [(ErlangAtom "stop"), tup_el_25, (ErlangAtom "eof")])
      _ -> (EXC.if_clause unit)
erlps__collect_chars__4 [(ErlangTuple [(ErlangAtom "list"),
                                       stack_0, n_1]),
                         data_2, _, _]
  =
  (erlps__collect_chars_list__3 [stack_0, n_1, data_2])
erlps__collect_chars__4 [(ErlangEmptyList), chars_0, _, n_1] =
  (erlps__collect_chars1__3 [n_1, chars_0, ErlangEmptyList])
erlps__collect_chars__4 [(ErlangTuple [left_0, sofar_1]),
                         chars_2, _, _n_3]
  =
  (erlps__collect_chars1__3 [left_0, chars_2, sofar_1])
erlps__collect_chars__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__collect_chars__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_chars1__3 :: ErlangFun
erlps__collect_chars1__3 [n_0, chars_1, stack_2]
  | (weakLeq n_0 (ErlangInt (DBI.fromInt 0))) =
  let tup_el_4 = (BIF.lists__reverse__2 [stack_2, ErlangEmptyList])
  in (ErlangTuple [(ErlangAtom "done"), tup_el_4, chars_1])
erlps__collect_chars1__3 [n_0, (ErlangCons c_1 rest_2), stack_3]
  =
  let
    arg_4 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__collect_chars1__3
       [arg_4, rest_2, (ErlangCons c_1 stack_3)])
erlps__collect_chars1__3 [_n_0, (ErlangAtom "eof"),
                          (ErlangEmptyList)]
  =
  (ErlangTuple
     [(ErlangAtom "done"), (ErlangAtom "eof"), ErlangEmptyList])
erlps__collect_chars1__3 [_n_0, (ErlangAtom "eof"), stack_1] =
  let tup_el_3 = (BIF.lists__reverse__2 [stack_1, ErlangEmptyList])
  in (ErlangTuple [(ErlangAtom "done"), tup_el_3, ErlangEmptyList])
erlps__collect_chars1__3 [n_0, (ErlangEmptyList), stack_1] =
  let tup_el_3 = (ErlangTuple [n_0, stack_1])
  in (ErlangTuple [(ErlangAtom "more"), tup_el_3])
erlps__collect_chars1__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__collect_chars1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_chars_list__3 :: ErlangFun
erlps__collect_chars_list__3 [stack_0, (ErlangInt num_1), data_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let tup_el_4 = (BIF.lists__reverse__2 [stack_0, ErlangEmptyList])
  in (ErlangTuple [(ErlangAtom "stop"), tup_el_4, data_2])
erlps__collect_chars_list__3 [stack_0, _n_1, (ErlangAtom "eof")]
  =
  let tup_el_3 = (BIF.lists__reverse__2 [stack_0, ErlangEmptyList])
  in
    (ErlangTuple [(ErlangAtom "stop"), tup_el_3, (ErlangAtom "eof")])
erlps__collect_chars_list__3 [stack_0, n_1, (ErlangEmptyList)] =
  (ErlangTuple [(ErlangAtom "list"), stack_0, n_1])
erlps__collect_chars_list__3 [stack_0, n_1, (ErlangCons h_2 t_3)]
  =
  let
    arg_7 = (BIF.erlang__op_minus [n_1, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__collect_chars_list__3
       [(ErlangCons h_2 stack_0), arg_7, t_3])
erlps__collect_chars_list__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__collect_chars_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_line__3 :: ErlangFun
erlps__collect_line__3 [tag_0, data_1, any_2] =
  (erlps__collect_line__4
     [tag_0, data_1, (ErlangAtom "latin1"), any_2])
erlps__collect_line__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__collect_line__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_line__4 :: ErlangFun
erlps__collect_line__4 [(ErlangAtom "start"), data_0, encoding_1,
                        _]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [data_0])))) =
  (erlps__collect_line_bin__4
     [data_0, data_0, ErlangEmptyList, encoding_1])
erlps__collect_line__4 [(ErlangAtom "start"), data_0, _, _]
  | (isEList data_0) =
  (erlps__collect_line_list__2 [data_0, ErlangEmptyList])
erlps__collect_line__4 [(ErlangAtom "start"), (ErlangAtom "eof"),
                        _, _]
  =
  (ErlangTuple
     [(ErlangAtom "stop"), (ErlangAtom "eof"), (ErlangAtom "eof")])
erlps__collect_line__4 [stack_0, data_1, encoding_2, _]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [data_1])))) =
  (erlps__collect_line_bin__4
     [data_1, data_1, stack_0, encoding_2])
erlps__collect_line__4 [stack_0, data_1, _, _]
  | (isEList data_1) =
  (erlps__collect_line_list__2 [data_1, stack_0])
erlps__collect_line__4 [stack_1@(ErlangCons b_0 _),
                        (ErlangAtom "eof"), _, _]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [b_0])))) =
  let tup_el_3 = (erlps__binrev__1 [stack_1])
  in
    (ErlangTuple [(ErlangAtom "stop"), tup_el_3, (ErlangAtom "eof")])
erlps__collect_line__4 [stack_0, (ErlangAtom "eof"), _, _] =
  let tup_el_2 = (BIF.lists__reverse__2 [stack_0, ErlangEmptyList])
  in
    (ErlangTuple [(ErlangAtom "stop"), tup_el_2, (ErlangAtom "eof")])
erlps__collect_line__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__collect_line__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_line_bin__4 :: ErlangFun
erlps__collect_line_bin__4 [(ErlangBinary bin_c_0), data_7,
                            stack0_8, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_4) <- ((BIN.size bin_2))
  , (BIN.Ok t_6 bin_5) <- ((BIN.chop_bin bin_2 size_4 8))
  , (BIN.empty bin_5) =
  let    lop_9 = (BIF.erlang__byte_size__1 [data_7])
  in let rop_11 = (BIF.erlang__byte_size__1 [t_6])
  in let n_13 = (BIF.erlang__op_minus [lop_9, rop_11])
  in
    case data_7 of
      (ErlangBinary bin_c_14) | (ErlangInt size_15) <- (n_13)
                              , (BIN.Ok line_17 bin_16) <-
                                  ((BIN.chop_bin bin_c_14 size_15 8))
                              , (ErlangInt size_18) <- ((BIN.size bin_16))
                              , (BIN.Ok _ bin_19) <-
                                  ((BIN.chop_bin bin_16 size_18 8))
                              , (BIN.empty bin_19) ->
        case stack0_8 of
          (ErlangEmptyList) ->
            (ErlangTuple [(ErlangAtom "stop"), line_17, t_6])
          (ErlangCons (ErlangBinary bin_c_25) stack_29) | size_26 <-
                                                            ((DBI.fromInt 8))
                                                        , (BIN.Ok (ErlangInt num_28) bin_27) <-
                                                            ((BIN.chop_int
                                                                bin_c_25 size_26
                                                                1 BIN.Big
                                                                BIN.Unsigned))
                                                        , ((ErlangInt num_28) ==
                                                             (ErlangInt
                                                                (DBI.fromInt
                                                                   13)))
                                                        , (BIN.empty bin_27)
                                                        , ((==) n_13
                                                             (ErlangInt
                                                                (DBI.fromInt
                                                                   1))) ->
            let
              tup_el_31 =
                (erlps__binrev__2
                   [stack_29,
                    (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList)])
            in (ErlangTuple [(ErlangAtom "stop"), tup_el_31, t_6])
          _ ->
            let
              tup_el_38 =
                (erlps__binrev__2
                   [stack0_8, (ErlangCons line_17 ErlangEmptyList)])
            in (ErlangTuple [(ErlangAtom "stop"), tup_el_38, t_6])
          something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch data_7)
erlps__collect_line_bin__4 [(ErlangBinary bin_c_0), data_10,
                            stack_11, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , size_4 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_6) bin_5) <-
      ((BIN.chop_int bin_2 size_4 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_6) == (ErlangInt (DBI.fromInt 10)))
  , (ErlangInt size_7) <- ((BIN.size bin_5))
  , (BIN.Ok t_9 bin_8) <- ((BIN.chop_bin bin_5 size_7 8))
  , (BIN.empty bin_8) =
  let    lop_13 = (BIF.erlang__byte_size__1 [data_10])
  in let rop_15 = (BIF.erlang__byte_size__1 [t_9])
  in let lop_12 = (BIF.erlang__op_minus [lop_13, rop_15])
  in let
    n_18 =
      (BIF.erlang__op_minus [lop_12, (ErlangInt (DBI.fromInt 2))])
  in
    case data_10 of
      (ErlangBinary bin_c_19) | (ErlangInt size_20) <- (n_18)
                              , (BIN.Ok line_22 bin_21) <-
                                  ((BIN.chop_bin bin_c_19 size_20 8))
                              , (ErlangInt size_23) <- ((BIN.size bin_21))
                              , (BIN.Ok _ bin_24) <-
                                  ((BIN.chop_bin bin_21 size_23 8))
                              , (BIN.empty bin_24) ->
        let
          tup_el_27 =
            (erlps__binrev__2
               [stack_11,
                (ErlangCons line_22
                   (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList))])
        in (ErlangTuple [(ErlangAtom "stop"), tup_el_27, t_9])
      _ -> (EXC.badmatch data_10)
erlps__collect_line_bin__4 [(ErlangBinary bin_c_0), data0_4,
                            stack_5, _]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok (ErlangInt num_3) bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 13)))
  , (BIN.empty bin_2) =
  let    lop_6 = (BIF.erlang__byte_size__1 [data0_4])
  in let
    n_9 = (BIF.erlang__op_minus [lop_6, (ErlangInt (DBI.fromInt 1))])
  in
    case data0_4 of
      (ErlangBinary bin_c_10) | (ErlangInt size_11) <- (n_9)
                              , (BIN.Ok data_13 bin_12) <-
                                  ((BIN.chop_bin bin_c_10 size_11 8))
                              , (ErlangInt size_14) <- ((BIN.size bin_12))
                              , (BIN.Ok _ bin_15) <-
                                  ((BIN.chop_bin bin_12 size_14 8))
                              , (BIN.empty bin_15) ->
        let
          head_17 =
            (ErlangBinary
               (BIN.from_int (ErlangInt (DBI.fromInt 13))
                  (ErlangInt (DBI.fromInt 8)) 1 BIN.Big))
        in (ErlangCons head_17 (ErlangCons data_13 stack_5))
      _ -> (EXC.badmatch data0_4)
erlps__collect_line_bin__4 [(ErlangBinary bin_c_0), data_6,
                            stack_7, enc_8]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (ErlangInt size_3) <- ((BIN.size bin_2))
  , (BIN.Ok t_5 bin_4) <- ((BIN.chop_bin bin_2 size_3 8))
  , (BIN.empty bin_4) =
  (erlps__collect_line_bin__4 [t_5, data_6, stack_7, enc_8])
erlps__collect_line_bin__4 [(ErlangBinary bin_e_0), data_1,
                            stack_2, _]
  | (BIN.empty bin_e_0) =
  (ErlangCons data_1 stack_2)
erlps__collect_line_bin__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__collect_line_bin__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_line_list__2 :: ErlangFun
erlps__collect_line_list__2 [(ErlangCons (ErlangInt num_0) t_1),
                             (ErlangCons (ErlangInt num_2) stack_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 13))) =
  let
    tup_el_5 =
      (BIF.lists__reverse__2
         [stack_3,
          (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "stop"), tup_el_5, t_1])
erlps__collect_line_list__2 [(ErlangCons (ErlangInt num_0) t_1),
                             stack_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    tup_el_4 =
      (BIF.lists__reverse__2
         [stack_2,
          (ErlangCons (ErlangInt (DBI.fromInt 10)) ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "stop"), tup_el_4, t_1])
erlps__collect_line_list__2 [(ErlangCons h_0 t_1), stack_2] =
  (erlps__collect_line_list__2 [t_1, (ErlangCons h_0 stack_2)])
erlps__collect_line_list__2 [(ErlangEmptyList), stack_0] =
  stack_0
erlps__collect_line_list__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__collect_line_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_until__3 :: ErlangFun
erlps__get_until__3 [any_0, data_1, arg_2] =
  (erlps__get_until__4
     [any_0, data_1, (ErlangAtom "latin1"), arg_2])
erlps__get_until__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__get_until__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_until__4 :: ErlangFun
erlps__get_until__4 [(ErlangAtom "start"), data_0, encoding_1,
                     xtraarg_2]
  =
  (erlps__get_until__4
     [ErlangEmptyList, data_0, encoding_1, xtraarg_2])
erlps__get_until__4 [cont_0, data_1, encoding_2,
                     (ErlangTuple [mod_3, func_4, xtraargs_5])]
  =
  let   
    chars_14 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let lop_6 = (BIF.erlang__is_binary__1 [data_1])
                     in
                       case lop_6 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           (BIF.erlang__op_exactEq
                              [encoding_2, (ErlangAtom "unicode")])
                         _ -> (EXC.badarg1 lop_6)))) ->
          (BIF.do_remote_fun_call "Erlang.Unicode"
             "erlps__characters_to_list__2" [data_1, (ErlangAtom "utf8")])
        _ | ((ErlangAtom "true") ==
               (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [data_1])))) ->
          (BIF.erlang__binary_to_list__1 [data_1])
        _ -> data_1
        _ -> (EXC.if_clause unit)
  in let
    case_15 =
      (BIF.erlang__apply__3
         [mod_3, func_4,
          (ErlangCons cont_0 (ErlangCons chars_14 xtraargs_5))])
  in
    case case_15 of
      (ErlangTuple [(ErlangAtom "done"), result_23, buf_24]) ->
        let
          tup_el_26 =
            case (ErlangAtom "true") of
              _ | ((ErlangAtom "true") ==
                     (falsifyErrors
                        (\ _ ->
                           let    lop_28 = (BIF.erlang__is_binary__1 [data_1])
                           in let
                             lop_27 =
                               case lop_28 of
                                 (ErlangAtom "false") -> (ErlangAtom "false")
                                 (ErlangAtom "true") ->
                                   (BIF.erlang__is_list__1 [result_23])
                                 _ -> (EXC.badarg1 lop_28)
                           in
                             case lop_27 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__op_exactEq
                                    [encoding_2, (ErlangAtom "unicode")])
                               _ -> (EXC.badarg1 lop_27)))) ->
                (BIF.do_remote_fun_call "Erlang.Unicode"
                   "erlps__characters_to_binary__3"
                   [result_23, (ErlangAtom "unicode"), (ErlangAtom "unicode")])
              _ | ((ErlangAtom "true") ==
                     (falsifyErrors
                        (\ _ ->
                           let lop_36 = (BIF.erlang__is_binary__1 [data_1])
                           in
                             case lop_36 of
                               (ErlangAtom "false") -> (ErlangAtom "false")
                               (ErlangAtom "true") ->
                                 (BIF.erlang__is_list__1 [result_23])
                               _ -> (EXC.badarg1 lop_36)))) ->
                (BIF.erlang__iolist_to_binary__1 [result_23])
              _ -> result_23
              _ -> (EXC.if_clause unit)
        in (ErlangTuple [(ErlangAtom "stop"), tup_el_26, buf_24])
      (ErlangTuple [(ErlangAtom "more"), newcont_41]) -> newcont_41
      something_else -> (EXC.case_clause something_else)
erlps__get_until__4 [arg_42, arg_43, arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__get_until__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binrev__1 :: ErlangFun
erlps__binrev__1 [l_0] =
  let arg_1 = (BIF.lists__reverse__2 [l_0, ErlangEmptyList])
  in (BIF.erlang__list_to_binary__1 [arg_1])
erlps__binrev__1 [arg_4] = (EXC.function_clause unit)
erlps__binrev__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__binrev__2 :: ErlangFun
erlps__binrev__2 [l_0, t_1] =
  let arg_2 = (BIF.lists__reverse__2 [l_0, t_1])
  in (BIF.erlang__list_to_binary__1 [arg_2])
erlps__binrev__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__binrev__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_term__2 :: ErlangFun
erlps__limit_term__2 [term_0, depth_1] =
  (EXC.tryOfCatch (\ _ -> (erlps__test_limit__2 [term_0, depth_1]))
     (\ of_4 ->
        case of_4 of
          (ErlangAtom "ok") -> term_0
          something_else -> (EXC.try_clause something_else))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [(ErlangAtom "throw"), (ErlangAtom "limit"), _]) ->
            (erlps__limit__2 [term_0, depth_1])
          ex_5 -> (EXC.raise ex_5)))
erlps__limit_term__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__limit_term__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit__2 :: ErlangFun
erlps__limit__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "...")
erlps__limit__2 [l_2@(ErlangCons h_0 t_1), d_3] =
  case (ErlangAtom "true") of
    _ | ((==) d_3 (ErlangInt (DBI.fromInt 1))) ->
      (ErlangCons (ErlangAtom "...") ErlangEmptyList)
    _ ->
      let case_6 = (erlps__printable_list__1 [l_2])
      in
        case case_6 of
          (ErlangAtom "true") -> l_2
          (ErlangAtom "false") ->
            let   
              arg_10 =
                (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
            in let head_8 = (erlps__limit__2 [h_0, arg_10])
            in let
              arg_15 =
                (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
            in let tail_13 = (erlps__limit_tail__2 [t_1, arg_15])
            in (ErlangCons head_8 tail_13)
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.if_clause unit)
erlps__limit__2 [term_0, d_1] | (isEMap term_0) =
  (erlps__limit_map__2 [term_0, d_1])
erlps__limit__2 [t_0@(ErlangTuple []), _d_1] = t_0
erlps__limit__2 [t_0, d_1] | (isETuple t_0) =
  case (ErlangAtom "true") of
    _ | ((==) d_1 (ErlangInt (DBI.fromInt 1))) ->
      (ErlangTuple [(ErlangAtom "...")])
    _ ->
      let   
        arg_5 =
          (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 1)), t_0])
      in let
        arg_8 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
      in let head_4 = (erlps__limit__2 [arg_5, arg_8])
      in let
        arg_14 =
          (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
      in let
        tail_11 =
          (erlps__limit_tuple__3
             [t_0, (ErlangInt (DBI.fromInt 2)), arg_14])
      in (BIF.erlang__list_to_tuple__1 [(ErlangCons head_4 tail_11)])
    _ -> (EXC.if_clause unit)
erlps__limit__2 [term_3@(ErlangBinary bin_c_0), d_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  (erlps__limit_bitstring__2 [term_3, d_4])
erlps__limit__2 [term_0, _d_1] = term_0
erlps__limit__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__limit__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_tail__2 :: ErlangFun
erlps__limit_tail__2 [(ErlangEmptyList), _d_0] = ErlangEmptyList
erlps__limit_tail__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons (ErlangAtom "...") ErlangEmptyList)
erlps__limit_tail__2 [(ErlangCons h_0 t_1), d_2] =
  let   
    arg_5 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let head_3 = (erlps__limit__2 [h_0, arg_5])
  in let
    arg_10 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_8 = (erlps__limit_tail__2 [t_1, arg_10])
  in (ErlangCons head_3 tail_8)
erlps__limit_tail__2 [other_0, d_1] =
  let
    arg_3 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__limit__2 [other_0, arg_3])
erlps__limit_tail__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__limit_tail__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_tuple__3 :: ErlangFun
erlps__limit_tuple__3 [t_0, i_1, _d_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_4 = (BIF.erlang__tuple_size__1 [t_0])
             in (BIF.erlang__op_greater [i_1, rop_4])))) =
  ErlangEmptyList
erlps__limit_tuple__3 [_, _i_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons (ErlangAtom "...") ErlangEmptyList)
erlps__limit_tuple__3 [t_0, i_1, d_2] =
  let    arg_4 = (BIF.erlang__element__2 [i_1, t_0])
  in let
    arg_7 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let head_3 = (erlps__limit__2 [arg_4, arg_7])
  in let
    arg_12 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_15 =
      (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let tail_10 = (erlps__limit_tuple__3 [t_0, arg_12, arg_15])
  in (ErlangCons head_3 tail_10)
erlps__limit_tuple__3 [arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__limit_tuple__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_map__2 :: ErlangFun
erlps__limit_map__2 [map_0, d_1] =
  let   
    arg_2 =
      (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [map_0])
  in let
    arg_4 = (BIF.erlang__op_plus [d_1, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__limit_map_body__4 [arg_2, arg_4, d_1, ErlangEmptyList])
erlps__limit_map__2 [arg_9, arg_10] = (EXC.function_clause unit)
erlps__limit_map__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_map_body__4 :: ErlangFun
erlps__limit_map_body__4 [_i_0, (ErlangInt num_1), _d0_2, acc_3]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (BIF.maps__from_list__1 [acc_3])
erlps__limit_map_body__4 [i_0, d_1, d0_2, acc_3] =
  let
    case_4 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i_0])
  in
    case case_4 of
      (ErlangTuple [k_6, v_7, nexti_8]) ->
        let   
          arg_10 =
            (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
        in let head_15 = (erlps__limit_map_assoc__3 [k_6, v_7, d0_2])
        in
          (erlps__limit_map_body__4
             [nexti_8, arg_10, d0_2, (ErlangCons head_15 acc_3)])
      (ErlangAtom "none") -> (BIF.maps__from_list__1 [acc_3])
      something_else -> (EXC.case_clause something_else)
erlps__limit_map_body__4 [arg_21, arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__limit_map_body__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_map_assoc__3 :: ErlangFun
erlps__limit_map_assoc__3 [k_0, v_1, d_2] =
  let   
    arg_6 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let tup_el_4 = (erlps__limit__2 [v_1, arg_6])
  in (ErlangTuple [k_0, tup_el_4])
erlps__limit_map_assoc__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__limit_map_assoc__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_bitstring__2 :: ErlangFun
erlps__limit_bitstring__2 [b_0, _d_1] = b_0
erlps__limit_bitstring__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__limit_bitstring__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit__2 :: ErlangFun
erlps__test_limit__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (BIF.erlang__throw__1 [(ErlangAtom "limit")])
erlps__test_limit__2 [l_2@(ErlangCons h_0 t_1), d_3]
  | (isEInt d_3) =
  case (ErlangAtom "true") of
    _ | ((==) d_3 (ErlangInt (DBI.fromInt 1))) ->
      (BIF.erlang__throw__1 [(ErlangAtom "limit")])
    _ ->
      let case_5 = (erlps__printable_list__1 [l_2])
      in
        case case_5 of
          (ErlangAtom "true") -> (ErlangAtom "ok")
          (ErlangAtom "false") ->
            let   
              arg_8 = (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
            in let _ = (erlps__test_limit__2 [h_0, arg_8])
            in let
              arg_12 =
                (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
            in (erlps__test_limit_tail__2 [t_1, arg_12])
          something_else -> (EXC.case_clause something_else)
    _ -> (EXC.if_clause unit)
erlps__test_limit__2 [term_0, d_1] | (isEMap term_0) =
  (erlps__test_limit_map__2 [term_0, d_1])
erlps__test_limit__2 [(ErlangTuple []), _d_0] = (ErlangAtom "ok")
erlps__test_limit__2 [t_0, d_1] | (isETuple t_0) =
  let arg_4 = (BIF.erlang__tuple_size__1 [t_0])
  in
    (erlps__test_limit_tuple__4
       [t_0, (ErlangInt (DBI.fromInt 1)), arg_4, d_1])
erlps__test_limit__2 [term_3@(ErlangBinary bin_c_0), d_4]
  | size_1 <- ((DBI.fromInt 8))
  , (BIN.Ok _ bin_2) <-
      ((BIN.chop_int bin_c_0 size_1 1 BIN.Big BIN.Unsigned))
  , (BIN.empty bin_2) =
  (erlps__test_limit_bitstring__2 [term_3, d_4])
erlps__test_limit__2 [_term_0, _d_1] = (ErlangAtom "ok")
erlps__test_limit__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__test_limit__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_tail__2 :: ErlangFun
erlps__test_limit_tail__2 [(ErlangEmptyList), _d_0] =
  (ErlangAtom "ok")
erlps__test_limit_tail__2 [_, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (BIF.erlang__throw__1 [(ErlangAtom "limit")])
erlps__test_limit_tail__2 [(ErlangCons h_0 t_1), d_2] =
  let   
    arg_4 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let _ = (erlps__test_limit__2 [h_0, arg_4])
  in let
    arg_8 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__test_limit_tail__2 [t_1, arg_8])
erlps__test_limit_tail__2 [other_0, d_1] =
  let
    arg_3 = (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__test_limit__2 [other_0, arg_3])
erlps__test_limit_tail__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__test_limit_tail__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_tuple__4 :: ErlangFun
erlps__test_limit_tuple__4 [_t_0, i_1, sz_2, _d_3]
  | (weakGt i_1 sz_2) =
  (ErlangAtom "ok")
erlps__test_limit_tuple__4 [_, _, _, (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (BIF.erlang__throw__1 [(ErlangAtom "limit")])
erlps__test_limit_tuple__4 [t_0, i_1, sz_2, d_3] =
  let    arg_4 = (BIF.erlang__element__2 [i_1, t_0])
  in let
    arg_7 = (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
  in let _ = (erlps__test_limit__2 [arg_4, arg_7])
  in let
    arg_11 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_15 =
      (BIF.erlang__op_minus [d_3, (ErlangInt (DBI.fromInt 1))])
  in (erlps__test_limit_tuple__4 [t_0, arg_11, sz_2, arg_15])
erlps__test_limit_tuple__4 [arg_18, arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__test_limit_tuple__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_map__2 :: ErlangFun
erlps__test_limit_map__2 [map_0, d_1] =
  let
    arg_2 =
      (BIF.do_remote_fun_call "Maps" "erlps__iterator__1" [map_0])
  in (erlps__test_limit_map_body__2 [arg_2, d_1])
erlps__test_limit_map__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__test_limit_map__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_map_body__2 :: ErlangFun
erlps__test_limit_map_body__2 [_i_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  (BIF.erlang__throw__1 [(ErlangAtom "limit")])
erlps__test_limit_map_body__2 [i_0, d_1] =
  let
    case_2 = (BIF.do_remote_fun_call "Maps" "erlps__next__1" [i_0])
  in
    case case_2 of
      (ErlangTuple [k_4, v_5, nexti_6]) ->
        let    _ = (erlps__test_limit_map_assoc__3 [k_4, v_5, d_1])
        in let
          arg_11 =
            (BIF.erlang__op_minus [d_1, (ErlangInt (DBI.fromInt 1))])
        in (erlps__test_limit_map_body__2 [nexti_6, arg_11])
      (ErlangAtom "none") -> (ErlangAtom "ok")
      something_else -> (EXC.case_clause something_else)
erlps__test_limit_map_body__2 [arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__test_limit_map_body__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_map_assoc__3 :: ErlangFun
erlps__test_limit_map_assoc__3 [k_0, v_1, d_2] =
  let   
    arg_4 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in let _ = (erlps__test_limit__2 [k_0, arg_4])
  in let
    arg_8 = (BIF.erlang__op_minus [d_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__test_limit__2 [v_1, arg_8])
erlps__test_limit_map_assoc__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__test_limit_map_assoc__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_limit_bitstring__2 :: ErlangFun
erlps__test_limit_bitstring__2 [_, _] = (ErlangAtom "ok")
erlps__test_limit_bitstring__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__test_limit_bitstring__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chars_length__1 :: ErlangFun
erlps__chars_length__1 [s_0] =
  (EXC.tryCatch (\ _ -> (BIF.erlang__iolist_size__1 [s_0]))
     (\ ex_3 ->
        case ex_3 of
          (ErlangTuple [_, _, _]) ->
            (BIF.do_remote_fun_call "String" "erlps__length__1" [s_0])
          ex_3 -> (EXC.raise ex_3)))
erlps__chars_length__1 [arg_5] = (EXC.function_clause unit)
erlps__chars_length__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)