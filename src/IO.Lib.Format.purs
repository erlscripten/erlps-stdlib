module Io.Lib.Format(erlps__fwrite__2, erlps__fwrite__3,
                     erlps__fwrite_g__1, erlps__indentation__2, erlps__scan__2,
                     erlps__unscan__1, erlps__build__1, erlps__build__2) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__fwrite__2 :: ErlangFun
erlps__fwrite__2 [format_0, args_1] =
  let arg_2 = (erlps__scan__2 [format_0, args_1])
  in (erlps__build__1 [arg_2])
erlps__fwrite__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__fwrite__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite__3 :: ErlangFun
erlps__fwrite__3 [format_0, args_1, options_2] =
  let arg_3 = (erlps__scan__2 [format_0, args_1])
  in (erlps__build__2 [arg_3, options_2])
erlps__fwrite__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__fwrite__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build__1 :: ErlangFun
erlps__build__1 [cs_0] =
  (erlps__build__2 [cs_0, ErlangEmptyList])
erlps__build__1 [arg_3] = (EXC.function_clause unit)
erlps__build__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build__2 :: ErlangFun
erlps__build__2 [cs_0, options_1] =
  let    arg_4 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    charslimit_6 =
      (erlps__get_option__3
         [(ErlangAtom "chars_limit"), options_1, arg_4])
  in let res1_8 = (erlps__build_small__1 [cs_0])
  in let match_expr_14 = (erlps__count_small__1 [res1_8])
  in
    case match_expr_14 of
      (ErlangTuple [p_10, s_11, w_12, other_13]) ->
        let    lop_16 = (BIF.erlang__op_plus [p_10, s_11])
        in let case_15 = (BIF.erlang__op_plus [lop_16, w_12])
        in
          case case_15 of
            (ErlangInt num_20) | ((ErlangInt num_20) ==
                                    (ErlangInt (DBI.fromInt 0))) ->
              res1_8
            numoflimited_21 ->
              let remainingchars_24 = (erlps__sub__2 [charslimit_6, other_13])
              in
                (erlps__build_limited__5
                   [res1_8, p_10, numoflimited_21, remainingchars_24,
                    (ErlangInt (DBI.fromInt 0))])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_14)
erlps__build__2 [arg_30, arg_31] = (EXC.function_clause unit)
erlps__build__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scan__2 :: ErlangFun
erlps__scan__2 [format_0, args_1] | (isEAtom format_0) =
  let arg_2 = (BIF.erlang__atom_to_list__1 [format_0])
  in (erlps__scan__2 [arg_2, args_1])
erlps__scan__2 [format_0, args_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [format_0])))) =
  let arg_2 = (BIF.erlang__binary_to_list__1 [format_0])
  in (erlps__scan__2 [arg_2, args_1])
erlps__scan__2 [format_0, args_1] =
  (erlps__collect__2 [format_0, args_1])
erlps__scan__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__scan__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unscan__1 :: ErlangFun
erlps__unscan__1 [cs_0] =
  let    tup_el_1 = (erlps__print__1 [cs_0])
  in let tup_el_3 = (erlps__args__1 [cs_0])
  in (ErlangTuple [tup_el_1, tup_el_3])
erlps__unscan__1 [arg_5] = (EXC.function_clause unit)
erlps__unscan__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args__1 :: ErlangFun
erlps__args__1 [(ErlangCons (ErlangMap map_0) cs_2)]
  | (DM.Just as_1) <- ((Map.lookup (ErlangAtom "args") map_0)) =
  let rop_4 = (erlps__args__1 [cs_2])
  in (BIF.erlang__op_append [as_1, rop_4])
erlps__args__1 [(ErlangCons _c_0 cs_1)] = (erlps__args__1 [cs_1])
erlps__args__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__args__1 [arg_0] = (EXC.function_clause unit)
erlps__args__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__1 :: ErlangFun
erlps__print__1 [(ErlangCons (ErlangMap map_0) cs_8)]
  | (DM.Just strings_7) <-
      ((Map.lookup (ErlangAtom "strings") map_0))
  , (DM.Just encoding_6) <-
      ((Map.lookup (ErlangAtom "encoding") map_0))
  , (DM.Just pad_5) <- ((Map.lookup (ErlangAtom "pad_char") map_0))
  , (DM.Just p_4) <- ((Map.lookup (ErlangAtom "precision") map_0))
  , (DM.Just ad_3) <- ((Map.lookup (ErlangAtom "adjust") map_0))
  , (DM.Just f_2) <- ((Map.lookup (ErlangAtom "width") map_0))
  , (DM.Just c_1) <-
      ((Map.lookup (ErlangAtom "control_char") map_0)) =
  let   
    lop_9 =
      (erlps__print__7
         [c_1, f_2, ad_3, p_4, pad_5, encoding_6, strings_7])
  in let rop_17 = (erlps__print__1 [cs_8])
  in (BIF.erlang__op_append [lop_9, rop_17])
erlps__print__1 [(ErlangCons c_0 cs_1)] =
  let tail_3 = (erlps__print__1 [cs_1])
  in (ErlangCons c_0 tail_3)
erlps__print__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__print__1 [arg_0] = (EXC.function_clause unit)
erlps__print__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__7 :: ErlangFun
erlps__print__7 [c_0, f_1, ad_2, p_3, pad_4, encoding_5,
                 strings_6]
  =
  let    lop_11 = (erlps__print_field_width__2 [f_1, ad_2])
  in let lop_15 = (erlps__print_precision__2 [p_3, pad_4])
  in let lop_19 = (erlps__print_pad_char__1 [pad_4])
  in let lop_22 = (erlps__print_encoding__1 [encoding_5])
  in let lop_25 = (erlps__print_strings__1 [strings_6])
  in let
    rop_24 =
      (BIF.erlang__op_append
         [lop_25, (ErlangCons c_0 ErlangEmptyList)])
  in let rop_21 = (BIF.erlang__op_append [lop_22, rop_24])
  in let rop_18 = (BIF.erlang__op_append [lop_19, rop_21])
  in let rop_14 = (BIF.erlang__op_append [lop_15, rop_18])
  in let rop_10 = (BIF.erlang__op_append [lop_11, rop_14])
  in
    (BIF.erlang__op_append
       [(ErlangCons (ErlangInt (DBI.fromInt 126)) ErlangEmptyList),
        rop_10])
erlps__print__7 [arg_30, arg_31, arg_32, arg_33, arg_34, arg_35,
                 arg_36]
  =
  (EXC.function_clause unit)
erlps__print__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_field_width__2 :: ErlangFun
erlps__print_field_width__2 [(ErlangAtom "none"), _ad_0] =
  (make_string "")
erlps__print_field_width__2 [f_0, (ErlangAtom "left")] =
  let arg_1 = (BIF.erlang__op_neg [f_0])
  in (BIF.erlang__integer_to_list__1 [arg_1])
erlps__print_field_width__2 [f_0, (ErlangAtom "right")] =
  (BIF.erlang__integer_to_list__1 [f_0])
erlps__print_field_width__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__print_field_width__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_precision__2 :: ErlangFun
erlps__print_precision__2 [(ErlangAtom "none"),
                           (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (make_string "")
erlps__print_precision__2 [(ErlangAtom "none"), _pad_0] =
  (make_string ".")
erlps__print_precision__2 [p_0, _pad_1] =
  let tail_3 = (BIF.erlang__integer_to_list__1 [p_0])
  in (ErlangCons (ErlangInt (DBI.fromInt 46)) tail_3)
erlps__print_precision__2 [arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__print_precision__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_pad_char__1 :: ErlangFun
erlps__print_pad_char__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 32))) =
  (make_string "")
erlps__print_pad_char__1 [pad_0] =
  (ErlangCons (ErlangInt (DBI.fromInt 46))
     (ErlangCons pad_0 ErlangEmptyList))
erlps__print_pad_char__1 [arg_5] = (EXC.function_clause unit)
erlps__print_pad_char__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_encoding__1 :: ErlangFun
erlps__print_encoding__1 [(ErlangAtom "unicode")] =
  (make_string "t")
erlps__print_encoding__1 [(ErlangAtom "latin1")] =
  (make_string "")
erlps__print_encoding__1 [arg_0] = (EXC.function_clause unit)
erlps__print_encoding__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print_strings__1 :: ErlangFun
erlps__print_strings__1 [(ErlangAtom "false")] =
  (make_string "l")
erlps__print_strings__1 [(ErlangAtom "true")] = (make_string "")
erlps__print_strings__1 [arg_0] = (EXC.function_clause unit)
erlps__print_strings__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect__2 :: ErlangFun
erlps__collect__2 [(ErlangCons (ErlangInt num_0) fmt0_1),
                   args0_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 126))) =
  let match_expr_8 = (erlps__collect_cseq__2 [fmt0_1, args0_2])
  in
    case match_expr_8 of
      (ErlangTuple [c_5, fmt1_6, args1_7]) ->
        let tail_10 = (erlps__collect__2 [fmt1_6, args1_7])
        in (ErlangCons c_5 tail_10)
      _ -> (EXC.badmatch match_expr_8)
erlps__collect__2 [(ErlangCons c_0 fmt_1), args_2] =
  let tail_4 = (erlps__collect__2 [fmt_1, args_2])
  in (ErlangCons c_0 tail_4)
erlps__collect__2 [(ErlangEmptyList), (ErlangEmptyList)] =
  ErlangEmptyList
erlps__collect__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__collect__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_cseq__2 :: ErlangFun
erlps__collect_cseq__2 [fmt0_0, args0_1] =
  let match_expr_8 = (erlps__field_width__2 [fmt0_0, args0_1])
  in
    case match_expr_8 of
      (ErlangTuple [f_4, ad_5, fmt1_6, args1_7]) ->
        let match_expr_14 = (erlps__precision__2 [fmt1_6, args1_7])
        in
          case match_expr_14 of
            (ErlangTuple [p_11, fmt2_12, args2_13]) ->
              let match_expr_20 = (erlps__pad_char__2 [fmt2_12, args2_13])
              in
                case match_expr_20 of
                  (ErlangTuple [pad_17, fmt3_18, args3_19]) ->
                    let   
                      spec0_33 =
                        (ErlangMap
                           (Map.fromFoldable
                              [(Tup.Tuple (ErlangAtom "width") f_4),
                               (Tup.Tuple (ErlangAtom "adjust") ad_5),
                               (Tup.Tuple (ErlangAtom "precision") p_11),
                               (Tup.Tuple (ErlangAtom "pad_char") pad_17),
                               (Tup.Tuple (ErlangAtom "encoding")
                                  (ErlangAtom "latin1")),
                               (Tup.Tuple (ErlangAtom "strings")
                                  (ErlangAtom "true"))]))
                    in let
                      match_expr_38 = (erlps__modifiers__2 [fmt3_18, spec0_33])
                    in
                      case match_expr_38 of
                        (ErlangTuple [spec1_36, fmt4_37]) ->
                          let
                            match_expr_45 =
                              (erlps__collect_cc__2 [fmt4_37, args3_19])
                          in
                            case match_expr_45 of
                              (ErlangTuple [c_41, as_42, fmt5_43, args4_44]) ->
                                let   
                                  map_ext_51 =
                                    (ErlangMap
                                       (Map.fromFoldable
                                          [(Tup.Tuple
                                              (ErlangAtom "control_char") c_41),
                                           (Tup.Tuple (ErlangAtom "args")
                                              as_42)]))
                                in let
                                  spec2_53 =
                                    (BIF.maps__merge__2 [spec1_36, map_ext_51])
                                in (ErlangTuple [spec2_53, fmt5_43, args4_44])
                              _ -> (EXC.badmatch match_expr_45)
                        _ -> (EXC.badmatch match_expr_38)
                  _ -> (EXC.badmatch match_expr_20)
            _ -> (EXC.badmatch match_expr_14)
      _ -> (EXC.badmatch match_expr_8)
erlps__collect_cseq__2 [arg_57, arg_58] =
  (EXC.function_clause unit)
erlps__collect_cseq__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__modifiers__2 :: ErlangFun
erlps__modifiers__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                     spec_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 116))) =
  let   
    map_ext_8 =
      (ErlangMap
         (Map.singleton (ErlangAtom "encoding") (ErlangAtom "unicode")))
  in let arg_4 = (BIF.maps__merge__2 [spec_2, map_ext_8])
  in (erlps__modifiers__2 [fmt_1, arg_4])
erlps__modifiers__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                     spec_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 108))) =
  let   
    map_ext_8 =
      (ErlangMap
         (Map.singleton (ErlangAtom "strings") (ErlangAtom "false")))
  in let arg_4 = (BIF.maps__merge__2 [spec_2, map_ext_8])
  in (erlps__modifiers__2 [fmt_1, arg_4])
erlps__modifiers__2 [fmt_0, spec_1] =
  (ErlangTuple [spec_1, fmt_0])
erlps__modifiers__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__modifiers__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_width__2 :: ErlangFun
erlps__field_width__2 [(ErlangCons (ErlangInt num_0) fmt0_1),
                       args0_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 45))) =
  let match_expr_8 = (erlps__field_value__2 [fmt0_1, args0_2])
  in
    case match_expr_8 of
      (ErlangTuple [f_5, fmt_6, args_7]) ->
        let arg_9 = (BIF.erlang__op_neg [f_5])
        in (erlps__field_width__3 [arg_9, fmt_6, args_7])
      _ -> (EXC.badmatch match_expr_8)
erlps__field_width__2 [fmt0_0, args0_1] =
  let match_expr_7 = (erlps__field_value__2 [fmt0_0, args0_1])
  in
    case match_expr_7 of
      (ErlangTuple [f_4, fmt_5, args_6]) ->
        (erlps__field_width__3 [f_4, fmt_5, args_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__field_width__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__field_width__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_width__3 :: ErlangFun
erlps__field_width__3 [f_0, fmt_1, args_2]
  | (weakLt f_0 (ErlangInt (DBI.fromInt 0))) =
  let tup_el_3 = (BIF.erlang__op_neg [f_0])
  in (ErlangTuple [tup_el_3, (ErlangAtom "left"), fmt_1, args_2])
erlps__field_width__3 [f_0, fmt_1, args_2]
  | (weakGeq f_0 (ErlangInt (DBI.fromInt 0))) =
  (ErlangTuple [f_0, (ErlangAtom "right"), fmt_1, args_2])
erlps__field_width__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__field_width__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__precision__2 :: ErlangFun
erlps__precision__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                     args_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__field_value__2 [fmt_1, args_2])
erlps__precision__2 [fmt_0, args_1] =
  (ErlangTuple [(ErlangAtom "none"), fmt_0, args_1])
erlps__precision__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__precision__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_value__2 :: ErlangFun
erlps__field_value__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                       (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 42)))
  , (isEInt a_2) =
  (ErlangTuple [a_2, fmt_1, args_3])
erlps__field_value__2 [(ErlangCons c_0 fmt_1), args_2]
  | (((isEInt c_0) &&
        (weakGeq c_0 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__field_value__3
     [(ErlangCons c_0 fmt_1), args_2, (ErlangInt (DBI.fromInt 0))])
erlps__field_value__2 [fmt_0, args_1] =
  (ErlangTuple [(ErlangAtom "none"), fmt_0, args_1])
erlps__field_value__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__field_value__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__field_value__3 :: ErlangFun
erlps__field_value__3 [(ErlangCons c_0 fmt_1), args_2, f_3]
  | (((isEInt c_0) &&
        (weakGeq c_0 (ErlangInt (DBI.fromInt 48)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 57)))) =
  let   
    lop_7 = (BIF.erlang__op_mult [(ErlangInt (DBI.fromInt 10)), f_3])
  in let
    rop_10 =
      (BIF.erlang__op_minus [c_0, (ErlangInt (DBI.fromInt 48))])
  in let arg_6 = (BIF.erlang__op_plus [lop_7, rop_10])
  in (erlps__field_value__3 [fmt_1, args_2, arg_6])
erlps__field_value__3 [fmt_0, args_1, f_2] =
  (ErlangTuple [f_2, fmt_0, args_1])
erlps__field_value__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__field_value__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pad_char__2 :: ErlangFun
erlps__pad_char__2 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) fmt_2)),
                    (ErlangCons pad_3 args_4)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 42))) =
  (ErlangTuple [pad_3, fmt_2, args_4])
erlps__pad_char__2 [(ErlangCons (ErlangInt num_0) (ErlangCons pad_1 fmt_2)),
                    args_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 46))) =
  (ErlangTuple [pad_1, fmt_2, args_3])
erlps__pad_char__2 [fmt_0, args_1] =
  (ErlangTuple [(ErlangInt (DBI.fromInt 32)), fmt_0, args_1])
erlps__pad_char__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__pad_char__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__collect_cc__2 :: ErlangFun
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 119))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 119)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 112)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 (ErlangCons depth_3 args_4))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 87))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 87)),
      (ErlangCons a_2 (ErlangCons depth_3 ErlangEmptyList)), fmt_1,
      args_4])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 (ErlangCons depth_3 args_4))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 80))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 80)),
      (ErlangCons a_2 (ErlangCons depth_3 ErlangEmptyList)), fmt_1,
      args_4])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 115)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 101)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 102)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 103))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 103)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 98)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 66))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 66)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 (ErlangCons prefix_3 args_4))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 120)),
      (ErlangCons a_2 (ErlangCons prefix_3 ErlangEmptyList)), fmt_1,
      args_4])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 (ErlangCons prefix_3 args_4))]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 88))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 88)),
      (ErlangCons a_2 (ErlangCons prefix_3 ErlangEmptyList)), fmt_1,
      args_4])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 43)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 35)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 99)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      args_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 126)))
  , (isEList args_2) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 126)), ErlangEmptyList, fmt_1, args_2])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      args_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 110)))
  , (isEList args_2) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 110)), ErlangEmptyList, fmt_1, args_2])
erlps__collect_cc__2 [(ErlangCons (ErlangInt num_0) fmt_1),
                      (ErlangCons a_2 args_3)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 105))) =
  (ErlangTuple
     [(ErlangInt (DBI.fromInt 105)), (ErlangCons a_2 ErlangEmptyList),
      fmt_1, args_3])
erlps__collect_cc__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__collect_cc__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count_small__1 :: ErlangFun
erlps__count_small__1 [cs_0] =
  let
    arg_2 =
      (ErlangMap
         (Map.fromFoldable
            [(Tup.Tuple (ErlangAtom "p") (ErlangInt (DBI.fromInt 0))),
             (Tup.Tuple (ErlangAtom "s") (ErlangInt (DBI.fromInt 0))),
             (Tup.Tuple (ErlangAtom "w") (ErlangInt (DBI.fromInt 0))),
             (Tup.Tuple (ErlangAtom "other") (ErlangInt (DBI.fromInt 0)))]))
  in (erlps__count_small__2 [cs_0, arg_2])
erlps__count_small__1 [arg_11] = (EXC.function_clause unit)
erlps__count_small__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__count_small__2 :: ErlangFun
erlps__count_small__2 [(ErlangCons (ErlangMap map_0) cs_2),
                       cnts_5@(ErlangMap map_3)]
  | (DM.Just (ErlangInt num_1)) <-
      ((Map.lookup (ErlangAtom "control_char") map_0))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 112)))
  , (DM.Just p_4) <- ((Map.lookup (ErlangAtom "p") map_3)) =
  let   
    val_10 = (BIF.erlang__op_plus [p_4, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_13 = (ErlangMap (Map.singleton (ErlangAtom "p") val_10))
  in let
    arg_7 =
      case (findMissingKey cnts_5 [(ErlangAtom "p")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_5, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_2, arg_7])
erlps__count_small__2 [(ErlangCons (ErlangMap map_0) cs_2),
                       cnts_5@(ErlangMap map_3)]
  | (DM.Just (ErlangInt num_1)) <-
      ((Map.lookup (ErlangAtom "control_char") map_0))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 80)))
  , (DM.Just p_4) <- ((Map.lookup (ErlangAtom "p") map_3)) =
  let   
    val_10 = (BIF.erlang__op_plus [p_4, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_13 = (ErlangMap (Map.singleton (ErlangAtom "p") val_10))
  in let
    arg_7 =
      case (findMissingKey cnts_5 [(ErlangAtom "p")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_5, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_2, arg_7])
erlps__count_small__2 [(ErlangCons (ErlangMap map_0) cs_2),
                       cnts_5@(ErlangMap map_3)]
  | (DM.Just (ErlangInt num_1)) <-
      ((Map.lookup (ErlangAtom "control_char") map_0))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 119)))
  , (DM.Just w_4) <- ((Map.lookup (ErlangAtom "w") map_3)) =
  let   
    val_10 = (BIF.erlang__op_plus [w_4, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_13 = (ErlangMap (Map.singleton (ErlangAtom "w") val_10))
  in let
    arg_7 =
      case (findMissingKey cnts_5 [(ErlangAtom "w")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_5, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_2, arg_7])
erlps__count_small__2 [(ErlangCons (ErlangMap map_0) cs_2),
                       cnts_5@(ErlangMap map_3)]
  | (DM.Just (ErlangInt num_1)) <-
      ((Map.lookup (ErlangAtom "control_char") map_0))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 87)))
  , (DM.Just w_4) <- ((Map.lookup (ErlangAtom "w") map_3)) =
  let   
    val_10 = (BIF.erlang__op_plus [w_4, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_13 = (ErlangMap (Map.singleton (ErlangAtom "w") val_10))
  in let
    arg_7 =
      case (findMissingKey cnts_5 [(ErlangAtom "w")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_5, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_2, arg_7])
erlps__count_small__2 [(ErlangCons (ErlangMap map_0) cs_2),
                       cnts_5@(ErlangMap map_3)]
  | (DM.Just (ErlangInt num_1)) <-
      ((Map.lookup (ErlangAtom "control_char") map_0))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 115)))
  , (DM.Just w_4) <- ((Map.lookup (ErlangAtom "w") map_3)) =
  let   
    val_10 = (BIF.erlang__op_plus [w_4, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_13 = (ErlangMap (Map.singleton (ErlangAtom "w") val_10))
  in let
    arg_7 =
      case (findMissingKey cnts_5 [(ErlangAtom "w")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_5, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_2, arg_7])
erlps__count_small__2 [(ErlangCons s_0 cs_1),
                       cnts_4@(ErlangMap map_2)]
  | (DM.Just other_3) <- ((Map.lookup (ErlangAtom "other") map_2))
  , ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_16 = (BIF.erlang__is_list__1 [s_0])
             in
               case lop_16 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") -> (BIF.erlang__is_binary__1 [s_0])
                 _ -> (EXC.badarg1 lop_16)))) =
  let   
    rop_11 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_0])
  in let val_9 = (BIF.erlang__op_plus [other_3, rop_11])
  in let
    map_ext_13 =
      (ErlangMap (Map.singleton (ErlangAtom "other") val_9))
  in let
    arg_6 =
      case (findMissingKey cnts_4 [(ErlangAtom "other")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_4, map_ext_13])
        (DM.Just missing_15) -> (EXC.badkey missing_15)
  in (erlps__count_small__2 [cs_1, arg_6])
erlps__count_small__2 [(ErlangCons c_0 cs_1),
                       cnts_4@(ErlangMap map_2)]
  | (DM.Just other_3) <- ((Map.lookup (ErlangAtom "other") map_2))
  , (isEInt c_0) =
  let   
    val_9 =
      (BIF.erlang__op_plus [other_3, (ErlangInt (DBI.fromInt 1))])
  in let
    map_ext_12 =
      (ErlangMap (Map.singleton (ErlangAtom "other") val_9))
  in let
    arg_6 =
      case (findMissingKey cnts_4 [(ErlangAtom "other")]) of
        (DM.Nothing) -> (BIF.maps__merge__2 [cnts_4, map_ext_12])
        (DM.Just missing_14) -> (EXC.badkey missing_14)
  in (erlps__count_small__2 [cs_1, arg_6])
erlps__count_small__2 [(ErlangEmptyList), (ErlangMap map_0)]
  | (DM.Just other_4) <- ((Map.lookup (ErlangAtom "other") map_0))
  , (DM.Just w_3) <- ((Map.lookup (ErlangAtom "w") map_0))
  , (DM.Just s_2) <- ((Map.lookup (ErlangAtom "s") map_0))
  , (DM.Just p_1) <- ((Map.lookup (ErlangAtom "p") map_0)) =
  (ErlangTuple [p_1, s_2, w_3, other_4])
erlps__count_small__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__count_small__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build_small__1 :: ErlangFun
erlps__build_small__1 [(ErlangCons cc_8@(ErlangMap map_0) cs_9)]
  | (DM.Just enc_7) <- ((Map.lookup (ErlangAtom "encoding") map_0))
  , (DM.Just pad_6) <- ((Map.lookup (ErlangAtom "pad_char") map_0))
  , (DM.Just p_5) <- ((Map.lookup (ErlangAtom "precision") map_0))
  , (DM.Just ad_4) <- ((Map.lookup (ErlangAtom "adjust") map_0))
  , (DM.Just f_3) <- ((Map.lookup (ErlangAtom "width") map_0))
  , (DM.Just as_2) <- ((Map.lookup (ErlangAtom "args") map_0))
  , (DM.Just c_1) <-
      ((Map.lookup (ErlangAtom "control_char") map_0)) =
  let
    case_10 =
      (erlps__control_small__7
         [c_1, as_2, f_3, ad_4, p_5, pad_6, enc_7])
  in
    case case_10 of
      (ErlangAtom "not_small") ->
        let tail_19 = (erlps__build_small__1 [cs_9])
        in (ErlangCons cc_8 tail_19)
      s_21 ->
        let   
          lop_22 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [s_21])
        in let rop_24 = (erlps__build_small__1 [cs_9])
        in (BIF.erlang__op_append [lop_22, rop_24])
      something_else -> (EXC.case_clause something_else)
erlps__build_small__1 [(ErlangCons c_0 cs_1)] =
  let tail_3 = (erlps__build_small__1 [cs_1])
  in (ErlangCons c_0 tail_3)
erlps__build_small__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__build_small__1 [arg_0] = (EXC.function_clause unit)
erlps__build_small__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__build_limited__5 :: ErlangFun
erlps__build_limited__5 [(ErlangCons (ErlangMap map_0) cs_9),
                         numofps0_10, count0_11, maxlen0_12, i_13]
  | (DM.Just str_8) <- ((Map.lookup (ErlangAtom "strings") map_0))
  , (DM.Just enc_7) <- ((Map.lookup (ErlangAtom "encoding") map_0))
  , (DM.Just pad_6) <- ((Map.lookup (ErlangAtom "pad_char") map_0))
  , (DM.Just p_5) <- ((Map.lookup (ErlangAtom "precision") map_0))
  , (DM.Just ad_4) <- ((Map.lookup (ErlangAtom "adjust") map_0))
  , (DM.Just f_3) <- ((Map.lookup (ErlangAtom "width") map_0))
  , (DM.Just as_2) <- ((Map.lookup (ErlangAtom "args") map_0))
  , (DM.Just c_1) <-
      ((Map.lookup (ErlangAtom "control_char") map_0)) =
  let   
    maxchars_16 =
      case (ErlangAtom "true") of
        _ | (weakLt maxlen0_12 (ErlangInt (DBI.fromInt 0))) -> maxlen0_12
        _ -> (BIF.erlang__op_div_strict [maxlen0_12, count0_11])
        _ -> (EXC.if_clause unit)
  in let
    s_27 =
      (erlps__control_limited__10
         [c_1, as_2, f_3, ad_4, p_5, pad_6, enc_7, str_8, maxchars_16,
          i_13])
  in let numofps_30 = (erlps__decr_pc__2 [c_1, numofps0_10])
  in let
    count_33 =
      (BIF.erlang__op_minus [count0_11, (ErlangInt (DBI.fromInt 1))])
  in let
    maxlen_38 =
      case (ErlangAtom "true") of
        _ | (weakLt maxlen0_12 (ErlangInt (DBI.fromInt 0))) -> maxlen0_12
        _ ->
          let
            len_35 =
              (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_27])
          in (erlps__sub__2 [maxlen0_12, len_35])
        _ -> (EXC.if_clause unit)
  in
    case (ErlangAtom "true") of
      _ | (weakGt numofps_30 (ErlangInt (DBI.fromInt 0))) ->
        let    arg_45 = (erlps__indentation__2 [s_27, i_13])
        in let
          tail_40 =
            (erlps__build_limited__5
               [cs_9, numofps_30, count_33, maxlen_38, arg_45])
        in (ErlangCons s_27 tail_40)
      _ ->
        let
          tail_49 =
            (erlps__build_limited__5
               [cs_9, numofps_30, count_33, maxlen_38, i_13])
        in (ErlangCons s_27 tail_49)
      _ -> (EXC.if_clause unit)
erlps__build_limited__5 [(ErlangCons (ErlangInt num_0) cs_1),
                         numofps_2, count_3, maxlen_4, _i_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  let
    tail_7 =
      (erlps__build_limited__5
         [cs_1, numofps_2, count_3, maxlen_4,
          (ErlangInt (DBI.fromInt 0))])
  in (ErlangCons (ErlangInt (DBI.fromInt 10)) tail_7)
erlps__build_limited__5 [(ErlangCons (ErlangInt num_0) cs_1),
                         numofps_2, count_3, maxlen_4, i_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  let   
    lop_14 = (BIF.erlang__op_plus [i_5, (ErlangInt (DBI.fromInt 8))])
  in let
    lop_13 =
      (BIF.erlang__op_div_strict [lop_14, (ErlangInt (DBI.fromInt 8))])
  in let
    arg_12 =
      (BIF.erlang__op_mult [lop_13, (ErlangInt (DBI.fromInt 8))])
  in let
    tail_7 =
      (erlps__build_limited__5
         [cs_1, numofps_2, count_3, maxlen_4, arg_12])
  in (ErlangCons (ErlangInt (DBI.fromInt 9)) tail_7)
erlps__build_limited__5 [(ErlangCons c_0 cs_1), numofps_2,
                         count_3, maxlen_4, i_5]
  =
  let   
    arg_12 = (BIF.erlang__op_plus [i_5, (ErlangInt (DBI.fromInt 1))])
  in let
    tail_7 =
      (erlps__build_limited__5
         [cs_1, numofps_2, count_3, maxlen_4, arg_12])
  in (ErlangCons c_0 tail_7)
erlps__build_limited__5 [(ErlangEmptyList), _, _, _, _] =
  ErlangEmptyList
erlps__build_limited__5 [arg_0, arg_1, arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__build_limited__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__decr_pc__2 :: ErlangFun
erlps__decr_pc__2 [(ErlangInt num_0), pc_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112))) =
  (BIF.erlang__op_minus [pc_1, (ErlangInt (DBI.fromInt 1))])
erlps__decr_pc__2 [(ErlangInt num_0), pc_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 80))) =
  (BIF.erlang__op_minus [pc_1, (ErlangInt (DBI.fromInt 1))])
erlps__decr_pc__2 [_, pc_0] = pc_0
erlps__decr_pc__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__decr_pc__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__indentation__2 :: ErlangFun
erlps__indentation__2 [(ErlangCons (ErlangInt num_0) cs_1), _i_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 10))) =
  (erlps__indentation__2 [cs_1, (ErlangInt (DBI.fromInt 0))])
erlps__indentation__2 [(ErlangCons (ErlangInt num_0) cs_1), i_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 9))) =
  let   
    lop_6 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 8))])
  in let
    lop_5 =
      (BIF.erlang__op_div_strict [lop_6, (ErlangInt (DBI.fromInt 8))])
  in let
    arg_4 =
      (BIF.erlang__op_mult [lop_5, (ErlangInt (DBI.fromInt 8))])
  in (erlps__indentation__2 [cs_1, arg_4])
erlps__indentation__2 [(ErlangCons c_0 cs_1), i_2]
  | (isEInt c_0) =
  let
    arg_4 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in (erlps__indentation__2 [cs_1, arg_4])
erlps__indentation__2 [(ErlangCons c_0 cs_1), i_2] =
  let arg_4 = (erlps__indentation__2 [c_0, i_2])
  in (erlps__indentation__2 [cs_1, arg_4])
erlps__indentation__2 [(ErlangEmptyList), i_0] = i_0
erlps__indentation__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__indentation__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__control_small__7 :: ErlangFun
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, enc_6@(ErlangAtom "latin1")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115)))
  , (isEAtom a_1) =
  let    arg_7 = (BIF.erlang__atom_to_list__1 [a_1])
  in let l_9 = (erlps__iolist_to_chars__1 [arg_7])
  in (erlps__string__6 [l_9, f_2, adj_3, p_4, pad_5, enc_6])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, enc_6@(ErlangAtom "unicode")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115)))
  , (isEAtom a_1) =
  let arg_7 = (BIF.erlang__atom_to_list__1 [a_1])
  in (erlps__string__6 [arg_7, f_2, adj_3, p_4, pad_5, enc_6])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101)))
  , (isEFloat a_1) =
  (erlps__fwrite_e__5 [a_1, f_2, adj_3, p_4, pad_5])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102)))
  , (isEFloat a_1) =
  (erlps__fwrite_f__5 [a_1, f_2, adj_3, p_4, pad_5])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 103)))
  , (isEFloat a_1) =
  (erlps__fwrite_g__5 [a_1, f_2, adj_3, p_4, pad_5])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98)))
  , (isEInt a_1) =
  let arg_10 = (erlps__base__1 [p_4])
  in
    (erlps__unprefixed_integer__6
       [a_1, f_2, adj_3, arg_10, pad_5, (ErlangAtom "true")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 66)))
  , (isEInt a_1) =
  let arg_10 = (erlps__base__1 [p_4])
  in
    (erlps__unprefixed_integer__6
       [a_1, f_2, adj_3, arg_10, pad_5, (ErlangAtom "false")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangCons prefix_2 (ErlangEmptyList))),
                         f_3, adj_4, p_5, pad_6, _enc_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120)))
  , ((isEInt a_1) && (isEAtom prefix_2)) =
  let    arg_11 = (erlps__base__1 [p_5])
  in let arg_14 = (BIF.erlang__atom_to_list__1 [prefix_2])
  in
    (erlps__prefixed_integer__7
       [a_1, f_3, adj_4, arg_11, pad_6, arg_14, (ErlangAtom "true")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangCons prefix_2 (ErlangEmptyList))),
                         f_3, adj_4, p_5, pad_6, _enc_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120)))
  , (isEInt a_1) =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__deep_char_list__1"
         [prefix_2])
  in
    case match_expr_9 of
      (ErlangAtom "true") ->
        let arg_13 = (erlps__base__1 [p_5])
        in
          (erlps__prefixed_integer__7
             [a_1, f_3, adj_4, arg_13, pad_6, prefix_2, (ErlangAtom "true")])
      _ -> (EXC.badmatch match_expr_9)
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangCons prefix_2 (ErlangEmptyList))),
                         f_3, adj_4, p_5, pad_6, _enc_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 88)))
  , ((isEInt a_1) && (isEAtom prefix_2)) =
  let    arg_11 = (erlps__base__1 [p_5])
  in let arg_14 = (BIF.erlang__atom_to_list__1 [prefix_2])
  in
    (erlps__prefixed_integer__7
       [a_1, f_3, adj_4, arg_11, pad_6, arg_14, (ErlangAtom "false")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangCons prefix_2 (ErlangEmptyList))),
                         f_3, adj_4, p_5, pad_6, _enc_7]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 88)))
  , (isEInt a_1) =
  let
    match_expr_9 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__deep_char_list__1"
         [prefix_2])
  in
    case match_expr_9 of
      (ErlangAtom "true") ->
        let arg_13 = (erlps__base__1 [p_5])
        in
          (erlps__prefixed_integer__7
             [a_1, f_3, adj_4, arg_13, pad_6, prefix_2, (ErlangAtom "false")])
      _ -> (EXC.badmatch match_expr_9)
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43)))
  , (isEInt a_1) =
  let    base_8 = (erlps__base__1 [p_4])
  in let head_9 = (BIF.erlang__integer_to_list__1 [base_8])
  in
    (erlps__prefixed_integer__7
       [a_1, f_2, adj_3, base_8, pad_5,
        (ErlangCons head_9
           (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList)),
        (ErlangAtom "true")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35)))
  , (isEInt a_1) =
  let    base_8 = (erlps__base__1 [p_4])
  in let head_9 = (BIF.erlang__integer_to_list__1 [base_8])
  in
    (erlps__prefixed_integer__7
       [a_1, f_2, adj_3, base_8, pad_5,
        (ErlangCons head_9
           (ErlangCons (ErlangInt (DBI.fromInt 35)) ErlangEmptyList)),
        (ErlangAtom "false")])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, (ErlangAtom "unicode")]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99)))
  , (isEInt a_1) =
  (erlps__char__5 [a_1, f_2, adj_3, p_4, pad_5])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                         pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99)))
  , (isEInt a_1) =
  let
    arg_7 =
      (BIF.erlang__band__2 [a_1, (ErlangInt (DBI.fromInt 255))])
  in (erlps__char__5 [arg_7, f_2, adj_3, p_4, pad_5])
erlps__control_small__7 [(ErlangInt num_0), (ErlangEmptyList),
                         f_1, adj_2, p_3, pad_4, _enc_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 126))) =
  (erlps__char__5
     [(ErlangInt (DBI.fromInt 126)), f_1, adj_2, p_3, pad_4])
erlps__control_small__7 [(ErlangInt num_0), (ErlangEmptyList),
                         f_1, adj_2, p_3, pad_4, _enc_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 110))) =
  (erlps__newline__4 [f_1, adj_2, p_3, pad_4])
erlps__control_small__7 [(ErlangInt num_0),
                         (ErlangCons _a_1 (ErlangEmptyList)), _f_2, _adj_3,
                         _p_4, _pad_5, _enc_6]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 105))) =
  ErlangEmptyList
erlps__control_small__7 [_c_0, _as_1, _f_2, _adj_3, _p_4, _pad_5,
                         _enc_6]
  =
  (ErlangAtom "not_small")
erlps__control_small__7 [arg_7, arg_8, arg_9, arg_10, arg_11,
                         arg_12, arg_13]
  =
  (EXC.function_clause unit)
erlps__control_small__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__control_limited__10 :: ErlangFun
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons l0_1 (ErlangEmptyList)), f_2, adj_3,
                            p_4, pad_5, enc_6@(ErlangAtom "latin1"), _str_7,
                            cl_8, _i_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115))) =
  let    l_13 = (erlps__iolist_to_chars__3 [l0_1, f_2, cl_8])
  in let arg_15 = (erlps__limit_field__2 [f_2, cl_8])
  in (erlps__string__6 [l_13, arg_15, adj_3, p_4, pad_5, enc_6])
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons l0_1 (ErlangEmptyList)), f_2, adj_3,
                            p_4, pad_5, enc_6@(ErlangAtom "unicode"), _str_7,
                            cl_8, _i_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115))) =
  let    l_13 = (erlps__cdata_to_chars__3 [l0_1, f_2, cl_8])
  in let arg_16 = (erlps__limit_field__2 [f_2, cl_8])
  in let
    arg_14 =
      (erlps__string__6 [l_13, arg_16, adj_3, p_4, pad_5, enc_6])
  in (erlps__uniconv__1 [arg_14])
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                            pad_5, enc_6, _str_7, cl_8, _i_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 119))) =
  let   
    tup_el_14 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let head_12 = (ErlangTuple [(ErlangAtom "depth"), tup_el_14])
  in let head_17 = (ErlangTuple [(ErlangAtom "encoding"), enc_6])
  in let head_21 = (ErlangTuple [(ErlangAtom "chars_limit"), cl_8])
  in let
    chars_25 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write__2"
         [a_1,
          (ErlangCons head_12
             (ErlangCons head_17 (ErlangCons head_21 ErlangEmptyList)))])
  in (erlps__term__5 [chars_25, f_2, adj_3, p_4, pad_5])
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons a_1 (ErlangEmptyList)), f_2, adj_3, p_4,
                            pad_5, enc_6, str_7, cl_8, i_9]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112))) =
  let arg_11 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__10
       [a_1, arg_11, f_2, adj_3, p_4, pad_5, enc_6, str_7, cl_8, i_9])
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons a_1 (ErlangCons depth_2 (ErlangEmptyList))),
                            f_3, adj_4, p_5, pad_6, enc_7, _str_8, cl_9, _i_10]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 87)))
  , (isEInt depth_2) =
  let    head_13 = (ErlangTuple [(ErlangAtom "depth"), depth_2])
  in let head_17 = (ErlangTuple [(ErlangAtom "encoding"), enc_7])
  in let head_21 = (ErlangTuple [(ErlangAtom "chars_limit"), cl_9])
  in let
    chars_25 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__write__2"
         [a_1,
          (ErlangCons head_13
             (ErlangCons head_17 (ErlangCons head_21 ErlangEmptyList)))])
  in (erlps__term__5 [chars_25, f_3, adj_4, p_5, pad_6])
erlps__control_limited__10 [(ErlangInt num_0),
                            (ErlangCons a_1 (ErlangCons depth_2 (ErlangEmptyList))),
                            f_3, adj_4, p_5, pad_6, enc_7, str_8, cl_9, i_10]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 80)))
  , (isEInt depth_2) =
  (erlps__print__10
     [a_1, depth_2, f_3, adj_4, p_5, pad_6, enc_7, str_8, cl_9, i_10])
erlps__control_limited__10 [arg_21, arg_22, arg_23, arg_24,
                            arg_25, arg_26, arg_27, arg_28, arg_29, arg_30]
  =
  (EXC.function_clause unit)
erlps__control_limited__10 args =
  (EXC.badarity
     (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__uniconv__1 :: ErlangFun
erlps__uniconv__1 [c_0] = c_0
erlps__uniconv__1 [arg_1] = (EXC.function_clause unit)
erlps__uniconv__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__base__1 :: ErlangFun
erlps__base__1 [(ErlangAtom "none")] =
  (ErlangInt (DBI.fromInt 10))
erlps__base__1 [b_0] | (isEInt b_0) = b_0
erlps__base__1 [arg_1] = (EXC.function_clause unit)
erlps__base__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__term__5 :: ErlangFun
erlps__term__5 [t_0, (ErlangAtom "none"), _adj_1,
                (ErlangAtom "none"), _pad_2]
  =
  t_0
erlps__term__5 [t_0, (ErlangAtom "none"), adj_1, p_2, pad_3] =
  (erlps__term__5 [t_0, p_2, adj_1, p_2, pad_3])
erlps__term__5 [t_0, f_1, adj_2, p0_3, pad_4] =
  let   
    l_6 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [t_0])
  in let
    arg_8 =
      case p0_3 of
        (ErlangAtom "none") -> f_1
        _ -> (BIF.erlang__min__2 [p0_3, f_1])
        something_else -> (EXC.case_clause something_else)
  in let p_12 = (BIF.erlang__min__2 [l_6, arg_8])
  in
    case (ErlangAtom "true") of
      _ | (weakGt l_6 p_12) ->
        let   
          arg_13 = (erlps__chars__2 [(ErlangInt (DBI.fromInt 42)), p_12])
        in let arg_18 = (BIF.erlang__op_minus [f_1, p_12])
        in let arg_16 = (erlps__chars__2 [pad_4, arg_18])
        in (erlps__adjust__3 [arg_13, arg_16, adj_2])
      _ | (weakGeq f_1 p_12) ->
        let    arg_25 = (BIF.erlang__op_minus [f_1, l_6])
        in let arg_23 = (erlps__chars__2 [pad_4, arg_25])
        in (erlps__adjust__3 [t_0, arg_23, adj_2])
      _ -> (EXC.if_clause unit)
erlps__term__5 [arg_29, arg_30, arg_31, arg_32, arg_33] =
  (EXC.function_clause unit)
erlps__term__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__print__10 :: ErlangFun
erlps__print__10 [t_0, d_1, (ErlangAtom "none"), adj_2, p_3,
                  pad_4, e_5, str_6, chlim_7, i_8]
  =
  (erlps__print__10
     [t_0, d_1, (ErlangInt (DBI.fromInt 80)), adj_2, p_3, pad_4, e_5,
      str_6, chlim_7, i_8])
erlps__print__10 [t_0, d_1, f_2, adj_3, (ErlangAtom "none"),
                  pad_4, e_5, str_6, chlim_7, i_8]
  =
  let
    arg_13 = (BIF.erlang__op_plus [i_8, (ErlangInt (DBI.fromInt 1))])
  in
    (erlps__print__10
       [t_0, d_1, f_2, adj_3, arg_13, pad_4, e_5, str_6, chlim_7, i_8])
erlps__print__10 [t_0, d_1, f_2, (ErlangAtom "right"), p_3,
                  _pad_4, enc_5, str_6, chlim_7, _i_8]
  =
  let   
    head_9 = (ErlangTuple [(ErlangAtom "chars_limit"), chlim_7])
  in let head_13 = (ErlangTuple [(ErlangAtom "column"), p_3])
  in let head_17 = (ErlangTuple [(ErlangAtom "line_length"), f_2])
  in let head_21 = (ErlangTuple [(ErlangAtom "depth"), d_1])
  in let head_25 = (ErlangTuple [(ErlangAtom "encoding"), enc_5])
  in let head_29 = (ErlangTuple [(ErlangAtom "strings"), str_6])
  in
    (BIF.do_remote_fun_call "Io.Lib.Pretty" "erlps__print__2"
       [t_0,
        (ErlangCons head_9
           (ErlangCons head_13
              (ErlangCons head_17
                 (ErlangCons head_21
                    (ErlangCons head_25
                       (ErlangCons head_29 ErlangEmptyList))))))])
erlps__print__10 [arg_36, arg_37, arg_38, arg_39, arg_40, arg_41,
                  arg_42, arg_43, arg_44, arg_45]
  =
  (EXC.function_clause unit)
erlps__print__10 args =
  (EXC.badarity
     (ErlangFun 10 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite_e__5 :: ErlangFun
erlps__fwrite_e__5 [fl_0, (ErlangAtom "none"), adj_1,
                    (ErlangAtom "none"), pad_2]
  =
  (erlps__fwrite_e__5
     [fl_0, (ErlangAtom "none"), adj_1, (ErlangInt (DBI.fromInt 6)),
      pad_2])
erlps__fwrite_e__5 [fl_0, (ErlangAtom "none"), _adj_1, p_2,
                    _pad_3]
  | (weakGeq p_2 (ErlangInt (DBI.fromInt 2))) =
  let arg_5 = (erlps__float_data__1 [fl_0])
  in (erlps__float_e__3 [fl_0, arg_5, p_2])
erlps__fwrite_e__5 [fl_0, f_1, adj_2, (ErlangAtom "none"), pad_3]
  =
  (erlps__fwrite_e__5
     [fl_0, f_1, adj_2, (ErlangInt (DBI.fromInt 6)), pad_3])
erlps__fwrite_e__5 [fl_0, f_1, adj_2, p_3, pad_4]
  | (weakGeq p_3 (ErlangInt (DBI.fromInt 2))) =
  let    arg_7 = (erlps__float_data__1 [fl_0])
  in let arg_5 = (erlps__float_e__3 [fl_0, arg_7, p_3])
  in (erlps__term__5 [arg_5, f_1, adj_2, f_1, pad_4])
erlps__fwrite_e__5 [arg_14, arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__fwrite_e__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_e__3 :: ErlangFun
erlps__float_e__3 [fl_0, fd_1, p_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_10 = (ErlangFloat 0.00000000000000000000e+0)
             in (BIF.erlang__op_lesser [fl_0, rop_10])))) =
  let    arg_5 = (BIF.erlang__op_neg [fl_0])
  in let tail_4 = (erlps__float_e__3 [arg_5, fd_1, p_2])
  in (ErlangCons (ErlangInt (DBI.fromInt 45)) tail_4)
erlps__float_e__3 [_fl_0, (ErlangTuple [ds_1, e_2]), p_3] =
  let   
    arg_7 = (BIF.erlang__op_minus [p_3, (ErlangInt (DBI.fromInt 1))])
  in let
    case_4 =
      (erlps__float_man__3 [ds_1, (ErlangInt (DBI.fromInt 1)), arg_7])
  in
    case case_4 of
      (ErlangTuple [(ErlangCons (ErlangInt num_10) fs_11),
                    (ErlangAtom "true")]) | ((ErlangInt num_10) ==
                                               (ErlangInt (DBI.fromInt 48))) ->
        let tail_15 = (erlps__float_exp__1 [e_2])
        in
          (ErlangCons (ErlangCons (ErlangInt (DBI.fromInt 49)) fs_11)
             tail_15)
      (ErlangTuple [fs_17, (ErlangAtom "false")]) ->
        let   
          arg_20 =
            (BIF.erlang__op_minus [e_2, (ErlangInt (DBI.fromInt 1))])
        in let tail_19 = (erlps__float_exp__1 [arg_20])
        in (ErlangCons fs_17 tail_19)
      something_else -> (EXC.case_clause something_else)
erlps__float_e__3 [arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__float_e__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_man__3 :: ErlangFun
erlps__float_man__3 [ds_0, (ErlangInt num_1), dc_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let match_expr_7 = (erlps__float_man__2 [ds_0, dc_2])
  in
    case match_expr_7 of
      (ErlangTuple [cs_5, c_6]) ->
        (ErlangTuple
           [(ErlangCons (ErlangInt (DBI.fromInt 46)) cs_5), c_6])
      _ -> (EXC.badmatch match_expr_7)
erlps__float_man__3 [(ErlangCons d_0 ds_1), i_2, dc_3] =
  let   
    arg_6 = (BIF.erlang__op_minus [i_2, (ErlangInt (DBI.fromInt 1))])
  in let case_4 = (erlps__float_man__3 [ds_1, arg_6, dc_3])
  in
    case case_4 of
      (ErlangTuple [cs_10, (ErlangAtom "true")]) | ((==) d_0
                                                      (ErlangInt
                                                         (DBI.fromInt 57))) ->
        (ErlangTuple
           [(ErlangCons (ErlangInt (DBI.fromInt 48)) cs_10),
            (ErlangAtom "true")])
      (ErlangTuple [cs_15, (ErlangAtom "true")]) ->
        let
          head_17 =
            (BIF.erlang__op_plus [d_0, (ErlangInt (DBI.fromInt 1))])
        in
          (ErlangTuple [(ErlangCons head_17 cs_15), (ErlangAtom "false")])
      (ErlangTuple [cs_22, (ErlangAtom "false")]) ->
        (ErlangTuple [(ErlangCons d_0 cs_22), (ErlangAtom "false")])
      something_else -> (EXC.case_clause something_else)
erlps__float_man__3 [(ErlangEmptyList), i_0, dc_1] =
  let   
    lop_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [i_0, (ErlangInt (DBI.fromInt 48))])
  in let
    tail_8 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [dc_1, (ErlangInt (DBI.fromInt 48))])
  in let
    tup_el_2 =
      (BIF.erlang__op_append
         [lop_3, (ErlangCons (ErlangInt (DBI.fromInt 46)) tail_8)])
  in (ErlangTuple [tup_el_2, (ErlangAtom "false")])
erlps__float_man__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__float_man__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_man__2 :: ErlangFun
erlps__float_man__2 [(ErlangCons d_0 _), (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (weakGeq d_0 (ErlangInt (DBI.fromInt 53))) =
  (ErlangTuple [ErlangEmptyList, (ErlangAtom "true")])
erlps__float_man__2 [(ErlangCons _ _), (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangTuple [ErlangEmptyList, (ErlangAtom "false")])
erlps__float_man__2 [(ErlangCons d_0 ds_1), dc_2] =
  let   
    arg_5 =
      (BIF.erlang__op_minus [dc_2, (ErlangInt (DBI.fromInt 1))])
  in let case_3 = (erlps__float_man__2 [ds_1, arg_5])
  in
    case case_3 of
      (ErlangTuple [cs_8, (ErlangAtom "true")]) | ((==) d_0
                                                     (ErlangInt
                                                        (DBI.fromInt 57))) ->
        (ErlangTuple
           [(ErlangCons (ErlangInt (DBI.fromInt 48)) cs_8),
            (ErlangAtom "true")])
      (ErlangTuple [cs_13, (ErlangAtom "true")]) ->
        let
          head_15 =
            (BIF.erlang__op_plus [d_0, (ErlangInt (DBI.fromInt 1))])
        in
          (ErlangTuple [(ErlangCons head_15 cs_13), (ErlangAtom "false")])
      (ErlangTuple [cs_20, (ErlangAtom "false")]) ->
        (ErlangTuple [(ErlangCons d_0 cs_20), (ErlangAtom "false")])
      something_else -> (EXC.case_clause something_else)
erlps__float_man__2 [(ErlangEmptyList), dc_0] =
  let
    tup_el_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [dc_0, (ErlangInt (DBI.fromInt 48))])
  in (ErlangTuple [tup_el_1, (ErlangAtom "false")])
erlps__float_man__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__float_man__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_exp__1 :: ErlangFun
erlps__float_exp__1 [e_0]
  | (weakGeq e_0 (ErlangInt (DBI.fromInt 0))) =
  let tail_4 = (BIF.erlang__integer_to_list__1 [e_0])
  in
    (ErlangCons (ErlangInt (DBI.fromInt 101))
       (ErlangCons (ErlangInt (DBI.fromInt 43)) tail_4))
erlps__float_exp__1 [e_0] =
  let tail_2 = (BIF.erlang__integer_to_list__1 [e_0])
  in (ErlangCons (ErlangInt (DBI.fromInt 101)) tail_2)
erlps__float_exp__1 [arg_4] = (EXC.function_clause unit)
erlps__float_exp__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite_f__5 :: ErlangFun
erlps__fwrite_f__5 [fl_0, (ErlangAtom "none"), adj_1,
                    (ErlangAtom "none"), pad_2]
  =
  (erlps__fwrite_f__5
     [fl_0, (ErlangAtom "none"), adj_1, (ErlangInt (DBI.fromInt 6)),
      pad_2])
erlps__fwrite_f__5 [fl_0, (ErlangAtom "none"), _adj_1, p_2,
                    _pad_3]
  | (weakGeq p_2 (ErlangInt (DBI.fromInt 1))) =
  let arg_5 = (erlps__float_data__1 [fl_0])
  in (erlps__float_f__3 [fl_0, arg_5, p_2])
erlps__fwrite_f__5 [fl_0, f_1, adj_2, (ErlangAtom "none"), pad_3]
  =
  (erlps__fwrite_f__5
     [fl_0, f_1, adj_2, (ErlangInt (DBI.fromInt 6)), pad_3])
erlps__fwrite_f__5 [fl_0, f_1, adj_2, p_3, pad_4]
  | (weakGeq p_3 (ErlangInt (DBI.fromInt 1))) =
  let    arg_7 = (erlps__float_data__1 [fl_0])
  in let arg_5 = (erlps__float_f__3 [fl_0, arg_7, p_3])
  in (erlps__term__5 [arg_5, f_1, adj_2, f_1, pad_4])
erlps__fwrite_f__5 [arg_14, arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__fwrite_f__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_f__3 :: ErlangFun
erlps__float_f__3 [fl_0, fd_1, p_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let rop_10 = (ErlangFloat 0.00000000000000000000e+0)
             in (BIF.erlang__op_lesser [fl_0, rop_10])))) =
  let    arg_5 = (BIF.erlang__op_neg [fl_0])
  in let tail_4 = (erlps__float_f__3 [arg_5, fd_1, p_2])
  in (ErlangCons (ErlangInt (DBI.fromInt 45)) tail_4)
erlps__float_f__3 [fl_0, (ErlangTuple [ds_1, e_2]), p_3]
  | (weakLeq e_2 (ErlangInt (DBI.fromInt 0))) =
  let    lop_9 = (BIF.erlang__op_neg [e_2])
  in let
    arg_8 =
      (BIF.erlang__op_plus [lop_9, (ErlangInt (DBI.fromInt 1))])
  in let
    lop_7 =
      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
         [arg_8, (ErlangInt (DBI.fromInt 48))])
  in let tup_el_6 = (BIF.erlang__op_append [lop_7, ds_1])
  in let
    arg_5 = (ErlangTuple [tup_el_6, (ErlangInt (DBI.fromInt 1))])
  in (erlps__float_f__3 [fl_0, arg_5, p_3])
erlps__float_f__3 [_fl_0, (ErlangTuple [ds_1, e_2]), p_3] =
  let case_4 = (erlps__float_man__3 [ds_1, e_2, p_3])
  in
    case case_4 of
      (ErlangTuple [fs_8, (ErlangAtom "true")]) ->
        let lop_9 = (make_string "1")
        in (BIF.erlang__op_append [lop_9, fs_8])
      (ErlangTuple [fs_11, (ErlangAtom "false")]) -> fs_11
      something_else -> (EXC.case_clause something_else)
erlps__float_f__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__float_f__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_data__1 :: ErlangFun
erlps__float_data__1 [fl_0] =
  let arg_1 = (BIF.erlang__float_to_list__1 [fl_0])
  in (erlps__float_data__2 [arg_1, ErlangEmptyList])
erlps__float_data__1 [arg_4] = (EXC.function_clause unit)
erlps__float_data__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__float_data__2 :: ErlangFun
erlps__float_data__2 [(ErlangCons (ErlangInt num_0) e_1), ds_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101))) =
  let   
    tup_el_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [ds_2])
  in let lop_6 = (BIF.erlang__list_to_integer__1 [e_1])
  in let
    tup_el_5 =
      (BIF.erlang__op_plus [lop_6, (ErlangInt (DBI.fromInt 1))])
  in (ErlangTuple [tup_el_3, tup_el_5])
erlps__float_data__2 [(ErlangCons d_0 cs_1), ds_2]
  | ((weakGeq d_0 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq d_0 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__float_data__2 [cs_1, (ErlangCons d_0 ds_2)])
erlps__float_data__2 [(ErlangCons _ cs_0), ds_1] =
  (erlps__float_data__2 [cs_0, ds_1])
erlps__float_data__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__float_data__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite_g__1 :: ErlangFun
erlps__fwrite_g__1 [(ErlangFloat 0.00000000000000000000e+0)] = (make_string "0.0")
erlps__fwrite_g__1 [float_0] | (isEFloat float_0) =
  let match_expr_4 = (erlps__mantissa_exponent__1 [float_0])
  in
    case match_expr_4 of
      (ErlangTuple [frac_2, exp_3]) ->
        let
          match_expr_10 = (erlps__fwrite_g_1__3 [float_0, exp_3, frac_2])
        in
          case match_expr_10 of
            (ErlangTuple [place_8, digits_9]) ->
              let   
                arg_12 =
                  (flmap
                     (\ lc_15 ->
                        case lc_15 of
                          d_14 ->
                            let
                              lc_ret_16 =
                                (BIF.erlang__op_plus
                                   [(ErlangInt (DBI.fromInt 48)), d_14])
                            in (ErlangCons lc_ret_16 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     digits_9)
              in let r_19 = (erlps__insert_decimal__2 [place_8, arg_12])
              in let rop_24 = (ErlangFloat 0.00000000000000000000e+0)
              in let head_22 = (BIF.erlang__op_lesser [float_0, rop_24])
              in let
                lop_20 =
                  (flmap
                     (\ lc_26 ->
                        case lc_26 of
                          (ErlangAtom "true") ->
                            (ErlangCons (ErlangInt (DBI.fromInt 45))
                               ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     (ErlangCons head_22 ErlangEmptyList))
              in (BIF.erlang__op_append [lop_20, r_19])
            _ -> (EXC.badmatch match_expr_10)
      _ -> (EXC.badmatch match_expr_4)
erlps__fwrite_g__1 [arg_29] = (EXC.function_clause unit)
erlps__fwrite_g__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__mantissa_exponent__1 :: ErlangFun
erlps__mantissa_exponent__1 [f_0] =
  let
    case_1 =
      (ErlangBinary
         (BIN.from_float f_0 (ErlangInt (DBI.fromInt 64)) 1 BIN.Big))
  in
    case case_1 of
      (ErlangBinary bin_c_3) | size_4 <- ((DBI.fromInt 1))
                             , (BIN.Ok _s_6 bin_5) <-
                                 ((BIN.chop_int bin_c_3 size_4 1 BIN.Big
                                     BIN.Unsigned))
                             , size_7 <- ((DBI.fromInt 11))
                             , (BIN.Ok (ErlangInt num_9) bin_8) <-
                                 ((BIN.chop_int bin_5 size_7 1 BIN.Big
                                     BIN.Unsigned))
                             , ((ErlangInt num_9) ==
                                  (ErlangInt (DBI.fromInt 0)))
                             , size_10 <- ((DBI.fromInt 52))
                             , (BIN.Ok m_12 bin_11) <-
                                 ((BIN.chop_int bin_8 size_10 1 BIN.Big
                                     BIN.Unsigned))
                             , (BIN.empty bin_11) ->
        let    e_14 = (erlps__log2floor__1 [m_12])
        in let
          rop_17 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 53)), e_14])
        in let tup_el_15 = (BIF.erlang__bsl__2 [m_12, rop_17])
        in let
          lop_21 =
            (BIF.erlang__op_minus [e_14, (ErlangInt (DBI.fromInt 52))])
        in let
          tup_el_20 =
            (BIF.erlang__op_minus [lop_21, (ErlangInt (DBI.fromInt 1075))])
        in (ErlangTuple [tup_el_15, tup_el_20])
      (ErlangBinary bin_c_25) | size_26 <- ((DBI.fromInt 1))
                              , (BIN.Ok _s_28 bin_27) <-
                                  ((BIN.chop_int bin_c_25 size_26 1 BIN.Big
                                      BIN.Unsigned))
                              , size_29 <- ((DBI.fromInt 11))
                              , (BIN.Ok be_31 bin_30) <-
                                  ((BIN.chop_int bin_27 size_29 1 BIN.Big
                                      BIN.Unsigned))
                              , size_32 <- ((DBI.fromInt 52))
                              , (BIN.Ok m_34 bin_33) <-
                                  ((BIN.chop_int bin_30 size_32 1 BIN.Big
                                      BIN.Unsigned))
                              , (BIN.empty bin_33)
                              , (weakLt be_31 (ErlangInt (DBI.fromInt 2047))) ->
        let   
          rop_37 =
            (BIF.erlang__bsl__2
               [(ErlangInt (DBI.fromInt 1)), (ErlangInt (DBI.fromInt 52))])
        in let tup_el_35 = (BIF.erlang__op_plus [m_34, rop_37])
        in let
          tup_el_40 =
            (BIF.erlang__op_minus [be_31, (ErlangInt (DBI.fromInt 1075))])
        in (ErlangTuple [tup_el_35, tup_el_40])
      something_else -> (EXC.case_clause something_else)
erlps__mantissa_exponent__1 [arg_43] = (EXC.function_clause unit)
erlps__mantissa_exponent__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite_g_1__3 :: ErlangFun
erlps__fwrite_g_1__3 [float_0, exp_1, frac_2] =
  let   
    lop_3 =
      (BIF.erlang__band__2 [frac_2, (ErlangInt (DBI.fromInt 1))])
  in let
    round_7 =
      (BIF.erlang__op_exactEq [lop_3, (ErlangInt (DBI.fromInt 0))])
  in
    case (ErlangAtom "true") of
      _ | (weakGeq exp_1 (ErlangInt (DBI.fromInt 0))) ->
        let
          bexp_10 =
            (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), exp_1])
        in
          case (ErlangAtom "true") of
            _ | ((ErlangAtom "true") ==
                   (falsifyErrors
                      (\ _ ->
                         let
                           rop_12 =
                             (BIF.erlang__bsl__2
                                [(ErlangInt (DBI.fromInt 1)),
                                 (ErlangInt (DBI.fromInt 52))])
                         in (BIF.erlang__op_exactEq [frac_2, rop_12])))) ->
              let    lop_16 = (BIF.erlang__op_mult [frac_2, bexp_10])
              in let
                arg_15 =
                  (BIF.erlang__op_mult [lop_16, (ErlangInt (DBI.fromInt 4))])
              in let
                arg_21 =
                  (BIF.erlang__op_mult [bexp_10, (ErlangInt (DBI.fromInt 2))])
              in
                (erlps__scale__7
                   [arg_15, (ErlangInt (DBI.fromInt 4)), arg_21, bexp_10,
                    round_7, round_7, float_0])
            _ ->
              let    lop_29 = (BIF.erlang__op_mult [frac_2, bexp_10])
              in let
                arg_28 =
                  (BIF.erlang__op_mult [lop_29, (ErlangInt (DBI.fromInt 2))])
              in
                (erlps__scale__7
                   [arg_28, (ErlangInt (DBI.fromInt 2)), bexp_10, bexp_10,
                    round_7, round_7, float_0])
            _ -> (EXC.if_clause unit)
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let
                     rop_40 =
                       (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1074))])
                   in (BIF.erlang__op_lesser [exp_1, rop_40])))) ->
        let   
          lop_44 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1074))])
        in let rop_43 = (BIF.erlang__op_minus [lop_44, exp_1])
        in let
          bexp_47 =
            (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), rop_43])
        in let
          arg_48 =
            (BIF.erlang__op_mult [frac_2, (ErlangInt (DBI.fromInt 2))])
        in let
          rop_53 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 1)), exp_1])
        in let
          arg_51 =
            (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), rop_53])
        in
          (erlps__scale__7
             [arg_48, arg_51, bexp_47, bexp_47, round_7, round_7, float_0])
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     rop_63 =
                       (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1074))])
                   in let lop_61 = (BIF.erlang__op_greater [exp_1, rop_63])
                   in
                     case lop_61 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         let
                           rop_66 =
                             (BIF.erlang__bsl__2
                                [(ErlangInt (DBI.fromInt 1)),
                                 (ErlangInt (DBI.fromInt 52))])
                         in (BIF.erlang__op_exactEq [frac_2, rop_66])
                       _ -> (EXC.badarg1 lop_61)))) ->
        let   
          arg_69 =
            (BIF.erlang__op_mult [frac_2, (ErlangInt (DBI.fromInt 4))])
        in let
          rop_74 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 2)), exp_1])
        in let
          arg_72 =
            (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), rop_74])
        in
          (erlps__scale__7
             [arg_69, arg_72, (ErlangInt (DBI.fromInt 2)),
              (ErlangInt (DBI.fromInt 1)), round_7, round_7, float_0])
      _ ->
        let   
          arg_82 =
            (BIF.erlang__op_mult [frac_2, (ErlangInt (DBI.fromInt 2))])
        in let
          rop_87 =
            (BIF.erlang__op_minus [(ErlangInt (DBI.fromInt 1)), exp_1])
        in let
          arg_85 =
            (BIF.erlang__bsl__2 [(ErlangInt (DBI.fromInt 1)), rop_87])
        in
          (erlps__scale__7
             [arg_82, arg_85, (ErlangInt (DBI.fromInt 1)),
              (ErlangInt (DBI.fromInt 1)), round_7, round_7, float_0])
      _ -> (EXC.if_clause unit)
erlps__fwrite_g_1__3 [arg_95, arg_96, arg_97] =
  (EXC.function_clause unit)
erlps__fwrite_g_1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__scale__7 :: ErlangFun
erlps__scale__7 [r_0, s_1, mplus_2, mminus_3, lowok_4, highok_5,
                 float_6]
  =
  let    arg_9 = (BIF.erlang__abs__1 [float_6])
  in let lop_8 = (BIF.math__log10__1 [arg_9])
  in let rop_11 = (ErlangFloat 1.00000000000000003643e-10)
  in let arg_7 = (BIF.erlang__op_minus [lop_8, rop_11])
  in let est_12 = (erlps__int_ceil__1 [arg_7])
  in
    case (ErlangAtom "true") of
      _ | (weakGeq est_12 (ErlangInt (DBI.fromInt 0))) ->
        let   
          rop_16 =
            (erlps__int_pow__2 [(ErlangInt (DBI.fromInt 10)), est_12])
        in let arg_14 = (BIF.erlang__op_mult [s_1, rop_16])
        in
          (erlps__fixup__7
             [r_0, arg_14, mplus_2, mminus_3, est_12, lowok_4, highok_5])
      _ ->
        let    arg_25 = (BIF.erlang__op_neg [est_12])
        in let
          scale_27 =
            (erlps__int_pow__2 [(ErlangInt (DBI.fromInt 10)), arg_25])
        in let arg_28 = (BIF.erlang__op_mult [r_0, scale_27])
        in let arg_32 = (BIF.erlang__op_mult [mplus_2, scale_27])
        in let arg_35 = (BIF.erlang__op_mult [mminus_3, scale_27])
        in
          (erlps__fixup__7
             [arg_28, s_1, arg_32, arg_35, est_12, lowok_4, highok_5])
      _ -> (EXC.if_clause unit)
erlps__scale__7 [arg_41, arg_42, arg_43, arg_44, arg_45, arg_46,
                 arg_47]
  =
  (EXC.function_clause unit)
erlps__scale__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fixup__7 :: ErlangFun
erlps__fixup__7 [r_0, s_1, mplus_2, mminus_3, k_4, lowok_5,
                 highok_6]
  =
  let
    toolow_15 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") == (falsifyErrors (\ _ -> highok_6))) ->
          let lop_7 = (BIF.erlang__op_plus [r_0, mplus_2])
          in (BIF.erlang__op_greaterEq [lop_7, s_1])
        _ ->
          let lop_11 = (BIF.erlang__op_plus [r_0, mplus_2])
          in (BIF.erlang__op_greater [lop_11, s_1])
        _ -> (EXC.if_clause unit)
  in
    case toolow_15 of
      (ErlangAtom "true") ->
        let   
          tup_el_17 =
            (BIF.erlang__op_plus [k_4, (ErlangInt (DBI.fromInt 1))])
        in let
          tup_el_20 =
            (erlps__generate__6
               [r_0, s_1, mplus_2, mminus_3, lowok_5, highok_6])
        in (ErlangTuple [tup_el_17, tup_el_20])
      (ErlangAtom "false") ->
        let   
          arg_29 =
            (BIF.erlang__op_mult [r_0, (ErlangInt (DBI.fromInt 10))])
        in let
          arg_33 =
            (BIF.erlang__op_mult [mplus_2, (ErlangInt (DBI.fromInt 10))])
        in let
          arg_36 =
            (BIF.erlang__op_mult [mminus_3, (ErlangInt (DBI.fromInt 10))])
        in let
          tup_el_28 =
            (erlps__generate__6
               [arg_29, s_1, arg_33, arg_36, lowok_5, highok_6])
        in (ErlangTuple [k_4, tup_el_28])
      something_else -> (EXC.case_clause something_else)
erlps__fixup__7 [arg_41, arg_42, arg_43, arg_44, arg_45, arg_46,
                 arg_47]
  =
  (EXC.function_clause unit)
erlps__fixup__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__generate__6 :: ErlangFun
erlps__generate__6 [r0_0, s_1, mplus_2, mminus_3, lowok_4,
                    highok_5]
  =
  let    d_8 = (BIF.erlang__op_div_strict [r0_0, s_1])
  in let r_11 = (BIF.erlang__op_rem_strict [r0_0, s_1])
  in let
    tc1_16 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") == (falsifyErrors (\ _ -> lowok_4))) ->
          (BIF.erlang__op_lesserEq [r_11, mminus_3])
        _ -> (BIF.erlang__op_lesser [r_11, mminus_3])
        _ -> (EXC.if_clause unit)
  in let
    tc2_25 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") == (falsifyErrors (\ _ -> highok_5))) ->
          let lop_17 = (BIF.erlang__op_plus [r_11, mplus_2])
          in (BIF.erlang__op_greaterEq [lop_17, s_1])
        _ ->
          let lop_21 = (BIF.erlang__op_plus [r_11, mplus_2])
          in (BIF.erlang__op_greater [lop_21, s_1])
        _ -> (EXC.if_clause unit)
  in let case_26 = (ErlangTuple [tc1_16, tc2_25])
  in
    case case_26 of
      (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "false")]) ->
        let   
          arg_31 =
            (BIF.erlang__op_mult [r_11, (ErlangInt (DBI.fromInt 10))])
        in let
          arg_35 =
            (BIF.erlang__op_mult [mplus_2, (ErlangInt (DBI.fromInt 10))])
        in let
          arg_38 =
            (BIF.erlang__op_mult [mminus_3, (ErlangInt (DBI.fromInt 10))])
        in let
          tail_30 =
            (erlps__generate__6
               [arg_31, s_1, arg_35, arg_38, lowok_4, highok_5])
        in (ErlangCons d_8 tail_30)
      (ErlangTuple [(ErlangAtom "false"), (ErlangAtom "true")]) ->
        let
          head_43 =
            (BIF.erlang__op_plus [d_8, (ErlangInt (DBI.fromInt 1))])
        in (ErlangCons head_43 ErlangEmptyList)
      (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "false")]) ->
        (ErlangCons d_8 ErlangEmptyList)
      (ErlangTuple [(ErlangAtom "true"),
                    (ErlangAtom "true")]) | ((ErlangAtom "true") ==
                                               (falsifyErrors
                                                  (\ _ ->
                                                     let
                                                       lop_49 =
                                                         (BIF.erlang__op_mult
                                                            [r_11,
                                                             (ErlangInt
                                                                (DBI.fromInt
                                                                   2))])
                                                     in
                                                       (BIF.erlang__op_lesser
                                                          [lop_49, s_1])))) ->
        (ErlangCons d_8 ErlangEmptyList)
      (ErlangTuple [(ErlangAtom "true"), (ErlangAtom "true")]) ->
        let
          head_55 =
            (BIF.erlang__op_plus [d_8, (ErlangInt (DBI.fromInt 1))])
        in (ErlangCons head_55 ErlangEmptyList)
      something_else -> (EXC.case_clause something_else)
erlps__generate__6 [arg_59, arg_60, arg_61, arg_62, arg_63,
                    arg_64]
  =
  (EXC.function_clause unit)
erlps__generate__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_decimal__2 :: ErlangFun
erlps__insert_decimal__2 [(ErlangInt num_0), s_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let lop_2 = (make_string "0.")
  in (BIF.erlang__op_append [lop_2, s_1])
erlps__insert_decimal__2 [place_0, s_1] =
  let l_3 = (BIF.erlang__length__1 [s_1])
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let
                     lop_4 =
                       (BIF.erlang__op_lesser
                          [place_0, (ErlangInt (DBI.fromInt 0))])
                   in
                     case lop_4 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         (BIF.erlang__op_greaterEq [place_0, l_3])
                       _ -> (EXC.badarg1 lop_4)))) ->
        let   
          arg_9 =
            (BIF.erlang__op_minus [place_0, (ErlangInt (DBI.fromInt 1))])
        in let expl_12 = (BIF.erlang__integer_to_list__1 [arg_9])
        in let
          expdot_13 =
            case (ErlangAtom "true") of
              _ | ((==) l_3 (ErlangInt (DBI.fromInt 1))) ->
                (ErlangInt (DBI.fromInt 2))
              _ -> (ErlangInt (DBI.fromInt 1))
              _ -> (EXC.if_clause unit)
        in let lop_15 = (BIF.erlang__length__1 [expl_12])
        in let
          lop_14 =
            (BIF.erlang__op_plus [lop_15, (ErlangInt (DBI.fromInt 1))])
        in let expcost_19 = (BIF.erlang__op_plus [lop_14, expdot_13])
        in
          case (ErlangAtom "true") of
            _ | (weakLt place_0 (ErlangInt (DBI.fromInt 0))) ->
              case (ErlangAtom "true") of
                _ | ((ErlangAtom "true") ==
                       (falsifyErrors
                          (\ _ ->
                             let
                               lop_20 =
                                 (BIF.erlang__op_minus
                                    [(ErlangInt (DBI.fromInt 2)), place_0])
                             in
                               (BIF.erlang__op_lesserEq
                                  [lop_20, expcost_19])))) ->
                  let    lop_24 = (make_string "0.")
                  in let arg_27 = (BIF.erlang__op_neg [place_0])
                  in let
                    lop_26 =
                      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
                         [arg_27, (ErlangInt (DBI.fromInt 48))])
                  in let rop_25 = (BIF.erlang__op_append [lop_26, s_1])
                  in (BIF.erlang__op_append [lop_24, rop_25])
                _ -> (erlps__insert_exp__2 [expl_12, s_1])
                _ -> (EXC.if_clause unit)
            _ ->
              case (ErlangAtom "true") of
                _ | ((ErlangAtom "true") ==
                       (falsifyErrors
                          (\ _ ->
                             let   
                               lop_34 = (BIF.erlang__op_minus [place_0, l_3])
                             in let
                               lop_33 =
                                 (BIF.erlang__op_plus
                                    [lop_34, (ErlangInt (DBI.fromInt 2))])
                             in
                               (BIF.erlang__op_lesserEq
                                  [lop_33, expcost_19])))) ->
                  let    arg_42 = (BIF.erlang__op_minus [place_0, l_3])
                  in let
                    lop_41 =
                      (BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
                         [arg_42, (ErlangInt (DBI.fromInt 48))])
                  in let rop_46 = (make_string ".0")
                  in let rop_40 = (BIF.erlang__op_append [lop_41, rop_46])
                  in (BIF.erlang__op_append [s_1, rop_40])
                _ -> (erlps__insert_exp__2 [expl_12, s_1])
                _ -> (EXC.if_clause unit)
            _ -> (EXC.if_clause unit)
      _ ->
        let
          match_expr_53 =
            (BIF.do_remote_fun_call "Lists" "erlps__split__2" [place_0, s_1])
        in
          case match_expr_53 of
            (ErlangTuple [s0_51, s1_52]) ->
              let    lop_56 = (make_string ".")
              in let rop_55 = (BIF.erlang__op_append [lop_56, s1_52])
              in (BIF.erlang__op_append [s0_51, rop_55])
            _ -> (EXC.badmatch match_expr_53)
      _ -> (EXC.if_clause unit)
erlps__insert_decimal__2 [arg_58, arg_59] =
  (EXC.function_clause unit)
erlps__insert_decimal__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__insert_exp__2 :: ErlangFun
erlps__insert_exp__2 [expl_0, (ErlangCons c_1 (ErlangEmptyList))]
  =
  let    lop_6 = (make_string ".0e")
  in let rop_5 = (BIF.erlang__op_append [lop_6, expl_0])
  in
    (BIF.erlang__op_append [(ErlangCons c_1 ErlangEmptyList), rop_5])
erlps__insert_exp__2 [expl_0, (ErlangCons c_1 s_2)] =
  let    lop_7 = (make_string ".")
  in let lop_11 = (make_string "e")
  in let rop_10 = (BIF.erlang__op_append [lop_11, expl_0])
  in let rop_8 = (BIF.erlang__op_append [s_2, rop_10])
  in let rop_6 = (BIF.erlang__op_append [lop_7, rop_8])
  in
    (BIF.erlang__op_append [(ErlangCons c_1 ErlangEmptyList), rop_6])
erlps__insert_exp__2 [arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__insert_exp__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int_ceil__1 :: ErlangFun
erlps__int_ceil__1 [x_0] | (isEFloat x_0) =
  let    t_2 = (BIF.erlang__trunc__1 [x_0])
  in let case_3 = (BIF.erlang__op_minus [x_0, t_2])
  in
    case case_3 of
      neg_6 | (weakLt neg_6 (ErlangInt (DBI.fromInt 0))) -> t_2
      pos_7 | (weakGt pos_7 (ErlangInt (DBI.fromInt 0))) ->
        (BIF.erlang__op_plus [t_2, (ErlangInt (DBI.fromInt 1))])
      _ -> t_2
      something_else -> (EXC.case_clause something_else)
erlps__int_ceil__1 [arg_10] = (EXC.function_clause unit)
erlps__int_ceil__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int_pow__2 :: ErlangFun
erlps__int_pow__2 [x_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0)))
  , (isEInt x_0) =
  (ErlangInt (DBI.fromInt 1))
erlps__int_pow__2 [x_0, n_1]
  | (((isEInt x_0) && (isEInt n_1)) &&
       (weakGt n_1 (ErlangInt (DBI.fromInt 0)))) =
  (erlps__int_pow__3 [x_0, n_1, (ErlangInt (DBI.fromInt 1))])
erlps__int_pow__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__int_pow__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__int_pow__3 :: ErlangFun
erlps__int_pow__3 [x_0, n_1, r_2]
  | (weakLt n_1 (ErlangInt (DBI.fromInt 2))) =
  (BIF.erlang__op_mult [r_2, x_0])
erlps__int_pow__3 [x_0, n_1, r_2] =
  let    arg_3 = (BIF.erlang__op_mult [x_0, x_0])
  in let
    arg_6 = (BIF.erlang__bsr__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let
    case_10 =
      (BIF.erlang__band__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_9 =
      case case_10 of
        (ErlangInt num_13) | ((ErlangInt num_13) ==
                                (ErlangInt (DBI.fromInt 1))) ->
          (BIF.erlang__op_mult [r_2, x_0])
        (ErlangInt num_16) | ((ErlangInt num_16) ==
                                (ErlangInt (DBI.fromInt 0))) ->
          r_2
        something_else -> (EXC.case_clause something_else)
  in (erlps__int_pow__3 [arg_3, arg_6, arg_9])
erlps__int_pow__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__int_pow__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__log2floor__1 :: ErlangFun
erlps__log2floor__1 [int_0]
  | ((isEInt int_0) &&
       (weakGt int_0 (ErlangInt (DBI.fromInt 0)))) =
  (erlps__log2floor__2 [int_0, (ErlangInt (DBI.fromInt 0))])
erlps__log2floor__1 [arg_3] = (EXC.function_clause unit)
erlps__log2floor__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__log2floor__2 :: ErlangFun
erlps__log2floor__2 [(ErlangInt num_0), n_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  n_1
erlps__log2floor__2 [int_0, n_1] =
  let   
    arg_2 = (BIF.erlang__bsr__2 [int_0, (ErlangInt (DBI.fromInt 1))])
  in let
    arg_5 = (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), n_1])
  in (erlps__log2floor__2 [arg_2, arg_5])
erlps__log2floor__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__log2floor__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fwrite_g__5 :: ErlangFun
erlps__fwrite_g__5 [fl_0, f_1, adj_2, (ErlangAtom "none"), pad_3]
  =
  (erlps__fwrite_g__5
     [fl_0, f_1, adj_2, (ErlangInt (DBI.fromInt 6)), pad_3])
erlps__fwrite_g__5 [fl_0, f_1, adj_2, p_3, pad_4]
  | (weakGeq p_3 (ErlangInt (DBI.fromInt 1))) =
  let    a_6 = (BIF.erlang__abs__1 [fl_0])
  in let
    e_21 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_8 = (ErlangFloat 1.00000000000000005551e-1)
                     in (BIF.erlang__op_lesser [a_6, rop_8])))) ->
          (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 2))])
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_11 = (ErlangFloat 1.00000000000000000000e+0)
                     in (BIF.erlang__op_lesser [a_6, rop_11])))) ->
          (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_14 = (ErlangFloat 1.00000000000000000000e+1)
                     in (BIF.erlang__op_lesser [a_6, rop_14])))) ->
          (ErlangInt (DBI.fromInt 0))
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_16 = (ErlangFloat 1.00000000000000000000e+2)
                     in (BIF.erlang__op_lesser [a_6, rop_16])))) ->
          (ErlangInt (DBI.fromInt 1))
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_18 = (ErlangFloat 1.00000000000000000000e+3)
                     in (BIF.erlang__op_lesser [a_6, rop_18])))) ->
          (ErlangInt (DBI.fromInt 2))
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     let rop_20 = (ErlangFloat 1.00000000000000000000e+4)
                     in (BIF.erlang__op_lesser [a_6, rop_20])))) ->
          (ErlangInt (DBI.fromInt 3))
        _ -> (ErlangAtom "fwrite_f")
        _ -> (EXC.if_clause unit)
  in
    case (ErlangAtom "true") of
      _ | ((ErlangAtom "true") ==
             (falsifyErrors
                (\ _ ->
                   let   
                     lop_23 =
                       (BIF.erlang__op_lesserEq
                          [p_3, (ErlangInt (DBI.fromInt 1))])
                   in let
                     lop_22 =
                       case lop_23 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let
                             rop_27 =
                               (BIF.erlang__op_neg
                                  [(ErlangInt (DBI.fromInt 1))])
                           in (BIF.erlang__op_exactEq [e_21, rop_27])
                         _ -> (EXC.badarg1 lop_23)
                   in
                     case lop_22 of
                       (ErlangAtom "true") -> (ErlangAtom "true")
                       (ErlangAtom "false") ->
                         let   
                           lop_30 =
                             (BIF.erlang__op_minus
                                [p_3, (ErlangInt (DBI.fromInt 1))])
                         in let lop_29 = (BIF.erlang__op_greater [lop_30, e_21])
                         in
                           case lop_29 of
                             (ErlangAtom "false") -> (ErlangAtom "false")
                             (ErlangAtom "true") ->
                               let
                                 rop_35 =
                                   (BIF.erlang__op_neg
                                      [(ErlangInt (DBI.fromInt 1))])
                               in (BIF.erlang__op_greaterEq [e_21, rop_35])
                             _ -> (EXC.badarg1 lop_29)
                       _ -> (EXC.badarg1 lop_22)))) ->
        let   
          lop_41 =
            (BIF.erlang__op_minus [p_3, (ErlangInt (DBI.fromInt 1))])
        in let arg_40 = (BIF.erlang__op_minus [lop_41, e_21])
        in (erlps__fwrite_f__5 [fl_0, f_1, adj_2, arg_40, pad_4])
      _ | (weakLeq p_3 (ErlangInt (DBI.fromInt 1))) ->
        (erlps__fwrite_e__5
           [fl_0, f_1, adj_2, (ErlangInt (DBI.fromInt 2)), pad_4])
      _ -> (erlps__fwrite_e__5 [fl_0, f_1, adj_2, p_3, pad_4])
      _ -> (EXC.if_clause unit)
erlps__fwrite_g__5 [arg_56, arg_57, arg_58, arg_59, arg_60] =
  (EXC.function_clause unit)
erlps__fwrite_g__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iolist_to_chars__3 :: ErlangFun
erlps__iolist_to_chars__3 [cs_0, f_1, charslimit_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_4 =
                 (BIF.erlang__op_lesser
                    [charslimit_2, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_4 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_greaterEq [charslimit_2, f_1])
                 _ -> (EXC.badarg1 lop_4)))) =
  (erlps__iolist_to_chars__1 [cs_0])
erlps__iolist_to_chars__3 [cs_0, _, charslimit_1] =
  let
    arg_3 =
      (erlps__sub__2 [charslimit_1, (ErlangInt (DBI.fromInt 3))])
  in
    (erlps__limit_iolist_to_chars__4
       [cs_0, arg_3, ErlangEmptyList, (ErlangAtom "normal")])
erlps__iolist_to_chars__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__iolist_to_chars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__iolist_to_chars__1 :: ErlangFun
erlps__iolist_to_chars__1 [(ErlangCons c_0 cs_1)]
  | (((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  let tail_3 = (erlps__iolist_to_chars__1 [cs_1])
  in (ErlangCons c_0 tail_3)
erlps__iolist_to_chars__1 [(ErlangCons i_0 cs_1)] =
  let    head_2 = (erlps__iolist_to_chars__1 [i_0])
  in let tail_4 = (erlps__iolist_to_chars__1 [cs_1])
  in (ErlangCons head_2 tail_4)
erlps__iolist_to_chars__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__iolist_to_chars__1 [b_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [b_0])))) =
  (BIF.erlang__binary_to_list__1 [b_0])
erlps__iolist_to_chars__1 [arg_3] = (EXC.function_clause unit)
erlps__iolist_to_chars__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_iolist_to_chars__4 :: ErlangFun
erlps__limit_iolist_to_chars__4 [cs_0, (ErlangInt num_1), s_2,
                                 (ErlangAtom "normal")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let   
    l_7 =
      (erlps__limit_iolist_to_chars__4
         [cs_0, (ErlangInt (DBI.fromInt 4)), s_2, (ErlangAtom "final")])
  in let case_8 = (BIF.erlang__iolist_size__1 [l_7])
  in
    case case_8 of
      n_10 | (weakLt n_10 (ErlangInt (DBI.fromInt 4))) -> l_7
      (ErlangInt num_11) | ((ErlangInt num_11) ==
                              (ErlangInt (DBI.fromInt 4))) ->
        (make_string "...")
      something_else -> (EXC.case_clause something_else)
erlps__limit_iolist_to_chars__4 [_cs_0, (ErlangInt num_1), _s_2,
                                 (ErlangAtom "final")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__limit_iolist_to_chars__4 [(ErlangCons c_0 cs_1), limit_2,
                                 s_3, mode_4]
  | ((weakGeq c_0 (ErlangInt (DBI.fromInt 0))) &&
       (weakLeq c_0 (ErlangInt (DBI.fromInt 255)))) =
  let   
    arg_8 =
      (BIF.erlang__op_minus [limit_2, (ErlangInt (DBI.fromInt 1))])
  in let
    tail_6 =
      (erlps__limit_iolist_to_chars__4 [cs_1, arg_8, s_3, mode_4])
  in (ErlangCons c_0 tail_6)
erlps__limit_iolist_to_chars__4 [(ErlangCons i_0 cs_1), limit_2,
                                 s_3, mode_4]
  =
  (erlps__limit_iolist_to_chars__4
     [i_0, limit_2, (ErlangCons cs_1 s_3), mode_4])
erlps__limit_iolist_to_chars__4 [(ErlangEmptyList), _limit_0,
                                 (ErlangEmptyList), _mode_1]
  =
  ErlangEmptyList
erlps__limit_iolist_to_chars__4 [(ErlangEmptyList), limit_0,
                                 (ErlangCons cs_1 s_2), mode_3]
  =
  (erlps__limit_iolist_to_chars__4 [cs_1, limit_0, s_2, mode_3])
erlps__limit_iolist_to_chars__4 [b_0, limit_1, s_2, mode_3]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [b_0])))) =
  let case_4 = (BIF.erlang__byte_size__1 [b_0])
  in
    case case_4 of
      sz_6 | (weakGt sz_6 limit_1) ->
        let match_expr_11 = (BIF.erlang__split_binary__2 [b_0, limit_1])
        in
          case match_expr_11 of
            (ErlangTuple [b1_9, b2_10]) ->
              let    head_12 = (BIF.erlang__binary_to_list__1 [b1_9])
              in let
                tail_14 =
                  (erlps__limit_iolist_to_chars__4
                     [b2_10, (ErlangInt (DBI.fromInt 0)), s_2, mode_3])
              in (ErlangCons head_12 tail_14)
            _ -> (EXC.badmatch match_expr_11)
      sz_19 ->
        let    head_20 = (BIF.erlang__binary_to_list__1 [b_0])
        in let arg_24 = (BIF.erlang__op_minus [limit_1, sz_19])
        in let
          tail_22 =
            (erlps__limit_iolist_to_chars__4
               [ErlangEmptyList, arg_24, s_2, mode_3])
        in (ErlangCons head_20 tail_22)
      something_else -> (EXC.case_clause something_else)
erlps__limit_iolist_to_chars__4 [arg_30, arg_31, arg_32, arg_33]
  =
  (EXC.function_clause unit)
erlps__limit_iolist_to_chars__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cdata_to_chars__3 :: ErlangFun
erlps__cdata_to_chars__3 [cs_0, f_1, charslimit_2]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_4 =
                 (BIF.erlang__op_lesser
                    [charslimit_2, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_4 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_greaterEq [charslimit_2, f_1])
                 _ -> (EXC.badarg1 lop_4)))) =
  (erlps__cdata_to_chars__1 [cs_0])
erlps__cdata_to_chars__3 [cs_0, _, charslimit_1] =
  let
    arg_3 =
      (erlps__sub__2 [charslimit_1, (ErlangInt (DBI.fromInt 3))])
  in
    (erlps__limit_cdata_to_chars__3
       [cs_0, arg_3, (ErlangAtom "normal")])
erlps__cdata_to_chars__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__cdata_to_chars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cdata_to_chars__1 :: ErlangFun
erlps__cdata_to_chars__1 [(ErlangCons c_0 cs_1)]
  | ((isEInt c_0) && (weakGeq c_0 (ErlangInt (DBI.fromInt 0)))) =
  let tail_3 = (erlps__cdata_to_chars__1 [cs_1])
  in (ErlangCons c_0 tail_3)
erlps__cdata_to_chars__1 [(ErlangCons i_0 cs_1)] =
  let    head_2 = (erlps__cdata_to_chars__1 [i_0])
  in let tail_4 = (erlps__cdata_to_chars__1 [cs_1])
  in (ErlangCons head_2 tail_4)
erlps__cdata_to_chars__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__cdata_to_chars__1 [b_0]
  | ((ErlangAtom "true") ==
       (falsifyErrors (\ _ -> (BIF.erlang__is_binary__1 [b_0])))) =
  let
    case_1 =
      (EXC.tryCatch
         (\ _ ->
            (BIF.do_remote_fun_call "Erlang.Unicode"
               "erlps__characters_to_list__1" [b_0]))
         (\ ex_4 ->
            case ex_4 of
              (ErlangTuple [(ErlangAtom "throw"), payload_5, _]) -> payload_5
              (ErlangTuple [(ErlangAtom "error"), payload_6, stack_7]) ->
                let tup_el_9 = (ErlangTuple [payload_6, stack_7])
                in (ErlangTuple [(ErlangAtom "EXIT"), tup_el_9])
              (ErlangTuple [(ErlangAtom "exit"), payload_12, _]) ->
                (ErlangTuple [(ErlangAtom "EXIT"), payload_12])
              ex_4 -> (EXC.raise ex_4)))
  in
    case case_1 of
      l_15 | (isEList l_15) -> l_15
      _ -> (BIF.erlang__binary_to_list__1 [b_0])
      something_else -> (EXC.case_clause something_else)
erlps__cdata_to_chars__1 [arg_18] = (EXC.function_clause unit)
erlps__cdata_to_chars__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_cdata_to_chars__3 :: ErlangFun
erlps__limit_cdata_to_chars__3 [cs_0, (ErlangInt num_1),
                                (ErlangAtom "normal")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let   
    l_5 =
      (erlps__limit_cdata_to_chars__3
         [cs_0, (ErlangInt (DBI.fromInt 4)), (ErlangAtom "final")])
  in let
    case_6 =
      (BIF.do_remote_fun_call "String" "erlps__length__1" [l_5])
  in
    case case_6 of
      n_8 | (weakLt n_8 (ErlangInt (DBI.fromInt 4))) -> l_5
      (ErlangInt num_9) | ((ErlangInt num_9) ==
                             (ErlangInt (DBI.fromInt 4))) ->
        (make_string "...")
      something_else -> (EXC.case_clause something_else)
erlps__limit_cdata_to_chars__3 [_cs_0, (ErlangInt num_1),
                                (ErlangAtom "final")]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__limit_cdata_to_chars__3 [cs_0, limit_1, mode_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "String" "erlps__next_grapheme__1"
         [cs_0])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "error"),
                    (ErlangBinary bin_c_5)]) | size_6 <- ((DBI.fromInt 8))
                                             , (BIN.Ok c_8 bin_7) <-
                                                 ((BIN.chop_int bin_c_5 size_6 1
                                                     BIN.Big BIN.Unsigned))
                                             , (ErlangInt size_9) <-
                                                 ((BIN.size bin_7))
                                             , (BIN.Ok cs1_11 bin_10) <-
                                                 ((BIN.chop_bin bin_7 size_9 8))
                                             , (BIN.empty bin_10) ->
        let   
          arg_15 =
            (BIF.erlang__op_minus [limit_1, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_13 =
            (erlps__limit_cdata_to_chars__3 [cs1_11, arg_15, mode_2])
        in (ErlangCons c_8 tail_13)
      (ErlangTuple [(ErlangAtom "error"), (ErlangCons c_19 cs1_20)]) ->
        let   
          arg_24 =
            (BIF.erlang__op_minus [limit_1, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_22 =
            (erlps__limit_cdata_to_chars__3 [cs1_20, arg_24, mode_2])
        in (ErlangCons c_19 tail_22)
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangCons gc_28 cs1_29) ->
        let   
          arg_33 =
            (BIF.erlang__op_minus [limit_1, (ErlangInt (DBI.fromInt 1))])
        in let
          tail_31 =
            (erlps__limit_cdata_to_chars__3 [cs1_29, arg_33, mode_2])
        in (ErlangCons gc_28 tail_31)
      something_else -> (EXC.case_clause something_else)
erlps__limit_cdata_to_chars__3 [arg_37, arg_38, arg_39] =
  (EXC.function_clause unit)
erlps__limit_cdata_to_chars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__limit_field__2 :: ErlangFun
erlps__limit_field__2 [f_0, charslimit_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_2 =
                 (BIF.erlang__op_lesser
                    [charslimit_1, (ErlangInt (DBI.fromInt 0))])
             in
               case lop_2 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [f_0, (ErlangAtom "none")])
                 _ -> (EXC.badarg1 lop_2)))) =
  f_0
erlps__limit_field__2 [f_0, charslimit_1] =
  let arg_3 = (BIF.erlang__min__2 [f_0, charslimit_1])
  in (BIF.erlang__max__2 [(ErlangInt (DBI.fromInt 3)), arg_3])
erlps__limit_field__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__limit_field__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string__6 :: ErlangFun
erlps__string__6 [s_0, (ErlangAtom "none"), _adj_1,
                  (ErlangAtom "none"), _pad_2, _enc_3]
  =
  s_0
erlps__string__6 [s_0, f_1, adj_2, (ErlangAtom "none"), pad_3,
                  enc_4]
  =
  let
    arg_8 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_0])
  in
    (erlps__string_field__6 [s_0, f_1, adj_2, arg_8, pad_3, enc_4])
erlps__string__6 [s_0, (ErlangAtom "none"), _adj_1, p_2, pad_3,
                  enc_4]
  =
  let
    arg_8 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_0])
  in
    (erlps__string_field__6
       [s_0, p_2, (ErlangAtom "left"), arg_8, pad_3, enc_4])
erlps__string__6 [s_0, f_1, adj_2, p_3, pad_4, enc_5]
  | (weakGeq f_1 p_3) =
  let
    n_7 =
      (BIF.do_remote_fun_call "Io.Lib" "erlps__chars_length__1" [s_0])
  in
    case (ErlangAtom "true") of
      _ | (weakGt f_1 p_3) ->
        case (ErlangAtom "true") of
          _ | (weakGt n_7 p_3) ->
            let    arg_8 = (erlps__flat_trunc__3 [s_0, p_3, enc_5])
            in let arg_14 = (BIF.erlang__op_minus [f_1, p_3])
            in let arg_12 = (erlps__chars__2 [pad_4, arg_14])
            in (erlps__adjust__3 [arg_8, arg_12, adj_2])
          _ | (weakLt n_7 p_3) ->
            let    arg_22 = (BIF.erlang__op_minus [p_3, n_7])
            in let tail_20 = (erlps__chars__2 [pad_4, arg_22])
            in let arg_27 = (BIF.erlang__op_minus [f_1, p_3])
            in let arg_25 = (erlps__chars__2 [pad_4, arg_27])
            in (erlps__adjust__3 [(ErlangCons s_0 tail_20), arg_25, adj_2])
          _ ->
            let    arg_34 = (BIF.erlang__op_minus [f_1, p_3])
            in let arg_32 = (erlps__chars__2 [pad_4, arg_34])
            in (erlps__adjust__3 [s_0, arg_32, adj_2])
          _ -> (EXC.if_clause unit)
      _ ->
        (erlps__string_field__6 [s_0, f_1, adj_2, n_7, pad_4, enc_5])
      _ -> (EXC.if_clause unit)
erlps__string__6 [arg_44, arg_45, arg_46, arg_47, arg_48, arg_49]
  =
  (EXC.function_clause unit)
erlps__string__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__string_field__6 :: ErlangFun
erlps__string_field__6 [s_0, f_1, _adj_2, n_3, _pad_4, enc_5]
  | (weakGt n_3 f_1) =
  (erlps__flat_trunc__3 [s_0, f_1, enc_5])
erlps__string_field__6 [s_0, f_1, adj_2, n_3, pad_4, _enc_5]
  | (weakLt n_3 f_1) =
  let    arg_9 = (BIF.erlang__op_minus [f_1, n_3])
  in let arg_7 = (erlps__chars__2 [pad_4, arg_9])
  in (erlps__adjust__3 [s_0, arg_7, adj_2])
erlps__string_field__6 [s_0, _, _, _, _, _] = s_0
erlps__string_field__6 [arg_1, arg_2, arg_3, arg_4, arg_5, arg_6]
  =
  (EXC.function_clause unit)
erlps__string_field__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unprefixed_integer__6 :: ErlangFun
erlps__unprefixed_integer__6 [int_0, f_1, adj_2, base_3, pad_4,
                              lowercase_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_29 =
                 (BIF.erlang__op_greaterEq
                    [base_3, (ErlangInt (DBI.fromInt 2))])
             in
               case lop_29 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_35 =
                       (BIF.erlang__op_plus
                          [(ErlangInt (DBI.fromInt 1)),
                           (ErlangInt (DBI.fromInt 90))])
                   in let
                     lop_34 =
                       (BIF.erlang__op_minus
                          [lop_35, (ErlangInt (DBI.fromInt 65))])
                   in let
                     rop_33 =
                       (BIF.erlang__op_plus
                          [lop_34, (ErlangInt (DBI.fromInt 10))])
                   in (BIF.erlang__op_lesserEq [base_3, rop_33])
                 _ -> (EXC.badarg1 lop_29)))) =
  case (ErlangAtom "true") of
    _ | (weakLt int_0 (ErlangInt (DBI.fromInt 0))) ->
      let    arg_7 = (BIF.erlang__op_neg [int_0])
      in let arg_6 = (BIF.erlang__integer_to_list__2 [arg_7, base_3])
      in let s_11 = (erlps__cond_lowercase__2 [arg_6, lowercase_5])
      in
        (erlps__term__5
           [(ErlangCons (ErlangInt (DBI.fromInt 45)) s_11), f_1, adj_2,
            (ErlangAtom "none"), pad_4])
    _ ->
      let    arg_19 = (BIF.erlang__integer_to_list__2 [int_0, base_3])
      in let s_23 = (erlps__cond_lowercase__2 [arg_19, lowercase_5])
      in
        (erlps__term__5 [s_23, f_1, adj_2, (ErlangAtom "none"), pad_4])
    _ -> (EXC.if_clause unit)
erlps__unprefixed_integer__6 [arg_40, arg_41, arg_42, arg_43,
                              arg_44, arg_45]
  =
  (EXC.function_clause unit)
erlps__unprefixed_integer__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__prefixed_integer__7 :: ErlangFun
erlps__prefixed_integer__7 [int_0, f_1, adj_2, base_3, pad_4,
                            prefix_5, lowercase_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_34 =
                 (BIF.erlang__op_greaterEq
                    [base_3, (ErlangInt (DBI.fromInt 2))])
             in
               case lop_34 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let   
                     lop_40 =
                       (BIF.erlang__op_plus
                          [(ErlangInt (DBI.fromInt 1)),
                           (ErlangInt (DBI.fromInt 90))])
                   in let
                     lop_39 =
                       (BIF.erlang__op_minus
                          [lop_40, (ErlangInt (DBI.fromInt 65))])
                   in let
                     rop_38 =
                       (BIF.erlang__op_plus
                          [lop_39, (ErlangInt (DBI.fromInt 10))])
                   in (BIF.erlang__op_lesserEq [base_3, rop_38])
                 _ -> (EXC.badarg1 lop_34)))) =
  case (ErlangAtom "true") of
    _ | (weakLt int_0 (ErlangInt (DBI.fromInt 0))) ->
      let    arg_8 = (BIF.erlang__op_neg [int_0])
      in let arg_7 = (BIF.erlang__integer_to_list__2 [arg_8, base_3])
      in let s_12 = (erlps__cond_lowercase__2 [arg_7, lowercase_6])
      in
        (erlps__term__5
           [(ErlangCons (ErlangInt (DBI.fromInt 45))
               (ErlangCons prefix_5 s_12)),
            f_1, adj_2, (ErlangAtom "none"), pad_4])
    _ ->
      let    arg_22 = (BIF.erlang__integer_to_list__2 [int_0, base_3])
      in let s_26 = (erlps__cond_lowercase__2 [arg_22, lowercase_6])
      in
        (erlps__term__5
           [(ErlangCons prefix_5 s_26), f_1, adj_2, (ErlangAtom "none"),
            pad_4])
    _ -> (EXC.if_clause unit)
erlps__prefixed_integer__7 [arg_45, arg_46, arg_47, arg_48,
                            arg_49, arg_50, arg_51]
  =
  (EXC.function_clause unit)
erlps__prefixed_integer__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__char__5 :: ErlangFun
erlps__char__5 [c_0, (ErlangAtom "none"), _adj_1,
                (ErlangAtom "none"), _pad_2]
  =
  (ErlangCons c_0 ErlangEmptyList)
erlps__char__5 [c_0, f_1, _adj_2, (ErlangAtom "none"), _pad_3] =
  (erlps__chars__2 [c_0, f_1])
erlps__char__5 [c_0, (ErlangAtom "none"), _adj_1, p_2, _pad_3] =
  (erlps__chars__2 [c_0, p_2])
erlps__char__5 [c_0, f_1, adj_2, p_3, pad_4]
  | (weakGeq f_1 p_3) =
  let    arg_5 = (erlps__chars__2 [c_0, p_3])
  in let arg_10 = (BIF.erlang__op_minus [f_1, p_3])
  in let arg_8 = (erlps__chars__2 [pad_4, arg_10])
  in (erlps__adjust__3 [arg_5, arg_8, adj_2])
erlps__char__5 [arg_14, arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__char__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__newline__4 :: ErlangFun
erlps__newline__4 [(ErlangAtom "none"), _adj_0, _p_1, _pad_2] =
  (make_string "\n")
erlps__newline__4 [f_0, (ErlangAtom "right"), _p_1, _pad_2] =
  (erlps__chars__2 [(ErlangInt (DBI.fromInt 10)), f_0])
erlps__newline__4 [arg_5, arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__newline__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__adjust__3 :: ErlangFun
erlps__adjust__3 [data_0, (ErlangEmptyList), _] = data_0
erlps__adjust__3 [data_0, pad_1, (ErlangAtom "left")] =
  (ErlangCons data_0 pad_1)
erlps__adjust__3 [data_0, pad_1, (ErlangAtom "right")] =
  (ErlangCons pad_1 data_0)
erlps__adjust__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__adjust__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__flat_trunc__3 :: ErlangFun
erlps__flat_trunc__3 [list_0, n_1, (ErlangAtom "latin1")]
  | ((isEInt n_1) && (weakGeq n_1 (ErlangInt (DBI.fromInt 0)))) =
  let   
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [list_0])
  in let
    match_expr_6 =
      (BIF.do_remote_fun_call "Lists" "erlps__split__2" [n_1, arg_3])
  in
    case match_expr_6 of
      (ErlangTuple [s_5, _]) -> s_5
      _ -> (EXC.badmatch match_expr_6)
erlps__flat_trunc__3 [list_0, n_1, (ErlangAtom "unicode")]
  | ((isEInt n_1) && (weakGeq n_1 (ErlangInt (DBI.fromInt 0)))) =
  (BIF.do_remote_fun_call "String" "erlps__slice__3"
     [list_0, (ErlangInt (DBI.fromInt 0)), n_1])
erlps__flat_trunc__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__flat_trunc__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__chars__2 :: ErlangFun
erlps__chars__2 [_c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  ErlangEmptyList
erlps__chars__2 [c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 1))) =
  (ErlangCons c_0 ErlangEmptyList)
erlps__chars__2 [c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 2))) =
  (ErlangCons c_0 (ErlangCons c_0 ErlangEmptyList))
erlps__chars__2 [c_0, (ErlangInt num_1)]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 3))) =
  (ErlangCons c_0
     (ErlangCons c_0 (ErlangCons c_0 ErlangEmptyList)))
erlps__chars__2 [c_0, n_1]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let lop_9 = (BIF.erlang__is_integer__1 [n_1])
             in
               case lop_9 of
                 (ErlangAtom "false") -> (ErlangAtom "false")
                 (ErlangAtom "true") ->
                   let
                     lop_11 =
                       (BIF.erlang__band__2 [n_1, (ErlangInt (DBI.fromInt 1))])
                   in
                     (BIF.erlang__op_exactEq
                        [lop_11, (ErlangInt (DBI.fromInt 0))])
                 _ -> (EXC.badarg1 lop_9)))) =
  let   
    arg_3 = (BIF.erlang__bsr__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let s_6 = (erlps__chars__2 [c_0, arg_3])
  in (ErlangCons s_6 s_6)
erlps__chars__2 [c_0, n_1] | (isEInt n_1) =
  let   
    arg_3 = (BIF.erlang__bsr__2 [n_1, (ErlangInt (DBI.fromInt 1))])
  in let s_6 = (erlps__chars__2 [c_0, arg_3])
  in (ErlangCons c_0 (ErlangCons s_6 s_6))
erlps__chars__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__chars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__cond_lowercase__2 :: ErlangFun
erlps__cond_lowercase__2 [string_0, (ErlangAtom "true")] =
  (erlps__lowercase__1 [string_0])
erlps__cond_lowercase__2 [string_0, (ErlangAtom "false")] =
  string_0
erlps__cond_lowercase__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__cond_lowercase__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lowercase__1 :: ErlangFun
erlps__lowercase__1 [(ErlangCons h_0 t_1)]
  | (((isEInt h_0) &&
        (weakGeq h_0 (ErlangInt (DBI.fromInt 65)))) &&
       (weakLeq h_0 (ErlangInt (DBI.fromInt 90)))) =
  let   
    lop_3 =
      (BIF.erlang__op_minus [h_0, (ErlangInt (DBI.fromInt 65))])
  in let
    head_2 =
      (BIF.erlang__op_plus [lop_3, (ErlangInt (DBI.fromInt 97))])
  in let tail_7 = (erlps__lowercase__1 [t_1])
  in (ErlangCons head_2 tail_7)
erlps__lowercase__1 [(ErlangCons h_0 t_1)] =
  let tail_3 = (erlps__lowercase__1 [t_1])
  in (ErlangCons h_0 tail_3)
erlps__lowercase__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__lowercase__1 [arg_0] = (EXC.function_clause unit)
erlps__lowercase__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__sub__2 :: ErlangFun
erlps__sub__2 [t_0, _]
  | (weakLt t_0 (ErlangInt (DBI.fromInt 0))) =
  t_0
erlps__sub__2 [t_0, e_1] | (weakGeq t_0 e_1) =
  (BIF.erlang__op_minus [t_0, e_1])
erlps__sub__2 [_, _] = (ErlangInt (DBI.fromInt 0))
erlps__sub__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__sub__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__get_option__3 :: ErlangFun
erlps__get_option__3 [key_0, tuplelist_1, default_2] =
  let
    case_3 =
      (BIF.lists__keyfind__3
         [key_0, (ErlangInt (DBI.fromInt 1)), tuplelist_1])
  in
    case case_3 of
      (ErlangAtom "false") -> default_2
      (ErlangTuple [key_7, value_8]) | (key_7 == key_0) -> value_8
      _ -> default_2
      something_else -> (EXC.case_clause something_else)
erlps__get_option__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__get_option__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)