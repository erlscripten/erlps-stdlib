module Erl.Lint(erlps__module__1, erlps__module__2,
                erlps__module__3, erlps__format_error__1, erlps__exprs__2,
                erlps__exprs_opt__3, erlps__used_vars__2,
                erlps__is_pattern_expr__1, erlps__is_guard_test__1,
                erlps__is_guard_test__2, erlps__is_guard_test__3,
                erlps__is_guard_expr__1, erlps__bool_option__4,
                erlps__value_option__3, erlps__value_option__7) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.0.2
-}

import Prelude
import Data.Array as DA
import Data.List as DL
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as Tup
import Data.BigInt as DBI
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type (ErlangFun, ErlangTerm(..), weakCmp, weakEq,
                    weakNEq, weakLt, weakLeq, weakGeq, weakGt)
import Effect (Effect)
import Effect.Unsafe (unsafePerformEffect)
import Effect.Exception (throw)
import Partial.Unsafe (unsafePartial)


erlps__bool_option__4 :: ErlangFun
erlps__bool_option__4 [on_0, off_1, default_2, opts_3] =
  let
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [opt_8, _def_9] | ((==) opt_8 on_0) =
             (ErlangAtom "true")
           lambda_5 [opt_10, _def_11] | ((==) opt_10 off_1) =
             (ErlangAtom "false")
           lambda_5 [_opt_12, def_13] = def_13
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_4, default_2, opts_3])
erlps__bool_option__4 [arg_16, arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__bool_option__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__value_option__3 :: ErlangFun
erlps__value_option__3 [flag_0, default_1, opts_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [(ErlangTuple [opt_7, val_8]), _def_9]
             | ((==) opt_7 flag_0) =
             val_8
           lambda_4 [_opt_10, def_11] = def_11
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, default_1, opts_2])
erlps__value_option__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__value_option__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__value_option__7 :: ErlangFun
erlps__value_option__7 [flag_0, default_1, on_2, onval_3, off_4,
                        offval_5, opts_6]
  =
  let
    arg_7 =
      (ErlangFun 2
         let
           lambda_8 [(ErlangTuple [opt_11, val_12]), _def_13]
             | ((==) opt_11 flag_0) =
             val_12
           lambda_8 [opt_14, _def_15] | ((==) opt_14 on_2) = onval_3
           lambda_8 [opt_16, _def_17] | ((==) opt_16 off_4) = offval_5
           lambda_8 [_opt_18, def_19] = def_19
           lambda_8 [arg_9, arg_10] = (EXC.function_clause unit)
           lambda_8 args = (EXC.badarity (ErlangFun 2 lambda_8) args)
         in lambda_8)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_7, default_1, opts_6])
erlps__value_option__7 [arg_22, arg_23, arg_24, arg_25, arg_26,
                        arg_27, arg_28]
  =
  (EXC.function_clause unit)
erlps__value_option__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_error__1 :: ErlangFun
erlps__format_error__1 [(ErlangTuple [(ErlangAtom "format_error"),
                                      (ErlangTuple [fmt_0, args_1])])]
  =
  (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
     [fmt_0, args_1])
erlps__format_error__1 [arg_4] = (EXC.function_clause unit)
erlps__format_error__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_type_paren__1 :: ErlangFun
erlps__gen_type_paren__1 [arity_0]
  | ((isEInt arity_0) &&
       (weakGeq arity_0 (ErlangInt (DBI.fromInt 0)))) =
  let arg_2 = (make_string ")")
  in (erlps__gen_type_paren_1__2 [arity_0, arg_2])
erlps__gen_type_paren__1 [arg_3] = (EXC.function_clause unit)
erlps__gen_type_paren__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gen_type_paren_1__2 :: ErlangFun
erlps__gen_type_paren_1__2 [(ErlangInt num_0), acc_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  let lop_2 = (make_string "(")
  in (BIF.erlang__op_append [lop_2, acc_1])
erlps__gen_type_paren_1__2 [(ErlangInt num_0), acc_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  let lop_2 = (make_string "(_")
  in (BIF.erlang__op_append [lop_2, acc_1])
erlps__gen_type_paren_1__2 [n_0, acc_1] =
  let   
    arg_2 = (BIF.erlang__op_minus [n_0, (ErlangInt (DBI.fromInt 1))])
  in let lop_6 = (make_string ",_")
  in let arg_5 = (BIF.erlang__op_append [lop_6, acc_1])
  in (erlps__gen_type_paren_1__2 [arg_2, arg_5])
erlps__gen_type_paren_1__2 [arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__gen_type_paren_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_mfa__1 :: ErlangFun
erlps__format_mfa__1 [(ErlangTuple [m_0, f_1,
                                    as_2@(ErlangCons _ _)])]
  =
  let   
    arg_3 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              a_5 ->
                let tail_9 = (BIF.erlang__integer_to_list__1 [a_5])
                in
                  (ErlangCons (ErlangCons (ErlangInt (DBI.fromInt 44)) tail_9)
                     ErlangEmptyList)
              _ -> ErlangEmptyList)
         as_2)
  in let
    match_expr_13 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [arg_3])
  in
    case match_expr_13 of
      (ErlangCons (ErlangInt num_11) aritystring_12) | ((ErlangInt
                                                           num_11) ==
                                                          (ErlangInt
                                                             (DBI.fromInt
                                                                44))) ->
        (erlps__format_mf__3 [m_0, f_1, aritystring_12])
      _ -> (EXC.badmatch match_expr_13)
erlps__format_mfa__1 [(ErlangTuple [m_0, f_1, a_2])]
  | (isEInt a_2) =
  let arg_5 = (BIF.erlang__integer_to_list__1 [a_2])
  in (erlps__format_mf__3 [m_0, f_1, arg_5])
erlps__format_mfa__1 [arg_7] = (EXC.function_clause unit)
erlps__format_mfa__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_mf__3 :: ErlangFun
erlps__format_mf__3 [m_0, f_1, aritystring_2]
  | ((isEAtom m_0) && (isEAtom f_1)) =
  let    lop_3 = (BIF.erlang__atom_to_list__1 [m_0])
  in let lop_6 = (make_string ":")
  in let lop_8 = (BIF.erlang__atom_to_list__1 [f_1])
  in let lop_11 = (make_string "/")
  in let rop_10 = (BIF.erlang__op_append [lop_11, aritystring_2])
  in let rop_7 = (BIF.erlang__op_append [lop_8, rop_10])
  in let rop_5 = (BIF.erlang__op_append [lop_6, rop_7])
  in (BIF.erlang__op_append [lop_3, rop_5])
erlps__format_mf__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__format_mf__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_mna__1 :: ErlangFun
erlps__format_mna__1 [(ErlangTuple [m_0, n_1, a_2])]
  | (isEInt a_2) =
  let    lop_3 = (BIF.erlang__atom_to_list__1 [m_0])
  in let lop_6 = (make_string ":")
  in let lop_8 = (BIF.erlang__atom_to_list__1 [n_1])
  in let rop_10 = (erlps__gen_type_paren__1 [a_2])
  in let rop_7 = (BIF.erlang__op_append [lop_8, rop_10])
  in let rop_5 = (BIF.erlang__op_append [lop_6, rop_7])
  in (BIF.erlang__op_append [lop_3, rop_5])
erlps__format_mna__1 [arg_12] = (EXC.function_clause unit)
erlps__format_mna__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_where__1 :: ErlangFun
erlps__format_where__1 [l_0] | (isEInt l_0) =
  let arg_1 = (make_string "(line ~p)")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_1, (ErlangCons l_0 ErlangEmptyList)])
erlps__format_where__1 [(ErlangTuple [l_0, c_1])]
  | ((isEInt l_0) && (isEInt c_1)) =
  let arg_2 = (make_string "(line ~p, column ~p)")
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
       [arg_2, (ErlangCons l_0 (ErlangCons c_1 ErlangEmptyList))])
erlps__format_where__1 [arg_8] = (EXC.function_clause unit)
erlps__format_where__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pseudolocals__0 :: ErlangFun
erlps__pseudolocals__0 [] =
  let   
    head_0 =
      (ErlangTuple
         [(ErlangAtom "module_info"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_4 =
      (ErlangTuple
         [(ErlangAtom "module_info"), (ErlangInt (DBI.fromInt 1))])
  in let
    head_8 =
      (ErlangTuple
         [(ErlangAtom "record_info"), (ErlangInt (DBI.fromInt 2))])
  in
    (ErlangCons head_0
       (ErlangCons head_4 (ErlangCons head_8 ErlangEmptyList)))
erlps__pseudolocals__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__2 :: ErlangFun
erlps__exprs__2 [exprs_0, bindingslist_1] =
  (erlps__exprs_opt__3 [exprs_0, bindingslist_1, ErlangEmptyList])
erlps__exprs__2 [arg_5, arg_6] = (EXC.function_clause unit)
erlps__exprs__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs_opt__3 :: ErlangFun
erlps__exprs_opt__3 [exprs_0, bindingslist_1, opts_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                                 _sequencenumber_7, _name_8]),
                                   attr0_9]),
                     (ErlangTuple [st1_10, vs1_11])]
             =
             let    arg_13 = (make_string "none")
             in let attr_14 = (erlps__set_file__2 [attr0_9, arg_13])
             in let tup_el_15 = (erlps__attribute_state__2 [attr_14, st1_10])
             in (ErlangTuple [tup_el_15, vs1_11])
           lambda_4 [(ErlangTuple [v_19, _]),
                     (ErlangTuple [st1_20, vs1_21])]
             =
             let   
               tup_el_26 =
                 (ErlangTuple
                    [(ErlangAtom "bound"), (ErlangAtom "unused"),
                     ErlangEmptyList])
             in let head_24 = (ErlangTuple [v_19, tup_el_26])
             in (ErlangTuple [st1_20, (ErlangCons head_24 vs1_21)])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let arg_33 = (make_string "nofile")
  in let tup_el_32 = (erlps__start__2 [arg_33, opts_2])
  in let arg_31 = (ErlangTuple [tup_el_32, ErlangEmptyList])
  in let
    match_expr_39 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_3, arg_31, bindingslist_1])
  in
    case match_expr_39 of
      (ErlangTuple [st0_37, vs_38]) ->
        let   
          vt_41 =
            (BIF.do_remote_fun_call "Orddict" "erlps__from_list__1" [vs_38])
        in let arg_44 = (make_string "nofile")
        in let arg_42 = (erlps__set_file__2 [exprs_0, arg_44])
        in let match_expr_49 = (erlps__exprs__3 [arg_42, vt_41, st0_37])
        in
          case match_expr_49 of
            (ErlangTuple [_evt_47, st_48]) ->
              (erlps__return_status__1 [st_48])
            _ -> (EXC.badmatch match_expr_49)
      _ -> (EXC.badmatch match_expr_39)
erlps__exprs_opt__3 [arg_51, arg_52, arg_53] =
  (EXC.function_clause unit)
erlps__exprs_opt__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__used_vars__2 :: ErlangFun
erlps__used_vars__2 [exprs_0, bindingslist_1] =
  let   
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [(ErlangTuple [(ErlangTuple [(ErlangAtom "record"),
                                                 _sequencenumber_6, _name_7]),
                                   _attr_8]),
                     vs0_9]
             =
             vs0_9
           lambda_3 [(ErlangTuple [v_10, _val_11]), vs0_12] =
             let   
               tup_el_15 =
                 (ErlangTuple
                    [(ErlangAtom "bound"), (ErlangAtom "unused"),
                     ErlangEmptyList])
             in let head_13 = (ErlangTuple [v_10, tup_el_15])
             in (ErlangCons head_13 vs0_12)
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in let
    vs_22 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_2, ErlangEmptyList, bindingslist_1])
  in let
    vt_24 =
      (BIF.do_remote_fun_call "Orddict" "erlps__from_list__1" [vs_22])
  in let arg_27 = (make_string "nofile")
  in let arg_25 = (erlps__set_file__2 [exprs_0, arg_27])
  in let arg_29 = (erlps__start__0 [])
  in let match_expr_32 = (erlps__exprs__3 [arg_25, vt_24, arg_29])
  in
    case match_expr_32 of
      (ErlangTuple [evt_30, _st_31]) ->
        let   
          arg_35 =
            (ErlangFun 2
               let
                 lambda_36 [(ErlangTuple [v_39,
                                          (ErlangTuple [_, (ErlangAtom "used"),
                                                        _])]),
                            l_40]
                   =
                   (ErlangCons v_39 l_40)
                 lambda_36 [_, l_43] = l_43
                 lambda_36 [arg_37, arg_38] = (EXC.function_clause unit)
                 lambda_36 args = (EXC.badarity (ErlangFun 2 lambda_36) args)
               in lambda_36)
        in let
          tup_el_34 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_35, ErlangEmptyList, evt_30])
        in (ErlangTuple [(ErlangAtom "ok"), tup_el_34])
      _ -> (EXC.badmatch match_expr_32)
erlps__used_vars__2 [arg_46, arg_47] = (EXC.function_clause unit)
erlps__used_vars__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__module__1 :: ErlangFun
erlps__module__1 [forms_0] =
  let    opts_2 = (erlps__compiler_options__1 [forms_0])
  in let arg_5 = (make_string "nofile")
  in let arg_4 = (erlps__start__2 [arg_5, opts_2])
  in let st_7 = (erlps__forms__2 [forms_0, arg_4])
  in (erlps__return_status__1 [st_7])
erlps__module__1 [arg_9] = (EXC.function_clause unit)
erlps__module__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__module__2 :: ErlangFun
erlps__module__2 [forms_0, filename_1] =
  let    opts_3 = (erlps__compiler_options__1 [forms_0])
  in let arg_5 = (erlps__start__2 [filename_1, opts_3])
  in let st_8 = (erlps__forms__2 [forms_0, arg_5])
  in (erlps__return_status__1 [st_8])
erlps__module__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__module__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__module__3 :: ErlangFun
erlps__module__3 [forms_0, filename_1, opts0_2] =
  let    lop_3 = (erlps__compiler_options__1 [forms_0])
  in let opts_6 = (BIF.erlang__op_append [lop_3, opts0_2])
  in let arg_8 = (erlps__start__2 [filename_1, opts_6])
  in let st_11 = (erlps__forms__2 [forms_0, arg_8])
  in (erlps__return_status__1 [st_11])
erlps__module__3 [arg_13, arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__module__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__compiler_options__1 :: ErlangFun
erlps__compiler_options__1 [forms_0] =
  let
    arg_1 =
      (flmap
         (\ lc_4 ->
            case lc_4 of
              (ErlangTuple [(ErlangAtom "attribute"), _,
                            (ErlangAtom "compile"), c_3]) ->
                (ErlangCons c_3 ErlangEmptyList)
              _ -> ErlangEmptyList)
         forms_0)
  in (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_1])
erlps__compiler_options__1 [arg_6] = (EXC.function_clause unit)
erlps__compiler_options__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start__0 :: ErlangFun
erlps__start__0 [] =
  let arg_0 = (make_string "nofile")
  in (erlps__start__2 [arg_0, ErlangEmptyList])
erlps__start__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start__2 :: ErlangFun
erlps__start__2 [file_0, opts_1] =
  let   
    tup_el_4 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_unused_vars"),
          (ErlangAtom "nowarn_unused_vars"), (ErlangAtom "true"), opts_1])
  in let
    head_2 = (ErlangTuple [(ErlangAtom "unused_vars"), tup_el_4])
  in let
    tup_el_12 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_export_all"),
          (ErlangAtom "nowarn_export_all"), (ErlangAtom "true"), opts_1])
  in let
    head_10 = (ErlangTuple [(ErlangAtom "export_all"), tup_el_12])
  in let
    tup_el_20 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_export_vars"),
          (ErlangAtom "nowarn_export_vars"), (ErlangAtom "false"), opts_1])
  in let
    head_18 = (ErlangTuple [(ErlangAtom "export_vars"), tup_el_20])
  in let
    tup_el_28 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_shadow_vars"),
          (ErlangAtom "nowarn_shadow_vars"), (ErlangAtom "true"), opts_1])
  in let
    head_26 = (ErlangTuple [(ErlangAtom "shadow_vars"), tup_el_28])
  in let
    tup_el_36 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_unused_import"),
          (ErlangAtom "nowarn_unused_import"), (ErlangAtom "false"),
          opts_1])
  in let
    head_34 = (ErlangTuple [(ErlangAtom "unused_import"), tup_el_36])
  in let
    tup_el_44 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_unused_function"),
          (ErlangAtom "nowarn_unused_function"), (ErlangAtom "true"),
          opts_1])
  in let
    head_42 =
      (ErlangTuple [(ErlangAtom "unused_function"), tup_el_44])
  in let
    tup_el_52 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_unused_type"),
          (ErlangAtom "nowarn_unused_type"), (ErlangAtom "true"), opts_1])
  in let
    head_50 = (ErlangTuple [(ErlangAtom "unused_type"), tup_el_52])
  in let
    tup_el_60 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_bif_clash"), (ErlangAtom "nowarn_bif_clash"),
          (ErlangAtom "true"), opts_1])
  in let
    head_58 = (ErlangTuple [(ErlangAtom "bif_clash"), tup_el_60])
  in let
    tup_el_68 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_unused_record"),
          (ErlangAtom "nowarn_unused_record"), (ErlangAtom "true"),
          opts_1])
  in let
    head_66 = (ErlangTuple [(ErlangAtom "unused_record"), tup_el_68])
  in let
    tup_el_76 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_deprecated_function"),
          (ErlangAtom "nowarn_deprecated_function"), (ErlangAtom "true"),
          opts_1])
  in let
    head_74 =
      (ErlangTuple [(ErlangAtom "deprecated_function"), tup_el_76])
  in let
    tup_el_84 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_deprecated_type"),
          (ErlangAtom "nowarn_deprecated_type"), (ErlangAtom "true"),
          opts_1])
  in let
    head_82 =
      (ErlangTuple [(ErlangAtom "deprecated_type"), tup_el_84])
  in let
    tup_el_92 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_obsolete_guard"),
          (ErlangAtom "nowarn_obsolete_guard"), (ErlangAtom "true"),
          opts_1])
  in let
    head_90 =
      (ErlangTuple [(ErlangAtom "obsolete_guard"), tup_el_92])
  in let
    tup_el_100 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_untyped_record"),
          (ErlangAtom "nowarn_untyped_record"), (ErlangAtom "false"),
          opts_1])
  in let
    head_98 =
      (ErlangTuple [(ErlangAtom "untyped_record"), tup_el_100])
  in let
    tup_el_108 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_missing_spec"),
          (ErlangAtom "nowarn_missing_spec"), (ErlangAtom "false"),
          opts_1])
  in let
    head_106 =
      (ErlangTuple [(ErlangAtom "missing_spec"), tup_el_108])
  in let
    tup_el_116 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_missing_spec_all"),
          (ErlangAtom "nowarn_missing_spec_all"), (ErlangAtom "false"),
          opts_1])
  in let
    head_114 =
      (ErlangTuple [(ErlangAtom "missing_spec_all"), tup_el_116])
  in let
    tup_el_124 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_removed"), (ErlangAtom "nowarn_removed"),
          (ErlangAtom "true"), opts_1])
  in let
    head_122 = (ErlangTuple [(ErlangAtom "removed"), tup_el_124])
  in let
    tup_el_132 =
      (erlps__bool_option__4
         [(ErlangAtom "warn_nif_inline"),
          (ErlangAtom "nowarn_nif_inline"), (ErlangAtom "true"), opts_1])
  in let
    head_130 = (ErlangTuple [(ErlangAtom "nif_inline"), tup_el_132])
  in let
    enabled1_143 =
      (flmap
         (\ lc_141 ->
            case lc_141 of
              (ErlangTuple [category_140, (ErlangAtom "true")]) ->
                (ErlangCons category_140 ErlangEmptyList)
              _ -> ErlangEmptyList)
         (ErlangCons head_2
            (ErlangCons head_10
               (ErlangCons head_18
                  (ErlangCons head_26
                     (ErlangCons head_34
                        (ErlangCons head_42
                           (ErlangCons head_50
                              (ErlangCons head_58
                                 (ErlangCons head_66
                                    (ErlangCons head_74
                                       (ErlangCons head_82
                                          (ErlangCons head_90
                                             (ErlangCons head_98
                                                (ErlangCons head_106
                                                   (ErlangCons head_114
                                                      (ErlangCons head_122
                                                         (ErlangCons head_130
                                                            ErlangEmptyList))))))))))))))))))
  in let
    enabled_145 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1"
         [enabled1_143])
  in let
    case_146 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__is_element__2"
         [(ErlangAtom "unused_function"), enabled_145])
  in let
    calls_156 =
      case case_146 of
        (ErlangAtom "true") ->
          let   
            tup_el_151 =
              (ErlangTuple
                 [(ErlangAtom "module_info"), (ErlangInt (DBI.fromInt 1))])
          in let tup_el_154 = (erlps__pseudolocals__0 [])
          in let head_150 = (ErlangTuple [tup_el_151, tup_el_154])
          in
            (BIF.maps__from_list__1 [(ErlangCons head_150 ErlangEmptyList)])
        (ErlangAtom "false") -> (ErlangAtom "undefined")
        something_else -> (EXC.case_clause something_else)
  in let
    head_163 =
      (ErlangTuple
         [(ErlangAtom "module_info"), (ErlangInt (DBI.fromInt 0))])
  in let
    head_167 =
      (ErlangTuple
         [(ErlangAtom "module_info"), (ErlangInt (DBI.fromInt 1))])
  in let
    tup_el_161 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1"
         [(ErlangCons head_163 (ErlangCons head_167 ErlangEmptyList))])
  in let
    tup_el_173 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_174 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__empty__0" [])
  in let
    tup_el_175 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__empty__0" [])
  in let arg_177 = (erlps__pseudolocals__0 [])
  in let
    tup_el_176 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1"
         [arg_177])
  in let
    tup_el_179 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
         [(ErlangInt (DBI.fromInt 0))])
  in let
    tup_el_183 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__empty__0" [])
  in let
    tup_el_185 =
      (erlps__value_option__7
         [(ErlangAtom "warn_format"), (ErlangInt (DBI.fromInt 1)),
          (ErlangAtom "warn_format"), (ErlangInt (DBI.fromInt 1)),
          (ErlangAtom "nowarn_format"), (ErlangInt (DBI.fromInt 0)),
          opts_1])
  in let
    tup_el_194 =
      (erlps__nowarn_function__2
         [(ErlangAtom "nowarn_bif_clash"), opts_1])
  in let lc_src_203 = (erlps__pseudolocals__0 [])
  in let
    tup_el_202 =
      (flmap
         (\ lc_205 ->
            case lc_205 of
              f_204 ->
                let
                  lc_ret_206 =
                    (ErlangTuple [f_204, (ErlangInt (DBI.fromInt 0))])
                in (ErlangCons lc_ret_206 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_203)
  in let
    tup_el_213 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__new__0" [])
  in let
    tup_el_214 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_209 =
      (ErlangTuple
         [(ErlangAtom "usage"), calls_156, ErlangEmptyList, tup_el_213,
          tup_el_214])
  in let
    tup_el_215 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_216 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_217 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_218 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_219 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__empty__0" [])
  in
    (ErlangTuple
       [(ErlangAtom "lint"), (ErlangAtom "start"), (ErlangAtom ""),
        ErlangEmptyList, tup_el_161, ErlangEmptyList, opts_1, tup_el_173,
        tup_el_174, tup_el_175, tup_el_176, ErlangEmptyList, tup_el_179,
        ErlangEmptyList, ErlangEmptyList, tup_el_183, ErlangEmptyList,
        tup_el_185, enabled_145, tup_el_194, ErlangEmptyList,
        ErlangEmptyList, file_0, (ErlangAtom "false"),
        (ErlangAtom "false"), tup_el_202, tup_el_209, tup_el_215,
        tup_el_216, tup_el_217, tup_el_218, tup_el_219,
        (ErlangAtom "false"), (ErlangAtom "none"), (ErlangAtom "guard")])
erlps__start__2 [arg_223, arg_224] = (EXC.function_clause unit)
erlps__start__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_warn_enabled__2 :: ErlangFun
erlps__is_warn_enabled__2 [type_0,
                           (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                         _, _, _, _, _, _, _, _, _, _, _,
                                         enabled_1, _, _, _, _, _, _, _, _, _,
                                         _, _, _, _, _, _, _])]
  =
  (BIF.do_remote_fun_call "Ordsets" "erlps__is_element__2"
     [type_0, enabled_1])
erlps__is_warn_enabled__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__is_warn_enabled__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__return_status__1 :: ErlangFun
erlps__return_status__1 [st_0] =
  let   
    arg_1 =
      case st_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 21)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let ws_5 = (erlps__pack_warnings__1 [arg_1])
  in let
    arg_7 =
      case st_0 of
        (ErlangTuple arr_10) | (DM.Just field_9) <-
                                 ((arr_10 DA.!! 20)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_6 = (erlps__pack_errors__1 [arg_7])
  in
    case case_6 of
      (ErlangEmptyList) -> (ErlangTuple [(ErlangAtom "ok"), ws_5])
      es_13 -> (ErlangTuple [(ErlangAtom "error"), es_13, ws_5])
      something_else -> (EXC.case_clause something_else)
erlps__return_status__1 [arg_17] = (EXC.function_clause unit)
erlps__return_status__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pack_errors__1 :: ErlangFun
erlps__pack_errors__1 [es_0] =
  let   
    arg_1 =
      (ErlangFun 2
         let
           lambda_2 [(ErlangTuple [file_5, e_6]), i_7] =
             let    tup_el_10 = (ErlangTuple [i_7, e_6])
             in let tup_el_8 = (ErlangTuple [file_5, tup_el_10])
             in let
               tup_el_13 =
                 (BIF.erlang__op_minus [i_7, (ErlangInt (DBI.fromInt 1))])
             in (ErlangTuple [tup_el_8, tup_el_13])
           lambda_2 [arg_3, arg_4] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 2 lambda_2) args)
         in lambda_2)
  in let
    arg_16 = (BIF.erlang__op_neg [(ErlangInt (DBI.fromInt 1))])
  in let
    match_expr_20 =
      (BIF.do_remote_fun_call "Lists" "erlps__mapfoldl__3"
         [arg_1, arg_16, es_0])
  in
    case match_expr_20 of
      (ErlangTuple [es1_19, _]) ->
        let   
          arg_21 =
            (ErlangFun 1
               let
                 lambda_22 [(ErlangTuple [file_24, eis_25])] =
                   let   
                     arg_28 =
                       (ErlangFun 1
                          let
                            lambda_29 [(ErlangTuple [_i_31, e_32])] = e_32
                            lambda_29 [arg_30] = (EXC.function_clause unit)
                            lambda_29 args =
                              (EXC.badarity (ErlangFun 1 lambda_29) args)
                          in lambda_29)
                   in let
                     tup_el_27 =
                       (BIF.do_remote_fun_call "Lists" "erlps__map__2"
                          [arg_28, eis_25])
                   in (ErlangTuple [file_24, tup_el_27])
                 lambda_22 [arg_23] = (EXC.function_clause unit)
                 lambda_22 args = (EXC.badarity (ErlangFun 1 lambda_22) args)
               in lambda_22)
        in let arg_34 = (erlps__pack_warnings__1 [es1_19])
        in
          (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_21, arg_34])
      _ -> (EXC.badmatch match_expr_20)
erlps__pack_errors__1 [arg_36] = (EXC.function_clause unit)
erlps__pack_errors__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pack_warnings__1 :: ErlangFun
erlps__pack_warnings__1 [ws_0] =
  let   
    arg_2 =
      (flmap
         (\ lc_5 ->
            case lc_5 of
              (ErlangTuple [f_4, _]) -> (ErlangCons f_4 ErlangEmptyList)
              _ -> ErlangEmptyList)
         ws_0)
  in let
    lc_src_1 =
      (BIF.do_remote_fun_call "Lists" "erlps__usort__1" [arg_2])
  in
    (flmap
       (\ lc_8 ->
          case lc_8 of
            file_7 ->
              let   
                arg_12 =
                  (flmap
                     (\ lc_16 ->
                        case lc_16 of
                          (ErlangTuple [f_14, w_15]) ->
                            let
                              cond_17 = (BIF.erlang__op_exactEq [f_14, file_7])
                            in
                              case cond_17 of
                                (ErlangAtom "true") ->
                                  (ErlangCons w_15 ErlangEmptyList)
                                _ -> ErlangEmptyList
                          _ -> ErlangEmptyList)
                     ws_0)
              in let
                tup_el_11 =
                  (BIF.do_remote_fun_call "Lists" "erlps__sort__1" [arg_12])
              in let lc_ret_9 = (ErlangTuple [file_7, tup_el_11])
              in (ErlangCons lc_ret_9 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_1)
erlps__pack_warnings__1 [arg_21] = (EXC.function_clause unit)
erlps__pack_warnings__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_error__2 :: ErlangFun
erlps__add_error__2 [e_0, st_1] =
  let
    arg_3 =
      case st_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 22)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__add_lint_error__3 [e_0, arg_3, st_1])
erlps__add_error__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__add_error__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_error__3 :: ErlangFun
erlps__add_error__3 [anno_0, e0_1,
                     st_3@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _, _, _, _, _, _,
                                        _, context_2])]
  =
  let    case_4 = (ErlangTuple [e0_1, context_2])
  in let
    e_10 =
      case case_4 of
        (ErlangTuple [(ErlangAtom "illegal_guard_expr"),
                      (ErlangAtom "bin_seg_size")]) ->
          (ErlangAtom "illegal_bitsize")
        (ErlangTuple [(ErlangTuple [(ErlangAtom "illegal_guard_local_call"),
                                    fa_7]),
                      (ErlangAtom "bin_seg_size")]) ->
          (ErlangTuple [(ErlangAtom "illegal_bitsize_local_call"), fa_7])
        (ErlangTuple [_, _]) -> e0_1
        something_else -> (EXC.case_clause something_else)
  in let match_expr_15 = (erlps__loc__2 [anno_0, st_3])
  in
    case match_expr_15 of
      (ErlangTuple [file_13, location_14]) ->
        let
          arg_16 =
            (ErlangTuple [location_14, (ErlangAtom "erl_lint"), e_10])
        in (erlps__add_lint_error__3 [arg_16, file_13, st_3])
      _ -> (EXC.badmatch match_expr_15)
erlps__add_error__3 [arg_22, arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__add_error__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_lint_error__3 :: ErlangFun
erlps__add_lint_error__3 [e_0, file_1, st_2] =
  let    head_5 = (ErlangTuple [file_1, e_0])
  in let
    tail_8 =
      case st_2 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 20)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_12, module_13,
                    behaviour_14, exports_15, imports_16, compile_17,
                    records_18, locals_19, no_auto_20, defined_21, on_load_22,
                    on_load_line_23, clashes_24, not_deprecated_25,
                    not_removed_26, func_27, warn_format_28,
                    enabled_warnings_29, nowarn_bif_clash_30, errors_31,
                    warnings_32, file_33, recdef_top_34, xqlc_35, called_36,
                    usage_37, specs_38, callbacks_39, optional_callbacks_40,
                    types_41, exp_types_42, in_try_head_43, bvt_44,
                    gexpr_context_45]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_12, module_13, behaviour_14,
            exports_15, imports_16, compile_17, records_18, locals_19,
            no_auto_20, defined_21, on_load_22, on_load_line_23, clashes_24,
            not_deprecated_25, not_removed_26, func_27, warn_format_28,
            enabled_warnings_29, nowarn_bif_clash_30,
            (ErlangCons head_5 tail_8), warnings_32, file_33, recdef_top_34,
            xqlc_35, called_36, usage_37, specs_38, callbacks_39,
            optional_callbacks_40, types_41, exp_types_42, in_try_head_43,
            bvt_44, gexpr_context_45])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__add_lint_error__3 [arg_46, arg_47, arg_48] =
  (EXC.function_clause unit)
erlps__add_lint_error__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_warning__2 :: ErlangFun
erlps__add_warning__2 [w_0, st_1] =
  let
    arg_3 =
      case st_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 22)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__add_lint_warning__3 [w_0, arg_3, st_1])
erlps__add_warning__2 [arg_8, arg_9] = (EXC.function_clause unit)
erlps__add_warning__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_warning__3 :: ErlangFun
erlps__add_warning__3 [fileline_0, w_1, st_2] =
  let match_expr_7 = (erlps__loc__2 [fileline_0, st_2])
  in
    case match_expr_7 of
      (ErlangTuple [file_5, location_6]) ->
        let
          arg_8 = (ErlangTuple [location_6, (ErlangAtom "erl_lint"), w_1])
        in (erlps__add_lint_warning__3 [arg_8, file_5, st_2])
      _ -> (EXC.badmatch match_expr_7)
erlps__add_warning__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__add_warning__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_lint_warning__3 :: ErlangFun
erlps__add_lint_warning__3 [w_0, file_1, st_2] =
  let    head_5 = (ErlangTuple [file_1, w_0])
  in let
    tail_8 =
      case st_2 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 21)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_12, module_13,
                    behaviour_14, exports_15, imports_16, compile_17,
                    records_18, locals_19, no_auto_20, defined_21, on_load_22,
                    on_load_line_23, clashes_24, not_deprecated_25,
                    not_removed_26, func_27, warn_format_28,
                    enabled_warnings_29, nowarn_bif_clash_30, errors_31,
                    warnings_32, file_33, recdef_top_34, xqlc_35, called_36,
                    usage_37, specs_38, callbacks_39, optional_callbacks_40,
                    types_41, exp_types_42, in_try_head_43, bvt_44,
                    gexpr_context_45]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_12, module_13, behaviour_14,
            exports_15, imports_16, compile_17, records_18, locals_19,
            no_auto_20, defined_21, on_load_22, on_load_line_23, clashes_24,
            not_deprecated_25, not_removed_26, func_27, warn_format_28,
            enabled_warnings_29, nowarn_bif_clash_30, errors_31,
            (ErlangCons head_5 tail_8), file_33, recdef_top_34, xqlc_35,
            called_36, usage_37, specs_38, callbacks_39,
            optional_callbacks_40, types_41, exp_types_42, in_try_head_43,
            bvt_44, gexpr_context_45])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__add_lint_warning__3 [arg_46, arg_47, arg_48] =
  (EXC.function_clause unit)
erlps__add_lint_warning__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__loc__2 :: ErlangFun
erlps__loc__2 [anno_0, st_1] =
  let   
    location_3 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1" [anno_0])
  in let
    case_4 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__file__1" [anno_0])
  in
    case case_4 of
      (ErlangAtom "undefined") ->
        let
          tup_el_6 =
            case st_1 of
              (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 22)) ->
                field_8
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in (ErlangTuple [tup_el_6, location_3])
      file_11 -> (ErlangTuple [file_11, location_3])
      something_else -> (EXC.case_clause something_else)
erlps__loc__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__loc__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__forms__2 :: ErlangFun
erlps__forms__2 [forms0_0, st0_1] =
  let   
    forms_4 = (erlps__eval_file_attribute__2 [forms0_0, st0_1])
  in let locals_6 = (erlps__local_functions__1 [forms_4])
  in let
    arg_7 =
      case st0_1 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 6)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    autoimportsuppressed_11 =
      (erlps__auto_import_suppressed__1 [arg_7])
  in let
    stdeprecated_14 =
      (erlps__disallowed_compile_flags__2 [forms_4, st0_1])
  in let
    arg_16 =
      case stdeprecated_14 of
        (ErlangTuple [(ErlangAtom "lint"), state_20, module_21,
                      behaviour_22, exports_23, imports_24, compile_25,
                      records_26, locals_27, no_auto_28, defined_29, on_load_30,
                      on_load_line_31, clashes_32, not_deprecated_33,
                      not_removed_34, func_35, warn_format_36,
                      enabled_warnings_37, nowarn_bif_clash_38, errors_39,
                      warnings_40, file_41, recdef_top_42, xqlc_43, called_44,
                      usage_45, specs_46, callbacks_47, optional_callbacks_48,
                      types_49, exp_types_50, in_try_head_51, bvt_52,
                      gexpr_context_53]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_20, module_21, behaviour_22,
              exports_23, imports_24, compile_25, records_26, locals_6,
              autoimportsuppressed_11, defined_29, on_load_30, on_load_line_31,
              clashes_32, not_deprecated_33, not_removed_34, func_35,
              warn_format_36, enabled_warnings_37, nowarn_bif_clash_38,
              errors_39, warnings_40, file_41, recdef_top_42, xqlc_43,
              called_44, usage_45, specs_46, callbacks_47,
              optional_callbacks_48, types_49, exp_types_50, in_try_head_51,
              bvt_52, gexpr_context_53])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let st1_54 = (erlps__includes_qlc_hrl__2 [forms_4, arg_16])
  in let st2_57 = (erlps__bif_clashes__2 [forms_4, st1_54])
  in let st3_60 = (erlps__not_deprecated__2 [forms_4, st2_57])
  in let st4_63 = (erlps__not_removed__2 [forms_4, st3_60])
  in let arg_64 = (ErlangFun 2 erlps__form__2)
  in let arg_65 = (erlps__pre_scan__2 [forms_4, st4_63])
  in let
    st5_69 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_64, arg_65, forms_4])
  in (erlps__post_traversal_check__2 [forms_4, st5_69])
erlps__forms__2 [arg_72, arg_73] = (EXC.function_clause unit)
erlps__forms__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pre_scan__2 :: ErlangFun
erlps__pre_scan__2 [(ErlangCons (ErlangTuple [(ErlangAtom "attribute"),
                                              l_0, (ErlangAtom "compile"),
                                              c_1]) fs_2),
                    st_3]
  =
  let   
    lop_5 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "export_all"), st_3])
  in let
    case_4 =
      case lop_5 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let
            arg_9 =
              (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                 [(ErlangCons c_1 ErlangEmptyList)])
          in (BIF.lists__member__2 [(ErlangAtom "export_all"), arg_9])
        _ -> (EXC.badarg1 lop_5)
  in
    case case_4 of
      (ErlangAtom "true") ->
        let
          arg_14 =
            (erlps__add_warning__3 [l_0, (ErlangAtom "export_all"), st_3])
        in (erlps__pre_scan__2 [fs_2, arg_14])
      (ErlangAtom "false") -> (erlps__pre_scan__2 [fs_2, st_3])
      something_else -> (EXC.case_clause something_else)
erlps__pre_scan__2 [(ErlangCons _ fs_0), st_1] =
  (erlps__pre_scan__2 [fs_0, st_1])
erlps__pre_scan__2 [(ErlangEmptyList), st_0] = st_0
erlps__pre_scan__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__pre_scan__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__includes_qlc_hrl__2 :: ErlangFun
erlps__includes_qlc_hrl__2 [forms_0, st_1] =
  let   
    qh_11 =
      (flmap
         (\ lc_5 ->
            case lc_5 of
              (ErlangTuple [(ErlangAtom "attribute"), _, (ErlangAtom "file"),
                            (ErlangTuple [file_3, _line_4])]) ->
                let   
                  lop_7 =
                    (BIF.do_remote_fun_call "Filename" "erlps__basename__1"
                       [file_3])
                in let rop_9 = (make_string "qlc.hrl")
                in let cond_6 = (BIF.erlang__op_exactEq [lop_7, rop_9])
                in
                  case cond_6 of
                    (ErlangAtom "true") -> (ErlangCons file_3 ErlangEmptyList)
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         forms_0)
  in let
    record_updt_13 =
      (BIF.erlang__op_exactNeq [qh_11, ErlangEmptyList])
  in
    case st_1 of
      (ErlangTuple [(ErlangAtom "lint"), state_16, module_17,
                    behaviour_18, exports_19, imports_20, compile_21,
                    records_22, locals_23, no_auto_24, defined_25, on_load_26,
                    on_load_line_27, clashes_28, not_deprecated_29,
                    not_removed_30, func_31, warn_format_32,
                    enabled_warnings_33, nowarn_bif_clash_34, errors_35,
                    warnings_36, file_37, recdef_top_38, xqlc_39, called_40,
                    usage_41, specs_42, callbacks_43, optional_callbacks_44,
                    types_45, exp_types_46, in_try_head_47, bvt_48,
                    gexpr_context_49]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_16, module_17, behaviour_18,
            exports_19, imports_20, compile_21, records_22, locals_23,
            no_auto_24, defined_25, on_load_26, on_load_line_27, clashes_28,
            not_deprecated_29, not_removed_30, func_31, warn_format_32,
            enabled_warnings_33, nowarn_bif_clash_34, errors_35, warnings_36,
            file_37, recdef_top_38, record_updt_13, called_40, usage_41,
            specs_42, callbacks_43, optional_callbacks_44, types_45,
            exp_types_46, in_try_head_47, bvt_48, gexpr_context_49])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__includes_qlc_hrl__2 [arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__includes_qlc_hrl__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_file_attribute__2 :: ErlangFun
erlps__eval_file_attribute__2 [forms_0, st_1] =
  let
    arg_3 =
      case st_1 of
        (ErlangTuple arr_6) | (DM.Just field_5) <- ((arr_6 DA.!! 22)) ->
          field_5
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__eval_file_attr__2 [forms_0, arg_3])
erlps__eval_file_attribute__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__eval_file_attribute__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eval_file_attr__2 :: ErlangFun
erlps__eval_file_attr__2 [(ErlangCons form_3@(ErlangTuple [(ErlangAtom "attribute"),
                                                           _l_0,
                                                           (ErlangAtom "file"),
                                                           (ErlangTuple [file_1,
                                                                         _line_2])]) forms_4),
                          _file_5]
  =
  let tail_7 = (erlps__eval_file_attr__2 [forms_4, file_1])
  in (ErlangCons form_3 tail_7)
erlps__eval_file_attr__2 [(ErlangCons form0_0 forms_1), file_2] =
  let    form_5 = (erlps__set_form_file__2 [form0_0, file_2])
  in let tail_7 = (erlps__eval_file_attr__2 [forms_1, file_2])
  in (ErlangCons form_5 tail_7)
erlps__eval_file_attr__2 [(ErlangEmptyList), _file_0] =
  ErlangEmptyList
erlps__eval_file_attr__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__eval_file_attr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_form_file__2 :: ErlangFun
erlps__set_form_file__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                       l_0, k_1, v_2]),
                         file_3]
  =
  let
    tup_el_5 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
         [file_3, l_0])
  in (ErlangTuple [(ErlangAtom "attribute"), tup_el_5, k_1, v_2])
erlps__set_form_file__2 [(ErlangTuple [(ErlangAtom "function"),
                                       l_0, n_1, a_2, c_3]),
                         file_4]
  =
  let
    tup_el_6 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
         [file_4, l_0])
  in
    (ErlangTuple [(ErlangAtom "function"), tup_el_6, n_1, a_2, c_3])
erlps__set_form_file__2 [form_0, _file_1] = form_0
erlps__set_form_file__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__set_form_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__set_file__2 :: ErlangFun
erlps__set_file__2 [ts_0, file_1] | (isEList ts_0) =
  (flmap
     (\ lc_4 ->
        case lc_4 of
          t_3 ->
            let lc_ret_5 = (erlps__anno_set_file__2 [t_3, file_1])
            in (ErlangCons lc_ret_5 ErlangEmptyList)
          _ -> ErlangEmptyList)
     ts_0)
erlps__set_file__2 [t_0, file_1] =
  (erlps__anno_set_file__2 [t_0, file_1])
erlps__set_file__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__set_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__anno_set_file__2 :: ErlangFun
erlps__anno_set_file__2 [t_0, file_1] =
  let
    f_7 =
      (ErlangFun 1
         let
           lambda_2 [anno_4] =
             (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
                [file_1, anno_4])
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in
    (BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
       [f_7, t_0])
erlps__anno_set_file__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__anno_set_file__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__form__2 :: ErlangFun
erlps__form__2 [(ErlangTuple [(ErlangAtom "error"), e_0]), st_1]
  =
  (erlps__add_error__2 [e_0, st_1])
erlps__form__2 [(ErlangTuple [(ErlangAtom "warning"), w_0]),
                st_1]
  =
  (erlps__add_warning__2 [w_0, st_1])
erlps__form__2 [(ErlangTuple [(ErlangAtom "attribute"), _l_0,
                              (ErlangAtom "file"),
                              (ErlangTuple [file_1, _line_2])]),
                st_3]
  =
  case st_3 of
    (ErlangTuple [(ErlangAtom "lint"), state_6, module_7,
                  behaviour_8, exports_9, imports_10, compile_11, records_12,
                  locals_13, no_auto_14, defined_15, on_load_16,
                  on_load_line_17, clashes_18, not_deprecated_19,
                  not_removed_20, func_21, warn_format_22, enabled_warnings_23,
                  nowarn_bif_clash_24, errors_25, warnings_26, file_27,
                  recdef_top_28, xqlc_29, called_30, usage_31, specs_32,
                  callbacks_33, optional_callbacks_34, types_35, exp_types_36,
                  in_try_head_37, bvt_38, gexpr_context_39]) ->
      (ErlangTuple
         [(ErlangAtom "lint"), state_6, module_7, behaviour_8, exports_9,
          imports_10, compile_11, records_12, locals_13, no_auto_14,
          defined_15, on_load_16, on_load_line_17, clashes_18,
          not_deprecated_19, not_removed_20, func_21, warn_format_22,
          enabled_warnings_23, nowarn_bif_clash_24, errors_25, warnings_26,
          file_1, recdef_top_28, xqlc_29, called_30, usage_31, specs_32,
          callbacks_33, optional_callbacks_34, types_35, exp_types_36,
          in_try_head_37, bvt_38, gexpr_context_39])
    _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__form__2 [(ErlangTuple [(ErlangAtom "attribute"), _l_0,
                              (ErlangAtom "compile"), _]),
                st_1]
  =
  st_1
erlps__form__2 [form_0,
                st_2@(ErlangTuple [(ErlangAtom "lint"), state_1, _, _, _, _, _,
                                   _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                                   _, _, _, _, _, _, _, _, _, _, _, _, _])]
  =
  case state_1 of
    (ErlangAtom "start") -> (erlps__start_state__2 [form_0, st_2])
    (ErlangAtom "attribute") ->
      (erlps__attribute_state__2 [form_0, st_2])
    (ErlangAtom "function") ->
      (erlps__function_state__2 [form_0, st_2])
    something_else -> (EXC.case_clause something_else)
erlps__form__2 [arg_10, arg_11] = (EXC.function_clause unit)
erlps__form__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__start_state__2 :: ErlangFun
erlps__start_state__2 [form_1@(ErlangTuple [(ErlangAtom "attribute"),
                                            line_0, (ErlangAtom "module"),
                                            (ErlangTuple [_, _])]),
                       st0_2]
  =
  let   
    st1_6 =
      (erlps__add_error__3
         [line_0, (ErlangAtom "pmod_unsupported"), st0_2])
  in let
    arg_8 =
      case st1_6 of
        (ErlangTuple [(ErlangAtom "lint"), state_11, module_12,
                      behaviour_13, exports_14, imports_15, compile_16,
                      records_17, locals_18, no_auto_19, defined_20, on_load_21,
                      on_load_line_22, clashes_23, not_deprecated_24,
                      not_removed_25, func_26, warn_format_27,
                      enabled_warnings_28, nowarn_bif_clash_29, errors_30,
                      warnings_31, file_32, recdef_top_33, xqlc_34, called_35,
                      usage_36, specs_37, callbacks_38, optional_callbacks_39,
                      types_40, exp_types_41, in_try_head_42, bvt_43,
                      gexpr_context_44]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), (ErlangAtom "attribute"), module_12,
              behaviour_13, exports_14, imports_15, compile_16, records_17,
              locals_18, no_auto_19, defined_20, on_load_21, on_load_line_22,
              clashes_23, not_deprecated_24, not_removed_25, func_26,
              warn_format_27, enabled_warnings_28, nowarn_bif_clash_29,
              errors_30, warnings_31, file_32, recdef_top_33, xqlc_34,
              called_35, usage_36, specs_37, callbacks_38,
              optional_callbacks_39, types_40, exp_types_41, in_try_head_42,
              bvt_43, gexpr_context_44])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__attribute_state__2 [form_1, arg_8])
erlps__start_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                     line_0, (ErlangAtom "module"), m_1]),
                       st0_2]
  =
  let   
    st1_39 =
      case st0_2 of
        (ErlangTuple [(ErlangAtom "lint"), state_5, module_6,
                      behaviour_7, exports_8, imports_9, compile_10, records_11,
                      locals_12, no_auto_13, defined_14, on_load_15,
                      on_load_line_16, clashes_17, not_deprecated_18,
                      not_removed_19, func_20, warn_format_21,
                      enabled_warnings_22, nowarn_bif_clash_23, errors_24,
                      warnings_25, file_26, recdef_top_27, xqlc_28, called_29,
                      usage_30, specs_31, callbacks_32, optional_callbacks_33,
                      types_34, exp_types_35, in_try_head_36, bvt_37,
                      gexpr_context_38]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_5, m_1, behaviour_7, exports_8,
              imports_9, compile_10, records_11, locals_12, no_auto_13,
              defined_14, on_load_15, on_load_line_16, clashes_17,
              not_deprecated_18, not_removed_19, func_20, warn_format_21,
              enabled_warnings_22, nowarn_bif_clash_23, errors_24, warnings_25,
              file_26, recdef_top_27, xqlc_28, called_29, usage_30, specs_31,
              callbacks_32, optional_callbacks_33, types_34, exp_types_35,
              in_try_head_36, bvt_37, gexpr_context_38])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    st2_76 =
      case st1_39 of
        (ErlangTuple [(ErlangAtom "lint"), state_42, module_43,
                      behaviour_44, exports_45, imports_46, compile_47,
                      records_48, locals_49, no_auto_50, defined_51, on_load_52,
                      on_load_line_53, clashes_54, not_deprecated_55,
                      not_removed_56, func_57, warn_format_58,
                      enabled_warnings_59, nowarn_bif_clash_60, errors_61,
                      warnings_62, file_63, recdef_top_64, xqlc_65, called_66,
                      usage_67, specs_68, callbacks_69, optional_callbacks_70,
                      types_71, exp_types_72, in_try_head_73, bvt_74,
                      gexpr_context_75]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), (ErlangAtom "attribute"), module_43,
              behaviour_44, exports_45, imports_46, compile_47, records_48,
              locals_49, no_auto_50, defined_51, on_load_52, on_load_line_53,
              clashes_54, not_deprecated_55, not_removed_56, func_57,
              warn_format_58, enabled_warnings_59, nowarn_bif_clash_60,
              errors_61, warnings_62, file_63, recdef_top_64, xqlc_65,
              called_66, usage_67, specs_68, callbacks_69,
              optional_callbacks_70, types_71, exp_types_72, in_try_head_73,
              bvt_74, gexpr_context_75])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__check_module_name__3 [m_1, line_0, st2_76])
erlps__start_state__2 [form_0, st_1] =
  let   
    anno_7 =
      case form_0 of
        (ErlangTuple [(ErlangAtom "eof"), l_3]) ->
          (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1" [l_3])
        _ ->
          (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), form_0])
        something_else -> (EXC.case_clause something_else)
  in let
    st1_11 =
      (erlps__add_error__3
         [anno_7, (ErlangAtom "undefined_module"), st_1])
  in let
    arg_13 =
      case st1_11 of
        (ErlangTuple [(ErlangAtom "lint"), state_16, module_17,
                      behaviour_18, exports_19, imports_20, compile_21,
                      records_22, locals_23, no_auto_24, defined_25, on_load_26,
                      on_load_line_27, clashes_28, not_deprecated_29,
                      not_removed_30, func_31, warn_format_32,
                      enabled_warnings_33, nowarn_bif_clash_34, errors_35,
                      warnings_36, file_37, recdef_top_38, xqlc_39, called_40,
                      usage_41, specs_42, callbacks_43, optional_callbacks_44,
                      types_45, exp_types_46, in_try_head_47, bvt_48,
                      gexpr_context_49]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), (ErlangAtom "attribute"), module_17,
              behaviour_18, exports_19, imports_20, compile_21, records_22,
              locals_23, no_auto_24, defined_25, on_load_26, on_load_line_27,
              clashes_28, not_deprecated_29, not_removed_30, func_31,
              warn_format_32, enabled_warnings_33, nowarn_bif_clash_34,
              errors_35, warnings_36, file_37, recdef_top_38, xqlc_39,
              called_40, usage_41, specs_42, callbacks_43,
              optional_callbacks_44, types_45, exp_types_46, in_try_head_47,
              bvt_48, gexpr_context_49])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__attribute_state__2 [form_0, arg_13])
erlps__start_state__2 [arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__start_state__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__attribute_state__2 :: ErlangFun
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         _l_0, (ErlangAtom "module"), _m_1]),
                           st_2@(ErlangTuple [(ErlangAtom "lint"), _,
                                              (ErlangAtom ""), _, _, _, _, _, _,
                                              _, _, _, _, _, _, _, _, _, _, _,
                                              _, _, _, _, _, _, _, _, _, _, _,
                                              _, _, _, _])]
  =
  st_2
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "module"), _m_1]),
                           st_2]
  =
  (erlps__add_error__3 [l_0, (ErlangAtom "redefine_module"), st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "export"), es_1]),
                           st_2]
  =
  (erlps__export__3 [l_0, es_1, st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "export_type"),
                                         es_1]),
                           st_2]
  =
  (erlps__export_type__3 [l_0, es_1, st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "import"), is_1]),
                           st_2]
  =
  (erlps__import__3 [l_0, is_1, st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "record"),
                                         (ErlangTuple [name_1, fields_2])]),
                           st_3]
  =
  (erlps__record_def__4 [l_0, name_1, fields_2, st_3])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         la_0, (ErlangAtom "behaviour"),
                                         behaviour_1]),
                           st_2]
  =
  let   
    lop_5 =
      case st_2 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 3)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let head_10 = (ErlangTuple [la_0, behaviour_1])
  in let
    record_updt_4 =
      (BIF.erlang__op_append
         [lop_5, (ErlangCons head_10 ErlangEmptyList)])
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_14, module_15,
                    behaviour_16, exports_17, imports_18, compile_19,
                    records_20, locals_21, no_auto_22, defined_23, on_load_24,
                    on_load_line_25, clashes_26, not_deprecated_27,
                    not_removed_28, func_29, warn_format_30,
                    enabled_warnings_31, nowarn_bif_clash_32, errors_33,
                    warnings_34, file_35, recdef_top_36, xqlc_37, called_38,
                    usage_39, specs_40, callbacks_41, optional_callbacks_42,
                    types_43, exp_types_44, in_try_head_45, bvt_46,
                    gexpr_context_47]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_14, module_15, record_updt_4,
            exports_17, imports_18, compile_19, records_20, locals_21,
            no_auto_22, defined_23, on_load_24, on_load_line_25, clashes_26,
            not_deprecated_27, not_removed_28, func_29, warn_format_30,
            enabled_warnings_31, nowarn_bif_clash_32, errors_33, warnings_34,
            file_35, recdef_top_36, xqlc_37, called_38, usage_39, specs_40,
            callbacks_41, optional_callbacks_42, types_43, exp_types_44,
            in_try_head_45, bvt_46, gexpr_context_47])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         la_0, (ErlangAtom "behavior"),
                                         behaviour_1]),
                           st_2]
  =
  let   
    lop_5 =
      case st_2 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 3)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let head_10 = (ErlangTuple [la_0, behaviour_1])
  in let
    record_updt_4 =
      (BIF.erlang__op_append
         [lop_5, (ErlangCons head_10 ErlangEmptyList)])
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_14, module_15,
                    behaviour_16, exports_17, imports_18, compile_19,
                    records_20, locals_21, no_auto_22, defined_23, on_load_24,
                    on_load_line_25, clashes_26, not_deprecated_27,
                    not_removed_28, func_29, warn_format_30,
                    enabled_warnings_31, nowarn_bif_clash_32, errors_33,
                    warnings_34, file_35, recdef_top_36, xqlc_37, called_38,
                    usage_39, specs_40, callbacks_41, optional_callbacks_42,
                    types_43, exp_types_44, in_try_head_45, bvt_46,
                    gexpr_context_47]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_14, module_15, record_updt_4,
            exports_17, imports_18, compile_19, records_20, locals_21,
            no_auto_22, defined_23, on_load_24, on_load_line_25, clashes_26,
            not_deprecated_27, not_removed_28, func_29, warn_format_30,
            enabled_warnings_31, nowarn_bif_clash_32, errors_33, warnings_34,
            file_35, recdef_top_36, xqlc_37, called_38, usage_39, specs_40,
            callbacks_41, optional_callbacks_42, types_43, exp_types_44,
            in_try_head_45, bvt_46, gexpr_context_47])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "type"),
                                         (ErlangTuple [typename_1, typedef_2,
                                                       args_3])]),
                           st_4]
  =
  (erlps__type_def__6
     [(ErlangAtom "type"), l_0, typename_1, typedef_2, args_3, st_4])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "opaque"),
                                         (ErlangTuple [typename_1, typedef_2,
                                                       args_3])]),
                           st_4]
  =
  (erlps__type_def__6
     [(ErlangAtom "opaque"), l_0, typename_1, typedef_2, args_3,
      st_4])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "spec"),
                                         (ErlangTuple [fun_1, types_2])]),
                           st_3]
  =
  (erlps__spec_decl__4 [l_0, fun_1, types_2, st_3])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "callback"),
                                         (ErlangTuple [fun_1, types_2])]),
                           st_3]
  =
  (erlps__callback_decl__4 [l_0, fun_1, types_2, st_3])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "optional_callbacks"),
                                         es_1]),
                           st_2]
  =
  (erlps__optional_callbacks__3 [l_0, es_1, st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         l_0, (ErlangAtom "on_load"), val_1]),
                           st_2]
  =
  (erlps__on_load__3 [l_0, val_1, st_2])
erlps__attribute_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                         _l_0, _other_1, _val_2]),
                           st_3]
  =
  st_3
erlps__attribute_state__2 [form_0, st_1] =
  let
    arg_3 =
      case st_1 of
        (ErlangTuple [(ErlangAtom "lint"), state_6, module_7,
                      behaviour_8, exports_9, imports_10, compile_11,
                      records_12, locals_13, no_auto_14, defined_15, on_load_16,
                      on_load_line_17, clashes_18, not_deprecated_19,
                      not_removed_20, func_21, warn_format_22,
                      enabled_warnings_23, nowarn_bif_clash_24, errors_25,
                      warnings_26, file_27, recdef_top_28, xqlc_29, called_30,
                      usage_31, specs_32, callbacks_33, optional_callbacks_34,
                      types_35, exp_types_36, in_try_head_37, bvt_38,
                      gexpr_context_39]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), (ErlangAtom "function"), module_7,
              behaviour_8, exports_9, imports_10, compile_11, records_12,
              locals_13, no_auto_14, defined_15, on_load_16, on_load_line_17,
              clashes_18, not_deprecated_19, not_removed_20, func_21,
              warn_format_22, enabled_warnings_23, nowarn_bif_clash_24,
              errors_25, warnings_26, file_27, recdef_top_28, xqlc_29,
              called_30, usage_31, specs_32, callbacks_33,
              optional_callbacks_34, types_35, exp_types_36, in_try_head_37,
              bvt_38, gexpr_context_39])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__function_state__2 [form_0, arg_3])
erlps__attribute_state__2 [arg_40, arg_41] =
  (EXC.function_clause unit)
erlps__attribute_state__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function_state__2 :: ErlangFun
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        l_0, (ErlangAtom "record"),
                                        (ErlangTuple [name_1, fields_2])]),
                          st_3]
  =
  (erlps__record_def__4 [l_0, name_1, fields_2, st_3])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        l_0, (ErlangAtom "type"),
                                        (ErlangTuple [typename_1, typedef_2,
                                                      args_3])]),
                          st_4]
  =
  (erlps__type_def__6
     [(ErlangAtom "type"), l_0, typename_1, typedef_2, args_3, st_4])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        l_0, (ErlangAtom "opaque"),
                                        (ErlangTuple [typename_1, typedef_2,
                                                      args_3])]),
                          st_4]
  =
  (erlps__type_def__6
     [(ErlangAtom "opaque"), l_0, typename_1, typedef_2, args_3,
      st_4])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        l_0, (ErlangAtom "spec"),
                                        (ErlangTuple [fun_1, types_2])]),
                          st_3]
  =
  (erlps__spec_decl__4 [l_0, fun_1, types_2, st_3])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        _l_0, (ErlangAtom "dialyzer"), _val_1]),
                          st_2]
  =
  st_2
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "attribute"),
                                        la_0, attr_1, _val_2]),
                          st_3]
  =
  let arg_5 = (ErlangTuple [(ErlangAtom "attribute"), attr_1])
  in (erlps__add_error__3 [la_0, arg_5, st_3])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "function"),
                                        l_0, n_1, a_2, cs_3]),
                          st_4]
  =
  (erlps__function__5 [l_0, n_1, a_2, cs_3, st_4])
erlps__function_state__2 [(ErlangTuple [(ErlangAtom "eof"),
                                        l_0]),
                          st_1]
  =
  (erlps__eof__2 [l_0, st_1])
erlps__function_state__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__function_state__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__eof__2 :: ErlangFun
erlps__eof__2 [_line_0, st0_1] = st0_1
erlps__eof__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__eof__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bif_clashes__2 :: ErlangFun
erlps__bif_clashes__2 [forms_0,
                       st_2@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                          _, _, _, _, _, _, _, _, _, _, _, _,
                                          nowarn_1, _, _, _, _, _, _, _, _, _,
                                          _, _, _, _, _, _])]
  =
  let   
    clashes0_15 =
      (flmap
         (\ lc_8 ->
            case lc_8 of
              (ErlangTuple [(ErlangAtom "function"), _l_4, name_5, arity_6,
                            _cs_7]) ->
                let
                  cond_9 =
                    (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
                       [name_5, arity_6])
                in
                  case cond_9 of
                    (ErlangAtom "true") ->
                      let lc_ret_12 = (ErlangTuple [name_5, arity_6])
                      in (ErlangCons lc_ret_12 ErlangEmptyList)
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         forms_0)
  in let
    arg_16 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1"
         [clashes0_15])
  in let
    clashes_19 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
         [arg_16, nowarn_1])
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_22, module_23,
                    behaviour_24, exports_25, imports_26, compile_27,
                    records_28, locals_29, no_auto_30, defined_31, on_load_32,
                    on_load_line_33, clashes_34, not_deprecated_35,
                    not_removed_36, func_37, warn_format_38,
                    enabled_warnings_39, nowarn_bif_clash_40, errors_41,
                    warnings_42, file_43, recdef_top_44, xqlc_45, called_46,
                    usage_47, specs_48, callbacks_49, optional_callbacks_50,
                    types_51, exp_types_52, in_try_head_53, bvt_54,
                    gexpr_context_55]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_22, module_23, behaviour_24,
            exports_25, imports_26, compile_27, records_28, locals_29,
            no_auto_30, defined_31, on_load_32, on_load_line_33, clashes_19,
            not_deprecated_35, not_removed_36, func_37, warn_format_38,
            enabled_warnings_39, nowarn_bif_clash_40, errors_41, warnings_42,
            file_43, recdef_top_44, xqlc_45, called_46, usage_47, specs_48,
            callbacks_49, optional_callbacks_50, types_51, exp_types_52,
            in_try_head_53, bvt_54, gexpr_context_55])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__bif_clashes__2 [arg_56, arg_57] =
  (EXC.function_clause unit)
erlps__bif_clashes__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__not_deprecated__2 :: ErlangFun
erlps__not_deprecated__2 [forms_0,
                          st0_2@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _,
                                              _, opts_1, _, _, _, _, _, _, _, _,
                                              _, _, _, _, _, _, _, _, _, _, _,
                                              _, _, _, _, _, _, _, _, _])]
  =
  let   
    mfasl_22 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              (ErlangTuple [(ErlangAtom "attribute"), l_4,
                            (ErlangAtom "compile"), args_5]) ->
                let
                  lc_src_7 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons args_5 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_12 ->
                        case lc_12 of
                          (ErlangTuple [(ErlangAtom "nowarn_deprecated_function"),
                                        mfas0_11]) ->
                            let
                              lc_src_13 =
                                (BIF.do_remote_fun_call "Lists"
                                   "erlps__flatten__1"
                                   [(ErlangCons mfas0_11 ErlangEmptyList)])
                            in
                              (flmap
                                 (\ lc_18 ->
                                    case lc_18 of
                                      mfa_17 ->
                                        let
                                          lc_ret_19 =
                                            (ErlangTuple [mfa_17, l_4])
                                        in
                                          (ErlangCons lc_ret_19 ErlangEmptyList)
                                      _ -> ErlangEmptyList)
                                 lc_src_13)
                          _ -> ErlangEmptyList)
                     lc_src_7)
              _ -> ErlangEmptyList)
         forms_0)
  in let
    nowarn_33 =
      (flmap
         (\ lc_25 ->
            case lc_25 of
              (ErlangTuple [(ErlangAtom "nowarn_deprecated_function"),
                            mfas0_24]) ->
                let
                  lc_src_26 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons mfas0_24 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_31 ->
                        case lc_31 of
                          mfa_30 -> (ErlangCons mfa_30 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     lc_src_26)
              _ -> ErlangEmptyList)
         opts_1)
  in let
    ml_45 =
      (flmap
         (\ lc_39 ->
            case lc_39 of
              (ErlangTuple [(ErlangTuple [m_35, _f_36, _a_37]), l_38]) ->
                let cond_40 = (BIF.erlang__is_atom__1 [m_35])
                in
                  case cond_40 of
                    (ErlangAtom "true") ->
                      let lc_ret_42 = (ErlangTuple [m_35, l_38])
                      in (ErlangCons lc_ret_42 ErlangEmptyList)
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         mfasl_22)
  in let
    arg_46 =
      (ErlangFun 2
         let
           lambda_47 [(ErlangTuple [m_50, l_51]), st2_52] =
             (erlps__check_module_name__3 [m_50, l_51, st2_52])
           lambda_47 [arg_48, arg_49] = (EXC.function_clause unit)
           lambda_47 args = (EXC.badarity (ErlangFun 2 lambda_47) args)
         in lambda_47)
  in let
    st1_58 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_46, st0_2, ml_45])
  in let
    record_updt_60 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1"
         [nowarn_33])
  in
    case st1_58 of
      (ErlangTuple [(ErlangAtom "lint"), state_62, module_63,
                    behaviour_64, exports_65, imports_66, compile_67,
                    records_68, locals_69, no_auto_70, defined_71, on_load_72,
                    on_load_line_73, clashes_74, not_deprecated_75,
                    not_removed_76, func_77, warn_format_78,
                    enabled_warnings_79, nowarn_bif_clash_80, errors_81,
                    warnings_82, file_83, recdef_top_84, xqlc_85, called_86,
                    usage_87, specs_88, callbacks_89, optional_callbacks_90,
                    types_91, exp_types_92, in_try_head_93, bvt_94,
                    gexpr_context_95]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_62, module_63, behaviour_64,
            exports_65, imports_66, compile_67, records_68, locals_69,
            no_auto_70, defined_71, on_load_72, on_load_line_73, clashes_74,
            record_updt_60, not_removed_76, func_77, warn_format_78,
            enabled_warnings_79, nowarn_bif_clash_80, errors_81, warnings_82,
            file_83, recdef_top_84, xqlc_85, called_86, usage_87, specs_88,
            callbacks_89, optional_callbacks_90, types_91, exp_types_92,
            in_try_head_93, bvt_94, gexpr_context_95])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__not_deprecated__2 [arg_96, arg_97] =
  (EXC.function_clause unit)
erlps__not_deprecated__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__not_removed__2 :: ErlangFun
erlps__not_removed__2 [forms_0,
                       st0_2@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _,
                                           opts_1, _, _, _, _, _, _, _, _, _, _,
                                           _, _, _, _, _, _, _, _, _, _, _, _,
                                           _, _, _, _, _, _])]
  =
  let   
    mfasl_22 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              (ErlangTuple [(ErlangAtom "attribute"), l_4,
                            (ErlangAtom "compile"), args_5]) ->
                let
                  lc_src_7 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons args_5 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_12 ->
                        case lc_12 of
                          (ErlangTuple [(ErlangAtom "nowarn_removed"),
                                        mfas0_11]) ->
                            let
                              lc_src_13 =
                                (BIF.do_remote_fun_call "Lists"
                                   "erlps__flatten__1"
                                   [(ErlangCons mfas0_11 ErlangEmptyList)])
                            in
                              (flmap
                                 (\ lc_18 ->
                                    case lc_18 of
                                      mfa_17 ->
                                        let
                                          lc_ret_19 =
                                            (ErlangTuple [mfa_17, l_4])
                                        in
                                          (ErlangCons lc_ret_19 ErlangEmptyList)
                                      _ -> ErlangEmptyList)
                                 lc_src_13)
                          _ -> ErlangEmptyList)
                     lc_src_7)
              _ -> ErlangEmptyList)
         forms_0)
  in let
    nowarn_33 =
      (flmap
         (\ lc_25 ->
            case lc_25 of
              (ErlangTuple [(ErlangAtom "nowarn_removed"), mfas0_24]) ->
                let
                  lc_src_26 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons mfas0_24 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_31 ->
                        case lc_31 of
                          mfa_30 -> (ErlangCons mfa_30 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     lc_src_26)
              _ -> ErlangEmptyList)
         opts_1)
  in let
    arg_34 =
      (ErlangFun 2
         let
           lambda_35 [(ErlangTuple [(ErlangTuple [m_38, _f_39, _a_40]),
                                    l_41]),
                      st2_42]
             =
             (erlps__check_module_name__3 [m_38, l_41, st2_42])
           lambda_35 [(ErlangTuple [m_46, l_47]), st2_48] =
             (erlps__check_module_name__3 [m_46, l_47, st2_48])
           lambda_35 [arg_36, arg_37] = (EXC.function_clause unit)
           lambda_35 args = (EXC.badarity (ErlangFun 2 lambda_35) args)
         in lambda_35)
  in let
    st1_54 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_34, st0_2, mfasl_22])
  in let
    record_updt_56 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1"
         [nowarn_33])
  in
    case st1_54 of
      (ErlangTuple [(ErlangAtom "lint"), state_58, module_59,
                    behaviour_60, exports_61, imports_62, compile_63,
                    records_64, locals_65, no_auto_66, defined_67, on_load_68,
                    on_load_line_69, clashes_70, not_deprecated_71,
                    not_removed_72, func_73, warn_format_74,
                    enabled_warnings_75, nowarn_bif_clash_76, errors_77,
                    warnings_78, file_79, recdef_top_80, xqlc_81, called_82,
                    usage_83, specs_84, callbacks_85, optional_callbacks_86,
                    types_87, exp_types_88, in_try_head_89, bvt_90,
                    gexpr_context_91]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_58, module_59, behaviour_60,
            exports_61, imports_62, compile_63, records_64, locals_65,
            no_auto_66, defined_67, on_load_68, on_load_line_69, clashes_70,
            not_deprecated_71, record_updt_56, func_73, warn_format_74,
            enabled_warnings_75, nowarn_bif_clash_76, errors_77, warnings_78,
            file_79, recdef_top_80, xqlc_81, called_82, usage_83, specs_84,
            callbacks_85, optional_callbacks_86, types_87, exp_types_88,
            in_try_head_89, bvt_90, gexpr_context_91])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__not_removed__2 [arg_92, arg_93] =
  (EXC.function_clause unit)
erlps__not_removed__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__disallowed_compile_flags__2 :: ErlangFun
erlps__disallowed_compile_flags__2 [forms_0, st0_1] =
  let   
    errors0_21 =
      (flmap
         (\ lc_4 ->
            case lc_4 of
              (ErlangTuple [(ErlangAtom "attribute"), a_3,
                            (ErlangAtom "compile"),
                            (ErlangAtom "nowarn_bif_clash")]) ->
                let head_6 = (erlps__loc__2 [a_3, st0_1])
                in
                  (flmap
                     (\ lc_11 ->
                        case lc_11 of
                          (ErlangTuple [_, l_10]) ->
                            let   
                              tup_el_13 =
                                case st0_1 of
                                  (ErlangTuple arr_16) | (DM.Just field_15) <-
                                                           ((arr_16 DA.!!
                                                               22)) ->
                                    field_15
                                  _ -> (EXC.badrecord (ErlangAtom "lint"))
                            in let
                              tup_el_17 =
                                (ErlangTuple
                                   [l_10, (ErlangAtom "erl_lint"),
                                    (ErlangAtom "disallowed_nowarn_bif_clash")])
                            in let
                              lc_ret_12 = (ErlangTuple [tup_el_13, tup_el_17])
                            in (ErlangCons lc_ret_12 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     (ErlangCons head_6 ErlangEmptyList))
              _ -> ErlangEmptyList)
         forms_0)
  in let
    errors1_41 =
      (flmap
         (\ lc_24 ->
            case lc_24 of
              (ErlangTuple [(ErlangAtom "attribute"), a_23,
                            (ErlangAtom "compile"),
                            (ErlangTuple [(ErlangAtom "nowarn_bif_clash"),
                                          (ErlangTuple [_, _])])]) ->
                let head_26 = (erlps__loc__2 [a_23, st0_1])
                in
                  (flmap
                     (\ lc_31 ->
                        case lc_31 of
                          (ErlangTuple [_, l_30]) ->
                            let   
                              tup_el_33 =
                                case st0_1 of
                                  (ErlangTuple arr_36) | (DM.Just field_35) <-
                                                           ((arr_36 DA.!!
                                                               22)) ->
                                    field_35
                                  _ -> (EXC.badrecord (ErlangAtom "lint"))
                            in let
                              tup_el_37 =
                                (ErlangTuple
                                   [l_30, (ErlangAtom "erl_lint"),
                                    (ErlangAtom "disallowed_nowarn_bif_clash")])
                            in let
                              lc_ret_32 = (ErlangTuple [tup_el_33, tup_el_37])
                            in (ErlangCons lc_ret_32 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     (ErlangCons head_26 ErlangEmptyList))
              _ -> ErlangEmptyList)
         forms_0)
  in let
    op_arg_42 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "bif_clash"), st0_1])
  in let disabled_45 = (BIF.erlang__not__1 [op_arg_42])
  in let
    errors_73 =
      case (ErlangAtom "true") of
        _ | ((ErlangAtom "true") ==
               (falsifyErrors
                  (\ _ ->
                     case disabled_45 of
                       (ErlangAtom "false") -> (ErlangAtom "false")
                       (ErlangAtom "true") ->
                         (BIF.erlang__op_exactEq [errors0_21, ErlangEmptyList])
                       _ -> (EXC.badarg1 disabled_45)))) ->
          let   
            tup_el_50 =
              case st0_1 of
                (ErlangTuple arr_53) | (DM.Just field_52) <-
                                         ((arr_53 DA.!! 22)) ->
                  field_52
                _ -> (EXC.badrecord (ErlangAtom "lint"))
          in let
            tup_el_54 =
              (ErlangTuple
                 [(ErlangAtom "erl_lint"),
                  (ErlangAtom "disallowed_nowarn_bif_clash")])
          in let head_49 = (ErlangTuple [tup_el_50, tup_el_54])
          in let
            tail_57 =
              case st0_1 of
                (ErlangTuple arr_60) | (DM.Just field_59) <-
                                         ((arr_60 DA.!! 20)) ->
                  field_59
                _ -> (EXC.badrecord (ErlangAtom "lint"))
          in (ErlangCons head_49 tail_57)
        _ | ((ErlangAtom "true") ==
               (falsifyErrors (\ _ -> disabled_45))) ->
          let   
            rop_64 =
              case st0_1 of
                (ErlangTuple arr_67) | (DM.Just field_66) <-
                                         ((arr_67 DA.!! 20)) ->
                  field_66
                _ -> (EXC.badrecord (ErlangAtom "lint"))
          in let rop_62 = (BIF.erlang__op_append [errors1_41, rop_64])
          in (BIF.erlang__op_append [errors0_21, rop_62])
        _ ->
          let
            rop_69 =
              case st0_1 of
                (ErlangTuple arr_72) | (DM.Just field_71) <-
                                         ((arr_72 DA.!! 20)) ->
                  field_71
                _ -> (EXC.badrecord (ErlangAtom "lint"))
          in (BIF.erlang__op_append [errors1_41, rop_69])
        _ -> (EXC.if_clause unit)
  in
    case st0_1 of
      (ErlangTuple [(ErlangAtom "lint"), state_76, module_77,
                    behaviour_78, exports_79, imports_80, compile_81,
                    records_82, locals_83, no_auto_84, defined_85, on_load_86,
                    on_load_line_87, clashes_88, not_deprecated_89,
                    not_removed_90, func_91, warn_format_92,
                    enabled_warnings_93, nowarn_bif_clash_94, errors_95,
                    warnings_96, file_97, recdef_top_98, xqlc_99, called_100,
                    usage_101, specs_102, callbacks_103, optional_callbacks_104,
                    types_105, exp_types_106, in_try_head_107, bvt_108,
                    gexpr_context_109]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_76, module_77, behaviour_78,
            exports_79, imports_80, compile_81, records_82, locals_83,
            no_auto_84, defined_85, on_load_86, on_load_line_87, clashes_88,
            not_deprecated_89, not_removed_90, func_91, warn_format_92,
            enabled_warnings_93, nowarn_bif_clash_94, errors_73, warnings_96,
            file_97, recdef_top_98, xqlc_99, called_100, usage_101,
            specs_102, callbacks_103, optional_callbacks_104, types_105,
            exp_types_106, in_try_head_107, bvt_108, gexpr_context_109])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__disallowed_compile_flags__2 [arg_110, arg_111] =
  (EXC.function_clause unit)
erlps__disallowed_compile_flags__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__post_traversal_check__2 :: ErlangFun
erlps__post_traversal_check__2 [forms_0, st0_1] =
  let    st1_3 = (erlps__check_behaviour__1 [st0_1])
  in let st2_6 = (erlps__check_deprecated__2 [forms_0, st1_3])
  in let st3_9 = (erlps__check_imports__2 [forms_0, st2_6])
  in let st4_12 = (erlps__check_inlines__2 [forms_0, st3_9])
  in let st5_14 = (erlps__check_undefined_functions__1 [st4_12])
  in let
    st6_17 = (erlps__check_unused_functions__2 [forms_0, st5_14])
  in let st7_20 = (erlps__check_bif_clashes__2 [forms_0, st6_17])
  in let st8_22 = (erlps__check_specs_without_function__1 [st7_20])
  in let
    st9_25 =
      (erlps__check_functions_without_spec__2 [forms_0, st8_22])
  in let sta_27 = (erlps__check_undefined_types__1 [st9_25])
  in let stb_30 = (erlps__check_unused_types__2 [forms_0, sta_27])
  in let
    stc_33 = (erlps__check_untyped_records__2 [forms_0, stb_30])
  in let std_35 = (erlps__check_on_load__1 [stc_33])
  in let
    ste_38 = (erlps__check_unused_records__2 [forms_0, std_35])
  in let stf_40 = (erlps__check_local_opaque_types__1 [ste_38])
  in let
    stg_43 = (erlps__check_dialyzer_attribute__2 [forms_0, stf_40])
  in let sth_45 = (erlps__check_callback_information__1 [stg_43])
  in (erlps__check_removed__2 [forms_0, sth_45])
erlps__post_traversal_check__2 [arg_48, arg_49] =
  (EXC.function_clause unit)
erlps__post_traversal_check__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_behaviour__1 :: ErlangFun
erlps__check_behaviour__1 [st0_0] =
  let
    arg_1 =
      case st0_0 of
        (ErlangTuple arr_4) | (DM.Just field_3) <- ((arr_4 DA.!! 3)) ->
          field_3
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (erlps__behaviour_check__2 [arg_1, st0_0])
erlps__check_behaviour__1 [arg_6] = (EXC.function_clause unit)
erlps__check_behaviour__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_check__2 :: ErlangFun
erlps__behaviour_check__2 [bs_0, st0_1] =
  let
    match_expr_7 =
      (erlps__all_behaviour_callbacks__3
         [bs_0, ErlangEmptyList, st0_1])
  in
    case match_expr_7 of
      (ErlangTuple [allbfs0_5, st1_6]) ->
        let   
          st_10 =
            (erlps__behaviour_missing_callbacks__2 [allbfs0_5, st1_6])
        in let exports_12 = (erlps__exports__1 [st0_1])
        in let
          f_29 =
            (ErlangFun 2
               let
                 lambda_13 [bfs_16, obfs_17] =
                   (flmap
                      (\ lc_20 ->
                         case lc_20 of
                           b_19 ->
                             let   
                               op_arg_23 =
                                 (BIF.lists__member__2 [b_19, obfs_17])
                             in let lop_22 = (BIF.erlang__not__1 [op_arg_23])
                             in let
                               cond_21 =
                                 case lop_22 of
                                   (ErlangAtom "true") -> (ErlangAtom "true")
                                   (ErlangAtom "false") ->
                                     (BIF.do_remote_fun_call "Gb.Sets"
                                        "erlps__is_member__2"
                                        [b_19, exports_12])
                                   _ -> (EXC.badarg1 lop_22)
                             in
                               case cond_21 of
                                 (ErlangAtom "true") ->
                                   (ErlangCons b_19 ErlangEmptyList)
                                 _ -> ErlangEmptyList
                           _ -> ErlangEmptyList)
                      bfs_16)
                 lambda_13 [arg_14, arg_15] = (EXC.function_clause unit)
                 lambda_13 args = (EXC.badarity (ErlangFun 2 lambda_13) args)
               in lambda_13)
        in let
          allbfs_41 =
            (flmap
               (\ lc_34 ->
                  case lc_34 of
                    (ErlangTuple [item_31, bfs0_32, obfs0_33]) ->
                      let   
                        tup_el_37 =
                          (BIF.erlang__apply__2
                             [f_29,
                              (ErlangCons bfs0_32
                                 (ErlangCons obfs0_33 ErlangEmptyList))])
                      in let lc_ret_35 = (ErlangTuple [item_31, tup_el_37])
                      in (ErlangCons lc_ret_35 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               allbfs0_5)
        in (erlps__behaviour_conflicting__2 [allbfs_41, st_10])
      _ -> (EXC.badmatch match_expr_7)
erlps__behaviour_check__2 [arg_44, arg_45] =
  (EXC.function_clause unit)
erlps__behaviour_check__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__all_behaviour_callbacks__3 :: ErlangFun
erlps__all_behaviour_callbacks__3 [(ErlangCons (ErlangTuple [line_0,
                                                             b_1]) bs_2),
                                   acc_3, st0_4]
  =
  let
    match_expr_11 =
      (erlps__behaviour_callbacks__3 [line_0, b_1, st0_4])
  in
    case match_expr_11 of
      (ErlangTuple [bfs0_8, obfs0_9, st_10]) ->
        let    tup_el_15 = (ErlangTuple [line_0, b_1])
        in let head_14 = (ErlangTuple [tup_el_15, bfs0_8, obfs0_9])
        in
          (erlps__all_behaviour_callbacks__3
             [bs_2, (ErlangCons head_14 acc_3), st_10])
      _ -> (EXC.badmatch match_expr_11)
erlps__all_behaviour_callbacks__3 [(ErlangEmptyList), acc_0,
                                   st_1]
  =
  let
    tup_el_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0])
  in (ErlangTuple [tup_el_2, st_1])
erlps__all_behaviour_callbacks__3 [arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__all_behaviour_callbacks__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_callbacks__3 :: ErlangFun
erlps__behaviour_callbacks__3 [line_0, b_1, st0_2] =
  (EXC.tryOfCatch
     (\ _ ->
        (BIF.erlang__apply__3
           [b_1, (ErlangAtom "behaviour_info"),
            (ErlangCons (ErlangAtom "callbacks") ErlangEmptyList)]))
     (\ of_8 ->
        case of_8 of
          (ErlangAtom "undefined") ->
            let   
              arg_11 =
                (ErlangTuple
                   [(ErlangAtom "undefined_behaviour_callbacks"), b_1])
            in let st1_15 = (erlps__add_warning__3 [line_0, arg_11, st0_2])
            in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st1_15])
          funcs_19 ->
            let case_20 = (erlps__is_fa_list__1 [funcs_19])
            in
              case case_20 of
                (ErlangAtom "true") ->
                  (EXC.tryOfCatch
                     (\ _ ->
                        (BIF.erlang__apply__3
                           [b_1, (ErlangAtom "behaviour_info"),
                            (ErlangCons (ErlangAtom "optional_callbacks")
                               ErlangEmptyList)]))
                     (\ of_27 ->
                        case of_27 of
                          (ErlangAtom "undefined") ->
                            (ErlangTuple [funcs_19, ErlangEmptyList, st0_2])
                          optfuncs_32 ->
                            let case_33 = (erlps__is_fa_list__1 [optfuncs_32])
                            in
                              case case_33 of
                                (ErlangAtom "true") ->
                                  (ErlangTuple [funcs_19, optfuncs_32, st0_2])
                                (ErlangAtom "false") ->
                                  let   
                                    w_40 =
                                      (ErlangTuple
                                         [(ErlangAtom
                                             "ill_defined_optional_callbacks"),
                                          b_1])
                                  in let
                                    st1_44 =
                                      (erlps__add_warning__3
                                         [line_0, w_40, st0_2])
                                  in
                                    (ErlangTuple
                                       [funcs_19, ErlangEmptyList, st1_44])
                                something_else ->
                                  (EXC.case_clause something_else)
                          something_else -> (EXC.try_clause something_else))
                     (\ ex_28 ->
                        case ex_28 of
                          (ErlangTuple [_, _, _]) ->
                            (ErlangTuple [funcs_19, ErlangEmptyList, st0_2])
                          ex_28 -> (EXC.raise ex_28)))
                (ErlangAtom "false") ->
                  let   
                    arg_52 =
                      (ErlangTuple
                         [(ErlangAtom "ill_defined_behaviour_callbacks"), b_1])
                  in let
                    st1_56 = (erlps__add_warning__3 [line_0, arg_52, st0_2])
                  in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st1_56])
                something_else -> (EXC.case_clause something_else)
          something_else -> (EXC.try_clause something_else))
     (\ ex_9 ->
        case ex_9 of
          (ErlangTuple [_, _, _]) ->
            let   
              arg_61 = (ErlangTuple [(ErlangAtom "undefined_behaviour"), b_1])
            in let st1_65 = (erlps__add_warning__3 [line_0, arg_61, st0_2])
            in let
              st2_69 = (erlps__check_module_name__3 [b_1, line_0, st1_65])
            in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st2_69])
          ex_9 -> (EXC.raise ex_9)))
erlps__behaviour_callbacks__3 [arg_73, arg_74, arg_75] =
  (EXC.function_clause unit)
erlps__behaviour_callbacks__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_missing_callbacks__2 :: ErlangFun
erlps__behaviour_missing_callbacks__2 [(ErlangCons (ErlangTuple [(ErlangTuple [line_0,
                                                                               b_1]),
                                                                 bfs0_2,
                                                                 obfs_3]) t_4),
                                       st0_5]
  =
  let   
    arg_6 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1" [bfs0_2])
  in let
    arg_8 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1" [obfs_3])
  in let
    bfs_10 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
         [arg_6, arg_8])
  in let arg_11 = (erlps__exports__1 [st0_5])
  in let
    exports_13 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [arg_11])
  in let
    missing_16 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
         [bfs_10, exports_13])
  in let
    arg_17 =
      (ErlangFun 2
         let
           lambda_18 [f_21, s0_22] =
             let case_23 = (erlps__is_fa__1 [f_21])
             in
               case case_23 of
                 (ErlangAtom "true") ->
                   let
                     m_28 =
                       (ErlangTuple
                          [(ErlangAtom "undefined_behaviour_func"), f_21, b_1])
                   in (erlps__add_warning__3 [line_0, m_28, s0_22])
                 (ErlangAtom "false") -> s0_22
                 something_else -> (EXC.case_clause something_else)
           lambda_18 [arg_19, arg_20] = (EXC.function_clause unit)
           lambda_18 args = (EXC.badarity (ErlangFun 2 lambda_18) args)
         in lambda_18)
  in let
    st_34 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_17, st0_5, missing_16])
  in (erlps__behaviour_missing_callbacks__2 [t_4, st_34])
erlps__behaviour_missing_callbacks__2 [(ErlangEmptyList), st_0] =
  st_0
erlps__behaviour_missing_callbacks__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__behaviour_missing_callbacks__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_conflicting__2 :: ErlangFun
erlps__behaviour_conflicting__2 [allbfs_0, st_1] =
  let   
    head_4 =
      (ErlangTuple
         [(ErlangAtom "item"),
          (ErlangCons (ErlangAtom "callback") ErlangEmptyList)])
  in let
    r0_10 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__2"
         [allbfs_0, (ErlangCons head_4 ErlangEmptyList)])
  in let
    r1_12 =
      (BIF.do_remote_fun_call "Sofs" "erlps__family_to_relation__1"
         [r0_10])
  in let
    r2_14 =
      (BIF.do_remote_fun_call "Sofs" "erlps__converse__1" [r1_12])
  in let
    r3_16 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation_to_family__1"
         [r2_14])
  in let
    arg_17 =
      (ErlangFun 1
         let
           lambda_18 [s_20] =
             let
               lop_21 =
                 (BIF.do_remote_fun_call "Sofs" "erlps__no_elements__1" [s_20])
             in (BIF.erlang__op_greater [lop_21, (ErlangInt (DBI.fromInt 1))])
           lambda_18 [arg_19] = (EXC.function_clause unit)
           lambda_18 args = (EXC.badarity (ErlangFun 1 lambda_18) args)
         in lambda_18)
  in let
    r4_25 =
      (BIF.do_remote_fun_call "Sofs" "erlps__family_specification__2"
         [arg_17, r3_16])
  in let
    r_27 =
      (BIF.do_remote_fun_call "Sofs" "erlps__to_external__1" [r4_25])
  in (erlps__behaviour_add_conflicts__2 [r_27, st_1])
erlps__behaviour_conflicting__2 [arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__behaviour_conflicting__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_add_conflicts__2 :: ErlangFun
erlps__behaviour_add_conflicts__2 [(ErlangCons (ErlangTuple [cb_0,
                                                             (ErlangCons (ErlangTuple [firstloc_1,
                                                                                       firstb_2]) cs_3)]) t_4),
                                   st0_5]
  =
  let    arg_7 = (erlps__loc__2 [firstloc_1, st0_5])
  in let
    firstl_10 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), arg_7])
  in let
    st_16 =
      (erlps__behaviour_add_conflict__5
         [cs_3, cb_0, firstl_10, firstb_2, st0_5])
  in (erlps__behaviour_add_conflicts__2 [t_4, st_16])
erlps__behaviour_add_conflicts__2 [(ErlangEmptyList), st_0] =
  st_0
erlps__behaviour_add_conflicts__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__behaviour_add_conflicts__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__behaviour_add_conflict__5 :: ErlangFun
erlps__behaviour_add_conflict__5 [(ErlangCons (ErlangTuple [line_0,
                                                            b_1]) cs_2),
                                  cb_3, firstl_4, firstb_5, st0_6]
  =
  let   
    arg_8 =
      (ErlangTuple
         [(ErlangAtom "conflicting_behaviours"), cb_3, b_1, firstl_4,
          firstb_5])
  in let st_15 = (erlps__add_warning__3 [line_0, arg_8, st0_6])
  in
    (erlps__behaviour_add_conflict__5
       [cs_2, cb_3, firstl_4, firstb_5, st_15])
erlps__behaviour_add_conflict__5 [(ErlangEmptyList), _, _, _,
                                  st_0]
  =
  st_0
erlps__behaviour_add_conflict__5 [arg_1, arg_2, arg_3, arg_4,
                                  arg_5]
  =
  (EXC.function_clause unit)
erlps__behaviour_add_conflict__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_deprecated__2 :: ErlangFun
erlps__check_deprecated__2 [forms_0, st0_1] =
  let   
    arg_4 =
      case st0_1 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_2 =
      (BIF.lists__member__2 [(ErlangAtom "export_all"), arg_4])
  in let
    exports_14 =
      case case_2 of
        (ErlangAtom "true") ->
          case st0_1 of
            (ErlangTuple arr_10) | (DM.Just field_9) <-
                                     ((arr_10 DA.!! 10)) ->
              field_9
            _ -> (EXC.badrecord (ErlangAtom "lint"))
        (ErlangAtom "false") ->
          case st0_1 of
            (ErlangTuple arr_13) | (DM.Just field_12) <-
                                     ((arr_13 DA.!! 4)) ->
              field_12
            _ -> (EXC.badrecord (ErlangAtom "lint"))
        something_else -> (EXC.case_clause something_else)
  in let
    arg_15 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1"
         [exports_14])
  in let x_17 = (erlps__ignore_predefined_funcs__1 [arg_15])
  in
    case st0_1 of
      (ErlangTuple [(ErlangAtom "lint"), _, mod_18, _, _, _, _, _, _,
                    _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                    _, _, _, _, _, _]) ->
        let   
          bad_39 =
            (flmap
               (\ lc_23 ->
                  case lc_23 of
                    (ErlangTuple [(ErlangAtom "attribute"), l_21,
                                  (ErlangAtom "deprecated"), depr_22]) ->
                      let
                        lc_src_24 =
                          (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                             [(ErlangCons depr_22 ErlangEmptyList)])
                      in
                        (flmap
                           (\ lc_29 ->
                              case lc_29 of
                                d_28 ->
                                  let
                                    lc_src_30 =
                                      (erlps__depr_cat__3 [d_28, x_17, mod_18])
                                  in
                                    (flmap
                                       (\ lc_35 ->
                                          case lc_35 of
                                            e_34 ->
                                              let
                                                lc_ret_36 =
                                                  (ErlangTuple [e_34, l_21])
                                              in
                                                (ErlangCons lc_ret_36
                                                   ErlangEmptyList)
                                            _ -> ErlangEmptyList)
                                       lc_src_30)
                                _ -> ErlangEmptyList)
                           lc_src_24)
                    _ -> ErlangEmptyList)
               forms_0)
        in let
          arg_40 =
            (ErlangFun 2
               let
                 lambda_41 [(ErlangTuple [e_44, l_45]), st1_46] =
                   (erlps__add_error__3 [l_45, e_44, st1_46])
                 lambda_41 [arg_42, arg_43] = (EXC.function_clause unit)
                 lambda_41 args = (EXC.badarity (ErlangFun 2 lambda_41) args)
               in lambda_41)
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_40, st0_1, bad_39])
      _ -> (EXC.badmatch st0_1)
erlps__check_deprecated__2 [arg_52, arg_53] =
  (EXC.function_clause unit)
erlps__check_deprecated__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__depr_cat__3 :: ErlangFun
erlps__depr_cat__3 [d_3@(ErlangTuple [f_0, a_1, flg_2]), x_4,
                    mod_5]
  =
  let case_6 = (erlps__deprecated_flag__1 [flg_2])
  in
    case case_6 of
      (ErlangAtom "false") ->
        let
          head_8 = (ErlangTuple [(ErlangAtom "invalid_deprecated"), d_3])
        in (ErlangCons head_8 ErlangEmptyList)
      (ErlangAtom "true") -> (erlps__depr_fa__4 [f_0, a_1, x_4, mod_5])
      something_else -> (EXC.case_clause something_else)
erlps__depr_cat__3 [(ErlangTuple [f_0, a_1]), x_2, mod_3] =
  (erlps__depr_fa__4 [f_0, a_1, x_2, mod_3])
erlps__depr_cat__3 [(ErlangAtom "module"), _x_0, _mod_1] =
  ErlangEmptyList
erlps__depr_cat__3 [d_0, _x_1, _mod_2] =
  let
    head_3 = (ErlangTuple [(ErlangAtom "invalid_deprecated"), d_0])
  in (ErlangCons head_3 ErlangEmptyList)
erlps__depr_cat__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__depr_cat__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__depr_fa__4 :: ErlangFun
erlps__depr_fa__4 [(ErlangAtom "_"), (ErlangAtom "_"), _x_0,
                   _mod_1]
  =
  ErlangEmptyList
erlps__depr_fa__4 [f_0, (ErlangAtom "_"), x_1, _mod_2]
  | (isEAtom f_0) =
  let   
    arg_4 =
      (ErlangFun 1
         let
           lambda_5 [(ErlangTuple [f1_7, _])] =
             (BIF.erlang__op_exactEq [f1_7, f_0])
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in let
    case_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__filter__2" [arg_4, x_1])
  in
    case case_3 of
      (ErlangEmptyList) ->
        let    tup_el_13 = (ErlangTuple [f_0, (ErlangAtom "_")])
        in let
          head_11 =
            (ErlangTuple [(ErlangAtom "bad_deprecated"), tup_el_13])
        in (ErlangCons head_11 ErlangEmptyList)
      _ -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__depr_fa__4 [f_0, a_1, x_2, mod_3]
  | (((isEAtom f_0) && (isEInt a_1)) &&
       (weakGeq a_1 (ErlangInt (DBI.fromInt 0)))) =
  let    arg_5 = (ErlangTuple [f_0, a_1])
  in let case_4 = (BIF.lists__member__2 [arg_5, x_2])
  in
    case case_4 of
      (ErlangAtom "true") -> ErlangEmptyList
      (ErlangAtom "false") ->
        let case_9 = (BIF.erlang__is_builtin__3 [mod_3, f_0, a_1])
        in
          case case_9 of
            (ErlangAtom "true") -> ErlangEmptyList
            (ErlangAtom "false") ->
              let    tup_el_15 = (ErlangTuple [f_0, a_1])
              in let
                head_13 =
                  (ErlangTuple [(ErlangAtom "bad_deprecated"), tup_el_15])
              in (ErlangCons head_13 ErlangEmptyList)
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__depr_fa__4 [f_0, a_1, _x_2, _mod_3] =
  let    tup_el_6 = (ErlangTuple [f_0, a_1])
  in let
    head_4 =
      (ErlangTuple [(ErlangAtom "invalid_deprecated"), tup_el_6])
  in (ErlangCons head_4 ErlangEmptyList)
erlps__depr_fa__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__depr_fa__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deprecated_flag__1 :: ErlangFun
erlps__deprecated_flag__1 [(ErlangAtom "next_version")] =
  (ErlangAtom "true")
erlps__deprecated_flag__1 [(ErlangAtom "next_major_release")] =
  (ErlangAtom "true")
erlps__deprecated_flag__1 [(ErlangAtom "eventually")] =
  (ErlangAtom "true")
erlps__deprecated_flag__1 [string_0] =
  (erlps__deprecated_desc__1 [string_0])
erlps__deprecated_flag__1 [arg_2] = (EXC.function_clause unit)
erlps__deprecated_flag__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deprecated_desc__1 :: ErlangFun
erlps__deprecated_desc__1 [(ErlangCons char_0 str_1)]
  | (isEInt char_0) =
  (erlps__deprecated_desc__1 [str_1])
erlps__deprecated_desc__1 [(ErlangEmptyList)] =
  (ErlangAtom "true")
erlps__deprecated_desc__1 [_] = (ErlangAtom "false")
erlps__deprecated_desc__1 [arg_0] = (EXC.function_clause unit)
erlps__deprecated_desc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_removed__2 :: ErlangFun
erlps__check_removed__2 [forms_0, st0_1] =
  let   
    arg_4 =
      case st0_1 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_2 =
      (BIF.lists__member__2 [(ErlangAtom "export_all"), arg_4])
  in let
    exports_14 =
      case case_2 of
        (ErlangAtom "true") ->
          case st0_1 of
            (ErlangTuple arr_10) | (DM.Just field_9) <-
                                     ((arr_10 DA.!! 10)) ->
              field_9
            _ -> (EXC.badrecord (ErlangAtom "lint"))
        (ErlangAtom "false") ->
          case st0_1 of
            (ErlangTuple arr_13) | (DM.Just field_12) <-
                                     ((arr_13 DA.!! 4)) ->
              field_12
            _ -> (EXC.badrecord (ErlangAtom "lint"))
        something_else -> (EXC.case_clause something_else)
  in let
    arg_15 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1"
         [exports_14])
  in let x_17 = (erlps__ignore_predefined_funcs__1 [arg_15])
  in
    case st0_1 of
      (ErlangTuple [(ErlangAtom "lint"), _, mod_18, _, _, _, _, _, _,
                    _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                    _, _, _, _, _, _]) ->
        let   
          bad_39 =
            (flmap
               (\ lc_23 ->
                  case lc_23 of
                    (ErlangTuple [(ErlangAtom "attribute"), l_21,
                                  (ErlangAtom "removed"), removed_22]) ->
                      let
                        lc_src_24 =
                          (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                             [(ErlangCons removed_22 ErlangEmptyList)])
                      in
                        (flmap
                           (\ lc_29 ->
                              case lc_29 of
                                r_28 ->
                                  let
                                    lc_src_30 =
                                      (erlps__removed_cat__3
                                         [r_28, x_17, mod_18])
                                  in
                                    (flmap
                                       (\ lc_35 ->
                                          case lc_35 of
                                            e_34 ->
                                              let
                                                lc_ret_36 =
                                                  (ErlangTuple [e_34, l_21])
                                              in
                                                (ErlangCons lc_ret_36
                                                   ErlangEmptyList)
                                            _ -> ErlangEmptyList)
                                       lc_src_30)
                                _ -> ErlangEmptyList)
                           lc_src_24)
                    _ -> ErlangEmptyList)
               forms_0)
        in let
          arg_40 =
            (ErlangFun 2
               let
                 lambda_41 [(ErlangTuple [e_44, l_45]), st1_46] =
                   (erlps__add_error__3 [l_45, e_44, st1_46])
                 lambda_41 [arg_42, arg_43] = (EXC.function_clause unit)
                 lambda_41 args = (EXC.badarity (ErlangFun 2 lambda_41) args)
               in lambda_41)
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_40, st0_1, bad_39])
      _ -> (EXC.badmatch st0_1)
erlps__check_removed__2 [arg_52, arg_53] =
  (EXC.function_clause unit)
erlps__check_removed__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__removed_cat__3 :: ErlangFun
erlps__removed_cat__3 [r_3@(ErlangTuple [f_0, a_1, desc_2]), x_4,
                       mod_5]
  =
  let case_6 = (erlps__removed_desc__1 [desc_2])
  in
    case case_6 of
      (ErlangAtom "false") ->
        let head_8 = (ErlangTuple [(ErlangAtom "invalid_removed"), r_3])
        in (ErlangCons head_8 ErlangEmptyList)
      (ErlangAtom "true") ->
        (erlps__removed_fa__4 [f_0, a_1, x_4, mod_5])
      something_else -> (EXC.case_clause something_else)
erlps__removed_cat__3 [(ErlangTuple [f_0, a_1]), x_2, mod_3] =
  (erlps__removed_fa__4 [f_0, a_1, x_2, mod_3])
erlps__removed_cat__3 [(ErlangAtom "module"), x_0, mod_1] =
  (erlps__removed_fa__4
     [(ErlangAtom "_"), (ErlangAtom "_"), x_0, mod_1])
erlps__removed_cat__3 [r_0, _x_1, _mod_2] =
  let head_3 = (ErlangTuple [(ErlangAtom "invalid_removed"), r_0])
  in (ErlangCons head_3 ErlangEmptyList)
erlps__removed_cat__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__removed_cat__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__removed_fa__4 :: ErlangFun
erlps__removed_fa__4 [(ErlangAtom "_"), (ErlangAtom "_"), x_0,
                      _mod_1]
  =
  case x_0 of
    (ErlangCons _ _) ->
      let   
        tup_el_5 = (ErlangTuple [(ErlangAtom "_"), (ErlangAtom "_")])
      in let
        head_3 = (ErlangTuple [(ErlangAtom "bad_removed"), tup_el_5])
      in (ErlangCons head_3 ErlangEmptyList)
    (ErlangEmptyList) -> ErlangEmptyList
    something_else -> (EXC.case_clause something_else)
erlps__removed_fa__4 [f_0, (ErlangAtom "_"), x_1, _mod_2]
  | (isEAtom f_0) =
  let   
    arg_4 =
      (ErlangFun 1
         let
           lambda_5 [(ErlangTuple [f1_7, _])] =
             (BIF.erlang__op_exactEq [f1_7, f_0])
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in let
    case_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__filter__2" [arg_4, x_1])
  in
    case case_3 of
      (ErlangCons _ _) ->
        let    tup_el_13 = (ErlangTuple [f_0, (ErlangAtom "_")])
        in let
          head_11 = (ErlangTuple [(ErlangAtom "bad_removed"), tup_el_13])
        in (ErlangCons head_11 ErlangEmptyList)
      _ -> ErlangEmptyList
      something_else -> (EXC.case_clause something_else)
erlps__removed_fa__4 [f_0, a_1, x_2, mod_3]
  | (((isEAtom f_0) && (isEInt a_1)) &&
       (weakGeq a_1 (ErlangInt (DBI.fromInt 0)))) =
  let    arg_5 = (ErlangTuple [f_0, a_1])
  in let case_4 = (BIF.lists__member__2 [arg_5, x_2])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let    tup_el_11 = (ErlangTuple [f_0, a_1])
        in let
          head_9 = (ErlangTuple [(ErlangAtom "bad_removed"), tup_el_11])
        in (ErlangCons head_9 ErlangEmptyList)
      (ErlangAtom "false") ->
        let case_15 = (BIF.erlang__is_builtin__3 [mod_3, f_0, a_1])
        in
          case case_15 of
            (ErlangAtom "true") ->
              let    tup_el_21 = (ErlangTuple [f_0, a_1])
              in let
                head_19 = (ErlangTuple [(ErlangAtom "bad_removed"), tup_el_21])
              in (ErlangCons head_19 ErlangEmptyList)
            (ErlangAtom "false") -> ErlangEmptyList
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__removed_fa__4 [f_0, a_1, _x_2, _mod_3] =
  let    tup_el_6 = (ErlangTuple [f_0, a_1])
  in let
    head_4 = (ErlangTuple [(ErlangAtom "invalid_removed"), tup_el_6])
  in (ErlangCons head_4 ErlangEmptyList)
erlps__removed_fa__4 [arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__removed_fa__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__removed_desc__1 :: ErlangFun
erlps__removed_desc__1 [(ErlangCons char_0 str_1)]
  | (isEInt char_0) =
  (erlps__removed_desc__1 [str_1])
erlps__removed_desc__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__removed_desc__1 [_] = (ErlangAtom "false")
erlps__removed_desc__1 [arg_0] = (EXC.function_clause unit)
erlps__removed_desc__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ignore_predefined_funcs__1 :: ErlangFun
erlps__ignore_predefined_funcs__1 [(ErlangCons (ErlangTuple [(ErlangAtom "behaviour_info"),
                                                             (ErlangInt num_0)]) fs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (erlps__ignore_predefined_funcs__1 [fs_1])
erlps__ignore_predefined_funcs__1 [(ErlangCons (ErlangTuple [(ErlangAtom "module_info"),
                                                             (ErlangInt num_0)]) fs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (erlps__ignore_predefined_funcs__1 [fs_1])
erlps__ignore_predefined_funcs__1 [(ErlangCons (ErlangTuple [(ErlangAtom "module_info"),
                                                             (ErlangInt num_0)]) fs_1)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (erlps__ignore_predefined_funcs__1 [fs_1])
erlps__ignore_predefined_funcs__1 [(ErlangCons other_0 fs_1)] =
  let tail_3 = (erlps__ignore_predefined_funcs__1 [fs_1])
  in (ErlangCons other_0 tail_3)
erlps__ignore_predefined_funcs__1 [(ErlangEmptyList)] =
  ErlangEmptyList
erlps__ignore_predefined_funcs__1 [arg_0] =
  (EXC.function_clause unit)
erlps__ignore_predefined_funcs__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_imports__2 :: ErlangFun
erlps__check_imports__2 [forms_0, st0_1] =
  let
    case_2 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "unused_import"), st0_1])
  in
    case case_2 of
      (ErlangAtom "false") -> st0_1
      (ErlangAtom "true") ->
        let   
          usage_8 =
            case st0_1 of
              (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 26)) ->
                field_6
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          arg_9 =
            case st0_1 of
              (ErlangTuple arr_12) | (DM.Just field_11) <-
                                       ((arr_12 DA.!! 5)) ->
                field_11
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          arg_13 =
            case usage_8 of
              (ErlangTuple arr_16) | (DM.Just field_15) <-
                                       ((arr_16 DA.!! 2)) ->
                field_15
              _ -> (EXC.badrecord (ErlangAtom "usage"))
        in let
          unused_17 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
               [arg_9, arg_13])
        in let
          imports_32 =
            (flmap
               (\ lc_22 ->
                  case lc_22 of
                    (ErlangTuple [(ErlangAtom "attribute"), l_19,
                                  (ErlangAtom "import"),
                                  (ErlangTuple [mod_20, fs_21])]) ->
                      let
                        lc_src_23 =
                          (BIF.do_remote_fun_call "Lists" "erlps__usort__1"
                             [fs_21])
                      in
                        (flmap
                           (\ lc_26 ->
                              case lc_26 of
                                fa_25 ->
                                  let   
                                    tup_el_28 = (ErlangTuple [fa_25, mod_20])
                                  in let
                                    lc_ret_27 = (ErlangTuple [tup_el_28, l_19])
                                  in (ErlangCons lc_ret_27 ErlangEmptyList)
                                _ -> ErlangEmptyList)
                           lc_src_23)
                    _ -> ErlangEmptyList)
               forms_0)
        in let
          bad_46 =
            (flmap
               (\ lc_35 ->
                  case lc_35 of
                    fm_34 ->
                      (flmap
                         (\ lc_39 ->
                            case lc_39 of
                              (ErlangTuple [fm2_37, l_38]) ->
                                let
                                  cond_40 =
                                    (BIF.erlang__op_exactEq [fm_34, fm2_37])
                                in
                                  case cond_40 of
                                    (ErlangAtom "true") ->
                                      let
                                        lc_ret_43 = (ErlangTuple [fm_34, l_38])
                                      in (ErlangCons lc_ret_43 ErlangEmptyList)
                                    _ -> ErlangEmptyList
                              _ -> ErlangEmptyList)
                         imports_32)
                    _ -> ErlangEmptyList)
               unused_17)
        in
          (erlps__func_line_warning__3
             [(ErlangAtom "unused_import"), bad_46, st0_1])
      something_else -> (EXC.case_clause something_else)
erlps__check_imports__2 [arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__check_imports__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_inlines__2 :: ErlangFun
erlps__check_inlines__2 [forms_0, st0_1] =
  (erlps__check_option_functions__4
     [forms_0, (ErlangAtom "inline"), (ErlangAtom "bad_inline"),
      st0_1])
erlps__check_inlines__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__check_inlines__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_unused_functions__2 :: ErlangFun
erlps__check_unused_functions__2 [forms_0, st0_1] =
  let   
    st1_6 =
      (erlps__check_option_functions__4
         [forms_0, (ErlangAtom "nowarn_unused_function"),
          (ErlangAtom "bad_nowarn_unused_function"), st0_1])
  in let
    opts_10 =
      case st1_6 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 6)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    lop_12 =
      (BIF.lists__member__2 [(ErlangAtom "export_all"), opts_10])
  in let
    case_11 =
      case lop_12 of
        (ErlangAtom "true") -> (ErlangAtom "true")
        (ErlangAtom "false") ->
          let
            op_arg_15 =
              (erlps__is_warn_enabled__2
                 [(ErlangAtom "unused_function"), st1_6])
          in (BIF.erlang__not__1 [op_arg_15])
        _ -> (EXC.badarg1 lop_12)
  in
    case case_11 of
      (ErlangAtom "true") -> st1_6
      (ErlangAtom "false") ->
        let   
          nowarn_20 =
            (erlps__nowarn_function__2
               [(ErlangAtom "nowarn_unused_function"), opts_10])
        in let
          usage_24 =
            case st1_6 of
              (ErlangTuple arr_23) | (DM.Just field_22) <-
                                       ((arr_23 DA.!! 26)) ->
                field_22
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_25 = (erlps__initially_reached__1 [st1_6])
        in let
          arg_27 =
            case usage_24 of
              (ErlangTuple arr_30) | (DM.Just field_29) <-
                                       ((arr_30 DA.!! 1)) ->
                field_29
              _ -> (EXC.badrecord (ErlangAtom "usage"))
        in let used_31 = (erlps__reached_functions__2 [arg_25, arg_27])
        in let
          usedornowarn_34 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__union__2"
               [used_31, nowarn_20])
        in let
          arg_36 =
            case st1_6 of
              (ErlangTuple arr_39) | (DM.Just field_38) <-
                                       ((arr_39 DA.!! 10)) ->
                field_38
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          arg_35 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [arg_36])
        in let
          unused_41 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
               [arg_35, usedornowarn_34])
        in let
          functions_52 =
            (flmap
               (\ lc_46 ->
                  case lc_46 of
                    (ErlangTuple [(ErlangAtom "function"), l_43, n_44, a_45,
                                  _]) ->
                      let    tup_el_48 = (ErlangTuple [n_44, a_45])
                      in let lc_ret_47 = (ErlangTuple [tup_el_48, l_43])
                      in (ErlangCons lc_ret_47 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               forms_0)
        in let
          bad_66 =
            (flmap
               (\ lc_55 ->
                  case lc_55 of
                    fa_54 ->
                      (flmap
                         (\ lc_59 ->
                            case lc_59 of
                              (ErlangTuple [fa2_57, l_58]) ->
                                let
                                  cond_60 =
                                    (BIF.erlang__op_exactEq [fa_54, fa2_57])
                                in
                                  case cond_60 of
                                    (ErlangAtom "true") ->
                                      let
                                        lc_ret_63 = (ErlangTuple [fa_54, l_58])
                                      in (ErlangCons lc_ret_63 ErlangEmptyList)
                                    _ -> ErlangEmptyList
                              _ -> ErlangEmptyList)
                         functions_52)
                    _ -> ErlangEmptyList)
               unused_41)
        in
          (erlps__func_line_warning__3
             [(ErlangAtom "unused_function"), bad_66, st1_6])
      something_else -> (EXC.case_clause something_else)
erlps__check_unused_functions__2 [arg_70, arg_71] =
  (EXC.function_clause unit)
erlps__check_unused_functions__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__initially_reached__1 :: ErlangFun
erlps__initially_reached__1 [(ErlangTuple [(ErlangAtom "lint"),
                                           _, _, _, exp_0, _, _, _, _, _, _,
                                           onload_1, _, _, _, _, _, _, _, _, _,
                                           _, _, _, _, _, _, _, _, _, _, _, _,
                                           _, _])]
  =
  let
    rop_3 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [exp_0])
  in (BIF.erlang__op_append [onload_1, rop_3])
erlps__initially_reached__1 [arg_5] = (EXC.function_clause unit)
erlps__initially_reached__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reached_functions__2 :: ErlangFun
erlps__reached_functions__2 [root_0, ref_1] =
  let
    arg_5 = (BIF.do_remote_fun_call "Gb.Sets" "erlps__empty__0" [])
  in
    (erlps__reached_functions__4
       [root_0, ErlangEmptyList, ref_1, arg_5])
erlps__reached_functions__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__reached_functions__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reached_functions__4 :: ErlangFun
erlps__reached_functions__4 [(ErlangCons r_0 rs_1), more0_2,
                             ref_3, reached0_4]
  =
  let
    case_5 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
         [r_0, reached0_4])
  in
    case case_5 of
      (ErlangAtom "true") ->
        (erlps__reached_functions__4 [rs_1, more0_2, ref_3, reached0_4])
      (ErlangAtom "false") ->
        let   
          reached_14 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__add_element__2"
               [r_0, reached0_4])
        in let case_15 = (BIF.maps__find__2 [r_0, ref_3])
        in
          case case_15 of
            (ErlangTuple [(ErlangAtom "ok"), more_18]) ->
              (erlps__reached_functions__4
                 [rs_1, (ErlangCons more_18 more0_2), ref_3, reached_14])
            (ErlangAtom "error") ->
              (erlps__reached_functions__4 [rs_1, more0_2, ref_3, reached_14])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__reached_functions__4 [(ErlangEmptyList),
                             more_0@(ErlangCons _ _), ref_1, reached_2]
  =
  let
    arg_3 =
      (BIF.do_remote_fun_call "Lists" "erlps__append__1" [more_0])
  in
    (erlps__reached_functions__4
       [arg_3, ErlangEmptyList, ref_1, reached_2])
erlps__reached_functions__4 [(ErlangEmptyList),
                             (ErlangEmptyList), _ref_0, reached_1]
  =
  (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1"
     [reached_1])
erlps__reached_functions__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__reached_functions__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_undefined_functions__1 :: ErlangFun
erlps__check_undefined_functions__1 [st0_2@(ErlangTuple [(ErlangAtom "lint"),
                                                         _, _, _, _, _, _, _, _,
                                                         _, def0_0, _, _, _, _,
                                                         _, _, _, _, _, _, _, _,
                                                         _, _, called0_1, _, _,
                                                         _, _, _, _, _, _, _])]
  =
  let   
    head_5 =
      (ErlangTuple [(ErlangAtom "func"), (ErlangAtom "location")])
  in let
    called_9 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__2"
         [called0_1, (ErlangCons head_5 ErlangEmptyList)])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [def0_0])
  in let
    def_15 =
      (BIF.do_remote_fun_call "Sofs" "erlps__from_external__2"
         [arg_10, (ErlangCons (ErlangAtom "func") ErlangEmptyList)])
  in let
    arg_16 =
      (BIF.do_remote_fun_call "Sofs" "erlps__drestriction__2"
         [called_9, def_15])
  in let
    undef_19 =
      (BIF.do_remote_fun_call "Sofs" "erlps__to_external__1" [arg_16])
  in let
    arg_20 =
      (ErlangFun 2
         let
           lambda_21 [(ErlangTuple [na_24, l_25]), st_26] =
             let
               arg_28 = (ErlangTuple [(ErlangAtom "undefined_function"), na_24])
             in (erlps__add_error__3 [l_25, arg_28, st_26])
           lambda_21 [arg_22, arg_23] = (EXC.function_clause unit)
           lambda_21 args = (EXC.badarity (ErlangFun 2 lambda_21) args)
         in lambda_21)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_20, st0_2, undef_19])
erlps__check_undefined_functions__1 [arg_34] =
  (EXC.function_clause unit)
erlps__check_undefined_functions__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_undefined_types__1 :: ErlangFun
erlps__check_undefined_types__1 [st0_2@(ErlangTuple [(ErlangAtom "lint"),
                                                     _, _, _, _, _, _, _, _, _,
                                                     _, _, _, _, _, _, _, _, _,
                                                     _, _, _, _, _, _, _,
                                                     usage_0, _, _, _, def_1, _,
                                                     _, _, _])]
  =
  let   
    used_6 =
      case usage_0 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 4)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in let utas_8 = (BIF.maps__keys__1 [used_6])
  in let
    undef_24 =
      (flmap
         (\ lc_11 ->
            case lc_11 of
              ta_10 ->
                let    op_arg_13 = (BIF.erlang__is_map_key__2 [ta_10, def_1])
                in let cond_12 = (BIF.erlang__not__1 [op_arg_13])
                in
                  case cond_12 of
                    (ErlangAtom "true") ->
                      let    op_arg_17 = (erlps__is_default_type__1 [ta_10])
                      in let cond_16 = (BIF.erlang__not__1 [op_arg_17])
                      in
                        case cond_16 of
                          (ErlangAtom "true") ->
                            let   
                              tup_el_21 =
                                (BIF.erlang__map_get__2 [ta_10, used_6])
                            in let lc_ret_19 = (ErlangTuple [ta_10, tup_el_21])
                            in (ErlangCons lc_ret_19 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         utas_8)
  in let
    arg_25 =
      (ErlangFun 2
         let
           lambda_26 [(ErlangTuple [ta_29, l_30]), st_31] =
             let arg_33 = (ErlangTuple [(ErlangAtom "undefined_type"), ta_29])
             in (erlps__add_error__3 [l_30, arg_33, st_31])
           lambda_26 [arg_27, arg_28] = (EXC.function_clause unit)
           lambda_26 args = (EXC.badarity (ErlangFun 2 lambda_26) args)
         in lambda_26)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_25, st0_2, undef_24])
erlps__check_undefined_types__1 [arg_39] =
  (EXC.function_clause unit)
erlps__check_undefined_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_bif_clashes__2 :: ErlangFun
erlps__check_bif_clashes__2 [forms_0, st0_1] =
  (erlps__check_option_functions__4
     [forms_0, (ErlangAtom "nowarn_bif_clash"),
      (ErlangAtom "bad_nowarn_bif_clash"), st0_1])
erlps__check_bif_clashes__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__check_bif_clashes__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_option_functions__4 :: ErlangFun
erlps__check_option_functions__4 [forms_0, tag0_1, type_2, st0_3]
  =
  let   
    fasl_27 =
      (flmap
         (\ lc_7 ->
            case lc_7 of
              (ErlangTuple [(ErlangAtom "attribute"), l_5,
                            (ErlangAtom "compile"), args_6]) ->
                let
                  lc_src_8 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons args_6 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_14 ->
                        case lc_14 of
                          (ErlangTuple [tag_12, fas0_13]) ->
                            let
                              cond_15 =
                                (BIF.erlang__op_exactEq [tag0_1, tag_12])
                            in
                              case cond_15 of
                                (ErlangAtom "true") ->
                                  let
                                    lc_src_18 =
                                      (BIF.do_remote_fun_call "Lists"
                                         "erlps__flatten__1"
                                         [(ErlangCons fas0_13 ErlangEmptyList)])
                                  in
                                    (flmap
                                       (\ lc_23 ->
                                          case lc_23 of
                                            fa_22 ->
                                              let
                                                lc_ret_24 =
                                                  (ErlangTuple [fa_22, l_5])
                                              in
                                                (ErlangCons lc_ret_24
                                                   ErlangEmptyList)
                                            _ -> ErlangEmptyList)
                                       lc_src_18)
                                _ -> ErlangEmptyList
                          _ -> ErlangEmptyList)
                     lc_src_8)
              _ -> ErlangEmptyList)
         forms_0)
  in let
    arg_30 =
      case st0_3 of
        (ErlangTuple arr_33) | (DM.Just field_32) <-
                                 ((arr_33 DA.!! 10)) ->
          field_32
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    lop_29 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [arg_30])
  in let rop_34 = (erlps__pseudolocals__0 [])
  in let lop_28 = (BIF.erlang__op_unAppend [lop_29, rop_34])
  in let
    arg_37 =
      case st0_3 of
        (ErlangTuple arr_40) | (DM.Just field_39) <-
                                 ((arr_40 DA.!! 5)) ->
          field_39
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    lc_src_36 =
      (BIF.do_remote_fun_call "Orddict" "erlps__to_list__1" [arg_37])
  in let
    rop_35 =
      (flmap
         (\ lc_43 ->
            case lc_43 of
              (ErlangTuple [(ErlangTuple [f_41, a_42]), _]) ->
                let lc_ret_44 = (ErlangTuple [f_41, a_42])
                in (ErlangCons lc_ret_44 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_36)
  in let deffunctions_47 = (BIF.erlang__op_append [lop_28, rop_35])
  in let
    bad_59 =
      (flmap
         (\ lc_51 ->
            case lc_51 of
              (ErlangTuple [fa_49, l_50]) ->
                let   
                  op_arg_53 = (BIF.lists__member__2 [fa_49, deffunctions_47])
                in let cond_52 = (BIF.erlang__not__1 [op_arg_53])
                in
                  case cond_52 of
                    (ErlangAtom "true") ->
                      let lc_ret_56 = (ErlangTuple [fa_49, l_50])
                      in (ErlangCons lc_ret_56 ErlangEmptyList)
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         fasl_27)
  in (erlps__func_line_error__3 [type_2, bad_59, st0_3])
erlps__check_option_functions__4 [arg_63, arg_64, arg_65, arg_66]
  =
  (EXC.function_clause unit)
erlps__check_option_functions__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nowarn_function__2 :: ErlangFun
erlps__nowarn_function__2 [tag_0, opts_1] =
  let
    arg_2 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              (ErlangTuple [tag1_4, fas_5]) ->
                let cond_7 = (BIF.erlang__op_exactEq [tag1_4, tag_0])
                in
                  case cond_7 of
                    (ErlangAtom "true") ->
                      let
                        lc_src_10 =
                          (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                             [(ErlangCons fas_5 ErlangEmptyList)])
                      in
                        (flmap
                           (\ lc_15 ->
                              case lc_15 of
                                fa_14 -> (ErlangCons fa_14 ErlangEmptyList)
                                _ -> ErlangEmptyList)
                           lc_src_10)
                    _ -> ErlangEmptyList
              _ -> ErlangEmptyList)
         opts_1)
  in
    (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1" [arg_2])
erlps__nowarn_function__2 [arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__nowarn_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func_line_warning__3 :: ErlangFun
erlps__func_line_warning__3 [type_0, fs_1, st_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [(ErlangTuple [f_7, line_8]), st0_9] =
             let arg_11 = (ErlangTuple [type_0, f_7])
             in (erlps__add_warning__3 [line_8, arg_11, st0_9])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, st_2, fs_1])
erlps__func_line_warning__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__func_line_warning__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__func_line_error__3 :: ErlangFun
erlps__func_line_error__3 [type_0, fs_1, st_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [(ErlangTuple [f_7, line_8]), st0_9] =
             let arg_11 = (ErlangTuple [type_0, f_7])
             in (erlps__add_error__3 [line_8, arg_11, st0_9])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, st_2, fs_1])
erlps__func_line_error__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__func_line_error__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_untyped_records__2 :: ErlangFun
erlps__check_untyped_records__2 [forms_0, st0_1] =
  let
    case_2 =
      (erlps__is_warn_enabled__2
         [(ErlangAtom "untyped_record"), st0_1])
  in
    case case_2 of
      (ErlangAtom "true") ->
        let   
          arg_5 =
            case st0_1 of
              (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 7)) ->
                field_7
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let recnames_9 = (BIF.maps__keys__1 [arg_5])
        in let
          trecnames_20 =
            (flmap
               (\ lc_13 ->
                  case lc_13 of
                    (ErlangTuple [(ErlangAtom "attribute"), _,
                                  (ErlangAtom "record"),
                                  (ErlangTuple [name_11, fields_12])]) ->
                      let   
                        arg_15 =
                          (ErlangFun 1
                             let
                               lambda_16 [(ErlangTuple [(ErlangAtom "typed_record_field"),
                                                        _, _])]
                                 =
                                 (ErlangAtom "true")
                               lambda_16 [_] = (ErlangAtom "false")
                               lambda_16 [arg_17] = (EXC.function_clause unit)
                               lambda_16 args =
                                 (EXC.badarity (ErlangFun 1 lambda_16) args)
                             in lambda_16)
                      in let
                        cond_14 =
                          (BIF.do_remote_fun_call "Lists" "erlps__all__2"
                             [arg_15, fields_12])
                      in
                        case cond_14 of
                          (ErlangAtom "true") ->
                            (ErlangCons name_11 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList)
               forms_0)
        in let
          arg_21 =
            (ErlangFun 2
               let
                 lambda_22 [n_25, st_26] =
                   let   
                     arg_28 =
                       case st0_1 of
                         (ErlangTuple arr_31) | (DM.Just field_30) <-
                                                  ((arr_31 DA.!! 7)) ->
                           field_30
                         _ -> (EXC.badrecord (ErlangAtom "lint"))
                   in let
                     match_expr_34 = (BIF.erlang__map_get__2 [n_25, arg_28])
                   in
                     case match_expr_34 of
                       (ErlangTuple [l_32, fields_33]) ->
                         case fields_33 of
                           (ErlangEmptyList) -> st_26
                           (ErlangCons _ _) ->
                             let
                               arg_37 =
                                 (ErlangTuple
                                    [(ErlangAtom "untyped_record"), n_25])
                             in (erlps__add_warning__3 [l_32, arg_37, st_26])
                           something_else -> (EXC.case_clause something_else)
                       _ -> (EXC.badmatch match_expr_34)
                 lambda_22 [arg_23, arg_24] = (EXC.function_clause unit)
                 lambda_22 args = (EXC.badarity (ErlangFun 2 lambda_22) args)
               in lambda_22)
        in let
          arg_43 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1"
               [recnames_9])
        in let
          arg_45 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1"
               [trecnames_20])
        in let
          arg_42 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__subtract__2"
               [arg_43, arg_45])
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_21, st0_1, arg_42])
      (ErlangAtom "false") -> st0_1
      something_else -> (EXC.case_clause something_else)
erlps__check_untyped_records__2 [arg_47, arg_48] =
  (EXC.function_clause unit)
erlps__check_untyped_records__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_unused_records__2 :: ErlangFun
erlps__check_unused_records__2 [forms_0, st0_1] =
  let   
    attrfiles_8 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              (ErlangTuple [(ErlangAtom "attribute"), _l_3,
                            (ErlangAtom "file"),
                            (ErlangTuple [file_4, _line_5])]) ->
                (ErlangCons file_4 ErlangEmptyList)
              _ -> ErlangEmptyList)
         forms_0)
  in let
    tup_el_10 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "unused_record"), st0_1])
  in let case_9 = (ErlangTuple [tup_el_10, attrfiles_8])
  in
    case case_9 of
      (ErlangTuple [(ErlangAtom "true"),
                    (ErlangCons firstfile_14 _)]) ->
        let   
          usage_18 =
            case st0_1 of
              (ErlangTuple arr_17) | (DM.Just field_16) <-
                                       ((arr_17 DA.!! 26)) ->
                field_16
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          usedrecords_22 =
            case usage_18 of
              (ErlangTuple arr_21) | (DM.Just field_20) <-
                                       ((arr_21 DA.!! 3)) ->
                field_20
              _ -> (EXC.badrecord (ErlangAtom "usage"))
        in let
          arg_23 =
            (ErlangFun 2
               let
                 lambda_24 [used_27, recs_28] =
                   (BIF.maps__remove__2 [used_27, recs_28])
                 lambda_24 [arg_25, arg_26] = (EXC.function_clause unit)
                 lambda_24 args = (EXC.badarity (ErlangFun 2 lambda_24) args)
               in lambda_24)
        in let
          arg_31 =
            case st0_1 of
              (ErlangTuple arr_34) | (DM.Just field_33) <-
                                       ((arr_34 DA.!! 7)) ->
                field_33
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          urecs_36 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__fold__3"
               [arg_23, arg_31, usedrecords_22])
        in let lc_src_37 = (BIF.maps__to_list__1 [urecs_36])
        in let
          unused_53 =
            (flmap
               (\ lc_42 ->
                  case lc_42 of
                    (ErlangTuple [name_39,
                                  (ErlangTuple [fileline_40, _fields_41])]) ->
                      let    arg_46 = (erlps__loc__2 [fileline_40, st0_1])
                      in let
                        lop_44 =
                          (BIF.erlang__element__2
                             [(ErlangInt (DBI.fromInt 1)), arg_46])
                      in let
                        cond_43 =
                          (BIF.erlang__op_exactEq [lop_44, firstfile_14])
                      in
                        case cond_43 of
                          (ErlangAtom "true") ->
                            let lc_ret_50 = (ErlangTuple [name_39, fileline_40])
                            in (ErlangCons lc_ret_50 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList)
               lc_src_37)
        in let
          arg_54 =
            (ErlangFun 2
               let
                 lambda_55 [(ErlangTuple [n_58, l_59]), st_60] =
                   let
                     arg_62 = (ErlangTuple [(ErlangAtom "unused_record"), n_58])
                   in (erlps__add_warning__3 [l_59, arg_62, st_60])
                 lambda_55 [arg_56, arg_57] = (EXC.function_clause unit)
                 lambda_55 args = (EXC.badarity (ErlangFun 2 lambda_55) args)
               in lambda_55)
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_54, st0_1, unused_53])
      _ -> st0_1
      something_else -> (EXC.case_clause something_else)
erlps__check_unused_records__2 [arg_68, arg_69] =
  (EXC.function_clause unit)
erlps__check_unused_records__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_callback_information__1 :: ErlangFun
erlps__check_callback_information__1 [st0_3@(ErlangTuple [(ErlangAtom "lint"),
                                                          _, _, _, _, _, _, _,
                                                          _, _, defined_0, _, _,
                                                          _, _, _, _, _, _, _,
                                                          _, _, _, _, _, _, _,
                                                          _, callbacks_1,
                                                          optionalcbs_2, _, _,
                                                          _, _, _])]
  =
  let   
    optfun_19 =
      (ErlangFun 3
         let
           lambda_4 [mfa_8, line_9, st_10] =
             let case_11 = (BIF.erlang__is_map_key__2 [mfa_8, callbacks_1])
             in
               case case_11 of
                 (ErlangAtom "true") -> st_10
                 (ErlangAtom "false") ->
                   let
                     arg_15 =
                       (ErlangTuple [(ErlangAtom "undefined_callback"), mfa_8])
                   in (erlps__add_error__3 [line_9, arg_15, st_10])
                 something_else -> (EXC.case_clause something_else)
           lambda_4 [arg_5, arg_6, arg_7] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 3 lambda_4) args)
         in lambda_4)
  in let
    st1_23 =
      (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
         [optfun_19, st0_3, optionalcbs_2])
  in let
    arg_25 =
      (ErlangTuple
         [(ErlangAtom "behaviour_info"), (ErlangInt (DBI.fromInt 1))])
  in let
    case_24 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_member__2"
         [arg_25, defined_0])
  in
    case case_24 of
      (ErlangAtom "false") -> st1_23
      (ErlangAtom "true") ->
        let case_29 = (BIF.erlang__map_size__1 [callbacks_1])
        in
          case case_29 of
            (ErlangInt num_31) | ((ErlangInt num_31) ==
                                    (ErlangInt (DBI.fromInt 0))) ->
              st1_23
            _ ->
              let
                foldfun_44 =
                  (ErlangFun 3
                     let
                       lambda_32 [fa_36, line_37, st_38] =
                         let
                           arg_40 =
                             (ErlangTuple
                                [(ErlangAtom "behaviour_info"), fa_36])
                         in (erlps__add_error__3 [line_37, arg_40, st_38])
                       lambda_32 [arg_33, arg_34, arg_35] =
                         (EXC.function_clause unit)
                       lambda_32 args =
                         (EXC.badarity (ErlangFun 3 lambda_32) args)
                     in lambda_32)
              in
                (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
                   [foldfun_44, st1_23, callbacks_1])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__check_callback_information__1 [arg_48] =
  (EXC.function_clause unit)
erlps__check_callback_information__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__export__3 :: ErlangFun
erlps__export__3 [line_0, es_1,
                  st0_4@(ErlangTuple [(ErlangAtom "lint"), _, _, _, es0_2, _, _,
                                      _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                                      _, _, _, _, called_3, _, _, _, _, _, _, _,
                                      _, _])]
  =
  let   
    arg_5 =
      (ErlangFun 2
         let
           lambda_6 [na_9, (ErlangTuple [e_10, c_11, st2_12])] =
             let   
               case_13 =
                 (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
                    [na_9, e_10])
             in let
               st_22 =
                 case case_13 of
                   (ErlangAtom "true") ->
                     let
                       warn_18 =
                         (ErlangTuple [(ErlangAtom "duplicated_export"), na_9])
                     in (erlps__add_warning__3 [line_0, warn_18, st2_12])
                   (ErlangAtom "false") -> st2_12
                   something_else -> (EXC.case_clause something_else)
             in let
               tup_el_23 =
                 (BIF.do_remote_fun_call "Gb.Sets" "erlps__add_element__2"
                    [na_9, e_10])
             in let head_27 = (ErlangTuple [na_9, line_0])
             in (ErlangTuple [tup_el_23, (ErlangCons head_27 c_11), st_22])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in let arg_32 = (ErlangTuple [es0_2, called_3, st0_4])
  in let
    match_expr_40 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_5, arg_32, es_1])
  in
    case match_expr_40 of
      (ErlangTuple [es1_37, c1_38, st1_39]) ->
        case st1_39 of
          (ErlangTuple [(ErlangAtom "lint"), state_44, module_45,
                        behaviour_46, exports_47, imports_48, compile_49,
                        records_50, locals_51, no_auto_52, defined_53,
                        on_load_54, on_load_line_55, clashes_56,
                        not_deprecated_57, not_removed_58, func_59,
                        warn_format_60, enabled_warnings_61,
                        nowarn_bif_clash_62, errors_63, warnings_64, file_65,
                        recdef_top_66, xqlc_67, called_68, usage_69, specs_70,
                        callbacks_71, optional_callbacks_72, types_73,
                        exp_types_74, in_try_head_75, bvt_76,
                        gexpr_context_77]) ->
            (ErlangTuple
               [(ErlangAtom "lint"), state_44, module_45, behaviour_46, es1_37,
                imports_48, compile_49, records_50, locals_51, no_auto_52,
                defined_53, on_load_54, on_load_line_55, clashes_56,
                not_deprecated_57, not_removed_58, func_59, warn_format_60,
                enabled_warnings_61, nowarn_bif_clash_62, errors_63,
                warnings_64, file_65, recdef_top_66, xqlc_67, c1_38, usage_69,
                specs_70, callbacks_71, optional_callbacks_72, types_73,
                exp_types_74, in_try_head_75, bvt_76, gexpr_context_77])
          _ -> (EXC.badrecord (ErlangAtom "lint"))
      _ -> (EXC.badmatch match_expr_40)
erlps__export__3 [arg_78, arg_79, arg_80] =
  (EXC.function_clause unit)
erlps__export__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__export_type__3 :: ErlangFun
erlps__export_type__3 [line_0, ets_1,
                       st0_4@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _,
                                           _, _, _, _, _, _, _, _, _, _, _, _,
                                           _, _, _, _, _, _, _, _, usage_2, _,
                                           _, _, _, ets0_3, _, _, _])]
  =
  let
    uts0_8 =
      case usage_2 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 4)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in
    (EXC.tryOfCatch
       (\ _ ->
          let   
            arg_9 =
              (ErlangFun 2
                 let
                   lambda_10 [ta_15@(ErlangTuple [t_13, a_14]),
                              (ErlangTuple [e_16, u_17, st2_18])]
                     | ((isEAtom t_13) && (isEInt a_14)) =
                     let   
                       case_19 =
                         (BIF.do_remote_fun_call "Gb.Sets"
                            "erlps__is_element__2" [ta_15, e_16])
                     in let
                       st_28 =
                         case case_19 of
                           (ErlangAtom "true") ->
                             let
                               warn_24 =
                                 (ErlangTuple
                                    [(ErlangAtom "duplicated_export_type"),
                                     ta_15])
                             in
                               (erlps__add_warning__3 [line_0, warn_24, st2_18])
                           (ErlangAtom "false") -> st2_18
                           something_else -> (EXC.case_clause something_else)
                     in let
                       tup_el_29 =
                         (BIF.do_remote_fun_call "Gb.Sets"
                            "erlps__add_element__2" [ta_15, e_16])
                     in let tup_el_32 = (BIF.maps__put__3 [ta_15, line_0, u_17])
                     in (ErlangTuple [tup_el_29, tup_el_32, st_28])
                   lambda_10 [arg_11, arg_12] = (EXC.function_clause unit)
                   lambda_10 args = (EXC.badarity (ErlangFun 2 lambda_10) args)
                 in lambda_10)
          in let arg_37 = (ErlangTuple [ets0_3, uts0_8, st0_4])
          in
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_9, arg_37, ets_1]))
       (\ of_42 ->
          case of_42 of
            (ErlangTuple [ets1_44, uts1_45, st1_46]) ->
              let
                record_updt_48 =
                  case usage_2 of
                    (ErlangTuple [(ErlangAtom "usage"), calls_51, imported_52,
                                  used_records_53, used_types_54]) ->
                      (ErlangTuple
                         [(ErlangAtom "usage"), calls_51, imported_52,
                          used_records_53, uts1_45])
                    _ -> (EXC.badrecord (ErlangAtom "usage"))
              in
                case st1_46 of
                  (ErlangTuple [(ErlangAtom "lint"), state_56, module_57,
                                behaviour_58, exports_59, imports_60,
                                compile_61, records_62, locals_63, no_auto_64,
                                defined_65, on_load_66, on_load_line_67,
                                clashes_68, not_deprecated_69, not_removed_70,
                                func_71, warn_format_72, enabled_warnings_73,
                                nowarn_bif_clash_74, errors_75, warnings_76,
                                file_77, recdef_top_78, xqlc_79, called_80,
                                usage_81, specs_82, callbacks_83,
                                optional_callbacks_84, types_85, exp_types_86,
                                in_try_head_87, bvt_88, gexpr_context_89]) ->
                    (ErlangTuple
                       [(ErlangAtom "lint"), state_56, module_57, behaviour_58,
                        exports_59, imports_60, compile_61, records_62,
                        locals_63, no_auto_64, defined_65, on_load_66,
                        on_load_line_67, clashes_68, not_deprecated_69,
                        not_removed_70, func_71, warn_format_72,
                        enabled_warnings_73, nowarn_bif_clash_74, errors_75,
                        warnings_76, file_77, recdef_top_78, xqlc_79, called_80,
                        record_updt_48, specs_82, callbacks_83,
                        optional_callbacks_84, types_85, ets1_44,
                        in_try_head_87, bvt_88, gexpr_context_89])
                  _ -> (EXC.badrecord (ErlangAtom "lint"))
            something_else -> (EXC.try_clause something_else))
       (\ ex_43 ->
          case ex_43 of
            (ErlangTuple [(ErlangAtom "error"), _, _]) ->
              let
                arg_91 = (ErlangTuple [(ErlangAtom "bad_export_type"), ets_1])
              in (erlps__add_error__3 [line_0, arg_91, st0_4])
            ex_43 -> (EXC.raise ex_43)))
erlps__export_type__3 [arg_95, arg_96, arg_97] =
  (EXC.function_clause unit)
erlps__export_type__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exports__1 :: ErlangFun
erlps__exports__1 [(ErlangTuple [(ErlangAtom "lint"), _, _, _,
                                 es_0, _, opts_1, _, _, _, defs_2, _, _, _, _,
                                 _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                                 _, _, _, _])]
  =
  let
    case_3 =
      (BIF.lists__member__2 [(ErlangAtom "export_all"), opts_1])
  in
    case case_3 of
      (ErlangAtom "true") -> defs_2
      (ErlangAtom "false") -> es_0
      something_else -> (EXC.case_clause something_else)
erlps__exports__1 [arg_6] = (EXC.function_clause unit)
erlps__exports__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__import__3 :: ErlangFun
erlps__import__3 [line_0, (ErlangTuple [mod_1, fs_2]), st00_3] =
  let   
    st_7 = (erlps__check_module_name__3 [mod_1, line_0, st00_3])
  in let
    mfs_9 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__from_list__1" [fs_2])
  in let
    arg_13 =
      case st_7 of
        (ErlangTuple arr_16) | (DM.Just field_15) <-
                                 ((arr_16 DA.!! 5)) ->
          field_15
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_10 = (erlps__check_imports__3 [line_0, mfs_9, arg_13])
  in
    case case_10 of
      (ErlangEmptyList) ->
        let   
          arg_21 =
            case st_7 of
              (ErlangTuple arr_24) | (DM.Just field_23) <-
                                       ((arr_24 DA.!! 5)) ->
                field_23
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          record_updt_18 = (erlps__add_imports__3 [mod_1, mfs_9, arg_21])
        in
          case st_7 of
            (ErlangTuple [(ErlangAtom "lint"), state_25, module_26,
                          behaviour_27, exports_28, imports_29, compile_30,
                          records_31, locals_32, no_auto_33, defined_34,
                          on_load_35, on_load_line_36, clashes_37,
                          not_deprecated_38, not_removed_39, func_40,
                          warn_format_41, enabled_warnings_42,
                          nowarn_bif_clash_43, errors_44, warnings_45, file_46,
                          recdef_top_47, xqlc_48, called_49, usage_50, specs_51,
                          callbacks_52, optional_callbacks_53, types_54,
                          exp_types_55, in_try_head_56, bvt_57,
                          gexpr_context_58]) ->
              (ErlangTuple
                 [(ErlangAtom "lint"), state_25, module_26, behaviour_27,
                  exports_28, record_updt_18, compile_30, records_31, locals_32,
                  no_auto_33, defined_34, on_load_35, on_load_line_36,
                  clashes_37, not_deprecated_38, not_removed_39, func_40,
                  warn_format_41, enabled_warnings_42, nowarn_bif_clash_43,
                  errors_44, warnings_45, file_46, recdef_top_47, xqlc_48,
                  called_49, usage_50, specs_51, callbacks_52,
                  optional_callbacks_53, types_54, exp_types_55, in_try_head_56,
                  bvt_57, gexpr_context_58])
            _ -> (EXC.badrecord (ErlangAtom "lint"))
      efs_59 ->
        let   
          arg_60 =
            (ErlangFun 2
               let
                 lambda_61 [(ErlangTuple [(ErlangAtom "bif"),
                                          (ErlangTuple [f_64, a_65]), _]),
                            (ErlangTuple [err_66, st0_67])]
                   =
                   let   
                     lop_68 =
                       (erlps__is_warn_enabled__2
                          [(ErlangAtom "bif_clash"), st0_67])
                   in let
                     warn_76 =
                       case lop_68 of
                         (ErlangAtom "false") -> (ErlangAtom "false")
                         (ErlangAtom "true") ->
                           let    arg_73 = (ErlangTuple [f_64, a_65])
                           in let
                             op_arg_71 =
                               (erlps__bif_clash_specifically_disabled__2
                                  [st0_67, arg_73])
                           in (BIF.erlang__not__1 [op_arg_71])
                         _ -> (EXC.badarg1 lop_68)
                   in let
                     arg_77 =
                       case st0_67 of
                         (ErlangTuple arr_80) | (DM.Just field_79) <-
                                                  ((arr_80 DA.!! 9)) ->
                           field_79
                         _ -> (EXC.badrecord (ErlangAtom "lint"))
                   in let arg_81 = (ErlangTuple [f_64, a_65])
                   in let
                     autoimpsup_84 =
                       (erlps__is_autoimport_suppressed__2 [arg_77, arg_81])
                   in let
                     oldbif_87 =
                       (BIF.do_remote_fun_call "Erl.Internal"
                          "erlps__old_bif__2" [f_64, a_65])
                   in let
                     tup_el_89 =
                       case (ErlangAtom "true") of
                         _ | ((ErlangAtom "true") ==
                                (falsifyErrors
                                   (\ _ ->
                                      let   
                                        rop_92 =
                                          (BIF.erlang__not__1 [autoimpsup_84])
                                      in let
                                        lop_90 =
                                          (BIF.erlang__op_and [warn_76, rop_92])
                                      in
                                        (BIF.erlang__op_and
                                           [lop_90, oldbif_87])))) ->
                           let    tup_el_98 = (ErlangTuple [f_64, a_65])
                           in let
                             arg_96 =
                               (ErlangTuple
                                  [(ErlangAtom "redefine_old_bif_import"),
                                   tup_el_98])
                           in (erlps__add_error__3 [line_0, arg_96, st0_67])
                         _ | ((ErlangAtom "true") ==
                                (falsifyErrors
                                   (\ _ ->
                                      let
                                        rop_103 =
                                          (BIF.erlang__not__1 [autoimpsup_84])
                                      in
                                        (BIF.erlang__op_and
                                           [warn_76, rop_103])))) ->
                           let    tup_el_108 = (ErlangTuple [f_64, a_65])
                           in let
                             arg_106 =
                               (ErlangTuple
                                  [(ErlangAtom "redefine_bif_import"),
                                   tup_el_108])
                           in (erlps__add_warning__3 [line_0, arg_106, st0_67])
                         _ -> st0_67
                         _ -> (EXC.if_clause unit)
                   in (ErlangTuple [err_66, tup_el_89])
                 lambda_61 [ef_112, (ErlangTuple [_err_113, st0_114])] =
                   let   
                     arg_118 =
                       (ErlangTuple [(ErlangAtom "redefine_import"), ef_112])
                   in let
                     tup_el_116 =
                       (erlps__add_error__3 [line_0, arg_118, st0_114])
                   in (ErlangTuple [(ErlangAtom "true"), tup_el_116])
                 lambda_61 [arg_62, arg_63] = (EXC.function_clause unit)
                 lambda_61 args = (EXC.badarity (ErlangFun 2 lambda_61) args)
               in lambda_61)
        in let arg_122 = (ErlangTuple [(ErlangAtom "false"), st_7])
        in let
          match_expr_128 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_60, arg_122, efs_59])
        in
          case match_expr_128 of
            (ErlangTuple [err_126, st1_127]) ->
              case (ErlangAtom "true") of
                _ | ((ErlangAtom "true") ==
                       (falsifyErrors
                          (\ _ -> (BIF.erlang__not__1 [err_126])))) ->
                  let   
                    arg_134 =
                      case st_7 of
                        (ErlangTuple arr_137) | (DM.Just field_136) <-
                                                  ((arr_137 DA.!! 5)) ->
                          field_136
                        _ -> (EXC.badrecord (ErlangAtom "lint"))
                  in let
                    record_updt_131 =
                      (erlps__add_imports__3 [mod_1, mfs_9, arg_134])
                  in
                    case st1_127 of
                      (ErlangTuple [(ErlangAtom "lint"), state_138, module_139,
                                    behaviour_140, exports_141, imports_142,
                                    compile_143, records_144, locals_145,
                                    no_auto_146, defined_147, on_load_148,
                                    on_load_line_149, clashes_150,
                                    not_deprecated_151, not_removed_152,
                                    func_153, warn_format_154,
                                    enabled_warnings_155, nowarn_bif_clash_156,
                                    errors_157, warnings_158, file_159,
                                    recdef_top_160, xqlc_161, called_162,
                                    usage_163, specs_164, callbacks_165,
                                    optional_callbacks_166, types_167,
                                    exp_types_168, in_try_head_169, bvt_170,
                                    gexpr_context_171]) ->
                        (ErlangTuple
                           [(ErlangAtom "lint"), state_138, module_139,
                            behaviour_140, exports_141, record_updt_131,
                            compile_143, records_144, locals_145, no_auto_146,
                            defined_147, on_load_148, on_load_line_149,
                            clashes_150, not_deprecated_151, not_removed_152,
                            func_153, warn_format_154, enabled_warnings_155,
                            nowarn_bif_clash_156, errors_157, warnings_158,
                            file_159, recdef_top_160, xqlc_161, called_162,
                            usage_163, specs_164, callbacks_165,
                            optional_callbacks_166, types_167, exp_types_168,
                            in_try_head_169, bvt_170, gexpr_context_171])
                      _ -> (EXC.badrecord (ErlangAtom "lint"))
                _ -> st1_127
                _ -> (EXC.if_clause unit)
            _ -> (EXC.badmatch match_expr_128)
      something_else -> (EXC.case_clause something_else)
erlps__import__3 [arg_172, arg_173, arg_174] =
  (EXC.function_clause unit)
erlps__import__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_imports__3 :: ErlangFun
erlps__check_imports__3 [_line_0, fs_1, is_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [f_7, efs_8] =
             let
               case_9 =
                 (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [f_7, is_2])
             in
               case case_9 of
                 (ErlangTuple [(ErlangAtom "ok"), mod_12]) ->
                   let head_13 = (ErlangTuple [f_7, mod_12])
                   in (ErlangCons head_13 efs_8)
                 (ErlangAtom "error") ->
                   case f_7 of
                     (ErlangTuple [n_17, a_18]) ->
                       let
                         case_20 =
                           (BIF.do_remote_fun_call "Erl.Internal"
                              "erlps__bif__2" [n_17, a_18])
                       in
                         case case_20 of
                           (ErlangAtom "true") ->
                             let
                               head_23 =
                                 (ErlangTuple
                                    [(ErlangAtom "bif"), f_7,
                                     (ErlangAtom "erlang")])
                             in (ErlangCons head_23 efs_8)
                           (ErlangAtom "false") -> efs_8
                           something_else -> (EXC.case_clause something_else)
                     _ -> (EXC.badmatch f_7)
                 something_else -> (EXC.case_clause something_else)
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, ErlangEmptyList, fs_1])
erlps__check_imports__3 [arg_30, arg_31, arg_32] =
  (EXC.function_clause unit)
erlps__check_imports__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_imports__3 :: ErlangFun
erlps__add_imports__3 [mod_0, fs_1, is_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [f_7, is0_8] =
             (BIF.do_remote_fun_call "Orddict" "erlps__store__3"
                [f_7, mod_0, is0_8])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, is_2, fs_1])
erlps__add_imports__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__add_imports__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__imported__3 :: ErlangFun
erlps__imported__3 [f_0, a_1, st_2] =
  let    arg_4 = (ErlangTuple [f_0, a_1])
  in let
    arg_7 =
      case st_2 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 5)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_3 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2"
         [arg_4, arg_7])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), mod_11]) ->
        (ErlangTuple [(ErlangAtom "yes"), mod_11])
      (ErlangAtom "error") -> (ErlangAtom "no")
      something_else -> (EXC.case_clause something_else)
erlps__imported__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__imported__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__on_load__3 :: ErlangFun
erlps__on_load__3 [line_0, fa_3@(ErlangTuple [name_1, arity_2]),
                   st0_5@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _,
                                       _, _, _, onload0_4, _, _, _, _, _, _, _,
                                       _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                                       _, _])]
  | ((isEAtom name_1) && (isEInt arity_2)) =
  let
    st_45 =
      case st0_5 of
        (ErlangTuple [(ErlangAtom "lint"), state_11, module_12,
                      behaviour_13, exports_14, imports_15, compile_16,
                      records_17, locals_18, no_auto_19, defined_20, on_load_21,
                      on_load_line_22, clashes_23, not_deprecated_24,
                      not_removed_25, func_26, warn_format_27,
                      enabled_warnings_28, nowarn_bif_clash_29, errors_30,
                      warnings_31, file_32, recdef_top_33, xqlc_34, called_35,
                      usage_36, specs_37, callbacks_38, optional_callbacks_39,
                      types_40, exp_types_41, in_try_head_42, bvt_43,
                      gexpr_context_44]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_11, module_12, behaviour_13,
              exports_14, imports_15, compile_16, records_17, locals_18,
              no_auto_19, defined_20, (ErlangCons fa_3 onload0_4), line_0,
              clashes_23, not_deprecated_24, not_removed_25, func_26,
              warn_format_27, enabled_warnings_28, nowarn_bif_clash_29,
              errors_30, warnings_31, file_32, recdef_top_33, xqlc_34,
              called_35, usage_36, specs_37, callbacks_38,
              optional_callbacks_39, types_40, exp_types_41, in_try_head_42,
              bvt_43, gexpr_context_44])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in
    case st_45 of
      (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _, _, _, _,
                    (ErlangCons (ErlangTuple [_,
                                              (ErlangInt num_47)]) (ErlangEmptyList)),
                    _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                    _, _, _]) | ((ErlangInt num_47) ==
                                   (ErlangInt (DBI.fromInt 0))) ->
        st_45
      (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _, _, _, _,
                    (ErlangCons (ErlangTuple [_, _]) (ErlangEmptyList)), _, _,
                    _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                    _]) ->
        let
          arg_49 = (ErlangTuple [(ErlangAtom "bad_on_load_arity"), fa_3])
        in (erlps__add_error__3 [line_0, arg_49, st_45])
      (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _, _, _, _,
                    (ErlangCons _ (ErlangCons _ _)), _, _, _, _, _, _, _, _, _,
                    _, _, _, _, _, _, _, _, _, _, _, _, _, _]) ->
        (erlps__add_error__3
           [line_0, (ErlangAtom "multiple_on_loads"), st_45])
      something_else -> (EXC.case_clause something_else)
erlps__on_load__3 [line_0, val_1, st_2] =
  let arg_4 = (ErlangTuple [(ErlangAtom "bad_on_load"), val_1])
  in (erlps__add_error__3 [line_0, arg_4, st_2])
erlps__on_load__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__on_load__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_on_load__1 :: ErlangFun
erlps__check_on_load__1 [st_4@(ErlangTuple [(ErlangAtom "lint"),
                                            _, _, _, _, _, _, _, _, _,
                                            defined_0,
                                            (ErlangCons fa_2@(ErlangTuple [_,
                                                                           (ErlangInt num_1)]) (ErlangEmptyList)),
                                            line_3, _, _, _, _, _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _, _, _, _,
                                            _])]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 0))) =
  let
    case_5 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_member__2"
         [fa_2, defined_0])
  in
    case case_5 of
      (ErlangAtom "true") -> st_4
      (ErlangAtom "false") ->
        let
          arg_9 = (ErlangTuple [(ErlangAtom "undefined_on_load"), fa_2])
        in (erlps__add_error__3 [line_3, arg_9, st_4])
      something_else -> (EXC.case_clause something_else)
erlps__check_on_load__1 [st_0] = st_0
erlps__check_on_load__1 [arg_1] = (EXC.function_clause unit)
erlps__check_on_load__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__call_function__4 :: ErlangFun
erlps__call_function__4 [line_0, f_1, a_2,
                         st_7@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _,
                                            _, _, _, _, _, _, _, _, _, _,
                                            func_3, _, _, _, _, _, file_4, _, _,
                                            cd_5, usage0_6, _, _, _, _, _, _, _,
                                            _])]
  =
  case usage0_6 of
    (ErlangTuple [(ErlangAtom "usage"), cs_8, _, _, _]) ->
      let    na_12 = (ErlangTuple [f_1, a_2])
      in let
        usage_23 =
          case cs_8 of
            (ErlangAtom "undefined") -> usage0_6
            _ ->
              let
                record_updt_15 = (erlps__maps_prepend__3 [func_3, na_12, cs_8])
              in
                case usage0_6 of
                  (ErlangTuple [(ErlangAtom "usage"), calls_19, imported_20,
                                used_records_21, used_types_22]) ->
                    (ErlangTuple
                       [(ErlangAtom "usage"), record_updt_15, imported_20,
                        used_records_21, used_types_22])
                  _ -> (EXC.badrecord (ErlangAtom "usage"))
            something_else -> (EXC.case_clause something_else)
      in let
        anno_26 =
          (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
             [file_4, line_0])
      in let head_29 = (ErlangTuple [na_12, anno_26])
      in
        case st_7 of
          (ErlangTuple [(ErlangAtom "lint"), state_34, module_35,
                        behaviour_36, exports_37, imports_38, compile_39,
                        records_40, locals_41, no_auto_42, defined_43,
                        on_load_44, on_load_line_45, clashes_46,
                        not_deprecated_47, not_removed_48, func_49,
                        warn_format_50, enabled_warnings_51,
                        nowarn_bif_clash_52, errors_53, warnings_54, file_55,
                        recdef_top_56, xqlc_57, called_58, usage_59, specs_60,
                        callbacks_61, optional_callbacks_62, types_63,
                        exp_types_64, in_try_head_65, bvt_66,
                        gexpr_context_67]) ->
            (ErlangTuple
               [(ErlangAtom "lint"), state_34, module_35, behaviour_36,
                exports_37, imports_38, compile_39, records_40, locals_41,
                no_auto_42, defined_43, on_load_44, on_load_line_45, clashes_46,
                not_deprecated_47, not_removed_48, func_49, warn_format_50,
                enabled_warnings_51, nowarn_bif_clash_52, errors_53,
                warnings_54, file_55, recdef_top_56, xqlc_57,
                (ErlangCons head_29 cd_5), usage_23, specs_60, callbacks_61,
                optional_callbacks_62, types_63, exp_types_64, in_try_head_65,
                bvt_66, gexpr_context_67])
          _ -> (EXC.badrecord (ErlangAtom "lint"))
    _ -> (EXC.badmatch usage0_6)
erlps__call_function__4 [arg_68, arg_69, arg_70, arg_71] =
  (EXC.function_clause unit)
erlps__call_function__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function__5 :: ErlangFun
erlps__function__5 [line_0, name_1, arity_2, cs_3, st0_4] =
  let    record_updt_6 = (ErlangTuple [name_1, arity_2])
  in let
    st1_43 =
      case st0_4 of
        (ErlangTuple [(ErlangAtom "lint"), state_9, module_10,
                      behaviour_11, exports_12, imports_13, compile_14,
                      records_15, locals_16, no_auto_17, defined_18, on_load_19,
                      on_load_line_20, clashes_21, not_deprecated_22,
                      not_removed_23, func_24, warn_format_25,
                      enabled_warnings_26, nowarn_bif_clash_27, errors_28,
                      warnings_29, file_30, recdef_top_31, xqlc_32, called_33,
                      usage_34, specs_35, callbacks_36, optional_callbacks_37,
                      types_38, exp_types_39, in_try_head_40, bvt_41,
                      gexpr_context_42]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_9, module_10, behaviour_11,
              exports_12, imports_13, compile_14, records_15, locals_16,
              no_auto_17, defined_18, on_load_19, on_load_line_20, clashes_21,
              not_deprecated_22, not_removed_23, record_updt_6, warn_format_25,
              enabled_warnings_26, nowarn_bif_clash_27, errors_28, warnings_29,
              file_30, recdef_top_31, xqlc_32, called_33, usage_34, specs_35,
              callbacks_36, optional_callbacks_37, types_38, exp_types_39,
              in_try_head_40, bvt_41, gexpr_context_42])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    st2_48 =
      (erlps__define_function__4 [line_0, name_1, arity_2, st1_43])
  in (erlps__clauses__2 [cs_3, st2_48])
erlps__function__5 [arg_51, arg_52, arg_53, arg_54, arg_55] =
  (EXC.function_clause unit)
erlps__function__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__define_function__4 :: ErlangFun
erlps__define_function__4 [line_0, name_1, arity_2, st0_3] =
  let   
    st1_7 = (erlps__keyword_warning__3 [line_0, name_1, st0_3])
  in let na_10 = (ErlangTuple [name_1, arity_2])
  in let
    arg_13 =
      case st1_7 of
        (ErlangTuple arr_16) | (DM.Just field_15) <-
                                 ((arr_16 DA.!! 10)) ->
          field_15
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_11 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_member__2"
         [na_10, arg_13])
  in
    case case_11 of
      (ErlangAtom "true") ->
        let
          arg_18 = (ErlangTuple [(ErlangAtom "redefine_function"), na_10])
        in (erlps__add_error__3 [line_0, arg_18, st1_7])
      (ErlangAtom "false") ->
        let   
          st2_25 =
            (erlps__function_check_max_args__3 [line_0, arity_2, st1_7])
        in let
          arg_29 =
            case st2_25 of
              (ErlangTuple arr_32) | (DM.Just field_31) <-
                                       ((arr_32 DA.!! 10)) ->
                field_31
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          record_updt_27 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__add_element__2"
               [na_10, arg_29])
        in let
          st3_67 =
            case st2_25 of
              (ErlangTuple [(ErlangAtom "lint"), state_33, module_34,
                            behaviour_35, exports_36, imports_37, compile_38,
                            records_39, locals_40, no_auto_41, defined_42,
                            on_load_43, on_load_line_44, clashes_45,
                            not_deprecated_46, not_removed_47, func_48,
                            warn_format_49, enabled_warnings_50,
                            nowarn_bif_clash_51, errors_52, warnings_53,
                            file_54, recdef_top_55, xqlc_56, called_57,
                            usage_58, specs_59, callbacks_60,
                            optional_callbacks_61, types_62, exp_types_63,
                            in_try_head_64, bvt_65, gexpr_context_66]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_33, module_34, behaviour_35,
                    exports_36, imports_37, compile_38, records_39, locals_40,
                    no_auto_41, record_updt_27, on_load_43, on_load_line_44,
                    clashes_45, not_deprecated_46, not_removed_47, func_48,
                    warn_format_49, enabled_warnings_50, nowarn_bif_clash_51,
                    errors_52, warnings_53, file_54, recdef_top_55, xqlc_56,
                    called_57, usage_58, specs_59, callbacks_60,
                    optional_callbacks_61, types_62, exp_types_63,
                    in_try_head_64, bvt_65, gexpr_context_66])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let case_68 = (erlps__imported__3 [name_1, arity_2, st3_67])
        in
          case case_68 of
            (ErlangTuple [(ErlangAtom "yes"), _m_72]) ->
              let arg_74 = (ErlangTuple [(ErlangAtom "define_import"), na_10])
              in (erlps__add_error__3 [line_0, arg_74, st3_67])
            (ErlangAtom "no") -> st3_67
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__define_function__4 [arg_78, arg_79, arg_80, arg_81] =
  (EXC.function_clause unit)
erlps__define_function__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__function_check_max_args__3 :: ErlangFun
erlps__function_check_max_args__3 [line_0, arity_1, st_2]
  | (weakGt arity_1 (ErlangInt (DBI.fromInt 255))) =
  let
    arg_4 =
      (ErlangTuple [(ErlangAtom "too_many_arguments"), arity_1])
  in (erlps__add_error__3 [line_0, arg_4, st_2])
erlps__function_check_max_args__3 [_, _, st_0] = st_0
erlps__function_check_max_args__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__function_check_max_args__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__clauses__2 :: ErlangFun
erlps__clauses__2 [cs_0, st_1] =
  let
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [c_6, st0_7] =
             let match_expr_11 = (erlps__clause__2 [c_6, st0_7])
             in
               case match_expr_11 of
                 (ErlangTuple [_, st1_10]) -> st1_10
                 _ -> (EXC.badmatch match_expr_11)
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_2, st_1, cs_0])
erlps__clauses__2 [arg_14, arg_15] = (EXC.function_clause unit)
erlps__clauses__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__clause__2 :: ErlangFun
erlps__clause__2 [(ErlangTuple [(ErlangAtom "clause"), _line_0,
                                h_1, g_2, b_3]),
                  st0_4]
  =
  let
    match_expr_12 = (erlps__head__3 [h_1, ErlangEmptyList, st0_4])
  in
    case match_expr_12 of
      (ErlangTuple [hvt_9, hnew_10, st1_11]) ->
        let    arg_14 = (erlps__vtupdate__2 [hnew_10, ErlangEmptyList])
        in let vt1_17 = (erlps__vtupdate__2 [hvt_9, arg_14])
        in let match_expr_23 = (erlps__guard__3 [g_2, vt1_17, st1_11])
        in
          case match_expr_23 of
            (ErlangTuple [gvt_21, st2_22]) ->
              let    vt2_26 = (erlps__vtupdate__2 [gvt_21, vt1_17])
              in let match_expr_32 = (erlps__exprs__3 [b_3, vt2_26, st2_22])
              in
                case match_expr_32 of
                  (ErlangTuple [bvt_30, st3_31]) ->
                    let upd_35 = (erlps__vtupdate__2 [bvt_30, vt2_26])
                    in
                      (erlps__check_unused_vars__3
                         [upd_35, ErlangEmptyList, st3_31])
                  _ -> (EXC.badmatch match_expr_32)
            _ -> (EXC.badmatch match_expr_23)
      _ -> (EXC.badmatch match_expr_12)
erlps__clause__2 [arg_39, arg_40] = (EXC.function_clause unit)
erlps__clause__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__head__3 :: ErlangFun
erlps__head__3 [ps_0, vt_1, st0_2] =
  (erlps__head__4 [ps_0, vt_1, vt_1, st0_2])
erlps__head__3 [arg_7, arg_8, arg_9] = (EXC.function_clause unit)
erlps__head__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__head__4 :: ErlangFun
erlps__head__4 [(ErlangCons p_0 ps_1), vt_2, old_3, st0_4] =
  let match_expr_12 = (erlps__pattern__4 [p_0, vt_2, old_3, st0_4])
  in
    case match_expr_12 of
      (ErlangTuple [pvt_9, pnew_10, st1_11]) ->
        let match_expr_20 = (erlps__head__4 [ps_1, vt_2, old_3, st1_11])
        in
          case match_expr_20 of
            (ErlangTuple [psvt_17, psnew_18, st2_19]) ->
              let    tup_el_21 = (erlps__vtmerge_pat__2 [pvt_9, psvt_17])
              in let tup_el_24 = (erlps__vtmerge_pat__2 [pnew_10, psnew_18])
              in (ErlangTuple [tup_el_21, tup_el_24, st2_19])
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_12)
erlps__head__4 [(ErlangEmptyList), _vt_0, _env_1, st_2] =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_2])
erlps__head__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__head__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern__3 :: ErlangFun
erlps__pattern__3 [p_0, vt_1, st_2] =
  (erlps__pattern__4 [p_0, vt_1, vt_1, st_2])
erlps__pattern__3 [arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__pattern__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern__4 :: ErlangFun
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "var"), _line_0,
                                 (ErlangAtom "_")]),
                   _vt_1, _old_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "var"), line_0,
                                 v_1]),
                   _vt_2, old_3, st_4]
  =
  (erlps__pat_var__5 [v_1, line_0, old_3, ErlangEmptyList, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "char"), _line_0,
                                 _c_1]),
                   _vt_2, _old_3, st_4]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "integer"), _line_0,
                                 _i_1]),
                   _vt_2, _old_3, st_4]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "float"), _line_0,
                                 _f_1]),
                   _vt_2, _old_3, st_4]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "atom"), line_0,
                                 a_1]),
                   _vt_2, _old_3, st_4]
  =
  let tup_el_7 = (erlps__keyword_warning__3 [line_0, a_1, st_4])
  in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, tup_el_7])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "string"), _line_0,
                                 _s_1]),
                   _vt_2, _old_3, st_4]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "nil"), _line_0]),
                   _vt_1, _old_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "cons"), _line_0,
                                 h_1, t_2]),
                   vt_3, old_4, st0_5]
  =
  let match_expr_13 = (erlps__pattern__4 [h_1, vt_3, old_4, st0_5])
  in
    case match_expr_13 of
      (ErlangTuple [hvt_10, hnew_11, st1_12]) ->
        let
          match_expr_21 = (erlps__pattern__4 [t_2, vt_3, old_4, st1_12])
        in
          case match_expr_21 of
            (ErlangTuple [tvt_18, tnew_19, st2_20]) ->
              let    tup_el_22 = (erlps__vtmerge_pat__2 [hvt_10, tvt_18])
              in let tup_el_25 = (erlps__vtmerge_pat__2 [hnew_11, tnew_19])
              in (ErlangTuple [tup_el_22, tup_el_25, st2_20])
            _ -> (EXC.badmatch match_expr_21)
      _ -> (EXC.badmatch match_expr_13)
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "tuple"), _line_0,
                                 ps_1]),
                   vt_2, old_3, st_4]
  =
  (erlps__pattern_list__4 [ps_1, vt_2, old_3, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "map"), _line_0,
                                 ps_1]),
                   vt_2, old_3, st_4]
  =
  (erlps__pattern_map__4 [ps_1, vt_2, old_3, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "record_index"),
                                 line_0, name_1, field_2]),
                   _vt_3, _old_4, st_5]
  =
  let   
    arg_9 =
      (ErlangFun 2
         let
           lambda_10 [dfs_13, st1_14] =
             (erlps__pattern_field__4 [field_2, name_1, dfs_13, st1_14])
           lambda_10 [arg_11, arg_12] = (EXC.function_clause unit)
           lambda_10 args = (EXC.badarity (ErlangFun 2 lambda_10) args)
         in lambda_10)
  in let
    match_expr_21 =
      (erlps__check_record__4 [line_0, name_1, st_5, arg_9])
  in
    case match_expr_21 of
      (ErlangTuple [vt1_19, st1_20]) ->
        (ErlangTuple [vt1_19, ErlangEmptyList, st1_20])
      _ -> (EXC.badmatch match_expr_21)
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "record"), line_0,
                                 name_1, pfs_2]),
                   vt_3, old_4, st_5]
  =
  let   
    arg_8 =
      case st_5 of
        (ErlangTuple arr_11) | (DM.Just field_10) <-
                                 ((arr_11 DA.!! 7)) ->
          field_10
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_6 = (BIF.maps__find__2 [name_1, arg_8])
  in
    case case_6 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [_line_12, fields_13])]) ->
        let    st1_16 = (erlps__used_record__2 [name_1, st_5])
        in let
          st2_21 =
            (erlps__check_multi_field_init__4
               [pfs_2, line_0, fields_13, st1_16])
        in
          (erlps__pattern_fields__6
             [pfs_2, name_1, fields_13, vt_3, old_4, st2_21])
      (ErlangAtom "error") ->
        let   
          arg_32 = (ErlangTuple [(ErlangAtom "undefined_record"), name_1])
        in let tup_el_30 = (erlps__add_error__3 [line_0, arg_32, st_5])
        in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, tup_el_30])
      something_else -> (EXC.case_clause something_else)
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "bin"), _, fs_0]),
                   vt_1, old_2, st_3]
  =
  (erlps__pattern_bin__4 [fs_0, vt_1, old_2, st_3])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "op"), _line_0,
                                 (ErlangAtom "++"),
                                 (ErlangTuple [(ErlangAtom "nil"), _]), r_1]),
                   vt_2, old_3, st_4]
  =
  (erlps__pattern__4 [r_1, vt_2, old_3, st_4])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "op"), _line_0,
                                 (ErlangAtom "++"),
                                 (ErlangTuple [(ErlangAtom "cons"), li_1,
                                               (ErlangTuple [(ErlangAtom "char"),
                                                             _l2_2, _c_3]),
                                               t_4]),
                                 r_5]),
                   vt_6, old_7, st_8]
  =
  let
    arg_9 =
      (ErlangTuple
         [(ErlangAtom "op"), li_1, (ErlangAtom "++"), t_4, r_5])
  in (erlps__pattern__4 [arg_9, vt_6, old_7, st_8])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "op"), _line_0,
                                 (ErlangAtom "++"),
                                 (ErlangTuple [(ErlangAtom "cons"), li_1,
                                               (ErlangTuple [(ErlangAtom "integer"),
                                                             _l2_2, _i_3]),
                                               t_4]),
                                 r_5]),
                   vt_6, old_7, st_8]
  =
  let
    arg_9 =
      (ErlangTuple
         [(ErlangAtom "op"), li_1, (ErlangAtom "++"), t_4, r_5])
  in (erlps__pattern__4 [arg_9, vt_6, old_7, st_8])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "op"), _line_0,
                                 (ErlangAtom "++"),
                                 (ErlangTuple [(ErlangAtom "string"), _li_1,
                                               _s_2]),
                                 r_3]),
                   vt_4, old_5, st_6]
  =
  (erlps__pattern__4 [r_3, vt_4, old_5, st_6])
erlps__pattern__4 [(ErlangTuple [(ErlangAtom "match"), _line_0,
                                 pat1_1, pat2_2]),
                   vt_3, old_4, st0_5]
  =
  let
    match_expr_13 = (erlps__pattern__4 [pat1_1, vt_3, old_4, st0_5])
  in
    case match_expr_13 of
      (ErlangTuple [lvt_10, lnew_11, st1_12]) ->
        let
          match_expr_21 = (erlps__pattern__4 [pat2_2, vt_3, old_4, st1_12])
        in
          case match_expr_21 of
            (ErlangTuple [rvt_18, rnew_19, st2_20]) ->
              let   
                st3_26 =
                  (erlps__reject_invalid_alias__4
                     [pat1_1, pat2_2, vt_3, st2_20])
              in let tup_el_27 = (erlps__vtmerge_pat__2 [lvt_10, rvt_18])
              in let tup_el_30 = (erlps__vtmerge_pat__2 [lnew_11, rnew_19])
              in (ErlangTuple [tup_el_27, tup_el_30, st3_26])
            _ -> (EXC.badmatch match_expr_21)
      _ -> (EXC.badmatch match_expr_13)
erlps__pattern__4 [pat_0, _vt_1, _old_2, st_3] =
  let case_4 = (erlps__is_pattern_expr__1 [pat_0])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
      (ErlangAtom "false") ->
        let   
          arg_12 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), pat_0])
        in let
          tup_el_11 =
            (erlps__add_error__3
               [arg_12, (ErlangAtom "illegal_pattern"), st_3])
        in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, tup_el_11])
      something_else -> (EXC.case_clause something_else)
erlps__pattern__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__pattern__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_list__4 :: ErlangFun
erlps__pattern_list__4 [ps_0, vt_1, old_2, st_3] =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [p_8, (ErlangTuple [psvt_9, psnew_10, st0_11])] =
             let
               match_expr_19 = (erlps__pattern__4 [p_8, vt_1, old_2, st0_11])
             in
               case match_expr_19 of
                 (ErlangTuple [pvt_16, pnew_17, st1_18]) ->
                   let    tup_el_20 = (erlps__vtmerge_pat__2 [pvt_16, psvt_9])
                   in let
                     tup_el_23 = (erlps__vtmerge_pat__2 [psnew_10, pnew_17])
                   in (ErlangTuple [tup_el_20, tup_el_23, st1_18])
                 _ -> (EXC.badmatch match_expr_19)
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    arg_27 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_4, arg_27, ps_0])
erlps__pattern_list__4 [arg_32, arg_33, arg_34, arg_35] =
  (EXC.function_clause unit)
erlps__pattern_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_multi_field_init__4 :: ErlangFun
erlps__check_multi_field_init__4 [fs_0, line_1, fields_2, st_3] =
  let    lop_5 = (erlps__has_wildcard_field__1 [fs_0])
  in let
    case_4 =
      case lop_5 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let lop_7 = (erlps__init_fields__3 [fs_0, line_1, fields_2])
          in (BIF.erlang__op_exactEq [lop_7, ErlangEmptyList])
        _ -> (EXC.badarg1 lop_5)
  in
    case case_4 of
      (ErlangAtom "true") ->
        (erlps__add_error__3
           [line_1, (ErlangAtom "bad_multi_field_init"), st_3])
      (ErlangAtom "false") -> st_3
      something_else -> (EXC.case_clause something_else)
erlps__check_multi_field_init__4 [arg_15, arg_16, arg_17, arg_18]
  =
  (EXC.function_clause unit)
erlps__check_multi_field_init__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reject_invalid_alias_expr__4 :: ErlangFun
erlps__reject_invalid_alias_expr__4 [p_0@(ErlangTuple [(ErlangAtom "bin"),
                                                       _, _]),
                                     (ErlangTuple [(ErlangAtom "match"), _,
                                                   p0_1, e_2]),
                                     vt_3, st0_4]
  =
  let
    st_9 = (erlps__reject_invalid_alias__4 [p_0, p0_1, vt_3, st0_4])
  in (erlps__reject_invalid_alias_expr__4 [p_0, e_2, vt_3, st_9])
erlps__reject_invalid_alias_expr__4 [p_0@(ErlangTuple [(ErlangAtom "map"),
                                                       _, _]),
                                     (ErlangTuple [(ErlangAtom "match"), _,
                                                   p0_1, e_2]),
                                     vt_3, st0_4]
  =
  let
    st_9 = (erlps__reject_invalid_alias__4 [p_0, p0_1, vt_3, st0_4])
  in (erlps__reject_invalid_alias_expr__4 [p_0, e_2, vt_3, st_9])
erlps__reject_invalid_alias_expr__4 [p_0@(ErlangTuple [(ErlangAtom "match"),
                                                       _, _, _]),
                                     (ErlangTuple [(ErlangAtom "match"), _,
                                                   p0_1, e_2]),
                                     vt_3, st0_4]
  =
  let
    st_9 = (erlps__reject_invalid_alias__4 [p_0, p0_1, vt_3, st0_4])
  in (erlps__reject_invalid_alias_expr__4 [p_0, e_2, vt_3, st_9])
erlps__reject_invalid_alias_expr__4 [_, _, _, st_0] = st_0
erlps__reject_invalid_alias_expr__4 [arg_1, arg_2, arg_3, arg_4]
  =
  (EXC.function_clause unit)
erlps__reject_invalid_alias_expr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reject_invalid_alias__4 :: ErlangFun
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "bin"),
                                              line_0, _]),
                                (ErlangTuple [(ErlangAtom "bin"), _, _]), _,
                                st_1]
  =
  (erlps__add_error__3
     [line_0, (ErlangAtom "illegal_bin_pattern"), st_1])
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "map"),
                                              _line_0, ps1_1]),
                                (ErlangTuple [(ErlangAtom "map"), _, ps2_2]),
                                vt_3, st0_4]
  =
  let   
    fun_24 =
      (ErlangFun 2
         let
           lambda_5 [(ErlangTuple [(ErlangAtom "map_field_exact"), l_8,
                                   (ErlangTuple [(ErlangAtom "var"), _, k_9]),
                                   _v_10]),
                     sti_11]
             =
             let case_12 = (erlps__is_var_bound__2 [k_9, vt_3])
             in
               case case_12 of
                 (ErlangAtom "true") -> sti_11
                 (ErlangAtom "false") ->
                   let arg_16 = (ErlangTuple [(ErlangAtom "unbound_var"), k_9])
                   in (erlps__add_error__3 [l_8, arg_16, sti_11])
                 something_else -> (EXC.case_clause something_else)
           lambda_5 [(ErlangTuple [(ErlangAtom "map_field_exact"), _l_20,
                                   _k_21, _v_22]),
                     sti_23]
             =
             sti_23
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    arg_26 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [fun_24, st0_4, ps1_1])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [fun_24, arg_26, ps2_2])
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "cons"),
                                              _, h1_0, t1_1]),
                                (ErlangTuple [(ErlangAtom "cons"), _, h2_2,
                                              t2_3]),
                                vt_4, st0_5]
  =
  let
    st_10 =
      (erlps__reject_invalid_alias__4 [h1_0, h2_2, vt_4, st0_5])
  in (erlps__reject_invalid_alias__4 [t1_1, t2_3, vt_4, st_10])
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "tuple"),
                                              _, es1_0]),
                                (ErlangTuple [(ErlangAtom "tuple"), _, es2_1]),
                                vt_2, st_3]
  =
  (erlps__reject_invalid_alias_list__4 [es1_0, es2_1, vt_2, st_3])
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "record"),
                                              _, name1_0, pfs1_1]),
                                (ErlangTuple [(ErlangAtom "record"), _, name2_2,
                                              pfs2_3]),
                                vt_4,
                                st_6@(ErlangTuple [(ErlangAtom "lint"), _, _, _,
                                                   _, _, _, recs_5, _, _, _, _,
                                                   _, _, _, _, _, _, _, _, _, _,
                                                   _, _, _, _, _, _, _, _, _, _,
                                                   _, _, _])]
  =
  case recs_5 of
    (ErlangMap map_8) | (DM.Just (ErlangTuple [_line2_11,
                                               fields2_12])) <-
                          ((Map.lookup name2_2 map_8))
                      , (DM.Just (ErlangTuple [_line1_9, fields1_10])) <-
                          ((Map.lookup name1_0 map_8)) ->
      (erlps__reject_invalid_alias_rec__6
         [pfs1_1, pfs2_3, fields1_10, fields2_12, vt_4, st_6])
    (ErlangMap map_19) -> st_6
    something_else -> (EXC.case_clause something_else)
erlps__reject_invalid_alias__4 [(ErlangTuple [(ErlangAtom "match"),
                                              _, p1_0, p2_1]),
                                p_2, vt_3, st0_4]
  =
  let
    st_9 = (erlps__reject_invalid_alias__4 [p1_0, p_2, vt_3, st0_4])
  in (erlps__reject_invalid_alias__4 [p2_1, p_2, vt_3, st_9])
erlps__reject_invalid_alias__4 [p_0,
                                m_1@(ErlangTuple [(ErlangAtom "match"), _, _,
                                                  _]),
                                vt_2, st_3]
  =
  (erlps__reject_invalid_alias__4 [m_1, p_0, vt_2, st_3])
erlps__reject_invalid_alias__4 [_p1_0, _p2_1, _vt_2, st_3] = st_3
erlps__reject_invalid_alias__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__reject_invalid_alias__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reject_invalid_alias_list__4 :: ErlangFun
erlps__reject_invalid_alias_list__4 [(ErlangCons e1_0 es1_1),
                                     (ErlangCons e2_2 es2_3), vt_4, st0_5]
  =
  let
    st_10 =
      (erlps__reject_invalid_alias__4 [e1_0, e2_2, vt_4, st0_5])
  in
    (erlps__reject_invalid_alias_list__4 [es1_1, es2_3, vt_4, st_10])
erlps__reject_invalid_alias_list__4 [_, _, _, st_0] = st_0
erlps__reject_invalid_alias_list__4 [arg_1, arg_2, arg_3, arg_4]
  =
  (EXC.function_clause unit)
erlps__reject_invalid_alias_list__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__reject_invalid_alias_rec__6 :: ErlangFun
erlps__reject_invalid_alias_rec__6 [pfsa0_0, pfsb0_1, fieldsa0_2,
                                    fieldsb0_3, vt_4, st_5]
  =
  let    pfsa1_7 = (erlps__rbia_field_vars__1 [pfsa0_0])
  in let pfsb1_9 = (erlps__rbia_field_vars__1 [pfsb0_1])
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [fieldsa0_2])
  in let
    fieldsa1_14 =
      (erlps__rbia_fields__3
         [arg_10, (ErlangInt (DBI.fromInt 0)), ErlangEmptyList])
  in let
    arg_15 =
      (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [fieldsb0_3])
  in let
    fieldsb1_19 =
      (erlps__rbia_fields__3
         [arg_15, (ErlangInt (DBI.fromInt 0)), ErlangEmptyList])
  in let
    fieldsa_21 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__1"
         [fieldsa1_14])
  in let
    pfsa_23 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__1" [pfsa1_7])
  in let
    a_28 =
      (BIF.do_remote_fun_call "Sofs" "erlps__join__4"
         [fieldsa_21, (ErlangInt (DBI.fromInt 1)), pfsa_23,
          (ErlangInt (DBI.fromInt 1))])
  in let
    fieldsb_30 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__1"
         [fieldsb1_19])
  in let
    pfsb_32 =
      (BIF.do_remote_fun_call "Sofs" "erlps__relation__1" [pfsb1_9])
  in let
    b_37 =
      (BIF.do_remote_fun_call "Sofs" "erlps__join__4"
         [fieldsb_30, (ErlangInt (DBI.fromInt 1)), pfsb_32,
          (ErlangInt (DBI.fromInt 1))])
  in let
    c_42 =
      (BIF.do_remote_fun_call "Sofs" "erlps__join__4"
         [a_28, (ErlangInt (DBI.fromInt 2)), b_37,
          (ErlangInt (DBI.fromInt 2))])
  in let
    tup_el_45 =
      (ErlangFun 1
         let
           lambda_46 [(ErlangTuple [_, _, p1_48, _, p2_49])] =
             (ErlangTuple [p1_48, p2_49])
           lambda_46 [arg_47] = (EXC.function_clause unit)
           lambda_46 args = (EXC.badarity (ErlangFun 1 lambda_46) args)
         in lambda_46)
  in let
    arg_43 = (ErlangTuple [(ErlangAtom "external"), tup_el_45])
  in let
    d_53 =
      (BIF.do_remote_fun_call "Sofs" "erlps__projection__2"
         [arg_43, c_42])
  in let
    e_55 =
      (BIF.do_remote_fun_call "Sofs" "erlps__to_external__1" [d_53])
  in let
    match_expr_59 =
      (BIF.do_remote_fun_call "Lists" "erlps__unzip__1" [e_55])
  in
    case match_expr_59 of
      (ErlangTuple [ps1_57, ps2_58]) ->
        (erlps__reject_invalid_alias_list__4
           [ps1_57, ps2_58, vt_4, st_5])
      _ -> (EXC.badmatch match_expr_59)
erlps__reject_invalid_alias_rec__6 [arg_64, arg_65, arg_66,
                                    arg_67, arg_68, arg_69]
  =
  (EXC.function_clause unit)
erlps__reject_invalid_alias_rec__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rbia_field_vars__1 :: ErlangFun
erlps__rbia_field_vars__1 [fs_0] =
  (flmap
     (\ lc_4 ->
        case lc_4 of
          (ErlangTuple [(ErlangAtom "record_field"), _,
                        (ErlangTuple [(ErlangAtom "atom"), _, name_2]),
                        pat_3]) ->
            let lc_ret_5 = (ErlangTuple [name_2, pat_3])
            in (ErlangCons lc_ret_5 ErlangEmptyList)
          _ -> ErlangEmptyList)
     fs_0)
erlps__rbia_field_vars__1 [arg_8] = (EXC.function_clause unit)
erlps__rbia_field_vars__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__rbia_fields__3 :: ErlangFun
erlps__rbia_fields__3 [(ErlangCons (ErlangTuple [(ErlangAtom "record_field"),
                                                 _,
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _, name_0]),
                                                 _]) fs_1),
                       i_2, acc_3]
  =
  let   
    arg_5 = (BIF.erlang__op_plus [i_2, (ErlangInt (DBI.fromInt 1))])
  in let head_9 = (ErlangTuple [name_0, i_2])
  in
    (erlps__rbia_fields__3 [fs_1, arg_5, (ErlangCons head_9 acc_3)])
erlps__rbia_fields__3 [(ErlangCons _ fs_0), i_1, acc_2] =
  let
    arg_4 = (BIF.erlang__op_plus [i_1, (ErlangInt (DBI.fromInt 1))])
  in (erlps__rbia_fields__3 [fs_0, arg_4, acc_2])
erlps__rbia_fields__3 [(ErlangEmptyList), _, acc_0] = acc_0
erlps__rbia_fields__3 [arg_1, arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__rbia_fields__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_pattern_expr__1 :: ErlangFun
erlps__is_pattern_expr__1 [expr_0] =
  let case_1 = (erlps__is_pattern_expr_1__1 [expr_0])
  in
    case case_1 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let
          case_3 =
            (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
               [expr_0])
        in
          case case_3 of
            (ErlangTuple [(ErlangAtom "integer"), _, _]) ->
              (ErlangAtom "true")
            (ErlangTuple [(ErlangAtom "char"), _, _]) -> (ErlangAtom "true")
            (ErlangTuple [(ErlangAtom "float"), _, _]) -> (ErlangAtom "true")
            (ErlangTuple [(ErlangAtom "atom"), _, _]) -> (ErlangAtom "true")
            _ -> (ErlangAtom "false")
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__is_pattern_expr__1 [arg_5] = (EXC.function_clause unit)
erlps__is_pattern_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_pattern_expr_1__1 :: ErlangFun
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "char"),
                                           _line_0, _c_1])]
  =
  (ErlangAtom "true")
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "integer"),
                                           _line_0, _i_1])]
  =
  (ErlangAtom "true")
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "float"),
                                           _line_0, _f_1])]
  =
  (ErlangAtom "true")
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "atom"),
                                           _line_0, _a_1])]
  =
  (ErlangAtom "true")
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "tuple"),
                                           _line_0, es_1])]
  =
  let arg_2 = (ErlangFun 1 erlps__is_pattern_expr__1)
  in (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_2, es_1])
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "nil"),
                                           _line_0])]
  =
  (ErlangAtom "true")
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "cons"),
                                           _line_0, h_1, t_2])]
  =
  let lop_3 = (erlps__is_pattern_expr_1__1 [h_1])
  in
    case lop_3 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_pattern_expr_1__1 [t_2])
      _ -> (EXC.badarg1 lop_3)
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "op"),
                                           _line_0, op_1, a_2])]
  =
  let
    lop_3 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__arith_op__2"
         [op_1, (ErlangInt (DBI.fromInt 1))])
  in
    case lop_3 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_pattern_expr_1__1 [a_2])
      _ -> (EXC.badarg1 lop_3)
erlps__is_pattern_expr_1__1 [(ErlangTuple [(ErlangAtom "op"),
                                           _line_0, op_1, a1_2, a2_3])]
  =
  let
    lop_4 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__arith_op__2"
         [op_1, (ErlangInt (DBI.fromInt 2))])
  in
    case lop_4 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let arg_7 = (ErlangFun 1 erlps__is_pattern_expr__1)
        in
          (BIF.do_remote_fun_call "Lists" "erlps__all__2"
             [arg_7, (ErlangCons a1_2 (ErlangCons a2_3 ErlangEmptyList))])
      _ -> (EXC.badarg1 lop_4)
erlps__is_pattern_expr_1__1 [_other_0] = (ErlangAtom "false")
erlps__is_pattern_expr_1__1 [arg_1] = (EXC.function_clause unit)
erlps__is_pattern_expr_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_map__4 :: ErlangFun
erlps__pattern_map__4 [ps_0, vt_1, old_2, st_3] =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [(ErlangTuple [(ErlangAtom "map_field_assoc"), l_8, _,
                                   _]),
                     (ErlangTuple [psvt_9, psnew_10, st0_11])]
             =
             let
               tup_el_14 =
                 (erlps__add_error__3
                    [l_8, (ErlangAtom "illegal_pattern"), st0_11])
             in (ErlangTuple [psvt_9, psnew_10, tup_el_14])
           lambda_5 [(ErlangTuple [(ErlangAtom "map_field_exact"), _l_18,
                                   k_19, v_20]),
                     (ErlangTuple [psvt_21, psnew_22, st0_23])]
             =
             let   
               st1_60 =
                 case st0_23 of
                   (ErlangTuple [(ErlangAtom "lint"), state_26, module_27,
                                 behaviour_28, exports_29, imports_30,
                                 compile_31, records_32, locals_33, no_auto_34,
                                 defined_35, on_load_36, on_load_line_37,
                                 clashes_38, not_deprecated_39, not_removed_40,
                                 func_41, warn_format_42, enabled_warnings_43,
                                 nowarn_bif_clash_44, errors_45, warnings_46,
                                 file_47, recdef_top_48, xqlc_49, called_50,
                                 usage_51, specs_52, callbacks_53,
                                 optional_callbacks_54, types_55, exp_types_56,
                                 in_try_head_57, bvt_58, gexpr_context_59]) ->
                     (ErlangTuple
                        [(ErlangAtom "lint"), state_26, module_27, behaviour_28,
                         exports_29, imports_30, compile_31, records_32,
                         locals_33, no_auto_34, defined_35, on_load_36,
                         on_load_line_37, clashes_38, not_deprecated_39,
                         not_removed_40, func_41, warn_format_42,
                         enabled_warnings_43, nowarn_bif_clash_44, errors_45,
                         warnings_46, file_47, recdef_top_48, xqlc_49,
                         called_50, usage_51, specs_52, callbacks_53,
                         optional_callbacks_54, types_55, exp_types_56,
                         in_try_head_57, bvt_58, (ErlangAtom "map_key")])
                   _ -> (EXC.badrecord (ErlangAtom "lint"))
             in let match_expr_66 = (erlps__gexpr__3 [k_19, vt_1, st1_60])
             in
               case match_expr_66 of
                 (ErlangTuple [kvt_64, st2_65]) ->
                   let
                     match_expr_74 =
                       (erlps__pattern__4 [v_20, vt_1, old_2, st2_65])
                   in
                     case match_expr_74 of
                       (ErlangTuple [vvt_71, vnew_72, st3_73]) ->
                         let   
                           arg_76 = (erlps__vtmerge_pat__2 [kvt_64, vvt_71])
                         in let
                           tup_el_75 = (erlps__vtmerge_pat__2 [arg_76, psvt_21])
                         in let
                           tup_el_80 =
                             (erlps__vtmerge_pat__2 [psnew_22, vnew_72])
                         in (ErlangTuple [tup_el_75, tup_el_80, st3_73])
                       _ -> (EXC.badmatch match_expr_74)
                 _ -> (EXC.badmatch match_expr_66)
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    arg_84 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_4, arg_84, ps_0])
erlps__pattern_map__4 [arg_89, arg_90, arg_91, arg_92] =
  (EXC.function_clause unit)
erlps__pattern_map__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_bin__4 :: ErlangFun
erlps__pattern_bin__4 [es_0, vt_1, old_2, st0_3] =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [e_8, acc_9] =
             (erlps__pattern_element__4 [e_8, vt_1, old_2, acc_9])
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    arg_14 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 0)), ErlangEmptyList, ErlangEmptyList,
          st0_3])
  in let
    match_expr_24 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_4, arg_14, es_0])
  in
    case match_expr_24 of
      (ErlangTuple [_sz_20, esvt_21, esnew_22, st1_23]) ->
        (ErlangTuple [esvt_21, esnew_22, st1_23])
      _ -> (EXC.badmatch match_expr_24)
erlps__pattern_bin__4 [arg_28, arg_29, arg_30, arg_31] =
  (EXC.function_clause unit)
erlps__pattern_bin__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_element__4 :: ErlangFun
erlps__pattern_element__4 [be_3@(ErlangTuple [(ErlangAtom "bin_element"),
                                              line_0,
                                              (ErlangTuple [(ErlangAtom "string"),
                                                            _, _]),
                                              size_1, ts_2]),
                           vt_4, old_5,
                           acc_10@(ErlangTuple [sz_6, esvt_7, esnew_8, st0_9])]
  =
  let case_11 = (erlps__good_string_size_type__2 [size_1, ts_2])
  in
    case case_11 of
      (ErlangAtom "true") ->
        (erlps__pattern_element_1__4 [be_3, vt_4, old_5, acc_10])
      (ErlangAtom "false") ->
        let
          st_21 =
            (erlps__add_error__3
               [line_0, (ErlangAtom "typed_literal_string"), st0_9])
        in (ErlangTuple [sz_6, esvt_7, esnew_8, st_21])
      something_else -> (EXC.case_clause something_else)
erlps__pattern_element__4 [be_0, vt_1, old_2, acc_3] =
  (erlps__pattern_element_1__4 [be_0, vt_1, old_2, acc_3])
erlps__pattern_element__4 [arg_8, arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__pattern_element__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_element_1__4 :: ErlangFun
erlps__pattern_element_1__4 [(ErlangTuple [(ErlangAtom "bin_element"),
                                           line_0, e_1, sz0_2, ts_3]),
                             vt_4, old_5,
                             (ErlangTuple [size0_6, esvt_7, esnew_8, st0_9])]
  =
  let
    match_expr_17 =
      (erlps__pat_bit_expr__4 [e_1, old_5, esnew_8, st0_9])
  in
    case match_expr_17 of
      (ErlangTuple [pevt_14, penew_15, st1_16]) ->
        let
          match_expr_26 =
            (erlps__pat_bit_size__4 [sz0_2, vt_4, esnew_8, st1_16])
        in
          case match_expr_26 of
            (ErlangTuple [sz1_22, szvt_23, sznew_24, st2_25]) ->
              let
                match_expr_34 =
                  (erlps__bit_type__4 [line_0, sz1_22, ts_3, st2_25])
              in
                case match_expr_34 of
                  (ErlangTuple [sz2_31, bt_32, st3_33]) ->
                    let
                      match_expr_41 =
                        (erlps__bit_size_check__4
                           [line_0, sz2_31, bt_32, st3_33])
                    in
                      case match_expr_41 of
                        (ErlangTuple [sz3_39, st4_40]) ->
                          let    case_42 = (ErlangTuple [e_1, sz3_39])
                          in let
                            sz4_49 =
                              case case_42 of
                                (ErlangTuple [(ErlangTuple [(ErlangAtom "string"),
                                                            _, s_45]),
                                              (ErlangAtom "all")]) ->
                                  let rop_47 = (BIF.erlang__length__1 [s_45])
                                  in
                                    (BIF.erlang__op_mult
                                       [(ErlangInt (DBI.fromInt 8)), rop_47])
                                (ErlangTuple [_, _]) -> sz3_39
                                something_else ->
                                  (EXC.case_clause something_else)
                          in let
                            match_expr_57 =
                              (erlps__add_bit_size__5
                                 [line_0, sz4_49, size0_6, (ErlangAtom "false"),
                                  st4_40])
                          in
                            case match_expr_57 of
                              (ErlangTuple [size1_55, st5_56]) ->
                                let   
                                  arg_61 = (erlps__vtmerge__2 [pevt_14, esvt_7])
                                in let
                                  tup_el_59 =
                                    (erlps__vtmerge__2 [szvt_23, arg_61])
                                in let
                                  arg_66 =
                                    (erlps__vtmerge__2 [esnew_8, penew_15])
                                in let
                                  tup_el_64 =
                                    (erlps__vtmerge__2 [sznew_24, arg_66])
                                in
                                  (ErlangTuple
                                     [size1_55, tup_el_59, tup_el_64, st5_56])
                              _ -> (EXC.badmatch match_expr_57)
                        _ -> (EXC.badmatch match_expr_41)
                  _ -> (EXC.badmatch match_expr_34)
            _ -> (EXC.badmatch match_expr_26)
      _ -> (EXC.badmatch match_expr_17)
erlps__pattern_element_1__4 [arg_70, arg_71, arg_72, arg_73] =
  (EXC.function_clause unit)
erlps__pattern_element_1__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__good_string_size_type__2 :: ErlangFun
erlps__good_string_size_type__2 [(ErlangAtom "default"),
                                 (ErlangAtom "default")]
  =
  (ErlangAtom "true")
erlps__good_string_size_type__2 [(ErlangAtom "default"), ts_0] =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [(ErlangAtom "utf8")] = (ErlangAtom "true")
           lambda_2 [(ErlangAtom "utf16")] = (ErlangAtom "true")
           lambda_2 [(ErlangAtom "utf32")] = (ErlangAtom "true")
           lambda_2 [_] = (ErlangAtom "false")
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in (BIF.do_remote_fun_call "Lists" "erlps__any__2" [arg_1, ts_0])
erlps__good_string_size_type__2 [_, _] = (ErlangAtom "false")
erlps__good_string_size_type__2 [arg_0, arg_1] =
  (EXC.function_clause unit)
erlps__good_string_size_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pat_bit_expr__4 :: ErlangFun
erlps__pat_bit_expr__4 [(ErlangTuple [(ErlangAtom "var"), _,
                                      (ErlangAtom "_")]),
                        _old_0, _new_1, st_2]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_2])
erlps__pat_bit_expr__4 [(ErlangTuple [(ErlangAtom "var"), ln_0,
                                      v_1]),
                        old_2, new_3, st_4]
  =
  (erlps__pat_var__5 [v_1, ln_0, old_2, new_3, st_4])
erlps__pat_bit_expr__4 [(ErlangTuple [(ErlangAtom "string"), _,
                                      _]),
                        _old_0, _new_1, st_2]
  =
  (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_2])
erlps__pat_bit_expr__4 [(ErlangTuple [(ErlangAtom "bin"), l_0,
                                      _]),
                        _old_1, _new_2, st_3]
  =
  let
    tup_el_6 =
      (erlps__add_error__3 [l_0, (ErlangAtom "illegal_pattern"), st_3])
  in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, tup_el_6])
erlps__pat_bit_expr__4 [p_0, _old_1, _new_2, st_3] =
  let case_4 = (erlps__is_pattern_expr__1 [p_0])
  in
    case case_4 of
      (ErlangAtom "true") ->
        (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st_3])
      (ErlangAtom "false") ->
        let   
          arg_12 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), p_0])
        in let
          tup_el_11 =
            (erlps__add_error__3
               [arg_12, (ErlangAtom "illegal_pattern"), st_3])
        in (ErlangTuple [ErlangEmptyList, ErlangEmptyList, tup_el_11])
      something_else -> (EXC.case_clause something_else)
erlps__pat_bit_expr__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__pat_bit_expr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pat_bit_size__4 :: ErlangFun
erlps__pat_bit_size__4 [(ErlangAtom "default"), _vt_0, _new_1,
                        st_2]
  =
  (ErlangTuple
     [(ErlangAtom "default"), ErlangEmptyList, ErlangEmptyList, st_2])
erlps__pat_bit_size__4 [(ErlangTuple [(ErlangAtom "var"), lv_0,
                                      v_1]),
                        vt0_2, new0_3, st0_4]
  =
  let
    match_expr_13 =
      (erlps__pat_binsize_var__5 [v_1, lv_0, vt0_2, new0_3, st0_4])
  in
    case match_expr_13 of
      (ErlangTuple [vt_10, new_11, st1_12]) ->
        (ErlangTuple [(ErlangAtom "unknown"), vt_10, new_11, st1_12])
      _ -> (EXC.badmatch match_expr_13)
erlps__pat_bit_size__4 [size_0, vt0_1, new0_2, st0_3] =
  let   
    line_6 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), size_0])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [size_0])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "integer"), line_9, i_10]) | (line_9 ==
                                                                line_6) ->
        (ErlangTuple [i_10, ErlangEmptyList, ErlangEmptyList, st0_3])
      expr_15 ->
        let   
          st1_53 =
            case st0_3 of
              (ErlangTuple [(ErlangAtom "lint"), state_19, module_20,
                            behaviour_21, exports_22, imports_23, compile_24,
                            records_25, locals_26, no_auto_27, defined_28,
                            on_load_29, on_load_line_30, clashes_31,
                            not_deprecated_32, not_removed_33, func_34,
                            warn_format_35, enabled_warnings_36,
                            nowarn_bif_clash_37, errors_38, warnings_39,
                            file_40, recdef_top_41, xqlc_42, called_43,
                            usage_44, specs_45, callbacks_46,
                            optional_callbacks_47, types_48, exp_types_49,
                            in_try_head_50, bvt_51, gexpr_context_52]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_19, module_20, behaviour_21,
                    exports_22, imports_23, compile_24, records_25, locals_26,
                    no_auto_27, defined_28, on_load_29, on_load_line_30,
                    clashes_31, not_deprecated_32, not_removed_33, func_34,
                    warn_format_35, enabled_warnings_36, nowarn_bif_clash_37,
                    errors_38, warnings_39, file_40, recdef_top_41, xqlc_42,
                    called_43, usage_44, specs_45, callbacks_46,
                    optional_callbacks_47, types_48, exp_types_49,
                    in_try_head_50, new0_2, (ErlangAtom "bin_seg_size")])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let match_expr_60 = (erlps__gexpr__3 [size_0, vt0_1, st1_53])
        in
          case match_expr_60 of
            (ErlangTuple [vt_57,
                          st2_59@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _,
                                               _, _, _, _, _, _, _, _, _, _, _,
                                               _, _, _, _, _, _, _, _, _, _, _,
                                               _, _, _, _, _, _, new_58,
                                               _])]) ->
              let   
                record_updt_63 =
                  case st0_3 of
                    (ErlangTuple arr_66) | (DM.Just field_65) <-
                                             ((arr_66 DA.!! 34)) ->
                      field_65
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let
                st3_101 =
                  case st2_59 of
                    (ErlangTuple [(ErlangAtom "lint"), state_67, module_68,
                                  behaviour_69, exports_70, imports_71,
                                  compile_72, records_73, locals_74, no_auto_75,
                                  defined_76, on_load_77, on_load_line_78,
                                  clashes_79, not_deprecated_80, not_removed_81,
                                  func_82, warn_format_83, enabled_warnings_84,
                                  nowarn_bif_clash_85, errors_86, warnings_87,
                                  file_88, recdef_top_89, xqlc_90, called_91,
                                  usage_92, specs_93, callbacks_94,
                                  optional_callbacks_95, types_96, exp_types_97,
                                  in_try_head_98, bvt_99, gexpr_context_100]) ->
                      (ErlangTuple
                         [(ErlangAtom "lint"), state_67, module_68,
                          behaviour_69, exports_70, imports_71, compile_72,
                          records_73, locals_74, no_auto_75, defined_76,
                          on_load_77, on_load_line_78, clashes_79,
                          not_deprecated_80, not_removed_81, func_82,
                          warn_format_83, enabled_warnings_84,
                          nowarn_bif_clash_85, errors_86, warnings_87, file_88,
                          recdef_top_89, xqlc_90, called_91, usage_92, specs_93,
                          callbacks_94, optional_callbacks_95, types_96,
                          exp_types_97, in_try_head_98, (ErlangAtom "none"),
                          record_updt_63])
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let case_102 = (erlps__is_bit_size_illegal__1 [expr_15])
              in let
                st_107 =
                  case case_102 of
                    (ErlangAtom "true") ->
                      (erlps__add_warning__3
                         [line_6, (ErlangAtom "non_integer_bitsize"), st3_101])
                    (ErlangAtom "false") -> st3_101
                    something_else -> (EXC.case_clause something_else)
              in (ErlangTuple [(ErlangAtom "unknown"), vt_57, new_58, st_107])
            _ -> (EXC.badmatch match_expr_60)
      something_else -> (EXC.case_clause something_else)
erlps__pat_bit_size__4 [arg_112, arg_113, arg_114, arg_115] =
  (EXC.function_clause unit)
erlps__pat_bit_size__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_bit_size_illegal__1 :: ErlangFun
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "atom"),
                                             _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "bin"),
                                             _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "cons"),
                                             _, _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "float"),
                                             _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "map"),
                                             _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "nil"),
                                             _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [(ErlangTuple [(ErlangAtom "tuple"),
                                             _, _])]
  =
  (ErlangAtom "true")
erlps__is_bit_size_illegal__1 [_] = (ErlangAtom "false")
erlps__is_bit_size_illegal__1 [arg_0] =
  (EXC.function_clause unit)
erlps__is_bit_size_illegal__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_bin__4 :: ErlangFun
erlps__expr_bin__4 [es_0, vt_1, st0_2, check_3] =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [e_8, acc_9] =
             (erlps__bin_element__4 [e_8, vt_1, acc_9, check_3])
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let
    arg_14 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 0)), ErlangEmptyList, st0_2])
  in let
    match_expr_22 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_4, arg_14, es_0])
  in
    case match_expr_22 of
      (ErlangTuple [_sz_19, esvt_20, st1_21]) ->
        (ErlangTuple [esvt_20, st1_21])
      _ -> (EXC.badmatch match_expr_22)
erlps__expr_bin__4 [arg_25, arg_26, arg_27, arg_28] =
  (EXC.function_clause unit)
erlps__expr_bin__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bin_element__4 :: ErlangFun
erlps__bin_element__4 [(ErlangTuple [(ErlangAtom "bin_element"),
                                     line_0, e_1, sz0_2, ts_3]),
                       vt_4, (ErlangTuple [size0_5, esvt_6, st0_7]), check_8]
  =
  let
    match_expr_15 =
      (BIF.erlang__apply__2
         [check_8,
          (ErlangCons e_1
             (ErlangCons vt_4 (ErlangCons st0_7 ErlangEmptyList)))])
  in
    case match_expr_15 of
      (ErlangTuple [vt1_13, st1_14]) ->
        let
          match_expr_23 =
            (erlps__bit_size__4 [sz0_2, vt_4, st1_14, check_8])
        in
          case match_expr_23 of
            (ErlangTuple [sz1_20, vt2_21, st2_22]) ->
              let
                match_expr_31 =
                  (erlps__bit_type__4 [line_0, sz1_20, ts_3, st2_22])
              in
                case match_expr_31 of
                  (ErlangTuple [sz2_28, bt_29, st3_30]) ->
                    let
                      match_expr_38 =
                        (erlps__bit_size_check__4
                           [line_0, sz2_28, bt_29, st3_30])
                    in
                      case match_expr_38 of
                        (ErlangTuple [sz3_36, st4_37]) ->
                          let
                            match_expr_46 =
                              (erlps__add_bit_size__5
                                 [line_0, sz3_36, size0_5, (ErlangAtom "true"),
                                  st4_37])
                          in
                            case match_expr_46 of
                              (ErlangTuple [size1_44, st5_45]) ->
                                let
                                  tup_el_48 =
                                    (erlps__vtmerge__1
                                       [(ErlangCons vt2_21
                                           (ErlangCons vt1_13
                                              (ErlangCons esvt_6
                                                 ErlangEmptyList)))])
                                in (ErlangTuple [size1_44, tup_el_48, st5_45])
                              _ -> (EXC.badmatch match_expr_46)
                        _ -> (EXC.badmatch match_expr_38)
                  _ -> (EXC.badmatch match_expr_31)
            _ -> (EXC.badmatch match_expr_23)
      _ -> (EXC.badmatch match_expr_15)
erlps__bin_element__4 [arg_57, arg_58, arg_59, arg_60] =
  (EXC.function_clause unit)
erlps__bin_element__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_size__4 :: ErlangFun
erlps__bit_size__4 [(ErlangAtom "default"), _vt_0, st_1,
                    _check_2]
  =
  (ErlangTuple [(ErlangAtom "default"), ErlangEmptyList, st_1])
erlps__bit_size__4 [(ErlangTuple [(ErlangAtom "atom"), _line_0,
                                  (ErlangAtom "all")]),
                    _vt_1, st_2, _check_3]
  =
  (ErlangTuple [(ErlangAtom "all"), ErlangEmptyList, st_2])
erlps__bit_size__4 [size_0, vt_1, st_2, check_3] =
  let    info_5 = (erlps__is_guard_test2_info__1 [st_2])
  in let case_6 = (erlps__is_gexpr__2 [size_0, info_5])
  in
    case case_6 of
      (ErlangAtom "true") ->
        let
          case_9 =
            (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
               [size_0])
        in
          case case_9 of
            (ErlangTuple [(ErlangAtom "integer"), _iln_11, i_12]) ->
              (ErlangTuple [i_12, ErlangEmptyList, st_2])
            _other_16 ->
              let
                match_expr_23 =
                  (BIF.erlang__apply__2
                     [check_3,
                      (ErlangCons size_0
                         (ErlangCons vt_1 (ErlangCons st_2 ErlangEmptyList)))])
              in
                case match_expr_23 of
                  (ErlangTuple [evt_21, st1_22]) ->
                    (ErlangTuple [(ErlangAtom "unknown"), evt_21, st1_22])
                  _ -> (EXC.badmatch match_expr_23)
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let
          match_expr_33 =
            (BIF.erlang__apply__2
               [check_3,
                (ErlangCons size_0
                   (ErlangCons vt_1 (ErlangCons st_2 ErlangEmptyList)))])
        in
          case match_expr_33 of
            (ErlangTuple [evt_31, st1_32]) ->
              (ErlangTuple [(ErlangAtom "unknown"), evt_31, st1_32])
            _ -> (EXC.badmatch match_expr_33)
      something_else -> (EXC.case_clause something_else)
erlps__bit_size__4 [arg_37, arg_38, arg_39, arg_40] =
  (EXC.function_clause unit)
erlps__bit_size__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_type__4 :: ErlangFun
erlps__bit_type__4 [line_0, size0_1, type_2, st_3] =
  let
    case_4 =
      (BIF.do_remote_fun_call "Erl.Bits" "erlps__set_bit_type__2"
         [size0_1, type_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "ok"), size1_7, bt_8]) ->
        (ErlangTuple [size1_7, bt_8, st_3])
      (ErlangTuple [(ErlangAtom "error"), what_12]) ->
        let
          match_expr_17 =
            (BIF.do_remote_fun_call "Erl.Bits" "erlps__set_bit_type__2"
               [(ErlangAtom "default"), ErlangEmptyList])
        in
          case match_expr_17 of
            (ErlangTuple [(ErlangAtom "ok"), size1_15, bt_16]) ->
              let tup_el_20 = (erlps__add_error__3 [line_0, what_12, st_3])
              in (ErlangTuple [size1_15, bt_16, tup_el_20])
            _ -> (EXC.badmatch match_expr_17)
      something_else -> (EXC.case_clause something_else)
erlps__bit_type__4 [arg_24, arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__bit_type__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bit_size_check__4 :: ErlangFun
erlps__bit_size_check__4 [_line_0, (ErlangAtom "unknown"), _,
                          st_1]
  =
  (ErlangTuple [(ErlangAtom "unknown"), st_1])
erlps__bit_size_check__4 [_line_0, (ErlangAtom "undefined"),
                          (ErlangTuple [(ErlangAtom "bittype"), type_1, _, _,
                                        _]),
                          st_2]
  =
  let   
    lop_4 = (BIF.erlang__op_exactEq [type_1, (ErlangAtom "utf8")])
  in let
    rop_7 = (BIF.erlang__op_exactEq [type_1, (ErlangAtom "utf16")])
  in let lop_3 = (BIF.erlang__op_or [lop_4, rop_7])
  in let
    rop_10 = (BIF.erlang__op_exactEq [type_1, (ErlangAtom "utf32")])
  in let match_expr_13 = (BIF.erlang__op_or [lop_3, rop_10])
  in
    case match_expr_13 of
      (ErlangAtom "true") ->
        (ErlangTuple [(ErlangAtom "undefined"), st_2])
      _ -> (EXC.badmatch match_expr_13)
erlps__bit_size_check__4 [line_0, (ErlangAtom "all"),
                          (ErlangTuple [(ErlangAtom "bittype"), type_1, _, _,
                                        _]),
                          st_2]
  =
  case type_1 of
    (ErlangAtom "binary") -> (ErlangTuple [(ErlangAtom "all"), st_2])
    _ ->
      let
        tup_el_7 =
          (erlps__add_error__3
             [line_0, (ErlangAtom "illegal_bitsize"), st_2])
      in (ErlangTuple [(ErlangAtom "unknown"), tup_el_7])
    something_else -> (EXC.case_clause something_else)
erlps__bit_size_check__4 [line_0, size_1,
                          (ErlangTuple [(ErlangAtom "bittype"), type_2, unit_3,
                                        _, _]),
                          st_4]
  =
  let    sz_7 = (BIF.erlang__op_mult [unit_3, size_1])
  in let
    st2_12 = (erlps__elemtype_check__4 [line_0, type_2, sz_7, st_4])
  in (ErlangTuple [sz_7, st2_12])
erlps__bit_size_check__4 [arg_15, arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__bit_size_check__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__elemtype_check__4 :: ErlangFun
erlps__elemtype_check__4 [_line_0, (ErlangAtom "float"),
                          (ErlangInt num_1), st_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 32))) =
  st_2
erlps__elemtype_check__4 [_line_0, (ErlangAtom "float"),
                          (ErlangInt num_1), st_2]
  | ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 64))) =
  st_2
erlps__elemtype_check__4 [line_0, (ErlangAtom "float"), _size_1,
                          st_2]
  =
  let    tup_el_6 = (make_string "float")
  in let
    arg_4 = (ErlangTuple [(ErlangAtom "bad_bitsize"), tup_el_6])
  in (erlps__add_warning__3 [line_0, arg_4, st_2])
erlps__elemtype_check__4 [_line_0, _type_1, _size_2, st_3] = st_3
erlps__elemtype_check__4 [arg_4, arg_5, arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__elemtype_check__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_bit_size__5 :: ErlangFun
erlps__add_bit_size__5 [line_0, _sz1_1, (ErlangAtom "all"),
                        (ErlangAtom "false"), st_2]
  =
  let
    tup_el_4 =
      (erlps__add_error__3
         [line_0, (ErlangAtom "unsized_binary_not_at_end"), st_2])
  in (ErlangTuple [(ErlangAtom "all"), tup_el_4])
erlps__add_bit_size__5 [_line_0, _sz1_1, (ErlangAtom "all"),
                        (ErlangAtom "true"), st_2]
  =
  (ErlangTuple [(ErlangAtom "all"), st_2])
erlps__add_bit_size__5 [_line_0, (ErlangAtom "all"), _sz2_1,
                        _b_2, st_3]
  =
  (ErlangTuple [(ErlangAtom "all"), st_3])
erlps__add_bit_size__5 [_line_0, (ErlangAtom "undefined"),
                        _sz2_1, _b_2, st_3]
  =
  (ErlangTuple [(ErlangAtom "undefined"), st_3])
erlps__add_bit_size__5 [_line_0, (ErlangAtom "unknown"), _sz2_1,
                        _b_2, st_3]
  =
  (ErlangTuple [(ErlangAtom "unknown"), st_3])
erlps__add_bit_size__5 [_line_0, _sz1_1,
                        (ErlangAtom "undefined"), _b_2, st_3]
  =
  (ErlangTuple [(ErlangAtom "unknown"), st_3])
erlps__add_bit_size__5 [_line_0, _sz1_1, (ErlangAtom "unknown"),
                        _b_2, st_3]
  =
  (ErlangTuple [(ErlangAtom "unknown"), st_3])
erlps__add_bit_size__5 [_line_0, sz1_1, sz2_2, _b_3, st_4] =
  let tup_el_5 = (BIF.erlang__op_plus [sz1_1, sz2_2])
  in (ErlangTuple [tup_el_5, st_4])
erlps__add_bit_size__5 [arg_9, arg_10, arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__add_bit_size__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard__3 :: ErlangFun
erlps__guard__3 [(ErlangCons l_0 r_1), vt_2, st0_3]
  | (isEList l_0) =
  let match_expr_9 = (erlps__guard_tests__3 [l_0, vt_2, st0_3])
  in
    case match_expr_9 of
      (ErlangTuple [gvt_7, st1_8]) ->
        let    arg_11 = (erlps__vtupdate__2 [gvt_7, vt_2])
        in let match_expr_17 = (erlps__guard__3 [r_1, arg_11, st1_8])
        in
          case match_expr_17 of
            (ErlangTuple [gsvt_15, st2_16]) ->
              let tup_el_18 = (erlps__vtupdate__2 [gvt_7, gsvt_15])
              in (ErlangTuple [tup_el_18, st2_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_9)
erlps__guard__3 [l_0, vt_1, st0_2] =
  (erlps__guard_tests__3 [l_0, vt_1, st0_2])
erlps__guard__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__guard__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_tests__3 :: ErlangFun
erlps__guard_tests__3 [(ErlangCons g_0 gs_1), vt_2, st0_3] =
  let match_expr_9 = (erlps__guard_test__3 [g_0, vt_2, st0_3])
  in
    case match_expr_9 of
      (ErlangTuple [gvt_7, st1_8]) ->
        let    arg_11 = (erlps__vtupdate__2 [gvt_7, vt_2])
        in let
          match_expr_17 = (erlps__guard_tests__3 [gs_1, arg_11, st1_8])
        in
          case match_expr_17 of
            (ErlangTuple [gsvt_15, st2_16]) ->
              let tup_el_18 = (erlps__vtupdate__2 [gvt_7, gsvt_15])
              in (ErlangTuple [tup_el_18, st2_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_9)
erlps__guard_tests__3 [(ErlangEmptyList), _vt_0, st_1] =
  (ErlangTuple [ErlangEmptyList, st_1])
erlps__guard_tests__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__guard_tests__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_test__3 :: ErlangFun
erlps__guard_test__3 [g_0, vt_1, st0_2] =
  let st1_5 = (erlps__obsolete_guard__2 [g_0, st0_2])
  in (erlps__guard_test2__3 [g_0, vt_1, st1_5])
erlps__guard_test__3 [arg_9, arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__guard_test__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__guard_test2__3 :: ErlangFun
erlps__guard_test2__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                                     (ErlangTuple [(ErlangAtom "atom"), lr_1,
                                                   (ErlangAtom "record")]),
                                     (ErlangCons e_2 (ErlangCons a_3 (ErlangEmptyList)))]),
                       vt_4, st0_5]
  =
  let   
    tup_el_9 =
      (ErlangTuple
         [(ErlangAtom "atom"), lr_1, (ErlangAtom "is_record")])
  in let
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "call"), line_0, tup_el_9,
          (ErlangCons e_2 (ErlangCons a_3 ErlangEmptyList))])
  in (erlps__gexpr__3 [arg_6, vt_4, st0_5])
erlps__guard_test2__3 [g_4@(ErlangTuple [(ErlangAtom "call"),
                                         line_0,
                                         (ErlangTuple [(ErlangAtom "atom"),
                                                       _la_1, f_2]),
                                         as_3]),
                       vt_5, st0_6]
  =
  let match_expr_12 = (erlps__gexpr_list__3 [as_3, vt_5, st0_6])
  in
    case match_expr_12 of
      (ErlangTuple [asvt_10, st1_11]) ->
        let    a_14 = (BIF.erlang__length__1 [as_3])
        in let
          case_15 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__type_test__2"
               [f_2, a_14])
        in
          case case_15 of
            (ErlangAtom "true") | (((/=) f_2 (ErlangAtom "is_record")) &&
                                     ((/=) a_14 (ErlangInt (DBI.fromInt 2)))) ->
              let    arg_20 = (ErlangTuple [f_2, a_14])
              in let case_18 = (erlps__no_guard_bif_clash__2 [st1_11, arg_20])
              in
                case case_18 of
                  (ErlangAtom "false") ->
                    let    tup_el_28 = (ErlangTuple [f_2, a_14])
                    in let
                      arg_26 =
                        (ErlangTuple
                           [(ErlangAtom "illegal_guard_local_call"), tup_el_28])
                    in let
                      tup_el_24 = (erlps__add_error__3 [line_0, arg_26, st1_11])
                    in (ErlangTuple [asvt_10, tup_el_24])
                  (ErlangAtom "true") -> (ErlangTuple [asvt_10, st1_11])
                  something_else -> (EXC.case_clause something_else)
            _ -> (erlps__gexpr__3 [g_4, vt_5, st0_6])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_12)
erlps__guard_test2__3 [g_0, vt_1, st_2] =
  (erlps__gexpr__3 [g_0, vt_1, st_2])
erlps__guard_test2__3 [arg_6, arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__guard_test2__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gexpr__3 :: ErlangFun
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "var"), line_0, v_1]),
                 vt_2, st_3]
  =
  (erlps__expr_var__4 [v_1, line_0, vt_2, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "char"), _line_0,
                               _c_1]),
                 _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "integer"), _line_0,
                               _i_1]),
                 _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "float"), _line_0,
                               _f_1]),
                 _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "atom"), line_0,
                               a_1]),
                 _vt_2, st_3]
  =
  let tup_el_5 = (erlps__keyword_warning__3 [line_0, a_1, st_3])
  in (ErlangTuple [ErlangEmptyList, tup_el_5])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "string"), _line_0,
                               _s_1]),
                 _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "nil"), _line_0]),
                 _vt_1, st_2]
  =
  (ErlangTuple [ErlangEmptyList, st_2])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "cons"), _line_0, h_1,
                               t_2]),
                 vt_3, st_4]
  =
  (erlps__gexpr_list__3
     [(ErlangCons h_1 (ErlangCons t_2 ErlangEmptyList)), vt_3, st_4])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "tuple"), _line_0,
                               es_1]),
                 vt_2, st_3]
  =
  (erlps__gexpr_list__3 [es_1, vt_2, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "map"), _line_0,
                               es_1]),
                 vt_2, st_3]
  =
  let    arg_6 = (erlps__check_assoc_fields__2 [es_1, st_3])
  in let arg_9 = (ErlangFun 3 erlps__gexpr_list__3)
  in (erlps__map_fields__4 [es_1, vt_2, arg_6, arg_9])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "map"), _line_0,
                               src_1, es_2]),
                 vt_3, st_4]
  =
  let match_expr_10 = (erlps__gexpr__3 [src_1, vt_3, st_4])
  in
    case match_expr_10 of
      (ErlangTuple [svt_8, st1_9]) ->
        let    arg_14 = (ErlangFun 3 erlps__gexpr_list__3)
        in let
          match_expr_17 =
            (erlps__map_fields__4 [es_2, vt_3, st1_9, arg_14])
        in
          case match_expr_17 of
            (ErlangTuple [fvt_15, st2_16]) ->
              let tup_el_18 = (erlps__vtmerge__2 [svt_8, fvt_15])
              in (ErlangTuple [tup_el_18, st2_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_10)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "record_index"),
                               line_0, name_1, field_2]),
                 _vt_3, st_4]
  =
  let
    arg_8 =
      (ErlangFun 2
         let
           lambda_9 [dfs_12, st1_13] =
             (erlps__record_field__4 [field_2, name_1, dfs_12, st1_13])
           lambda_9 [arg_10, arg_11] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 2 lambda_9) args)
         in lambda_9)
  in (erlps__check_record__4 [line_0, name_1, st_4, arg_8])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "record_field"),
                               line_0, rec_1, name_2, field_3]),
                 vt_4, st0_5]
  =
  let match_expr_11 = (erlps__gexpr__3 [rec_1, vt_4, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [rvt_9, st1_10]) ->
        let   
          arg_15 =
            (ErlangFun 2
               let
                 lambda_16 [dfs_19, st_20] =
                   (erlps__record_field__4 [field_3, name_2, dfs_19, st_20])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in let
          match_expr_27 =
            (erlps__check_record__4 [line_0, name_2, st1_10, arg_15])
        in
          case match_expr_27 of
            (ErlangTuple [fvt_25, st2_26]) ->
              let tup_el_28 = (erlps__vtmerge__2 [rvt_9, fvt_25])
              in (ErlangTuple [tup_el_28, st2_26])
            _ -> (EXC.badmatch match_expr_27)
      _ -> (EXC.badmatch match_expr_11)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "record"), line_0,
                               name_1, inits_2]),
                 vt_3, st_4]
  =
  let
    arg_8 =
      (ErlangFun 2
         let
           lambda_9 [dfs_12, st1_13] =
             (erlps__ginit_fields__6
                [inits_2, line_0, name_1, dfs_12, vt_3, st1_13])
           lambda_9 [arg_10, arg_11] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 2 lambda_9) args)
         in lambda_9)
  in (erlps__check_record__4 [line_0, name_1, st_4, arg_8])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "bin"), _line_0,
                               fs_1]),
                 vt_2, st_3]
  =
  let arg_7 = (ErlangFun 3 erlps__gexpr__3)
  in (erlps__expr_bin__4 [fs_1, vt_2, st_3, arg_7])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), _line_0,
                               (ErlangTuple [(ErlangAtom "atom"), _lr_1,
                                             (ErlangAtom "is_record")]),
                               (ErlangCons e_2 (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                         ln_3,
                                                                         name_4]) (ErlangEmptyList)))]),
                 vt_5, st0_6]
  =
  let match_expr_12 = (erlps__gexpr__3 [e_2, vt_5, st0_6])
  in
    case match_expr_12 of
      (ErlangTuple [rvt_10, st1_11]) ->
        let tup_el_14 = (erlps__exist_record__3 [ln_3, name_4, st1_11])
        in (ErlangTuple [rvt_10, tup_el_14])
      _ -> (EXC.badmatch match_expr_12)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "atom"), _lr_1,
                                             (ErlangAtom "is_record")]),
                               (ErlangCons e_2 (ErlangCons r_3 (ErlangEmptyList)))]),
                 vt_4, st0_5]
  =
  let
    match_expr_15 =
      (erlps__gexpr_list__3
         [(ErlangCons e_2 (ErlangCons r_3 ErlangEmptyList)), vt_4, st0_5])
  in
    case match_expr_15 of
      (ErlangTuple [asvt_13, st1_14]) ->
        let
          tup_el_17 =
            (erlps__add_error__3
               [line_0, (ErlangAtom "illegal_guard_expr"), st1_14])
        in (ErlangTuple [asvt_13, tup_el_17])
      _ -> (EXC.badmatch match_expr_15)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "remote"), _lr_1,
                                             (ErlangTuple [(ErlangAtom "atom"),
                                                           _lm_2,
                                                           (ErlangAtom "erlang")]),
                                             (ErlangTuple [(ErlangAtom "atom"),
                                                           lf_3,
                                                           (ErlangAtom "is_record")])]),
                               (ErlangCons e_4 (ErlangCons a_5 (ErlangEmptyList)))]),
                 vt_6, st0_7]
  =
  let   
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "atom"), lf_3, (ErlangAtom "is_record")])
  in let
    arg_8 =
      (ErlangTuple
         [(ErlangAtom "call"), line_0, tup_el_11,
          (ErlangCons e_4 (ErlangCons a_5 ErlangEmptyList))])
  in (erlps__gexpr__3 [arg_8, vt_6, st0_7])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "atom"), _lr_1,
                                             (ErlangAtom "is_record")]),
                               (ErlangCons e0_2 (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                          _,
                                                                          _name_3]) (ErlangCons (ErlangTuple [(ErlangAtom "integer"),
                                                                                                              _,
                                                                                                              _]) (ErlangEmptyList))))]),
                 vt_4, st0_5]
  =
  let match_expr_11 = (erlps__gexpr__3 [e0_2, vt_4, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [e_9, st1_10]) ->
        let   
          arg_14 =
            (ErlangTuple
               [(ErlangAtom "is_record"), (ErlangInt (DBI.fromInt 3))])
        in let case_12 = (erlps__no_guard_bif_clash__2 [st0_5, arg_14])
        in
          case case_12 of
            (ErlangAtom "true") -> (ErlangTuple [e_9, st1_10])
            (ErlangAtom "false") ->
              let   
                tup_el_24 =
                  (ErlangTuple
                     [(ErlangAtom "is_record"), (ErlangInt (DBI.fromInt 3))])
              in let
                arg_22 =
                  (ErlangTuple
                     [(ErlangAtom "illegal_guard_local_call"), tup_el_24])
              in let tup_el_20 = (erlps__add_error__3 [line_0, arg_22, st1_10])
              in (ErlangTuple [e_9, tup_el_20])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_11)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "atom"), _lr_1,
                                             (ErlangAtom "is_record")]),
                               asvt0_2@(ErlangCons _ (ErlangCons _ (ErlangCons _ (ErlangEmptyList))))]),
                 vt_3, st0_4]
  =
  let match_expr_10 = (erlps__gexpr_list__3 [asvt0_2, vt_3, st0_4])
  in
    case match_expr_10 of
      (ErlangTuple [asvt_8, st1_9]) ->
        let
          tup_el_12 =
            (erlps__add_error__3
               [line_0, (ErlangAtom "illegal_guard_expr"), st1_9])
        in (ErlangTuple [asvt_8, tup_el_12])
      _ -> (EXC.badmatch match_expr_10)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "remote"), _,
                                             (ErlangTuple [(ErlangAtom "atom"),
                                                           _,
                                                           (ErlangAtom "erlang")]),
                                             isr_1@(ErlangTuple [(ErlangAtom "atom"),
                                                                 _,
                                                                 (ErlangAtom "is_record")])]),
                               args_2@(ErlangCons _ (ErlangCons _ (ErlangCons _ (ErlangEmptyList))))]),
                 vt_3, st0_4]
  =
  let
    arg_5 =
      (ErlangTuple [(ErlangAtom "call"), line_0, isr_1, args_2])
  in (erlps__gexpr__3 [arg_5, vt_3, st0_4])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "atom"), _la_1, f_2]),
                               as_3]),
                 vt_4, st0_5]
  =
  let match_expr_11 = (erlps__gexpr_list__3 [as_3, vt_4, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [asvt_9, st1_10]) ->
        let    a_13 = (BIF.erlang__length__1 [as_3])
        in let
          lop_15 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__guard_bif__2"
               [f_2, a_13])
        in let
          case_14 =
            case lop_15 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                let arg_19 = (ErlangTuple [f_2, a_13])
                in (erlps__no_guard_bif_clash__2 [st1_10, arg_19])
              _ -> (EXC.badarg1 lop_15)
        in
          case case_14 of
            (ErlangAtom "true") ->
              let
                match_expr_24 =
                  (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
                     [f_2, a_13])
              in
                case match_expr_24 of
                  (ErlangAtom "true") -> (ErlangTuple [asvt_9, st1_10])
                  _ -> (EXC.badmatch match_expr_24)
            (ErlangAtom "false") ->
              let   
                arg_29 =
                  case st1_10 of
                    (ErlangTuple arr_32) | (DM.Just field_31) <-
                                             ((arr_32 DA.!! 8)) ->
                      field_31
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let arg_33 = (ErlangTuple [f_2, a_13])
              in let lop_28 = (erlps__is_local_function__2 [arg_29, arg_33])
              in let
                case_27 =
                  case lop_28 of
                    (ErlangAtom "true") -> (ErlangAtom "true")
                    (ErlangAtom "false") ->
                      let   
                        arg_36 =
                          case st1_10 of
                            (ErlangTuple arr_39) | (DM.Just field_38) <-
                                                     ((arr_39 DA.!! 5)) ->
                              field_38
                            _ -> (EXC.badrecord (ErlangAtom "lint"))
                      in let arg_40 = (ErlangTuple [f_2, a_13])
                      in (erlps__is_imported_function__2 [arg_36, arg_40])
                    _ -> (EXC.badarg1 lop_28)
              in
                case case_27 of
                  (ErlangAtom "true") ->
                    let    tup_el_48 = (ErlangTuple [f_2, a_13])
                    in let
                      arg_46 =
                        (ErlangTuple
                           [(ErlangAtom "illegal_guard_local_call"), tup_el_48])
                    in let
                      tup_el_44 = (erlps__add_error__3 [line_0, arg_46, st1_10])
                    in (ErlangTuple [asvt_9, tup_el_44])
                  _ ->
                    let
                      tup_el_53 =
                        (erlps__add_error__3
                           [line_0, (ErlangAtom "illegal_guard_expr"), st1_10])
                    in (ErlangTuple [asvt_9, tup_el_53])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_11)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "remote"), _lr_1,
                                             (ErlangTuple [(ErlangAtom "atom"),
                                                           _lm_2,
                                                           (ErlangAtom "erlang")]),
                                             (ErlangTuple [(ErlangAtom "atom"),
                                                           _lf_3, f_4])]),
                               as_5]),
                 vt_6, st0_7]
  =
  let match_expr_13 = (erlps__gexpr_list__3 [as_5, vt_6, st0_7])
  in
    case match_expr_13 of
      (ErlangTuple [asvt_11, st1_12]) ->
        let    a_15 = (BIF.erlang__length__1 [as_5])
        in let
          lop_17 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__guard_bif__2"
               [f_4, a_15])
        in let
          case_16 =
            case lop_17 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") -> (erlps__is_gexpr_op__2 [f_4, a_15])
              _ -> (EXC.badarg1 lop_17)
        in
          case case_16 of
            (ErlangAtom "true") -> (ErlangTuple [asvt_11, st1_12])
            (ErlangAtom "false") ->
              let
                tup_el_25 =
                  (erlps__add_error__3
                     [line_0, (ErlangAtom "illegal_guard_expr"), st1_12])
              in (ErlangTuple [asvt_11, tup_el_25])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_13)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "op"), line_0, op_1,
                               a_2]),
                 vt_3, st0_4]
  =
  let match_expr_10 = (erlps__gexpr__3 [a_2, vt_3, st0_4])
  in
    case match_expr_10 of
      (ErlangTuple [avt_8, st1_9]) ->
        let
          case_11 =
            (erlps__is_gexpr_op__2 [op_1, (ErlangInt (DBI.fromInt 1))])
        in
          case case_11 of
            (ErlangAtom "true") -> (ErlangTuple [avt_8, st1_9])
            (ErlangAtom "false") ->
              let
                tup_el_17 =
                  (erlps__add_error__3
                     [line_0, (ErlangAtom "illegal_guard_expr"), st1_9])
              in (ErlangTuple [avt_8, tup_el_17])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_10)
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "op"), _,
                               (ErlangAtom "andalso"), l_0, r_1]),
                 vt_2, st_3]
  =
  (erlps__gexpr_list__3
     [(ErlangCons l_0 (ErlangCons r_1 ErlangEmptyList)), vt_2, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "op"), _,
                               (ErlangAtom "orelse"), l_0, r_1]),
                 vt_2, st_3]
  =
  (erlps__gexpr_list__3
     [(ErlangCons l_0 (ErlangCons r_1 ErlangEmptyList)), vt_2, st_3])
erlps__gexpr__3 [(ErlangTuple [(ErlangAtom "op"), line_0, op_1,
                               l_2, r_3]),
                 vt_4, st0_5]
  =
  let
    match_expr_15 =
      (erlps__gexpr_list__3
         [(ErlangCons l_2 (ErlangCons r_3 ErlangEmptyList)), vt_4, st0_5])
  in
    case match_expr_15 of
      (ErlangTuple [avt_13, st1_14]) ->
        let
          case_16 =
            (erlps__is_gexpr_op__2 [op_1, (ErlangInt (DBI.fromInt 2))])
        in
          case case_16 of
            (ErlangAtom "true") -> (ErlangTuple [avt_13, st1_14])
            (ErlangAtom "false") ->
              let
                tup_el_22 =
                  (erlps__add_error__3
                     [line_0, (ErlangAtom "illegal_guard_expr"), st1_14])
              in (ErlangTuple [avt_13, tup_el_22])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_15)
erlps__gexpr__3 [e_0, _vt_1, st_2] =
  let   
    arg_5 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), e_0])
  in let
    tup_el_4 =
      (erlps__add_error__3
         [arg_5, (ErlangAtom "illegal_guard_expr"), st_2])
  in (ErlangTuple [ErlangEmptyList, tup_el_4])
erlps__gexpr__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__gexpr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__gexpr_list__3 :: ErlangFun
erlps__gexpr_list__3 [es_0, vt_1, st_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [e_7, (ErlangTuple [esvt_8, st0_9])] =
             let match_expr_15 = (erlps__gexpr__3 [e_7, vt_1, st0_9])
             in
               case match_expr_15 of
                 (ErlangTuple [evt_13, st1_14]) ->
                   let tup_el_16 = (erlps__vtmerge__2 [evt_13, esvt_8])
                   in (ErlangTuple [tup_el_16, st1_14])
                 _ -> (EXC.badmatch match_expr_15)
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let arg_20 = (ErlangTuple [ErlangEmptyList, st_2])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, arg_20, es_0])
erlps__gexpr_list__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__gexpr_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_test__1 :: ErlangFun
erlps__is_guard_test__1 [e_0] =
  let   
    tup_el_3 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    tup_el_4 =
      (ErlangFun 1
         let
           lambda_5 [_] = (ErlangAtom "false")
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in let arg_2 = (ErlangTuple [tup_el_3, tup_el_4])
  in (erlps__is_guard_test2__2 [e_0, arg_2])
erlps__is_guard_test__1 [arg_7] = (EXC.function_clause unit)
erlps__is_guard_test__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_test__2 :: ErlangFun
erlps__is_guard_test__2 [expression_0, forms_1] =
  let
    arg_4 =
      (ErlangFun 1
         let
           lambda_5 [_] = (ErlangAtom "false")
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in (erlps__is_guard_test__3 [expression_0, forms_1, arg_4])
erlps__is_guard_test__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__is_guard_test__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_test__3 :: ErlangFun
erlps__is_guard_test__3 [expression_0, forms_1, isoverridden_2] =
  let   
    recordattributes_8 =
      (flmap
         (\ lc_6 ->
            case lc_6 of
              a_5@(ErlangTuple [(ErlangAtom "attribute"), _,
                                (ErlangAtom "record"), _d_4]) ->
                (ErlangCons a_5 ErlangEmptyList)
              _ -> ErlangEmptyList)
         forms_1)
  in let
    arg_9 =
      (ErlangFun 2
         let
           lambda_10 [attr0_13, st1_14] =
             let    arg_16 = (make_string "none")
             in let attr_17 = (erlps__set_file__2 [attr0_13, arg_16])
             in (erlps__attribute_state__2 [attr_17, st1_14])
           lambda_10 [arg_11, arg_12] = (EXC.function_clause unit)
           lambda_10 args = (EXC.badarity (ErlangFun 2 lambda_10) args)
         in lambda_10)
  in let arg_20 = (erlps__start__0 [])
  in let
    st0_22 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_9, arg_20, recordattributes_8])
  in let arg_25 = (make_string "nofile")
  in let arg_23 = (erlps__set_file__2 [expression_0, arg_25])
  in let
    tup_el_27 =
      case st0_22 of
        (ErlangTuple arr_30) | (DM.Just field_29) <-
                                 ((arr_30 DA.!! 7)) ->
          field_29
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let arg_26 = (ErlangTuple [tup_el_27, isoverridden_2])
  in (erlps__is_guard_test2__2 [arg_23, arg_26])
erlps__is_guard_test__3 [arg_32, arg_33, arg_34] =
  (EXC.function_clause unit)
erlps__is_guard_test__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_test2__2 :: ErlangFun
erlps__is_guard_test2__2 [(ErlangTuple [(ErlangAtom "call"),
                                        line_0,
                                        (ErlangTuple [(ErlangAtom "atom"), lr_1,
                                                      (ErlangAtom "record")]),
                                        (ErlangCons e_2 (ErlangCons a_3 (ErlangEmptyList)))]),
                          info_4]
  =
  let   
    tup_el_8 =
      (ErlangTuple
         [(ErlangAtom "atom"), lr_1, (ErlangAtom "is_record")])
  in let
    arg_5 =
      (ErlangTuple
         [(ErlangAtom "call"), line_0, tup_el_8,
          (ErlangCons e_2 (ErlangCons a_3 ErlangEmptyList))])
  in (erlps__is_gexpr__2 [arg_5, info_4])
erlps__is_guard_test2__2 [call_4@(ErlangTuple [(ErlangAtom "call"),
                                               _line_0,
                                               (ErlangTuple [(ErlangAtom "atom"),
                                                             _la_1, test_2]),
                                               as_3]),
                          info_6@(ErlangTuple [_, isoverridden_5])]
  =
  let    a_8 = (BIF.erlang__length__1 [as_3])
  in let arg_11 = (ErlangTuple [test_2, a_8])
  in let
    op_arg_10 =
      (BIF.erlang__apply__2
         [isoverridden_5, (ErlangCons arg_11 ErlangEmptyList)])
  in let lop_9 = (BIF.erlang__not__1 [op_arg_10])
  in
    case lop_9 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let
          case_15 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__type_test__2"
               [test_2, a_8])
        in
          case case_15 of
            (ErlangAtom "true") -> (erlps__is_gexpr_list__2 [as_3, info_6])
            (ErlangAtom "false") -> (erlps__is_gexpr__2 [call_4, info_6])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badarg1 lop_9)
erlps__is_guard_test2__2 [g_0, info_1] =
  (erlps__is_gexpr__2 [g_0, info_1])
erlps__is_guard_test2__2 [arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__is_guard_test2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_expr__1 :: ErlangFun
erlps__is_guard_expr__1 [e_0] =
  let   
    tup_el_4 =
      (ErlangFun 1
         let
           lambda_5 [(ErlangTuple [_, _])] = (ErlangAtom "false")
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in let arg_2 = (ErlangTuple [ErlangEmptyList, tup_el_4])
  in (erlps__is_gexpr__2 [e_0, arg_2])
erlps__is_guard_expr__1 [arg_7] = (EXC.function_clause unit)
erlps__is_guard_expr__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_gexpr__2 :: ErlangFun
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "var"), _l_0,
                                  _v_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "char"), _l_0,
                                  _c_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "integer"), _l_0,
                                  _i_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "float"), _l_0,
                                  _f_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "atom"), _l_0,
                                  _a_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "string"), _l_0,
                                  _s_1]),
                    _info_2]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "nil"), _l_0]),
                    _info_1]
  =
  (ErlangAtom "true")
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "cons"), _l_0, h_1,
                                  t_2]),
                    info_3]
  =
  (erlps__is_gexpr_list__2
     [(ErlangCons h_1 (ErlangCons t_2 ErlangEmptyList)), info_3])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "tuple"), _l_0,
                                  es_1]),
                    info_2]
  =
  (erlps__is_gexpr_list__2 [es_1, info_2])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "map"), _l_0,
                                  es_1]),
                    info_2]
  =
  (erlps__is_map_fields__2 [es_1, info_2])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "map"), _l_0,
                                  src_1, es_2]),
                    info_3]
  =
  let lop_4 = (erlps__is_gexpr__2 [src_1, info_3])
  in
    case lop_4 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_map_fields__2 [es_2, info_3])
      _ -> (EXC.badarg1 lop_4)
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "record_index"),
                                  _l_0, _name_1, field_2]),
                    info_3]
  =
  (erlps__is_gexpr__2 [field_2, info_3])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "record_field"),
                                  _l_0, rec_1, _name_2, field_3]),
                    info_4]
  =
  (erlps__is_gexpr_list__2
     [(ErlangCons rec_1 (ErlangCons field_3 ErlangEmptyList)),
      info_4])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "record"), l_0,
                                  name_1, inits_2]),
                    info_3]
  =
  (erlps__is_gexpr_fields__4 [inits_2, l_0, name_1, info_3])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "bin"), _l_0,
                                  fs_1]),
                    info_2]
  =
  let
    arg_3 =
      (ErlangFun 1
         let
           lambda_4 [(ErlangTuple [(ErlangAtom "bin_element"), _line_6, e_7,
                                   sz_8, _ts_9])]
             =
             let    lop_10 = (erlps__is_gexpr__2 [e_7, info_2])
             in let
               lop_14 = (BIF.erlang__op_exactEq [sz_8, (ErlangAtom "default")])
             in let
               rop_13 =
                 case lop_14 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") -> (erlps__is_gexpr__2 [sz_8, info_2])
                   _ -> (EXC.badarg1 lop_14)
             in (BIF.erlang__op_and [lop_10, rop_13])
           lambda_4 [arg_5] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 1 lambda_4) args)
         in lambda_4)
  in (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_3, fs_1])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "call"), _l_0,
                                  (ErlangTuple [(ErlangAtom "atom"), _lf_1,
                                                f_2]),
                                  as_3]),
                    info_5@(ErlangTuple [_, isoverridden_4])]
  =
  let    a_7 = (BIF.erlang__length__1 [as_3])
  in let arg_10 = (ErlangTuple [f_2, a_7])
  in let
    op_arg_9 =
      (BIF.erlang__apply__2
         [isoverridden_4, (ErlangCons arg_10 ErlangEmptyList)])
  in let lop_8 = (BIF.erlang__not__1 [op_arg_9])
  in
    case lop_8 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let
          lop_14 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__guard_bif__2"
               [f_2, a_7])
        in
          case lop_14 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") -> (erlps__is_gexpr_list__2 [as_3, info_5])
            _ -> (EXC.badarg1 lop_14)
      _ -> (EXC.badarg1 lop_8)
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "call"), _l_0,
                                  (ErlangTuple [(ErlangAtom "remote"), _lr_1,
                                                (ErlangTuple [(ErlangAtom "atom"),
                                                              _lm_2,
                                                              (ErlangAtom "erlang")]),
                                                (ErlangTuple [(ErlangAtom "atom"),
                                                              _lf_3, f_4])]),
                                  as_5]),
                    info_6]
  =
  let    a_8 = (BIF.erlang__length__1 [as_5])
  in let
    lop_10 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__guard_bif__2"
         [f_4, a_8])
  in let
    lop_9 =
      case lop_10 of
        (ErlangAtom "true") -> (ErlangAtom "true")
        (ErlangAtom "false") -> (erlps__is_gexpr_op__2 [f_4, a_8])
        _ -> (EXC.badarg1 lop_10)
  in
    case lop_9 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_gexpr_list__2 [as_5, info_6])
      _ -> (EXC.badarg1 lop_9)
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "call"), l_0,
                                  (ErlangTuple [(ErlangAtom "tuple"), lt_1,
                                                (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                          lm_2,
                                                                          (ErlangAtom "erlang")]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                            lf_3,
                                                                                                                            f_4]) (ErlangEmptyList)))]),
                                  as_5]),
                    info_6]
  =
  let   
    tup_el_13 =
      (ErlangTuple [(ErlangAtom "atom"), lm_2, (ErlangAtom "erlang")])
  in let tup_el_17 = (ErlangTuple [(ErlangAtom "atom"), lf_3, f_4])
  in let
    tup_el_10 =
      (ErlangTuple [(ErlangAtom "remote"), lt_1, tup_el_13, tup_el_17])
  in let
    arg_7 = (ErlangTuple [(ErlangAtom "call"), l_0, tup_el_10, as_5])
  in (erlps__is_gexpr__2 [arg_7, info_6])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "op"), _l_0, op_1,
                                  a_2]),
                    info_3]
  =
  let
    lop_4 =
      (erlps__is_gexpr_op__2 [op_1, (ErlangInt (DBI.fromInt 1))])
  in
    case lop_4 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_gexpr__2 [a_2, info_3])
      _ -> (EXC.badarg1 lop_4)
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "op"), _l_0,
                                  (ErlangAtom "andalso"), a1_1, a2_2]),
                    info_3]
  =
  (erlps__is_gexpr_list__2
     [(ErlangCons a1_1 (ErlangCons a2_2 ErlangEmptyList)), info_3])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "op"), _l_0,
                                  (ErlangAtom "orelse"), a1_1, a2_2]),
                    info_3]
  =
  (erlps__is_gexpr_list__2
     [(ErlangCons a1_1 (ErlangCons a2_2 ErlangEmptyList)), info_3])
erlps__is_gexpr__2 [(ErlangTuple [(ErlangAtom "op"), _l_0, op_1,
                                  a1_2, a2_3]),
                    info_4]
  =
  let
    lop_5 =
      (erlps__is_gexpr_op__2 [op_1, (ErlangInt (DBI.fromInt 2))])
  in
    case lop_5 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        (erlps__is_gexpr_list__2
           [(ErlangCons a1_2 (ErlangCons a2_3 ErlangEmptyList)), info_4])
      _ -> (EXC.badarg1 lop_5)
erlps__is_gexpr__2 [_other_0, _info_1] = (ErlangAtom "false")
erlps__is_gexpr__2 [arg_2, arg_3] = (EXC.function_clause unit)
erlps__is_gexpr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_gexpr_op__2 :: ErlangFun
erlps__is_gexpr_op__2 [op_0, a_1] =
  (EXC.tryOfCatch
     (\ _ ->
        (BIF.do_remote_fun_call "Erl.Internal" "erlps__op_type__2"
           [op_0, a_1]))
     (\ of_4 ->
        case of_4 of
          (ErlangAtom "arith") -> (ErlangAtom "true")
          (ErlangAtom "bool") -> (ErlangAtom "true")
          (ErlangAtom "comp") -> (ErlangAtom "true")
          (ErlangAtom "list") -> (ErlangAtom "false")
          (ErlangAtom "send") -> (ErlangAtom "false")
          something_else -> (EXC.try_clause something_else))
     (\ ex_5 ->
        case ex_5 of
          (ErlangTuple [_, _, _]) -> (ErlangAtom "false")
          ex_5 -> (EXC.raise ex_5)))
erlps__is_gexpr_op__2 [arg_6, arg_7] = (EXC.function_clause unit)
erlps__is_gexpr_op__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_gexpr_list__2 :: ErlangFun
erlps__is_gexpr_list__2 [es_0, info_1] =
  let
    arg_2 =
      (ErlangFun 1
         let
           lambda_3 [e_5] = (erlps__is_gexpr__2 [e_5, info_1])
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_2, es_0])
erlps__is_gexpr_list__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__is_gexpr_list__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_map_fields__2 :: ErlangFun
erlps__is_map_fields__2 [(ErlangCons (ErlangTuple [tag_0, _, k_1,
                                                   v_2]) fs_3),
                         info_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_13 =
                 (BIF.erlang__op_exactEq
                    [tag_0, (ErlangAtom "map_field_assoc")])
             in
               case lop_13 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq
                      [tag_0, (ErlangAtom "map_field_exact")])
                 _ -> (EXC.badarg1 lop_13)))) =
  let lop_5 = (erlps__is_gexpr__2 [k_1, info_4])
  in
    case lop_5 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let lop_8 = (erlps__is_gexpr__2 [v_2, info_4])
        in
          case lop_8 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") -> (erlps__is_map_fields__2 [fs_3, info_4])
            _ -> (EXC.badarg1 lop_8)
      _ -> (EXC.badarg1 lop_5)
erlps__is_map_fields__2 [(ErlangEmptyList), _info_0] =
  (ErlangAtom "true")
erlps__is_map_fields__2 [_t_0, _info_1] = (ErlangAtom "false")
erlps__is_map_fields__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__is_map_fields__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_gexpr_fields__4 :: ErlangFun
erlps__is_gexpr_fields__4 [fs_0, l_1, name_2,
                           info_4@(ErlangTuple [rds_3, _])]
  =
  let    case_5 = (BIF.maps__find__2 [name_2, rds_3])
  in let
    ifs_15 =
      case case_5 of
        (ErlangTuple [(ErlangAtom "ok"),
                      (ErlangTuple [_line_8, fields_9])]) ->
          let rop_11 = (erlps__init_fields__3 [fs_0, l_1, fields_9])
          in (BIF.erlang__op_append [fs_0, rop_11])
        (ErlangAtom "error") -> fs_0
        something_else -> (EXC.case_clause something_else)
  in let
    arg_16 =
      (ErlangFun 1
         let
           lambda_17 [(ErlangTuple [(ErlangAtom "record_field"), _lf_19,
                                    _name_20, v_21])]
             =
             (erlps__is_gexpr__2 [v_21, info_4])
           lambda_17 [_other_24] = (ErlangAtom "false")
           lambda_17 [arg_18] = (EXC.function_clause unit)
           lambda_17 args = (EXC.badarity (ErlangFun 1 lambda_17) args)
         in lambda_17)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__all__2" [arg_16, ifs_15])
erlps__is_gexpr_fields__4 [arg_26, arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__is_gexpr_fields__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exprs__3 :: ErlangFun
erlps__exprs__3 [(ErlangCons e_0 es_1), vt_2, st0_3] =
  let match_expr_9 = (erlps__expr__3 [e_0, vt_2, st0_3])
  in
    case match_expr_9 of
      (ErlangTuple [evt_7, st1_8]) ->
        let    arg_11 = (erlps__vtupdate__2 [evt_7, vt_2])
        in let match_expr_17 = (erlps__exprs__3 [es_1, arg_11, st1_8])
        in
          case match_expr_17 of
            (ErlangTuple [esvt_15, st2_16]) ->
              let tup_el_18 = (erlps__vtupdate__2 [evt_7, esvt_15])
              in (ErlangTuple [tup_el_18, st2_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_9)
erlps__exprs__3 [(ErlangEmptyList), _vt_0, st_1] =
  (ErlangTuple [ErlangEmptyList, st_1])
erlps__exprs__3 [arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__exprs__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr__3 :: ErlangFun
erlps__expr__3 [(ErlangTuple [(ErlangAtom "var"), line_0, v_1]),
                vt_2, st_3]
  =
  (erlps__expr_var__4 [v_1, line_0, vt_2, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "char"), _line_0,
                              _c_1]),
                _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "integer"), _line_0,
                              _i_1]),
                _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "float"), _line_0,
                              _f_1]),
                _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "atom"), line_0, a_1]),
                _vt_2, st_3]
  =
  let tup_el_5 = (erlps__keyword_warning__3 [line_0, a_1, st_3])
  in (ErlangTuple [ErlangEmptyList, tup_el_5])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "string"), _line_0,
                              _s_1]),
                _vt_2, st_3]
  =
  (ErlangTuple [ErlangEmptyList, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "nil"), _line_0]),
                _vt_1, st_2]
  =
  (ErlangTuple [ErlangEmptyList, st_2])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "cons"), _line_0, h_1,
                              t_2]),
                vt_3, st_4]
  =
  (erlps__expr_list__3
     [(ErlangCons h_1 (ErlangCons t_2 ErlangEmptyList)), vt_3, st_4])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "lc"), _line_0, e_1,
                              qs_2]),
                vt_3, st_4]
  =
  (erlps__handle_comprehension__4 [e_1, qs_2, vt_3, st_4])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "bc"), _line_0, e_1,
                              qs_2]),
                vt_3, st_4]
  =
  (erlps__handle_comprehension__4 [e_1, qs_2, vt_3, st_4])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "tuple"), _line_0,
                              es_1]),
                vt_2, st_3]
  =
  (erlps__expr_list__3 [es_1, vt_2, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "map"), _line_0,
                              es_1]),
                vt_2, st_3]
  =
  let    arg_6 = (erlps__check_assoc_fields__2 [es_1, st_3])
  in let arg_9 = (ErlangFun 3 erlps__expr_list__3)
  in (erlps__map_fields__4 [es_1, vt_2, arg_6, arg_9])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "map"), _line_0, src_1,
                              es_2]),
                vt_3, st_4]
  =
  let match_expr_10 = (erlps__expr__3 [src_1, vt_3, st_4])
  in
    case match_expr_10 of
      (ErlangTuple [svt_8, st1_9]) ->
        let    arg_14 = (ErlangFun 3 erlps__expr_list__3)
        in let
          match_expr_17 =
            (erlps__map_fields__4 [es_2, vt_3, st1_9, arg_14])
        in
          case match_expr_17 of
            (ErlangTuple [fvt_15, st2_16]) ->
              let tup_el_18 = (erlps__vtupdate__2 [svt_8, fvt_15])
              in (ErlangTuple [tup_el_18, st2_16])
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_10)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "record_index"),
                              line_0, name_1, field_2]),
                _vt_3, st_4]
  =
  let
    arg_8 =
      (ErlangFun 2
         let
           lambda_9 [dfs_12, st1_13] =
             (erlps__record_field__4 [field_2, name_1, dfs_12, st1_13])
           lambda_9 [arg_10, arg_11] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 2 lambda_9) args)
         in lambda_9)
  in (erlps__check_record__4 [line_0, name_1, st_4, arg_8])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "record"), line_0,
                              name_1, inits_2]),
                vt_3, st_4]
  =
  let
    arg_8 =
      (ErlangFun 2
         let
           lambda_9 [dfs_12, st1_13] =
             (erlps__init_fields__6
                [inits_2, line_0, name_1, dfs_12, vt_3, st1_13])
           lambda_9 [arg_10, arg_11] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 2 lambda_9) args)
         in lambda_9)
  in (erlps__check_record__4 [line_0, name_1, st_4, arg_8])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "record_field"),
                              line_0, rec_1, name_2, field_3]),
                vt_4, st0_5]
  =
  let
    match_expr_12 =
      (erlps__record_expr__4 [line_0, rec_1, vt_4, st0_5])
  in
    case match_expr_12 of
      (ErlangTuple [rvt_10, st1_11]) ->
        let   
          arg_16 =
            (ErlangFun 2
               let
                 lambda_17 [dfs_20, st_21] =
                   (erlps__record_field__4 [field_3, name_2, dfs_20, st_21])
                 lambda_17 [arg_18, arg_19] = (EXC.function_clause unit)
                 lambda_17 args = (EXC.badarity (ErlangFun 2 lambda_17) args)
               in lambda_17)
        in let
          match_expr_28 =
            (erlps__check_record__4 [line_0, name_2, st1_11, arg_16])
        in
          case match_expr_28 of
            (ErlangTuple [fvt_26, st2_27]) ->
              let tup_el_29 = (erlps__vtmerge__2 [rvt_10, fvt_26])
              in (ErlangTuple [tup_el_29, st2_27])
            _ -> (EXC.badmatch match_expr_28)
      _ -> (EXC.badmatch match_expr_12)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "record"), line_0,
                              rec_1, name_2, upds_3]),
                vt_4, st0_5]
  =
  let
    match_expr_12 =
      (erlps__record_expr__4 [line_0, rec_1, vt_4, st0_5])
  in
    case match_expr_12 of
      (ErlangTuple [rvt_10, st1_11]) ->
        let   
          arg_16 =
            (ErlangFun 2
               let
                 lambda_17 [dfs_20, st_21] =
                   (erlps__update_fields__5
                      [upds_3, name_2, dfs_20, vt_4, st_21])
                 lambda_17 [arg_18, arg_19] = (EXC.function_clause unit)
                 lambda_17 args = (EXC.badarity (ErlangFun 2 lambda_17) args)
               in lambda_17)
        in let
          match_expr_29 =
            (erlps__check_record__4 [line_0, name_2, st1_11, arg_16])
        in
          case match_expr_29 of
            (ErlangTuple [usvt_27, st2_28]) ->
              let case_30 = (erlps__has_wildcard_field__1 [upds_3])
              in
                case case_30 of
                  (ErlangAtom "true") ->
                    let   
                      arg_35 =
                        (ErlangTuple
                           [(ErlangAtom "wildcard_in_update"), name_2])
                    in let
                      tup_el_33 = (erlps__add_error__3 [line_0, arg_35, st2_28])
                    in (ErlangTuple [ErlangEmptyList, tup_el_33])
                  (ErlangAtom "false") ->
                    let tup_el_39 = (erlps__vtmerge__2 [rvt_10, usvt_27])
                    in (ErlangTuple [tup_el_39, st2_28])
                  something_else -> (EXC.case_clause something_else)
            _ -> (EXC.badmatch match_expr_29)
      _ -> (EXC.badmatch match_expr_12)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "bin"), _line_0,
                              fs_1]),
                vt_2, st_3]
  =
  let arg_7 = (ErlangFun 3 erlps__expr__3)
  in (erlps__expr_bin__4 [fs_1, vt_2, st_3, arg_7])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "block"), _line_0,
                              es_1]),
                vt_2, st_3]
  =
  (erlps__exprs__3 [es_1, vt_2, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "if"), line_0, cs_1]),
                vt_2, st_3]
  =
  let arg_5 = (ErlangTuple [(ErlangAtom "if"), line_0])
  in (erlps__icrt_clauses__4 [cs_1, arg_5, vt_2, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "case"), line_0, e_1,
                              cs_2]),
                vt_3, st0_4]
  =
  let match_expr_10 = (erlps__expr__3 [e_1, vt_3, st0_4])
  in
    case match_expr_10 of
      (ErlangTuple [evt_8, st1_9]) ->
        let    arg_12 = (ErlangTuple [(ErlangAtom "case"), line_0])
        in let arg_15 = (erlps__vtupdate__2 [evt_8, vt_3])
        in let
          match_expr_21 =
            (erlps__icrt_clauses__4 [cs_2, arg_12, arg_15, st1_9])
        in
          case match_expr_21 of
            (ErlangTuple [cvt_19, st2_20]) ->
              let tup_el_22 = (erlps__vtmerge__2 [evt_8, cvt_19])
              in (ErlangTuple [tup_el_22, st2_20])
            _ -> (EXC.badmatch match_expr_21)
      _ -> (EXC.badmatch match_expr_10)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "receive"), line_0,
                              cs_1]),
                vt_2, st_3]
  =
  let arg_5 = (ErlangTuple [(ErlangAtom "receive"), line_0])
  in (erlps__icrt_clauses__4 [cs_1, arg_5, vt_2, st_3])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "receive"), line_0,
                              cs_1, to_2, toes_3]),
                vt_4, st0_5]
  =
  let match_expr_11 = (erlps__expr__3 [to_2, vt_4, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [tvt_9, st1_10]) ->
        let match_expr_17 = (erlps__exprs__3 [toes_3, vt_4, st1_10])
        in
          case match_expr_17 of
            (ErlangTuple [tevt_15, st2_16]) ->
              let match_expr_23 = (erlps__icrt_clauses__3 [cs_1, vt_4, st2_16])
              in
                case match_expr_23 of
                  (ErlangTuple [cvt_21, st3_22]) ->
                    let   
                      arg_29 = (ErlangTuple [(ErlangAtom "receive"), line_0])
                    in let
                      rvt_33 =
                        (erlps__icrt_export__4
                           [(ErlangCons tevt_15 cvt_21), vt_4, arg_29, st3_22])
                    in let
                      tup_el_34 =
                        (erlps__vtmerge__1
                           [(ErlangCons tvt_9
                               (ErlangCons tevt_15
                                  (ErlangCons rvt_33 ErlangEmptyList)))])
                    in (ErlangTuple [tup_el_34, st3_22])
                  _ -> (EXC.badmatch match_expr_23)
            _ -> (EXC.badmatch match_expr_17)
      _ -> (EXC.badmatch match_expr_11)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "fun"), line_0,
                              body_1]),
                vt_2, st_3]
  =
  case body_1 of
    (ErlangTuple [(ErlangAtom "clauses"), cs_5]) ->
      (erlps__fun_clauses__3 [cs_5, vt_2, st_3])
    (ErlangTuple [(ErlangAtom "function"),
                  (ErlangAtom "record_info"), (ErlangInt num_9)]) | ((ErlangInt
                                                                        num_9) ==
                                                                       (ErlangInt
                                                                          (DBI.fromInt
                                                                             2))) ->
      let
        tup_el_11 =
          (erlps__add_error__3
             [line_0, (ErlangAtom "illegal_record_info"), st_3])
      in (ErlangTuple [ErlangEmptyList, tup_el_11])
    (ErlangTuple [(ErlangAtom "function"), f_15, a_16]) ->
      let   
        arg_20 =
          case st_3 of
            (ErlangTuple arr_23) | (DM.Just field_22) <-
                                     ((arr_23 DA.!! 8)) ->
              field_22
            _ -> (EXC.badrecord (ErlangAtom "lint"))
      in let arg_24 = (ErlangTuple [f_15, a_16])
      in let op_arg_19 = (erlps__is_local_function__2 [arg_20, arg_24])
      in let lop_18 = (BIF.erlang__not__1 [op_arg_19])
      in let
        case_17 =
          case lop_18 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") ->
              let
                lop_27 =
                  (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
                     [f_15, a_16])
              in
                case lop_27 of
                  (ErlangAtom "false") -> (ErlangAtom "false")
                  (ErlangAtom "true") ->
                    let   
                      arg_31 =
                        case st_3 of
                          (ErlangTuple arr_34) | (DM.Just field_33) <-
                                                   ((arr_34 DA.!! 9)) ->
                            field_33
                          _ -> (EXC.badrecord (ErlangAtom "lint"))
                    in let arg_35 = (ErlangTuple [f_15, a_16])
                    in let
                      op_arg_30 =
                        (erlps__is_autoimport_suppressed__2 [arg_31, arg_35])
                    in (BIF.erlang__not__1 [op_arg_30])
                  _ -> (EXC.badarg1 lop_27)
            _ -> (EXC.badarg1 lop_18)
      in
        case case_17 of
          (ErlangAtom "true") -> (ErlangTuple [ErlangEmptyList, st_3])
          (ErlangAtom "false") ->
            let
              tup_el_41 = (erlps__call_function__4 [line_0, f_15, a_16, st_3])
            in (ErlangTuple [ErlangEmptyList, tup_el_41])
          something_else -> (EXC.case_clause something_else)
    (ErlangTuple [(ErlangAtom "function"), m_46, f_47, a_48]) ->
      (erlps__expr_list__3
         [(ErlangCons m_46
             (ErlangCons f_47 (ErlangCons a_48 ErlangEmptyList))),
          vt_2, st_3])
    something_else -> (EXC.case_clause something_else)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "named_fun"), _,
                              (ErlangAtom "_"), cs_0]),
                vt_1, st_2]
  =
  (erlps__fun_clauses__3 [cs_0, vt_1, st_2])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "named_fun"), line_0,
                              name_1, cs_2]),
                vt_3, st0_4]
  =
  let   
    tup_el_7 =
      (ErlangTuple
         [(ErlangAtom "bound"), (ErlangAtom "unused"),
          (ErlangCons line_0 ErlangEmptyList)])
  in let head_5 = (ErlangTuple [name_1, tup_el_7])
  in let
    st1_19 =
      (erlps__shadow_vars__4
         [(ErlangCons head_5 ErlangEmptyList), vt_3,
          (ErlangAtom "named fun"), st0_4])
  in let
    arg_20 =
      (erlps__vtsubtract__2
         [vt_3, (ErlangCons head_5 ErlangEmptyList)])
  in let
    nvt1_24 =
      (erlps__vtupdate__2
         [arg_20, (ErlangCons head_5 ErlangEmptyList)])
  in let
    match_expr_30 = (erlps__fun_clauses__3 [cs_2, nvt1_24, st1_19])
  in
    case match_expr_30 of
      (ErlangTuple [csvt_28, st2_29]) ->
        let   
          arg_31 =
            (erlps__vtupdate__2
               [csvt_28, (ErlangCons head_5 ErlangEmptyList)])
        in let
          match_expr_37 =
            (erlps__check_unused_vars__3 [arg_31, ErlangEmptyList, st2_29])
        in
          case match_expr_37 of
            (ErlangTuple [_, st3_36]) ->
              let tup_el_38 = (erlps__vtold__2 [csvt_28, vt_3])
              in (ErlangTuple [tup_el_38, st3_36])
            _ -> (EXC.badmatch match_expr_37)
      _ -> (EXC.badmatch match_expr_30)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "call"), _line_0,
                              (ErlangTuple [(ErlangAtom "atom"), _lr_1,
                                            (ErlangAtom "is_record")]),
                              (ErlangCons e_2 (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                        ln_3,
                                                                        name_4]) (ErlangEmptyList)))]),
                vt_5, st0_6]
  =
  let match_expr_12 = (erlps__expr__3 [e_2, vt_5, st0_6])
  in
    case match_expr_12 of
      (ErlangTuple [rvt_10, st1_11]) ->
        let tup_el_14 = (erlps__exist_record__3 [ln_3, name_4, st1_11])
        in (ErlangTuple [rvt_10, tup_el_14])
      _ -> (EXC.badmatch match_expr_12)
erlps__expr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                              (ErlangTuple [(ErlangAtom "remote"), _lr_1,
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _lm_2,
                                                          (ErlangAtom "erlang")]),
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          lf_3,
                                                          (ErlangAtom "is_record")])]),
                              (ErlangCons e_4 (ErlangCons a_5 (ErlangEmptyList)))]),
                vt_6, st0_7]
  =
  let   
    tup_el_11 =
      (ErlangTuple
         [(ErlangAtom "atom"), lf_3, (ErlangAtom "is_record")])
  in let
    arg_8 =
      (ErlangTuple
         [(ErlangAtom "call"), line_0, tup_el_11,
          (ErlangCons e_4 (ErlangCons a_5 ErlangEmptyList))])
  in (erlps__expr__3 [arg_8, vt_6, st0_7])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "call"), l_0,
                              (ErlangTuple [(ErlangAtom "tuple"), lt_1,
                                            (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                      lm_2,
                                                                      (ErlangAtom "erlang")]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                                        lf_3,
                                                                                                                        (ErlangAtom "is_record")]) (ErlangEmptyList)))]),
                              as_4]),
                vt_5, st_6]
  =
  let   
    tup_el_13 =
      (ErlangTuple [(ErlangAtom "atom"), lm_2, (ErlangAtom "erlang")])
  in let
    tup_el_17 =
      (ErlangTuple
         [(ErlangAtom "atom"), lf_3, (ErlangAtom "is_record")])
  in let
    tup_el_10 =
      (ErlangTuple [(ErlangAtom "remote"), lt_1, tup_el_13, tup_el_17])
  in let
    arg_7 = (ErlangTuple [(ErlangAtom "call"), l_0, tup_el_10, as_4])
  in (erlps__expr__3 [arg_7, vt_5, st_6])
erlps__expr__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                              (ErlangTuple [(ErlangAtom "remote"), _lr_1,
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          _lm_2, m_3]),
                                            (ErlangTuple [(ErlangAtom "atom"),
                                                          lf_4, f_5])]),
                              as_6]),
                vt_7, st0_8]
  =
  let    st1_12 = (erlps__keyword_warning__3 [lf_4, f_5, st0_8])
  in let
    st2_18 =
      (erlps__check_remote_function__5
         [line_0, m_3, f_5, as_6, st1_12])
  in let
    st3_22 = (erlps__check_module_name__3 [m_3, line_0, st2_18])
  in (erlps__expr_list__3 [as_6, vt_7, st3_22])
erlps__expr__3 [a_0, b_1, c_2] =
  (erlps__expr1__3 [a_0, b_1, c_2])
erlps__expr__3 [arg_6, arg_7, arg_8] = (EXC.function_clause unit)
erlps__expr__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr1__3 :: ErlangFun
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "remote"), _lr_1, m_2,
                                             f_3]),
                               as_4]),
                 vt_5, st0_6]
  =
  let    st1_10 = (erlps__keyword_warning__3 [line_0, m_2, st0_6])
  in let st2_14 = (erlps__keyword_warning__3 [line_0, f_3, st1_10])
  in let
    st3_21 =
      case m_2 of
        (ErlangTuple [(ErlangAtom "atom"), lm_16, mod_17]) ->
          (erlps__check_module_name__3 [mod_17, lm_16, st2_14])
        _ -> st2_14
        something_else -> (EXC.case_clause something_else)
  in
    (erlps__expr_list__3
       [(ErlangCons m_2 (ErlangCons f_3 as_4)), vt_5, st3_21])
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "call"), line_0,
                               (ErlangTuple [(ErlangAtom "atom"), la_1, f_2]),
                               as_3]),
                 vt_4, st0_5]
  =
  let    st1_9 = (erlps__keyword_warning__3 [la_1, f_2, st0_5])
  in let match_expr_15 = (erlps__expr_list__3 [as_3, vt_4, st1_9])
  in
    case match_expr_15 of
      (ErlangTuple [asvt_13, st2_14]) ->
        let    a_17 = (BIF.erlang__length__1 [as_3])
        in let
          arg_18 =
            case st2_14 of
              (ErlangTuple arr_21) | (DM.Just field_20) <-
                                       ((arr_21 DA.!! 8)) ->
                field_20
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_22 = (ErlangTuple [f_2, a_17])
        in let
          islocal_25 = (erlps__is_local_function__2 [arg_18, arg_22])
        in let
          isautobif_28 =
            (BIF.do_remote_fun_call "Erl.Internal" "erlps__bif__2"
               [f_2, a_17])
        in let
          arg_29 =
            case st2_14 of
              (ErlangTuple arr_32) | (DM.Just field_31) <-
                                       ((arr_32 DA.!! 9)) ->
                field_31
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_33 = (ErlangTuple [f_2, a_17])
        in let
          autosuppressed_36 =
            (erlps__is_autoimport_suppressed__2 [arg_29, arg_33])
        in let
          lop_37 =
            (erlps__is_warn_enabled__2 [(ErlangAtom "bif_clash"), st2_14])
        in let arg_43 = (ErlangTuple [f_2, a_17])
        in let
          op_arg_41 =
            (erlps__bif_clash_specifically_disabled__2 [st2_14, arg_43])
        in let rop_40 = (BIF.erlang__not__1 [op_arg_41])
        in let warn_46 = (BIF.erlang__op_and [lop_37, rop_40])
        in let imported_50 = (erlps__imported__3 [f_2, a_17, st2_14])
        in let lop_52 = (BIF.erlang__not__1 [islocal_25])
        in let
          case_51 =
            case lop_52 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                let
                  lop_54 =
                    (BIF.erlang__op_exactEq [imported_50, (ErlangAtom "no")])
                in
                  case lop_54 of
                    (ErlangAtom "false") -> (ErlangAtom "false")
                    (ErlangAtom "true") ->
                      case isautobif_28 of
                        (ErlangAtom "false") -> (ErlangAtom "false")
                        (ErlangAtom "true") ->
                          (BIF.erlang__not__1 [autosuppressed_36])
                        _ -> (EXC.badarg1 isautobif_28)
                    _ -> (EXC.badarg1 lop_54)
              _ -> (EXC.badarg1 lop_52)
        in
          case case_51 of
            (ErlangAtom "true") ->
              let
                st3_64 =
                  (erlps__deprecated_function__5
                     [line_0, (ErlangAtom "erlang"), f_2, as_3, st2_14])
              in (ErlangTuple [asvt_13, st3_64])
            (ErlangAtom "false") ->
              let
                tup_el_68 =
                  case imported_50 of
                    (ErlangTuple [(ErlangAtom "yes"), m_70]) ->
                      let   
                        st3_76 =
                          (erlps__check_remote_function__5
                             [line_0, m_70, f_2, as_3, st2_14])
                      in let
                        u0_80 =
                          case st3_76 of
                            (ErlangTuple arr_79) | (DM.Just field_78) <-
                                                     ((arr_79 DA.!! 26)) ->
                              field_78
                            _ -> (EXC.badrecord (ErlangAtom "lint"))
                      in let tup_el_82 = (ErlangTuple [f_2, a_17])
                      in let arg_81 = (ErlangTuple [tup_el_82, m_70])
                      in let
                        arg_86 =
                          case u0_80 of
                            (ErlangTuple arr_89) | (DM.Just field_88) <-
                                                     ((arr_89 DA.!! 2)) ->
                              field_88
                            _ -> (EXC.badrecord (ErlangAtom "usage"))
                      in let
                        imp_90 =
                          (BIF.do_remote_fun_call "Ordsets"
                             "erlps__add_element__2" [arg_81, arg_86])
                      in let
                        record_updt_92 =
                          case u0_80 of
                            (ErlangTuple [(ErlangAtom "usage"), calls_95,
                                          imported_96, used_records_97,
                                          used_types_98]) ->
                              (ErlangTuple
                                 [(ErlangAtom "usage"), calls_95, imp_90,
                                  used_records_97, used_types_98])
                            _ -> (EXC.badrecord (ErlangAtom "usage"))
                      in
                        case st3_76 of
                          (ErlangTuple [(ErlangAtom "lint"), state_99,
                                        module_100, behaviour_101, exports_102,
                                        imports_103, compile_104, records_105,
                                        locals_106, no_auto_107, defined_108,
                                        on_load_109, on_load_line_110,
                                        clashes_111, not_deprecated_112,
                                        not_removed_113, func_114,
                                        warn_format_115, enabled_warnings_116,
                                        nowarn_bif_clash_117, errors_118,
                                        warnings_119, file_120, recdef_top_121,
                                        xqlc_122, called_123, usage_124,
                                        specs_125, callbacks_126,
                                        optional_callbacks_127, types_128,
                                        exp_types_129, in_try_head_130, bvt_131,
                                        gexpr_context_132]) ->
                            (ErlangTuple
                               [(ErlangAtom "lint"), state_99, module_100,
                                behaviour_101, exports_102, imports_103,
                                compile_104, records_105, locals_106,
                                no_auto_107, defined_108, on_load_109,
                                on_load_line_110, clashes_111,
                                not_deprecated_112, not_removed_113, func_114,
                                warn_format_115, enabled_warnings_116,
                                nowarn_bif_clash_117, errors_118, warnings_119,
                                file_120, recdef_top_121, xqlc_122, called_123,
                                record_updt_92, specs_125, callbacks_126,
                                optional_callbacks_127, types_128,
                                exp_types_129, in_try_head_130, bvt_131,
                                gexpr_context_132])
                          _ -> (EXC.badrecord (ErlangAtom "lint"))
                    (ErlangAtom "no") ->
                      let case_133 = (ErlangTuple [f_2, a_17])
                      in
                        case case_133 of
                          (ErlangTuple [(ErlangAtom "record_info"),
                                        (ErlangInt num_136)]) | ((ErlangInt
                                                                    num_136) ==
                                                                   (ErlangInt
                                                                      (DBI.fromInt
                                                                         2))) ->
                            (erlps__check_record_info_call__4
                               [line_0, la_1, as_3, st2_14])
                          n_141 ->
                            let
                              st3_162 =
                                case (ErlangAtom "true") of
                                  _ | ((ErlangAtom "true") ==
                                         (falsifyErrors
                                            (\ _ ->
                                               let
                                                 lop_142 =
                                                   (BIF.erlang__not__1
                                                      [autosuppressed_36])
                                               in
                                                 case lop_142 of
                                                   (ErlangAtom "false") ->
                                                     (ErlangAtom "false")
                                                   (ErlangAtom "true") ->
                                                     case isautobif_28 of
                                                       (ErlangAtom "false") ->
                                                         (ErlangAtom "false")
                                                       (ErlangAtom "true") ->
                                                         warn_46
                                                       _ ->
                                                         (EXC.badarg1
                                                            isautobif_28)
                                                   _ ->
                                                     (EXC.badarg1 lop_142)))) ->
                                    let
                                      case_145 =
                                        (BIF.do_remote_fun_call "Erl.Internal"
                                           "erlps__old_bif__2" [f_2, a_17])
                                    in
                                      case case_145 of
                                        (ErlangAtom "true") ->
                                          let   
                                            tup_el_151 =
                                              (ErlangTuple [f_2, a_17])
                                          in let
                                            arg_149 =
                                              (ErlangTuple
                                                 [(ErlangAtom
                                                     "call_to_redefined_old_bif"),
                                                  tup_el_151])
                                          in
                                            (erlps__add_error__3
                                               [line_0, arg_149, st2_14])
                                        (ErlangAtom "false") ->
                                          let   
                                            tup_el_158 =
                                              (ErlangTuple [f_2, a_17])
                                          in let
                                            arg_156 =
                                              (ErlangTuple
                                                 [(ErlangAtom
                                                     "call_to_redefined_bif"),
                                                  tup_el_158])
                                          in
                                            (erlps__add_warning__3
                                               [line_0, arg_156, st2_14])
                                        something_else ->
                                          (EXC.case_clause something_else)
                                  _ -> st2_14
                                  _ -> (EXC.if_clause unit)
                            in
                              case (ErlangAtom "true") of
                                _ | ((ErlangAtom "true") ==
                                       (falsifyErrors
                                          (\ _ ->
                                             let
                                               rop_164 =
                                                 case st3_162 of
                                                   (ErlangTuple arr_167) | (DM.Just field_166) <-
                                                                             ((arr_167 DA.!!
                                                                                 16)) ->
                                                     field_166
                                                   _ ->
                                                     (EXC.badrecord
                                                        (ErlangAtom "lint"))
                                             in
                                               (BIF.erlang__op_exactEq
                                                  [n_141, rop_164])))) ->
                                  st3_162
                                _ ->
                                  (erlps__call_function__4
                                     [line_0, f_2, a_17, st3_162])
                                _ -> (EXC.if_clause unit)
                          something_else -> (EXC.case_clause something_else)
                    something_else -> (EXC.case_clause something_else)
              in (ErlangTuple [asvt_13, tup_el_68])
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_15)
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "call"), line_0, f_1,
                               as_2]),
                 vt_3, st0_4]
  =
  let st_8 = (erlps__warn_invalid_call__3 [line_0, f_1, st0_4])
  in (erlps__expr_list__3 [(ErlangCons f_1 as_2), vt_3, st_8])
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "try"), line_0, es_1,
                               scs_2, ccs_3, as_4]),
                 vt_5, st0_6]
  =
  let match_expr_12 = (erlps__exprs__3 [es_1, vt_5, st0_6])
  in
    case match_expr_12 of
      (ErlangTuple [evt0_10, st1_11]) ->
        let    tryline_15 = (ErlangTuple [(ErlangAtom "try"), line_0])
        in let uvt_19 = (erlps__vtunsafe__3 [tryline_15, evt0_10, vt_5])
        in let arg_23 = (erlps__vtupdate__2 [evt0_10, vt_5])
        in let
          match_expr_30 =
            (erlps__try_clauses__6
               [scs_2, ccs_3, tryline_15, arg_23, uvt_19, st1_11])
        in
          case match_expr_30 of
            (ErlangTuple [sccs_28, st2_29]) ->
              let    evt1_33 = (erlps__vtupdate__2 [uvt_19, evt0_10])
              in let arg_35 = (erlps__vtunsafe__3 [tryline_15, sccs_28, vt_5])
              in let rvt1_40 = (erlps__vtupdate__2 [arg_35, sccs_28])
              in let evt2_43 = (erlps__vtmerge__2 [evt1_33, rvt1_40])
              in let arg_45 = (erlps__vtupdate__2 [evt2_43, vt_5])
              in let match_expr_51 = (erlps__exprs__3 [as_4, arg_45, st2_29])
              in
                case match_expr_51 of
                  (ErlangTuple [avt0_49, st_50]) ->
                    let   
                      arg_52 = (erlps__vtunsafe__3 [tryline_15, avt0_49, vt_5])
                    in let avt1_57 = (erlps__vtupdate__2 [arg_52, avt0_49])
                    in let avt_60 = (erlps__vtmerge__2 [evt2_43, avt1_57])
                    in (ErlangTuple [avt_60, st_50])
                  _ -> (EXC.badmatch match_expr_51)
            _ -> (EXC.badmatch match_expr_30)
      _ -> (EXC.badmatch match_expr_12)
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "catch"), line_0,
                               e_1]),
                 vt_2, st0_3]
  =
  let match_expr_9 = (erlps__expr__3 [e_1, vt_2, st0_3])
  in
    case match_expr_9 of
      (ErlangTuple [evt_7, st_8]) ->
        let    arg_12 = (ErlangTuple [(ErlangAtom "catch"), line_0])
        in let arg_11 = (erlps__vtunsafe__3 [arg_12, evt_7, vt_2])
        in let tup_el_10 = (erlps__vtupdate__2 [arg_11, evt_7])
        in (ErlangTuple [tup_el_10, st_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "match"), _line_0,
                               p_1, e_2]),
                 vt_3, st0_4]
  =
  let match_expr_10 = (erlps__expr__3 [e_2, vt_3, st0_4])
  in
    case match_expr_10 of
      (ErlangTuple [evt_8, st1_9]) ->
        let    arg_12 = (erlps__vtupdate__2 [evt_8, vt_3])
        in let match_expr_19 = (erlps__pattern__3 [p_1, arg_12, st1_9])
        in
          case match_expr_19 of
            (ErlangTuple [pvt_16, pnew_17, st2_18]) ->
              let   
                st_24 =
                  (erlps__reject_invalid_alias_expr__4 [p_1, e_2, vt_3, st2_18])
              in let arg_27 = (erlps__vtmerge__2 [evt_8, pvt_16])
              in let tup_el_25 = (erlps__vtupdate__2 [pnew_17, arg_27])
              in (ErlangTuple [tup_el_25, st_24])
            _ -> (EXC.badmatch match_expr_19)
      _ -> (EXC.badmatch match_expr_10)
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "op"), _line_0, _op_1,
                               a_2]),
                 vt_3, st_4]
  =
  (erlps__expr__3 [a_2, vt_3, st_4])
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "op"), line_0, op_1,
                               l_2, r_3]),
                 vt_4, st0_5]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_33 = (BIF.erlang__op_exactEq [op_1, (ErlangAtom "orelse")])
             in
               case lop_33 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [op_1, (ErlangAtom "andalso")])
                 _ -> (EXC.badarg1 lop_33)))) =
  let match_expr_11 = (erlps__expr__3 [l_2, vt_4, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [evt1_9, st1_10]) ->
        let    vt1_14 = (erlps__vtupdate__2 [evt1_9, vt_4])
        in let match_expr_20 = (erlps__expr__3 [r_3, vt1_14, st1_10])
        in
          case match_expr_20 of
            (ErlangTuple [evt2_18, st2_19]) ->
              let    arg_22 = (ErlangTuple [op_1, line_0])
              in let arg_21 = (erlps__vtunsafe__3 [arg_22, evt2_18, vt1_14])
              in let evt3_28 = (erlps__vtupdate__2 [arg_21, evt2_18])
              in let tup_el_29 = (erlps__vtmerge__2 [evt1_9, evt3_28])
              in (ErlangTuple [tup_el_29, st2_19])
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_11)
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "op"), _line_0, _op_1,
                               l_2, r_3]),
                 vt_4, st_5]
  =
  (erlps__expr_list__3
     [(ErlangCons l_2 (ErlangCons r_3 ErlangEmptyList)), vt_4, st_5])
erlps__expr1__3 [(ErlangTuple [(ErlangAtom "remote"), line_0,
                               _m_1, _f_2]),
                 _vt_3, st_4]
  =
  let
    tup_el_6 =
      (erlps__add_error__3 [line_0, (ErlangAtom "illegal_expr"), st_4])
  in (ErlangTuple [ErlangEmptyList, tup_el_6])
erlps__expr1__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__expr1__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_list__3 :: ErlangFun
erlps__expr_list__3 [es_0, vt_1, st_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [e_7, (ErlangTuple [esvt_8, st0_9])] =
             let match_expr_15 = (erlps__expr__3 [e_7, vt_1, st0_9])
             in
               case match_expr_15 of
                 (ErlangTuple [evt_13, st1_14]) ->
                   let tup_el_16 = (erlps__vtmerge_pat__2 [evt_13, esvt_8])
                   in (ErlangTuple [tup_el_16, st1_14])
                 _ -> (EXC.badmatch match_expr_15)
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let arg_20 = (ErlangTuple [ErlangEmptyList, st_2])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, arg_20, es_0])
erlps__expr_list__3 [arg_24, arg_25, arg_26] =
  (EXC.function_clause unit)
erlps__expr_list__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_expr__4 :: ErlangFun
erlps__record_expr__4 [line_0, rec_1, vt_2, st0_3] =
  let
    st1_7 = (erlps__warn_invalid_record__3 [line_0, rec_1, st0_3])
  in (erlps__expr__3 [rec_1, vt_2, st1_7])
erlps__record_expr__4 [arg_11, arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__record_expr__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_assoc_fields__2 :: ErlangFun
erlps__check_assoc_fields__2 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_exact"),
                                                        line_0, _, _]) fs_1),
                              st_2]
  =
  let
    arg_4 =
      (erlps__add_error__3
         [line_0, (ErlangAtom "illegal_map_construction"), st_2])
  in (erlps__check_assoc_fields__2 [fs_1, arg_4])
erlps__check_assoc_fields__2 [(ErlangCons (ErlangTuple [(ErlangAtom "map_field_assoc"),
                                                        _, _, _]) fs_0),
                              st_1]
  =
  (erlps__check_assoc_fields__2 [fs_0, st_1])
erlps__check_assoc_fields__2 [(ErlangEmptyList), st_0] = st_0
erlps__check_assoc_fields__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__check_assoc_fields__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__map_fields__4 :: ErlangFun
erlps__map_fields__4 [(ErlangCons (ErlangTuple [tag_0, _, k_1,
                                                v_2]) fs_3),
                      vt_4, st_5, f_6]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let
               lop_29 =
                 (BIF.erlang__op_exactEq
                    [tag_0, (ErlangAtom "map_field_assoc")])
             in
               case lop_29 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq
                      [tag_0, (ErlangAtom "map_field_exact")])
                 _ -> (EXC.badarg1 lop_29)))) =
  let
    match_expr_17 =
      (BIF.erlang__apply__2
         [f_6,
          (ErlangCons (ErlangCons k_1 (ErlangCons v_2 ErlangEmptyList))
             (ErlangCons vt_4 (ErlangCons st_5 ErlangEmptyList)))])
  in
    case match_expr_17 of
      (ErlangTuple [pvt_15, st2_16]) ->
        let
          match_expr_24 = (erlps__map_fields__4 [fs_3, vt_4, st2_16, f_6])
        in
          case match_expr_24 of
            (ErlangTuple [vts_22, st3_23]) ->
              let tup_el_25 = (erlps__vtupdate__2 [pvt_15, vts_22])
              in (ErlangTuple [tup_el_25, st3_23])
            _ -> (EXC.badmatch match_expr_24)
      _ -> (EXC.badmatch match_expr_17)
erlps__map_fields__4 [(ErlangEmptyList), _, st_0, _] =
  (ErlangTuple [ErlangEmptyList, st_0])
erlps__map_fields__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__map_fields__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__warn_invalid_record__3 :: ErlangFun
erlps__warn_invalid_record__3 [line_0, r_1, st_2] =
  let case_3 = (erlps__is_valid_record__1 [r_1])
  in
    case case_3 of
      (ErlangAtom "true") -> st_2
      (ErlangAtom "false") ->
        (erlps__add_warning__3
           [line_0, (ErlangAtom "invalid_record"), st_2])
      something_else -> (EXC.case_clause something_else)
erlps__warn_invalid_record__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__warn_invalid_record__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_valid_record__1 :: ErlangFun
erlps__is_valid_record__1 [rec_0] =
  case rec_0 of
    (ErlangTuple [(ErlangAtom "char"), _, _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "integer"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "float"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "atom"), _, _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "string"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "cons"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "nil"), _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "lc"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "record_index"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "fun"), _, _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "named_fun"), _, _, _]) ->
      (ErlangAtom "false")
    _ -> (ErlangAtom "true")
    something_else -> (EXC.case_clause something_else)
erlps__is_valid_record__1 [arg_2] = (EXC.function_clause unit)
erlps__is_valid_record__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__warn_invalid_call__3 :: ErlangFun
erlps__warn_invalid_call__3 [line_0, f_1, st_2] =
  let case_3 = (erlps__is_valid_call__1 [f_1])
  in
    case case_3 of
      (ErlangAtom "true") -> st_2
      (ErlangAtom "false") ->
        (erlps__add_warning__3
           [line_0, (ErlangAtom "invalid_call"), st_2])
      something_else -> (EXC.case_clause something_else)
erlps__warn_invalid_call__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__warn_invalid_call__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_valid_call__1 :: ErlangFun
erlps__is_valid_call__1 [call_0] =
  case call_0 of
    (ErlangTuple [(ErlangAtom "char"), _, _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "integer"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "float"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "string"), _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "cons"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "nil"), _]) -> (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "lc"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "record_index"), _, _, _]) ->
      (ErlangAtom "false")
    (ErlangTuple [(ErlangAtom "tuple"), _, exprs_2]) | ((ErlangAtom
                                                           "true") ==
                                                          (falsifyErrors
                                                             (\ _ ->
                                                                let
                                                                  lop_3 =
                                                                    (BIF.erlang__length__1
                                                                       [exprs_2])
                                                                in
                                                                  (BIF.erlang__op_exactNeq
                                                                     [lop_3,
                                                                      (ErlangInt
                                                                         (DBI.fromInt
                                                                            2))])))) ->
      (ErlangAtom "false")
    _ -> (ErlangAtom "true")
    something_else -> (EXC.case_clause something_else)
erlps__is_valid_call__1 [arg_6] = (EXC.function_clause unit)
erlps__is_valid_call__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_def__4 :: ErlangFun
erlps__record_def__4 [line_0, name_1, fs0_2, st0_3] =
  let   
    arg_6 =
      case st0_3 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 7)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_4 = (BIF.erlang__is_map_key__2 [name_1, arg_6])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let
          arg_11 = (ErlangTuple [(ErlangAtom "redefine_record"), name_1])
        in (erlps__add_error__3 [line_0, arg_11, st0_3])
      (ErlangAtom "false") ->
        let    arg_15 = (erlps__normalise_fields__1 [fs0_2])
        in let
          match_expr_21 = (erlps__def_fields__3 [arg_15, name_1, st0_3])
        in
          case match_expr_21 of
            (ErlangTuple [fs1_19, st1_20]) ->
              let    arg_25 = (ErlangTuple [line_0, fs1_19])
              in let
                arg_28 =
                  case st1_20 of
                    (ErlangTuple arr_31) | (DM.Just field_30) <-
                                             ((arr_31 DA.!! 7)) ->
                      field_30
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let
                record_updt_23 = (BIF.maps__put__3 [name_1, arg_25, arg_28])
              in let
                st2_66 =
                  case st1_20 of
                    (ErlangTuple [(ErlangAtom "lint"), state_32, module_33,
                                  behaviour_34, exports_35, imports_36,
                                  compile_37, records_38, locals_39, no_auto_40,
                                  defined_41, on_load_42, on_load_line_43,
                                  clashes_44, not_deprecated_45, not_removed_46,
                                  func_47, warn_format_48, enabled_warnings_49,
                                  nowarn_bif_clash_50, errors_51, warnings_52,
                                  file_53, recdef_top_54, xqlc_55, called_56,
                                  usage_57, specs_58, callbacks_59,
                                  optional_callbacks_60, types_61, exp_types_62,
                                  in_try_head_63, bvt_64, gexpr_context_65]) ->
                      (ErlangTuple
                         [(ErlangAtom "lint"), state_32, module_33,
                          behaviour_34, exports_35, imports_36, compile_37,
                          record_updt_23, locals_39, no_auto_40, defined_41,
                          on_load_42, on_load_line_43, clashes_44,
                          not_deprecated_45, not_removed_46, func_47,
                          warn_format_48, enabled_warnings_49,
                          nowarn_bif_clash_50, errors_51, warnings_52, file_53,
                          recdef_top_54, xqlc_55, called_56, usage_57, specs_58,
                          callbacks_59, optional_callbacks_60, types_61,
                          exp_types_62, in_try_head_63, bvt_64,
                          gexpr_context_65])
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let
                types_71 =
                  (flmap
                     (\ lc_69 ->
                        case lc_69 of
                          (ErlangTuple [(ErlangAtom "typed_record_field"), _,
                                        t_68]) ->
                            (ErlangCons t_68 ErlangEmptyList)
                          _ -> ErlangEmptyList)
                     fs0_2)
              in let tup_el_74 = (erlps__nowarn__0 [])
              in let
                arg_72 =
                  (ErlangTuple
                     [(ErlangAtom "type"), tup_el_74, (ErlangAtom "product"),
                      types_71])
              in (erlps__check_type__2 [arg_72, st2_66])
            _ -> (EXC.badmatch match_expr_21)
      something_else -> (EXC.case_clause something_else)
erlps__record_def__4 [arg_78, arg_79, arg_80, arg_81] =
  (EXC.function_clause unit)
erlps__record_def__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__def_fields__3 :: ErlangFun
erlps__def_fields__3 [fs0_0, name_1, st0_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [(ErlangTuple [(ErlangAtom "record_field"), lf_7,
                                   (ErlangTuple [(ErlangAtom "atom"), la_8,
                                                 f_9]),
                                   v_10]),
                     (ErlangTuple [fs_11, st_12])]
             =
             let case_13 = (erlps__exist_field__2 [f_9, fs_11])
             in
               case case_13 of
                 (ErlangAtom "true") ->
                   let   
                     arg_19 =
                       (ErlangTuple
                          [(ErlangAtom "redefine_field"), name_1, f_9])
                   in let
                     tup_el_17 = (erlps__add_error__3 [lf_7, arg_19, st_12])
                   in (ErlangTuple [fs_11, tup_el_17])
                 (ErlangAtom "false") ->
                   let   
                     st1_60 =
                       case st_12 of
                         (ErlangTuple [(ErlangAtom "lint"), state_26, module_27,
                                       behaviour_28, exports_29, imports_30,
                                       compile_31, records_32, locals_33,
                                       no_auto_34, defined_35, on_load_36,
                                       on_load_line_37, clashes_38,
                                       not_deprecated_39, not_removed_40,
                                       func_41, warn_format_42,
                                       enabled_warnings_43, nowarn_bif_clash_44,
                                       errors_45, warnings_46, file_47,
                                       recdef_top_48, xqlc_49, called_50,
                                       usage_51, specs_52, callbacks_53,
                                       optional_callbacks_54, types_55,
                                       exp_types_56, in_try_head_57, bvt_58,
                                       gexpr_context_59]) ->
                           (ErlangTuple
                              [(ErlangAtom "lint"), state_26, module_27,
                               behaviour_28, exports_29, imports_30, compile_31,
                               records_32, locals_33, no_auto_34, defined_35,
                               on_load_36, on_load_line_37, clashes_38,
                               not_deprecated_39, not_removed_40, func_41,
                               warn_format_42, enabled_warnings_43,
                               nowarn_bif_clash_44, errors_45, warnings_46,
                               file_47, (ErlangAtom "true"), xqlc_49, called_50,
                               usage_51, specs_52, callbacks_53,
                               optional_callbacks_54, types_55, exp_types_56,
                               in_try_head_57, bvt_58, gexpr_context_59])
                         _ -> (EXC.badrecord (ErlangAtom "lint"))
                   in let
                     match_expr_65 =
                       (erlps__expr__3 [v_10, ErlangEmptyList, st1_60])
                   in
                     case match_expr_65 of
                       (ErlangTuple [_, st2_64]) ->
                         let   
                           record_updt_67 =
                             case st2_64 of
                               (ErlangTuple arr_70) | (DM.Just field_69) <-
                                                        ((arr_70 DA.!! 21)) ->
                                 field_69
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           record_updt_71 =
                             case st2_64 of
                               (ErlangTuple arr_74) | (DM.Just field_73) <-
                                                        ((arr_74 DA.!! 20)) ->
                                 field_73
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           record_updt_75 =
                             case st2_64 of
                               (ErlangTuple arr_78) | (DM.Just field_77) <-
                                                        ((arr_78 DA.!! 25)) ->
                                 field_77
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           st3_114 =
                             case st1_60 of
                               (ErlangTuple [(ErlangAtom "lint"), state_80,
                                             module_81, behaviour_82,
                                             exports_83, imports_84, compile_85,
                                             records_86, locals_87, no_auto_88,
                                             defined_89, on_load_90,
                                             on_load_line_91, clashes_92,
                                             not_deprecated_93, not_removed_94,
                                             func_95, warn_format_96,
                                             enabled_warnings_97,
                                             nowarn_bif_clash_98, errors_99,
                                             warnings_100, file_101,
                                             recdef_top_102, xqlc_103,
                                             called_104, usage_105, specs_106,
                                             callbacks_107,
                                             optional_callbacks_108, types_109,
                                             exp_types_110, in_try_head_111,
                                             bvt_112, gexpr_context_113]) ->
                                 (ErlangTuple
                                    [(ErlangAtom "lint"), state_80, module_81,
                                     behaviour_82, exports_83, imports_84,
                                     compile_85, records_86, locals_87,
                                     no_auto_88, defined_89, on_load_90,
                                     on_load_line_91, clashes_92,
                                     not_deprecated_93, not_removed_94, func_95,
                                     warn_format_96, enabled_warnings_97,
                                     nowarn_bif_clash_98, record_updt_71,
                                     record_updt_67, file_101,
                                     (ErlangAtom "false"), xqlc_103,
                                     record_updt_75, usage_105, specs_106,
                                     callbacks_107, optional_callbacks_108,
                                     types_109, exp_types_110, in_try_head_111,
                                     bvt_112, gexpr_context_113])
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           lop_116 =
                             case st2_64 of
                               (ErlangTuple arr_119) | (DM.Just field_118) <-
                                                         ((arr_119 DA.!! 20)) ->
                                 field_118
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           rop_120 =
                             case st1_60 of
                               (ErlangTuple arr_123) | (DM.Just field_122) <-
                                                         ((arr_123 DA.!! 20)) ->
                                 field_122
                               _ -> (EXC.badrecord (ErlangAtom "lint"))
                         in let
                           case_115 =
                             (BIF.erlang__op_exactEq [lop_116, rop_120])
                         in let
                           nv_127 =
                             case case_115 of
                               (ErlangAtom "true") -> v_10
                               (ErlangAtom "false") ->
                                 (ErlangTuple
                                    [(ErlangAtom "atom"), la_8,
                                     (ErlangAtom "undefined")])
                               something_else ->
                                 (EXC.case_clause something_else)
                         in let
                           tup_el_132 =
                             (ErlangTuple [(ErlangAtom "atom"), la_8, f_9])
                         in let
                           head_129 =
                             (ErlangTuple
                                [(ErlangAtom "record_field"), lf_7, tup_el_132,
                                 nv_127])
                         in (ErlangTuple [(ErlangCons head_129 fs_11), st3_114])
                       _ -> (EXC.badmatch match_expr_65)
                 something_else -> (EXC.case_clause something_else)
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let arg_139 = (ErlangTuple [ErlangEmptyList, st0_2])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_3, arg_139, fs0_0])
erlps__def_fields__3 [arg_143, arg_144, arg_145] =
  (EXC.function_clause unit)
erlps__def_fields__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__normalise_fields__1 :: ErlangFun
erlps__normalise_fields__1 [fs_0] =
  let
    arg_1 =
      (ErlangFun 1
         let
           lambda_2 [(ErlangTuple [(ErlangAtom "record_field"), lf_4,
                                   field_5])]
             =
             let
               tup_el_9 =
                 (ErlangTuple
                    [(ErlangAtom "atom"), lf_4, (ErlangAtom "undefined")])
             in
               (ErlangTuple
                  [(ErlangAtom "record_field"), lf_4, field_5, tup_el_9])
           lambda_2 [(ErlangTuple [(ErlangAtom "typed_record_field"),
                                   (ErlangTuple [(ErlangAtom "record_field"),
                                                 lf_13, field_14]),
                                   _type_15])]
             =
             let
               tup_el_19 =
                 (ErlangTuple
                    [(ErlangAtom "atom"), lf_13, (ErlangAtom "undefined")])
             in
               (ErlangTuple
                  [(ErlangAtom "record_field"), lf_13, field_14, tup_el_19])
           lambda_2 [(ErlangTuple [(ErlangAtom "typed_record_field"),
                                   field_23, _type_24])]
             =
             field_23
           lambda_2 [f_25] = f_25
           lambda_2 [arg_3] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 1 lambda_2) args)
         in lambda_2)
  in (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_1, fs_0])
erlps__normalise_fields__1 [arg_27] = (EXC.function_clause unit)
erlps__normalise_fields__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exist_record__3 :: ErlangFun
erlps__exist_record__3 [line_0, name_1, st_2] =
  let   
    arg_5 =
      case st_2 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 7)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_3 = (BIF.erlang__is_map_key__2 [name_1, arg_5])
  in
    case case_3 of
      (ErlangAtom "true") -> (erlps__used_record__2 [name_1, st_2])
      (ErlangAtom "false") ->
        let
          arg_12 = (ErlangTuple [(ErlangAtom "undefined_record"), name_1])
        in (erlps__add_error__3 [line_0, arg_12, st_2])
      something_else -> (EXC.case_clause something_else)
erlps__exist_record__3 [arg_16, arg_17, arg_18] =
  (EXC.function_clause unit)
erlps__exist_record__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_record__4 :: ErlangFun
erlps__check_record__4 [line_0, name_1, st_2, checkfun_3] =
  let   
    arg_6 =
      case st_2 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 7)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_4 = (BIF.maps__find__2 [name_1, arg_6])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [_line_10, fields_11])]) ->
        let arg_13 = (erlps__used_record__2 [name_1, st_2])
        in
          (BIF.erlang__apply__2
             [checkfun_3,
              (ErlangCons fields_11 (ErlangCons arg_13 ErlangEmptyList))])
      (ErlangAtom "error") ->
        let   
          arg_20 = (ErlangTuple [(ErlangAtom "undefined_record"), name_1])
        in let tup_el_18 = (erlps__add_error__3 [line_0, arg_20, st_2])
        in (ErlangTuple [ErlangEmptyList, tup_el_18])
      something_else -> (EXC.case_clause something_else)
erlps__check_record__4 [arg_24, arg_25, arg_26, arg_27] =
  (EXC.function_clause unit)
erlps__check_record__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__used_record__2 :: ErlangFun
erlps__used_record__2 [name_0,
                       st_2@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                          _, _, _, _, _, _, _, _, _, _, _, _, _,
                                          _, _, _, _, _, _, usage_1, _, _, _, _,
                                          _, _, _, _])]
  =
  let   
    arg_4 =
      case usage_1 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 3)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in let
    usedrecs_8 =
      (BIF.do_remote_fun_call "Gb.Sets" "erlps__add_element__2"
         [name_0, arg_4])
  in let
    record_updt_10 =
      case usage_1 of
        (ErlangTuple [(ErlangAtom "usage"), calls_13, imported_14,
                      used_records_15, used_types_16]) ->
          (ErlangTuple
             [(ErlangAtom "usage"), calls_13, imported_14, usedrecs_8,
              used_types_16])
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in
    case st_2 of
      (ErlangTuple [(ErlangAtom "lint"), state_17, module_18,
                    behaviour_19, exports_20, imports_21, compile_22,
                    records_23, locals_24, no_auto_25, defined_26, on_load_27,
                    on_load_line_28, clashes_29, not_deprecated_30,
                    not_removed_31, func_32, warn_format_33,
                    enabled_warnings_34, nowarn_bif_clash_35, errors_36,
                    warnings_37, file_38, recdef_top_39, xqlc_40, called_41,
                    usage_42, specs_43, callbacks_44, optional_callbacks_45,
                    types_46, exp_types_47, in_try_head_48, bvt_49,
                    gexpr_context_50]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_17, module_18, behaviour_19,
            exports_20, imports_21, compile_22, records_23, locals_24,
            no_auto_25, defined_26, on_load_27, on_load_line_28, clashes_29,
            not_deprecated_30, not_removed_31, func_32, warn_format_33,
            enabled_warnings_34, nowarn_bif_clash_35, errors_36, warnings_37,
            file_38, recdef_top_39, xqlc_40, called_41, record_updt_10,
            specs_43, callbacks_44, optional_callbacks_45, types_46,
            exp_types_47, in_try_head_48, bvt_49, gexpr_context_50])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__used_record__2 [arg_51, arg_52] =
  (EXC.function_clause unit)
erlps__used_record__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_fields__6 :: ErlangFun
erlps__check_fields__6 [fs_0, name_1, fields_2, vt_3, st0_4,
                        checkfun_5]
  =
  let   
    arg_6 =
      (ErlangFun 2
         let
           lambda_7 [field_10, (ErlangTuple [sfsa_11, vta_12, sta_13])] =
             let
               match_expr_24 =
                 (erlps__check_field__7
                    [field_10, name_1, fields_2, vt_3, sta_13, sfsa_11,
                     checkfun_5])
             in
               case match_expr_24 of
                 (ErlangTuple [sfsb_21, (ErlangTuple [vtb_22, stb_23])]) ->
                   let tup_el_26 = (erlps__vtmerge_pat__2 [vta_12, vtb_22])
                   in (ErlangTuple [sfsb_21, tup_el_26, stb_23])
                 _ -> (EXC.badmatch match_expr_24)
           lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
         in lambda_7)
  in let
    arg_30 = (ErlangTuple [ErlangEmptyList, ErlangEmptyList, st0_4])
  in let
    match_expr_38 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_6, arg_30, fs_0])
  in
    case match_expr_38 of
      (ErlangTuple [_seenfields_35, uvt_36, st1_37]) ->
        (ErlangTuple [uvt_36, st1_37])
      _ -> (EXC.badmatch match_expr_38)
erlps__check_fields__6 [arg_41, arg_42, arg_43, arg_44, arg_45,
                        arg_46]
  =
  (EXC.function_clause unit)
erlps__check_fields__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_field__7 :: ErlangFun
erlps__check_field__7 [(ErlangTuple [(ErlangAtom "record_field"),
                                     lf_0,
                                     (ErlangTuple [(ErlangAtom "atom"), la_1,
                                                   f_2]),
                                     val_3]),
                       name_4, fields_5, vt_6, st_7, sfs_8, checkfun_9]
  =
  let case_10 = (BIF.lists__member__2 [f_2, sfs_8])
  in
    case case_10 of
      (ErlangAtom "true") ->
        let   
          arg_18 =
            (ErlangTuple [(ErlangAtom "redefine_field"), name_4, f_2])
        in let tup_el_16 = (erlps__add_error__3 [lf_0, arg_18, st_7])
        in let tup_el_14 = (ErlangTuple [ErlangEmptyList, tup_el_16])
        in (ErlangTuple [sfs_8, tup_el_14])
      (ErlangAtom "false") ->
        let    case_27 = (erlps__find_field__2 [f_2, fields_5])
        in let
          tup_el_26 =
            case case_27 of
              (ErlangTuple [(ErlangAtom "ok"), _i_30]) ->
                (BIF.erlang__apply__2
                   [checkfun_9,
                    (ErlangCons val_3
                       (ErlangCons vt_6 (ErlangCons st_7 ErlangEmptyList)))])
              (ErlangAtom "error") ->
                let   
                  arg_38 =
                    (ErlangTuple [(ErlangAtom "undefined_field"), name_4, f_2])
                in let tup_el_36 = (erlps__add_error__3 [la_1, arg_38, st_7])
                in (ErlangTuple [ErlangEmptyList, tup_el_36])
              something_else -> (EXC.case_clause something_else)
        in (ErlangTuple [(ErlangCons f_2 sfs_8), tup_el_26])
      something_else -> (EXC.case_clause something_else)
erlps__check_field__7 [(ErlangTuple [(ErlangAtom "record_field"),
                                     _lf_0,
                                     (ErlangTuple [(ErlangAtom "var"), la_1,
                                                   f_2@(ErlangAtom "_")]),
                                     val_3]),
                       _name_4, _fields_5, vt_6, st_7, sfs_8, checkfun_9]
  =
  let case_10 = (BIF.lists__member__2 [f_2, sfs_8])
  in
    case case_10 of
      (ErlangAtom "true") ->
        let   
          tup_el_16 =
            (erlps__add_error__3
               [la_1, (ErlangAtom "bad_multi_field_init"), st_7])
        in let tup_el_14 = (ErlangTuple [ErlangEmptyList, tup_el_16])
        in (ErlangTuple [sfs_8, tup_el_14])
      (ErlangAtom "false") ->
        let
          tup_el_23 =
            (BIF.erlang__apply__2
               [checkfun_9,
                (ErlangCons val_3
                   (ErlangCons vt_6 (ErlangCons st_7 ErlangEmptyList)))])
        in (ErlangTuple [(ErlangCons f_2 sfs_8), tup_el_23])
      something_else -> (EXC.case_clause something_else)
erlps__check_field__7 [(ErlangTuple [(ErlangAtom "record_field"),
                                     _lf_0,
                                     (ErlangTuple [(ErlangAtom "var"), la_1,
                                                   v_2]),
                                     _val_3]),
                       name_4, _fields_5, vt_6, st_7, sfs_8, _checkfun_9]
  =
  let   
    arg_15 =
      (ErlangTuple
         [(ErlangAtom "field_name_is_variable"), name_4, v_2])
  in let tup_el_13 = (erlps__add_error__3 [la_1, arg_15, st_7])
  in let tup_el_11 = (ErlangTuple [vt_6, tup_el_13])
  in (ErlangTuple [sfs_8, tup_el_11])
erlps__check_field__7 [arg_20, arg_21, arg_22, arg_23, arg_24,
                       arg_25, arg_26]
  =
  (EXC.function_clause unit)
erlps__check_field__7 args =
  (EXC.badarity
     (ErlangFun 7 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_field__4 :: ErlangFun
erlps__pattern_field__4 [(ErlangTuple [(ErlangAtom "atom"), la_0,
                                       f_1]),
                         name_2, fields_3, st_4]
  =
  let case_5 = (erlps__find_field__2 [f_1, fields_3])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"), _i_8]) ->
        (ErlangTuple [ErlangEmptyList, st_4])
      (ErlangAtom "error") ->
        let   
          arg_14 =
            (ErlangTuple [(ErlangAtom "undefined_field"), name_2, f_1])
        in let tup_el_12 = (erlps__add_error__3 [la_0, arg_14, st_4])
        in (ErlangTuple [ErlangEmptyList, tup_el_12])
      something_else -> (EXC.case_clause something_else)
erlps__pattern_field__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__pattern_field__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pattern_fields__6 :: ErlangFun
erlps__pattern_fields__6 [fs_0, name_1, fields_2, vt0_3, old_4,
                          st0_5]
  =
  let   
    checkfun_17 =
      (ErlangFun 3
         let
           lambda_6 [val_10, vt_11, st_12] =
             (erlps__pattern__4 [val_10, vt_11, old_4, st_12])
           lambda_6 [arg_7, arg_8, arg_9] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 3 lambda_6) args)
         in lambda_6)
  in let
    arg_18 =
      (ErlangFun 2
         let
           lambda_19 [field_22,
                      (ErlangTuple [sfsa_23, vta_24, newa_25, sta_26])]
             =
             let
               case_27 =
                 (erlps__check_field__7
                    [field_22, name_1, fields_2, vt0_3, sta_26, sfsa_23,
                     checkfun_17])
             in
               case case_27 of
                 (ErlangTuple [sfsb_35, (ErlangTuple [vtb_36, stb_37])]) ->
                   let tup_el_39 = (erlps__vtmerge_pat__2 [vta_24, vtb_36])
                   in
                     (ErlangTuple [sfsb_35, tup_el_39, ErlangEmptyList, stb_37])
                 (ErlangTuple [sfsb_44,
                               (ErlangTuple [vtb_45, newb_46, stb_47])]) ->
                   let    tup_el_49 = (erlps__vtmerge_pat__2 [vta_24, vtb_45])
                   in let tup_el_52 = (erlps__vtmerge_pat__2 [newa_25, newb_46])
                   in (ErlangTuple [sfsb_44, tup_el_49, tup_el_52, stb_47])
                 something_else -> (EXC.case_clause something_else)
           lambda_19 [arg_20, arg_21] = (EXC.function_clause unit)
           lambda_19 args = (EXC.badarity (ErlangFun 2 lambda_19) args)
         in lambda_19)
  in let
    arg_56 =
      (ErlangTuple
         [ErlangEmptyList, ErlangEmptyList, ErlangEmptyList, st0_5])
  in let
    match_expr_66 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_18, arg_56, fs_0])
  in
    case match_expr_66 of
      (ErlangTuple [_seenfields_62, uvt_63, unew_64, st1_65]) ->
        (ErlangTuple [uvt_63, unew_64, st1_65])
      _ -> (EXC.badmatch match_expr_66)
erlps__pattern_fields__6 [arg_70, arg_71, arg_72, arg_73, arg_74,
                          arg_75]
  =
  (EXC.function_clause unit)
erlps__pattern_fields__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__record_field__4 :: ErlangFun
erlps__record_field__4 [(ErlangTuple [(ErlangAtom "atom"), la_0,
                                      f_1]),
                        name_2, fields_3, st_4]
  =
  let case_5 = (erlps__find_field__2 [f_1, fields_3])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"), _i_8]) ->
        (ErlangTuple [ErlangEmptyList, st_4])
      (ErlangAtom "error") ->
        let   
          arg_14 =
            (ErlangTuple [(ErlangAtom "undefined_field"), name_2, f_1])
        in let tup_el_12 = (erlps__add_error__3 [la_0, arg_14, st_4])
        in (ErlangTuple [ErlangEmptyList, tup_el_12])
      something_else -> (EXC.case_clause something_else)
erlps__record_field__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__record_field__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__init_fields__6 :: ErlangFun
erlps__init_fields__6 [ifs_0, line_1, name_2, dfs_3, vt0_4,
                       st0_5]
  =
  let    arg_11 = (ErlangFun 3 erlps__expr__3)
  in let
    match_expr_14 =
      (erlps__check_fields__6
         [ifs_0, name_2, dfs_3, vt0_4, st0_5, arg_11])
  in
    case match_expr_14 of
      (ErlangTuple [vt1_12, st1_13]) ->
        let    defs_18 = (erlps__init_fields__3 [ifs_0, line_1, dfs_3])
        in let arg_24 = (ErlangFun 3 erlps__expr__3)
        in let
          match_expr_26 =
            (erlps__check_fields__6
               [defs_18, name_2, dfs_3, vt1_12, st1_13, arg_24])
        in
          case match_expr_26 of
            (ErlangTuple [_, st2_25]) ->
              let   
                record_updt_30 =
                  case st2_25 of
                    (ErlangTuple arr_33) | (DM.Just field_32) <-
                                             ((arr_33 DA.!! 26)) ->
                      field_32
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let
                tup_el_28 =
                  case st1_13 of
                    (ErlangTuple [(ErlangAtom "lint"), state_34, module_35,
                                  behaviour_36, exports_37, imports_38,
                                  compile_39, records_40, locals_41, no_auto_42,
                                  defined_43, on_load_44, on_load_line_45,
                                  clashes_46, not_deprecated_47, not_removed_48,
                                  func_49, warn_format_50, enabled_warnings_51,
                                  nowarn_bif_clash_52, errors_53, warnings_54,
                                  file_55, recdef_top_56, xqlc_57, called_58,
                                  usage_59, specs_60, callbacks_61,
                                  optional_callbacks_62, types_63, exp_types_64,
                                  in_try_head_65, bvt_66, gexpr_context_67]) ->
                      (ErlangTuple
                         [(ErlangAtom "lint"), state_34, module_35,
                          behaviour_36, exports_37, imports_38, compile_39,
                          records_40, locals_41, no_auto_42, defined_43,
                          on_load_44, on_load_line_45, clashes_46,
                          not_deprecated_47, not_removed_48, func_49,
                          warn_format_50, enabled_warnings_51,
                          nowarn_bif_clash_52, errors_53, warnings_54, file_55,
                          recdef_top_56, xqlc_57, called_58, record_updt_30,
                          specs_60, callbacks_61, optional_callbacks_62,
                          types_63, exp_types_64, in_try_head_65, bvt_66,
                          gexpr_context_67])
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in (ErlangTuple [vt1_12, tup_el_28])
            _ -> (EXC.badmatch match_expr_26)
      _ -> (EXC.badmatch match_expr_14)
erlps__init_fields__6 [arg_68, arg_69, arg_70, arg_71, arg_72,
                       arg_73]
  =
  (EXC.function_clause unit)
erlps__init_fields__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__ginit_fields__6 :: ErlangFun
erlps__ginit_fields__6 [ifs_0, line_1, name_2, dfs_3, vt0_4,
                        st0_5]
  =
  let    arg_11 = (ErlangFun 3 erlps__gexpr__3)
  in let
    match_expr_14 =
      (erlps__check_fields__6
         [ifs_0, name_2, dfs_3, vt0_4, st0_5, arg_11])
  in
    case match_expr_14 of
      (ErlangTuple [vt1_12, st1_13]) ->
        let    defs_18 = (erlps__init_fields__3 [ifs_0, line_1, dfs_3])
        in let
          st2_55 =
            case st1_13 of
              (ErlangTuple [(ErlangAtom "lint"), state_21, module_22,
                            behaviour_23, exports_24, imports_25, compile_26,
                            records_27, locals_28, no_auto_29, defined_30,
                            on_load_31, on_load_line_32, clashes_33,
                            not_deprecated_34, not_removed_35, func_36,
                            warn_format_37, enabled_warnings_38,
                            nowarn_bif_clash_39, errors_40, warnings_41,
                            file_42, recdef_top_43, xqlc_44, called_45,
                            usage_46, specs_47, callbacks_48,
                            optional_callbacks_49, types_50, exp_types_51,
                            in_try_head_52, bvt_53, gexpr_context_54]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_21, module_22, behaviour_23,
                    exports_24, imports_25, compile_26, records_27, locals_28,
                    no_auto_29, defined_30, on_load_31, on_load_line_32,
                    clashes_33, not_deprecated_34, not_removed_35, func_36,
                    warn_format_37, enabled_warnings_38, nowarn_bif_clash_39,
                    ErlangEmptyList, warnings_41, file_42, recdef_top_43,
                    xqlc_44, called_45, usage_46, specs_47, callbacks_48,
                    optional_callbacks_49, types_50, exp_types_51,
                    in_try_head_52, bvt_53, gexpr_context_54])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_61 = (ErlangFun 3 erlps__gexpr__3)
        in let
          match_expr_63 =
            (erlps__check_fields__6
               [defs_18, name_2, dfs_3, vt1_12, st2_55, arg_61])
        in
          case match_expr_63 of
            (ErlangTuple [_, st3_62]) ->
              case st3_62 of
                (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _, _, _, _,
                              _, _, _, _, _, _, _, _, _, errors_64, _, _, _, _,
                              _, usage_65, _, _, _, _, _, _, _, _]) ->
                  let   
                    illerrs_73 =
                      (flmap
                         (\ lc_71 ->
                            case lc_71 of
                              e_70@(ErlangTuple [_file_68,
                                                 (ErlangTuple [_line_69,
                                                               (ErlangAtom "erl_lint"),
                                                               (ErlangAtom "illegal_guard_expr")])]) ->
                                (ErlangCons e_70 ErlangEmptyList)
                              _ -> ErlangEmptyList)
                         errors_64)
                  in let
                    rop_78 =
                      case st1_13 of
                        (ErlangTuple arr_81) | (DM.Just field_80) <-
                                                 ((arr_81 DA.!! 20)) ->
                          field_80
                        _ -> (EXC.badrecord (ErlangAtom "lint"))
                  in let
                    record_updt_76 =
                      (BIF.erlang__op_append [illerrs_73, rop_78])
                  in let
                    st4_116 =
                      case st1_13 of
                        (ErlangTuple [(ErlangAtom "lint"), state_82, module_83,
                                      behaviour_84, exports_85, imports_86,
                                      compile_87, records_88, locals_89,
                                      no_auto_90, defined_91, on_load_92,
                                      on_load_line_93, clashes_94,
                                      not_deprecated_95, not_removed_96,
                                      func_97, warn_format_98,
                                      enabled_warnings_99, nowarn_bif_clash_100,
                                      errors_101, warnings_102, file_103,
                                      recdef_top_104, xqlc_105, called_106,
                                      usage_107, specs_108, callbacks_109,
                                      optional_callbacks_110, types_111,
                                      exp_types_112, in_try_head_113, bvt_114,
                                      gexpr_context_115]) ->
                          (ErlangTuple
                             [(ErlangAtom "lint"), state_82, module_83,
                              behaviour_84, exports_85, imports_86, compile_87,
                              records_88, locals_89, no_auto_90, defined_91,
                              on_load_92, on_load_line_93, clashes_94,
                              not_deprecated_95, not_removed_96, func_97,
                              warn_format_98, enabled_warnings_99,
                              nowarn_bif_clash_100, record_updt_76,
                              warnings_102, file_103, recdef_top_104, xqlc_105,
                              called_106, usage_65, specs_108, callbacks_109,
                              optional_callbacks_110, types_111, exp_types_112,
                              in_try_head_113, bvt_114, gexpr_context_115])
                        _ -> (EXC.badrecord (ErlangAtom "lint"))
                  in (ErlangTuple [vt1_12, st4_116])
                _ -> (EXC.badmatch st3_62)
            _ -> (EXC.badmatch match_expr_63)
      _ -> (EXC.badmatch match_expr_14)
erlps__ginit_fields__6 [arg_119, arg_120, arg_121, arg_122,
                        arg_123, arg_124]
  =
  (EXC.function_clause unit)
erlps__ginit_fields__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__init_fields__3 :: ErlangFun
erlps__init_fields__3 [ifs_0, line_1, dfs_2] =
  (flmap
     (\ lc_8 ->
        case lc_8 of
          (ErlangTuple [(ErlangAtom "record_field"), lf_4,
                        (ErlangTuple [(ErlangAtom "atom"), la_5, f_6]),
                        di_7]) ->
            let    op_arg_10 = (erlps__exist_field__2 [f_6, ifs_0])
            in let cond_9 = (BIF.erlang__not__1 [op_arg_10])
            in
              case cond_9 of
                (ErlangAtom "true") ->
                  let   
                    tup_el_16 = (ErlangTuple [(ErlangAtom "atom"), la_5, f_6])
                  in let tup_el_20 = (erlps__copy_expr__2 [di_7, line_1])
                  in let
                    lc_ret_13 =
                      (ErlangTuple
                         [(ErlangAtom "record_field"), lf_4, tup_el_16,
                          tup_el_20])
                  in (ErlangCons lc_ret_13 ErlangEmptyList)
                _ -> ErlangEmptyList
          _ -> ErlangEmptyList)
     dfs_2)
erlps__init_fields__3 [arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__init_fields__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__update_fields__5 :: ErlangFun
erlps__update_fields__5 [ufs_0, name_1, dfs_2, vt_3, st_4] =
  let arg_10 = (ErlangFun 3 erlps__expr__3)
  in
    (erlps__check_fields__6
       [ufs_0, name_1, dfs_2, vt_3, st_4, arg_10])
erlps__update_fields__5 [arg_11, arg_12, arg_13, arg_14, arg_15]
  =
  (EXC.function_clause unit)
erlps__update_fields__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exist_field__2 :: ErlangFun
erlps__exist_field__2 [f_0,
                       (ErlangCons (ErlangTuple [(ErlangAtom "record_field"),
                                                 _lf_1,
                                                 (ErlangTuple [(ErlangAtom "atom"),
                                                               _la_2, f_3]),
                                                 _val_4]) _fs_5)]
  | (f_3 == f_0) =
  (ErlangAtom "true")
erlps__exist_field__2 [f_0, (ErlangCons _ fs_1)] =
  (erlps__exist_field__2 [f_0, fs_1])
erlps__exist_field__2 [_f_0, (ErlangEmptyList)] =
  (ErlangAtom "false")
erlps__exist_field__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__exist_field__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__find_field__2 :: ErlangFun
erlps__find_field__2 [_f_0,
                      (ErlangCons (ErlangTuple [(ErlangAtom "record_field"),
                                                _lf_1,
                                                (ErlangTuple [(ErlangAtom "atom"),
                                                              _la_2, _f_3]),
                                                val_4]) _fs_5)]
  | (_f_3 == _f_0) =
  (ErlangTuple [(ErlangAtom "ok"), val_4])
erlps__find_field__2 [f_0, (ErlangCons _ fs_1)] =
  (erlps__find_field__2 [f_0, fs_1])
erlps__find_field__2 [_f_0, (ErlangEmptyList)] =
  (ErlangAtom "error")
erlps__find_field__2 [arg_1, arg_2] = (EXC.function_clause unit)
erlps__find_field__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__type_def__6 :: ErlangFun
erlps__type_def__6 [attr_0, line_1, typename_2, prototype_3,
                    args_4, st0_5]
  =
  let   
    typedefs_9 =
      case st0_5 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 30)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let arity_11 = (BIF.erlang__length__1 [args_4])
  in let typepair_14 = (ErlangTuple [typename_2, arity_11])
  in let
    info_18 = (ErlangTuple [(ErlangAtom "typeinfo"), attr_0, line_1])
  in let
    storetype_71 =
      (ErlangFun 1
         let
           lambda_19 [st_21] =
             let   
               newdefs_25 =
                 (BIF.maps__put__3 [typepair_14, info_18, typedefs_9])
             in let tup_el_27 = (erlps__nowarn__0 [])
             in let
               checktype_32 =
                 (ErlangTuple
                    [(ErlangAtom "type"), tup_el_27, (ErlangAtom "product"),
                     (ErlangCons prototype_3 args_4)])
             in let
               arg_34 =
                 case st_21 of
                   (ErlangTuple [(ErlangAtom "lint"), state_37, module_38,
                                 behaviour_39, exports_40, imports_41,
                                 compile_42, records_43, locals_44, no_auto_45,
                                 defined_46, on_load_47, on_load_line_48,
                                 clashes_49, not_deprecated_50, not_removed_51,
                                 func_52, warn_format_53, enabled_warnings_54,
                                 nowarn_bif_clash_55, errors_56, warnings_57,
                                 file_58, recdef_top_59, xqlc_60, called_61,
                                 usage_62, specs_63, callbacks_64,
                                 optional_callbacks_65, types_66, exp_types_67,
                                 in_try_head_68, bvt_69, gexpr_context_70]) ->
                     (ErlangTuple
                        [(ErlangAtom "lint"), state_37, module_38, behaviour_39,
                         exports_40, imports_41, compile_42, records_43,
                         locals_44, no_auto_45, defined_46, on_load_47,
                         on_load_line_48, clashes_49, not_deprecated_50,
                         not_removed_51, func_52, warn_format_53,
                         enabled_warnings_54, nowarn_bif_clash_55, errors_56,
                         warnings_57, file_58, recdef_top_59, xqlc_60,
                         called_61, usage_62, specs_63, callbacks_64,
                         optional_callbacks_65, newdefs_25, exp_types_67,
                         in_try_head_68, bvt_69, gexpr_context_70])
                   _ -> (EXC.badrecord (ErlangAtom "lint"))
             in (erlps__check_type__2 [checktype_32, arg_34])
           lambda_19 [arg_20] = (EXC.function_clause unit)
           lambda_19 args = (EXC.badarity (ErlangFun 1 lambda_19) args)
         in lambda_19)
  in let case_72 = (erlps__is_default_type__1 [typepair_14])
  in
    case case_72 of
      (ErlangAtom "true") ->
        let case_74 = (erlps__is_obsolete_builtin_type__1 [typepair_14])
        in
          case case_74 of
            (ErlangAtom "true") ->
              (BIF.erlang__apply__2
                 [storetype_71, (ErlangCons st0_5 ErlangEmptyList)])
            (ErlangAtom "false") ->
              let
                case_78 =
                  (erlps__is_newly_introduced_builtin_type__1 [typepair_14])
              in
                case case_78 of
                  (ErlangAtom "true") ->
                    let   
                      warn_82 =
                        (ErlangTuple
                           [(ErlangAtom "new_builtin_type"), typepair_14])
                    in let
                      st1_86 = (erlps__add_warning__3 [line_1, warn_82, st0_5])
                    in
                      (BIF.erlang__apply__2
                         [storetype_71, (ErlangCons st1_86 ErlangEmptyList)])
                  (ErlangAtom "false") ->
                    let
                      arg_90 =
                        (ErlangTuple [(ErlangAtom "builtin_type"), typepair_14])
                    in (erlps__add_error__3 [line_1, arg_90, st0_5])
                  something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") ->
        let
          case_94 = (BIF.erlang__is_map_key__2 [typepair_14, typedefs_9])
        in
          case case_94 of
            (ErlangAtom "true") ->
              let
                arg_98 =
                  (ErlangTuple [(ErlangAtom "redefine_type"), typepair_14])
              in (erlps__add_error__3 [line_1, arg_98, st0_5])
            (ErlangAtom "false") ->
              let   
                lop_103 =
                  (BIF.erlang__op_exactEq [attr_0, (ErlangAtom "opaque")])
              in let
                case_102 =
                  case lop_103 of
                    (ErlangAtom "false") -> (ErlangAtom "false")
                    (ErlangAtom "true") ->
                      (erlps__is_underspecified__2 [prototype_3, arity_11])
                    _ -> (EXC.badarg1 lop_103)
              in let
                st1_114 =
                  case case_102 of
                    (ErlangAtom "true") ->
                      let
                        warn_110 =
                          (ErlangTuple
                             [(ErlangAtom "underspecified_opaque"),
                              typepair_14])
                      in (erlps__add_warning__3 [line_1, warn_110, st0_5])
                    (ErlangAtom "false") -> st0_5
                    something_else -> (EXC.case_clause something_else)
              in
                (BIF.erlang__apply__2
                   [storetype_71, (ErlangCons st1_114 ErlangEmptyList)])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__type_def__6 [arg_117, arg_118, arg_119, arg_120, arg_121,
                    arg_122]
  =
  (EXC.function_clause unit)
erlps__type_def__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_underspecified__2 :: ErlangFun
erlps__is_underspecified__2 [(ErlangTuple [(ErlangAtom "type"),
                                           _, (ErlangAtom "term"),
                                           (ErlangEmptyList)]),
                             (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__is_underspecified__2 [(ErlangTuple [(ErlangAtom "type"),
                                           _, (ErlangAtom "any"),
                                           (ErlangEmptyList)]),
                             (ErlangInt num_0)]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 0))) =
  (ErlangAtom "true")
erlps__is_underspecified__2 [_prottype_0, _arity_1] =
  (ErlangAtom "false")
erlps__is_underspecified__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__is_underspecified__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_type__2 :: ErlangFun
erlps__check_type__2 [types_0, st_1] =
  let    arg_3 = (BIF.do_remote_fun_call "Maps" "erlps__new__0" [])
  in let
    match_expr_7 = (erlps__check_type__3 [types_0, arg_3, st_1])
  in
    case match_expr_7 of
      (ErlangTuple [seenvars_5, st1_6]) ->
        let
          arg_8 =
            (ErlangFun 3
               let
                 lambda_9 [var_13,
                           (ErlangTuple [(ErlangAtom "seen_once"), line_14]),
                           accst_15]
                   =
                   let case_16 = (BIF.erlang__atom_to_list__1 [var_13])
                   in
                     case case_16 of
                       (ErlangCons (ErlangInt num_18) _) | ((ErlangInt
                                                               num_18) ==
                                                              (ErlangInt
                                                                 (DBI.fromInt
                                                                    95))) ->
                         accst_15
                       _ ->
                         let
                           arg_20 =
                             (ErlangTuple
                                [(ErlangAtom "singleton_typevar"), var_13])
                         in (erlps__add_error__3 [line_14, arg_20, accst_15])
                       something_else -> (EXC.case_clause something_else)
                 lambda_9 [_var_24, (ErlangAtom "seen_multiple"), accst_25] =
                   accst_25
                 lambda_9 [arg_10, arg_11, arg_12] = (EXC.function_clause unit)
                 lambda_9 args = (EXC.badarity (ErlangFun 3 lambda_9) args)
               in lambda_9)
        in
          (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
             [arg_8, st1_6, seenvars_5])
      _ -> (EXC.badmatch match_expr_7)
erlps__check_type__2 [arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__check_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_type__3 :: ErlangFun
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "ann_type"),
                                    _l_0,
                                    (ErlangCons _var_1 (ErlangCons type_2 (ErlangEmptyList)))]),
                      seenvars_3, st_4]
  =
  (erlps__check_type__3 [type_2, seenvars_3, st_4])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "remote_type"),
                                    l_0,
                                    (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                              _,
                                                              mod_1]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                                _,
                                                                                                name_2]) (ErlangCons args_3 (ErlangEmptyList))))]),
                      seenvars_4, st00_5]
  =
  let    st0_9 = (erlps__check_module_name__3 [mod_1, l_0, st00_5])
  in let
    st_15 =
      (erlps__deprecated_type__5 [l_0, mod_1, name_2, args_3, st0_9])
  in let
    currentmod_19 =
      case st_15 of
        (ErlangTuple arr_18) | (DM.Just field_17) <-
                                 ((arr_18 DA.!! 2)) ->
          field_17
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_20 = (BIF.erlang__op_exactEq [mod_1, currentmod_19])
  in
    case case_20 of
      (ErlangAtom "true") ->
        let
          arg_23 =
            (ErlangTuple [(ErlangAtom "user_type"), l_0, name_2, args_3])
        in (erlps__check_type__3 [arg_23, seenvars_4, st_15])
      (ErlangAtom "false") ->
        let   
          arg_30 =
            (ErlangFun 2
               let
                 lambda_31 [t_34, (ErlangTuple [accseenvars_35, accst_36])] =
                   (erlps__check_type__3 [t_34, accseenvars_35, accst_36])
                 lambda_31 [arg_32, arg_33] = (EXC.function_clause unit)
                 lambda_31 args = (EXC.badarity (ErlangFun 2 lambda_31) args)
               in lambda_31)
        in let arg_40 = (ErlangTuple [seenvars_4, st_15])
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_30, arg_40, args_3])
      something_else -> (EXC.case_clause something_else)
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "integer"), _l_0,
                                    _]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "atom"), _l_0,
                                    _]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "var"), _l_0,
                                    (ErlangAtom "_")]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "var"), l_0,
                                    name_1]),
                      seenvars_2, st_3]
  =
  let    case_4 = (BIF.maps__find__2 [name_1, seenvars_2])
  in let
    newseenvars_15 =
      case case_4 of
        (ErlangTuple [(ErlangAtom "ok"),
                      (ErlangTuple [(ErlangAtom "seen_once"), _])]) ->
          (BIF.maps__put__3
             [name_1, (ErlangAtom "seen_multiple"), seenvars_2])
        (ErlangTuple [(ErlangAtom "ok"),
                      (ErlangAtom "seen_multiple")]) ->
          seenvars_2
        (ErlangAtom "error") ->
          let arg_11 = (ErlangTuple [(ErlangAtom "seen_once"), l_0])
          in (BIF.maps__put__3 [name_1, arg_11, seenvars_2])
        something_else -> (EXC.case_clause something_else)
  in (ErlangTuple [newseenvars_15, st_3])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), l_0,
                                    (ErlangAtom "bool"), (ErlangEmptyList)]),
                      seenvars_1, st_2]
  =
  let   
    arg_6 =
      (ErlangTuple
         [(ErlangAtom "renamed_type"), (ErlangAtom "bool"),
          (ErlangAtom "boolean")])
  in let tup_el_4 = (erlps__add_warning__3 [l_0, arg_6, st_2])
  in (ErlangTuple [seenvars_1, tup_el_4])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), l_0,
                                    (ErlangAtom "fun"),
                                    (ErlangCons dom_1 (ErlangCons range_2 (ErlangEmptyList)))]),
                      seenvars_3, st_4]
  =
  let   
    st1_11 =
      case dom_1 of
        (ErlangTuple [(ErlangAtom "type"), _, (ErlangAtom "product"),
                      _]) ->
          st_4
        (ErlangTuple [(ErlangAtom "type"), _, (ErlangAtom "any")]) ->
          st_4
        _ ->
          let
            arg_7 =
              (ErlangTuple [(ErlangAtom "type_syntax"), (ErlangAtom "fun")])
          in (erlps__add_error__3 [l_0, arg_7, st_4])
        something_else -> (EXC.case_clause something_else)
  in let tup_el_14 = (erlps__nowarn__0 [])
  in let
    arg_12 =
      (ErlangTuple
         [(ErlangAtom "type"), tup_el_14, (ErlangAtom "product"),
          (ErlangCons dom_1 (ErlangCons range_2 ErlangEmptyList))])
  in (erlps__check_type__3 [arg_12, seenvars_3, st1_11])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), l_0,
                                    (ErlangAtom "range"),
                                    (ErlangCons from_1 (ErlangCons to_2 (ErlangEmptyList)))]),
                      seenvars_3, st_4]
  =
  let   
    tup_el_6 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [from_1])
  in let
    tup_el_8 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [to_2])
  in let case_5 = (ErlangTuple [tup_el_6, tup_el_8])
  in let
    st1_17 =
      case case_5 of
        (ErlangTuple [(ErlangTuple [(ErlangAtom "integer"), _, x_10]),
                      (ErlangTuple [(ErlangAtom "integer"), _,
                                    y_11])]) | (weakLt x_10 y_11) ->
          st_4
        _ ->
          let
            arg_13 =
              (ErlangTuple [(ErlangAtom "type_syntax"), (ErlangAtom "range")])
          in (erlps__add_error__3 [l_0, arg_13, st_4])
        something_else -> (EXC.case_clause something_else)
  in (ErlangTuple [seenvars_3, st1_17])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    (ErlangAtom "map"), (ErlangAtom "any")]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    (ErlangAtom "map"), pairs_1]),
                      seenvars_2, st_3]
  =
  let   
    arg_4 =
      (ErlangFun 2
         let
           lambda_5 [pair_8, (ErlangTuple [accseenvars_9, accst_10])] =
             (erlps__check_type__3 [pair_8, accseenvars_9, accst_10])
           lambda_5 [arg_6, arg_7] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 2 lambda_5) args)
         in lambda_5)
  in let arg_14 = (ErlangTuple [seenvars_2, st_3])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_4, arg_14, pairs_1])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    (ErlangAtom "map_field_assoc"),
                                    (ErlangCons dom_1 (ErlangCons range_2 (ErlangEmptyList)))]),
                      seenvars_3, st_4]
  =
  let    tup_el_7 = (erlps__nowarn__0 [])
  in let
    arg_5 =
      (ErlangTuple
         [(ErlangAtom "type"), tup_el_7, (ErlangAtom "product"),
          (ErlangCons dom_1 (ErlangCons range_2 ErlangEmptyList))])
  in (erlps__check_type__3 [arg_5, seenvars_3, st_4])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    (ErlangAtom "tuple"), (ErlangAtom "any")]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    (ErlangAtom "any")]),
                      seenvars_1, st_2]
  =
  (ErlangTuple [seenvars_1, st_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), l_0,
                                    (ErlangAtom "binary"),
                                    (ErlangCons base_1 (ErlangCons unit_2 (ErlangEmptyList)))]),
                      seenvars_3, st_4]
  =
  let   
    tup_el_6 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [base_1])
  in let
    tup_el_8 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [unit_2])
  in let case_5 = (ErlangTuple [tup_el_6, tup_el_8])
  in let
    st1_17 =
      case case_5 of
        (ErlangTuple [(ErlangTuple [(ErlangAtom "integer"), _,
                                    baseval_10]),
                      (ErlangTuple [(ErlangAtom "integer"), _,
                                    unitval_11])]) | ((weakGeq baseval_10
                                                         (ErlangInt
                                                            (DBI.fromInt 0))) &&
                                                        (weakGeq unitval_11
                                                           (ErlangInt
                                                              (DBI.fromInt
                                                                 0)))) ->
          st_4
        _ ->
          let
            arg_13 =
              (ErlangTuple [(ErlangAtom "type_syntax"), (ErlangAtom "binary")])
          in (erlps__add_error__3 [l_0, arg_13, st_4])
        something_else -> (EXC.case_clause something_else)
  in (ErlangTuple [seenvars_3, st1_17])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), l_0,
                                    (ErlangAtom "record"),
                                    (ErlangCons name_1 fields_2)]),
                      seenvars_3, st_4]
  =
  case name_1 of
    (ErlangTuple [(ErlangAtom "atom"), _, atom_6]) ->
      let st1_9 = (erlps__used_record__2 [atom_6, st_4])
      in
        (erlps__check_record_types__5
           [l_0, atom_6, fields_2, seenvars_3, st1_9])
    _ ->
      let   
        arg_18 =
          (ErlangTuple [(ErlangAtom "type_syntax"), (ErlangAtom "record")])
      in let tup_el_16 = (erlps__add_error__3 [l_0, arg_18, st_4])
      in (ErlangTuple [seenvars_3, tup_el_16])
    something_else -> (EXC.case_clause something_else)
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), _l_0,
                                    tag_1, args_2]),
                      seenvars_3, st_4]
  | ((ErlangAtom "true") ==
       (falsifyErrors
          (\ _ ->
             let   
               lop_20 = (BIF.erlang__op_exactEq [tag_1, (ErlangAtom "product")])
             in let
               lop_19 =
                 case lop_20 of
                   (ErlangAtom "true") -> (ErlangAtom "true")
                   (ErlangAtom "false") ->
                     (BIF.erlang__op_exactEq [tag_1, (ErlangAtom "union")])
                   _ -> (EXC.badarg1 lop_20)
             in
               case lop_19 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (BIF.erlang__op_exactEq [tag_1, (ErlangAtom "tuple")])
                 _ -> (EXC.badarg1 lop_19)))) =
  let   
    arg_5 =
      (ErlangFun 2
         let
           lambda_6 [t_9, (ErlangTuple [accseenvars_10, accst_11])] =
             (erlps__check_type__3 [t_9, accseenvars_10, accst_11])
           lambda_6 [arg_7, arg_8] = (EXC.function_clause unit)
           lambda_6 args = (EXC.badarity (ErlangFun 2 lambda_6) args)
         in lambda_6)
  in let arg_15 = (ErlangTuple [seenvars_3, st_4])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_5, arg_15, args_2])
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "type"), la_0,
                                    typename_1, args_2]),
                      seenvars_3, st_4]
  =
  case st_4 of
    (ErlangTuple [(ErlangAtom "lint"), _, module_5, _, _, _, _, _, _,
                  _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                  types_6, _, _, _, _]) ->
      let    arity_9 = (BIF.erlang__length__1 [args_2])
      in let typepair_12 = (ErlangTuple [typename_1, arity_9])
      in let
        lop_13 =
          (erlps__is_warn_enabled__2
             [(ErlangAtom "deprecated_type"), st_4])
      in let
        obsolete_17 =
          case lop_13 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") ->
              (erlps__obsolete_builtin_type__1 [typepair_12])
            _ -> (EXC.badarg1 lop_13)
      in let
        st1_42 =
          case obsolete_17 of
            (ErlangTuple [(ErlangAtom "deprecated"), repl_19,
                          _]) | ((ErlangAtom "true") ==
                                   (falsifyErrors
                                      (\ _ ->
                                         let
                                           lop_20 =
                                             (BIF.erlang__element__2
                                                [(ErlangInt (DBI.fromInt 1)),
                                                 repl_19])
                                         in
                                           (BIF.erlang__op_exactNeq
                                              [lop_20, module_5])))) ->
              let case_24 = (BIF.maps__find__2 [typepair_12, types_6])
              in
                case case_24 of
                  (ErlangTuple [(ErlangAtom "ok"), _]) ->
                    (erlps__used_type__3 [typepair_12, la_0, st_4])
                  (ErlangAtom "error") ->
                    case obsolete_17 of
                      (ErlangTuple [(ErlangAtom "deprecated"), replacement_30,
                                    rel_31]) ->
                        let
                          w_38 =
                            (ErlangTuple
                               [(ErlangAtom "deprecated_builtin_type"),
                                typepair_12, replacement_30, rel_31])
                        in (erlps__add_warning__3 [la_0, w_38, st_4])
                      _ -> (EXC.badmatch obsolete_17)
                  something_else -> (EXC.case_clause something_else)
            _ -> st_4
            something_else -> (EXC.case_clause something_else)
      in let tup_el_45 = (erlps__nowarn__0 [])
      in let
        arg_43 =
          (ErlangTuple
             [(ErlangAtom "type"), tup_el_45, (ErlangAtom "product"), args_2])
      in (erlps__check_type__3 [arg_43, seenvars_3, st1_42])
    _ -> (EXC.badmatch st_4)
erlps__check_type__3 [(ErlangTuple [(ErlangAtom "user_type"),
                                    l_0, typename_1, args_2]),
                      seenvars_3, st_4]
  =
  let    arity_6 = (BIF.erlang__length__1 [args_2])
  in let typepair_9 = (ErlangTuple [typename_1, arity_6])
  in let st1_13 = (erlps__used_type__3 [typepair_9, l_0, st_4])
  in let
    arg_14 =
      (ErlangFun 2
         let
           lambda_15 [t_18, (ErlangTuple [accseenvars_19, accst_20])] =
             (erlps__check_type__3 [t_18, accseenvars_19, accst_20])
           lambda_15 [arg_16, arg_17] = (EXC.function_clause unit)
           lambda_15 args = (EXC.badarity (ErlangFun 2 lambda_15) args)
         in lambda_15)
  in let arg_24 = (ErlangTuple [seenvars_3, st1_13])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_14, arg_24, args_2])
erlps__check_type__3 [(ErlangCons (ErlangTuple [(ErlangAtom "typed_record_field"),
                                                field_0, _t_1]) _),
                      seenvars_2, st_3]
  =
  let   
    arg_6 =
      (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), field_0])
  in let
    tup_el_5 =
      (erlps__add_error__3
         [arg_6, (ErlangAtom "old_abstract_code"), st_3])
  in (ErlangTuple [seenvars_2, tup_el_5])
erlps__check_type__3 [i_0, seenvars_1, st_2] =
  let
    case_3 =
      (BIF.do_remote_fun_call "Erl.Eval" "erlps__partial_eval__1"
         [i_0])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "integer"), _iln_5, _integer_6]) ->
        (ErlangTuple [seenvars_1, st_2])
      _other_9 ->
        let   
          arg_12 =
            (BIF.erlang__element__2 [(ErlangInt (DBI.fromInt 2)), i_0])
        in let
          arg_15 =
            (ErlangTuple
               [(ErlangAtom "type_syntax"), (ErlangAtom "integer")])
        in let tup_el_11 = (erlps__add_error__3 [arg_12, arg_15, st_2])
        in (ErlangTuple [seenvars_1, tup_el_11])
      something_else -> (EXC.case_clause something_else)
erlps__check_type__3 [arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__check_type__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_record_types__5 :: ErlangFun
erlps__check_record_types__5 [line_0, name_1, fields_2,
                              seenvars_3, st_4]
  =
  let   
    arg_7 =
      case st_4 of
        (ErlangTuple arr_10) | (DM.Just field_9) <- ((arr_10 DA.!! 7)) ->
          field_9
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let case_5 = (BIF.maps__find__2 [name_1, arg_7])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [_l_11, deffields_12])]) ->
        let   
          arg_14 =
            (ErlangFun 1
               let
                 lambda_15 [(ErlangTuple [(ErlangAtom "type"), _,
                                          (ErlangAtom "field_type"), _])]
                   =
                   (ErlangAtom "true")
                 lambda_15 [_] = (ErlangAtom "false")
                 lambda_15 [arg_16] = (EXC.function_clause unit)
                 lambda_15 args = (EXC.badarity (ErlangFun 1 lambda_15) args)
               in lambda_15)
        in let
          case_13 =
            (BIF.do_remote_fun_call "Lists" "erlps__all__2"
               [arg_14, fields_2])
        in
          case case_13 of
            (ErlangAtom "true") ->
              (erlps__check_record_types__6
                 [fields_2, name_1, deffields_12, seenvars_3, st_4,
                  ErlangEmptyList])
            (ErlangAtom "false") ->
              let   
                arg_27 =
                  (ErlangTuple
                     [(ErlangAtom "type_syntax"), (ErlangAtom "record")])
              in let tup_el_25 = (erlps__add_error__3 [line_0, arg_27, st_4])
              in (ErlangTuple [seenvars_3, tup_el_25])
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "error") ->
        let   
          arg_34 = (ErlangTuple [(ErlangAtom "undefined_record"), name_1])
        in let tup_el_32 = (erlps__add_error__3 [line_0, arg_34, st_4])
        in (ErlangTuple [seenvars_3, tup_el_32])
      something_else -> (EXC.case_clause something_else)
erlps__check_record_types__5 [arg_38, arg_39, arg_40, arg_41,
                              arg_42]
  =
  (EXC.function_clause unit)
erlps__check_record_types__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_record_types__6 :: ErlangFun
erlps__check_record_types__6 [(ErlangCons (ErlangTuple [(ErlangAtom "type"),
                                                        _,
                                                        (ErlangAtom "field_type"),
                                                        (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                  al_0,
                                                                                  fname_1]) (ErlangCons type_2 (ErlangEmptyList)))]) left_3),
                              name_4, deffields_5, seenvars_6, st_7,
                              seenfields_8]
  =
  let    case_9 = (erlps__exist_field__2 [fname_1, deffields_5])
  in let
    st1_18 =
      case case_9 of
        (ErlangAtom "true") -> st_7
        (ErlangAtom "false") ->
          let
            arg_13 =
              (ErlangTuple [(ErlangAtom "undefined_field"), name_4, fname_1])
          in (erlps__add_error__3 [al_0, arg_13, st_7])
        something_else -> (EXC.case_clause something_else)
  in let
    case_19 =
      (BIF.do_remote_fun_call "Ordsets" "erlps__is_element__2"
         [fname_1, seenfields_8])
  in let
    st2_28 =
      case case_19 of
        (ErlangAtom "true") ->
          let
            arg_23 =
              (ErlangTuple [(ErlangAtom "redefine_field"), name_4, fname_1])
          in (erlps__add_error__3 [al_0, arg_23, st1_18])
        (ErlangAtom "false") -> st1_18
        something_else -> (EXC.case_clause something_else)
  in let
    match_expr_34 =
      (erlps__check_type__3 [type_2, seenvars_6, st2_28])
  in
    case match_expr_34 of
      (ErlangTuple [newseenvars_32, st3_33]) ->
        let
          newseenfields_37 =
            (BIF.do_remote_fun_call "Ordsets" "erlps__add_element__2"
               [fname_1, seenfields_8])
        in
          (erlps__check_record_types__6
             [left_3, name_4, deffields_5, newseenvars_32, st3_33,
              newseenfields_37])
      _ -> (EXC.badmatch match_expr_34)
erlps__check_record_types__6 [(ErlangEmptyList), _name_0,
                              _deffields_1, seenvars_2, st_3, _seenfields_4]
  =
  (ErlangTuple [seenvars_2, st_3])
erlps__check_record_types__6 [arg_7, arg_8, arg_9, arg_10,
                              arg_11, arg_12]
  =
  (EXC.function_clause unit)
erlps__check_record_types__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__used_type__3 :: ErlangFun
erlps__used_type__3 [typepair_0, l_1,
                     st_4@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _, _, _, _, _, _,
                                        _, _, file_2, _, _, _, usage_3, _, _, _,
                                        _, _, _, _, _])]
  =
  let   
    oldused_8 =
      case usage_3 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 4)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in let
    arg_10 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
         [file_2, l_1])
  in let
    usedtypes_14 = (BIF.maps__put__3 [typepair_0, arg_10, oldused_8])
  in let
    record_updt_16 =
      case usage_3 of
        (ErlangTuple [(ErlangAtom "usage"), calls_19, imported_20,
                      used_records_21, used_types_22]) ->
          (ErlangTuple
             [(ErlangAtom "usage"), calls_19, imported_20, used_records_21,
              usedtypes_14])
        _ -> (EXC.badrecord (ErlangAtom "usage"))
  in
    case st_4 of
      (ErlangTuple [(ErlangAtom "lint"), state_23, module_24,
                    behaviour_25, exports_26, imports_27, compile_28,
                    records_29, locals_30, no_auto_31, defined_32, on_load_33,
                    on_load_line_34, clashes_35, not_deprecated_36,
                    not_removed_37, func_38, warn_format_39,
                    enabled_warnings_40, nowarn_bif_clash_41, errors_42,
                    warnings_43, file_44, recdef_top_45, xqlc_46, called_47,
                    usage_48, specs_49, callbacks_50, optional_callbacks_51,
                    types_52, exp_types_53, in_try_head_54, bvt_55,
                    gexpr_context_56]) ->
        (ErlangTuple
           [(ErlangAtom "lint"), state_23, module_24, behaviour_25,
            exports_26, imports_27, compile_28, records_29, locals_30,
            no_auto_31, defined_32, on_load_33, on_load_line_34, clashes_35,
            not_deprecated_36, not_removed_37, func_38, warn_format_39,
            enabled_warnings_40, nowarn_bif_clash_41, errors_42, warnings_43,
            file_44, recdef_top_45, xqlc_46, called_47, record_updt_16,
            specs_49, callbacks_50, optional_callbacks_51, types_52,
            exp_types_53, in_try_head_54, bvt_55, gexpr_context_56])
      _ -> (EXC.badrecord (ErlangAtom "lint"))
erlps__used_type__3 [arg_57, arg_58, arg_59] =
  (EXC.function_clause unit)
erlps__used_type__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_default_type__1 :: ErlangFun
erlps__is_default_type__1 [(ErlangTuple [name_0,
                                         numberoftypevariables_1])]
  =
  (BIF.do_remote_fun_call "Erl.Internal" "erlps__is_type__2"
     [name_0, numberoftypevariables_1])
erlps__is_default_type__1 [arg_4] = (EXC.function_clause unit)
erlps__is_default_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_newly_introduced_builtin_type__1 :: ErlangFun
erlps__is_newly_introduced_builtin_type__1 [(ErlangTuple [name_0,
                                                          _])]
  | (isEAtom name_0) =
  (ErlangAtom "false")
erlps__is_newly_introduced_builtin_type__1 [arg_1] =
  (EXC.function_clause unit)
erlps__is_newly_introduced_builtin_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_obsolete_builtin_type__1 :: ErlangFun
erlps__is_obsolete_builtin_type__1 [typepair_0] =
  let lop_1 = (erlps__obsolete_builtin_type__1 [typepair_0])
  in (BIF.erlang__op_exactNeq [lop_1, (ErlangAtom "no")])
erlps__is_obsolete_builtin_type__1 [arg_4] =
  (EXC.function_clause unit)
erlps__is_obsolete_builtin_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__obsolete_builtin_type__1 :: ErlangFun
erlps__obsolete_builtin_type__1 [(ErlangTuple [(ErlangInt num_0),
                                               (ErlangInt num_1)])]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 255))) =
  let   
    tup_el_3 =
      (ErlangTuple
         [(ErlangInt (DBI.fromInt 2)), (ErlangInt (DBI.fromInt 255))])
  in let tup_el_6 = (make_string "")
  in (ErlangTuple [(ErlangAtom "deprecated"), tup_el_3, tup_el_6])
erlps__obsolete_builtin_type__1 [(ErlangTuple [name_0, a_1])]
  | ((isEAtom name_0) && (isEInt a_1)) =
  (ErlangAtom "no")
erlps__obsolete_builtin_type__1 [arg_2] =
  (EXC.function_clause unit)
erlps__obsolete_builtin_type__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__spec_decl__4 :: ErlangFun
erlps__spec_decl__4 [line_0, mfa0_1, typespecs_2,
                     st00_5@(ErlangTuple [(ErlangAtom "lint"), _, mod_3, _, _,
                                          _, _, _, _, _, _, _, _, _, _, _, _, _,
                                          _, _, _, _, _, _, _, _, _, specs_4, _,
                                          _, _, _, _, _, _])]
  =
  let
    match_expr_16 =
      case mfa0_1 of
        (ErlangTuple [f_7, a_8]) -> (ErlangTuple [mod_3, f_7, a_8])
        (ErlangTuple [_m_12, _f_13, _a_14]) -> mfa0_1
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_16 of
      (ErlangTuple [_, _, arity_15]) ->
        let   
          arg_18 =
            (BIF.erlang__element__2
               [(ErlangInt (DBI.fromInt 1)), match_expr_16])
        in let
          st0_23 = (erlps__check_module_name__3 [arg_18, line_0, st00_5])
        in let
          record_updt_25 =
            (BIF.maps__put__3 [match_expr_16, line_0, specs_4])
        in let
          st1_63 =
            case st0_23 of
              (ErlangTuple [(ErlangAtom "lint"), state_29, module_30,
                            behaviour_31, exports_32, imports_33, compile_34,
                            records_35, locals_36, no_auto_37, defined_38,
                            on_load_39, on_load_line_40, clashes_41,
                            not_deprecated_42, not_removed_43, func_44,
                            warn_format_45, enabled_warnings_46,
                            nowarn_bif_clash_47, errors_48, warnings_49,
                            file_50, recdef_top_51, xqlc_52, called_53,
                            usage_54, specs_55, callbacks_56,
                            optional_callbacks_57, types_58, exp_types_59,
                            in_try_head_60, bvt_61, gexpr_context_62]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_29, module_30, behaviour_31,
                    exports_32, imports_33, compile_34, records_35, locals_36,
                    no_auto_37, defined_38, on_load_39, on_load_line_40,
                    clashes_41, not_deprecated_42, not_removed_43, func_44,
                    warn_format_45, enabled_warnings_46, nowarn_bif_clash_47,
                    errors_48, warnings_49, file_50, recdef_top_51, xqlc_52,
                    called_53, usage_54, record_updt_25, callbacks_56,
                    optional_callbacks_57, types_58, exp_types_59,
                    in_try_head_60, bvt_61, gexpr_context_62])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          case_64 = (BIF.erlang__is_map_key__2 [match_expr_16, specs_4])
        in
          case case_64 of
            (ErlangAtom "true") ->
              let arg_68 = (ErlangTuple [(ErlangAtom "redefine_spec"), mfa0_1])
              in (erlps__add_error__3 [line_0, arg_68, st1_63])
            (ErlangAtom "false") ->
              case match_expr_16 of
                (ErlangTuple [mod_73, _, _]) | (mod_73 == mod_3) ->
                  (erlps__check_specs__4
                     [typespecs_2, (ErlangAtom "spec_wrong_arity"), arity_15,
                      st1_63])
                _ ->
                  let
                    arg_79 =
                      (ErlangTuple [(ErlangAtom "bad_module"), match_expr_16])
                  in (erlps__add_error__3 [line_0, arg_79, st1_63])
                something_else -> (EXC.case_clause something_else)
            something_else -> (EXC.case_clause something_else)
      _ -> (EXC.badmatch match_expr_16)
erlps__spec_decl__4 [arg_83, arg_84, arg_85, arg_86] =
  (EXC.function_clause unit)
erlps__spec_decl__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__callback_decl__4 :: ErlangFun
erlps__callback_decl__4 [line_0, mfa0_1, typespecs_2,
                         st0_5@(ErlangTuple [(ErlangAtom "lint"), _, mod_3, _,
                                             _, _, _, _, _, _, _, _, _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _, _, _,
                                             callbacks_4, _, _, _, _, _, _])]
  =
  case mfa0_1 of
    (ErlangTuple [m_7, _f_8, _a_9]) ->
      let   
        st1_13 = (erlps__check_module_name__3 [m_7, line_0, st0_5])
      in let
        arg_15 = (ErlangTuple [(ErlangAtom "bad_callback"), mfa0_1])
      in (erlps__add_error__3 [line_0, arg_15, st1_13])
    (ErlangTuple [f_19, arity_20]) ->
      let    mfa_24 = (ErlangTuple [mod_3, f_19, arity_20])
      in let
        record_updt_26 = (BIF.maps__put__3 [mfa_24, line_0, callbacks_4])
      in let
        st1_64 =
          case st0_5 of
            (ErlangTuple [(ErlangAtom "lint"), state_30, module_31,
                          behaviour_32, exports_33, imports_34, compile_35,
                          records_36, locals_37, no_auto_38, defined_39,
                          on_load_40, on_load_line_41, clashes_42,
                          not_deprecated_43, not_removed_44, func_45,
                          warn_format_46, enabled_warnings_47,
                          nowarn_bif_clash_48, errors_49, warnings_50, file_51,
                          recdef_top_52, xqlc_53, called_54, usage_55, specs_56,
                          callbacks_57, optional_callbacks_58, types_59,
                          exp_types_60, in_try_head_61, bvt_62,
                          gexpr_context_63]) ->
              (ErlangTuple
                 [(ErlangAtom "lint"), state_30, module_31, behaviour_32,
                  exports_33, imports_34, compile_35, records_36, locals_37,
                  no_auto_38, defined_39, on_load_40, on_load_line_41,
                  clashes_42, not_deprecated_43, not_removed_44, func_45,
                  warn_format_46, enabled_warnings_47, nowarn_bif_clash_48,
                  errors_49, warnings_50, file_51, recdef_top_52, xqlc_53,
                  called_54, usage_55, specs_56, record_updt_26,
                  optional_callbacks_58, types_59, exp_types_60, in_try_head_61,
                  bvt_62, gexpr_context_63])
            _ -> (EXC.badrecord (ErlangAtom "lint"))
      in let
        case_65 = (BIF.erlang__is_map_key__2 [mfa_24, callbacks_4])
      in
        case case_65 of
          (ErlangAtom "true") ->
            let
              arg_69 = (ErlangTuple [(ErlangAtom "redefine_callback"), mfa0_1])
            in (erlps__add_error__3 [line_0, arg_69, st1_64])
          (ErlangAtom "false") ->
            (erlps__check_specs__4
               [typespecs_2, (ErlangAtom "callback_wrong_arity"), arity_20,
                st1_64])
          something_else -> (EXC.case_clause something_else)
    something_else -> (EXC.case_clause something_else)
erlps__callback_decl__4 [arg_77, arg_78, arg_79, arg_80] =
  (EXC.function_clause unit)
erlps__callback_decl__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__optional_callbacks__3 :: ErlangFun
erlps__optional_callbacks__3 [line_0, term_1, st0_2] =
  (EXC.tryOfCatch
     (\ _ ->
        let match_expr_4 = (erlps__is_fa_list__1 [term_1])
        in
          case match_expr_4 of
            (ErlangAtom "true") -> term_1
            _ -> (EXC.badmatch match_expr_4))
     (\ of_5 ->
        case of_5 of
          fas_7 -> (erlps__optional_cbs__3 [line_0, fas_7, st0_2])
          something_else -> (EXC.try_clause something_else))
     (\ ex_6 ->
        case ex_6 of
          (ErlangTuple [_, _, _]) -> st0_2
          ex_6 -> (EXC.raise ex_6)))
erlps__optional_callbacks__3 [arg_11, arg_12, arg_13] =
  (EXC.function_clause unit)
erlps__optional_callbacks__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__optional_cbs__3 :: ErlangFun
erlps__optional_cbs__3 [_line_0, (ErlangEmptyList), st_1] = st_1
erlps__optional_cbs__3 [line_0,
                        (ErlangCons (ErlangTuple [f_1, a_2]) fas_3), st0_4]
  =
  case st0_4 of
    (ErlangTuple [(ErlangAtom "lint"), _, mod_5, _, _, _, _, _, _, _,
                  _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                  optionalcbs_6, _, _, _, _, _]) ->
      let    mfa_11 = (ErlangTuple [mod_5, f_1, a_2])
      in let
        record_updt_13 =
          (BIF.maps__put__3 [mfa_11, line_0, optionalcbs_6])
      in let
        st1_51 =
          case st0_4 of
            (ErlangTuple [(ErlangAtom "lint"), state_17, module_18,
                          behaviour_19, exports_20, imports_21, compile_22,
                          records_23, locals_24, no_auto_25, defined_26,
                          on_load_27, on_load_line_28, clashes_29,
                          not_deprecated_30, not_removed_31, func_32,
                          warn_format_33, enabled_warnings_34,
                          nowarn_bif_clash_35, errors_36, warnings_37, file_38,
                          recdef_top_39, xqlc_40, called_41, usage_42, specs_43,
                          callbacks_44, optional_callbacks_45, types_46,
                          exp_types_47, in_try_head_48, bvt_49,
                          gexpr_context_50]) ->
              (ErlangTuple
                 [(ErlangAtom "lint"), state_17, module_18, behaviour_19,
                  exports_20, imports_21, compile_22, records_23, locals_24,
                  no_auto_25, defined_26, on_load_27, on_load_line_28,
                  clashes_29, not_deprecated_30, not_removed_31, func_32,
                  warn_format_33, enabled_warnings_34, nowarn_bif_clash_35,
                  errors_36, warnings_37, file_38, recdef_top_39, xqlc_40,
                  called_41, usage_42, specs_43, callbacks_44, record_updt_13,
                  types_46, exp_types_47, in_try_head_48, bvt_49,
                  gexpr_context_50])
            _ -> (EXC.badrecord (ErlangAtom "lint"))
      in let
        case_52 = (BIF.erlang__is_map_key__2 [mfa_11, optionalcbs_6])
      in let
        st2_62 =
          case case_52 of
            (ErlangAtom "true") ->
              let    tup_el_58 = (ErlangTuple [f_1, a_2])
              in let
                arg_56 =
                  (ErlangTuple
                     [(ErlangAtom "redefine_optional_callback"), tup_el_58])
              in (erlps__add_error__3 [line_0, arg_56, st1_51])
            (ErlangAtom "false") -> st1_51
            something_else -> (EXC.case_clause something_else)
      in (erlps__optional_cbs__3 [line_0, fas_3, st2_62])
    _ -> (EXC.badmatch st0_4)
erlps__optional_cbs__3 [arg_66, arg_67, arg_68] =
  (EXC.function_clause unit)
erlps__optional_cbs__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_fa_list__1 :: ErlangFun
erlps__is_fa_list__1 [(ErlangCons e_0 l_1)] =
  let lop_2 = (erlps__is_fa__1 [e_0])
  in
    case lop_2 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") -> (erlps__is_fa_list__1 [l_1])
      _ -> (EXC.badarg1 lop_2)
erlps__is_fa_list__1 [(ErlangEmptyList)] = (ErlangAtom "true")
erlps__is_fa_list__1 [_] = (ErlangAtom "false")
erlps__is_fa_list__1 [arg_0] = (EXC.function_clause unit)
erlps__is_fa_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_fa__1 :: ErlangFun
erlps__is_fa__1 [(ErlangTuple [funcname_0, arity_1])]
  | (((isEAtom funcname_0) && (isEInt arity_1)) &&
       (weakGeq arity_1 (ErlangInt (DBI.fromInt 0)))) =
  (ErlangAtom "true")
erlps__is_fa__1 [_] = (ErlangAtom "false")
erlps__is_fa__1 [arg_0] = (EXC.function_clause unit)
erlps__is_fa__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_module_name__3 :: ErlangFun
erlps__check_module_name__3 [m_0, line_1, st_2] =
  let case_3 = (erlps__is_latin1_name__1 [m_0])
  in
    case case_3 of
      (ErlangAtom "true") -> st_2
      (ErlangAtom "false") ->
        (erlps__add_error__3
           [line_1, (ErlangAtom "non_latin1_module_unsupported"), st_2])
      something_else -> (EXC.case_clause something_else)
erlps__check_module_name__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__check_module_name__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_latin1_name__1 :: ErlangFun
erlps__is_latin1_name__1 [name_0] =
  let arg_1 = (BIF.erlang__atom_to_list__1 [name_0])
  in
    (BIF.do_remote_fun_call "Io.Lib" "erlps__latin1_char_list__1"
       [arg_1])
erlps__is_latin1_name__1 [arg_3] = (EXC.function_clause unit)
erlps__is_latin1_name__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_specs__4 :: ErlangFun
erlps__check_specs__4 [(ErlangCons funtype_0 left_1), etag_2,
                       arity_3, st0_4]
  =
  let
    match_expr_21 =
      case funtype_0 of
        (ErlangTuple [(ErlangAtom "type"), _, (ErlangAtom "bounded_fun"),
                      (ErlangCons ft_6@(ErlangTuple [(ErlangAtom "type"), _,
                                                     (ErlangAtom "fun"),
                                                     _]) (ErlangCons cs_7 (ErlangEmptyList)))]) ->
          let   
            types0_12 =
              (flmap
                 (\ lc_10 ->
                    case lc_10 of
                      (ErlangTuple [(ErlangAtom "type"), _,
                                    (ErlangAtom "constraint"),
                                    (ErlangCons _ (ErlangCons t_9 (ErlangEmptyList)))]) ->
                        (ErlangCons t_9 ErlangEmptyList)
                      _ -> ErlangEmptyList)
                 cs_7)
          in let
            tup_el_14 =
              (BIF.do_remote_fun_call "Lists" "erlps__append__1" [types0_12])
          in (ErlangTuple [ft_6, tup_el_14])
        ft_16@(ErlangTuple [(ErlangAtom "type"), _, (ErlangAtom "fun"),
                            _]) ->
          (ErlangTuple [ft_16, ErlangEmptyList])
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_21 of
      (ErlangTuple [funtype1_19, ctypes_20]) ->
        case funtype1_19 of
          (ErlangTuple [(ErlangAtom "type"), l_22, (ErlangAtom "fun"),
                        (ErlangCons (ErlangTuple [(ErlangAtom "type"), _,
                                                  (ErlangAtom "product"),
                                                  d_23]) (ErlangCons _ (ErlangEmptyList)))]) ->
            let    specarity_26 = (BIF.erlang__length__1 [d_23])
            in let case_27 = (BIF.erlang__op_exactEq [arity_3, specarity_26])
            in let
              st1_33 =
                case case_27 of
                  (ErlangAtom "true") -> st0_4
                  (ErlangAtom "false") ->
                    (erlps__add_error__3 [l_22, etag_2, st0_4])
                  something_else -> (EXC.case_clause something_else)
            in let tup_el_36 = (erlps__nowarn__0 [])
            in let
              arg_34 =
                (ErlangTuple
                   [(ErlangAtom "type"), tup_el_36, (ErlangAtom "product"),
                    (ErlangCons funtype1_19 ctypes_20)])
            in let st2_42 = (erlps__check_type__2 [arg_34, st1_33])
            in (erlps__check_specs__4 [left_1, etag_2, arity_3, st2_42])
          _ -> (EXC.badmatch funtype1_19)
      _ -> (EXC.badmatch match_expr_21)
erlps__check_specs__4 [(ErlangEmptyList), _etag_0, _arity_1,
                       st_2]
  =
  st_2
erlps__check_specs__4 [arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__check_specs__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__nowarn__0 :: ErlangFun
erlps__nowarn__0 [] =
  let   
    a0_1 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__new__1"
         [(ErlangInt (DBI.fromInt 0))])
  in let
    a1_4 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_generated__2"
         [(ErlangAtom "true"), a0_1])
  in let arg_5 = (make_string "")
  in
    (BIF.do_remote_fun_call "Erl.Anno" "erlps__set_file__2"
       [arg_5, a1_4])
erlps__nowarn__0 args =
  (EXC.badarity
     (ErlangFun 0 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_specs_without_function__1 :: ErlangFun
erlps__check_specs_without_function__1 [st_3@(ErlangTuple [(ErlangAtom "lint"),
                                                           _, mod_0, _, _, _, _,
                                                           _, _, _, funcs_1, _,
                                                           _, _, _, _, _, _, _,
                                                           _, _, _, _, _, _, _,
                                                           _, specs_2, _, _, _,
                                                           _, _, _, _])]
  =
  let
    fun_29 =
      (ErlangFun 3
         let
           lambda_4 [(ErlangTuple [m_8, f_9, a_10]), line_11, accst_12]
             | ((==) m_8 mod_0) =
             let    fa_15 = (ErlangTuple [f_9, a_10])
             in let
               case_16 =
                 (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
                    [fa_15, funcs_1])
             in
               case case_16 of
                 (ErlangAtom "true") -> accst_12
                 (ErlangAtom "false") ->
                   let
                     arg_20 =
                       (ErlangTuple [(ErlangAtom "spec_fun_undefined"), fa_15])
                   in (erlps__add_error__3 [line_11, arg_20, accst_12])
                 something_else -> (EXC.case_clause something_else)
           lambda_4 [(ErlangTuple [_m_24, _f_25, _a_26]), _line_27,
                     accst_28]
             =
             accst_28
           lambda_4 [arg_5, arg_6, arg_7] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 3 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
       [fun_29, st_3, specs_2])
erlps__check_specs_without_function__1 [arg_33] =
  (EXC.function_clause unit)
erlps__check_specs_without_function__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_functions_without_spec__2 :: ErlangFun
erlps__check_functions_without_spec__2 [forms_0, st0_1] =
  let
    case_2 =
      (erlps__is_warn_enabled__2
         [(ErlangAtom "missing_spec_all"), st0_1])
  in
    case case_2 of
      (ErlangAtom "true") ->
        (erlps__add_missing_spec_warnings__3
           [forms_0, st0_1, (ErlangAtom "all")])
      (ErlangAtom "false") ->
        let
          case_8 =
            (erlps__is_warn_enabled__2 [(ErlangAtom "missing_spec"), st0_1])
        in
          case case_8 of
            (ErlangAtom "true") ->
              (erlps__add_missing_spec_warnings__3
                 [forms_0, st0_1, (ErlangAtom "exported")])
            (ErlangAtom "false") -> st0_1
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__check_functions_without_spec__2 [arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__check_functions_without_spec__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_missing_spec_warnings__3 :: ErlangFun
erlps__add_missing_spec_warnings__3 [forms_0, st0_1, type_2] =
  let   
    arg_4 =
      case st0_1 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 27)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let lc_src_3 = (BIF.maps__keys__1 [arg_4])
  in let
    specs_15 =
      (flmap
         (\ lc_11 ->
            case lc_11 of
              (ErlangTuple [_m_8, f_9, a_10]) ->
                let lc_ret_12 = (ErlangTuple [f_9, a_10])
                in (ErlangCons lc_ret_12 ErlangEmptyList)
              _ -> ErlangEmptyList)
         lc_src_3)
  in let
    warns_56 =
      case type_2 of
        (ErlangAtom "all") ->
          (flmap
             (\ lc_21 ->
                case lc_21 of
                  (ErlangTuple [(ErlangAtom "function"), l_18, f_19, a_20,
                                _]) ->
                    let    fa_27 = (ErlangTuple [f_19, a_20])
                    in let op_arg_23 = (BIF.lists__member__2 [fa_27, specs_15])
                    in let cond_22 = (BIF.erlang__not__1 [op_arg_23])
                    in
                      case cond_22 of
                        (ErlangAtom "true") ->
                          let lc_ret_29 = (ErlangTuple [fa_27, l_18])
                          in (ErlangCons lc_ret_29 ErlangEmptyList)
                        _ -> ErlangEmptyList
                  _ -> ErlangEmptyList)
             forms_0)
        (ErlangAtom "exported") ->
          let   
            arg_33 =
              case st0_1 of
                (ErlangTuple arr_36) | (DM.Just field_35) <-
                                         ((arr_36 DA.!! 4)) ->
                  field_35
                _ -> (EXC.badrecord (ErlangAtom "lint"))
          in let
            lop_32 =
              (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [arg_33])
          in let rop_37 = (erlps__pseudolocals__0 [])
          in let exps0_38 = (BIF.erlang__op_unAppend [lop_32, rop_37])
          in let exps_41 = (BIF.erlang__op_unAppend [exps0_38, specs_15])
          in
            (flmap
               (\ lc_46 ->
                  case lc_46 of
                    (ErlangTuple [(ErlangAtom "function"), l_43, f_44, a_45,
                                  _]) ->
                      let    fa_51 = (ErlangTuple [f_44, a_45])
                      in let cond_47 = (BIF.lists__member__2 [fa_51, exps_41])
                      in
                        case cond_47 of
                          (ErlangAtom "true") ->
                            let lc_ret_53 = (ErlangTuple [fa_51, l_43])
                            in (ErlangCons lc_ret_53 ErlangEmptyList)
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList)
               forms_0)
        something_else -> (EXC.case_clause something_else)
  in let
    arg_57 =
      (ErlangFun 2
         let
           lambda_58 [(ErlangTuple [fa_61, l_62]), st_63] =
             let arg_65 = (ErlangTuple [(ErlangAtom "missing_spec"), fa_61])
             in (erlps__add_warning__3 [l_62, arg_65, st_63])
           lambda_58 [arg_59, arg_60] = (EXC.function_clause unit)
           lambda_58 args = (EXC.badarity (ErlangFun 2 lambda_58) args)
         in lambda_58)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_57, st0_1, warns_56])
erlps__add_missing_spec_warnings__3 [arg_71, arg_72, arg_73] =
  (EXC.function_clause unit)
erlps__add_missing_spec_warnings__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_unused_types__2 :: ErlangFun
erlps__check_unused_types__2 [forms_0, st_1] =
  let
    case_2 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "unused_type"), st_1])
  in
    case case_2 of
      (ErlangAtom "true") ->
        (erlps__check_unused_types_1__2 [forms_0, st_1])
      (ErlangAtom "false") -> st_1
      something_else -> (EXC.case_clause something_else)
erlps__check_unused_types__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__check_unused_types__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_unused_types_1__2 :: ErlangFun
erlps__check_unused_types_1__2 [forms_0,
                                st_4@(ErlangTuple [(ErlangAtom "lint"), _, _, _,
                                                   _, _, _, _, _, _, _, _, _, _,
                                                   _, _, _, _, _, _, _, _, _, _,
                                                   _, _, usage_1, _, _, _, ts_2,
                                                   expts_3, _, _, _])]
  =
  let
    case_5 =
      (flmap
         (\ lc_10 ->
            case lc_10 of
              (ErlangTuple [(ErlangAtom "attribute"), _l_7,
                            (ErlangAtom "file"),
                            (ErlangTuple [file_8, _line_9])]) ->
                (ErlangCons file_8 ErlangEmptyList)
              _ -> ErlangEmptyList)
         forms_0)
  in
    case case_5 of
      (ErlangCons firstfile_12 _) ->
        let   
          d_16 =
            case usage_1 of
              (ErlangTuple arr_15) | (DM.Just field_14) <-
                                       ((arr_15 DA.!! 4)) ->
                field_14
              _ -> (EXC.badrecord (ErlangAtom "usage"))
        in let
          lop_17 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [expts_3])
        in let rop_19 = (BIF.maps__keys__1 [d_16])
        in let l_21 = (BIF.erlang__op_append [lop_17, rop_19])
        in let
          usedtypes_23 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1" [l_21])
        in let
          foldfun_47 =
            (ErlangFun 3
               let
                 lambda_24 [(ErlangTuple [_type_28@(ErlangTuple [(ErlangAtom "record"),
                                                                 _]),
                                          (ErlangInt num_29)]),
                            _, accst_30]
                   | ((ErlangInt num_29) == (ErlangInt (DBI.fromInt 0))) =
                   accst_30
                 lambda_24 [type_31,
                            (ErlangTuple [(ErlangAtom "typeinfo"), _,
                                          fileline_32]),
                            accst_33]
                   =
                   let case_34 = (erlps__loc__2 [fileline_32, accst_33])
                   in
                     case case_34 of
                       (ErlangTuple [firstfile_37, _]) | (firstfile_37 ==
                                                            firstfile_12) ->
                         let
                           case_38 =
                             (BIF.do_remote_fun_call "Gb.Sets"
                                "erlps__is_member__2" [type_31, usedtypes_23])
                         in
                           case case_38 of
                             (ErlangAtom "true") -> accst_33
                             (ErlangAtom "false") ->
                               let
                                 warn_43 =
                                   (ErlangTuple
                                      [(ErlangAtom "unused_type"), type_31])
                               in
                                 (erlps__add_warning__3
                                    [fileline_32, warn_43, accst_33])
                             something_else -> (EXC.case_clause something_else)
                       _ -> accst_33
                       something_else -> (EXC.case_clause something_else)
                 lambda_24 [arg_25, arg_26, arg_27] = (EXC.function_clause unit)
                 lambda_24 args = (EXC.badarity (ErlangFun 3 lambda_24) args)
               in lambda_24)
        in
          (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
             [foldfun_47, st_4, ts_2])
      (ErlangEmptyList) -> st_4
      something_else -> (EXC.case_clause something_else)
erlps__check_unused_types_1__2 [arg_51, arg_52] =
  (EXC.function_clause unit)
erlps__check_unused_types_1__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_local_opaque_types__1 :: ErlangFun
erlps__check_local_opaque_types__1 [st_0] =
  case st_0 of
    (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _, _, _, _,
                  _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, ts_1,
                  expts_2, _, _, _]) ->
      let
        foldfun_22 =
          (ErlangFun 3
             let
               lambda_4 [_type_8,
                         (ErlangTuple [(ErlangAtom "typeinfo"),
                                       (ErlangAtom "type"), _]),
                         accst_9]
                 =
                 accst_9
               lambda_4 [type_10,
                         (ErlangTuple [(ErlangAtom "typeinfo"),
                                       (ErlangAtom "opaque"), fileline_11]),
                         accst_12]
                 =
                 let
                   case_13 =
                     (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
                        [type_10, expts_2])
                 in
                   case case_13 of
                     (ErlangAtom "true") -> accst_12
                     (ErlangAtom "false") ->
                       let
                         warn_18 =
                           (ErlangTuple
                              [(ErlangAtom "not_exported_opaque"), type_10])
                       in
                         (erlps__add_warning__3
                            [fileline_11, warn_18, accst_12])
                     something_else -> (EXC.case_clause something_else)
               lambda_4 [arg_5, arg_6, arg_7] = (EXC.function_clause unit)
               lambda_4 args = (EXC.badarity (ErlangFun 3 lambda_4) args)
             in lambda_4)
      in
        (BIF.do_remote_fun_call "Maps" "erlps__fold__3"
           [foldfun_22, st_0, ts_1])
    _ -> (EXC.badmatch st_0)
erlps__check_local_opaque_types__1 [arg_26] =
  (EXC.function_clause unit)
erlps__check_local_opaque_types__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_dialyzer_attribute__2 :: ErlangFun
erlps__check_dialyzer_attribute__2 [forms_0, st0_1] =
  let   
    vals_39 =
      (flmap
         (\ lc_5 ->
            case lc_5 of
              (ErlangTuple [(ErlangAtom "attribute"), l_3,
                            (ErlangAtom "dialyzer"), val_4]) ->
                let
                  lc_src_6 =
                    (BIF.do_remote_fun_call "Lists" "erlps__flatten__1"
                       [(ErlangCons val_4 ErlangEmptyList)])
                in
                  (flmap
                     (\ lc_11 ->
                        case lc_11 of
                          v0_10 ->
                            let
                              lc_src_12 =
                                case v0_10 of
                                  (ErlangTuple [o_14, f_15]) ->
                                    let
                                      lc_src_16 =
                                        (BIF.do_remote_fun_call "Lists"
                                           "erlps__flatten__1"
                                           [(ErlangCons o_14 ErlangEmptyList)])
                                    in
                                      (flmap
                                         (\ lc_21 ->
                                            case lc_21 of
                                              a_20 ->
                                                let
                                                  lc_src_22 =
                                                    (BIF.do_remote_fun_call
                                                       "Lists"
                                                       "erlps__flatten__1"
                                                       [(ErlangCons f_15
                                                           ErlangEmptyList)])
                                                in
                                                  (flmap
                                                     (\ lc_27 ->
                                                        case lc_27 of
                                                          b_26 ->
                                                            let
                                                              lc_ret_28 =
                                                                (ErlangTuple
                                                                   [a_20, b_26])
                                                            in
                                                              (ErlangCons
                                                                 lc_ret_28
                                                                 ErlangEmptyList)
                                                          _ -> ErlangEmptyList)
                                                     lc_src_22)
                                              _ -> ErlangEmptyList)
                                         lc_src_16)
                                  t_31 -> (ErlangCons t_31 ErlangEmptyList)
                                  something_else ->
                                    (EXC.case_clause something_else)
                            in
                              (flmap
                                 (\ lc_35 ->
                                    case lc_35 of
                                      v_34 ->
                                        let
                                          lc_ret_36 = (ErlangTuple [l_3, v_34])
                                        in
                                          (ErlangCons lc_ret_36 ErlangEmptyList)
                                      _ -> ErlangEmptyList)
                                 lc_src_12)
                          _ -> ErlangEmptyList)
                     lc_src_6)
              _ -> ErlangEmptyList)
         forms_0)
  in let
    arg_40 =
      (ErlangFun 1
         let
           lambda_41 [(ErlangTuple [_, (ErlangTuple [option_43, fa_44])])]
             | (isEAtom option_43) =
             (erlps__is_fa__1 [fa_44])
           lambda_41 [(ErlangTuple [_, option_46])] | (isEAtom option_46) =
             (ErlangAtom "true")
           lambda_41 [_] = (ErlangAtom "false")
           lambda_41 [arg_42] = (EXC.function_clause unit)
           lambda_41 args = (EXC.badarity (ErlangFun 1 lambda_41) args)
         in lambda_41)
  in let
    match_expr_50 =
      (BIF.do_remote_fun_call "Lists" "erlps__partition__2"
         [arg_40, vals_39])
  in
    case match_expr_50 of
      (ErlangTuple [wellformed_48, bad_49]) ->
        let   
          arg_51 =
            (ErlangFun 2
               let
                 lambda_52 [(ErlangTuple [l_55, term_56]), st_57] =
                   let
                     arg_59 =
                       (ErlangTuple
                          [(ErlangAtom "bad_dialyzer_attribute"), term_56])
                   in (erlps__add_error__3 [l_55, arg_59, st_57])
                 lambda_52 [arg_53, arg_54] = (EXC.function_clause unit)
                 lambda_52 args = (EXC.badarity (ErlangFun 2 lambda_52) args)
               in lambda_52)
        in let
          st1_65 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_51, st0_1, bad_49])
        in let
          arg_67 =
            case st0_1 of
              (ErlangTuple arr_70) | (DM.Just field_69) <-
                                       ((arr_70 DA.!! 10)) ->
                field_69
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let
          lop_66 =
            (BIF.do_remote_fun_call "Gb.Sets" "erlps__to_list__1" [arg_67])
        in let rop_71 = (erlps__pseudolocals__0 [])
        in let
          deffunctions_72 = (BIF.erlang__op_unAppend [lop_66, rop_71])
        in let
          fun_105 =
            (ErlangFun 2
               let
                 lambda_73 [(ErlangTuple [l_76,
                                          (ErlangTuple [option_77, fa_78])]),
                            st_79]
                   =
                   let
                     case_80 =
                       (erlps__is_function_dialyzer_option__1 [option_77])
                   in
                     case case_80 of
                       (ErlangAtom "true") ->
                         let
                           case_82 =
                             (BIF.lists__member__2 [fa_78, deffunctions_72])
                         in
                           case case_82 of
                             (ErlangAtom "true") -> st_79
                             (ErlangAtom "false") ->
                               let
                                 arg_86 =
                                   (ErlangTuple
                                      [(ErlangAtom "undefined_function"),
                                       fa_78])
                               in (erlps__add_error__3 [l_76, arg_86, st_79])
                             something_else -> (EXC.case_clause something_else)
                       (ErlangAtom "false") ->
                         let
                           arg_91 =
                             (ErlangTuple
                                [(ErlangAtom "bad_dialyzer_option"), option_77])
                         in (erlps__add_error__3 [l_76, arg_91, st_79])
                       something_else -> (EXC.case_clause something_else)
                 lambda_73 [(ErlangTuple [l_95, option_96]), st_97] =
                   let
                     case_98 = (erlps__is_module_dialyzer_option__1 [option_96])
                   in
                     case case_98 of
                       (ErlangAtom "true") -> st_97
                       (ErlangAtom "false") ->
                         let
                           arg_101 =
                             (ErlangTuple
                                [(ErlangAtom "bad_dialyzer_option"), option_96])
                         in (erlps__add_error__3 [l_95, arg_101, st_97])
                       something_else -> (EXC.case_clause something_else)
                 lambda_73 [arg_74, arg_75] = (EXC.function_clause unit)
                 lambda_73 args = (EXC.badarity (ErlangFun 2 lambda_73) args)
               in lambda_73)
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [fun_105, st1_65, wellformed_48])
      _ -> (EXC.badmatch match_expr_50)
erlps__check_dialyzer_attribute__2 [arg_109, arg_110] =
  (EXC.function_clause unit)
erlps__check_dialyzer_attribute__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_function_dialyzer_option__1 :: ErlangFun
erlps__is_function_dialyzer_option__1 [(ErlangAtom "nowarn_function")]
  =
  (ErlangAtom "true")
erlps__is_function_dialyzer_option__1 [option_0] =
  (erlps__is_module_dialyzer_option__1 [option_0])
erlps__is_function_dialyzer_option__1 [arg_2] =
  (EXC.function_clause unit)
erlps__is_function_dialyzer_option__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_module_dialyzer_option__1 :: ErlangFun
erlps__is_module_dialyzer_option__1 [option_0] =
  (BIF.lists__member__2
     [option_0,
      (ErlangCons (ErlangAtom "no_return")
         (ErlangCons (ErlangAtom "no_unused")
            (ErlangCons (ErlangAtom "no_improper_lists")
               (ErlangCons (ErlangAtom "no_fun_app")
                  (ErlangCons (ErlangAtom "no_match")
                     (ErlangCons (ErlangAtom "no_opaque")
                        (ErlangCons (ErlangAtom "no_fail_call")
                           (ErlangCons (ErlangAtom "no_contracts")
                              (ErlangCons (ErlangAtom "no_behaviours")
                                 (ErlangCons
                                    (ErlangAtom "no_undefined_callbacks")
                                    (ErlangCons (ErlangAtom "unmatched_returns")
                                       (ErlangCons (ErlangAtom "error_handling")
                                          (ErlangCons
                                             (ErlangAtom "race_conditions")
                                             (ErlangCons
                                                (ErlangAtom "no_missing_calls")
                                                (ErlangCons
                                                   (ErlangAtom "specdiffs")
                                                   (ErlangCons
                                                      (ErlangAtom "overspecs")
                                                      (ErlangCons
                                                         (ErlangAtom
                                                            "underspecs")
                                                         (ErlangCons
                                                            (ErlangAtom
                                                               "unknown")
                                                            ErlangEmptyList))))))))))))))))))])
erlps__is_module_dialyzer_option__1 [arg_39] =
  (EXC.function_clause unit)
erlps__is_module_dialyzer_option__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__try_clauses__6 :: ErlangFun
erlps__try_clauses__6 [scs_0, ccs_1, in_2, vt_3, uvt_4, st0_5] =
  let match_expr_11 = (erlps__icrt_clauses__3 [scs_0, vt_3, st0_5])
  in
    case match_expr_11 of
      (ErlangTuple [csvt0_9, st1_10]) ->
        let   
          st2_48 =
            case st1_10 of
              (ErlangTuple [(ErlangAtom "lint"), state_14, module_15,
                            behaviour_16, exports_17, imports_18, compile_19,
                            records_20, locals_21, no_auto_22, defined_23,
                            on_load_24, on_load_line_25, clashes_26,
                            not_deprecated_27, not_removed_28, func_29,
                            warn_format_30, enabled_warnings_31,
                            nowarn_bif_clash_32, errors_33, warnings_34,
                            file_35, recdef_top_36, xqlc_37, called_38,
                            usage_39, specs_40, callbacks_41,
                            optional_callbacks_42, types_43, exp_types_44,
                            in_try_head_45, bvt_46, gexpr_context_47]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_14, module_15, behaviour_16,
                    exports_17, imports_18, compile_19, records_20, locals_21,
                    no_auto_22, defined_23, on_load_24, on_load_line_25,
                    clashes_26, not_deprecated_27, not_removed_28, func_29,
                    warn_format_30, enabled_warnings_31, nowarn_bif_clash_32,
                    errors_33, warnings_34, file_35, recdef_top_36, xqlc_37,
                    called_38, usage_39, specs_40, callbacks_41,
                    optional_callbacks_42, types_43, exp_types_44,
                    (ErlangAtom "true"), bvt_46, gexpr_context_47])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_50 = (erlps__vtupdate__2 [uvt_4, vt_3])
        in let
          match_expr_56 = (erlps__icrt_clauses__3 [ccs_1, arg_50, st2_48])
        in
          case match_expr_56 of
            (ErlangTuple [csvt1_54, st3_55]) ->
              let    csvt_59 = (BIF.erlang__op_append [csvt0_9, csvt1_54])
              in let
                updvt_64 = (erlps__icrt_export__4 [csvt_59, vt_3, in_2, st3_55])
              in let
                tup_el_66 =
                  case st3_55 of
                    (ErlangTuple [(ErlangAtom "lint"), state_69, module_70,
                                  behaviour_71, exports_72, imports_73,
                                  compile_74, records_75, locals_76, no_auto_77,
                                  defined_78, on_load_79, on_load_line_80,
                                  clashes_81, not_deprecated_82, not_removed_83,
                                  func_84, warn_format_85, enabled_warnings_86,
                                  nowarn_bif_clash_87, errors_88, warnings_89,
                                  file_90, recdef_top_91, xqlc_92, called_93,
                                  usage_94, specs_95, callbacks_96,
                                  optional_callbacks_97, types_98, exp_types_99,
                                  in_try_head_100, bvt_101,
                                  gexpr_context_102]) ->
                      (ErlangTuple
                         [(ErlangAtom "lint"), state_69, module_70,
                          behaviour_71, exports_72, imports_73, compile_74,
                          records_75, locals_76, no_auto_77, defined_78,
                          on_load_79, on_load_line_80, clashes_81,
                          not_deprecated_82, not_removed_83, func_84,
                          warn_format_85, enabled_warnings_86,
                          nowarn_bif_clash_87, errors_88, warnings_89, file_90,
                          recdef_top_91, xqlc_92, called_93, usage_94, specs_95,
                          callbacks_96, optional_callbacks_97, types_98,
                          exp_types_99, (ErlangAtom "false"), bvt_101,
                          gexpr_context_102])
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in (ErlangTuple [updvt_64, tup_el_66])
            _ -> (EXC.badmatch match_expr_56)
      _ -> (EXC.badmatch match_expr_11)
erlps__try_clauses__6 [arg_103, arg_104, arg_105, arg_106,
                       arg_107, arg_108]
  =
  (EXC.function_clause unit)
erlps__try_clauses__6 args =
  (EXC.badarity
     (ErlangFun 6 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icrt_clauses__4 :: ErlangFun
erlps__icrt_clauses__4 [cs_0, in_1, vt_2, st0_3] =
  let match_expr_9 = (erlps__icrt_clauses__3 [cs_0, vt_2, st0_3])
  in
    case match_expr_9 of
      (ErlangTuple [csvt_7, st1_8]) ->
        let
          updvt_14 = (erlps__icrt_export__4 [csvt_7, vt_2, in_1, st1_8])
        in (ErlangTuple [updvt_14, st1_8])
      _ -> (EXC.badmatch match_expr_9)
erlps__icrt_clauses__4 [arg_17, arg_18, arg_19, arg_20] =
  (EXC.function_clause unit)
erlps__icrt_clauses__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icrt_clauses__3 :: ErlangFun
erlps__icrt_clauses__3 [cs_0, vt_1, st_2] =
  let
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [c_7, st0_8] =
             (erlps__icrt_clause__3 [c_7, vt_1, st0_8])
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__mapfoldl__3"
       [arg_3, st_2, cs_0])
erlps__icrt_clauses__3 [arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__icrt_clauses__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icrt_clause__3 :: ErlangFun
erlps__icrt_clause__3 [(ErlangTuple [(ErlangAtom "clause"),
                                     _line_0, h_1, g_2, b_3]),
                       vt0_4, st0_5]
  =
  let    vt1_9 = (erlps__taint_stack_var__3 [vt0_4, h_1, st0_5])
  in let match_expr_16 = (erlps__head__3 [h_1, vt1_9, st0_5])
  in
    case match_expr_16 of
      (ErlangTuple [hvt_13, hnew_14, st1_15]) ->
        let    vt2_19 = (erlps__vtupdate__2 [hvt_13, hnew_14])
        in let vt3_23 = (erlps__taint_stack_var__3 [vt2_19, h_1, st0_5])
        in let arg_25 = (erlps__vtupdate__2 [vt3_23, vt0_4])
        in let
          arg_28 =
            case st1_15 of
              (ErlangTuple [(ErlangAtom "lint"), state_31, module_32,
                            behaviour_33, exports_34, imports_35, compile_36,
                            records_37, locals_38, no_auto_39, defined_40,
                            on_load_41, on_load_line_42, clashes_43,
                            not_deprecated_44, not_removed_45, func_46,
                            warn_format_47, enabled_warnings_48,
                            nowarn_bif_clash_49, errors_50, warnings_51,
                            file_52, recdef_top_53, xqlc_54, called_55,
                            usage_56, specs_57, callbacks_58,
                            optional_callbacks_59, types_60, exp_types_61,
                            in_try_head_62, bvt_63, gexpr_context_64]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_31, module_32, behaviour_33,
                    exports_34, imports_35, compile_36, records_37, locals_38,
                    no_auto_39, defined_40, on_load_41, on_load_line_42,
                    clashes_43, not_deprecated_44, not_removed_45, func_46,
                    warn_format_47, enabled_warnings_48, nowarn_bif_clash_49,
                    errors_50, warnings_51, file_52, recdef_top_53, xqlc_54,
                    called_55, usage_56, specs_57, callbacks_58,
                    optional_callbacks_59, types_60, exp_types_61,
                    (ErlangAtom "false"), bvt_63, gexpr_context_64])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let match_expr_67 = (erlps__guard__3 [g_2, arg_25, arg_28])
        in
          case match_expr_67 of
            (ErlangTuple [gvt_65, st2_66]) ->
              let    vt4_70 = (erlps__vtupdate__2 [gvt_65, vt2_19])
              in let arg_72 = (erlps__vtupdate__2 [vt4_70, vt0_4])
              in let match_expr_78 = (erlps__exprs__3 [b_3, arg_72, st2_66])
              in
                case match_expr_78 of
                  (ErlangTuple [bvt_76, st3_77]) ->
                    let tup_el_79 = (erlps__vtupdate__2 [bvt_76, vt4_70])
                    in (ErlangTuple [tup_el_79, st3_77])
                  _ -> (EXC.badmatch match_expr_78)
            _ -> (EXC.badmatch match_expr_67)
      _ -> (EXC.badmatch match_expr_16)
erlps__icrt_clause__3 [arg_83, arg_84, arg_85] =
  (EXC.function_clause unit)
erlps__icrt_clause__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__taint_stack_var__3 :: ErlangFun
erlps__taint_stack_var__3 [vt_0, pat_1,
                           (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                         _, _, _, _, _, _, _, _, _, _, _, _, _,
                                         _, _, _, _, _, _, _, _, _, _, _, _,
                                         (ErlangAtom "true"), _, _])]
  =
  case pat_1 of
    (ErlangCons (ErlangTuple [(ErlangAtom "tuple"), _,
                              (ErlangCons _ (ErlangCons _ (ErlangCons (ErlangTuple [(ErlangAtom "var"),
                                                                                    _,
                                                                                    stk_2]) (ErlangEmptyList))))]) (ErlangEmptyList)) ->
      case stk_2 of
        (ErlangAtom "_") -> vt_0
        _ ->
          let
            arg_5 =
              (ErlangFun 1
                 let
                   lambda_6 [(ErlangTuple [v_8,
                                           (ErlangTuple [(ErlangAtom "bound"),
                                                         used_9, lines_10])])]
                     | ((==) v_8 stk_2) =
                     let
                       tup_el_12 =
                         (ErlangTuple
                            [(ErlangAtom "stacktrace"), used_9, lines_10])
                     in (ErlangTuple [v_8, tup_el_12])
                   lambda_6 [b_16] = b_16
                   lambda_6 [arg_7] = (EXC.function_clause unit)
                   lambda_6 args = (EXC.badarity (ErlangFun 1 lambda_6) args)
                 in lambda_6)
          in (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_5, vt_0])
        something_else -> (EXC.case_clause something_else)
    _ -> (EXC.badmatch pat_1)
erlps__taint_stack_var__3 [vt_0, _pat_1,
                           (ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                         _, _, _, _, _, _, _, _, _, _, _, _, _,
                                         _, _, _, _, _, _, _, _, _, _, _, _,
                                         (ErlangAtom "false"), _, _])]
  =
  vt_0
erlps__taint_stack_var__3 [arg_2, arg_3, arg_4] =
  (EXC.function_clause unit)
erlps__taint_stack_var__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icrt_export__4 :: ErlangFun
erlps__icrt_export__4 [vts_0, vt_1,
                       (ErlangTuple [tag_2, attrs_3]), st_4]
  =
  let match_expr_9 = (erlps__loc__2 [attrs_3, st_4])
  in
    case match_expr_9 of
      (ErlangTuple [_file_7, loc_8]) ->
        let   
          arg_10 =
            (BIF.do_remote_fun_call "Lists" "erlps__merge__1" [vts_0])
        in let arg_13 = (ErlangTuple [tag_2, loc_8])
        in let arg_16 = (BIF.erlang__length__1 [vts_0])
        in
          (erlps__icrt_export__5
             [arg_10, vt_1, arg_13, arg_16, ErlangEmptyList])
      _ -> (EXC.badmatch match_expr_9)
erlps__icrt_export__4 [arg_19, arg_20, arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__icrt_export__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__icrt_export__5 :: ErlangFun
erlps__icrt_export__5 [(ErlangCons (ErlangTuple [v_0,
                                                 (ErlangTuple [(ErlangTuple [(ErlangAtom "export"),
                                                                             _]),
                                                               _, _])]) vs0_1),
                       (ErlangCons (ErlangTuple [v_2,
                                                 (ErlangTuple [s0_3@(ErlangTuple [(ErlangAtom "export"),
                                                                                  _]),
                                                               _,
                                                               ls_4])]) vt_5),
                       in_6, i_7, acc_8]
  | (v_2 == v_0) =
  let   
    arg_9 =
      (ErlangFun 1
         let
           lambda_10 [(ErlangTuple [k_12, _])] =
             (BIF.erlang__op_exactEq [k_12, v_0])
           lambda_10 [arg_11] = (EXC.function_clause unit)
           lambda_10 args = (EXC.badarity (ErlangFun 1 lambda_10) args)
         in lambda_10)
  in let
    match_expr_18 =
      (BIF.do_remote_fun_call "Lists" "erlps__partition__2"
         [arg_9, vs0_1])
  in
    case match_expr_18 of
      (ErlangTuple [vvs_16, vs_17]) ->
        let   
          arg_19 =
            (ErlangFun 2
               let
                 lambda_20 [(ErlangTuple [_, (ErlangTuple [s1_23, _, _])]),
                            accs_24]
                   =
                   (erlps__merge_state__2 [accs_24, s1_23])
                 lambda_20 [arg_21, arg_22] = (EXC.function_clause unit)
                 lambda_20 args = (EXC.badarity (ErlangFun 2 lambda_20) args)
               in lambda_20)
        in let
          s_29 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_19, s0_3, vvs_16])
        in let
          tup_el_37 = (ErlangTuple [s_29, (ErlangAtom "used"), ls_4])
        in let head_35 = (ErlangTuple [v_0, tup_el_37])
        in
          (erlps__icrt_export__5
             [vs_17, vt_5, in_6, i_7, (ErlangCons head_35 acc_8)])
      _ -> (EXC.badmatch match_expr_18)
erlps__icrt_export__5 [(ErlangCons (ErlangTuple [v_0, _]) vs0_1),
                       (ErlangCons (ErlangTuple [v_2,
                                                 (ErlangTuple [_, _,
                                                               ls_3])]) vt_4),
                       in_5, i_6, acc_7]
  | (v_2 == v_0) =
  let   
    arg_8 =
      (ErlangFun 1
         let
           lambda_9 [(ErlangTuple [k_11, _])] =
             (BIF.erlang__op_exactEq [k_11, v_0])
           lambda_9 [arg_10] = (EXC.function_clause unit)
           lambda_9 args = (EXC.badarity (ErlangFun 1 lambda_9) args)
         in lambda_9)
  in let
    vs_15 =
      (BIF.do_remote_fun_call "Lists" "erlps__dropwhile__2"
         [arg_8, vs0_1])
  in let
    tup_el_23 =
      (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_3])
  in let head_21 = (ErlangTuple [v_0, tup_el_23])
  in
    (erlps__icrt_export__5
       [vs_15, vt_4, in_5, i_6, (ErlangCons head_21 acc_7)])
erlps__icrt_export__5 [vs_1@(ErlangCons (ErlangTuple [v1_0,
                                                      _]) _),
                       (ErlangCons (ErlangTuple [v2_2, _]) vt_3), in_4, i_5,
                       acc_6]
  | (weakGt v1_0 v2_2) =
  (erlps__icrt_export__5 [vs_1, vt_3, in_4, i_5, acc_6])
erlps__icrt_export__5 [vs0_1@(ErlangCons (ErlangTuple [v_0,
                                                       _]) _),
                       vt_2, in_3, i_4, acc_5]
  =
  let   
    arg_6 =
      (ErlangFun 1
         let
           lambda_7 [(ErlangTuple [k_9, _])] =
             (BIF.erlang__op_exactEq [k_9, v_0])
           lambda_7 [arg_8] = (EXC.function_clause unit)
           lambda_7 args = (EXC.badarity (ErlangFun 1 lambda_7) args)
         in lambda_7)
  in let
    match_expr_15 =
      (BIF.do_remote_fun_call "Lists" "erlps__partition__2"
         [arg_6, vs0_1])
  in
    case match_expr_15 of
      (ErlangTuple [vvs_13, vs_14]) ->
        let   
          f_40 =
            (ErlangFun 2
               let
                 lambda_16 [(ErlangTuple [_,
                                          (ErlangTuple [s_19, u_20, ls_21])]),
                            (ErlangTuple [acci_22, accs0_23, accls0_24])]
                   =
                   let    case_25 = (ErlangTuple [s_19, accs0_23])
                   in let
                     accs_30 =
                       case case_25 of
                         (ErlangTuple [(ErlangTuple [(ErlangAtom "unsafe"), _]),
                                       (ErlangTuple [(ErlangAtom "unsafe"),
                                                     _])]) ->
                           (ErlangTuple [(ErlangAtom "unsafe"), in_3])
                         (ErlangTuple [(ErlangTuple [(ErlangAtom "unsafe"), _]),
                                       _]) ->
                           s_19
                         _ -> accs0_23
                         something_else -> (EXC.case_clause something_else)
                   in let
                     accls_34 =
                       case u_20 of
                         (ErlangAtom "used") -> accls0_24
                         (ErlangAtom "unused") ->
                           (erlps__merge_lines__2 [accls0_24, ls_21])
                         something_else -> (EXC.case_clause something_else)
                   in let
                     tup_el_35 =
                       (BIF.erlang__op_plus
                          [acci_22, (ErlangInt (DBI.fromInt 1))])
                   in (ErlangTuple [tup_el_35, accs_30, accls_34])
                 lambda_16 [arg_17, arg_18] = (EXC.function_clause unit)
                 lambda_16 args = (EXC.badarity (ErlangFun 2 lambda_16) args)
               in lambda_16)
        in let tup_el_44 = (ErlangTuple [(ErlangAtom "export"), in_3])
        in let
          arg_42 =
            (ErlangTuple
               [(ErlangInt (DBI.fromInt 0)), tup_el_44, ErlangEmptyList])
        in let
          match_expr_52 =
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [f_40, arg_42, vvs_13])
        in
          case match_expr_52 of
            (ErlangTuple [count_49, s1_50, ls_51]) ->
              let   
                s_57 =
                  case count_49 of
                    i_54 | (i_54 == i_4) -> s1_50
                    _ -> (ErlangTuple [(ErlangAtom "unsafe"), in_3])
                    something_else -> (EXC.case_clause something_else)
              in let
                u_59 =
                  case ls_51 of
                    (ErlangEmptyList) -> (ErlangAtom "used")
                    _ -> (ErlangAtom "unused")
                    something_else -> (EXC.case_clause something_else)
              in let tup_el_67 = (ErlangTuple [s_57, u_59, ls_51])
              in let head_65 = (ErlangTuple [v_0, tup_el_67])
              in
                (erlps__icrt_export__5
                   [vs_14, vt_2, in_3, i_4, (ErlangCons head_65 acc_5)])
            _ -> (EXC.badmatch match_expr_52)
      _ -> (EXC.badmatch match_expr_15)
erlps__icrt_export__5 [(ErlangEmptyList), _, _, _, acc_0] =
  (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0])
erlps__icrt_export__5 [arg_2, arg_3, arg_4, arg_5, arg_6] =
  (EXC.function_clause unit)
erlps__icrt_export__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_comprehension__4 :: ErlangFun
erlps__handle_comprehension__4 [e_0, qs_1, vt0_2, st0_3] =
  let match_expr_10 = (erlps__lc_quals__3 [qs_1, vt0_2, st0_3])
  in
    case match_expr_10 of
      (ErlangTuple [vt1_7, uvt_8, st1_9]) ->
        let match_expr_16 = (erlps__expr__3 [e_0, vt1_7, st1_9])
        in
          case match_expr_16 of
            (ErlangTuple [evt_14, st2_15]) ->
              let    vt2_19 = (erlps__vtupdate__2 [evt_14, vt1_7])
              in let
                match_expr_24 =
                  (erlps__check_old_unused_vars__3 [vt2_19, uvt_8, st2_15])
              in
                case match_expr_24 of
                  (ErlangTuple [_, st3_23]) ->
                    let
                      match_expr_29 =
                        (erlps__check_unused_vars__3 [uvt_8, vt0_2, st3_23])
                    in
                      case match_expr_29 of
                        (ErlangTuple [_, st4_28]) ->
                          let
                            match_expr_34 =
                              (erlps__check_unused_vars__3
                                 [vt2_19, vt0_2, st4_28])
                          in
                            case match_expr_34 of
                              (ErlangTuple [_, st_33]) ->
                                let   
                                  arg_35 =
                                    (erlps__vtsubtract__2 [vt2_19, uvt_8])
                                in let
                                  vt3_39 = (erlps__vtmerge__2 [arg_35, uvt_8])
                                in let
                                  vt4_42 = (erlps__vtold__2 [vt3_39, vt0_2])
                                in let
                                  arg_43 = (erlps__vt_no_unused__1 [vt4_42])
                                in let vt_45 = (erlps__vt_no_unsafe__1 [arg_43])
                                in (ErlangTuple [vt_45, st_33])
                              _ -> (EXC.badmatch match_expr_34)
                        _ -> (EXC.badmatch match_expr_29)
                  _ -> (EXC.badmatch match_expr_24)
            _ -> (EXC.badmatch match_expr_16)
      _ -> (EXC.badmatch match_expr_10)
erlps__handle_comprehension__4 [arg_48, arg_49, arg_50, arg_51] =
  (EXC.function_clause unit)
erlps__handle_comprehension__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lc_quals__3 :: ErlangFun
erlps__lc_quals__3 [qs_0, vt0_1, st0_2] =
  let   
    oldrecdef_6 =
      case st0_2 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 23)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    arg_10 =
      case st0_2 of
        (ErlangTuple [(ErlangAtom "lint"), state_13, module_14,
                      behaviour_15, exports_16, imports_17, compile_18,
                      records_19, locals_20, no_auto_21, defined_22, on_load_23,
                      on_load_line_24, clashes_25, not_deprecated_26,
                      not_removed_27, func_28, warn_format_29,
                      enabled_warnings_30, nowarn_bif_clash_31, errors_32,
                      warnings_33, file_34, recdef_top_35, xqlc_36, called_37,
                      usage_38, specs_39, callbacks_40, optional_callbacks_41,
                      types_42, exp_types_43, in_try_head_44, bvt_45,
                      gexpr_context_46]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_13, module_14, behaviour_15,
              exports_16, imports_17, compile_18, records_19, locals_20,
              no_auto_21, defined_22, on_load_23, on_load_line_24, clashes_25,
              not_deprecated_26, not_removed_27, func_28, warn_format_29,
              enabled_warnings_30, nowarn_bif_clash_31, errors_32, warnings_33,
              file_34, (ErlangAtom "false"), xqlc_36, called_37, usage_38,
              specs_39, callbacks_40, optional_callbacks_41, types_42,
              exp_types_43, in_try_head_44, bvt_45, gexpr_context_46])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    match_expr_50 =
      (erlps__lc_quals__4 [qs_0, vt0_1, ErlangEmptyList, arg_10])
  in
    case match_expr_50 of
      (ErlangTuple [vt_47, uvt_48, st_49]) ->
        let
          tup_el_53 =
            case st_49 of
              (ErlangTuple [(ErlangAtom "lint"), state_56, module_57,
                            behaviour_58, exports_59, imports_60, compile_61,
                            records_62, locals_63, no_auto_64, defined_65,
                            on_load_66, on_load_line_67, clashes_68,
                            not_deprecated_69, not_removed_70, func_71,
                            warn_format_72, enabled_warnings_73,
                            nowarn_bif_clash_74, errors_75, warnings_76,
                            file_77, recdef_top_78, xqlc_79, called_80,
                            usage_81, specs_82, callbacks_83,
                            optional_callbacks_84, types_85, exp_types_86,
                            in_try_head_87, bvt_88, gexpr_context_89]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_56, module_57, behaviour_58,
                    exports_59, imports_60, compile_61, records_62, locals_63,
                    no_auto_64, defined_65, on_load_66, on_load_line_67,
                    clashes_68, not_deprecated_69, not_removed_70, func_71,
                    warn_format_72, enabled_warnings_73, nowarn_bif_clash_74,
                    errors_75, warnings_76, file_77, oldrecdef_6, xqlc_79,
                    called_80, usage_81, specs_82, callbacks_83,
                    optional_callbacks_84, types_85, exp_types_86,
                    in_try_head_87, bvt_88, gexpr_context_89])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in (ErlangTuple [vt_47, uvt_48, tup_el_53])
      _ -> (EXC.badmatch match_expr_50)
erlps__lc_quals__3 [arg_90, arg_91, arg_92] =
  (EXC.function_clause unit)
erlps__lc_quals__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__lc_quals__4 :: ErlangFun
erlps__lc_quals__4 [(ErlangCons (ErlangTuple [(ErlangAtom "generate"),
                                              _line_0, p_1, e_2]) qs_3),
                    vt0_4, uvt0_5, st0_6]
  =
  let
    match_expr_15 =
      (erlps__handle_generator__5 [p_1, e_2, vt0_4, uvt0_5, st0_6])
  in
    case match_expr_15 of
      (ErlangTuple [vt_12, uvt_13, st_14]) ->
        (erlps__lc_quals__4 [qs_3, vt_12, uvt_13, st_14])
      _ -> (EXC.badmatch match_expr_15)
erlps__lc_quals__4 [(ErlangCons (ErlangTuple [(ErlangAtom "b_generate"),
                                              _line_0, p_1, e_2]) qs_3),
                    vt0_4, uvt0_5, st0_6]
  =
  let    st1_9 = (erlps__handle_bitstring_gen_pat__2 [p_1, st0_6])
  in let
    match_expr_18 =
      (erlps__handle_generator__5 [p_1, e_2, vt0_4, uvt0_5, st1_9])
  in
    case match_expr_18 of
      (ErlangTuple [vt_15, uvt_16, st_17]) ->
        (erlps__lc_quals__4 [qs_3, vt_15, uvt_16, st_17])
      _ -> (EXC.badmatch match_expr_18)
erlps__lc_quals__4 [(ErlangCons f_0 qs_1), vt_2, uvt_3, st0_4] =
  let    info_6 = (erlps__is_guard_test2_info__1 [st0_4])
  in let case_7 = (erlps__is_guard_test2__2 [f_0, info_6])
  in let
    match_expr_18 =
      case case_7 of
        (ErlangAtom "true") -> (erlps__guard_test__3 [f_0, vt_2, st0_4])
        (ErlangAtom "false") -> (erlps__expr__3 [f_0, vt_2, st0_4])
        something_else -> (EXC.case_clause something_else)
  in
    case match_expr_18 of
      (ErlangTuple [fvt_16, st1_17]) ->
        let arg_20 = (erlps__vtupdate__2 [fvt_16, vt_2])
        in (erlps__lc_quals__4 [qs_1, arg_20, uvt_3, st1_17])
      _ -> (EXC.badmatch match_expr_18)
erlps__lc_quals__4 [(ErlangEmptyList), vt_0, uvt_1, st_2] =
  (ErlangTuple [vt_0, uvt_1, st_2])
erlps__lc_quals__4 [arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__lc_quals__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_guard_test2_info__1 :: ErlangFun
erlps__is_guard_test2_info__1 [(ErlangTuple [(ErlangAtom "lint"),
                                             _, _, _, _, imports_0, _, rds_1,
                                             locals_2, _, _, _, _, _, _, _, _,
                                             _, _, _, _, _, _, _, _, _, _, _, _,
                                             _, _, _, _, _, _])]
  =
  let
    tup_el_4 =
      (ErlangFun 1
         let
           lambda_5 [fa_7] =
             let lop_8 = (erlps__is_local_function__2 [locals_2, fa_7])
             in
               case lop_8 of
                 (ErlangAtom "true") -> (ErlangAtom "true")
                 (ErlangAtom "false") ->
                   (erlps__is_imported_function__2 [imports_0, fa_7])
                 _ -> (EXC.badarg1 lop_8)
           lambda_5 [arg_6] = (EXC.function_clause unit)
           lambda_5 args = (EXC.badarity (ErlangFun 1 lambda_5) args)
         in lambda_5)
  in (ErlangTuple [rds_1, tup_el_4])
erlps__is_guard_test2_info__1 [arg_13] =
  (EXC.function_clause unit)
erlps__is_guard_test2_info__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_generator__5 :: ErlangFun
erlps__handle_generator__5 [p_0, e_1, vt_2, uvt_3, st0_4] =
  let match_expr_10 = (erlps__expr__3 [e_1, vt_2, st0_4])
  in
    case match_expr_10 of
      (ErlangTuple [evt_8, st1_9]) ->
        let    arg_11 = (erlps__vtold__2 [evt_8, vt_2])
        in let vt1_15 = (erlps__vtupdate__2 [arg_11, vt_2])
        in let
          match_expr_20 =
            (erlps__check_unused_vars__3 [evt_8, vt_2, st1_9])
        in
          case match_expr_20 of
            (ErlangTuple [_, st2_19]) ->
              let
                match_expr_28 =
                  (erlps__pattern__4 [p_0, vt1_15, ErlangEmptyList, st2_19])
              in
                case match_expr_28 of
                  (ErlangTuple [pvt_25, pnew_26, st3_27]) ->
                    let    vt2_31 = (erlps__vtupdate__2 [pvt_25, vt1_15])
                    in let
                      st4_36 =
                        (erlps__shadow_vars__4
                           [pnew_26, vt1_15, (ErlangAtom "generate"), st3_27])
                    in let svt_39 = (erlps__vtold__2 [vt2_31, pnew_26])
                    in let
                      match_expr_44 =
                        (erlps__check_old_unused_vars__3
                           [svt_39, uvt_3, st4_36])
                    in
                      case match_expr_44 of
                        (ErlangTuple [_, st5_43]) ->
                          let    arg_45 = (erlps__vtnew__2 [svt_39, uvt_3])
                          in let nuvt_49 = (erlps__vtupdate__2 [arg_45, uvt_3])
                          in let
                            arg_50 = (erlps__vtsubtract__2 [vt2_31, pnew_26])
                          in let vt3_54 = (erlps__vtupdate__2 [arg_50, pnew_26])
                          in (ErlangTuple [vt3_54, nuvt_49, st5_43])
                        _ -> (EXC.badmatch match_expr_44)
                  _ -> (EXC.badmatch match_expr_28)
            _ -> (EXC.badmatch match_expr_20)
      _ -> (EXC.badmatch match_expr_10)
erlps__handle_generator__5 [arg_58, arg_59, arg_60, arg_61,
                            arg_62]
  =
  (EXC.function_clause unit)
erlps__handle_generator__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__handle_bitstring_gen_pat__2 :: ErlangFun
erlps__handle_bitstring_gen_pat__2 [(ErlangTuple [(ErlangAtom "bin"),
                                                  _,
                                                  segments_0@(ErlangCons _ _)]),
                                    st_1]
  =
  let
    case_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__last__1" [segments_0])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "bin_element"), line_4, _,
                    (ErlangAtom "default"), flags_5]) | (isEList flags_5) ->
        let   
          lop_7 = (BIF.lists__member__2 [(ErlangAtom "binary"), flags_5])
        in let
          case_6 =
            case lop_7 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let
                  lop_10 =
                    (BIF.lists__member__2 [(ErlangAtom "bytes"), flags_5])
                in
                  case lop_10 of
                    (ErlangAtom "true") -> (ErlangAtom "true")
                    (ErlangAtom "false") ->
                      let
                        lop_13 =
                          (BIF.lists__member__2 [(ErlangAtom "bits"), flags_5])
                      in
                        case lop_13 of
                          (ErlangAtom "true") -> (ErlangAtom "true")
                          (ErlangAtom "false") ->
                            (BIF.lists__member__2
                               [(ErlangAtom "bitstring"), flags_5])
                          _ -> (EXC.badarg1 lop_13)
                    _ -> (EXC.badarg1 lop_10)
              _ -> (EXC.badarg1 lop_7)
        in
          case case_6 of
            (ErlangAtom "true") ->
              (erlps__add_error__3
                 [line_4, (ErlangAtom "unsized_binary_in_bin_gen_pattern"),
                  st_1])
            (ErlangAtom "false") -> st_1
            something_else -> (EXC.case_clause something_else)
      _ -> st_1
      something_else -> (EXC.case_clause something_else)
erlps__handle_bitstring_gen_pat__2 [_, st_0] = st_0
erlps__handle_bitstring_gen_pat__2 [arg_1, arg_2] =
  (EXC.function_clause unit)
erlps__handle_bitstring_gen_pat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_clauses__3 :: ErlangFun
erlps__fun_clauses__3 [cs_0, vt_1, st_2] =
  let   
    oldrecdef_6 =
      case st_2 of
        (ErlangTuple arr_5) | (DM.Just field_4) <- ((arr_5 DA.!! 23)) ->
          field_4
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    arg_7 =
      (ErlangFun 2
         let
           lambda_8 [c_11, (ErlangTuple [bvt0_12, st0_13])] =
             let match_expr_19 = (erlps__fun_clause__3 [c_11, vt_1, st0_13])
             in
               case match_expr_19 of
                 (ErlangTuple [cvt_17, st1_18]) ->
                   let tup_el_20 = (erlps__vtmerge__2 [cvt_17, bvt0_12])
                   in (ErlangTuple [tup_el_20, st1_18])
                 _ -> (EXC.badmatch match_expr_19)
           lambda_8 [arg_9, arg_10] = (EXC.function_clause unit)
           lambda_8 args = (EXC.badarity (ErlangFun 2 lambda_8) args)
         in lambda_8)
  in let
    tup_el_26 =
      case st_2 of
        (ErlangTuple [(ErlangAtom "lint"), state_29, module_30,
                      behaviour_31, exports_32, imports_33, compile_34,
                      records_35, locals_36, no_auto_37, defined_38, on_load_39,
                      on_load_line_40, clashes_41, not_deprecated_42,
                      not_removed_43, func_44, warn_format_45,
                      enabled_warnings_46, nowarn_bif_clash_47, errors_48,
                      warnings_49, file_50, recdef_top_51, xqlc_52, called_53,
                      usage_54, specs_55, callbacks_56, optional_callbacks_57,
                      types_58, exp_types_59, in_try_head_60, bvt_61,
                      gexpr_context_62]) ->
          (ErlangTuple
             [(ErlangAtom "lint"), state_29, module_30, behaviour_31,
              exports_32, imports_33, compile_34, records_35, locals_36,
              no_auto_37, defined_38, on_load_39, on_load_line_40, clashes_41,
              not_deprecated_42, not_removed_43, func_44, warn_format_45,
              enabled_warnings_46, nowarn_bif_clash_47, errors_48, warnings_49,
              file_50, (ErlangAtom "false"), xqlc_52, called_53, usage_54,
              specs_55, callbacks_56, optional_callbacks_57, types_58,
              exp_types_59, in_try_head_60, bvt_61, gexpr_context_62])
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let arg_24 = (ErlangTuple [ErlangEmptyList, tup_el_26])
  in let
    match_expr_66 =
      (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
         [arg_7, arg_24, cs_0])
  in
    case match_expr_66 of
      (ErlangTuple [bvt_64, st2_65]) ->
        let    arg_68 = (erlps__vtold__2 [bvt_64, vt_1])
        in let arg_67 = (erlps__vt_no_unused__1 [arg_68])
        in let uvt_71 = (erlps__vt_no_unsafe__1 [arg_67])
        in let
          tup_el_73 =
            case st2_65 of
              (ErlangTuple [(ErlangAtom "lint"), state_76, module_77,
                            behaviour_78, exports_79, imports_80, compile_81,
                            records_82, locals_83, no_auto_84, defined_85,
                            on_load_86, on_load_line_87, clashes_88,
                            not_deprecated_89, not_removed_90, func_91,
                            warn_format_92, enabled_warnings_93,
                            nowarn_bif_clash_94, errors_95, warnings_96,
                            file_97, recdef_top_98, xqlc_99, called_100,
                            usage_101, specs_102, callbacks_103,
                            optional_callbacks_104, types_105, exp_types_106,
                            in_try_head_107, bvt_108, gexpr_context_109]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_76, module_77, behaviour_78,
                    exports_79, imports_80, compile_81, records_82, locals_83,
                    no_auto_84, defined_85, on_load_86, on_load_line_87,
                    clashes_88, not_deprecated_89, not_removed_90, func_91,
                    warn_format_92, enabled_warnings_93, nowarn_bif_clash_94,
                    errors_95, warnings_96, file_97, oldrecdef_6, xqlc_99,
                    called_100, usage_101, specs_102, callbacks_103,
                    optional_callbacks_104, types_105, exp_types_106,
                    in_try_head_107, bvt_108, gexpr_context_109])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in (ErlangTuple [uvt_71, tup_el_73])
      _ -> (EXC.badmatch match_expr_66)
erlps__fun_clauses__3 [arg_110, arg_111, arg_112] =
  (EXC.function_clause unit)
erlps__fun_clauses__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__fun_clause__3 :: ErlangFun
erlps__fun_clause__3 [(ErlangTuple [(ErlangAtom "clause"),
                                    _line_0, h_1, g_2, b_3]),
                      vt0_4, st0_5]
  =
  let
    match_expr_13 =
      (erlps__head__4 [h_1, vt0_4, ErlangEmptyList, st0_5])
  in
    case match_expr_13 of
      (ErlangTuple [hvt_10, hnew_11, st1_12]) ->
        let    vt1_16 = (erlps__vtupdate__2 [hvt_10, vt0_4])
        in let
          st2_21 =
            (erlps__shadow_vars__4
               [hnew_11, vt0_4, (ErlangAtom "fun"), st1_12])
        in let arg_22 = (erlps__vtsubtract__2 [vt1_16, hnew_11])
        in let vt2_26 = (erlps__vtupdate__2 [arg_22, hnew_11])
        in let match_expr_32 = (erlps__guard__3 [g_2, vt2_26, st2_21])
        in
          case match_expr_32 of
            (ErlangTuple [gvt_30, st3_31]) ->
              let    vt3_35 = (erlps__vtupdate__2 [gvt_30, vt2_26])
              in let match_expr_41 = (erlps__exprs__3 [b_3, vt3_35, st3_31])
              in
                case match_expr_41 of
                  (ErlangTuple [bvt_39, st4_40]) ->
                    let    cvt_44 = (erlps__vtupdate__2 [bvt_39, vt3_35])
                    in let
                      match_expr_49 =
                        (erlps__check_unused_vars__3 [cvt_44, vt0_4, st4_40])
                    in
                      case match_expr_49 of
                        (ErlangTuple [_, st5_48]) ->
                          let    svt_52 = (erlps__vtold__2 [vt1_16, hnew_11])
                          in let
                            match_expr_57 =
                              (erlps__check_old_unused_vars__3
                                 [cvt_44, svt_52, st5_48])
                          in
                            case match_expr_57 of
                              (ErlangTuple [_, st6_56]) ->
                                let   
                                  arg_59 =
                                    (erlps__vtsubtract__2 [cvt_44, svt_52])
                                in let
                                  vt4_62 = (erlps__vtmerge__2 [svt_52, arg_59])
                                in let
                                  tup_el_63 = (erlps__vtold__2 [vt4_62, vt0_4])
                                in (ErlangTuple [tup_el_63, st6_56])
                              _ -> (EXC.badmatch match_expr_57)
                        _ -> (EXC.badmatch match_expr_49)
                  _ -> (EXC.badmatch match_expr_41)
            _ -> (EXC.badmatch match_expr_32)
      _ -> (EXC.badmatch match_expr_13)
erlps__fun_clause__3 [arg_67, arg_68, arg_69] =
  (EXC.function_clause unit)
erlps__fun_clause__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pat_var__5 :: ErlangFun
erlps__pat_var__5 [v_0, line_1, vt_2, new_3, st_4] =
  let
    case_5 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, new_3])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangAtom "bound"), _usage_8, ls_9])]) ->
        let   
          tup_el_14 =
            (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_9])
        in let head_12 = (ErlangTuple [v_0, tup_el_14])
        in
          (ErlangTuple
             [ErlangEmptyList, (ErlangCons head_12 ErlangEmptyList), st_4])
      (ErlangAtom "error") ->
        let
          case_20 =
            (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, vt_2])
        in
          case case_20 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangAtom "bound"), _usage_23,
                                        ls_24])]) ->
              let   
                tup_el_28 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_24])
              in let head_26 = (ErlangTuple [v_0, tup_el_28])
              in
                (ErlangTuple
                   [(ErlangCons head_26 ErlangEmptyList), ErlangEmptyList,
                    st_4])
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "unsafe"),
                                                      in_35]),
                                        _usage_36, ls_37])]) ->
              let   
                tup_el_41 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_37])
              in let head_39 = (ErlangTuple [v_0, tup_el_41])
              in let
                arg_49 = (ErlangTuple [(ErlangAtom "unsafe_var"), v_0, in_35])
              in let tup_el_47 = (erlps__add_error__3 [line_1, arg_49, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_39 ErlangEmptyList), ErlangEmptyList,
                    tup_el_47])
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "export"),
                                                      from_54]),
                                        _usage_55, ls_56])]) ->
              let   
                tup_el_60 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_56])
              in let head_58 = (ErlangTuple [v_0, tup_el_60])
              in let
                arg_68 =
                  (ErlangTuple [(ErlangAtom "exported_var"), v_0, from_54])
              in let tup_el_66 = (erlps__add_warning__3 [line_1, arg_68, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_58 ErlangEmptyList), ErlangEmptyList,
                    tup_el_66])
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangAtom "stacktrace"), _usage_73,
                                        ls_74])]) ->
              let   
                tup_el_78 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_74])
              in let head_76 = (ErlangTuple [v_0, tup_el_78])
              in let
                arg_86 = (ErlangTuple [(ErlangAtom "stacktrace_bound"), v_0])
              in let tup_el_84 = (erlps__add_error__3 [line_1, arg_86, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_76 ErlangEmptyList), ErlangEmptyList,
                    tup_el_84])
            (ErlangAtom "error") | ((ErlangAtom "true") ==
                                      (falsifyErrors
                                         (\ _ ->
                                            case st_4 of
                                              (ErlangTuple arr_92) | (DM.Just field_91) <-
                                                                       ((arr_92 DA.!!
                                                                           23)) ->
                                                field_91
                                              _ ->
                                                (EXC.badrecord
                                                   (ErlangAtom "lint"))))) ->
              let   
                tup_el_97 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "unused"),
                      (ErlangCons line_1 ErlangEmptyList)])
              in let head_95 = (ErlangTuple [v_0, tup_el_97])
              in let
                arg_106 =
                  (ErlangTuple [(ErlangAtom "variable_in_record_def"), v_0])
              in let tup_el_104 = (erlps__add_error__3 [line_1, arg_106, st_4])
              in
                (ErlangTuple
                   [ErlangEmptyList, (ErlangCons head_95 ErlangEmptyList),
                    tup_el_104])
            (ErlangAtom "error") ->
              let   
                tup_el_114 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "unused"),
                      (ErlangCons line_1 ErlangEmptyList)])
              in let head_112 = (ErlangTuple [v_0, tup_el_114])
              in
                (ErlangTuple
                   [ErlangEmptyList, (ErlangCons head_112 ErlangEmptyList),
                    st_4])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__pat_var__5 [arg_122, arg_123, arg_124, arg_125, arg_126] =
  (EXC.function_clause unit)
erlps__pat_var__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__pat_binsize_var__5 :: ErlangFun
erlps__pat_binsize_var__5 [v_0, line_1, vt_2, new_3, st_4] =
  let
    case_5 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, new_3])
  in
    case case_5 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangAtom "bound"), _used_8, ls_9])]) ->
        let   
          tup_el_14 =
            (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_9])
        in let head_12 = (ErlangTuple [v_0, tup_el_14])
        in
          (ErlangTuple
             [ErlangEmptyList, (ErlangCons head_12 ErlangEmptyList), st_4])
      (ErlangAtom "error") ->
        let
          case_20 =
            (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, vt_2])
        in
          case case_20 of
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangAtom "bound"), _used_23,
                                        ls_24])]) ->
              let   
                tup_el_28 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_24])
              in let head_26 = (ErlangTuple [v_0, tup_el_28])
              in
                (ErlangTuple
                   [(ErlangCons head_26 ErlangEmptyList), ErlangEmptyList,
                    st_4])
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "unsafe"),
                                                      in_35]),
                                        _used_36, ls_37])]) ->
              let   
                tup_el_41 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_37])
              in let head_39 = (ErlangTuple [v_0, tup_el_41])
              in let
                arg_49 = (ErlangTuple [(ErlangAtom "unsafe_var"), v_0, in_35])
              in let tup_el_47 = (erlps__add_error__3 [line_1, arg_49, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_39 ErlangEmptyList), ErlangEmptyList,
                    tup_el_47])
            (ErlangTuple [(ErlangAtom "ok"),
                          (ErlangTuple [(ErlangTuple [(ErlangAtom "export"),
                                                      from_54]),
                                        _used_55, ls_56])]) ->
              let   
                tup_el_60 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_56])
              in let head_58 = (ErlangTuple [v_0, tup_el_60])
              in let
                tup_el_66 =
                  (erlps__exported_var__4 [line_1, v_0, from_54, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_58 ErlangEmptyList), ErlangEmptyList,
                    tup_el_66])
            (ErlangAtom "error") ->
              let   
                tup_el_74 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"),
                      (ErlangCons line_1 ErlangEmptyList)])
              in let head_72 = (ErlangTuple [v_0, tup_el_74])
              in let arg_84 = (ErlangTuple [(ErlangAtom "unbound_var"), v_0])
              in let tup_el_82 = (erlps__add_error__3 [line_1, arg_84, st_4])
              in
                (ErlangTuple
                   [(ErlangCons head_72 ErlangEmptyList), ErlangEmptyList,
                    tup_el_82])
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__pat_binsize_var__5 [arg_88, arg_89, arg_90, arg_91,
                           arg_92]
  =
  (EXC.function_clause unit)
erlps__pat_binsize_var__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__expr_var__4 :: ErlangFun
erlps__expr_var__4 [v_0, line_1, vt_2,
                    st_3@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _, _,
                                       _, _, _, _, _, _, _, _, _, _, _, _, _, _,
                                       _, _, _, _, _, _, _, _, _, _, _,
                                       (ErlangAtom "none"), _])]
  =
  (erlps__do_expr_var__4 [v_0, line_1, vt_2, st_3])
erlps__expr_var__4 [v_0, line_1, vt0_2,
                    st0_4@(ErlangTuple [(ErlangAtom "lint"), _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _, _, _, _, _, _,
                                        _, _, _, _, _, _, _, _, _, _, _, _, _,
                                        bvt0_3, _])]
  | (isEList bvt0_3) =
  let
    match_expr_13 =
      (erlps__pat_binsize_var__5 [v_0, line_1, vt0_2, bvt0_3, st0_4])
  in
    case match_expr_13 of
      (ErlangTuple [vt_10, bvt_11, st_12]) ->
        let    record_updt_17 = (erlps__vtmerge__2 [bvt0_3, bvt_11])
        in let
          tup_el_15 =
            case st_12 of
              (ErlangTuple [(ErlangAtom "lint"), state_20, module_21,
                            behaviour_22, exports_23, imports_24, compile_25,
                            records_26, locals_27, no_auto_28, defined_29,
                            on_load_30, on_load_line_31, clashes_32,
                            not_deprecated_33, not_removed_34, func_35,
                            warn_format_36, enabled_warnings_37,
                            nowarn_bif_clash_38, errors_39, warnings_40,
                            file_41, recdef_top_42, xqlc_43, called_44,
                            usage_45, specs_46, callbacks_47,
                            optional_callbacks_48, types_49, exp_types_50,
                            in_try_head_51, bvt_52, gexpr_context_53]) ->
                (ErlangTuple
                   [(ErlangAtom "lint"), state_20, module_21, behaviour_22,
                    exports_23, imports_24, compile_25, records_26, locals_27,
                    no_auto_28, defined_29, on_load_30, on_load_line_31,
                    clashes_32, not_deprecated_33, not_removed_34, func_35,
                    warn_format_36, enabled_warnings_37, nowarn_bif_clash_38,
                    errors_39, warnings_40, file_41, recdef_top_42, xqlc_43,
                    called_44, usage_45, specs_46, callbacks_47,
                    optional_callbacks_48, types_49, exp_types_50,
                    in_try_head_51, record_updt_17, gexpr_context_53])
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in (ErlangTuple [vt_10, tup_el_15])
      _ -> (EXC.badmatch match_expr_13)
erlps__expr_var__4 [arg_54, arg_55, arg_56, arg_57] =
  (EXC.function_clause unit)
erlps__expr_var__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__do_expr_var__4 :: ErlangFun
erlps__do_expr_var__4 [v_0, line_1, vt_2, st_3] =
  let
    case_4 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, vt_2])
  in
    case case_4 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangAtom "bound"), _usage_7, ls_8])]) ->
        let   
          tup_el_12 =
            (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_8])
        in let head_10 = (ErlangTuple [v_0, tup_el_12])
        in (ErlangTuple [(ErlangCons head_10 ErlangEmptyList), st_3])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangTuple [(ErlangAtom "unsafe"), in_18]),
                                  _usage_19, ls_20])]) ->
        let   
          tup_el_24 =
            (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_20])
        in let head_22 = (ErlangTuple [v_0, tup_el_24])
        in let
          arg_31 = (ErlangTuple [(ErlangAtom "unsafe_var"), v_0, in_18])
        in let tup_el_29 = (erlps__add_error__3 [line_1, arg_31, st_3])
        in
          (ErlangTuple [(ErlangCons head_22 ErlangEmptyList), tup_el_29])
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangTuple [(ErlangAtom "export"),
                                                from_36]),
                                  _usage_37, ls_38])]) ->
        let
          case_39 =
            (erlps__is_warn_enabled__2 [(ErlangAtom "export_vars"), st_3])
        in
          case case_39 of
            (ErlangAtom "true") ->
              let   
                tup_el_45 =
                  (ErlangTuple
                     [(ErlangAtom "bound"), (ErlangAtom "used"), ls_38])
              in let head_43 = (ErlangTuple [v_0, tup_el_45])
              in let
                arg_52 =
                  (ErlangTuple [(ErlangAtom "exported_var"), v_0, from_36])
              in let tup_el_50 = (erlps__add_warning__3 [line_1, arg_52, st_3])
              in
                (ErlangTuple [(ErlangCons head_43 ErlangEmptyList), tup_el_50])
            (ErlangAtom "false") ->
              let    tup_el_61 = (ErlangTuple [(ErlangAtom "export"), from_36])
              in let
                tup_el_60 =
                  (ErlangTuple [tup_el_61, (ErlangAtom "used"), ls_38])
              in let head_58 = (ErlangTuple [v_0, tup_el_60])
              in (ErlangTuple [(ErlangCons head_58 ErlangEmptyList), st_3])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangAtom "stacktrace"), _usage_68,
                                  ls_69])]) ->
        let   
          tup_el_73 =
            (ErlangTuple [(ErlangAtom "bound"), (ErlangAtom "used"), ls_69])
        in let head_71 = (ErlangTuple [v_0, tup_el_73])
        in let
          arg_80 = (ErlangTuple [(ErlangAtom "stacktrace_guard"), v_0])
        in let tup_el_78 = (erlps__add_error__3 [line_1, arg_80, st_3])
        in
          (ErlangTuple [(ErlangCons head_71 ErlangEmptyList), tup_el_78])
      (ErlangAtom "error") ->
        let   
          tup_el_87 =
            (ErlangTuple
               [(ErlangAtom "bound"), (ErlangAtom "used"),
                (ErlangCons line_1 ErlangEmptyList)])
        in let head_85 = (ErlangTuple [v_0, tup_el_87])
        in let arg_96 = (ErlangTuple [(ErlangAtom "unbound_var"), v_0])
        in let tup_el_94 = (erlps__add_error__3 [line_1, arg_96, st_3])
        in
          (ErlangTuple [(ErlangCons head_85 ErlangEmptyList), tup_el_94])
      something_else -> (EXC.case_clause something_else)
erlps__do_expr_var__4 [arg_100, arg_101, arg_102, arg_103] =
  (EXC.function_clause unit)
erlps__do_expr_var__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__exported_var__4 :: ErlangFun
erlps__exported_var__4 [line_0, v_1, from_2, st_3] =
  let
    case_4 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "export_vars"), st_3])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let
          arg_8 = (ErlangTuple [(ErlangAtom "exported_var"), v_1, from_2])
        in (erlps__add_warning__3 [line_0, arg_8, st_3])
      (ErlangAtom "false") -> st_3
      something_else -> (EXC.case_clause something_else)
erlps__exported_var__4 [arg_13, arg_14, arg_15, arg_16] =
  (EXC.function_clause unit)
erlps__exported_var__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__shadow_vars__4 :: ErlangFun
erlps__shadow_vars__4 [vt_0, vt0_1, in_2, st0_3] =
  let
    case_4 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "shadow_vars"), st0_3])
  in
    case case_4 of
      (ErlangAtom "true") ->
        let   
          arg_7 =
            (ErlangFun 2
               let
                 lambda_8 [(ErlangTuple [v_11,
                                         (ErlangTuple [_, _,
                                                       (ErlangCons l_12 _)])]),
                           st_13]
                   =
                   let
                     arg_15 =
                       (ErlangTuple [(ErlangAtom "shadowed_var"), v_11, in_2])
                   in (erlps__add_warning__3 [l_12, arg_15, st_13])
                 lambda_8 [_, st_20] = st_20
                 lambda_8 [arg_9, arg_10] = (EXC.function_clause unit)
                 lambda_8 args = (EXC.badarity (ErlangFun 2 lambda_8) args)
               in lambda_8)
        in let arg_24 = (erlps__vt_no_unsafe__1 [vt0_1])
        in let arg_22 = (erlps__vtold__2 [vt_0, arg_24])
        in
          (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
             [arg_7, st0_3, arg_22])
      (ErlangAtom "false") -> st0_3
      something_else -> (EXC.case_clause something_else)
erlps__shadow_vars__4 [arg_26, arg_27, arg_28, arg_29] =
  (EXC.function_clause unit)
erlps__shadow_vars__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_unused_vars__3 :: ErlangFun
erlps__check_unused_vars__3 [vt_0, vt0_1, st0_2] =
  let u_6 = (erlps__unused_vars__3 [vt_0, vt0_1, st0_2])
  in (erlps__warn_unused_vars__3 [u_6, vt_0, st0_2])
erlps__check_unused_vars__3 [arg_10, arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__check_unused_vars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_old_unused_vars__3 :: ErlangFun
erlps__check_old_unused_vars__3 [vt_0, vt0_1, st0_2] =
  let    arg_3 = (erlps__vtold__2 [vt_0, vt0_1])
  in let
    u_8 = (erlps__unused_vars__3 [arg_3, ErlangEmptyList, st0_2])
  in (erlps__warn_unused_vars__3 [u_8, vt_0, st0_2])
erlps__check_old_unused_vars__3 [arg_12, arg_13, arg_14] =
  (EXC.function_clause unit)
erlps__check_old_unused_vars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__unused_vars__3 :: ErlangFun
erlps__unused_vars__3 [vt_0, vt0_1, _st0_2] =
  let   
    arg_3 =
      (ErlangFun 2
         let
           lambda_4 [v_7,
                     (ErlangTuple [_state_8, (ErlangAtom "unused"), _ls_9])]
             =
             let case_10 = (BIF.erlang__atom_to_list__1 [v_7])
             in
               case case_10 of
                 (ErlangCons (ErlangInt num_12) _) | ((ErlangInt num_12) ==
                                                        (ErlangInt
                                                           (DBI.fromInt 95))) ->
                   (ErlangAtom "false")
                 _ -> (ErlangAtom "true")
                 something_else -> (EXC.case_clause something_else)
           lambda_4 [_v_13, _how_14] = (ErlangAtom "false")
           lambda_4 [arg_5, arg_6] = (EXC.function_clause unit)
           lambda_4 args = (EXC.badarity (ErlangFun 2 lambda_4) args)
         in lambda_4)
  in let
    u0_16 =
      (BIF.do_remote_fun_call "Orddict" "erlps__filter__2"
         [arg_3, vt_0])
  in (erlps__vtnew__2 [u0_16, vt0_1])
erlps__unused_vars__3 [arg_19, arg_20, arg_21] =
  (EXC.function_clause unit)
erlps__unused_vars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__warn_unused_vars__3 :: ErlangFun
erlps__warn_unused_vars__3 [(ErlangEmptyList), vt_0, st0_1] =
  (ErlangTuple [vt_0, st0_1])
erlps__warn_unused_vars__3 [u_0, vt_1, st0_2] =
  let   
    case_3 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "unused_vars"), st0_2])
  in let
    st1_28 =
      case case_3 of
        (ErlangAtom "false") -> st0_2
        (ErlangAtom "true") ->
          let
            arg_6 =
              (ErlangFun 2
                 let
                   lambda_7 [(ErlangTuple [v_10,
                                           (ErlangTuple [_,
                                                         (ErlangAtom "unused"),
                                                         ls_11])]),
                             st_12]
                     =
                     let
                       arg_13 =
                         (ErlangFun 2
                            let
                              lambda_14 [l_17, st2_18] =
                                let
                                  arg_20 =
                                    (ErlangTuple
                                       [(ErlangAtom "unused_var"), v_10])
                                in
                                  (erlps__add_warning__3 [l_17, arg_20, st2_18])
                              lambda_14 [arg_15, arg_16] =
                                (EXC.function_clause unit)
                              lambda_14 args =
                                (EXC.badarity (ErlangFun 2 lambda_14) args)
                            in lambda_14)
                     in
                       (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
                          [arg_13, st_12, ls_11])
                   lambda_7 [arg_8, arg_9] = (EXC.function_clause unit)
                   lambda_7 args = (EXC.badarity (ErlangFun 2 lambda_7) args)
                 in lambda_7)
          in
            (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
               [arg_6, st0_2, u_0])
        something_else -> (EXC.case_clause something_else)
  in let
    arg_29 =
      (ErlangFun 1
         let
           lambda_30 [(ErlangTuple [v_32,
                                    (ErlangTuple [state_33, _, ls_34])])]
             =
             let
               tup_el_36 = (ErlangTuple [state_33, (ErlangAtom "used"), ls_34])
             in (ErlangTuple [v_32, tup_el_36])
           lambda_30 [arg_31] = (EXC.function_clause unit)
           lambda_30 args = (EXC.badarity (ErlangFun 1 lambda_30) args)
         in lambda_30)
  in let
    uvt_41 =
      (BIF.do_remote_fun_call "Lists" "erlps__map__2" [arg_29, u_0])
  in let tup_el_42 = (erlps__vtmerge__2 [vt_1, uvt_41])
  in (ErlangTuple [tup_el_42, st1_28])
erlps__warn_unused_vars__3 [arg_46, arg_47, arg_48] =
  (EXC.function_clause unit)
erlps__warn_unused_vars__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_var_bound__2 :: ErlangFun
erlps__is_var_bound__2 [v_0, vt_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2" [v_0, vt_1])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"),
                    (ErlangTuple [(ErlangAtom "bound"), _usage_5, _])]) ->
        (ErlangAtom "true")
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__is_var_bound__2 [arg_6, arg_7] =
  (EXC.function_clause unit)
erlps__is_var_bound__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtupdate__2 :: ErlangFun
erlps__vtupdate__2 [uvt_0, vt0_1] =
  let
    arg_2 =
      (ErlangFun 3
         let
           lambda_3 [_v_7, (ErlangTuple [s_8, u1_9, l1_10]),
                     (ErlangTuple [_s_11, u2_12, l2_13])]
             =
             let    tup_el_15 = (erlps__merge_used__2 [u1_9, u2_12])
             in let tup_el_18 = (erlps__merge_lines__2 [l1_10, l2_13])
             in (ErlangTuple [s_8, tup_el_15, tup_el_18])
           lambda_3 [arg_4, arg_5, arg_6] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 3 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Orddict" "erlps__merge__3"
       [arg_2, uvt_0, vt0_1])
erlps__vtupdate__2 [arg_23, arg_24] = (EXC.function_clause unit)
erlps__vtupdate__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtunsafe__3 :: ErlangFun
erlps__vtunsafe__3 [(ErlangTuple [tag_0, fileline_1]), uvt_2,
                    vt_3]
  =
  let   
    line_5 =
      (BIF.do_remote_fun_call "Erl.Anno" "erlps__location__1"
         [fileline_1])
  in let lc_src_6 = (erlps__vtnew__2 [uvt_2, vt_3])
  in
    (flmap
       (\ lc_12 ->
          case lc_12 of
            (ErlangTuple [v_9, (ErlangTuple [_, u_10, ls_11])]) ->
              let    tup_el_18 = (ErlangTuple [tag_0, line_5])
              in let
                tup_el_16 = (ErlangTuple [(ErlangAtom "unsafe"), tup_el_18])
              in let tup_el_15 = (ErlangTuple [tup_el_16, u_10, ls_11])
              in let lc_ret_13 = (ErlangTuple [v_9, tup_el_15])
              in (ErlangCons lc_ret_13 ErlangEmptyList)
            _ -> ErlangEmptyList)
       lc_src_6)
erlps__vtunsafe__3 [arg_23, arg_24, arg_25] =
  (EXC.function_clause unit)
erlps__vtunsafe__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtmerge__2 :: ErlangFun
erlps__vtmerge__2 [vt1_0, vt2_1] =
  let
    arg_2 =
      (ErlangFun 3
         let
           lambda_3 [_v_7, (ErlangTuple [s1_8, u1_9, l1_10]),
                     (ErlangTuple [s2_11, u2_12, l2_13])]
             =
             let    tup_el_14 = (erlps__merge_state__2 [s1_8, s2_11])
             in let tup_el_17 = (erlps__merge_used__2 [u1_9, u2_12])
             in let tup_el_20 = (erlps__merge_lines__2 [l1_10, l2_13])
             in (ErlangTuple [tup_el_14, tup_el_17, tup_el_20])
           lambda_3 [arg_4, arg_5, arg_6] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 3 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Orddict" "erlps__merge__3"
       [arg_2, vt1_0, vt2_1])
erlps__vtmerge__2 [arg_25, arg_26] = (EXC.function_clause unit)
erlps__vtmerge__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtmerge__1 :: ErlangFun
erlps__vtmerge__1 [vts_0] =
  let
    arg_1 =
      (ErlangFun 2
         let
           lambda_2 [vt_5, mvts_6] = (erlps__vtmerge__2 [vt_5, mvts_6])
           lambda_2 [arg_3, arg_4] = (EXC.function_clause unit)
           lambda_2 args = (EXC.badarity (ErlangFun 2 lambda_2) args)
         in lambda_2)
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldl__3"
       [arg_1, ErlangEmptyList, vts_0])
erlps__vtmerge__1 [arg_11] = (EXC.function_clause unit)
erlps__vtmerge__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtmerge_pat__2 :: ErlangFun
erlps__vtmerge_pat__2 [vt1_0, vt2_1] =
  let
    arg_2 =
      (ErlangFun 3
         let
           lambda_3 [_v_7, (ErlangTuple [s1_8, _usage1_9, l1_10]),
                     (ErlangTuple [s2_11, _usage2_12, l2_13])]
             =
             let    tup_el_14 = (erlps__merge_state__2 [s1_8, s2_11])
             in let tup_el_18 = (erlps__merge_lines__2 [l1_10, l2_13])
             in (ErlangTuple [tup_el_14, (ErlangAtom "used"), tup_el_18])
           lambda_3 [arg_4, arg_5, arg_6] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 3 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Orddict" "erlps__merge__3"
       [arg_2, vt1_0, vt2_1])
erlps__vtmerge_pat__2 [arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__vtmerge_pat__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge_lines__2 :: ErlangFun
erlps__merge_lines__2 [ls1_0, ls2_1] =
  (BIF.do_remote_fun_call "Ordsets" "erlps__union__2"
     [ls1_0, ls2_1])
erlps__merge_lines__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__merge_lines__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge_state__2 :: ErlangFun
erlps__merge_state__2 [s1_1@(ErlangTuple [(ErlangAtom "unsafe"),
                                          _f1_0]),
                       _s2_2]
  =
  s1_1
erlps__merge_state__2 [_s1_0,
                       s2_2@(ErlangTuple [(ErlangAtom "unsafe"), _f2_1])]
  =
  s2_2
erlps__merge_state__2 [(ErlangAtom "bound"), s2_0] = s2_0
erlps__merge_state__2 [s1_0, (ErlangAtom "bound")] = s1_0
erlps__merge_state__2 [(ErlangTuple [(ErlangAtom "export"),
                                     f1_0]),
                       (ErlangTuple [(ErlangAtom "export"), _f2_1])]
  =
  (ErlangTuple [(ErlangAtom "export"), f1_0])
erlps__merge_state__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__merge_state__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__merge_used__2 :: ErlangFun
erlps__merge_used__2 [(ErlangAtom "used"), _usage2_0] =
  (ErlangAtom "used")
erlps__merge_used__2 [_usage1_0, (ErlangAtom "used")] =
  (ErlangAtom "used")
erlps__merge_used__2 [(ErlangAtom "unused"),
                      (ErlangAtom "unused")]
  =
  (ErlangAtom "unused")
erlps__merge_used__2 [arg_0, arg_1] = (EXC.function_clause unit)
erlps__merge_used__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtnew__2 :: ErlangFun
erlps__vtnew__2 [new_0, old_1] =
  let
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [v_6, _how_7] =
             let
               op_arg_8 =
                 (BIF.do_remote_fun_call "Orddict" "erlps__is_key__2"
                    [v_6, old_1])
             in (BIF.erlang__not__1 [op_arg_8])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Orddict" "erlps__filter__2"
       [arg_2, new_0])
erlps__vtnew__2 [arg_12, arg_13] = (EXC.function_clause unit)
erlps__vtnew__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtsubtract__2 :: ErlangFun
erlps__vtsubtract__2 [new_0, old_1] =
  (erlps__vtnew__2 [new_0, old_1])
erlps__vtsubtract__2 [arg_4, arg_5] = (EXC.function_clause unit)
erlps__vtsubtract__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vtold__2 :: ErlangFun
erlps__vtold__2 [new_0, old_1] =
  let
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [v_6, _how_7] =
             (BIF.do_remote_fun_call "Orddict" "erlps__is_key__2"
                [v_6, old_1])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Orddict" "erlps__filter__2"
       [arg_2, new_0])
erlps__vtold__2 [arg_11, arg_12] = (EXC.function_clause unit)
erlps__vtold__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vt_no_unsafe__1 :: ErlangFun
erlps__vt_no_unsafe__1 [vt_0] =
  (flmap
     (\ lc_6 ->
        case lc_6 of
          v_5@(ErlangTuple [_, (ErlangTuple [s_2, _u_3, _l_4])]) ->
            let
              cond_7 =
                case s_2 of
                  (ErlangTuple [(ErlangAtom "unsafe"), _]) ->
                    (ErlangAtom "false")
                  _ -> (ErlangAtom "true")
                  something_else -> (EXC.case_clause something_else)
            in
              case cond_7 of
                (ErlangAtom "true") -> (ErlangCons v_5 ErlangEmptyList)
                _ -> ErlangEmptyList
          _ -> ErlangEmptyList)
     vt_0)
erlps__vt_no_unsafe__1 [arg_10] = (EXC.function_clause unit)
erlps__vt_no_unsafe__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__vt_no_unused__1 :: ErlangFun
erlps__vt_no_unused__1 [vt_0] =
  (flmap
     (\ lc_5 ->
        case lc_5 of
          v_4@(ErlangTuple [_, (ErlangTuple [_, u_2, _l_3])]) ->
            let
              cond_6 = (BIF.erlang__op_exactNeq [u_2, (ErlangAtom "unused")])
            in
              case cond_6 of
                (ErlangAtom "true") -> (ErlangCons v_4 ErlangEmptyList)
                _ -> ErlangEmptyList
          _ -> ErlangEmptyList)
     vt_0)
erlps__vt_no_unused__1 [arg_10] = (EXC.function_clause unit)
erlps__vt_no_unused__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__copy_expr__2 :: ErlangFun
erlps__copy_expr__2 [expr_0, anno_1] =
  let
    arg_2 =
      (ErlangFun 1
         let
           lambda_3 [_a_5] = anno_1
           lambda_3 [arg_4] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 1 lambda_3) args)
         in lambda_3)
  in
    (BIF.do_remote_fun_call "Erl.Parse" "erlps__map_anno__2"
       [arg_2, expr_0])
erlps__copy_expr__2 [arg_7, arg_8] = (EXC.function_clause unit)
erlps__copy_expr__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_record_info_call__4 :: ErlangFun
erlps__check_record_info_call__4 [_line_0, la_1,
                                  (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                            li_2,
                                                            info_3]) (ErlangCons (ErlangTuple [(ErlangAtom "atom"),
                                                                                               _ln_4,
                                                                                               name_5]) (ErlangEmptyList))),
                                  st_6]
  =
  let
    case_7 =
      (BIF.lists__member__2
         [info_3,
          (ErlangCons (ErlangAtom "fields")
             (ErlangCons (ErlangAtom "size") ErlangEmptyList))])
  in
    case case_7 of
      (ErlangAtom "true") ->
        (erlps__exist_record__3 [la_1, name_5, st_6])
      (ErlangAtom "false") ->
        (erlps__add_error__3
           [li_2, (ErlangAtom "illegal_record_info"), st_6])
      something_else -> (EXC.case_clause something_else)
erlps__check_record_info_call__4 [line_0, _la_1, _as_2, st_3] =
  (erlps__add_error__3
     [line_0, (ErlangAtom "illegal_record_info"), st_3])
erlps__check_record_info_call__4 [arg_7, arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__check_record_info_call__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__has_wildcard_field__1 :: ErlangFun
erlps__has_wildcard_field__1 [(ErlangCons (ErlangTuple [(ErlangAtom "record_field"),
                                                        _lf_0,
                                                        (ErlangTuple [(ErlangAtom "var"),
                                                                      _la_1,
                                                                      (ErlangAtom "_")]),
                                                        _val_2]) _fs_3)]
  =
  (ErlangAtom "true")
erlps__has_wildcard_field__1 [(ErlangCons _ fs_0)] =
  (erlps__has_wildcard_field__1 [fs_0])
erlps__has_wildcard_field__1 [(ErlangEmptyList)] =
  (ErlangAtom "false")
erlps__has_wildcard_field__1 [arg_0] = (EXC.function_clause unit)
erlps__has_wildcard_field__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_remote_function__5 :: ErlangFun
erlps__check_remote_function__5 [line_0, m_1, f_2, as_3, st0_4] =
  let   
    st1_10 =
      (erlps__deprecated_function__5 [line_0, m_1, f_2, as_3, st0_4])
  in let
    st2_16 =
      (erlps__check_qlc_hrl__5 [line_0, m_1, f_2, as_3, st1_10])
  in let
    st3_22 =
      (erlps__check_load_nif__5 [line_0, m_1, f_2, as_3, st2_16])
  in (erlps__format_function__5 [line_0, m_1, f_2, as_3, st3_22])
erlps__check_remote_function__5 [arg_28, arg_29, arg_30, arg_31,
                                 arg_32]
  =
  (EXC.function_clause unit)
erlps__check_remote_function__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_load_nif__5 :: ErlangFun
erlps__check_load_nif__5 [line_0, (ErlangAtom "erlang"),
                          (ErlangAtom "load_nif"),
                          (ErlangCons _ (ErlangCons _ (ErlangEmptyList))), st_1]
  =
  let
    case_2 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "nif_inline"), st_1])
  in
    case case_2 of
      (ErlangAtom "true") ->
        (erlps__check_nif_inline__2 [line_0, st_1])
      (ErlangAtom "false") -> st_1
      something_else -> (EXC.case_clause something_else)
erlps__check_load_nif__5 [_line_0, _modname_1, _funcname_2,
                          _args_3, st_4]
  =
  st_4
erlps__check_load_nif__5 [arg_5, arg_6, arg_7, arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__check_load_nif__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_nif_inline__2 :: ErlangFun
erlps__check_nif_inline__2 [line_0, st_1] =
  let    arg_3 = (ErlangFun 1 erlps__is_inline_opt__1)
  in let
    arg_4 =
      case st_1 of
        (ErlangTuple arr_7) | (DM.Just field_6) <- ((arr_7 DA.!! 6)) ->
          field_6
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let
    case_2 =
      (BIF.do_remote_fun_call "Lists" "erlps__any__2" [arg_3, arg_4])
  in
    case case_2 of
      (ErlangAtom "true") ->
        (erlps__add_warning__3 [line_0, (ErlangAtom "nif_inline"), st_1])
      (ErlangAtom "false") -> st_1
      something_else -> (EXC.case_clause something_else)
erlps__check_nif_inline__2 [arg_11, arg_12] =
  (EXC.function_clause unit)
erlps__check_nif_inline__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_inline_opt__1 :: ErlangFun
erlps__is_inline_opt__1 [(ErlangTuple [(ErlangAtom "inline"),
                                       _fas_0@(ErlangCons _ _)])]
  =
  (ErlangAtom "true")
erlps__is_inline_opt__1 [(ErlangAtom "inline")] =
  (ErlangAtom "true")
erlps__is_inline_opt__1 [_] = (ErlangAtom "false")
erlps__is_inline_opt__1 [arg_0] = (EXC.function_clause unit)
erlps__is_inline_opt__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_qlc_hrl__5 :: ErlangFun
erlps__check_qlc_hrl__5 [line_0, m_1, f_2, as_3, st_4] =
  let arity_6 = (BIF.erlang__length__1 [as_3])
  in
    case as_3 of
      (ErlangCons (ErlangTuple [(ErlangAtom "lc"), _l_8, _e_9,
                                _qs_10]) _) | ((ErlangAtom "true") ==
                                                 (falsifyErrors
                                                    (\ _ ->
                                                       let   
                                                         lop_13 =
                                                           (BIF.erlang__op_exactEq
                                                              [m_1,
                                                               (ErlangAtom
                                                                  "qlc")])
                                                       in let
                                                         lop_12 =
                                                           case lop_13 of
                                                             (ErlangAtom "false") ->
                                                               (ErlangAtom
                                                                  "false")
                                                             (ErlangAtom "true") ->
                                                               (BIF.erlang__op_exactEq
                                                                  [f_2,
                                                                   (ErlangAtom
                                                                      "q")])
                                                             _ ->
                                                               (EXC.badarg1
                                                                  lop_13)
                                                       in let
                                                         lop_11 =
                                                           case lop_12 of
                                                             (ErlangAtom "false") ->
                                                               (ErlangAtom
                                                                  "false")
                                                             (ErlangAtom "true") ->
                                                               (BIF.erlang__op_lesser
                                                                  [arity_6,
                                                                   (ErlangInt
                                                                      (DBI.fromInt
                                                                         3))])
                                                             _ ->
                                                               (EXC.badarg1
                                                                  lop_12)
                                                       in
                                                         case lop_11 of
                                                           (ErlangAtom "false") ->
                                                             (ErlangAtom
                                                                "false")
                                                           (ErlangAtom "true") ->
                                                             let
                                                               op_arg_20 =
                                                                 case st_4 of
                                                                   (ErlangTuple arr_23) | (DM.Just field_22) <-
                                                                                            ((arr_23 DA.!!
                                                                                                24)) ->
                                                                     field_22
                                                                   _ ->
                                                                     (EXC.badrecord
                                                                        (ErlangAtom
                                                                           "lint"))
                                                             in
                                                               (BIF.erlang__not__1
                                                                  [op_arg_20])
                                                           _ ->
                                                             (EXC.badarg1
                                                                lop_11)))) ->
        let
          arg_25 = (ErlangTuple [(ErlangAtom "missing_qlc_hrl"), arity_6])
        in (erlps__add_warning__3 [line_0, arg_25, st_4])
      _ -> st_4
      something_else -> (EXC.case_clause something_else)
erlps__check_qlc_hrl__5 [arg_29, arg_30, arg_31, arg_32, arg_33]
  =
  (EXC.function_clause unit)
erlps__check_qlc_hrl__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deprecated_function__5 :: ErlangFun
erlps__deprecated_function__5 [line_0, m_1, f_2, as_3, st_4] =
  let    arity_6 = (BIF.erlang__length__1 [as_3])
  in let mfa_10 = (ErlangTuple [m_1, f_2, arity_6])
  in let
    case_11 =
      (BIF.do_remote_fun_call "Otp.Internal" "erlps__obsolete__3"
         [m_1, f_2, arity_6])
  in
    case case_11 of
      (ErlangTuple [(ErlangAtom "deprecated"), string_15]) | (isEList
                                                                string_15) ->
        let   
          op_arg_18 =
            (erlps__is_warn_enabled__2
               [(ErlangAtom "deprecated_function"), st_4])
        in let lop_17 = (BIF.erlang__not__1 [op_arg_18])
        in let
          case_16 =
            case lop_17 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let
                  arg_22 =
                    case st_4 of
                      (ErlangTuple arr_25) | (DM.Just field_24) <-
                                               ((arr_25 DA.!! 14)) ->
                        field_24
                      _ -> (EXC.badrecord (ErlangAtom "lint"))
                in
                  (BIF.do_remote_fun_call "Ordsets" "erlps__is_element__2"
                     [mfa_10, arg_22])
              _ -> (EXC.badarg1 lop_17)
        in
          case case_16 of
            (ErlangAtom "true") -> st_4
            (ErlangAtom "false") ->
              let
                arg_27 =
                  (ErlangTuple [(ErlangAtom "deprecated"), mfa_10, string_15])
              in (erlps__add_warning__3 [line_0, arg_27, st_4])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "deprecated"), replacement_32,
                    rel_33]) ->
        let   
          op_arg_36 =
            (erlps__is_warn_enabled__2
               [(ErlangAtom "deprecated_function"), st_4])
        in let lop_35 = (BIF.erlang__not__1 [op_arg_36])
        in let
          case_34 =
            case lop_35 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let
                  arg_40 =
                    case st_4 of
                      (ErlangTuple arr_43) | (DM.Just field_42) <-
                                               ((arr_43 DA.!! 14)) ->
                        field_42
                      _ -> (EXC.badrecord (ErlangAtom "lint"))
                in
                  (BIF.do_remote_fun_call "Ordsets" "erlps__is_element__2"
                     [mfa_10, arg_40])
              _ -> (EXC.badarg1 lop_35)
        in
          case case_34 of
            (ErlangAtom "true") -> st_4
            (ErlangAtom "false") ->
              let
                arg_45 =
                  (ErlangTuple
                     [(ErlangAtom "deprecated"), mfa_10, replacement_32,
                      rel_33])
              in (erlps__add_warning__3 [line_0, arg_45, st_4])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "removed"), string_51]) | (isEList
                                                             string_51) ->
        let
          arg_54 =
            (ErlangTuple [(ErlangAtom "removed"), mfa_10, string_51])
        in (erlps__add_removed_warning__4 [line_0, mfa_10, arg_54, st_4])
      (ErlangTuple [(ErlangAtom "removed"), replacement_59, rel_60]) ->
        let
          arg_63 =
            (ErlangTuple
               [(ErlangAtom "removed"), mfa_10, replacement_59, rel_60])
        in (erlps__add_removed_warning__4 [line_0, mfa_10, arg_63, st_4])
      (ErlangAtom "no") -> st_4
      something_else -> (EXC.case_clause something_else)
erlps__deprecated_function__5 [arg_69, arg_70, arg_71, arg_72,
                               arg_73]
  =
  (EXC.function_clause unit)
erlps__deprecated_function__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__add_removed_warning__4 :: ErlangFun
erlps__add_removed_warning__4 [line_0,
                               mfa_2@(ErlangTuple [m_1, _, _]), warning_3,
                               st_5@(ErlangTuple [(ErlangAtom "lint"), _, _, _,
                                                  _, _, _, _, _, _, _, _, _, _,
                                                  _, notremoved_4, _, _, _, _,
                                                  _, _, _, _, _, _, _, _, _, _,
                                                  _, _, _, _, _])]
  =
  let   
    lop_7 =
      (erlps__is_warn_enabled__2 [(ErlangAtom "removed"), st_5])
  in let
    case_6 =
      case lop_7 of
        (ErlangAtom "false") -> (ErlangAtom "false")
        (ErlangAtom "true") ->
          let   
            op_arg_11 =
              (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
                 [m_1, notremoved_4])
          in let lop_10 = (BIF.erlang__not__1 [op_arg_11])
          in
            case lop_10 of
              (ErlangAtom "false") -> (ErlangAtom "false")
              (ErlangAtom "true") ->
                let
                  op_arg_14 =
                    (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
                       [mfa_2, notremoved_4])
                in (BIF.erlang__not__1 [op_arg_14])
              _ -> (EXC.badarg1 lop_10)
        _ -> (EXC.badarg1 lop_7)
  in
    case case_6 of
      (ErlangAtom "true") ->
        (erlps__add_warning__3 [line_0, warning_3, st_5])
      (ErlangAtom "false") -> st_5
      something_else -> (EXC.case_clause something_else)
erlps__add_removed_warning__4 [arg_20, arg_21, arg_22, arg_23] =
  (EXC.function_clause unit)
erlps__add_removed_warning__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__deprecated_type__5 :: ErlangFun
erlps__deprecated_type__5 [l_0, m_1, n_2, as_3, st_4] =
  let    nas_6 = (BIF.erlang__length__1 [as_3])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Otp.Internal" "erlps__obsolete_type__3"
         [m_1, n_2, nas_6])
  in
    case case_7 of
      (ErlangTuple [(ErlangAtom "deprecated"), string_11]) | (isEList
                                                                string_11) ->
        let
          case_12 =
            (erlps__is_warn_enabled__2
               [(ErlangAtom "deprecated_type"), st_4])
        in
          case case_12 of
            (ErlangAtom "true") ->
              let    tup_el_18 = (ErlangTuple [m_1, n_2, nas_6])
              in let
                arg_16 =
                  (ErlangTuple
                     [(ErlangAtom "deprecated_type"), tup_el_18, string_11])
              in (erlps__add_warning__3 [l_0, arg_16, st_4])
            (ErlangAtom "false") -> st_4
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "removed"), string_24]) ->
        let    tup_el_28 = (ErlangTuple [m_1, n_2, nas_6])
        in let
          arg_26 =
            (ErlangTuple [(ErlangAtom "removed_type"), tup_el_28, string_24])
        in (erlps__add_warning__3 [l_0, arg_26, st_4])
      (ErlangAtom "no") -> st_4
      something_else -> (EXC.case_clause something_else)
erlps__deprecated_type__5 [arg_34, arg_35, arg_36, arg_37,
                           arg_38]
  =
  (EXC.function_clause unit)
erlps__deprecated_type__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__obsolete_guard__2 :: ErlangFun
erlps__obsolete_guard__2 [(ErlangTuple [(ErlangAtom "call"),
                                        line_0,
                                        (ErlangTuple [(ErlangAtom "atom"), lr_1,
                                                      f_2]),
                                        as_3]),
                          st0_4]
  =
  let    arity_6 = (BIF.erlang__length__1 [as_3])
  in let
    case_7 =
      (BIF.do_remote_fun_call "Erl.Internal" "erlps__old_type_test__2"
         [f_2, arity_6])
  in
    case case_7 of
      (ErlangAtom "false") ->
        (erlps__deprecated_function__5
           [line_0, (ErlangAtom "erlang"), f_2, as_3, st0_4])
      (ErlangAtom "true") ->
        let   
          case_15 =
            (erlps__is_warn_enabled__2
               [(ErlangAtom "obsolete_guard"), st0_4])
        in let
          st_25 =
            case case_15 of
              (ErlangAtom "true") ->
                let    tup_el_21 = (ErlangTuple [f_2, arity_6])
                in let
                  arg_19 =
                    (ErlangTuple [(ErlangAtom "obsolete_guard"), tup_el_21])
                in (erlps__add_warning__3 [lr_1, arg_19, st0_4])
              (ErlangAtom "false") -> st0_4
              something_else -> (EXC.case_clause something_else)
        in
          (erlps__test_overriden_by_local__4 [lr_1, f_2, arity_6, st_25])
      something_else -> (EXC.case_clause something_else)
erlps__obsolete_guard__2 [_g_0, st_1] = st_1
erlps__obsolete_guard__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__obsolete_guard__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__test_overriden_by_local__4 :: ErlangFun
erlps__test_overriden_by_local__4 [line_0, oldtest_1, arity_2,
                                   st_3]
  =
  let    lop_5 = (make_string "is_")
  in let rop_6 = (BIF.erlang__atom_to_list__1 [oldtest_1])
  in let arg_4 = (BIF.erlang__op_append [lop_5, rop_6])
  in let moderntest_8 = (BIF.erlang__list_to_atom__1 [arg_4])
  in let
    arg_10 =
      case st_3 of
        (ErlangTuple arr_13) | (DM.Just field_12) <-
                                 ((arr_13 DA.!! 8)) ->
          field_12
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let arg_14 = (ErlangTuple [moderntest_8, arity_2])
  in let case_9 = (erlps__is_local_function__2 [arg_10, arg_14])
  in
    case case_9 of
      (ErlangAtom "true") ->
        let
          arg_18 =
            (ErlangTuple
               [(ErlangAtom "obsolete_guard_overridden"), oldtest_1])
        in (erlps__add_error__3 [line_0, arg_18, st_3])
      (ErlangAtom "false") -> st_3
      something_else -> (EXC.case_clause something_else)
erlps__test_overriden_by_local__4 [arg_22, arg_23, arg_24,
                                   arg_25]
  =
  (EXC.function_clause unit)
erlps__test_overriden_by_local__4 args =
  (EXC.badarity
     (ErlangFun 4 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__keyword_warning__3 :: ErlangFun
erlps__keyword_warning__3 [_line_0, _a_1, st_2] = st_2
erlps__keyword_warning__3 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__keyword_warning__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__format_function__5 :: ErlangFun
erlps__format_function__5 [line_0, m_1, f_2, as_3, st_4] =
  let case_5 = (erlps__is_format_function__2 [m_1, f_2])
  in
    case case_5 of
      (ErlangAtom "true") ->
        let
          case_8 =
            case st_4 of
              (ErlangTuple arr_11) | (DM.Just field_10) <-
                                       ((arr_11 DA.!! 17)) ->
                field_10
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in
          case case_8 of
            lev_12 | (weakGt lev_12 (ErlangInt (DBI.fromInt 0))) ->
              let case_13 = (erlps__check_format_1__1 [as_3])
              in
                case case_13 of
                  (ErlangTuple [(ErlangAtom "warn"), level_15, fmt_16,
                                fas_17]) | (weakLeq level_15 lev_12) ->
                    let    tup_el_21 = (ErlangTuple [fmt_16, fas_17])
                    in let
                      arg_19 =
                        (ErlangTuple [(ErlangAtom "format_error"), tup_el_21])
                    in (erlps__add_warning__3 [line_0, arg_19, st_4])
                  _ -> st_4
                  something_else -> (EXC.case_clause something_else)
            _lev_25 -> st_4
            something_else -> (EXC.case_clause something_else)
      (ErlangAtom "false") -> st_4
      something_else -> (EXC.case_clause something_else)
erlps__format_function__5 [arg_26, arg_27, arg_28, arg_29,
                           arg_30]
  =
  (EXC.function_clause unit)
erlps__format_function__5 args =
  (EXC.badarity
     (ErlangFun 5 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_format_function__2 :: ErlangFun
erlps__is_format_function__2 [(ErlangAtom "io"),
                              (ErlangAtom "fwrite")]
  =
  (ErlangAtom "true")
erlps__is_format_function__2 [(ErlangAtom "io"),
                              (ErlangAtom "format")]
  =
  (ErlangAtom "true")
erlps__is_format_function__2 [(ErlangAtom "io_lib"),
                              (ErlangAtom "fwrite")]
  =
  (ErlangAtom "true")
erlps__is_format_function__2 [(ErlangAtom "io_lib"),
                              (ErlangAtom "format")]
  =
  (ErlangAtom "true")
erlps__is_format_function__2 [m_0, f_1]
  | ((isEAtom m_0) && (isEAtom f_1)) =
  (ErlangAtom "false")
erlps__is_format_function__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__is_format_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_format_1__1 :: ErlangFun
erlps__check_format_1__1 [(ErlangCons fmt_0 (ErlangEmptyList))] =
  let
    head_4 =
      (ErlangTuple [(ErlangAtom "nil"), (ErlangInt (DBI.fromInt 0))])
  in
    (erlps__check_format_1__1
       [(ErlangCons fmt_0 (ErlangCons head_4 ErlangEmptyList))])
erlps__check_format_1__1 [(ErlangCons fmt_0 (ErlangCons as_1 (ErlangEmptyList)))]
  =
  let arg_3 = (erlps__canonicalize_string__1 [as_1])
  in (erlps__check_format_2__2 [fmt_0, arg_3])
erlps__check_format_1__1 [(ErlangCons _dev_0 (ErlangCons fmt_1 (ErlangCons as_2 (ErlangEmptyList))))]
  =
  (erlps__check_format_1__1
     [(ErlangCons fmt_1 (ErlangCons as_2 ErlangEmptyList))])
erlps__check_format_1__1 [_as_0] =
  let
    tup_el_3 =
      (make_string "format call with wrong number of arguments")
  in
    (ErlangTuple
       [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 1)), tup_el_3,
        ErlangEmptyList])
erlps__check_format_1__1 [arg_5] = (EXC.function_clause unit)
erlps__check_format_1__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__canonicalize_string__1 :: ErlangFun
erlps__canonicalize_string__1 [(ErlangTuple [(ErlangAtom "string"),
                                             line_0, cs_1])]
  =
  let   
    arg_2 =
      (ErlangFun 2
         let
           lambda_3 [c_6, t_7] =
             let
               tup_el_10 = (ErlangTuple [(ErlangAtom "integer"), line_0, c_6])
             in (ErlangTuple [(ErlangAtom "cons"), line_0, tup_el_10, t_7])
           lambda_3 [arg_4, arg_5] = (EXC.function_clause unit)
           lambda_3 args = (EXC.badarity (ErlangFun 2 lambda_3) args)
         in lambda_3)
  in let arg_15 = (ErlangTuple [(ErlangAtom "nil"), line_0])
  in
    (BIF.do_remote_fun_call "Lists" "erlps__foldr__3"
       [arg_2, arg_15, cs_1])
erlps__canonicalize_string__1 [term_0] = term_0
erlps__canonicalize_string__1 [arg_1] =
  (EXC.function_clause unit)
erlps__canonicalize_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_format_2__2 :: ErlangFun
erlps__check_format_2__2 [fmt_0, as_1] =
  case fmt_0 of
    (ErlangTuple [(ErlangAtom "string"), _l_3, s_4]) ->
      (erlps__check_format_2a__2 [s_4, as_1])
    (ErlangTuple [(ErlangAtom "atom"), _l_7, a_8]) ->
      let arg_9 = (BIF.erlang__atom_to_list__1 [a_8])
      in (erlps__check_format_2a__2 [arg_9, as_1])
    _ ->
      let
        tup_el_14 = (make_string "format string not a textual constant")
      in
        (ErlangTuple
           [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 2)), tup_el_14,
            ErlangEmptyList])
    something_else -> (EXC.case_clause something_else)
erlps__check_format_2__2 [arg_16, arg_17] =
  (EXC.function_clause unit)
erlps__check_format_2__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_format_2a__2 :: ErlangFun
erlps__check_format_2a__2 [fmt_0, as_1] =
  let case_2 = (erlps__args_list__1 [as_1])
  in
    case case_2 of
      (ErlangAtom "true") -> (erlps__check_format_3__2 [fmt_0, as_1])
      (ErlangAtom "false") ->
        let tup_el_8 = (make_string "format arguments not a list")
        in
          (ErlangTuple
             [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 1)), tup_el_8,
              ErlangEmptyList])
      (ErlangAtom "maybe") ->
        let
          tup_el_12 = (make_string "format arguments perhaps not a list")
        in
          (ErlangTuple
             [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 2)), tup_el_12,
              ErlangEmptyList])
      something_else -> (EXC.case_clause something_else)
erlps__check_format_2a__2 [arg_14, arg_15] =
  (EXC.function_clause unit)
erlps__check_format_2a__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_format_3__2 :: ErlangFun
erlps__check_format_3__2 [fmt_0, as_1] =
  let case_2 = (erlps__check_format_string__1 [fmt_0])
  in
    case case_2 of
      (ErlangTuple [(ErlangAtom "ok"), need_4]) ->
        let case_5 = (erlps__args_length__1 [as_1])
        in
          case case_5 of
            len_7 | ((ErlangAtom "true") ==
                       (falsifyErrors
                          (\ _ ->
                             let lop_8 = (BIF.erlang__length__1 [need_4])
                             in (BIF.erlang__op_exactEq [lop_8, len_7])))) ->
              (ErlangAtom "ok")
            _len_11 ->
              let
                tup_el_14 =
                  (make_string "wrong number of arguments in format call")
              in
                (ErlangTuple
                   [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 1)), tup_el_14,
                    ErlangEmptyList])
            something_else -> (EXC.case_clause something_else)
      (ErlangTuple [(ErlangAtom "error"), s_16]) ->
        let tup_el_19 = (make_string "format string invalid (~ts)")
        in
          (ErlangTuple
             [(ErlangAtom "warn"), (ErlangInt (DBI.fromInt 1)), tup_el_19,
              (ErlangCons s_16 ErlangEmptyList)])
      something_else -> (EXC.case_clause something_else)
erlps__check_format_3__2 [arg_23, arg_24] =
  (EXC.function_clause unit)
erlps__check_format_3__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args_list__1 :: ErlangFun
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "cons"), _l_0,
                                   _h_1, t_2])]
  =
  (erlps__args_list__1 [t_2])
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "string"), _l_0,
                                   _cs_1])]
  =
  (ErlangAtom "maybe")
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "nil"), _l_0])] =
  (ErlangAtom "true")
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "atom"), _, _])] =
  (ErlangAtom "false")
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "integer"), _,
                                   _])]
  =
  (ErlangAtom "false")
erlps__args_list__1 [(ErlangTuple [(ErlangAtom "float"), _, _])]
  =
  (ErlangAtom "false")
erlps__args_list__1 [_other_0] = (ErlangAtom "maybe")
erlps__args_list__1 [arg_1] = (EXC.function_clause unit)
erlps__args_list__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__args_length__1 :: ErlangFun
erlps__args_length__1 [(ErlangTuple [(ErlangAtom "cons"), _l_0,
                                     _h_1, t_2])]
  =
  let rop_4 = (erlps__args_length__1 [t_2])
  in (BIF.erlang__op_plus [(ErlangInt (DBI.fromInt 1)), rop_4])
erlps__args_length__1 [(ErlangTuple [(ErlangAtom "nil"), _l_0])]
  =
  (ErlangInt (DBI.fromInt 0))
erlps__args_length__1 [arg_1] = (EXC.function_clause unit)
erlps__args_length__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__check_format_string__1 :: ErlangFun
erlps__check_format_string__1 [fmt_0] =
  (erlps__extract_sequences__2 [fmt_0, ErlangEmptyList])
erlps__check_format_string__1 [arg_3] =
  (EXC.function_clause unit)
erlps__check_format_string__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extract_sequences__2 :: ErlangFun
erlps__extract_sequences__2 [fmt_0, need0_1] =
  let
    case_2 =
      (BIF.do_remote_fun_call "String" "erlps__find__2"
         [fmt_0,
          (ErlangCons (ErlangInt (DBI.fromInt 126)) ErlangEmptyList)])
  in
    case case_2 of
      (ErlangAtom "nomatch") ->
        let
          tup_el_8 =
            (BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [need0_1])
        in (ErlangTuple [(ErlangAtom "ok"), tup_el_8])
      (ErlangCons (ErlangInt num_10) fmt1_11) | ((ErlangInt num_10) ==
                                                   (ErlangInt
                                                      (DBI.fromInt 126))) ->
        let
          case_12 =
            (erlps__extract_sequence__3
               [(ErlangInt (DBI.fromInt 1)), fmt1_11, need0_1])
        in
          case case_12 of
            (ErlangTuple [(ErlangAtom "ok"), need1_16, rest_17]) ->
              (erlps__extract_sequences__2 [rest_17, need1_16])
            error_20 -> error_20
            something_else -> (EXC.case_clause something_else)
      something_else -> (EXC.case_clause something_else)
erlps__extract_sequences__2 [arg_21, arg_22] =
  (EXC.function_clause unit)
erlps__extract_sequences__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extract_sequence__3 :: ErlangFun
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) (ErlangCons c_2 fmt_3)),
                            need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 45)))
  , ((weakGeq c_2 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_2 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__extract_sequence_digits__3
     [(ErlangInt (DBI.fromInt 1)), fmt_3, need_4])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons c_1 fmt_2), need_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1)))
  , ((weakGeq c_1 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_1 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__extract_sequence_digits__3
     [(ErlangInt (DBI.fromInt 1)), fmt_2, need_3])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                            need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 45)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 42))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 2)), fmt_3,
      (ErlangCons (ErlangAtom "int") need_4)])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) fmt_2), need_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 42))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 2)), fmt_2,
      (ErlangCons (ErlangAtom "int") need_3)])
erlps__extract_sequence__3 [(ErlangInt num_0), fmt_1, need_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 1))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 2)), fmt_1, need_2])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) (ErlangCons c_2 fmt_3)),
                            need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46)))
  , ((weakGeq c_2 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_2 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__extract_sequence_digits__3
     [(ErlangInt (DBI.fromInt 2)), fmt_3, need_4])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                            need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 42))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 3)), fmt_3,
      (ErlangCons (ErlangAtom "int") need_4)])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) fmt_2), need_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 3)), fmt_2, need_3])
erlps__extract_sequence__3 [(ErlangInt num_0), fmt_1, need_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 2))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 4)), fmt_1, need_2])
erlps__extract_sequence__3 [(ErlangInt num_0),
                            (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                            need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 42))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 4)), fmt_3,
      (ErlangCons (ErlangAtom "int") need_4)])
erlps__extract_sequence__3 args =
  (erlps__extract_sequence__3__p1 args)

erlps__extract_sequence__3__p1 :: ErlangFun
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons _ fmt_2)),
                                need_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 46))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 4)), fmt_2, need_3])
erlps__extract_sequence__3__p1 [(ErlangInt num_0), fmt_1, need_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 3))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 4)), fmt_1, need_2])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 108))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 4)),
      (ErlangCons (ErlangInt (DBI.fromInt 108))
         (ErlangCons (ErlangInt (DBI.fromInt 116)) fmt_3)),
      need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 99))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 99)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 115))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 115)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 112))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 112)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 80))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 80)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 119))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 119)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 87))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 87)) fmt_3), need_4])
erlps__extract_sequence__3__p1 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons c_2 _fmt_3)),
                                _need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 116))) =
  let    lop_7 = (make_string "invalid control ~t")
  in let
    tup_el_6 =
      (BIF.erlang__op_append [lop_7, (ErlangCons c_2 ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "error"), tup_el_6])
erlps__extract_sequence__3__p1 args =
  (erlps__extract_sequence__3__p2 args)

erlps__extract_sequence__3__p2 :: ErlangFun
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 112))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 112)) fmt_3), need_4])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) fmt_4))),
                                need_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 112))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 112)) fmt_4), need_5])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) fmt_3)),
                                need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 80))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 80)) fmt_3), need_4])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons (ErlangInt num_3) fmt_4))),
                                need_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116)))
  , ((ErlangInt num_3) == (ErlangInt (DBI.fromInt 80))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)),
      (ErlangCons (ErlangInt (DBI.fromInt 80)) fmt_4), need_5])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons (ErlangInt num_2) (ErlangCons c_3 _fmt_4))),
                                _need_5]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108)))
  , ((ErlangInt num_2) == (ErlangInt (DBI.fromInt 116))) =
  let    lop_8 = (make_string "invalid control ~lt")
  in let
    tup_el_7 =
      (BIF.erlang__op_append [lop_8, (ErlangCons c_3 ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "error"), tup_el_7])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons (ErlangInt num_1) (ErlangCons c_2 _fmt_3)),
                                _need_4]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4)))
  , ((ErlangInt num_1) == (ErlangInt (DBI.fromInt 108))) =
  let    lop_7 = (make_string "invalid control ~l")
  in let
    tup_el_6 =
      (BIF.erlang__op_append [lop_7, (ErlangCons c_2 ErlangEmptyList)])
  in (ErlangTuple [(ErlangAtom "error"), tup_el_6])
erlps__extract_sequence__3__p2 [(ErlangInt num_0), fmt_1, need_2]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 4))) =
  (erlps__extract_sequence__3
     [(ErlangInt (DBI.fromInt 5)), fmt_1, need_2])
erlps__extract_sequence__3__p2 [(ErlangInt num_0),
                                (ErlangCons c_1 fmt_2), need0_3]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 5))) =
  let case_4 = (erlps__control_type__2 [c_1, need0_3])
  in
    case case_4 of
      (ErlangAtom "error") ->
        let    lop_9 = (make_string "invalid control ~")
        in let
          tup_el_8 =
            (BIF.erlang__op_append [lop_9, (ErlangCons c_1 ErlangEmptyList)])
        in (ErlangTuple [(ErlangAtom "error"), tup_el_8])
      need1_13 -> (ErlangTuple [(ErlangAtom "ok"), need1_13, fmt_2])
      something_else -> (EXC.case_clause something_else)
erlps__extract_sequence__3__p2 [_, (ErlangEmptyList), _need_0] =
  let tup_el_2 = (make_string "truncated")
  in (ErlangTuple [(ErlangAtom "error"), tup_el_2])
erlps__extract_sequence__3__p2 [arg_3, arg_4, arg_5] =
  (EXC.function_clause unit)
erlps__extract_sequence__3__p2 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__extract_sequence_digits__3 :: ErlangFun
erlps__extract_sequence_digits__3 [fld_0, (ErlangCons c_1 fmt_2),
                                   need_3]
  | ((weakGeq c_1 (ErlangInt (DBI.fromInt 48))) &&
       (weakLeq c_1 (ErlangInt (DBI.fromInt 57)))) =
  (erlps__extract_sequence_digits__3 [fld_0, fmt_2, need_3])
erlps__extract_sequence_digits__3 [fld_0, fmt_1, need_2] =
  let
    arg_3 =
      (BIF.erlang__op_plus [fld_0, (ErlangInt (DBI.fromInt 1))])
  in (erlps__extract_sequence__3 [arg_3, fmt_1, need_2])
erlps__extract_sequence_digits__3 [arg_8, arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__extract_sequence_digits__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__control_type__2 :: ErlangFun
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 126))) =
  need_1
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 99))) =
  (ErlangCons (ErlangAtom "int") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 102))) =
  (ErlangCons (ErlangAtom "float") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 101))) =
  (ErlangCons (ErlangAtom "float") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 103))) =
  (ErlangCons (ErlangAtom "float") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 115))) =
  (ErlangCons (ErlangAtom "string") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 119))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 112))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 87))) =
  (ErlangCons (ErlangAtom "int")
     (ErlangCons (ErlangAtom "term") need_1))
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 80))) =
  (ErlangCons (ErlangAtom "int")
     (ErlangCons (ErlangAtom "term") need_1))
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 98))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 66))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 120))) =
  (ErlangCons (ErlangAtom "string")
     (ErlangCons (ErlangAtom "term") need_1))
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 88))) =
  (ErlangCons (ErlangAtom "string")
     (ErlangCons (ErlangAtom "term") need_1))
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 43))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 35))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 110))) =
  need_1
erlps__control_type__2 [(ErlangInt num_0), need_1]
  | ((ErlangInt num_0) == (ErlangInt (DBI.fromInt 105))) =
  (ErlangCons (ErlangAtom "term") need_1)
erlps__control_type__2 [_c_0, _need_1] = (ErlangAtom "error")
erlps__control_type__2 [arg_2, arg_3] =
  (EXC.function_clause unit)
erlps__control_type__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__local_functions__1 :: ErlangFun
erlps__local_functions__1 [forms_0] =
  let
    arg_1 =
      (flmap
         (\ lc_5 ->
            case lc_5 of
              (ErlangTuple [(ErlangAtom "function"), _, func_3, arity_4, _]) ->
                let lc_ret_6 = (ErlangTuple [func_3, arity_4])
                in (ErlangCons lc_ret_6 ErlangEmptyList)
              _ -> ErlangEmptyList)
         forms_0)
  in
    (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1" [arg_1])
erlps__local_functions__1 [arg_9] = (EXC.function_clause unit)
erlps__local_functions__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_local_function__2 :: ErlangFun
erlps__is_local_function__2 [localset_0,
                             (ErlangTuple [func_1, arity_2])]
  =
  let arg_3 = (ErlangTuple [func_1, arity_2])
  in
    (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
       [arg_3, localset_0])
erlps__is_local_function__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__is_local_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_imported_function__2 :: ErlangFun
erlps__is_imported_function__2 [importset_0,
                                (ErlangTuple [func_1, arity_2])]
  =
  let    arg_4 = (ErlangTuple [func_1, arity_2])
  in let
    case_3 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2"
         [arg_4, importset_0])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), _mod_8]) -> (ErlangAtom "true")
      (ErlangAtom "error") -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__is_imported_function__2 [arg_9, arg_10] =
  (EXC.function_clause unit)
erlps__is_imported_function__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_imported_from_erlang__2 :: ErlangFun
erlps__is_imported_from_erlang__2 [importset_0,
                                   (ErlangTuple [func_1, arity_2])]
  =
  let    arg_4 = (ErlangTuple [func_1, arity_2])
  in let
    case_3 =
      (BIF.do_remote_fun_call "Orddict" "erlps__find__2"
         [arg_4, importset_0])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), (ErlangAtom "erlang")]) ->
        (ErlangAtom "true")
      _ -> (ErlangAtom "false")
      something_else -> (EXC.case_clause something_else)
erlps__is_imported_from_erlang__2 [arg_8, arg_9] =
  (EXC.function_clause unit)
erlps__is_imported_from_erlang__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__auto_import_suppressed__1 :: ErlangFun
erlps__auto_import_suppressed__1 [compileflags_0] =
  let
    case_1 =
      (BIF.lists__member__2
         [(ErlangAtom "no_auto_import"), compileflags_0])
  in
    case case_1 of
      (ErlangAtom "true") -> (ErlangAtom "all")
      (ErlangAtom "false") ->
        let   
          l0_8 =
            (flmap
               (\ lc_6 ->
                  case lc_6 of
                    (ErlangTuple [(ErlangAtom "no_auto_import"), x_5]) ->
                      (ErlangCons x_5 ErlangEmptyList)
                    _ -> ErlangEmptyList)
               compileflags_0)
        in let
          lc_src_9 =
            (BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [l0_8])
        in let
          l1_21 =
            (flmap
               (\ lc_13 ->
                  case lc_13 of
                    (ErlangTuple [y_11, z_12]) ->
                      let cond_14 = (BIF.erlang__is_atom__1 [y_11])
                      in
                        case cond_14 of
                          (ErlangAtom "true") ->
                            let cond_16 = (BIF.erlang__is_integer__1 [z_12])
                            in
                              case cond_16 of
                                (ErlangAtom "true") ->
                                  let lc_ret_18 = (ErlangTuple [y_11, z_12])
                                  in (ErlangCons lc_ret_18 ErlangEmptyList)
                                _ -> ErlangEmptyList
                          _ -> ErlangEmptyList
                    _ -> ErlangEmptyList)
               lc_src_9)
        in
          (BIF.do_remote_fun_call "Gb.Sets" "erlps__from_list__1" [l1_21])
      something_else -> (EXC.case_clause something_else)
erlps__auto_import_suppressed__1 [arg_23] =
  (EXC.function_clause unit)
erlps__auto_import_suppressed__1 args =
  (EXC.badarity
     (ErlangFun 1 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__is_autoimport_suppressed__2 :: ErlangFun
erlps__is_autoimport_suppressed__2 [(ErlangAtom "all"),
                                    (ErlangTuple [_func_0, _arity_1])]
  =
  (ErlangAtom "true")
erlps__is_autoimport_suppressed__2 [noautoset_0,
                                    (ErlangTuple [func_1, arity_2])]
  =
  let arg_3 = (ErlangTuple [func_1, arity_2])
  in
    (BIF.do_remote_fun_call "Gb.Sets" "erlps__is_element__2"
       [arg_3, noautoset_0])
erlps__is_autoimport_suppressed__2 [arg_7, arg_8] =
  (EXC.function_clause unit)
erlps__is_autoimport_suppressed__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__bif_clash_specifically_disabled__2 :: ErlangFun
erlps__bif_clash_specifically_disabled__2 [st_0,
                                           (ErlangTuple [f_1, a_2])]
  =
  let    arg_3 = (ErlangTuple [f_1, a_2])
  in let
    arg_6 =
      case st_0 of
        (ErlangTuple arr_9) | (DM.Just field_8) <- ((arr_9 DA.!! 19)) ->
          field_8
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in (BIF.lists__member__2 [arg_3, arg_6])
erlps__bif_clash_specifically_disabled__2 [arg_10, arg_11] =
  (EXC.function_clause unit)
erlps__bif_clash_specifically_disabled__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__no_guard_bif_clash__2 :: ErlangFun
erlps__no_guard_bif_clash__2 [st_0, (ErlangTuple [f_1, a_2])] =
  let   
    arg_5 =
      case st_0 of
        (ErlangTuple arr_8) | (DM.Just field_7) <- ((arr_8 DA.!! 8)) ->
          field_7
        _ -> (EXC.badrecord (ErlangAtom "lint"))
  in let arg_9 = (ErlangTuple [f_1, a_2])
  in let op_arg_4 = (erlps__is_local_function__2 [arg_5, arg_9])
  in let lop_3 = (BIF.erlang__not__1 [op_arg_4])
  in
    case lop_3 of
      (ErlangAtom "false") -> (ErlangAtom "false")
      (ErlangAtom "true") ->
        let   
          arg_15 =
            case st_0 of
              (ErlangTuple arr_18) | (DM.Just field_17) <-
                                       ((arr_18 DA.!! 5)) ->
                field_17
              _ -> (EXC.badrecord (ErlangAtom "lint"))
        in let arg_19 = (ErlangTuple [f_1, a_2])
        in let
          op_arg_14 = (erlps__is_imported_function__2 [arg_15, arg_19])
        in let lop_13 = (BIF.erlang__not__1 [op_arg_14])
        in let
          lop_12 =
            case lop_13 of
              (ErlangAtom "true") -> (ErlangAtom "true")
              (ErlangAtom "false") ->
                let   
                  arg_22 =
                    case st_0 of
                      (ErlangTuple arr_25) | (DM.Just field_24) <-
                                               ((arr_25 DA.!! 5)) ->
                        field_24
                      _ -> (EXC.badrecord (ErlangAtom "lint"))
                in let arg_26 = (ErlangTuple [f_1, a_2])
                in (erlps__is_imported_from_erlang__2 [arg_22, arg_26])
              _ -> (EXC.badarg1 lop_13)
        in
          case lop_12 of
            (ErlangAtom "false") -> (ErlangAtom "false")
            (ErlangAtom "true") ->
              let   
                arg_31 =
                  case st_0 of
                    (ErlangTuple arr_34) | (DM.Just field_33) <-
                                             ((arr_34 DA.!! 9)) ->
                      field_33
                    _ -> (EXC.badrecord (ErlangAtom "lint"))
              in let arg_35 = (ErlangTuple [f_1, a_2])
              in let
                op_arg_30 =
                  (erlps__is_autoimport_suppressed__2 [arg_31, arg_35])
              in let lop_29 = (BIF.erlang__not__1 [op_arg_30])
              in
                case lop_29 of
                  (ErlangAtom "true") -> (ErlangAtom "true")
                  (ErlangAtom "false") ->
                    let   
                      arg_38 =
                        case st_0 of
                          (ErlangTuple arr_41) | (DM.Just field_40) <-
                                                   ((arr_41 DA.!! 5)) ->
                            field_40
                          _ -> (EXC.badrecord (ErlangAtom "lint"))
                    in let arg_42 = (ErlangTuple [f_1, a_2])
                    in (erlps__is_imported_from_erlang__2 [arg_38, arg_42])
                  _ -> (EXC.badarg1 lop_29)
            _ -> (EXC.badarg1 lop_12)
      _ -> (EXC.badarg1 lop_3)
erlps__no_guard_bif_clash__2 [arg_45, arg_46] =
  (EXC.function_clause unit)
erlps__no_guard_bif_clash__2 args =
  (EXC.badarity
     (ErlangFun 2 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)

erlps__maps_prepend__3 :: ErlangFun
erlps__maps_prepend__3 [key_0, value_1, map_2] =
  let case_3 = (BIF.maps__find__2 [key_0, map_2])
  in
    case case_3 of
      (ErlangTuple [(ErlangAtom "ok"), values_6]) ->
        (BIF.maps__put__3 [key_0, (ErlangCons value_1 values_6), map_2])
      (ErlangAtom "error") ->
        (BIF.maps__put__3
           [key_0, (ErlangCons value_1 ErlangEmptyList), map_2])
      something_else -> (EXC.case_clause something_else)
erlps__maps_prepend__3 [arg_17, arg_18, arg_19] =
  (EXC.function_clause unit)
erlps__maps_prepend__3 args =
  (EXC.badarity
     (ErlangFun 3 (\ _ -> (ErlangAtom "purs_tco_sucks"))) args)