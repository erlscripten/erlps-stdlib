module Unicode.Util(erlps__cp__1, erlps__gc__1,
                    erlps__whitespace__0, erlps__is_whitespace__1,
                    erlps__uppercase__1, erlps__lowercase__1,
                    erlps__titlecase__1, erlps__casefold__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__uppercase__1 :: ErlangFun
erlps__uppercase__1 [str0_0] =
  let case_1 = erlps__cp__1 [str0_0]
  in
    case case_1 of
      str1_5@(ErlangCons cp_3 str_4) ->
        let case_6 = erlps__case_table__1 [cp_3]
        in
          case case_6 of
            (ErlangTuple [upper_8, _]) -> ErlangCons upper_8 str_4
            (ErlangTuple [upper_11, _, _, _]) -> ErlangCons upper_11 str_4
            something_else -> EXC.case_clause something_else
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_14]) ->
        let arg_15 = ErlangTuple [ErlangAtom "badarg", err_14]
        in BIF.erlang__error__1 [arg_15]
      something_else -> EXC.case_clause something_else
erlps__uppercase__1 [arg_18] = EXC.function_clause unit
erlps__uppercase__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__lowercase__1 :: ErlangFun
erlps__lowercase__1 [str0_0] =
  let case_1 = erlps__cp__1 [str0_0]
  in
    case case_1 of
      str1_5@(ErlangCons cp_3 str_4) ->
        let case_6 = erlps__case_table__1 [cp_3]
        in
          case case_6 of
            (ErlangTuple [_, lower_8]) -> ErlangCons lower_8 str_4
            (ErlangTuple [_, lower_11, _, _]) -> ErlangCons lower_11 str_4
            something_else -> EXC.case_clause something_else
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_14]) ->
        let arg_15 = ErlangTuple [ErlangAtom "badarg", err_14]
        in BIF.erlang__error__1 [arg_15]
      something_else -> EXC.case_clause something_else
erlps__lowercase__1 [arg_18] = EXC.function_clause unit
erlps__lowercase__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__titlecase__1 :: ErlangFun
erlps__titlecase__1 [str0_0] =
  let case_1 = erlps__cp__1 [str0_0]
  in
    case case_1 of
      str1_5@(ErlangCons cp_3 str_4) ->
        let case_6 = erlps__case_table__1 [cp_3]
        in
          case case_6 of
            (ErlangTuple [_, _, title_8, _]) -> ErlangCons title_8 str_4
            (ErlangTuple [upper_11, _]) -> ErlangCons upper_11 str_4
            something_else -> EXC.case_clause something_else
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_14]) ->
        let arg_15 = ErlangTuple [ErlangAtom "badarg", err_14]
        in BIF.erlang__error__1 [arg_15]
      something_else -> EXC.case_clause something_else
erlps__titlecase__1 [arg_18] = EXC.function_clause unit
erlps__titlecase__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__casefold__1 :: ErlangFun
erlps__casefold__1 [str0_0] =
  let case_1 = erlps__cp__1 [str0_0]
  in
    case case_1 of
      str1_5@(ErlangCons cp_3 str_4) ->
        let case_6 = erlps__case_table__1 [cp_3]
        in
          case case_6 of
            (ErlangTuple [_, _, _, fold_8]) -> ErlangCons fold_8 str_4
            (ErlangTuple [_, lower_11]) -> ErlangCons lower_11 str_4
            something_else -> EXC.case_clause something_else
      (ErlangEmptyList) -> ErlangEmptyList
      (ErlangTuple [(ErlangAtom "error"), err_14]) ->
        let arg_15 = ErlangTuple [ErlangAtom "badarg", err_14]
        in BIF.erlang__error__1 [arg_15]
      something_else -> EXC.case_clause something_else
erlps__casefold__1 [arg_18] = EXC.function_clause unit
erlps__casefold__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__whitespace__0 :: ErlangFun
erlps__whitespace__0 [] =
  let    head_1 = toErl 13
  in let head_3 = toErl 10
  in let head_6 = toErl 9
  in let head_8 = toErl 10
  in let head_10 = toErl 11
  in let head_12 = toErl 12
  in let head_14 = toErl 13
  in let head_16 = toErl 32
  in let head_18 = toErl 133
  in let head_20 = toErl 8206
  in let head_22 = toErl 8207
  in let head_24 = toErl 8232
  in let head_26 = toErl 8233
  in
    ErlangCons
      (ErlangCons head_1 (ErlangCons head_3 ErlangEmptyList))
      (ErlangCons head_6
         (ErlangCons head_8
            (ErlangCons head_10
               (ErlangCons head_12
                  (ErlangCons head_14
                     (ErlangCons head_16
                        (ErlangCons head_18
                           (ErlangCons head_20
                              (ErlangCons head_22
                                 (ErlangCons head_24
                                    (ErlangCons head_26
                                       ErlangEmptyList)))))))))))
erlps__whitespace__0 args =
  EXC.badarity (ErlangFun 0 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__is_whitespace__1 :: ErlangFun
erlps__is_whitespace__1 [(ErlangCons (ErlangInt num_0) (ErlangCons (ErlangInt num_1) (ErlangEmptyList)))]
  | ((ErlangInt num_0) == (toErl 13))
  , ((ErlangInt num_1) == (toErl 10)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 11)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 12)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 13)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 32)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 133)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8206)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8207)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8232)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8233)) =
  ErlangAtom "true"
erlps__is_whitespace__1 [_] = ErlangAtom "false"
erlps__is_whitespace__1 [arg_0] = EXC.function_clause unit
erlps__is_whitespace__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cp__1 :: ErlangFun
erlps__cp__1 [l_1@(ErlangCons c_0 _)] | isEInt c_0 = l_1
erlps__cp__1 [(ErlangCons list_0 (ErlangEmptyList))] =
  erlps__cp__1 [list_0]
erlps__cp__1 [(ErlangCons list_0 r_1)] =
  erlps__cpl__2 [list_0, r_1]
erlps__cp__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__cp__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok c_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok r_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  ErlangCons c_3 r_6
erlps__cp__1 [(ErlangBinary binEnd_0)] | BIN.empty binEnd_0 =
  ErlangEmptyList
erlps__cp__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (BIN.size binSeg_0)
  , (BIN.Ok r_3 bin_2) <- (BIN.chopBin binSeg_0 size_1 8)
  , BIN.empty bin_2 =
  ErlangTuple [ErlangAtom "error", r_3]
erlps__cp__1 [arg_6] = EXC.function_clause unit
erlps__cp__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl__2 :: ErlangFun
erlps__cpl__2 [(ErlangCons c_0 (ErlangEmptyList)), r_1]
  | isEInt c_0 =
  let tail_3 = erlps__cpl_1_cont__1 [r_1]
  in ErlangCons c_0 tail_3
erlps__cpl__2 [(ErlangCons c_0 t_1), r_2] | isEInt c_0 =
  let tail_4 = erlps__cpl_cont__2 [t_1, r_2]
  in ErlangCons c_0 tail_4
erlps__cpl__2 [(ErlangCons list_0 (ErlangEmptyList)), r_1] =
  erlps__cpl__2 [list_0, r_1]
erlps__cpl__2 [(ErlangCons list_0 t_1), r_2] =
  erlps__cpl__2 [list_0, ErlangCons t_1 r_2]
erlps__cpl__2 [(ErlangEmptyList), r_0] = erlps__cp__1 [r_0]
erlps__cpl__2 [(ErlangBinary binSeg_0), r_7]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok c_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok t_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  ErlangCons c_3 (ErlangCons t_6 r_7)
erlps__cpl__2 [(ErlangBinary binEnd_0), r_1]
  | BIN.empty binEnd_0 =
  erlps__cp__1 [r_1]
erlps__cpl__2 [(ErlangBinary binSeg_0), r_4]
  | (ErlangInt size_1) <- (BIN.size binSeg_0)
  , (BIN.Ok b_3 bin_2) <- (BIN.chopBin binSeg_0 size_1 8)
  , BIN.empty bin_2 =
  ErlangTuple [ErlangAtom "error", ErlangCons b_3 r_4]
erlps__cpl__2 [arg_9, arg_10] = EXC.function_clause unit
erlps__cpl__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_cont__2 :: ErlangFun
erlps__cpl_cont__2 [(ErlangCons c_0 t_1), r_2] | isEInt c_0 =
  let tail_4 = erlps__cpl_cont2__2 [t_1, r_2]
  in ErlangCons c_0 tail_4
erlps__cpl_cont__2 [(ErlangCons l_0 (ErlangEmptyList)), r_1] =
  erlps__cpl_cont__2 [l_0, r_1]
erlps__cpl_cont__2 [(ErlangCons l_0 t_1), r_2] =
  erlps__cpl_cont__2 [l_0, ErlangCons t_1 r_2]
erlps__cpl_cont__2 [(ErlangEmptyList), r_0] =
  erlps__cpl_1_cont__1 [r_0]
erlps__cpl_cont__2 [t_0, r_1] = ErlangCons t_0 r_1
erlps__cpl_cont__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__cpl_cont__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_cont2__2 :: ErlangFun
erlps__cpl_cont2__2 [(ErlangCons c_0 t_1), r_2] | isEInt c_0 =
  let tail_4 = erlps__cpl_cont3__2 [t_1, r_2]
  in ErlangCons c_0 tail_4
erlps__cpl_cont2__2 [(ErlangCons l_0 (ErlangEmptyList)), r_1] =
  erlps__cpl_cont2__2 [l_0, r_1]
erlps__cpl_cont2__2 [(ErlangCons l_0 t_1), r_2] =
  erlps__cpl_cont2__2 [l_0, ErlangCons t_1 r_2]
erlps__cpl_cont2__2 [(ErlangEmptyList), r_0] =
  erlps__cpl_1_cont2__1 [r_0]
erlps__cpl_cont2__2 [t_0, r_1] = ErlangCons t_0 r_1
erlps__cpl_cont2__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__cpl_cont2__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_cont3__2 :: ErlangFun
erlps__cpl_cont3__2 [(ErlangCons c_0 (ErlangEmptyList)), r_1]
  | isEInt c_0 =
  ErlangCons c_0 r_1
erlps__cpl_cont3__2 [(ErlangCons c_0 t_1), r_2] | isEInt c_0 =
  ErlangCons c_0 (ErlangCons t_1 r_2)
erlps__cpl_cont3__2 [(ErlangCons l_0 (ErlangEmptyList)), r_1] =
  erlps__cpl_cont3__2 [l_0, r_1]
erlps__cpl_cont3__2 [(ErlangCons l_0 t_1), r_2] =
  erlps__cpl_cont3__2 [l_0, ErlangCons t_1 r_2]
erlps__cpl_cont3__2 [(ErlangEmptyList), r_0] =
  erlps__cpl_1_cont3__1 [r_0]
erlps__cpl_cont3__2 [t_0, r_1] = ErlangCons t_0 r_1
erlps__cpl_cont3__2 [arg_4, arg_5] = EXC.function_clause unit
erlps__cpl_cont3__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_1_cont__1 :: ErlangFun
erlps__cpl_1_cont__1 [(ErlangCons c_0 t_1)] | isEInt c_0 =
  let tail_3 = erlps__cpl_1_cont2__1 [t_1]
  in ErlangCons c_0 tail_3
erlps__cpl_1_cont__1 [(ErlangCons l_0 (ErlangEmptyList))] =
  erlps__cpl_1_cont__1 [l_0]
erlps__cpl_1_cont__1 [(ErlangCons l_0 t_1)] =
  erlps__cpl_cont__2 [l_0, t_1]
erlps__cpl_1_cont__1 [t_0] = t_0
erlps__cpl_1_cont__1 [arg_1] = EXC.function_clause unit
erlps__cpl_1_cont__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_1_cont2__1 :: ErlangFun
erlps__cpl_1_cont2__1 [(ErlangCons c_0 t_1)] | isEInt c_0 =
  let tail_3 = erlps__cpl_1_cont3__1 [t_1]
  in ErlangCons c_0 tail_3
erlps__cpl_1_cont2__1 [(ErlangCons l_0 (ErlangEmptyList))] =
  erlps__cpl_1_cont2__1 [l_0]
erlps__cpl_1_cont2__1 [(ErlangCons l_0 t_1)] =
  erlps__cpl_cont2__2 [l_0, t_1]
erlps__cpl_1_cont2__1 [t_0] = t_0
erlps__cpl_1_cont2__1 [arg_1] = EXC.function_clause unit
erlps__cpl_1_cont2__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cpl_1_cont3__1 :: ErlangFun
erlps__cpl_1_cont3__1 [t_1@(ErlangCons c_0 _)] | isEInt c_0 = t_1
erlps__cpl_1_cont3__1 [(ErlangCons l_0 (ErlangEmptyList))] =
  erlps__cpl_1_cont3__1 [l_0]
erlps__cpl_1_cont3__1 [(ErlangCons l_0 t_1)] =
  erlps__cpl_cont3__2 [l_0, t_1]
erlps__cpl_1_cont3__1 [t_0] = t_0
erlps__cpl_1_cont3__1 [arg_1] = EXC.function_clause unit
erlps__cpl_1_cont3__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cp_no_bin__1 :: ErlangFun
erlps__cp_no_bin__1 [l_1@(ErlangCons c_0 _)] | isEInt c_0 = l_1
erlps__cp_no_bin__1 [(ErlangCons list_0 (ErlangEmptyList))] =
  erlps__cp_no_bin__1 [list_0]
erlps__cp_no_bin__1 [(ErlangCons list_0 r_1)] =
  erlps__cp_no_binl__2 [list_0, r_1]
erlps__cp_no_bin__1 [(ErlangEmptyList)] = ErlangEmptyList
erlps__cp_no_bin__1 [_] = ErlangAtom "binary_found"
erlps__cp_no_bin__1 [arg_0] = EXC.function_clause unit
erlps__cp_no_bin__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__cp_no_binl__2 :: ErlangFun
erlps__cp_no_binl__2 [(ErlangCons c_0 (ErlangEmptyList)), r_1]
  | isEInt c_0 =
  let tail_3 = erlps__cpl_1_cont__1 [r_1]
  in ErlangCons c_0 tail_3
erlps__cp_no_binl__2 [(ErlangCons c_0 t_1), r_2] | isEInt c_0 =
  let tail_4 = erlps__cpl_cont__2 [t_1, r_2]
  in ErlangCons c_0 tail_4
erlps__cp_no_binl__2 [(ErlangCons list_0 (ErlangEmptyList)), r_1]
  =
  erlps__cp_no_binl__2 [list_0, r_1]
erlps__cp_no_binl__2 [(ErlangCons list_0 t_1), r_2] =
  erlps__cp_no_binl__2 [list_0, ErlangCons t_1 r_2]
erlps__cp_no_binl__2 [(ErlangEmptyList), r_0] =
  erlps__cp_no_bin__1 [r_0]
erlps__cp_no_binl__2 [_, _] = ErlangAtom "binary_found"
erlps__cp_no_binl__2 [arg_0, arg_1] = EXC.function_clause unit
erlps__cp_no_binl__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc__1 :: ErlangFun
erlps__gc__1 [r_0@(ErlangEmptyList)] = r_0
erlps__gc__1 [r_1@(ErlangCons cp_0 (ErlangEmptyList))]
  | isEInt cp_0 =
  r_1
erlps__gc__1 [(ErlangCons cp_1@(ErlangInt num_0) r0_2)]
  | ((ErlangInt num_0) == (toErl 13)) =
  let case_3 = erlps__cp__1 [r0_2]
  in
    case case_3 of
      (ErlangCons (ErlangInt num_5) r1_6) | ((ErlangInt num_5) ==
                                               (toErl 10)) ->
        let    head_8 = toErl 13
        in let head_10 = toErl 10
        in
          ErlangCons
            (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)) r1_6
      t_13 -> ErlangCons cp_1 t_13
erlps__gc__1 [t_2@(ErlangCons cp1_0 t1_1)]
  | weakLt cp1_0 (toErl 256) =
  case t1_1 of
    (ErlangCons cp2_4 _) | weakLt cp2_4 (toErl 256) -> t_2
    _ ->
      let case_5 = erlps__cp_no_bin__1 [t1_1]
      in
        case case_5 of
          t3_8@(ErlangCons cp2_7 _) | weakLt cp2_7 (toErl 256) ->
            ErlangCons cp1_0 t3_8
          (ErlangAtom "binary_found") -> erlps__gc_1__1 [t_2]
          t4_12 -> erlps__gc_1__1 [ErlangCons cp1_0 t4_12]
erlps__gc__1 [(ErlangBinary binEnd_0)] | BIN.empty binEnd_0 =
  ErlangEmptyList
erlps__gc__1 [(ErlangBinary binSeg_0)]
  | (ErlangInt size_1) <- (toErl 8)
  , (BIN.Ok cp1_3 bin_2) <-
      (BIN.chopInt binSeg_0 size_1 1 BIN.Big BIN.Unsigned)
  , (ErlangInt size_4) <- (BIN.size bin_2)
  , (BIN.Ok rest_6 bin_5) <- (BIN.chopBin bin_2 size_4 8)
  , BIN.empty bin_5 =
  case ErlangAtom "true" of
    _ | ((weakLt cp1_3 (toErl 256)) && ((/=) cp1_3 (toErl 13))) ->
      case rest_6 of
        (ErlangBinary binSeg_8) | (ErlangInt size_9) <- (toErl 8)
                                , (BIN.Ok cp2_11 bin_10) <-
                                    (BIN.chopInt binSeg_8 size_9 1 BIN.Big
                                       BIN.Unsigned)
                                , weakLt cp2_11 (toErl 256) ->
          ErlangCons cp1_3 rest_6
        _ -> erlps__gc_1__1 [ErlangCons cp1_3 rest_6]
    _ -> erlps__gc_1__1 [ErlangCons cp1_3 rest_6]
erlps__gc__1 [t_1@(ErlangCons cp_0 _)] | isEInt cp_0 =
  erlps__gc_1__1 [t_1]
erlps__gc__1 [str_0] =
  let case_1 = erlps__cp__1 [str_0]
  in
    case case_1 of
      error_3@(ErlangTuple [(ErlangAtom "error"), _]) -> error_3
      cps_4 -> erlps__gc__1 [cps_4]
erlps__gc__1 [arg_6] = EXC.function_clause unit
erlps__gc__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_1__1 :: ErlangFun
erlps__gc_1__1 [r_2@(ErlangCons (ErlangInt num_0) r0_1)]
  | ((ErlangInt num_0) == (toErl 13)) =
  let case_3 = erlps__cp__1 [r0_1]
  in
    case case_3 of
      (ErlangCons (ErlangInt num_5) r1_6) | ((ErlangInt num_5) ==
                                               (toErl 10)) ->
        let    head_8 = toErl 13
        in let head_10 = toErl 10
        in
          ErlangCons
            (ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList)) r1_6
      _ -> r_2
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 0)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 1)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 2)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 3)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 4)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 5)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 6)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 7)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 8)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 9)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 10)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 11)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 12)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 14)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 15)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 16)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 17)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 18)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 19)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 20)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 21)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 22)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 23)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 24)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 25)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 26)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 27)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 28)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 29)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 30)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 31)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 127)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 128)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 129)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 130)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 131)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 132)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 133)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 134)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 135)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 136)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 137)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 138)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 139)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 140)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 141)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 142)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 143)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 144)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 145)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 146)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 147)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 148)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 149)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 150)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 151)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 152)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 153)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 154)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 155)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 156)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 157)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 158)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 159)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 173)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 169)) =
  erlps__gc_ext_pict__2 [r1_2, ErlangCons cp_1 ErlangEmptyList]
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 174)) =
  erlps__gc_ext_pict__2 [r1_2, ErlangCons cp_1 ErlangEmptyList]
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r_1)]
  | weakLt cp_0 (toErl 256) =
  case r_1 of
    (ErlangCons cp2_4 _) | weakLt cp2_4 (toErl 256) -> r0_2
    _ ->
      let arg_5 = erlps__cp__1 [r_1]
      in erlps__gc_extend__3 [arg_5, r_1, cp_0]
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 1564)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 6158)) =
  r0_3
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 8203)) =
  r0_3
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 8206) cp_0) && (weakLeq cp_0 (toErl 8207))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 8232) cp_0) && (weakLeq cp_0 (toErl 8238))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 8288) cp_0) && (weakLeq cp_0 (toErl 8303))) =
  r0_2
erlps__gc_1__1 [r0_3@(ErlangCons cp_1@(ErlangInt num_0) r1_2)]
  | ((ErlangInt num_0) == (toErl 65279)) =
  r0_3
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 65520) cp_0) &&
       (weakLeq cp_0 (toErl 65531))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 78896) cp_0) &&
       (weakLeq cp_0 (toErl 78904))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 113824) cp_0) &&
       (weakLeq cp_0 (toErl 113827))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 119155) cp_0) &&
       (weakLeq cp_0 (toErl 119162))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 917504) cp_0) &&
       (weakLeq cp_0 (toErl 917535))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 917632) cp_0) &&
       (weakLeq cp_0 (toErl 917759))) =
  r0_2
erlps__gc_1__1 [r0_2@(ErlangCons cp_0 r1_1)]
  | ((weakLeq (toErl 918000) cp_0) &&
       (weakLeq cp_0 (toErl 921599))) =
  r0_2
erlps__gc_1__1 [arg_3] = EXC.function_clause unit
erlps__gc_1__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_extend__3 :: ErlangFun
erlps__gc_extend__3 [(ErlangCons cp_0 t_1), t0_2, cp0_3] =
  case ErlangAtom "false" of
    (ErlangAtom "false") -> ErlangCons cp0_3 t0_2
    _trueorzwj_7 ->
      let arg_8 = erlps__cp__1 [t_1]
      in
        erlps__gc_extend2__3
          [arg_8, t_1, ErlangCons cp_0 (ErlangCons cp0_3 ErlangEmptyList)]
erlps__gc_extend__3 [(ErlangEmptyList), _, cp_0] =
  ErlangCons cp_0 ErlangEmptyList
erlps__gc_extend__3 [(ErlangTuple [(ErlangAtom "error"), r_0]),
                     _, cp_1]
  =
  ErlangCons cp_1 r_0
erlps__gc_extend__3 [arg_4, arg_5, arg_6] =
  EXC.function_clause unit
erlps__gc_extend__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_extend2__3 :: ErlangFun
erlps__gc_extend2__3 [(ErlangCons cp_0 t_1), t0_2, acc_3] =
  case ErlangAtom "false" of
    (ErlangAtom "false") ->
      let
        head_5 =
          BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_3]
      in ErlangCons head_5 t0_2
    _trueorzwj_8 ->
      let arg_9 = erlps__cp__1 [t_1]
      in erlps__gc_extend2__3 [arg_9, t_1, ErlangCons cp_0 acc_3]
erlps__gc_extend2__3 [(ErlangEmptyList), _, acc_0] =
  let
    head_1 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0]
  in ErlangCons head_1 ErlangEmptyList
erlps__gc_extend2__3 [(ErlangTuple [(ErlangAtom "error"), r_0]),
                      _, acc_1]
  =
  let
    head_3 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_1]
  in
    BIF.erlang__op_append
      [ErlangCons head_3 ErlangEmptyList,
       ErlangCons r_0 ErlangEmptyList]
erlps__gc_extend2__3 [arg_9, arg_10, arg_11] =
  EXC.function_clause unit
erlps__gc_extend2__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_ext_pict__2 :: ErlangFun
erlps__gc_ext_pict__2 [t_0, acc_1] =
  let arg_2 = erlps__cp__1 [t_0]
  in erlps__gc_ext_pict__3 [arg_2, t_0, acc_1]
erlps__gc_ext_pict__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__gc_ext_pict__2 args =
  EXC.badarity (ErlangFun 2 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_ext_pict__3 :: ErlangFun
erlps__gc_ext_pict__3 [(ErlangCons cp_0 r1_1), t0_2, acc_3] =
  case ErlangAtom "false" of
    (ErlangAtom "zwj") ->
      let arg_5 = erlps__cp__1 [r1_1]
      in erlps__gc_ext_pict_zwj__3 [arg_5, r1_1, ErlangCons cp_0 acc_3]
    (ErlangAtom "true") ->
      erlps__gc_ext_pict__2 [r1_1, ErlangCons cp_0 acc_3]
    (ErlangAtom "false") ->
      case acc_3 of
        (ErlangCons a_16 (ErlangEmptyList)) -> ErlangCons a_16 t0_2
        _ ->
          let
            head_19 =
              BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_3]
          in ErlangCons head_19 t0_2
    something_else -> EXC.case_clause something_else
erlps__gc_ext_pict__3 [(ErlangEmptyList), _t0_0, acc_1] =
  case acc_1 of
    (ErlangCons a_3 (ErlangEmptyList)) ->
      ErlangCons a_3 ErlangEmptyList
    _ ->
      let
        head_6 =
          BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_1]
      in ErlangCons head_6 ErlangEmptyList
erlps__gc_ext_pict__3 [(ErlangTuple [(ErlangAtom "error"), r_0]),
                       t_1, acc_2]
  =
  let lop_3 = erlps__gc_ext_pict__3 [ErlangEmptyList, t_1, acc_2]
  in BIF.erlang__op_append [lop_3, ErlangCons r_0 ErlangEmptyList]
erlps__gc_ext_pict__3 [arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__gc_ext_pict__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__gc_ext_pict_zwj__3 :: ErlangFun
erlps__gc_ext_pict_zwj__3 [(ErlangCons cp_0 r1_1), t0_2, acc_3] =
  let case_4 = erlps__is_ext_pict__1 [cp_0]
  in
    case case_4 of
      (ErlangAtom "true") ->
        erlps__gc_ext_pict__2 [r1_1, ErlangCons cp_0 acc_3]
      (ErlangAtom "false") ->
        case acc_3 of
          (ErlangCons a_11 (ErlangEmptyList)) -> ErlangCons a_11 t0_2
          _ ->
            let
              head_14 =
                BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_3]
            in ErlangCons head_14 t0_2
      something_else -> EXC.case_clause something_else
erlps__gc_ext_pict_zwj__3 [(ErlangEmptyList), _, acc_0] =
  case acc_0 of
    (ErlangCons a_2 (ErlangEmptyList)) ->
      ErlangCons a_2 ErlangEmptyList
    _ ->
      let
        head_5 =
          BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [acc_0]
      in ErlangCons head_5 ErlangEmptyList
erlps__gc_ext_pict_zwj__3 [(ErlangTuple [(ErlangAtom "error"),
                                         r_0]),
                           t_1, acc_2]
  =
  let
    lop_3 = erlps__gc_ext_pict_zwj__3 [ErlangEmptyList, t_1, acc_2]
  in BIF.erlang__op_append [lop_3, ErlangCons r_0 ErlangEmptyList]
erlps__gc_ext_pict_zwj__3 [arg_10, arg_11, arg_12] =
  EXC.function_clause unit
erlps__gc_ext_pict_zwj__3 args =
  EXC.badarity (ErlangFun 3 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__is_ext_pict__1 :: ErlangFun
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 169)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 174)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8252)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8265)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8482)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 8505)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9000)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9096)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9167)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9410)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9654)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 9664)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10004)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10006)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10013)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10017)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10024)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10052)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10055)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10060)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10062)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10071)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10145)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10160)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 10175)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 11088)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 11093)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 12336)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 12349)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 12951)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 12953)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 127279)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 127374)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 127514)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 127535)) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127340) cp_0) &&
       (weakLeq cp_0 (toErl 127345))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9872) cp_0) && (weakLeq cp_0 (toErl 9989))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9642) cp_0) && (weakLeq cp_0 (toErl 9643))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 8986) cp_0) && (weakLeq cp_0 (toErl 8987))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 8596) cp_0) && (weakLeq cp_0 (toErl 8601))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 8617) cp_0) && (weakLeq cp_0 (toErl 8618))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9193) cp_0) && (weakLeq cp_0 (toErl 9203))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9208) cp_0) && (weakLeq cp_0 (toErl 9210))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9735) cp_0) && (weakLeq cp_0 (toErl 9746))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9723) cp_0) && (weakLeq cp_0 (toErl 9726))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9728) cp_0) && (weakLeq cp_0 (toErl 9733))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9748) cp_0) && (weakLeq cp_0 (toErl 9861))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 10548) cp_0) &&
       (weakLeq cp_0 (toErl 10549))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 10067) cp_0) &&
       (weakLeq cp_0 (toErl 10069))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 9992) cp_0) && (weakLeq cp_0 (toErl 10002))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 10035) cp_0) &&
       (weakLeq cp_0 (toErl 10036))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 10083) cp_0) &&
       (weakLeq cp_0 (toErl 10087))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 10133) cp_0) &&
       (weakLeq cp_0 (toErl 10135))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 126976) cp_0) &&
       (weakLeq cp_0 (toErl 127231))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 11013) cp_0) &&
       (weakLeq cp_0 (toErl 11015))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 11035) cp_0) &&
       (weakLeq cp_0 (toErl 11036))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127245) cp_0) &&
       (weakLeq cp_0 (toErl 127247))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 128884) cp_0) &&
       (weakLeq cp_0 (toErl 128895))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127548) cp_0) &&
       (weakLeq cp_0 (toErl 127551))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127405) cp_0) &&
       (weakLeq cp_0 (toErl 127461))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127358) cp_0) &&
       (weakLeq cp_0 (toErl 127359))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127377) cp_0) &&
       (weakLeq cp_0 (toErl 127386))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127489) cp_0) &&
       (weakLeq cp_0 (toErl 127503))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127538) cp_0) &&
       (weakLeq cp_0 (toErl 127546))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 128326) cp_0) &&
       (weakLeq cp_0 (toErl 128591))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 127561) cp_0) &&
       (weakLeq cp_0 (toErl 127994))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 128000) cp_0) &&
       (weakLeq cp_0 (toErl 128317))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 128640) cp_0) &&
       (weakLeq cp_0 (toErl 128767))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129198) cp_0) &&
       (weakLeq cp_0 (toErl 129279))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129096) cp_0) &&
       (weakLeq cp_0 (toErl 129103))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 128981) cp_0) &&
       (weakLeq cp_0 (toErl 129023))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129036) cp_0) &&
       (weakLeq cp_0 (toErl 129039))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129114) cp_0) &&
       (weakLeq cp_0 (toErl 129119))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129160) cp_0) &&
       (weakLeq cp_0 (toErl 129167))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129351) cp_0) &&
       (weakLeq cp_0 (toErl 129791))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129292) cp_0) &&
       (weakLeq cp_0 (toErl 129338))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 129340) cp_0) &&
       (weakLeq cp_0 (toErl 129349))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [cp_0]
  | ((weakLeq (toErl 130048) cp_0) &&
       (weakLeq cp_0 (toErl 131069))) =
  ErlangAtom "true"
erlps__is_ext_pict__1 [_] = ErlangAtom "false"
erlps__is_ext_pict__1 [arg_0] = EXC.function_clause unit
erlps__is_ext_pict__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args

erlps__case_table__1 :: ErlangFun
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 65)) =
  let    tup_el_1 = toErl 65
  in let tup_el_2 = toErl 97
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 66)) =
  let    tup_el_1 = toErl 66
  in let tup_el_2 = toErl 98
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 67)) =
  let    tup_el_1 = toErl 67
  in let tup_el_2 = toErl 99
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 68)) =
  let    tup_el_1 = toErl 68
  in let tup_el_2 = toErl 100
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 69)) =
  let    tup_el_1 = toErl 69
  in let tup_el_2 = toErl 101
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 70)) =
  let    tup_el_1 = toErl 70
  in let tup_el_2 = toErl 102
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 71)) =
  let    tup_el_1 = toErl 71
  in let tup_el_2 = toErl 103
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 72)) =
  let    tup_el_1 = toErl 72
  in let tup_el_2 = toErl 104
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 73)) =
  let    tup_el_1 = toErl 73
  in let tup_el_2 = toErl 105
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 74)) =
  let    tup_el_1 = toErl 74
  in let tup_el_2 = toErl 106
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 75)) =
  let    tup_el_1 = toErl 75
  in let tup_el_2 = toErl 107
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 76)) =
  let    tup_el_1 = toErl 76
  in let tup_el_2 = toErl 108
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 77)) =
  let    tup_el_1 = toErl 77
  in let tup_el_2 = toErl 109
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 78)) =
  let    tup_el_1 = toErl 78
  in let tup_el_2 = toErl 110
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 79)) =
  let    tup_el_1 = toErl 79
  in let tup_el_2 = toErl 111
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 80)) =
  let    tup_el_1 = toErl 80
  in let tup_el_2 = toErl 112
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 81)) =
  let    tup_el_1 = toErl 81
  in let tup_el_2 = toErl 113
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 82)) =
  let    tup_el_1 = toErl 82
  in let tup_el_2 = toErl 114
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 83)) =
  let    tup_el_1 = toErl 83
  in let tup_el_2 = toErl 115
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 84)) =
  let    tup_el_1 = toErl 84
  in let tup_el_2 = toErl 116
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 85)) =
  let    tup_el_1 = toErl 85
  in let tup_el_2 = toErl 117
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 86)) =
  let    tup_el_1 = toErl 86
  in let tup_el_2 = toErl 118
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 87)) =
  let    tup_el_1 = toErl 87
  in let tup_el_2 = toErl 119
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 88)) =
  let    tup_el_1 = toErl 88
  in let tup_el_2 = toErl 120
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 89)) =
  let    tup_el_1 = toErl 89
  in let tup_el_2 = toErl 121
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 90)) =
  let    tup_el_1 = toErl 90
  in let tup_el_2 = toErl 122
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 97)) =
  let    tup_el_1 = toErl 65
  in let tup_el_2 = toErl 97
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 98)) =
  let    tup_el_1 = toErl 66
  in let tup_el_2 = toErl 98
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 99)) =
  let    tup_el_1 = toErl 67
  in let tup_el_2 = toErl 99
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 100)) =
  let    tup_el_1 = toErl 68
  in let tup_el_2 = toErl 100
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 101)) =
  let    tup_el_1 = toErl 69
  in let tup_el_2 = toErl 101
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 102)) =
  let    tup_el_1 = toErl 70
  in let tup_el_2 = toErl 102
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 103)) =
  let    tup_el_1 = toErl 71
  in let tup_el_2 = toErl 103
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 104)) =
  let    tup_el_1 = toErl 72
  in let tup_el_2 = toErl 104
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 105)) =
  let    tup_el_1 = toErl 73
  in let tup_el_2 = toErl 105
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 106)) =
  let    tup_el_1 = toErl 74
  in let tup_el_2 = toErl 106
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 107)) =
  let    tup_el_1 = toErl 75
  in let tup_el_2 = toErl 107
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 108)) =
  let    tup_el_1 = toErl 76
  in let tup_el_2 = toErl 108
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 109)) =
  let    tup_el_1 = toErl 77
  in let tup_el_2 = toErl 109
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 110)) =
  let    tup_el_1 = toErl 78
  in let tup_el_2 = toErl 110
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 111)) =
  let    tup_el_1 = toErl 79
  in let tup_el_2 = toErl 111
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 112)) =
  let    tup_el_1 = toErl 80
  in let tup_el_2 = toErl 112
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 113)) =
  let    tup_el_1 = toErl 81
  in let tup_el_2 = toErl 113
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 114)) =
  let    tup_el_1 = toErl 82
  in let tup_el_2 = toErl 114
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 115)) =
  let    tup_el_1 = toErl 83
  in let tup_el_2 = toErl 115
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 116)) =
  let    tup_el_1 = toErl 84
  in let tup_el_2 = toErl 116
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 117)) =
  let    tup_el_1 = toErl 85
  in let tup_el_2 = toErl 117
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 118)) =
  let    tup_el_1 = toErl 86
  in let tup_el_2 = toErl 118
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 119)) =
  let    tup_el_1 = toErl 87
  in let tup_el_2 = toErl 119
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 120)) =
  let    tup_el_1 = toErl 88
  in let tup_el_2 = toErl 120
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 121)) =
  let    tup_el_1 = toErl 89
  in let tup_el_2 = toErl 121
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 122)) =
  let    tup_el_1 = toErl 90
  in let tup_el_2 = toErl 122
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 181)) =
  let    tup_el_1 = toErl 924
  in let tup_el_2 = toErl 181
  in let tup_el_3 = toErl 924
  in let tup_el_4 = toErl 956
  in ErlangTuple [tup_el_1, tup_el_2, tup_el_3, tup_el_4]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 192)) =
  let    tup_el_1 = toErl 192
  in let tup_el_2 = toErl 224
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 193)) =
  let    tup_el_1 = toErl 193
  in let tup_el_2 = toErl 225
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 194)) =
  let    tup_el_1 = toErl 194
  in let tup_el_2 = toErl 226
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 195)) =
  let    tup_el_1 = toErl 195
  in let tup_el_2 = toErl 227
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 196)) =
  let    tup_el_1 = toErl 196
  in let tup_el_2 = toErl 228
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 197)) =
  let    tup_el_1 = toErl 197
  in let tup_el_2 = toErl 229
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 198)) =
  let    tup_el_1 = toErl 198
  in let tup_el_2 = toErl 230
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 199)) =
  let    tup_el_1 = toErl 199
  in let tup_el_2 = toErl 231
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 200)) =
  let    tup_el_1 = toErl 200
  in let tup_el_2 = toErl 232
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 201)) =
  let    tup_el_1 = toErl 201
  in let tup_el_2 = toErl 233
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 202)) =
  let    tup_el_1 = toErl 202
  in let tup_el_2 = toErl 234
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 203)) =
  let    tup_el_1 = toErl 203
  in let tup_el_2 = toErl 235
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 204)) =
  let    tup_el_1 = toErl 204
  in let tup_el_2 = toErl 236
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 205)) =
  let    tup_el_1 = toErl 205
  in let tup_el_2 = toErl 237
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 206)) =
  let    tup_el_1 = toErl 206
  in let tup_el_2 = toErl 238
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 207)) =
  let    tup_el_1 = toErl 207
  in let tup_el_2 = toErl 239
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 208)) =
  let    tup_el_1 = toErl 208
  in let tup_el_2 = toErl 240
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 209)) =
  let    tup_el_1 = toErl 209
  in let tup_el_2 = toErl 241
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 210)) =
  let    tup_el_1 = toErl 210
  in let tup_el_2 = toErl 242
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 211)) =
  let    tup_el_1 = toErl 211
  in let tup_el_2 = toErl 243
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 212)) =
  let    tup_el_1 = toErl 212
  in let tup_el_2 = toErl 244
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 213)) =
  let    tup_el_1 = toErl 213
  in let tup_el_2 = toErl 245
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 214)) =
  let    tup_el_1 = toErl 214
  in let tup_el_2 = toErl 246
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 216)) =
  let    tup_el_1 = toErl 216
  in let tup_el_2 = toErl 248
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 217)) =
  let    tup_el_1 = toErl 217
  in let tup_el_2 = toErl 249
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 218)) =
  let    tup_el_1 = toErl 218
  in let tup_el_2 = toErl 250
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 219)) =
  let    tup_el_1 = toErl 219
  in let tup_el_2 = toErl 251
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 220)) =
  let    tup_el_1 = toErl 220
  in let tup_el_2 = toErl 252
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 221)) =
  let    tup_el_1 = toErl 221
  in let tup_el_2 = toErl 253
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 222)) =
  let    tup_el_1 = toErl 222
  in let tup_el_2 = toErl 254
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 223)) =
  let    head_2 = toErl 83
  in let head_4 = toErl 83
  in let tup_el_6 = toErl 223
  in let head_8 = toErl 83
  in let head_10 = toErl 115
  in let head_13 = toErl 115
  in let head_15 = toErl 115
  in
    ErlangTuple
      [ErlangCons head_2 (ErlangCons head_4 ErlangEmptyList), tup_el_6,
       ErlangCons head_8 (ErlangCons head_10 ErlangEmptyList),
       ErlangCons head_13 (ErlangCons head_15 ErlangEmptyList)]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 224)) =
  let    tup_el_1 = toErl 192
  in let tup_el_2 = toErl 224
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 225)) =
  let    tup_el_1 = toErl 193
  in let tup_el_2 = toErl 225
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 226)) =
  let    tup_el_1 = toErl 194
  in let tup_el_2 = toErl 226
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 227)) =
  let    tup_el_1 = toErl 195
  in let tup_el_2 = toErl 227
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 228)) =
  let    tup_el_1 = toErl 196
  in let tup_el_2 = toErl 228
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 229)) =
  let    tup_el_1 = toErl 197
  in let tup_el_2 = toErl 229
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 230)) =
  let    tup_el_1 = toErl 198
  in let tup_el_2 = toErl 230
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 231)) =
  let    tup_el_1 = toErl 199
  in let tup_el_2 = toErl 231
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 232)) =
  let    tup_el_1 = toErl 200
  in let tup_el_2 = toErl 232
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 233)) =
  let    tup_el_1 = toErl 201
  in let tup_el_2 = toErl 233
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 234)) =
  let    tup_el_1 = toErl 202
  in let tup_el_2 = toErl 234
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 235)) =
  let    tup_el_1 = toErl 203
  in let tup_el_2 = toErl 235
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 236)) =
  let    tup_el_1 = toErl 204
  in let tup_el_2 = toErl 236
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 237)) =
  let    tup_el_1 = toErl 205
  in let tup_el_2 = toErl 237
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 238)) =
  let    tup_el_1 = toErl 206
  in let tup_el_2 = toErl 238
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 239)) =
  let    tup_el_1 = toErl 207
  in let tup_el_2 = toErl 239
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 240)) =
  let    tup_el_1 = toErl 208
  in let tup_el_2 = toErl 240
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 241)) =
  let    tup_el_1 = toErl 209
  in let tup_el_2 = toErl 241
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 242)) =
  let    tup_el_1 = toErl 210
  in let tup_el_2 = toErl 242
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 243)) =
  let    tup_el_1 = toErl 211
  in let tup_el_2 = toErl 243
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 244)) =
  let    tup_el_1 = toErl 212
  in let tup_el_2 = toErl 244
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 245)) =
  let    tup_el_1 = toErl 213
  in let tup_el_2 = toErl 245
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 246)) =
  let    tup_el_1 = toErl 214
  in let tup_el_2 = toErl 246
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 248)) =
  let    tup_el_1 = toErl 216
  in let tup_el_2 = toErl 248
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 249)) =
  let    tup_el_1 = toErl 217
  in let tup_el_2 = toErl 249
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 250)) =
  let    tup_el_1 = toErl 218
  in let tup_el_2 = toErl 250
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 251)) =
  let    tup_el_1 = toErl 219
  in let tup_el_2 = toErl 251
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 252)) =
  let    tup_el_1 = toErl 220
  in let tup_el_2 = toErl 252
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 253)) =
  let    tup_el_1 = toErl 221
  in let tup_el_2 = toErl 253
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 254)) =
  let    tup_el_1 = toErl 222
  in let tup_el_2 = toErl 254
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [(ErlangInt num_0)]
  | ((ErlangInt num_0) == (toErl 255)) =
  let    tup_el_1 = toErl 376
  in let tup_el_2 = toErl 255
  in ErlangTuple [tup_el_1, tup_el_2]
erlps__case_table__1 [arg_3] = EXC.function_clause unit
erlps__case_table__1 args =
  EXC.badarity (ErlangFun 1 (\ _ -> ErlangAtom "purs_tco_sucks"))
    args