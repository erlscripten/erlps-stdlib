module Rand(erlps__seed_s__1, erlps__seed_s__2, erlps__seed__1,
            erlps__seed__2, erlps__export_seed__0, erlps__export_seed_s__1,
            erlps__uniform__0, erlps__uniform__1, erlps__uniform_s__1,
            erlps__uniform_s__2, erlps__uniform_real__0,
            erlps__uniform_real_s__1, erlps__jump__0, erlps__jump__1,
            erlps__normal__0, erlps__normal__2, erlps__normal_s__1,
            erlps__normal_s__3, erlps__exro928_jump_2pow512__1,
            erlps__exro928_jump_2pow20__1, erlps__exro928_seed__1,
            erlps__exro928_next__1, erlps__exro928_next_state__1,
            erlps__format_jumpconst58__1, erlps__seed58__2,
            erlps__make_float__3, erlps__float2str__1, erlps__bc64__1) where
{-
This file has been autogenerated
DO NOT EDIT - Your changes WILL be overwritten
Use this code at your own risk - the authors are just a mischievous raccoon and a haskell devote
Erlscripten v0.2.0
-}

import Prelude
import Data.BigInt as DBI
import Data.Array as DA
import Data.Maybe as DM
import Data.Map as Map
import Data.Tuple as DT
import Erlang.Builtins as BIF
import Erlang.Binary as BIN
import Erlang.Helpers
import Erlang.Exception as EXC
import Erlang.Type
import Partial.Unsafe (unsafePartial)


erlps__uniform_range__4 :: ErlangFun
erlps__uniform_range__4 [range_0, alg_4@(ErlangMap map_1), r_5,
                         v_6]
  | (DM.Just bits_3) <- (Map.lookup (ErlangAtom "bits") map_1)
  , (DM.Just next_2) <- (Map.lookup (ErlangAtom "next") map_1) =
  let    arg_9 = toErl 0
  in let
    weaklowbits_10 =
      BIF.do_remote_fun_call "Maps" "erlps__get__3"
        [ErlangAtom "weak_low_bits", alg_4, arg_9]
  in let shift_13 = BIF.erlang__op_minus [bits_3, weaklowbits_10]
  in let lop_16 = toErl 1
  in let lop_15 = BIF.erlang__bsl__2 [lop_16, weaklowbits_10]
  in let rop_18 = toErl 1
  in let op_arg_14 = BIF.erlang__op_minus [lop_15, rop_18]
  in let shiftmask_19 = BIF.erlang__bnot__1 [op_arg_14]
  in let rop_21 = toErl 1
  in let rangeminus1_22 = BIF.erlang__op_minus [range_0, rop_21]
  in
    case ErlangAtom "true" of
      _ | (ErlangAtom "true") ==
            (falsifyErrors
               (\ _ ->
                  let    lop_23 = BIF.erlang__band__2 [range_0, rangeminus1_22]
                  in let rop_26 = toErl 0
                  in BIF.erlang__op_exactEq [lop_23, rop_26])) ->
        let    arg_27 = BIF.erlang__bsr__2 [range_0, bits_3]
        in let
          matchExpr_38 =
            erlps__uniform_range__7
              [arg_27, next_2, r_5, v_6, shiftmask_19, shift_13, bits_3]
        in
          case matchExpr_38 of
            (ErlangTuple [v1_36, r1_37, _]) ->
              let    lop_40 = BIF.erlang__band__2 [v1_36, rangeminus1_22]
              in let rop_43 = toErl 1
              in let tup_el_39 = BIF.erlang__op_plus [lop_40, rop_43]
              in let tup_el_44 = ErlangTuple [alg_4, r1_37]
              in ErlangTuple [tup_el_39, tup_el_44]
            _ -> EXC.badmatch matchExpr_38
      _ ->
        let    rop_51 = toErl 2
        in let rop_49 = BIF.erlang__op_minus [bits_3, rop_51]
        in let arg_47 = BIF.erlang__bsr__2 [range_0, rop_49]
        in let
          matchExpr_61 =
            erlps__uniform_range__7
              [arg_47, next_2, r_5, v_6, shiftmask_19, shift_13, bits_3]
        in
          case matchExpr_61 of
            (ErlangTuple [v1_58, r1_59, b_60]) ->
              let i_64 = BIF.erlang__op_rem_strict [v1_58, range_0]
              in
                case ErlangAtom "true" of
                  _ | (ErlangAtom "true") ==
                        (falsifyErrors
                           (\ _ ->
                              let    lop_65 = BIF.erlang__op_minus [v1_58, i_64]
                              in let lop_70 = toErl 1
                              in let lop_69 = BIF.erlang__bsl__2 [lop_70, b_60]
                              in let
                                rop_68 = BIF.erlang__op_minus [lop_69, range_0]
                              in BIF.erlang__op_lesserEq [lop_65, rop_68])) ->
                    let    rop_75 = toErl 1
                    in let tup_el_73 = BIF.erlang__op_plus [i_64, rop_75]
                    in let tup_el_76 = ErlangTuple [alg_4, r1_59]
                    in ErlangTuple [tup_el_73, tup_el_76]
                  _ ->
                    let
                      matchExpr_83 =
                        BIF.erlang__apply__2
                          [next_2, ErlangCons r1_59 ErlangEmptyList]
                    in
                      case matchExpr_83 of
                        (ErlangTuple [v2_81, r2_82]) ->
                          erlps__uniform_range__4 [range_0, alg_4, r2_82, v2_81]
                        _ -> EXC.badmatch matchExpr_83
            _ -> EXC.badmatch matchExpr_61
erlps__uniform_range__4 [arg_88, arg_89, arg_90, arg_91] =
  EXC.function_clause unit
erlps__uniform_range__4 args =
  EXC.badarity (ErlangFun 4 erlps__uniform_range__4) args

erlps__uniform_range__7 :: ErlangFun
erlps__uniform_range__7 [range_0, next_1, r_2, v_3, shiftmask_4,
                         shift_5, b_6]
  =
  case ErlangAtom "true" of
    _ | weakLeq range_0 (toErl 1) -> ErlangTuple [v_3, r_2, b_6]
    _ ->
      let
        matchExpr_14 =
          BIF.erlang__apply__2 [next_1, ErlangCons r_2 ErlangEmptyList]
      in
        case matchExpr_14 of
          (ErlangTuple [v1_12, r1_13]) ->
            let    arg_15 = BIF.erlang__bsr__2 [range_0, shift_5]
            in let lop_22 = BIF.erlang__band__2 [v_3, shiftmask_4]
            in let lop_21 = BIF.erlang__bsl__2 [lop_22, shift_5]
            in let arg_20 = BIF.erlang__bor__2 [lop_21, v1_12]
            in let arg_29 = BIF.erlang__op_plus [b_6, shift_5]
            in
              erlps__uniform_range__7
                [arg_15, next_1, r1_13, arg_20, shiftmask_4, shift_5, arg_29]
          _ -> EXC.badmatch matchExpr_14
erlps__uniform_range__7 [arg_32, arg_33, arg_34, arg_35, arg_36,
                         arg_37, arg_38]
  =
  EXC.function_clause unit
erlps__uniform_range__7 args =
  EXC.badarity (ErlangFun 7 erlps__uniform_range__7) args

erlps__export_seed__0 :: ErlangFun
erlps__export_seed__0 [] =
  let case_0 = BIF.erlang__get__1 [ErlangAtom "rand_seed"]
  in
    case case_0 of
      (ErlangTuple [(ErlangMap map_2), seed_4]) | (DM.Just alg_3) <-
                                                    (Map.lookup
                                                       (ErlangAtom "type")
                                                       map_2) ->
        ErlangTuple [alg_3, seed_4]
      _ -> ErlangAtom "undefined"
erlps__export_seed__0 args =
  EXC.badarity (ErlangFun 0 erlps__export_seed__0) args

erlps__export_seed_s__1 :: ErlangFun
erlps__export_seed_s__1 [(ErlangTuple [(ErlangMap map_0),
                                       algstate_2])]
  | (DM.Just alg_1) <- (Map.lookup (ErlangAtom "type") map_0) =
  ErlangTuple [alg_1, algstate_2]
erlps__export_seed_s__1 [arg_5] = EXC.function_clause unit
erlps__export_seed_s__1 args =
  EXC.badarity (ErlangFun 1 erlps__export_seed_s__1) args

erlps__seed__1 :: ErlangFun
erlps__seed__1 [alg_0] =
  let arg_1 = erlps__seed_s__1 [alg_0]
  in erlps__seed_put__1 [arg_1]
erlps__seed__1 [arg_3] = EXC.function_clause unit
erlps__seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__seed__1) args

erlps__seed_s__1 :: ErlangFun
erlps__seed_s__1 [state_2@(ErlangTuple [alghandler_0,
                                        _algstate_1])]
  | isEMap alghandler_0 =
  state_2
erlps__seed_s__1 [(ErlangTuple [alg_0, algstate_1])]
  | isEAtom alg_0 =
  let matchExpr_5 = erlps__mk_alg__1 [alg_0]
  in
    case matchExpr_5 of
      (ErlangTuple [alghandler_3, _seedfun_4]) ->
        ErlangTuple [alghandler_3, algstate_1]
      _ -> EXC.badmatch matchExpr_5
erlps__seed_s__1 [alg_0] =
  let    tup_el_6 = BIF.erlang__node__0 []
  in let tup_el_7 = BIF.erlang__self__0 []
  in let head_5 = ErlangTuple [tup_el_6, tup_el_7]
  in let
    tup_el_3 =
      BIF.erlang__phash2__1 [ErlangCons head_5 ErlangEmptyList]
  in let tup_el_9 = BIF.erlang__system_time__0 []
  in let tup_el_10 = BIF.erlang__unique_integer__0 []
  in let arg_2 = ErlangTuple [tup_el_3, tup_el_9, tup_el_10]
  in erlps__seed_s__2 [alg_0, arg_2]
erlps__seed_s__1 [arg_11] = EXC.function_clause unit
erlps__seed_s__1 args =
  EXC.badarity (ErlangFun 1 erlps__seed_s__1) args

erlps__seed__2 :: ErlangFun
erlps__seed__2 [alg_0, seed_1] =
  let arg_2 = erlps__seed_s__2 [alg_0, seed_1]
  in erlps__seed_put__1 [arg_2]
erlps__seed__2 [arg_5, arg_6] = EXC.function_clause unit
erlps__seed__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed__2) args

erlps__seed_s__2 :: ErlangFun
erlps__seed_s__2 [alg_0, seed_1] =
  let matchExpr_5 = erlps__mk_alg__1 [alg_0]
  in
    case matchExpr_5 of
      (ErlangTuple [alghandler_3, seedfun_4]) ->
        let
          algstate_8 =
            BIF.erlang__apply__2
              [seedfun_4, ErlangCons seed_1 ErlangEmptyList]
        in ErlangTuple [alghandler_3, algstate_8]
      _ -> EXC.badmatch matchExpr_5
erlps__seed_s__2 [arg_11, arg_12] = EXC.function_clause unit
erlps__seed_s__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed_s__2) args

erlps__uniform__0 :: ErlangFun
erlps__uniform__0 [] =
  let    arg_0 = erlps__seed_get__0 []
  in let matchExpr_3 = erlps__uniform_s__1 [arg_0]
  in
    case matchExpr_3 of
      (ErlangTuple [x_1, state_2]) ->
        let matchExpr_5 = erlps__seed_put__1 [state_2]
        in x_1
      _ -> EXC.badmatch matchExpr_3
erlps__uniform__0 args =
  EXC.badarity (ErlangFun 0 erlps__uniform__0) args

erlps__uniform__1 :: ErlangFun
erlps__uniform__1 [n_0] =
  let    arg_2 = erlps__seed_get__0 []
  in let matchExpr_5 = erlps__uniform_s__2 [n_0, arg_2]
  in
    case matchExpr_5 of
      (ErlangTuple [x_3, state_4]) ->
        let matchExpr_7 = erlps__seed_put__1 [state_4]
        in x_3
      _ -> EXC.badmatch matchExpr_5
erlps__uniform__1 [arg_8] = EXC.function_clause unit
erlps__uniform__1 args =
  EXC.badarity (ErlangFun 1 erlps__uniform__1) args

erlps__uniform_s__1 :: ErlangFun
erlps__uniform_s__1 [state_2@(ErlangTuple [(ErlangMap map_0),
                                           _])]
  | (DM.Just uniform_1) <-
      (Map.lookup (ErlangAtom "uniform") map_0) =
  BIF.erlang__apply__2
    [uniform_1, ErlangCons state_2 ErlangEmptyList]
erlps__uniform_s__1 [(ErlangTuple [alg_3@(ErlangMap map_0),
                                   r0_4])]
  | (DM.Just next_2) <- (Map.lookup (ErlangAtom "next") map_0)
  , (DM.Just bits_1) <- (Map.lookup (ErlangAtom "bits") map_0) =
  let
    matchExpr_9 =
      BIF.erlang__apply__2 [next_2, ErlangCons r0_4 ErlangEmptyList]
  in
    case matchExpr_9 of
      (ErlangTuple [v_7, r1_8]) ->
        let    rop_15 = toErl 53
        in let rop_13 = BIF.erlang__op_minus [bits_1, rop_15]
        in let lop_11 = BIF.erlang__bsr__2 [v_7, rop_13]
        in let rop_16 = ErlangFloat 1.11022302462515654042e-16
        in let tup_el_10 = BIF.erlang__op_mult [lop_11, rop_16]
        in let tup_el_17 = ErlangTuple [alg_3, r1_8]
        in ErlangTuple [tup_el_10, tup_el_17]
      _ -> EXC.badmatch matchExpr_9
erlps__uniform_s__1 [(ErlangTuple [alg_3@(ErlangMap map_0),
                                   r0_4])]
  | (DM.Just next_2) <- (Map.lookup (ErlangAtom "next") map_0)
  , (DM.Just max_1) <- (Map.lookup (ErlangAtom "max") map_0) =
  let
    matchExpr_9 =
      BIF.erlang__apply__2 [next_2, ErlangCons r0_4 ErlangEmptyList]
  in
    case matchExpr_9 of
      (ErlangTuple [v_7, r1_8]) ->
        let    rop_14 = toErl 1
        in let rop_12 = BIF.erlang__op_plus [max_1, rop_14]
        in let tup_el_10 = BIF.erlang__op_div [v_7, rop_12]
        in let tup_el_15 = ErlangTuple [alg_3, r1_8]
        in ErlangTuple [tup_el_10, tup_el_15]
      _ -> EXC.badmatch matchExpr_9
erlps__uniform_s__1 [arg_18] = EXC.function_clause unit
erlps__uniform_s__1 args =
  EXC.badarity (ErlangFun 1 erlps__uniform_s__1) args

erlps__uniform_s__2 :: ErlangFun
erlps__uniform_s__2 [n_0,
                     state_3@(ErlangTuple [(ErlangMap map_1), _])]
  | (DM.Just uniformn_2) <-
      (Map.lookup (ErlangAtom "uniform_n") map_1)
  , (isEInt n_0) && (weakLeq (toErl 1) n_0) =
  BIF.erlang__apply__2
    [uniformn_2, ErlangCons n_0 (ErlangCons state_3 ErlangEmptyList)]
erlps__uniform_s__2 [n_0,
                     (ErlangTuple [alg_4@(ErlangMap map_1), r0_5])]
  | (DM.Just next_3) <- (Map.lookup (ErlangAtom "next") map_1)
  , (DM.Just bits_2) <- (Map.lookup (ErlangAtom "bits") map_1)
  , (isEInt n_0) && (weakLeq (toErl 1) n_0) =
  let
    matchExpr_10 =
      BIF.erlang__apply__2 [next_3, ErlangCons r0_5 ErlangEmptyList]
  in
    case matchExpr_10 of
      (ErlangTuple [v_8, r1_9]) ->
        let    lop_12 = toErl 1
        in let lop_11 = BIF.erlang__bsl__2 [lop_12, bits_2]
        in let maxminusn_15 = BIF.erlang__op_minus [lop_11, n_0]
        in
          case ErlangAtom "true" of
            _ | weakLeq (toErl 0) maxminusn_15 ->
              case ErlangAtom "true" of
                _ | weakLt v_8 n_0 ->
                  let    rop_18 = toErl 1
                  in let tup_el_16 = BIF.erlang__op_plus [v_8, rop_18]
                  in let tup_el_19 = ErlangTuple [alg_4, r1_9]
                  in ErlangTuple [tup_el_16, tup_el_19]
                _ ->
                  let i_24 = BIF.erlang__op_rem_strict [v_8, n_0]
                  in
                    case ErlangAtom "true" of
                      _ | (ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let lop_25 = BIF.erlang__op_minus [v_8, i_24]
                                  in
                                    BIF.erlang__op_lesserEq
                                      [lop_25, maxminusn_15])) ->
                        let    rop_31 = toErl 1
                        in let tup_el_29 = BIF.erlang__op_plus [i_24, rop_31]
                        in let tup_el_32 = ErlangTuple [alg_4, r1_9]
                        in ErlangTuple [tup_el_29, tup_el_32]
                      _ ->
                        let arg_36 = ErlangTuple [alg_4, r1_9]
                        in erlps__uniform_s__2 [n_0, arg_36]
            _ -> erlps__uniform_range__4 [n_0, alg_4, r1_9, v_8]
      _ -> EXC.badmatch matchExpr_10
erlps__uniform_s__2 [n_0,
                     (ErlangTuple [alg_4@(ErlangMap map_1), r0_5])]
  | (DM.Just next_3) <- (Map.lookup (ErlangAtom "next") map_1)
  , (DM.Just max_2) <- (Map.lookup (ErlangAtom "max") map_1)
  , (isEInt n_0) && (weakLeq (toErl 1) n_0) =
  let
    matchExpr_10 =
      BIF.erlang__apply__2 [next_3, ErlangCons r0_5 ErlangEmptyList]
  in
    case matchExpr_10 of
      (ErlangTuple [v_8, r1_9]) ->
        case ErlangAtom "true" of
          _ | weakLeq n_0 max_2 ->
            let    lop_12 = BIF.erlang__op_rem_strict [v_8, n_0]
            in let rop_15 = toErl 1
            in let tup_el_11 = BIF.erlang__op_plus [lop_12, rop_15]
            in let tup_el_16 = ErlangTuple [alg_4, r1_9]
            in ErlangTuple [tup_el_11, tup_el_16]
          _ ->
            let    rop_22 = toErl 1
            in let rop_20 = BIF.erlang__op_plus [max_2, rop_22]
            in let f_23 = BIF.erlang__op_div [v_8, rop_20]
            in let arg_26 = BIF.erlang__op_mult [f_23, n_0]
            in let lop_25 = BIF.erlang__trunc__1 [arg_26]
            in let rop_29 = toErl 1
            in let tup_el_24 = BIF.erlang__op_plus [lop_25, rop_29]
            in let tup_el_30 = ErlangTuple [alg_4, r1_9]
            in ErlangTuple [tup_el_24, tup_el_30]
      _ -> EXC.badmatch matchExpr_10
erlps__uniform_s__2 [arg_33, arg_34] = EXC.function_clause unit
erlps__uniform_s__2 args =
  EXC.badarity (ErlangFun 2 erlps__uniform_s__2) args

erlps__uniform_real__0 :: ErlangFun
erlps__uniform_real__0 [] =
  let    arg_0 = erlps__seed_get__0 []
  in let matchExpr_3 = erlps__uniform_real_s__1 [arg_0]
  in
    case matchExpr_3 of
      (ErlangTuple [x_1, seed_2]) ->
        let matchExpr_5 = erlps__seed_put__1 [seed_2]
        in x_1
      _ -> EXC.badmatch matchExpr_3
erlps__uniform_real__0 args =
  EXC.badarity (ErlangFun 0 erlps__uniform_real__0) args

erlps__uniform_real_s__1 :: ErlangFun
erlps__uniform_real_s__1 [(ErlangTuple [alg_3@(ErlangMap map_0),
                                        r0_4])]
  | (DM.Just next_2) <- (Map.lookup (ErlangAtom "next") map_0)
  , (DM.Just bits_1) <- (Map.lookup (ErlangAtom "bits") map_0) =
  let
    matchExpr_9 =
      BIF.erlang__apply__2 [next_2, ErlangCons r0_4 ErlangEmptyList]
  in
    case matchExpr_9 of
      (ErlangTuple [v1_7, r1_8]) ->
        let    rop_13 = toErl 56
        in let rop_11 = BIF.erlang__op_minus [bits_1, rop_13]
        in let m1_14 = BIF.erlang__bsr__2 [v1_7, rop_11]
        in
          case ErlangAtom "true" of
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_16 = toErl 1
                        in let rop_17 = toErl 55
                        in let lop_15 = BIF.erlang__bsl__2 [lop_16, rop_17]
                        in BIF.erlang__op_lesserEq [lop_15, m1_14])) ->
              let    rop_22 = toErl 3
              in let lop_20 = BIF.erlang__bsr__2 [m1_14, rop_22]
              in let arg_24 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_26 = toErl 53
              in let arg_25 = BIF.erlang__op_neg [op_arg_26]
              in let rop_23 = BIF.math__pow__2 [arg_24, arg_25]
              in let tup_el_19 = BIF.erlang__op_mult [lop_20, rop_23]
              in let tup_el_27 = ErlangTuple [alg_3, r1_8]
              in ErlangTuple [tup_el_19, tup_el_27]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_31 = toErl 1
                        in let rop_32 = toErl 54
                        in let lop_30 = BIF.erlang__bsl__2 [lop_31, rop_32]
                        in BIF.erlang__op_lesserEq [lop_30, m1_14])) ->
              let    rop_37 = toErl 2
              in let lop_35 = BIF.erlang__bsr__2 [m1_14, rop_37]
              in let arg_39 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_41 = toErl 54
              in let arg_40 = BIF.erlang__op_neg [op_arg_41]
              in let rop_38 = BIF.math__pow__2 [arg_39, arg_40]
              in let tup_el_34 = BIF.erlang__op_mult [lop_35, rop_38]
              in let tup_el_42 = ErlangTuple [alg_3, r1_8]
              in ErlangTuple [tup_el_34, tup_el_42]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_46 = toErl 1
                        in let rop_47 = toErl 53
                        in let lop_45 = BIF.erlang__bsl__2 [lop_46, rop_47]
                        in BIF.erlang__op_lesserEq [lop_45, m1_14])) ->
              let    rop_52 = toErl 1
              in let lop_50 = BIF.erlang__bsr__2 [m1_14, rop_52]
              in let arg_54 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_56 = toErl 55
              in let arg_55 = BIF.erlang__op_neg [op_arg_56]
              in let rop_53 = BIF.math__pow__2 [arg_54, arg_55]
              in let tup_el_49 = BIF.erlang__op_mult [lop_50, rop_53]
              in let tup_el_57 = ErlangTuple [alg_3, r1_8]
              in ErlangTuple [tup_el_49, tup_el_57]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_61 = toErl 1
                        in let rop_62 = toErl 52
                        in let lop_60 = BIF.erlang__bsl__2 [lop_61, rop_62]
                        in BIF.erlang__op_lesserEq [lop_60, m1_14])) ->
              let    arg_67 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_69 = toErl 56
              in let arg_68 = BIF.erlang__op_neg [op_arg_69]
              in let rop_66 = BIF.math__pow__2 [arg_67, arg_68]
              in let tup_el_64 = BIF.erlang__op_mult [m1_14, rop_66]
              in let tup_el_70 = ErlangTuple [alg_3, r1_8]
              in ErlangTuple [tup_el_64, tup_el_70]
            _ ->
              let
                matchExpr_77 =
                  BIF.erlang__apply__2 [next_2, ErlangCons r1_8 ErlangEmptyList]
              in
                case matchExpr_77 of
                  (ErlangTuple [v2_75, r2_76]) ->
                    let    op_arg_82 = toErl 56
                    in let arg_81 = BIF.erlang__op_neg [op_arg_82]
                    in
                      erlps__uniform_real_s__7
                        [alg_3, next_2, m1_14, arg_81, r2_76, v2_75, bits_1]
                  _ -> EXC.badmatch matchExpr_77
      _ -> EXC.badmatch matchExpr_9
erlps__uniform_real_s__1 [(ErlangTuple [alg_2@(ErlangMap map_0),
                                        r0_3])]
  | (DM.Just next_1) <- (Map.lookup (ErlangAtom "next") map_0)
  , (DM.Just _) <- (Map.lookup (ErlangAtom "max") map_0) =
  let
    matchExpr_8 =
      BIF.erlang__apply__2 [next_1, ErlangCons r0_3 ErlangEmptyList]
  in
    case matchExpr_8 of
      (ErlangTuple [v1_6, r1_7]) ->
        let    lop_12 = toErl 1
        in let rop_13 = toErl 56
        in let lop_11 = BIF.erlang__bsl__2 [lop_12, rop_13]
        in let rop_14 = toErl 1
        in let rop_10 = BIF.erlang__op_minus [lop_11, rop_14]
        in let m1_15 = BIF.erlang__band__2 [v1_6, rop_10]
        in
          case ErlangAtom "true" of
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_17 = toErl 1
                        in let rop_18 = toErl 55
                        in let lop_16 = BIF.erlang__bsl__2 [lop_17, rop_18]
                        in BIF.erlang__op_lesserEq [lop_16, m1_15])) ->
              let    rop_23 = toErl 3
              in let lop_21 = BIF.erlang__bsr__2 [m1_15, rop_23]
              in let arg_25 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_27 = toErl 53
              in let arg_26 = BIF.erlang__op_neg [op_arg_27]
              in let rop_24 = BIF.math__pow__2 [arg_25, arg_26]
              in let tup_el_20 = BIF.erlang__op_mult [lop_21, rop_24]
              in let tup_el_28 = ErlangTuple [alg_2, r1_7]
              in ErlangTuple [tup_el_20, tup_el_28]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_32 = toErl 1
                        in let rop_33 = toErl 54
                        in let lop_31 = BIF.erlang__bsl__2 [lop_32, rop_33]
                        in BIF.erlang__op_lesserEq [lop_31, m1_15])) ->
              let    rop_38 = toErl 2
              in let lop_36 = BIF.erlang__bsr__2 [m1_15, rop_38]
              in let arg_40 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_42 = toErl 54
              in let arg_41 = BIF.erlang__op_neg [op_arg_42]
              in let rop_39 = BIF.math__pow__2 [arg_40, arg_41]
              in let tup_el_35 = BIF.erlang__op_mult [lop_36, rop_39]
              in let tup_el_43 = ErlangTuple [alg_2, r1_7]
              in ErlangTuple [tup_el_35, tup_el_43]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_47 = toErl 1
                        in let rop_48 = toErl 53
                        in let lop_46 = BIF.erlang__bsl__2 [lop_47, rop_48]
                        in BIF.erlang__op_lesserEq [lop_46, m1_15])) ->
              let    rop_53 = toErl 1
              in let lop_51 = BIF.erlang__bsr__2 [m1_15, rop_53]
              in let arg_55 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_57 = toErl 55
              in let arg_56 = BIF.erlang__op_neg [op_arg_57]
              in let rop_54 = BIF.math__pow__2 [arg_55, arg_56]
              in let tup_el_50 = BIF.erlang__op_mult [lop_51, rop_54]
              in let tup_el_58 = ErlangTuple [alg_2, r1_7]
              in ErlangTuple [tup_el_50, tup_el_58]
            _ | (ErlangAtom "true") ==
                  (falsifyErrors
                     (\ _ ->
                        let    lop_62 = toErl 1
                        in let rop_63 = toErl 52
                        in let lop_61 = BIF.erlang__bsl__2 [lop_62, rop_63]
                        in BIF.erlang__op_lesserEq [lop_61, m1_15])) ->
              let    arg_68 = ErlangFloat 2.00000000000000000000e+0
              in let op_arg_70 = toErl 56
              in let arg_69 = BIF.erlang__op_neg [op_arg_70]
              in let rop_67 = BIF.math__pow__2 [arg_68, arg_69]
              in let tup_el_65 = BIF.erlang__op_mult [m1_15, rop_67]
              in let tup_el_71 = ErlangTuple [alg_2, r1_7]
              in ErlangTuple [tup_el_65, tup_el_71]
            _ ->
              let
                matchExpr_78 =
                  BIF.erlang__apply__2 [next_1, ErlangCons r1_7 ErlangEmptyList]
              in
                case matchExpr_78 of
                  (ErlangTuple [v2_76, r2_77]) ->
                    let    op_arg_83 = toErl 56
                    in let arg_82 = BIF.erlang__op_neg [op_arg_83]
                    in let arg_86 = toErl 56
                    in
                      erlps__uniform_real_s__7
                        [alg_2, next_1, m1_15, arg_82, r2_77, v2_76, arg_86]
                  _ -> EXC.badmatch matchExpr_78
      _ -> EXC.badmatch matchExpr_8
erlps__uniform_real_s__1 [arg_87] = EXC.function_clause unit
erlps__uniform_real_s__1 args =
  EXC.badarity (ErlangFun 1 erlps__uniform_real_s__1) args

erlps__uniform_real_s__7 :: ErlangFun
erlps__uniform_real_s__7 [alg_0, _next_1, m0_2,
                          (ErlangInt num_3), r1_4, v1_5, bits_6]
  | (ErlangInt num_3) == (toErl (-1064)) =
  let    lop_7 = toErl 53
  in let lop_11 = toErl 1
  in let lop_13 = toErl 52
  in let rop_14 = toErl 1
  in let rop_12 = BIF.erlang__op_minus [lop_13, rop_14]
  in let arg_10 = BIF.erlang__bsl__2 [lop_11, rop_12]
  in let arg_15 = toErl 52
  in let rop_8 = erlps__bc__3 [m0_2, arg_10, arg_15]
  in let b0_16 = BIF.erlang__op_minus [lop_7, rop_8]
  in let lop_19 = BIF.erlang__bsl__2 [m0_2, b0_16]
  in let rop_24 = BIF.erlang__op_minus [bits_6, b0_16]
  in let rop_22 = BIF.erlang__bsr__2 [v1_5, rop_24]
  in let lop_18 = BIF.erlang__bor__2 [lop_19, rop_22]
  in let arg_28 = ErlangFloat 2.00000000000000000000e+0
  in let op_arg_31 = toErl 1064
  in let lop_30 = BIF.erlang__op_neg [op_arg_31]
  in let arg_29 = BIF.erlang__op_minus [lop_30, b0_16]
  in let rop_27 = BIF.math__pow__2 [arg_28, arg_29]
  in let tup_el_17 = BIF.erlang__op_mult [lop_18, rop_27]
  in let tup_el_33 = ErlangTuple [alg_0, r1_4]
  in ErlangTuple [tup_el_17, tup_el_33]
erlps__uniform_real_s__7 [alg_0, next_1, m0_2, bitno_3, r1_4,
                          v1_5, bits_6]
  =
  case ErlangAtom "true" of
    _ | (ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let    lop_8 = toErl 1
                in let rop_9 = toErl 51
                in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
                in BIF.erlang__op_lesserEq [lop_7, m0_2])) ->
      let    rop_15 = toErl 1
      in let lop_13 = BIF.erlang__bsl__2 [m0_2, rop_15]
      in let rop_20 = toErl 1
      in let rop_18 = BIF.erlang__op_minus [bits_6, rop_20]
      in let rop_16 = BIF.erlang__bsr__2 [v1_5, rop_18]
      in let lop_12 = BIF.erlang__bor__2 [lop_13, rop_16]
      in let arg_22 = ErlangFloat 2.00000000000000000000e+0
      in let rop_25 = toErl 1
      in let arg_23 = BIF.erlang__op_minus [bitno_3, rop_25]
      in let rop_21 = BIF.math__pow__2 [arg_22, arg_23]
      in let tup_el_11 = BIF.erlang__op_mult [lop_12, rop_21]
      in let tup_el_26 = ErlangTuple [alg_0, r1_4]
      in ErlangTuple [tup_el_11, tup_el_26]
    _ | (ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let    lop_30 = toErl 1
                in let rop_31 = toErl 50
                in let lop_29 = BIF.erlang__bsl__2 [lop_30, rop_31]
                in BIF.erlang__op_lesserEq [lop_29, m0_2])) ->
      let    rop_37 = toErl 2
      in let lop_35 = BIF.erlang__bsl__2 [m0_2, rop_37]
      in let rop_42 = toErl 2
      in let rop_40 = BIF.erlang__op_minus [bits_6, rop_42]
      in let rop_38 = BIF.erlang__bsr__2 [v1_5, rop_40]
      in let lop_34 = BIF.erlang__bor__2 [lop_35, rop_38]
      in let arg_44 = ErlangFloat 2.00000000000000000000e+0
      in let rop_47 = toErl 2
      in let arg_45 = BIF.erlang__op_minus [bitno_3, rop_47]
      in let rop_43 = BIF.math__pow__2 [arg_44, arg_45]
      in let tup_el_33 = BIF.erlang__op_mult [lop_34, rop_43]
      in let tup_el_48 = ErlangTuple [alg_0, r1_4]
      in ErlangTuple [tup_el_33, tup_el_48]
    _ | (ErlangAtom "true") ==
          (falsifyErrors
             (\ _ ->
                let    lop_52 = toErl 1
                in let rop_53 = toErl 49
                in let lop_51 = BIF.erlang__bsl__2 [lop_52, rop_53]
                in BIF.erlang__op_lesserEq [lop_51, m0_2])) ->
      let    rop_59 = toErl 3
      in let lop_57 = BIF.erlang__bsl__2 [m0_2, rop_59]
      in let rop_64 = toErl 3
      in let rop_62 = BIF.erlang__op_minus [bits_6, rop_64]
      in let rop_60 = BIF.erlang__bsr__2 [v1_5, rop_62]
      in let lop_56 = BIF.erlang__bor__2 [lop_57, rop_60]
      in let arg_66 = ErlangFloat 2.00000000000000000000e+0
      in let rop_69 = toErl 3
      in let arg_67 = BIF.erlang__op_minus [bitno_3, rop_69]
      in let rop_65 = BIF.math__pow__2 [arg_66, arg_67]
      in let tup_el_55 = BIF.erlang__op_mult [lop_56, rop_65]
      in let tup_el_70 = ErlangTuple [alg_0, r1_4]
      in ErlangTuple [tup_el_55, tup_el_70]
    _ | weakEq m0_2 (toErl 0) ->
      let    rop_76 = toErl 56
      in let rop_74 = BIF.erlang__op_minus [bits_6, rop_76]
      in let m1_77 = BIF.erlang__bsr__2 [v1_5, rop_74]
      in
        case ErlangAtom "true" of
          _ | (ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      let    lop_79 = toErl 1
                      in let rop_80 = toErl 55
                      in let lop_78 = BIF.erlang__bsl__2 [lop_79, rop_80]
                      in BIF.erlang__op_lesserEq [lop_78, m1_77])) ->
            let    rop_85 = toErl 3
            in let lop_83 = BIF.erlang__bsr__2 [m1_77, rop_85]
            in let arg_87 = ErlangFloat 2.00000000000000000000e+0
            in let rop_90 = toErl 53
            in let arg_88 = BIF.erlang__op_minus [bitno_3, rop_90]
            in let rop_86 = BIF.math__pow__2 [arg_87, arg_88]
            in let tup_el_82 = BIF.erlang__op_mult [lop_83, rop_86]
            in let tup_el_91 = ErlangTuple [alg_0, r1_4]
            in ErlangTuple [tup_el_82, tup_el_91]
          _ | (ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      let    lop_95 = toErl 1
                      in let rop_96 = toErl 54
                      in let lop_94 = BIF.erlang__bsl__2 [lop_95, rop_96]
                      in BIF.erlang__op_lesserEq [lop_94, m1_77])) ->
            let    rop_101 = toErl 2
            in let lop_99 = BIF.erlang__bsr__2 [m1_77, rop_101]
            in let arg_103 = ErlangFloat 2.00000000000000000000e+0
            in let rop_106 = toErl 54
            in let arg_104 = BIF.erlang__op_minus [bitno_3, rop_106]
            in let rop_102 = BIF.math__pow__2 [arg_103, arg_104]
            in let tup_el_98 = BIF.erlang__op_mult [lop_99, rop_102]
            in let tup_el_107 = ErlangTuple [alg_0, r1_4]
            in ErlangTuple [tup_el_98, tup_el_107]
          _ | (ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      let    lop_111 = toErl 1
                      in let rop_112 = toErl 53
                      in let lop_110 = BIF.erlang__bsl__2 [lop_111, rop_112]
                      in BIF.erlang__op_lesserEq [lop_110, m1_77])) ->
            let    rop_117 = toErl 1
            in let lop_115 = BIF.erlang__bsr__2 [m1_77, rop_117]
            in let arg_119 = ErlangFloat 2.00000000000000000000e+0
            in let rop_122 = toErl 55
            in let arg_120 = BIF.erlang__op_minus [bitno_3, rop_122]
            in let rop_118 = BIF.math__pow__2 [arg_119, arg_120]
            in let tup_el_114 = BIF.erlang__op_mult [lop_115, rop_118]
            in let tup_el_123 = ErlangTuple [alg_0, r1_4]
            in ErlangTuple [tup_el_114, tup_el_123]
          _ | (ErlangAtom "true") ==
                (falsifyErrors
                   (\ _ ->
                      let    lop_127 = toErl 1
                      in let rop_128 = toErl 52
                      in let lop_126 = BIF.erlang__bsl__2 [lop_127, rop_128]
                      in BIF.erlang__op_lesserEq [lop_126, m1_77])) ->
            let    arg_133 = ErlangFloat 2.00000000000000000000e+0
            in let rop_136 = toErl 56
            in let arg_134 = BIF.erlang__op_minus [bitno_3, rop_136]
            in let rop_132 = BIF.math__pow__2 [arg_133, arg_134]
            in let tup_el_130 = BIF.erlang__op_mult [m1_77, rop_132]
            in let tup_el_137 = ErlangTuple [alg_0, r1_4]
            in ErlangTuple [tup_el_130, tup_el_137]
          _ | (==) bitno_3 (toErl (-1008)) ->
            case ErlangAtom "true" of
              _ | (ErlangAtom "true") ==
                    (falsifyErrors
                       (\ _ ->
                          let    lop_141 = toErl 1
                          in let rop_142 = toErl 42
                          in let lop_140 = BIF.erlang__bsl__2 [lop_141, rop_142]
                          in BIF.erlang__op_lesserEq [lop_140, m1_77])) ->
                let    rop_149 = toErl 56
                in let arg_147 = BIF.erlang__op_minus [bitno_3, rop_149]
                in
                  erlps__uniform_real_s__5 [alg_0, next_1, m1_77, arg_147, r1_4]
              _ ->
                let arg_151 = ErlangTuple [alg_0, r1_4]
                in erlps__uniform_real_s__1 [arg_151]
          _ ->
            let    rop_159 = toErl 56
            in let arg_157 = BIF.erlang__op_minus [bitno_3, rop_159]
            in erlps__uniform_real_s__5 [alg_0, next_1, m1_77, arg_157, r1_4]
    _ ->
      let    lop_161 = toErl 53
      in let lop_165 = toErl 1
      in let lop_167 = toErl 49
      in let rop_168 = toErl 1
      in let rop_166 = BIF.erlang__op_minus [lop_167, rop_168]
      in let arg_164 = BIF.erlang__bsl__2 [lop_165, rop_166]
      in let arg_169 = toErl 49
      in let rop_162 = erlps__bc__3 [m0_2, arg_164, arg_169]
      in let b0_170 = BIF.erlang__op_minus [lop_161, rop_162]
      in let lop_173 = BIF.erlang__bsl__2 [m0_2, b0_170]
      in let rop_178 = BIF.erlang__op_minus [bits_6, b0_170]
      in let rop_176 = BIF.erlang__bsr__2 [v1_5, rop_178]
      in let lop_172 = BIF.erlang__bor__2 [lop_173, rop_176]
      in let arg_182 = ErlangFloat 2.00000000000000000000e+0
      in let arg_183 = BIF.erlang__op_minus [bitno_3, b0_170]
      in let rop_181 = BIF.math__pow__2 [arg_182, arg_183]
      in let tup_el_171 = BIF.erlang__op_mult [lop_172, rop_181]
      in let tup_el_186 = ErlangTuple [alg_0, r1_4]
      in ErlangTuple [tup_el_171, tup_el_186]
erlps__uniform_real_s__7 [arg_189, arg_190, arg_191, arg_192,
                          arg_193, arg_194, arg_195]
  =
  EXC.function_clause unit
erlps__uniform_real_s__7 args =
  EXC.badarity (ErlangFun 7 erlps__uniform_real_s__7) args

erlps__uniform_real_s__5 :: ErlangFun
erlps__uniform_real_s__5 [alg_2@(ErlangMap map_0), next_3, m0_4,
                          bitno_5, r0_6]
  | (DM.Just bits_1) <- (Map.lookup (ErlangAtom "bits") map_0) =
  let
    matchExpr_11 =
      BIF.erlang__apply__2 [next_3, ErlangCons r0_6 ErlangEmptyList]
  in
    case matchExpr_11 of
      (ErlangTuple [v1_9, r1_10]) ->
        erlps__uniform_real_s__7
          [alg_2, next_3, m0_4, bitno_5, r1_10, v1_9, bits_1]
      _ -> EXC.badmatch matchExpr_11
erlps__uniform_real_s__5 [alg_1@(ErlangMap map_0), next_2, m0_3,
                          bitno_4, r0_5]
  | (DM.Just _) <- (Map.lookup (ErlangAtom "max") map_0) =
  let
    matchExpr_10 =
      BIF.erlang__apply__2 [next_2, ErlangCons r0_5 ErlangEmptyList]
  in
    case matchExpr_10 of
      (ErlangTuple [v1_8, r1_9]) ->
        let    lop_20 = toErl 1
        in let rop_21 = toErl 56
        in let lop_19 = BIF.erlang__bsl__2 [lop_20, rop_21]
        in let rop_22 = toErl 1
        in let rop_18 = BIF.erlang__op_minus [lop_19, rop_22]
        in let arg_16 = BIF.erlang__band__2 [v1_8, rop_18]
        in let arg_23 = toErl 56
        in
          erlps__uniform_real_s__7
            [alg_1, next_2, m0_3, bitno_4, r1_9, arg_16, arg_23]
      _ -> EXC.badmatch matchExpr_10
erlps__uniform_real_s__5 [arg_24, arg_25, arg_26, arg_27, arg_28]
  =
  EXC.function_clause unit
erlps__uniform_real_s__5 args =
  EXC.badarity (ErlangFun 5 erlps__uniform_real_s__5) args

erlps__jump__1 :: ErlangFun
erlps__jump__1 [state_2@(ErlangTuple [(ErlangMap map_0), _])]
  | (DM.Just jump_1) <- (Map.lookup (ErlangAtom "jump") map_0) =
  BIF.erlang__apply__2 [jump_1, ErlangCons state_2 ErlangEmptyList]
erlps__jump__1 [(ErlangTuple [(ErlangMap map_0), _])] =
  BIF.erlang__error__1 [ErlangAtom "not_implemented"]
erlps__jump__1 [arg_2] = EXC.function_clause unit
erlps__jump__1 args =
  EXC.badarity (ErlangFun 1 erlps__jump__1) args

erlps__jump__0 :: ErlangFun
erlps__jump__0 [] =
  let    arg_1 = erlps__seed_get__0 []
  in let arg_0 = erlps__jump__1 [arg_1]
  in erlps__seed_put__1 [arg_0]
erlps__jump__0 args =
  EXC.badarity (ErlangFun 0 erlps__jump__0) args

erlps__normal__0 :: ErlangFun
erlps__normal__0 [] =
  let    arg_0 = erlps__seed_get__0 []
  in let matchExpr_3 = erlps__normal_s__1 [arg_0]
  in
    case matchExpr_3 of
      (ErlangTuple [x_1, seed_2]) ->
        let matchExpr_5 = erlps__seed_put__1 [seed_2]
        in x_1
      _ -> EXC.badmatch matchExpr_3
erlps__normal__0 args =
  EXC.badarity (ErlangFun 0 erlps__normal__0) args

erlps__normal__2 :: ErlangFun
erlps__normal__2 [mean_0, variance_1] =
  let    lop_4 = BIF.math__sqrt__1 [variance_1]
  in let rop_6 = erlps__normal__0 []
  in let rop_3 = BIF.erlang__op_mult [lop_4, rop_6]
  in BIF.erlang__op_plus [mean_0, rop_3]
erlps__normal__2 [arg_7, arg_8] = EXC.function_clause unit
erlps__normal__2 args =
  EXC.badarity (ErlangFun 2 erlps__normal__2) args

erlps__normal_s__1 :: ErlangFun
erlps__normal_s__1 [state0_0] =
  let matchExpr_5 = erlps__get_52__1 [state0_0]
  in
    case matchExpr_5 of
      (ErlangTuple [sign_2, r_3, state_4]) ->
        let    lop_9 = toErl 1
        in let rop_10 = toErl 8
        in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_10]
        in let rop_11 = toErl 1
        in let rop_7 = BIF.erlang__op_minus [lop_8, rop_11]
        in let idx_12 = BIF.erlang__band__2 [r_3, rop_7]
        in let rop_14 = toErl 1
        in let idx1_15 = BIF.erlang__op_plus [idx_12, rop_14]
        in let matchExpr_19 = erlps__normal_kiwi__1 [idx1_15]
        in
          case matchExpr_19 of
            (ErlangTuple [ki_17, wi_18]) ->
              let    x_22 = BIF.erlang__op_mult [r_3, wi_18]
              in let case_23 = BIF.erlang__op_lesser [r_3, ki_17]
              in
                case case_23 of
                  (ErlangAtom "true") | (==) sign_2 (toErl 0) ->
                    ErlangTuple [x_22, state_4]
                  (ErlangAtom "true") ->
                    let tup_el_28 = BIF.erlang__op_neg [x_22]
                    in ErlangTuple [tup_el_28, state_4]
                  (ErlangAtom "false") | (==) sign_2 (toErl 0) ->
                    erlps__normal_s__4 [idx_12, sign_2, x_22, state_4]
                  (ErlangAtom "false") ->
                    let arg_37 = BIF.erlang__op_neg [x_22]
                    in erlps__normal_s__4 [idx_12, sign_2, arg_37, state_4]
                  something_else -> EXC.case_clause something_else
            _ -> EXC.badmatch matchExpr_19
      _ -> EXC.badmatch matchExpr_5
erlps__normal_s__1 [arg_40] = EXC.function_clause unit
erlps__normal_s__1 args =
  EXC.badarity (ErlangFun 1 erlps__normal_s__1) args

erlps__normal_s__3 :: ErlangFun
erlps__normal_s__3 [mean_0, variance_1, state0_2]
  | weakGt variance_1 (toErl 0) =
  let matchExpr_6 = erlps__normal_s__1 [state0_2]
  in
    case matchExpr_6 of
      (ErlangTuple [x_4, state_5]) ->
        let    lop_10 = BIF.math__sqrt__1 [variance_1]
        in let rop_9 = BIF.erlang__op_mult [lop_10, x_4]
        in let tup_el_7 = BIF.erlang__op_plus [mean_0, rop_9]
        in ErlangTuple [tup_el_7, state_5]
      _ -> EXC.badmatch matchExpr_6
erlps__normal_s__3 [arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__normal_s__3 args =
  EXC.badarity (ErlangFun 3 erlps__normal_s__3) args

erlps__seed_put__1 :: ErlangFun
erlps__seed_put__1 [seed_0] =
  let _ = BIF.erlang__put__2 [ErlangAtom "rand_seed", seed_0]
  in seed_0
erlps__seed_put__1 [arg_3] = EXC.function_clause unit
erlps__seed_put__1 args =
  EXC.badarity (ErlangFun 1 erlps__seed_put__1) args

erlps__seed_get__0 :: ErlangFun
erlps__seed_get__0 [] =
  let case_0 = BIF.erlang__get__1 [ErlangAtom "rand_seed"]
  in
    case case_0 of
      (ErlangAtom "undefined") -> erlps__seed__1 [ErlangAtom "exsss"]
      old_3 -> old_3
erlps__seed_get__0 args =
  EXC.badarity (ErlangFun 0 erlps__seed_get__0) args

erlps__mk_alg__1 :: ErlangFun
erlps__mk_alg__1 [(ErlangAtom "exs64")] =
  let    lop_7 = toErl 1
  in let rop_8 = toErl 64
  in let lop_6 = BIF.erlang__bsl__2 [lop_7, rop_8]
  in let rop_9 = toErl 1
  in let val_5 = BIF.erlang__op_minus [lop_6, rop_9]
  in let val_10 = ErlangFun 1 erlps__exs64_next__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exs64"),
            DT.Tuple (ErlangAtom "max") val_5,
            DT.Tuple (ErlangAtom "next") val_10])
  in let tup_el_11 = ErlangFun 1 erlps__exs64_seed__1
  in ErlangTuple [tup_el_0, tup_el_11]
erlps__mk_alg__1 [(ErlangAtom "exsplus")] =
  let    lop_8 = toErl 1
  in let rop_9 = toErl 58
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_10 = toErl 1
  in let val_6 = BIF.erlang__op_minus [lop_7, rop_10]
  in let val_11 = ErlangFun 1 erlps__exsplus_next__1
  in let val_12 = ErlangFun 1 erlps__exsplus_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exsplus"),
            DT.Tuple (ErlangAtom "max") val_6,
            DT.Tuple (ErlangAtom "next") val_11,
            DT.Tuple (ErlangAtom "jump") val_12])
  in let tup_el_13 = ErlangFun 1 erlps__exsplus_seed__1
  in ErlangTuple [tup_el_0, tup_el_13]
erlps__mk_alg__1 [(ErlangAtom "exsp")] =
  let    val_9 = toErl 58
  in let val_10 = toErl 1
  in let val_11 = ErlangFun 1 erlps__exsplus_next__1
  in let val_12 = ErlangFun 1 erlps__exsp_uniform__1
  in let val_13 = ErlangFun 2 erlps__exsp_uniform__2
  in let val_14 = ErlangFun 1 erlps__exsplus_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exsp"),
            DT.Tuple (ErlangAtom "bits") val_9,
            DT.Tuple (ErlangAtom "weak_low_bits") val_10,
            DT.Tuple (ErlangAtom "next") val_11,
            DT.Tuple (ErlangAtom "uniform") val_12,
            DT.Tuple (ErlangAtom "uniform_n") val_13,
            DT.Tuple (ErlangAtom "jump") val_14])
  in let tup_el_15 = ErlangFun 1 erlps__exsplus_seed__1
  in ErlangTuple [tup_el_0, tup_el_15]
erlps__mk_alg__1 [(ErlangAtom "exsss")] =
  let    val_8 = toErl 58
  in let val_9 = ErlangFun 1 erlps__exsss_next__1
  in let val_10 = ErlangFun 1 erlps__exsss_uniform__1
  in let val_11 = ErlangFun 2 erlps__exsss_uniform__2
  in let val_12 = ErlangFun 1 erlps__exsplus_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exsss"),
            DT.Tuple (ErlangAtom "bits") val_8,
            DT.Tuple (ErlangAtom "next") val_9,
            DT.Tuple (ErlangAtom "uniform") val_10,
            DT.Tuple (ErlangAtom "uniform_n") val_11,
            DT.Tuple (ErlangAtom "jump") val_12])
  in let tup_el_13 = ErlangFun 1 erlps__exsss_seed__1
  in ErlangTuple [tup_el_0, tup_el_13]
erlps__mk_alg__1 [(ErlangAtom "exs1024")] =
  let    lop_8 = toErl 1
  in let rop_9 = toErl 64
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_10 = toErl 1
  in let val_6 = BIF.erlang__op_minus [lop_7, rop_10]
  in let val_11 = ErlangFun 1 erlps__exs1024_next__1
  in let val_12 = ErlangFun 1 erlps__exs1024_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exs1024"),
            DT.Tuple (ErlangAtom "max") val_6,
            DT.Tuple (ErlangAtom "next") val_11,
            DT.Tuple (ErlangAtom "jump") val_12])
  in let tup_el_13 = ErlangFun 1 erlps__exs1024_seed__1
  in ErlangTuple [tup_el_0, tup_el_13]
erlps__mk_alg__1 [(ErlangAtom "exs1024s")] =
  let    val_7 = toErl 64
  in let val_8 = toErl 3
  in let val_9 = ErlangFun 1 erlps__exs1024_next__1
  in let val_10 = ErlangFun 1 erlps__exs1024_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exs1024s"),
            DT.Tuple (ErlangAtom "bits") val_7,
            DT.Tuple (ErlangAtom "weak_low_bits") val_8,
            DT.Tuple (ErlangAtom "next") val_9,
            DT.Tuple (ErlangAtom "jump") val_10])
  in let tup_el_11 = ErlangFun 1 erlps__exs1024_seed__1
  in ErlangTuple [tup_el_0, tup_el_11]
erlps__mk_alg__1 [(ErlangAtom "exrop")] =
  let    val_9 = toErl 58
  in let val_10 = toErl 1
  in let val_11 = ErlangFun 1 erlps__exrop_next__1
  in let val_12 = ErlangFun 1 erlps__exrop_uniform__1
  in let val_13 = ErlangFun 2 erlps__exrop_uniform__2
  in let val_14 = ErlangFun 1 erlps__exrop_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exrop"),
            DT.Tuple (ErlangAtom "bits") val_9,
            DT.Tuple (ErlangAtom "weak_low_bits") val_10,
            DT.Tuple (ErlangAtom "next") val_11,
            DT.Tuple (ErlangAtom "uniform") val_12,
            DT.Tuple (ErlangAtom "uniform_n") val_13,
            DT.Tuple (ErlangAtom "jump") val_14])
  in let tup_el_15 = ErlangFun 1 erlps__exrop_seed__1
  in ErlangTuple [tup_el_0, tup_el_15]
erlps__mk_alg__1 [(ErlangAtom "exro928ss")] =
  let    val_8 = toErl 58
  in let val_9 = ErlangFun 1 erlps__exro928ss_next__1
  in let val_10 = ErlangFun 1 erlps__exro928ss_uniform__1
  in let val_11 = ErlangFun 2 erlps__exro928ss_uniform__2
  in let val_12 = ErlangFun 1 erlps__exro928_jump__1
  in let
    tup_el_0 =
      ErlangMap
        (Map.fromFoldable
           [DT.Tuple (ErlangAtom "type") (ErlangAtom "exro928ss"),
            DT.Tuple (ErlangAtom "bits") val_8,
            DT.Tuple (ErlangAtom "next") val_9,
            DT.Tuple (ErlangAtom "uniform") val_10,
            DT.Tuple (ErlangAtom "uniform_n") val_11,
            DT.Tuple (ErlangAtom "jump") val_12])
  in let tup_el_13 = ErlangFun 1 erlps__exro928_seed__1
  in ErlangTuple [tup_el_0, tup_el_13]
erlps__mk_alg__1 [arg_14] = EXC.function_clause unit
erlps__mk_alg__1 args =
  EXC.badarity (ErlangFun 1 erlps__mk_alg__1) args

erlps__exs64_seed__1 :: ErlangFun
erlps__exs64_seed__1 [l_0] | isEList l_0 =
  let    arg_1 = toErl 1
  in let matchExpr_4 = erlps__seed64_nz__2 [arg_1, l_0]
  in
    case matchExpr_4 of
      (ErlangCons r_3 (ErlangEmptyList)) -> r_3
      _ -> EXC.badmatch matchExpr_4
erlps__exs64_seed__1 [a_0] | isEInt a_0 =
  let    arg_1 = toErl 1
  in let lop_6 = toErl 1
  in let rop_7 = toErl 64
  in let lop_5 = BIF.erlang__bsl__2 [lop_6, rop_7]
  in let rop_8 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_8]
  in let arg_2 = BIF.erlang__band__2 [a_0, rop_4]
  in let matchExpr_10 = erlps__seed64__2 [arg_1, arg_2]
  in
    case matchExpr_10 of
      (ErlangCons r_9 (ErlangEmptyList)) -> r_9
      _ -> EXC.badmatch matchExpr_10
erlps__exs64_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let    lop_9 = toErl 1
  in let rop_10 = toErl 32
  in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_10]
  in let rop_11 = toErl 1
  in let rop_7 = BIF.erlang__op_minus [lop_8, rop_11]
  in let lop_5 = BIF.erlang__band__2 [a1_0, rop_7]
  in let
    rop_12 =
      toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967197")))
  in let lop_4 = BIF.erlang__op_mult [lop_5, rop_12]
  in let rop_13 = toErl 1
  in let arg_3 = BIF.erlang__op_plus [lop_4, rop_13]
  in let matchExpr_15 = erlps__exs64_next__1 [arg_3]
  in
    case matchExpr_15 of
      (ErlangTuple [v1_14, _]) ->
        let    lop_22 = toErl 1
        in let rop_23 = toErl 32
        in let lop_21 = BIF.erlang__bsl__2 [lop_22, rop_23]
        in let rop_24 = toErl 1
        in let rop_20 = BIF.erlang__op_minus [lop_21, rop_24]
        in let lop_18 = BIF.erlang__band__2 [a2_1, rop_20]
        in let
          rop_25 =
            toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967231")))
        in let lop_17 = BIF.erlang__op_mult [lop_18, rop_25]
        in let rop_26 = toErl 1
        in let arg_16 = BIF.erlang__op_plus [lop_17, rop_26]
        in let matchExpr_28 = erlps__exs64_next__1 [arg_16]
        in
          case matchExpr_28 of
            (ErlangTuple [v2_27, _]) ->
              let    lop_35 = toErl 1
              in let rop_36 = toErl 32
              in let lop_34 = BIF.erlang__bsl__2 [lop_35, rop_36]
              in let rop_37 = toErl 1
              in let rop_33 = BIF.erlang__op_minus [lop_34, rop_37]
              in let lop_31 = BIF.erlang__band__2 [a3_2, rop_33]
              in let
                rop_38 =
                  toErl
                    (unsafePartial (DM.fromJust (DBI.fromString "4294967279")))
              in let lop_30 = BIF.erlang__op_mult [lop_31, rop_38]
              in let rop_39 = toErl 1
              in let arg_29 = BIF.erlang__op_plus [lop_30, rop_39]
              in let matchExpr_41 = erlps__exs64_next__1 [arg_29]
              in
                case matchExpr_41 of
                  (ErlangTuple [v3_40, _]) ->
                    let    lop_44 = BIF.erlang__op_mult [v1_14, v2_27]
                    in let lop_43 = BIF.erlang__op_mult [lop_44, v3_40]
                    in let lop_51 = toErl 1
                    in let rop_52 = toErl 64
                    in let lop_50 = BIF.erlang__bsl__2 [lop_51, rop_52]
                    in let rop_53 = toErl 1
                    in let lop_49 = BIF.erlang__op_minus [lop_50, rop_53]
                    in let rop_54 = toErl 1
                    in let rop_48 = BIF.erlang__op_minus [lop_49, rop_54]
                    in let lop_42 = BIF.erlang__op_rem_strict [lop_43, rop_48]
                    in let rop_55 = toErl 1
                    in BIF.erlang__op_plus [lop_42, rop_55]
                  _ -> EXC.badmatch matchExpr_41
            _ -> EXC.badmatch matchExpr_28
      _ -> EXC.badmatch matchExpr_15
erlps__exs64_seed__1 [arg_56] = EXC.function_clause unit
erlps__exs64_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs64_seed__1) args

erlps__exs64_next__1 :: ErlangFun
erlps__exs64_next__1 [r_0] =
  let    rop_4 = toErl 12
  in let rop_2 = BIF.erlang__bsr__2 [r_0, rop_4]
  in let r1_5 = BIF.erlang__bxor__2 [r_0, rop_2]
  in let lop_12 = toErl 1
  in let lop_14 = toErl 64
  in let rop_15 = toErl 25
  in let rop_13 = BIF.erlang__op_minus [lop_14, rop_15]
  in let lop_11 = BIF.erlang__bsl__2 [lop_12, rop_13]
  in let rop_16 = toErl 1
  in let rop_10 = BIF.erlang__op_minus [lop_11, rop_16]
  in let lop_8 = BIF.erlang__band__2 [r1_5, rop_10]
  in let rop_17 = toErl 25
  in let rop_7 = BIF.erlang__bsl__2 [lop_8, rop_17]
  in let r2_18 = BIF.erlang__bxor__2 [r1_5, rop_7]
  in let rop_22 = toErl 27
  in let rop_20 = BIF.erlang__bsr__2 [r2_18, rop_22]
  in let r3_23 = BIF.erlang__bxor__2 [r2_18, rop_20]
  in let
    rop_27 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "2685821657736338717")))
  in let lop_25 = BIF.erlang__op_mult [r3_23, rop_27]
  in let lop_30 = toErl 1
  in let rop_31 = toErl 64
  in let lop_29 = BIF.erlang__bsl__2 [lop_30, rop_31]
  in let rop_32 = toErl 1
  in let rop_28 = BIF.erlang__op_minus [lop_29, rop_32]
  in let tup_el_24 = BIF.erlang__band__2 [lop_25, rop_28]
  in ErlangTuple [tup_el_24, r3_23]
erlps__exs64_next__1 [arg_34] = EXC.function_clause unit
erlps__exs64_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs64_next__1) args

erlps__exsplus_seed__1 :: ErlangFun
erlps__exsplus_seed__1 [l_0] | isEList l_0 =
  let    arg_1 = toErl 2
  in let matchExpr_5 = erlps__seed58_nz__2 [arg_1, l_0]
  in
    case matchExpr_5 of
      (ErlangCons s0_3 (ErlangCons s1_4 (ErlangEmptyList))) ->
        ErlangCons s0_3 s1_4
      _ -> EXC.badmatch matchExpr_5
erlps__exsplus_seed__1 [x_0] | isEInt x_0 =
  let    arg_1 = toErl 2
  in let lop_6 = toErl 1
  in let rop_7 = toErl 64
  in let lop_5 = BIF.erlang__bsl__2 [lop_6, rop_7]
  in let rop_8 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_8]
  in let arg_2 = BIF.erlang__band__2 [x_0, rop_4]
  in let matchExpr_11 = erlps__seed58__2 [arg_1, arg_2]
  in
    case matchExpr_11 of
      (ErlangCons s0_9 (ErlangCons s1_10 (ErlangEmptyList))) ->
        ErlangCons s0_9 s1_10
      _ -> EXC.badmatch matchExpr_11
erlps__exsplus_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let   
    rop_8 =
      toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967197")))
  in let lop_6 = BIF.erlang__op_mult [a1_0, rop_8]
  in let rop_9 = toErl 1
  in let lop_5 = BIF.erlang__op_plus [lop_6, rop_9]
  in let lop_12 = toErl 1
  in let rop_13 = toErl 58
  in let lop_11 = BIF.erlang__bsl__2 [lop_12, rop_13]
  in let rop_14 = toErl 1
  in let rop_10 = BIF.erlang__op_minus [lop_11, rop_14]
  in let head_4 = BIF.erlang__band__2 [lop_5, rop_10]
  in let
    rop_19 =
      toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967231")))
  in let lop_17 = BIF.erlang__op_mult [a2_1, rop_19]
  in let rop_20 = toErl 1
  in let lop_16 = BIF.erlang__op_plus [lop_17, rop_20]
  in let lop_23 = toErl 1
  in let rop_24 = toErl 58
  in let lop_22 = BIF.erlang__bsl__2 [lop_23, rop_24]
  in let rop_25 = toErl 1
  in let rop_21 = BIF.erlang__op_minus [lop_22, rop_25]
  in let tail_15 = BIF.erlang__band__2 [lop_16, rop_21]
  in let
    matchExpr_27 = erlps__exsplus_next__1 [ErlangCons head_4 tail_15]
  in
    case matchExpr_27 of
      (ErlangTuple [_, r1_26]) ->
        let   
          rop_33 =
            toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967279")))
        in let lop_31 = BIF.erlang__op_mult [a3_2, rop_33]
        in let rop_34 = toErl 1
        in let lop_30 = BIF.erlang__op_plus [lop_31, rop_34]
        in let lop_37 = toErl 1
        in let rop_38 = toErl 58
        in let lop_36 = BIF.erlang__bsl__2 [lop_37, rop_38]
        in let rop_39 = toErl 1
        in let rop_35 = BIF.erlang__op_minus [lop_36, rop_39]
        in let head_29 = BIF.erlang__band__2 [lop_30, rop_35]
        in let tail_40 = BIF.erlang__tl__1 [r1_26]
        in let
          matchExpr_43 =
            erlps__exsplus_next__1 [ErlangCons head_29 tail_40]
        in
          case matchExpr_43 of
            (ErlangTuple [_, r2_42]) -> r2_42
            _ -> EXC.badmatch matchExpr_43
      _ -> EXC.badmatch matchExpr_27
erlps__exsplus_seed__1 [arg_44] = EXC.function_clause unit
erlps__exsplus_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsplus_seed__1) args

erlps__exsss_seed__1 :: ErlangFun
erlps__exsss_seed__1 [l_0] | isEList l_0 =
  let    arg_1 = toErl 2
  in let matchExpr_5 = erlps__seed58_nz__2 [arg_1, l_0]
  in
    case matchExpr_5 of
      (ErlangCons s0_3 (ErlangCons s1_4 (ErlangEmptyList))) ->
        ErlangCons s0_3 s1_4
      _ -> EXC.badmatch matchExpr_5
erlps__exsss_seed__1 [x_0] | isEInt x_0 =
  let    arg_1 = toErl 2
  in let lop_6 = toErl 1
  in let rop_7 = toErl 64
  in let lop_5 = BIF.erlang__bsl__2 [lop_6, rop_7]
  in let rop_8 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_8]
  in let arg_2 = BIF.erlang__band__2 [x_0, rop_4]
  in let matchExpr_11 = erlps__seed58__2 [arg_1, arg_2]
  in
    case matchExpr_11 of
      (ErlangCons s0_9 (ErlangCons s1_10 (ErlangEmptyList))) ->
        ErlangCons s0_9 s1_10
      _ -> EXC.badmatch matchExpr_11
erlps__exsss_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let    lop_7 = toErl 1
  in let rop_8 = toErl 64
  in let lop_6 = BIF.erlang__bsl__2 [lop_7, rop_8]
  in let rop_9 = toErl 1
  in let rop_5 = BIF.erlang__op_minus [lop_6, rop_9]
  in let arg_3 = BIF.erlang__band__2 [a1_0, rop_5]
  in let matchExpr_11 = erlps__seed58__1 [arg_3]
  in
    case matchExpr_11 of
      (ErlangTuple [_, x0_10]) ->
        let    lop_17 = toErl 1
        in let rop_18 = toErl 64
        in let lop_16 = BIF.erlang__bsl__2 [lop_17, rop_18]
        in let rop_19 = toErl 1
        in let rop_15 = BIF.erlang__op_minus [lop_16, rop_19]
        in let lop_13 = BIF.erlang__band__2 [a2_1, rop_15]
        in let arg_12 = BIF.erlang__bxor__2 [lop_13, x0_10]
        in let matchExpr_23 = erlps__seed58__1 [arg_12]
        in
          case matchExpr_23 of
            (ErlangTuple [s0_21, x1_22]) ->
              let    lop_29 = toErl 1
              in let rop_30 = toErl 64
              in let lop_28 = BIF.erlang__bsl__2 [lop_29, rop_30]
              in let rop_31 = toErl 1
              in let rop_27 = BIF.erlang__op_minus [lop_28, rop_31]
              in let lop_25 = BIF.erlang__band__2 [a3_2, rop_27]
              in let arg_24 = BIF.erlang__bxor__2 [lop_25, x1_22]
              in let matchExpr_34 = erlps__seed58__1 [arg_24]
              in
                case matchExpr_34 of
                  (ErlangTuple [s1_33, _]) -> ErlangCons s0_21 s1_33
                  _ -> EXC.badmatch matchExpr_34
            _ -> EXC.badmatch matchExpr_23
      _ -> EXC.badmatch matchExpr_11
erlps__exsss_seed__1 [arg_37] = EXC.function_clause unit
erlps__exsss_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsss_seed__1) args

erlps__exsplus_next__1 :: ErlangFun
erlps__exsplus_next__1 [(ErlangCons s1_0 s0_1)] =
  let    lop_8 = toErl 1
  in let lop_10 = toErl 58
  in let rop_11 = toErl 24
  in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_12 = toErl 1
  in let rop_6 = BIF.erlang__op_minus [lop_7, rop_12]
  in let lop_4 = BIF.erlang__band__2 [s1_0, rop_6]
  in let rop_13 = toErl 24
  in let rop_3 = BIF.erlang__bsl__2 [lop_4, rop_13]
  in let s1_1_14 = BIF.erlang__bxor__2 [s1_0, rop_3]
  in let
    lop_16 = BIF.erlang__bxor__2 [s1_1_14, s0_1]
    rop_21 = toErl 11
    rop_19 = BIF.erlang__bsr__2 [s1_1_14, rop_21]
    lop_15 = BIF.erlang__bxor__2 [lop_16, rop_19]
    rop_24 = toErl 41
    rop_22 = BIF.erlang__bsr__2 [s0_1, rop_24]
    news1_25 = BIF.erlang__bxor__2 [lop_15, rop_22]
  in let lop_27 = BIF.erlang__op_plus [s0_1, news1_25]
  in let lop_32 = toErl 1
  in let rop_33 = toErl 58
  in let lop_31 = BIF.erlang__bsl__2 [lop_32, rop_33]
  in let rop_34 = toErl 1
  in let rop_30 = BIF.erlang__op_minus [lop_31, rop_34]
  in let tup_el_26 = BIF.erlang__band__2 [lop_27, rop_30]
  in ErlangTuple [tup_el_26, ErlangCons s0_1 news1_25]
erlps__exsplus_next__1 [arg_38] = EXC.function_clause unit
erlps__exsplus_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsplus_next__1) args

erlps__exsss_next__1 :: ErlangFun
erlps__exsss_next__1 [(ErlangCons s1_0 s0_1)] =
  let    lop_8 = toErl 1
  in let lop_10 = toErl 58
  in let rop_11 = toErl 24
  in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_12 = toErl 1
  in let rop_6 = BIF.erlang__op_minus [lop_7, rop_12]
  in let lop_4 = BIF.erlang__band__2 [s1_0, rop_6]
  in let rop_13 = toErl 24
  in let rop_3 = BIF.erlang__bsl__2 [lop_4, rop_13]
  in let s1_1_14 = BIF.erlang__bxor__2 [s1_0, rop_3]
  in let
    lop_16 = BIF.erlang__bxor__2 [s1_1_14, s0_1]
    rop_21 = toErl 11
    rop_19 = BIF.erlang__bsr__2 [s1_1_14, rop_21]
    lop_15 = BIF.erlang__bxor__2 [lop_16, rop_19]
    rop_24 = toErl 41
    rop_22 = BIF.erlang__bsr__2 [s0_1, rop_24]
    news1_25 = BIF.erlang__bxor__2 [lop_15, rop_22]
  in let lop_34 = toErl 1
  in let lop_36 = toErl 58
  in let rop_37 = toErl 2
  in let rop_35 = BIF.erlang__op_minus [lop_36, rop_37]
  in let lop_33 = BIF.erlang__bsl__2 [lop_34, rop_35]
  in let rop_38 = toErl 1
  in let rop_32 = BIF.erlang__op_minus [lop_33, rop_38]
  in let lop_30 = BIF.erlang__band__2 [s0_1, rop_32]
  in let rop_39 = toErl 2
  in let rop_29 = BIF.erlang__bsl__2 [lop_30, rop_39]
  in let lop_27 = BIF.erlang__op_plus [s0_1, rop_29]
  in let lop_42 = toErl 1
  in let rop_43 = toErl 58
  in let lop_41 = BIF.erlang__bsl__2 [lop_42, rop_43]
  in let rop_44 = toErl 1
  in let rop_40 = BIF.erlang__op_minus [lop_41, rop_44]
  in let v_0_45 = BIF.erlang__band__2 [lop_27, rop_40]
  in let lop_51 = toErl 1
  in let lop_53 = toErl 58
  in let rop_54 = toErl 7
  in let rop_52 = BIF.erlang__op_minus [lop_53, rop_54]
  in let lop_50 = BIF.erlang__bsl__2 [lop_51, rop_52]
  in let rop_55 = toErl 1
  in let rop_49 = BIF.erlang__op_minus [lop_50, rop_55]
  in let lop_47 = BIF.erlang__band__2 [v_0_45, rop_49]
  in let rop_56 = toErl 7
  in let lop_46 = BIF.erlang__bsl__2 [lop_47, rop_56]
  in let lop_60 = toErl 58
  in let rop_61 = toErl 7
  in let rop_59 = BIF.erlang__op_minus [lop_60, rop_61]
  in let rop_57 = BIF.erlang__bsr__2 [v_0_45, rop_59]
  in let v_1_62 = BIF.erlang__bor__2 [lop_46, rop_57]
  in let
    lop_70 = toErl 1
    lop_72 = toErl 58
    rop_73 = toErl 3
    rop_71 = BIF.erlang__op_minus [lop_72, rop_73]
    lop_69 = BIF.erlang__bsl__2 [lop_70, rop_71]
    rop_74 = toErl 1
    rop_68 = BIF.erlang__op_minus [lop_69, rop_74]
    lop_66 = BIF.erlang__band__2 [v_1_62, rop_68]
    rop_75 = toErl 3
    rop_65 = BIF.erlang__bsl__2 [lop_66, rop_75]
    lop_63 = BIF.erlang__op_plus [v_1_62, rop_65]
    lop_78 = toErl 1
    rop_79 = toErl 58
    lop_77 = BIF.erlang__bsl__2 [lop_78, rop_79]
    rop_80 = toErl 1
    rop_76 = BIF.erlang__op_minus [lop_77, rop_80]
    tup_el_26 = BIF.erlang__band__2 [lop_63, rop_76]
  in ErlangTuple [tup_el_26, ErlangCons s0_1 news1_25]
erlps__exsss_next__1 [arg_84] = EXC.function_clause unit
erlps__exsss_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsss_next__1) args

erlps__exsp_uniform__1 :: ErlangFun
erlps__exsp_uniform__1 [(ErlangTuple [alg_0, r0_1])] =
  let matchExpr_5 = erlps__exsplus_next__1 [r0_1]
  in
    case matchExpr_5 of
      (ErlangTuple [i_3, r1_4]) ->
        let    lop_10 = toErl 58
        in let rop_11 = toErl 53
        in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
        in let lop_7 = BIF.erlang__bsr__2 [i_3, rop_9]
        in let rop_12 = ErlangFloat 1.11022302462515654042e-16
        in let tup_el_6 = BIF.erlang__op_mult [lop_7, rop_12]
        in let tup_el_13 = ErlangTuple [alg_0, r1_4]
        in ErlangTuple [tup_el_6, tup_el_13]
      _ -> EXC.badmatch matchExpr_5
erlps__exsp_uniform__1 [arg_16] = EXC.function_clause unit
erlps__exsp_uniform__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsp_uniform__1) args

erlps__exsss_uniform__1 :: ErlangFun
erlps__exsss_uniform__1 [(ErlangTuple [alg_0, r0_1])] =
  let matchExpr_5 = erlps__exsss_next__1 [r0_1]
  in
    case matchExpr_5 of
      (ErlangTuple [i_3, r1_4]) ->
        let    lop_10 = toErl 58
        in let rop_11 = toErl 53
        in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
        in let lop_7 = BIF.erlang__bsr__2 [i_3, rop_9]
        in let rop_12 = ErlangFloat 1.11022302462515654042e-16
        in let tup_el_6 = BIF.erlang__op_mult [lop_7, rop_12]
        in let tup_el_13 = ErlangTuple [alg_0, r1_4]
        in ErlangTuple [tup_el_6, tup_el_13]
      _ -> EXC.badmatch matchExpr_5
erlps__exsss_uniform__1 [arg_16] = EXC.function_clause unit
erlps__exsss_uniform__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsss_uniform__1) args

erlps__exsp_uniform__2 :: ErlangFun
erlps__exsp_uniform__2 [range_0, (ErlangTuple [alg_1, r_2])] =
  let matchExpr_6 = erlps__exsplus_next__1 [r_2]
  in
    case matchExpr_6 of
      (ErlangTuple [v_4, r1_5]) ->
        let    lop_8 = toErl 1
        in let rop_9 = toErl 58
        in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
        in let maxminusrange_11 = BIF.erlang__op_minus [lop_7, range_0]
        in
          case ErlangAtom "true" of
            _ | weakLeq (toErl 0) maxminusrange_11 ->
              case ErlangAtom "true" of
                _ | weakLt v_4 range_0 ->
                  let    rop_14 = toErl 1
                  in let tup_el_12 = BIF.erlang__op_plus [v_4, rop_14]
                  in let tup_el_15 = ErlangTuple [alg_1, r1_5]
                  in ErlangTuple [tup_el_12, tup_el_15]
                _ ->
                  let i_20 = BIF.erlang__op_rem_strict [v_4, range_0]
                  in
                    case ErlangAtom "true" of
                      _ | (ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let lop_21 = BIF.erlang__op_minus [v_4, i_20]
                                  in
                                    BIF.erlang__op_lesserEq
                                      [lop_21, maxminusrange_11])) ->
                        let    rop_27 = toErl 1
                        in let tup_el_25 = BIF.erlang__op_plus [i_20, rop_27]
                        in let tup_el_28 = ErlangTuple [alg_1, r1_5]
                        in ErlangTuple [tup_el_25, tup_el_28]
                      _ ->
                        let arg_32 = ErlangTuple [alg_1, r1_5]
                        in erlps__exsp_uniform__2 [range_0, arg_32]
            _ -> erlps__uniform_range__4 [range_0, alg_1, r1_5, v_4]
      _ -> EXC.badmatch matchExpr_6
erlps__exsp_uniform__2 [arg_39, arg_40] =
  EXC.function_clause unit
erlps__exsp_uniform__2 args =
  EXC.badarity (ErlangFun 2 erlps__exsp_uniform__2) args

erlps__exsss_uniform__2 :: ErlangFun
erlps__exsss_uniform__2 [range_0, (ErlangTuple [alg_1, r_2])] =
  let matchExpr_6 = erlps__exsss_next__1 [r_2]
  in
    case matchExpr_6 of
      (ErlangTuple [v_4, r1_5]) ->
        let    lop_8 = toErl 1
        in let rop_9 = toErl 58
        in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
        in let maxminusrange_11 = BIF.erlang__op_minus [lop_7, range_0]
        in
          case ErlangAtom "true" of
            _ | weakLeq (toErl 0) maxminusrange_11 ->
              case ErlangAtom "true" of
                _ | weakLt v_4 range_0 ->
                  let    rop_14 = toErl 1
                  in let tup_el_12 = BIF.erlang__op_plus [v_4, rop_14]
                  in let tup_el_15 = ErlangTuple [alg_1, r1_5]
                  in ErlangTuple [tup_el_12, tup_el_15]
                _ ->
                  let i_20 = BIF.erlang__op_rem_strict [v_4, range_0]
                  in
                    case ErlangAtom "true" of
                      _ | (ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let lop_21 = BIF.erlang__op_minus [v_4, i_20]
                                  in
                                    BIF.erlang__op_lesserEq
                                      [lop_21, maxminusrange_11])) ->
                        let    rop_27 = toErl 1
                        in let tup_el_25 = BIF.erlang__op_plus [i_20, rop_27]
                        in let tup_el_28 = ErlangTuple [alg_1, r1_5]
                        in ErlangTuple [tup_el_25, tup_el_28]
                      _ ->
                        let arg_32 = ErlangTuple [alg_1, r1_5]
                        in erlps__exsss_uniform__2 [range_0, arg_32]
            _ -> erlps__uniform_range__4 [range_0, alg_1, r1_5, v_4]
      _ -> EXC.badmatch matchExpr_6
erlps__exsss_uniform__2 [arg_39, arg_40] =
  EXC.function_clause unit
erlps__exsss_uniform__2 args =
  EXC.badarity (ErlangFun 2 erlps__exsss_uniform__2) args

erlps__exsplus_jump__1 :: ErlangFun
erlps__exsplus_jump__1 [(ErlangTuple [alg_0, s_1])] =
  let    head_4 = toErl 0
  in let tail_5 = toErl 0
  in let
    arg_6 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "13386170678560663")))
  in let arg_7 = toErl 58
  in let
    matchExpr_10 =
      erlps__exsplus_jump__4
        [s_1, ErlangCons head_4 tail_5, arg_6, arg_7]
  in
    case matchExpr_10 of
      (ErlangTuple [s1_8, as1_9]) ->
        let   
          arg_13 =
            toErl
              (unsafePartial
                 (DM.fromJust (DBI.fromString "235826144310425740")))
        in let arg_14 = toErl 58
        in let
          matchExpr_16 =
            erlps__exsplus_jump__4 [s1_8, as1_9, arg_13, arg_14]
        in
          case matchExpr_16 of
            (ErlangTuple [_, as2_15]) -> ErlangTuple [alg_0, as2_15]
            _ -> EXC.badmatch matchExpr_16
      _ -> EXC.badmatch matchExpr_10
erlps__exsplus_jump__1 [arg_19] = EXC.function_clause unit
erlps__exsplus_jump__1 args =
  EXC.badarity (ErlangFun 1 erlps__exsplus_jump__1) args

erlps__exsplus_jump__4 :: ErlangFun
erlps__exsplus_jump__4 [s_0, as_1, _, (ErlangInt num_2)]
  | (ErlangInt num_2) == (toErl 0) =
  ErlangTuple [s_0, as_1]
erlps__exsplus_jump__4 [s_0, (ErlangCons as0_1 as1_2), j_3, n_4]
  =
  let matchExpr_7 = erlps__exsplus_next__1 [s_0]
  in
    case matchExpr_7 of
      (ErlangTuple [_, ns_6]) ->
        let    lop_12 = toErl 1
        in let rop_13 = toErl 1
        in let lop_11 = BIF.erlang__bsl__2 [lop_12, rop_13]
        in let rop_14 = toErl 1
        in let rop_10 = BIF.erlang__op_minus [lop_11, rop_14]
        in let case_8 = BIF.erlang__band__2 [j_3, rop_10]
        in
          case case_8 of
            (ErlangInt num_15) | (ErlangInt num_15) == (toErl 1) ->
              case s_0 of
                (ErlangCons s0_16 s1_17) ->
                  let    head_21 = BIF.erlang__bxor__2 [as0_1, s0_16]
                  in let tail_24 = BIF.erlang__bxor__2 [as1_2, s1_17]
                  in let rop_29 = toErl 1
                  in let arg_27 = BIF.erlang__bsr__2 [j_3, rop_29]
                  in let rop_32 = toErl 1
                  in let arg_30 = BIF.erlang__op_minus [n_4, rop_32]
                  in
                    erlps__exsplus_jump__4
                      [ns_6, ErlangCons head_21 tail_24, arg_27, arg_30]
                _ -> EXC.badmatch s_0
            (ErlangInt num_33) | (ErlangInt num_33) == (toErl 0) ->
              let    rop_40 = toErl 1
              in let arg_38 = BIF.erlang__bsr__2 [j_3, rop_40]
              in let rop_43 = toErl 1
              in let arg_41 = BIF.erlang__op_minus [n_4, rop_43]
              in
                erlps__exsplus_jump__4
                  [ns_6, ErlangCons as0_1 as1_2, arg_38, arg_41]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_7
erlps__exsplus_jump__4 [arg_44, arg_45, arg_46, arg_47] =
  EXC.function_clause unit
erlps__exsplus_jump__4 args =
  EXC.badarity (ErlangFun 4 erlps__exsplus_jump__4) args

erlps__exs1024_seed__1 :: ErlangFun
erlps__exs1024_seed__1 [l_0] | isEList l_0 =
  let    arg_2 = toErl 16
  in let tup_el_1 = erlps__seed64_nz__2 [arg_2, l_0]
  in ErlangTuple [tup_el_1, ErlangEmptyList]
erlps__exs1024_seed__1 [x_0] | isEInt x_0 =
  let    arg_2 = toErl 16
  in let lop_7 = toErl 1
  in let rop_8 = toErl 64
  in let lop_6 = BIF.erlang__bsl__2 [lop_7, rop_8]
  in let rop_9 = toErl 1
  in let rop_5 = BIF.erlang__op_minus [lop_6, rop_9]
  in let arg_3 = BIF.erlang__band__2 [x_0, rop_5]
  in let tup_el_1 = erlps__seed64__2 [arg_2, arg_3]
  in ErlangTuple [tup_el_1, ErlangEmptyList]
erlps__exs1024_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let    lop_9 = toErl 1
  in let rop_10 = toErl 21
  in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_10]
  in let rop_11 = toErl 1
  in let rop_7 = BIF.erlang__op_minus [lop_8, rop_11]
  in let lop_5 = BIF.erlang__band__2 [a1_0, rop_7]
  in let rop_12 = toErl 1
  in let lop_4 = BIF.erlang__op_plus [lop_5, rop_12]
  in let rop_13 = toErl 2097131
  in let lop_3 = BIF.erlang__op_mult [lop_4, rop_13]
  in let lop_16 = toErl 1
  in let rop_17 = toErl 21
  in let lop_15 = BIF.erlang__bsl__2 [lop_16, rop_17]
  in let rop_18 = toErl 1
  in let rop_14 = BIF.erlang__op_minus [lop_15, rop_18]
  in let b1_19 = BIF.erlang__band__2 [lop_3, rop_14]
  in let lop_26 = toErl 1
  in let rop_27 = toErl 21
  in let lop_25 = BIF.erlang__bsl__2 [lop_26, rop_27]
  in let rop_28 = toErl 1
  in let rop_24 = BIF.erlang__op_minus [lop_25, rop_28]
  in let lop_22 = BIF.erlang__band__2 [a2_1, rop_24]
  in let rop_29 = toErl 1
  in let lop_21 = BIF.erlang__op_plus [lop_22, rop_29]
  in let rop_30 = toErl 2097133
  in let lop_20 = BIF.erlang__op_mult [lop_21, rop_30]
  in let lop_33 = toErl 1
  in let rop_34 = toErl 21
  in let lop_32 = BIF.erlang__bsl__2 [lop_33, rop_34]
  in let rop_35 = toErl 1
  in let rop_31 = BIF.erlang__op_minus [lop_32, rop_35]
  in let b2_36 = BIF.erlang__band__2 [lop_20, rop_31]
  in let lop_43 = toErl 1
  in let rop_44 = toErl 21
  in let lop_42 = BIF.erlang__bsl__2 [lop_43, rop_44]
  in let rop_45 = toErl 1
  in let rop_41 = BIF.erlang__op_minus [lop_42, rop_45]
  in let lop_39 = BIF.erlang__band__2 [a3_2, rop_41]
  in let rop_46 = toErl 1
  in let lop_38 = BIF.erlang__op_plus [lop_39, rop_46]
  in let rop_47 = toErl 2097143
  in let lop_37 = BIF.erlang__op_mult [lop_38, rop_47]
  in let lop_50 = toErl 1
  in let rop_51 = toErl 21
  in let lop_49 = BIF.erlang__bsl__2 [lop_50, rop_51]
  in let rop_52 = toErl 1
  in let rop_48 = BIF.erlang__op_minus [lop_49, rop_52]
  in let b3_53 = BIF.erlang__band__2 [lop_37, rop_48]
  in let rop_60 = toErl 43
  in let lop_58 = BIF.erlang__bsl__2 [b1_19, rop_60]
  in let rop_63 = toErl 22
  in let rop_61 = BIF.erlang__bsl__2 [b2_36, rop_63]
  in let lop_57 = BIF.erlang__bor__2 [lop_58, rop_61]
  in let rop_66 = toErl 1
  in let rop_64 = BIF.erlang__bsl__2 [b3_53, rop_66]
  in let lop_56 = BIF.erlang__bor__2 [lop_57, rop_64]
  in let rop_67 = toErl 1
  in let arg_55 = BIF.erlang__bor__2 [lop_56, rop_67]
  in let tup_el_54 = erlps__exs1024_gen1024__1 [arg_55]
  in ErlangTuple [tup_el_54, ErlangEmptyList]
erlps__exs1024_seed__1 [arg_69] = EXC.function_clause unit
erlps__exs1024_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs1024_seed__1) args

erlps__exs1024_gen1024__1 :: ErlangFun
erlps__exs1024_gen1024__1 [r_0] =
  let arg_1 = toErl 16
  in erlps__exs1024_gen1024__3 [arg_1, r_0, ErlangEmptyList]
erlps__exs1024_gen1024__1 [arg_4] = EXC.function_clause unit
erlps__exs1024_gen1024__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs1024_gen1024__1) args

erlps__exs1024_gen1024__3 :: ErlangFun
erlps__exs1024_gen1024__3 [(ErlangInt num_0), _, l_1]
  | (ErlangInt num_0) == (toErl 0) =
  l_1
erlps__exs1024_gen1024__3 [n_0, r_1, l_2] =
  let matchExpr_6 = erlps__exs64_next__1 [r_1]
  in
    case matchExpr_6 of
      (ErlangTuple [x_4, r2_5]) ->
        let    rop_9 = toErl 1
        in let arg_7 = BIF.erlang__op_minus [n_0, rop_9]
        in erlps__exs1024_gen1024__3 [arg_7, r2_5, ErlangCons x_4 l_2]
      _ -> EXC.badmatch matchExpr_6
erlps__exs1024_gen1024__3 [arg_14, arg_15, arg_16] =
  EXC.function_clause unit
erlps__exs1024_gen1024__3 args =
  EXC.badarity (ErlangFun 3 erlps__exs1024_gen1024__3) args

erlps__exs1024_calc__2 :: ErlangFun
erlps__exs1024_calc__2 [s0_0, s1_1] =
  let    lop_8 = toErl 1
  in let lop_10 = toErl 64
  in let rop_11 = toErl 31
  in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_12 = toErl 1
  in let rop_6 = BIF.erlang__op_minus [lop_7, rop_12]
  in let lop_4 = BIF.erlang__band__2 [s1_1, rop_6]
  in let rop_13 = toErl 31
  in let rop_3 = BIF.erlang__bsl__2 [lop_4, rop_13]
  in let s11_14 = BIF.erlang__bxor__2 [s1_1, rop_3]
  in let rop_18 = toErl 11
  in let rop_16 = BIF.erlang__bsr__2 [s11_14, rop_18]
  in let s12_19 = BIF.erlang__bxor__2 [s11_14, rop_16]
  in let rop_23 = toErl 30
  in let rop_21 = BIF.erlang__bsr__2 [s0_0, rop_23]
  in let s01_24 = BIF.erlang__bxor__2 [s0_0, rop_21]
  in let ns1_27 = BIF.erlang__bxor__2 [s01_24, s12_19]
  in let
    rop_31 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "1181783497276652981")))
  in let lop_29 = BIF.erlang__op_mult [ns1_27, rop_31]
  in let lop_34 = toErl 1
  in let rop_35 = toErl 64
  in let lop_33 = BIF.erlang__bsl__2 [lop_34, rop_35]
  in let rop_36 = toErl 1
  in let rop_32 = BIF.erlang__op_minus [lop_33, rop_36]
  in let tup_el_28 = BIF.erlang__band__2 [lop_29, rop_32]
  in ErlangTuple [tup_el_28, ns1_27]
erlps__exs1024_calc__2 [arg_38, arg_39] =
  EXC.function_clause unit
erlps__exs1024_calc__2 args =
  EXC.badarity (ErlangFun 2 erlps__exs1024_calc__2) args

erlps__exs1024_next__1 :: ErlangFun
erlps__exs1024_next__1 [(ErlangTuple [(ErlangCons s0_0 (ErlangCons s1_1 l3_2)),
                                      rl_3])]
  =
  let matchExpr_8 = erlps__exs1024_calc__2 [s0_0, s1_1]
  in
    case matchExpr_8 of
      (ErlangTuple [x_6, ns1_7]) ->
        let
          tup_el_10 =
            ErlangTuple [ErlangCons ns1_7 l3_2, ErlangCons s0_0 rl_3]
        in ErlangTuple [x_6, tup_el_10]
      _ -> EXC.badmatch matchExpr_8
erlps__exs1024_next__1 [(ErlangTuple [(ErlangCons h_0 (ErlangEmptyList)),
                                      rl_1])]
  =
  let   
    tail_3 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rl_1]
  in let
    arg_6 = ErlangTuple [ErlangCons h_0 tail_3, ErlangEmptyList]
  in erlps__exs1024_next__1 [arg_6]
erlps__exs1024_next__1 [arg_9] = EXC.function_clause unit
erlps__exs1024_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs1024_next__1) args

erlps__exs1024_jump__1 :: ErlangFun
erlps__exs1024_jump__1 [(ErlangTuple [alg_0,
                                      (ErlangTuple [l_1, rl_2])])]
  =
  let    p_4 = BIF.erlang__length__1 [rl_2]
  in let arg_5 = ErlangTuple [l_1, rl_2]
  in let head_9 = toErl 0
  in let head_11 = toErl 0
  in let head_13 = toErl 0
  in let head_15 = toErl 0
  in let head_17 = toErl 0
  in let head_19 = toErl 0
  in let head_21 = toErl 0
  in let head_23 = toErl 0
  in let head_25 = toErl 0
  in let head_27 = toErl 0
  in let head_29 = toErl 0
  in let head_31 = toErl 0
  in let head_33 = toErl 0
  in let head_35 = toErl 0
  in let head_37 = toErl 0
  in let head_39 = toErl 0
  in let
    head_42 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "114527183042123105")))
  in let
    head_44 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "160423628620659260")))
  in let
    head_46 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "284733707589872850")))
  in let
    head_48 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "164435740288387503")))
  in let
    head_50 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "259572741793888962")))
  in let
    head_52 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "215793509705812255")))
  in let
    head_54 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "228241955430903492")))
  in let
    head_56 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "221708554683218499")))
  in let
    head_58 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "212006596549813798")))
  in let
    head_60 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "139215019150089363")))
  in let
    head_62 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "23964000621384961")))
  in let
    head_64 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "55201052708218217")))
  in let
    head_66 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "112969240468397636")))
  in let
    head_68 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "22130735059088892")))
  in let
    head_70 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "244278597799509466")))
  in let
    head_72 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "220175845070832114")))
  in let
    head_74 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "43243288828")))
  in let
    arg_76 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "10185424423732253")))
  in let arg_77 = toErl 58
  in let arg_78 = toErl 1024
  in let
    as_79 =
      erlps__exs1024_jump__6
        [arg_5,
         ErlangCons head_9
           (ErlangCons head_11
              (ErlangCons head_13
                 (ErlangCons head_15
                    (ErlangCons head_17
                       (ErlangCons head_19
                          (ErlangCons head_21
                             (ErlangCons head_23
                                (ErlangCons head_25
                                   (ErlangCons head_27
                                      (ErlangCons head_29
                                         (ErlangCons head_31
                                            (ErlangCons head_33
                                               (ErlangCons head_35
                                                  (ErlangCons head_37
                                                     (ErlangCons head_39
                                                        ErlangEmptyList))))))))))))))),
         ErlangCons head_42
           (ErlangCons head_44
              (ErlangCons head_46
                 (ErlangCons head_48
                    (ErlangCons head_50
                       (ErlangCons head_52
                          (ErlangCons head_54
                             (ErlangCons head_56
                                (ErlangCons head_58
                                   (ErlangCons head_60
                                      (ErlangCons head_62
                                         (ErlangCons head_64
                                            (ErlangCons head_66
                                               (ErlangCons head_68
                                                  (ErlangCons head_70
                                                     (ErlangCons head_72
                                                        (ErlangCons head_74
                                                           ErlangEmptyList)))))))))))))))),
         arg_76, arg_77, arg_78]
  in let lop_81 = toErl 16
  in let arg_80 = BIF.erlang__op_minus [lop_81, p_4]
  in let
    matchExpr_86 =
      BIF.do_remote_fun_call "Lists" "erlps__split__2" [arg_80, as_79]
  in
    case matchExpr_86 of
      (ErlangTuple [asl_84, asr_85]) ->
        let   
          tup_el_90 =
            BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [asr_85]
        in let tup_el_88 = ErlangTuple [asl_84, tup_el_90]
        in ErlangTuple [alg_0, tup_el_88]
      _ -> EXC.badmatch matchExpr_86
erlps__exs1024_jump__1 [arg_92] = EXC.function_clause unit
erlps__exs1024_jump__1 args =
  EXC.badarity (ErlangFun 1 erlps__exs1024_jump__1) args

erlps__exs1024_jump__6 :: ErlangFun
erlps__exs1024_jump__6 [_, as_0, _, _, _, (ErlangInt num_1)]
  | (ErlangInt num_1) == (toErl 0) =
  as_0
erlps__exs1024_jump__6 [s_0, as_1, (ErlangCons h_2 t_3), _,
                        (ErlangInt num_4), tn_5]
  | (ErlangInt num_4) == (toErl 0) =
  let arg_10 = toErl 58
  in erlps__exs1024_jump__6 [s_0, as_1, t_3, h_2, arg_10, tn_5]
erlps__exs1024_jump__6 [(ErlangTuple [l_0, rl_1]), as_2, jl_3,
                        j_4, n_5, tn_6]
  =
  let    arg_7 = ErlangTuple [l_0, rl_1]
  in let matchExpr_11 = erlps__exs1024_next__1 [arg_7]
  in
    case matchExpr_11 of
      (ErlangTuple [_, ns_10]) ->
        let    lop_16 = toErl 1
        in let rop_17 = toErl 1
        in let lop_15 = BIF.erlang__bsl__2 [lop_16, rop_17]
        in let rop_18 = toErl 1
        in let rop_14 = BIF.erlang__op_minus [lop_15, rop_18]
        in let case_12 = BIF.erlang__band__2 [j_4, rop_14]
        in
          case case_12 of
            (ErlangInt num_19) | (ErlangInt num_19) == (toErl 1) ->
              let   
                arg_20 =
                  ErlangFun 2
                    (let
                       lambda_21 [x_24, y_25] = BIF.erlang__bxor__2 [x_24, y_25]
                       lambda_21 [arg_22, arg_23] = EXC.function_clause unit
                       lambda_21 args =
                         EXC.badarity (ErlangFun 2 lambda_21) args
                     in lambda_21)
              in let
                rop_31 =
                  BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rl_1]
              in let arg_29 = BIF.erlang__op_append [l_0, rop_31]
              in let
                as2_33 =
                  BIF.do_remote_fun_call "Lists" "erlps__zipwith__3"
                    [arg_20, as_2, arg_29]
              in let rop_39 = toErl 1
              in let arg_37 = BIF.erlang__bsr__2 [j_4, rop_39]
              in let rop_42 = toErl 1
              in let arg_40 = BIF.erlang__op_minus [n_5, rop_42]
              in let rop_45 = toErl 1
              in let arg_43 = BIF.erlang__op_minus [tn_6, rop_45]
              in
                erlps__exs1024_jump__6
                  [ns_10, as2_33, jl_3, arg_37, arg_40, arg_43]
            (ErlangInt num_46) | (ErlangInt num_46) == (toErl 0) ->
              let    rop_52 = toErl 1
              in let arg_50 = BIF.erlang__bsr__2 [j_4, rop_52]
              in let rop_55 = toErl 1
              in let arg_53 = BIF.erlang__op_minus [n_5, rop_55]
              in let rop_58 = toErl 1
              in let arg_56 = BIF.erlang__op_minus [tn_6, rop_58]
              in
                erlps__exs1024_jump__6
                  [ns_10, as_2, jl_3, arg_50, arg_53, arg_56]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_11
erlps__exs1024_jump__6 [arg_59, arg_60, arg_61, arg_62, arg_63,
                        arg_64]
  =
  EXC.function_clause unit
erlps__exs1024_jump__6 args =
  EXC.badarity (ErlangFun 6 erlps__exs1024_jump__6) args

erlps__exro928_seed__1 :: ErlangFun
erlps__exro928_seed__1 [l_0] | isEList l_0 =
  let    arg_2 = toErl 16
  in let tup_el_1 = erlps__seed58_nz__2 [arg_2, l_0]
  in ErlangTuple [tup_el_1, ErlangEmptyList]
erlps__exro928_seed__1 [x_0] | isEInt x_0 =
  let    arg_2 = toErl 16
  in let lop_7 = toErl 1
  in let rop_8 = toErl 64
  in let lop_6 = BIF.erlang__bsl__2 [lop_7, rop_8]
  in let rop_9 = toErl 1
  in let rop_5 = BIF.erlang__op_minus [lop_6, rop_9]
  in let arg_3 = BIF.erlang__band__2 [x_0, rop_5]
  in let tup_el_1 = erlps__seed58__2 [arg_2, arg_3]
  in ErlangTuple [tup_el_1, ErlangEmptyList]
erlps__exro928_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let    lop_7 = toErl 1
  in let rop_8 = toErl 64
  in let lop_6 = BIF.erlang__bsl__2 [lop_7, rop_8]
  in let rop_9 = toErl 1
  in let rop_5 = BIF.erlang__op_minus [lop_6, rop_9]
  in let arg_3 = BIF.erlang__band__2 [a1_0, rop_5]
  in let matchExpr_12 = erlps__seed58__1 [arg_3]
  in
    case matchExpr_12 of
      (ErlangTuple [s0_10, x0_11]) ->
        let    lop_18 = toErl 1
        in let rop_19 = toErl 64
        in let lop_17 = BIF.erlang__bsl__2 [lop_18, rop_19]
        in let rop_20 = toErl 1
        in let rop_16 = BIF.erlang__op_minus [lop_17, rop_20]
        in let lop_14 = BIF.erlang__band__2 [a2_1, rop_16]
        in let arg_13 = BIF.erlang__bxor__2 [lop_14, x0_11]
        in let matchExpr_24 = erlps__seed58__1 [arg_13]
        in
          case matchExpr_24 of
            (ErlangTuple [s1_22, x1_23]) ->
              let    lop_30 = toErl 1
              in let rop_31 = toErl 64
              in let lop_29 = BIF.erlang__bsl__2 [lop_30, rop_31]
              in let rop_32 = toErl 1
              in let rop_28 = BIF.erlang__op_minus [lop_29, rop_32]
              in let lop_26 = BIF.erlang__band__2 [a3_2, rop_28]
              in let arg_25 = BIF.erlang__bxor__2 [lop_26, x1_23]
              in let matchExpr_36 = erlps__seed58__1 [arg_25]
              in
                case matchExpr_36 of
                  (ErlangTuple [s2_34, x2_35]) ->
                    let    arg_44 = toErl 13
                    in let tail_43 = erlps__seed58__2 [arg_44, x2_35]
                    in
                      ErlangTuple
                        [ErlangCons s0_10
                           (ErlangCons s1_22 (ErlangCons s2_34 tail_43)),
                         ErlangEmptyList]
                  _ -> EXC.badmatch matchExpr_36
            _ -> EXC.badmatch matchExpr_24
      _ -> EXC.badmatch matchExpr_12
erlps__exro928_seed__1 [arg_47] = EXC.function_clause unit
erlps__exro928_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_seed__1) args

erlps__exro928ss_next__1 :: ErlangFun
erlps__exro928ss_next__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangCons s0_1 ss_2)),
                                        rs_3])]
  =
  let   
    sr_8 = erlps__exro928_next_state__4 [ss_2, rs_3, s15_0, s0_1]
  in let lop_17 = toErl 1
  in let lop_19 = toErl 58
  in let rop_20 = toErl 2
  in let rop_18 = BIF.erlang__op_minus [lop_19, rop_20]
  in let lop_16 = BIF.erlang__bsl__2 [lop_17, rop_18]
  in let rop_21 = toErl 1
  in let rop_15 = BIF.erlang__op_minus [lop_16, rop_21]
  in let lop_13 = BIF.erlang__band__2 [s0_1, rop_15]
  in let rop_22 = toErl 2
  in let rop_12 = BIF.erlang__bsl__2 [lop_13, rop_22]
  in let lop_10 = BIF.erlang__op_plus [s0_1, rop_12]
  in let lop_25 = toErl 1
  in let rop_26 = toErl 58
  in let lop_24 = BIF.erlang__bsl__2 [lop_25, rop_26]
  in let rop_27 = toErl 1
  in let rop_23 = BIF.erlang__op_minus [lop_24, rop_27]
  in let v_0_28 = BIF.erlang__band__2 [lop_10, rop_23]
  in let lop_34 = toErl 1
  in let lop_36 = toErl 58
  in let rop_37 = toErl 7
  in let rop_35 = BIF.erlang__op_minus [lop_36, rop_37]
  in let lop_33 = BIF.erlang__bsl__2 [lop_34, rop_35]
  in let rop_38 = toErl 1
  in let rop_32 = BIF.erlang__op_minus [lop_33, rop_38]
  in let lop_30 = BIF.erlang__band__2 [v_0_28, rop_32]
  in let rop_39 = toErl 7
  in let lop_29 = BIF.erlang__bsl__2 [lop_30, rop_39]
  in let lop_43 = toErl 58
  in let rop_44 = toErl 7
  in let rop_42 = BIF.erlang__op_minus [lop_43, rop_44]
  in let rop_40 = BIF.erlang__bsr__2 [v_0_28, rop_42]
  in let v_1_45 = BIF.erlang__bor__2 [lop_29, rop_40]
  in let
    lop_53 = toErl 1
    lop_55 = toErl 58
    rop_56 = toErl 3
    rop_54 = BIF.erlang__op_minus [lop_55, rop_56]
    lop_52 = BIF.erlang__bsl__2 [lop_53, rop_54]
    rop_57 = toErl 1
    rop_51 = BIF.erlang__op_minus [lop_52, rop_57]
    lop_49 = BIF.erlang__band__2 [v_1_45, rop_51]
    rop_58 = toErl 3
    rop_48 = BIF.erlang__bsl__2 [lop_49, rop_58]
    lop_46 = BIF.erlang__op_plus [v_1_45, rop_48]
    lop_61 = toErl 1
    rop_62 = toErl 58
    lop_60 = BIF.erlang__bsl__2 [lop_61, rop_62]
    rop_63 = toErl 1
    rop_59 = BIF.erlang__op_minus [lop_60, rop_63]
    tup_el_9 = BIF.erlang__band__2 [lop_46, rop_59]
  in ErlangTuple [tup_el_9, sr_8]
erlps__exro928ss_next__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangEmptyList)),
                                        rs_1])]
  =
  let   
    tail_5 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rs_1]
  in let
    arg_2 = ErlangTuple [ErlangCons s15_0 tail_5, ErlangEmptyList]
  in erlps__exro928ss_next__1 [arg_2]
erlps__exro928ss_next__1 [arg_8] = EXC.function_clause unit
erlps__exro928ss_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928ss_next__1) args

erlps__exro928_next__1 :: ErlangFun
erlps__exro928_next__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangCons s0_1 ss_2)),
                                      rs_3])]
  =
  let   
    sr_8 = erlps__exro928_next_state__4 [ss_2, rs_3, s15_0, s0_1]
  in let tup_el_9 = ErlangTuple [s15_0, s0_1]
  in ErlangTuple [tup_el_9, sr_8]
erlps__exro928_next__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangEmptyList)),
                                      rs_1])]
  =
  let   
    tail_5 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rs_1]
  in let
    arg_2 = ErlangTuple [ErlangCons s15_0 tail_5, ErlangEmptyList]
  in erlps__exro928_next__1 [arg_2]
erlps__exro928_next__1 [arg_8] = EXC.function_clause unit
erlps__exro928_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_next__1) args

erlps__exro928_next_state__1 :: ErlangFun
erlps__exro928_next_state__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangCons s0_1 ss_2)),
                                            rs_3])]
  =
  erlps__exro928_next_state__4 [ss_2, rs_3, s15_0, s0_1]
erlps__exro928_next_state__1 [(ErlangTuple [(ErlangCons s15_0 (ErlangEmptyList)),
                                            rs_1])]
  =
  let
    matchExpr_5 =
      BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rs_1]
  in
    case matchExpr_5 of
      (ErlangCons s0_3 ss_4) ->
        erlps__exro928_next_state__4 [ss_4, ErlangEmptyList, s15_0, s0_3]
      _ -> EXC.badmatch matchExpr_5
erlps__exro928_next_state__1 [arg_10] = EXC.function_clause unit
erlps__exro928_next_state__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_next_state__1) args

erlps__exro928_next_state__4 :: ErlangFun
erlps__exro928_next_state__4 [ss_0, rs_1, s15_2, s0_3] =
  let    q_6 = BIF.erlang__bxor__2 [s15_2, s0_3]
  in let lop_14 = toErl 1
  in let lop_16 = toErl 58
  in let rop_17 = toErl 44
  in let rop_15 = BIF.erlang__op_minus [lop_16, rop_17]
  in let lop_13 = BIF.erlang__bsl__2 [lop_14, rop_15]
  in let rop_18 = toErl 1
  in let rop_12 = BIF.erlang__op_minus [lop_13, rop_18]
  in let lop_10 = BIF.erlang__band__2 [s0_3, rop_12]
  in let rop_19 = toErl 44
  in let lop_9 = BIF.erlang__bsl__2 [lop_10, rop_19]
  in let lop_23 = toErl 58
  in let rop_24 = toErl 44
  in let rop_22 = BIF.erlang__op_minus [lop_23, rop_24]
  in let rop_20 = BIF.erlang__bsr__2 [s0_3, rop_22]
  in let lop_8 = BIF.erlang__bor__2 [lop_9, rop_20]
  in let lop_7 = BIF.erlang__bxor__2 [lop_8, q_6]
  in let lop_31 = toErl 1
  in let lop_33 = toErl 58
  in let rop_34 = toErl 9
  in let rop_32 = BIF.erlang__op_minus [lop_33, rop_34]
  in let lop_30 = BIF.erlang__bsl__2 [lop_31, rop_32]
  in let rop_35 = toErl 1
  in let rop_29 = BIF.erlang__op_minus [lop_30, rop_35]
  in let lop_27 = BIF.erlang__band__2 [q_6, rop_29]
  in let rop_36 = toErl 9
  in let rop_26 = BIF.erlang__bsl__2 [lop_27, rop_36]
  in let news15_37 = BIF.erlang__bxor__2 [lop_7, rop_26]
  in let lop_43 = toErl 1
  in let lop_45 = toErl 58
  in let rop_46 = toErl 45
  in let rop_44 = BIF.erlang__op_minus [lop_45, rop_46]
  in let lop_42 = BIF.erlang__bsl__2 [lop_43, rop_44]
  in let rop_47 = toErl 1
  in let rop_41 = BIF.erlang__op_minus [lop_42, rop_47]
  in let lop_39 = BIF.erlang__band__2 [q_6, rop_41]
  in let rop_48 = toErl 45
  in let lop_38 = BIF.erlang__bsl__2 [lop_39, rop_48]
  in let lop_52 = toErl 58
  in let rop_53 = toErl 45
  in let rop_51 = BIF.erlang__op_minus [lop_52, rop_53]
  in let rop_49 = BIF.erlang__bsr__2 [q_6, rop_51]
  in let news0_54 = BIF.erlang__bor__2 [lop_38, rop_49]
  in
    ErlangTuple [ErlangCons news0_54 ss_0, ErlangCons news15_37 rs_1]
erlps__exro928_next_state__4 [arg_61, arg_62, arg_63, arg_64] =
  EXC.function_clause unit
erlps__exro928_next_state__4 args =
  EXC.badarity (ErlangFun 4 erlps__exro928_next_state__4) args

erlps__exro928ss_uniform__1 :: ErlangFun
erlps__exro928ss_uniform__1 [(ErlangTuple [alg_0, sr_1])] =
  let matchExpr_5 = erlps__exro928ss_next__1 [sr_1]
  in
    case matchExpr_5 of
      (ErlangTuple [v_3, newsr_4]) ->
        let    lop_10 = toErl 58
        in let rop_11 = toErl 53
        in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
        in let lop_7 = BIF.erlang__bsr__2 [v_3, rop_9]
        in let rop_12 = ErlangFloat 1.11022302462515654042e-16
        in let tup_el_6 = BIF.erlang__op_mult [lop_7, rop_12]
        in let tup_el_13 = ErlangTuple [alg_0, newsr_4]
        in ErlangTuple [tup_el_6, tup_el_13]
      _ -> EXC.badmatch matchExpr_5
erlps__exro928ss_uniform__1 [arg_16] = EXC.function_clause unit
erlps__exro928ss_uniform__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928ss_uniform__1) args

erlps__exro928ss_uniform__2 :: ErlangFun
erlps__exro928ss_uniform__2 [range_0,
                             (ErlangTuple [alg_1, sr_2])]
  =
  let matchExpr_6 = erlps__exro928ss_next__1 [sr_2]
  in
    case matchExpr_6 of
      (ErlangTuple [v_4, newsr_5]) ->
        let    lop_8 = toErl 1
        in let rop_9 = toErl 58
        in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
        in let maxminusrange_11 = BIF.erlang__op_minus [lop_7, range_0]
        in
          case ErlangAtom "true" of
            _ | weakLeq (toErl 0) maxminusrange_11 ->
              case ErlangAtom "true" of
                _ | weakLt v_4 range_0 ->
                  let    rop_14 = toErl 1
                  in let tup_el_12 = BIF.erlang__op_plus [v_4, rop_14]
                  in let tup_el_15 = ErlangTuple [alg_1, newsr_5]
                  in ErlangTuple [tup_el_12, tup_el_15]
                _ ->
                  let i_20 = BIF.erlang__op_rem_strict [v_4, range_0]
                  in
                    case ErlangAtom "true" of
                      _ | (ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let lop_21 = BIF.erlang__op_minus [v_4, i_20]
                                  in
                                    BIF.erlang__op_lesserEq
                                      [lop_21, maxminusrange_11])) ->
                        let    rop_27 = toErl 1
                        in let tup_el_25 = BIF.erlang__op_plus [i_20, rop_27]
                        in let tup_el_28 = ErlangTuple [alg_1, newsr_5]
                        in ErlangTuple [tup_el_25, tup_el_28]
                      _ ->
                        let arg_32 = ErlangTuple [alg_1, newsr_5]
                        in erlps__exro928ss_uniform__2 [range_0, arg_32]
            _ -> erlps__uniform_range__4 [range_0, alg_1, newsr_5, v_4]
      _ -> EXC.badmatch matchExpr_6
erlps__exro928ss_uniform__2 [arg_39, arg_40] =
  EXC.function_clause unit
erlps__exro928ss_uniform__2 args =
  EXC.badarity (ErlangFun 2 erlps__exro928ss_uniform__2) args

erlps__exro928_jump__1 :: ErlangFun
erlps__exro928_jump__1 [(ErlangTuple [alg_0, sr_1])] =
  let tup_el_3 = erlps__exro928_jump_2pow512__1 [sr_1]
  in ErlangTuple [alg_0, tup_el_3]
erlps__exro928_jump__1 [arg_5] = EXC.function_clause unit
erlps__exro928_jump__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_jump__1) args

erlps__exro928_jump_2pow512__1 :: ErlangFun
erlps__exro928_jump_2pow512__1 [sr_0] =
  let    arg_2 = ErlangFun 1 erlps__exro928_next_state__1
  in let
    head_4 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "290573448171827402")))
  in let
    head_6 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "382251779910418577")))
  in let
    head_8 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "423857156240780192")))
  in let
    head_10 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "317638803078791815")))
  in let
    head_12 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "312577798172065765")))
  in let
    head_14 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "305801842905235492")))
  in let
    head_16 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "450887821400921554")))
  in let
    head_18 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "490154825290594607")))
  in let
    head_20 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "507224882549817556")))
  in let
    head_22 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "305131922350994371")))
  in let
    head_24 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "524004876356613068")))
  in let
    head_26 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "399286492428034246")))
  in let
    head_28 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "556129459533271918")))
  in let
    head_30 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "302163523288674092")))
  in let
    head_32 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "295571835370094372")))
  in let
    head_34 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "487547435355635071")))
  in
    erlps__polyjump__3
      [sr_0, arg_2,
       ErlangCons head_4
         (ErlangCons head_6
            (ErlangCons head_8
               (ErlangCons head_10
                  (ErlangCons head_12
                     (ErlangCons head_14
                        (ErlangCons head_16
                           (ErlangCons head_18
                              (ErlangCons head_20
                                 (ErlangCons head_22
                                    (ErlangCons head_24
                                       (ErlangCons head_26
                                          (ErlangCons head_28
                                             (ErlangCons head_30
                                                (ErlangCons head_32
                                                   (ErlangCons head_34
                                                      ErlangEmptyList)))))))))))))))]
erlps__exro928_jump_2pow512__1 [arg_36] =
  EXC.function_clause unit
erlps__exro928_jump_2pow512__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_jump_2pow512__1) args

erlps__exro928_jump_2pow20__1 :: ErlangFun
erlps__exro928_jump_2pow20__1 [sr_0] =
  let    arg_2 = ErlangFun 1 erlps__exro928_next_state__1
  in let
    head_4 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "412473694820566502")))
  in let
    head_6 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "432883605991317039")))
  in let
    head_8 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "525373508288112196")))
  in let
    head_10 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "403915169708599875")))
  in let
    head_12 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "319067783491633768")))
  in let
    head_14 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "301226760020322060")))
  in let
    head_16 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "311627678308842608")))
  in let
    head_18 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "376040681981803602")))
  in let
    head_20 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "339701046172540810")))
  in let
    head_22 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "406476937554306621")))
  in let
    head_24 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "319178240279900411")))
  in let
    head_26 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "538961455727032748")))
  in let
    head_28 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "343829982822907227")))
  in let
    head_30 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "562090186051299616")))
  in let
    head_32 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "294421712295949406")))
  in let
    head_34 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "517056752316592047")))
  in
    erlps__polyjump__3
      [sr_0, arg_2,
       ErlangCons head_4
         (ErlangCons head_6
            (ErlangCons head_8
               (ErlangCons head_10
                  (ErlangCons head_12
                     (ErlangCons head_14
                        (ErlangCons head_16
                           (ErlangCons head_18
                              (ErlangCons head_20
                                 (ErlangCons head_22
                                    (ErlangCons head_24
                                       (ErlangCons head_26
                                          (ErlangCons head_28
                                             (ErlangCons head_30
                                                (ErlangCons head_32
                                                   (ErlangCons head_34
                                                      ErlangEmptyList)))))))))))))))]
erlps__exro928_jump_2pow20__1 [arg_36] = EXC.function_clause unit
erlps__exro928_jump_2pow20__1 args =
  EXC.badarity (ErlangFun 1 erlps__exro928_jump_2pow20__1) args

erlps__exrop_seed__1 :: ErlangFun
erlps__exrop_seed__1 [l_0] | isEList l_0 =
  let    arg_1 = toErl 2
  in let matchExpr_5 = erlps__seed58_nz__2 [arg_1, l_0]
  in
    case matchExpr_5 of
      (ErlangCons s0_3 (ErlangCons s1_4 (ErlangEmptyList))) ->
        ErlangCons s0_3 s1_4
      _ -> EXC.badmatch matchExpr_5
erlps__exrop_seed__1 [x_0] | isEInt x_0 =
  let    arg_1 = toErl 2
  in let lop_6 = toErl 1
  in let rop_7 = toErl 64
  in let lop_5 = BIF.erlang__bsl__2 [lop_6, rop_7]
  in let rop_8 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_8]
  in let arg_2 = BIF.erlang__band__2 [x_0, rop_4]
  in let matchExpr_11 = erlps__seed58__2 [arg_1, arg_2]
  in
    case matchExpr_11 of
      (ErlangCons s0_9 (ErlangCons s1_10 (ErlangEmptyList))) ->
        ErlangCons s0_9 s1_10
      _ -> EXC.badmatch matchExpr_11
erlps__exrop_seed__1 [(ErlangTuple [a1_0, a2_1, a3_2])] =
  let   
    rop_7 =
      toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967197")))
  in let lop_5 = BIF.erlang__op_mult [a1_0, rop_7]
  in let rop_8 = toErl 1
  in let lop_4 = BIF.erlang__op_plus [lop_5, rop_8]
  in let lop_11 = toErl 1
  in let rop_12 = toErl 58
  in let lop_10 = BIF.erlang__bsl__2 [lop_11, rop_12]
  in let rop_13 = toErl 1
  in let rop_9 = BIF.erlang__op_minus [lop_10, rop_13]
  in let arg_3 = BIF.erlang__band__2 [lop_4, rop_9]
  in let
    rop_18 =
      toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967231")))
  in let lop_16 = BIF.erlang__op_mult [a2_1, rop_18]
  in let rop_19 = toErl 1
  in let lop_15 = BIF.erlang__op_plus [lop_16, rop_19]
  in let lop_22 = toErl 1
  in let rop_23 = toErl 58
  in let lop_21 = BIF.erlang__bsl__2 [lop_22, rop_23]
  in let rop_24 = toErl 1
  in let rop_20 = BIF.erlang__op_minus [lop_21, rop_24]
  in let arg_14 = BIF.erlang__band__2 [lop_15, rop_20]
  in let matchExpr_26 = erlps__exrop_next_s__2 [arg_3, arg_14]
  in
    case matchExpr_26 of
      (ErlangCons _ s1_25) ->
        let   
          rop_31 =
            toErl (unsafePartial (DM.fromJust (DBI.fromString "4294967279")))
        in let lop_29 = BIF.erlang__op_mult [a3_2, rop_31]
        in let rop_32 = toErl 1
        in let lop_28 = BIF.erlang__op_plus [lop_29, rop_32]
        in let lop_35 = toErl 1
        in let rop_36 = toErl 58
        in let lop_34 = BIF.erlang__bsl__2 [lop_35, rop_36]
        in let rop_37 = toErl 1
        in let rop_33 = BIF.erlang__op_minus [lop_34, rop_37]
        in let arg_27 = BIF.erlang__band__2 [lop_28, rop_33]
        in erlps__exrop_next_s__2 [arg_27, s1_25]
      _ -> EXC.badmatch matchExpr_26
erlps__exrop_seed__1 [arg_39] = EXC.function_clause unit
erlps__exrop_seed__1 args =
  EXC.badarity (ErlangFun 1 erlps__exrop_seed__1) args

erlps__exrop_next_s__2 :: ErlangFun
erlps__exrop_next_s__2 [s0_0, s1_1] =
  let    s1_a_4 = BIF.erlang__bxor__2 [s1_1, s0_0]
  in let lop_13 = toErl 1
  in let lop_15 = toErl 58
  in let rop_16 = toErl 24
  in let rop_14 = BIF.erlang__op_minus [lop_15, rop_16]
  in let lop_12 = BIF.erlang__bsl__2 [lop_13, rop_14]
  in let rop_17 = toErl 1
  in let rop_11 = BIF.erlang__op_minus [lop_12, rop_17]
  in let lop_9 = BIF.erlang__band__2 [s0_0, rop_11]
  in let rop_18 = toErl 24
  in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_18]
  in let lop_22 = toErl 58
  in let rop_23 = toErl 24
  in let rop_21 = BIF.erlang__op_minus [lop_22, rop_23]
  in let rop_19 = BIF.erlang__bsr__2 [s0_0, rop_21]
  in let lop_7 = BIF.erlang__bor__2 [lop_8, rop_19]
  in let lop_6 = BIF.erlang__bxor__2 [lop_7, s1_a_4]
  in let lop_30 = toErl 1
  in let lop_32 = toErl 58
  in let rop_33 = toErl 2
  in let rop_31 = BIF.erlang__op_minus [lop_32, rop_33]
  in let lop_29 = BIF.erlang__bsl__2 [lop_30, rop_31]
  in let rop_34 = toErl 1
  in let rop_28 = BIF.erlang__op_minus [lop_29, rop_34]
  in let lop_26 = BIF.erlang__band__2 [s1_a_4, rop_28]
  in let rop_35 = toErl 2
  in let rop_25 = BIF.erlang__bsl__2 [lop_26, rop_35]
  in let head_5 = BIF.erlang__bxor__2 [lop_6, rop_25]
  in let lop_42 = toErl 1
  in let lop_44 = toErl 58
  in let rop_45 = toErl 35
  in let rop_43 = BIF.erlang__op_minus [lop_44, rop_45]
  in let lop_41 = BIF.erlang__bsl__2 [lop_42, rop_43]
  in let rop_46 = toErl 1
  in let rop_40 = BIF.erlang__op_minus [lop_41, rop_46]
  in let lop_38 = BIF.erlang__band__2 [s1_a_4, rop_40]
  in let rop_47 = toErl 35
  in let lop_37 = BIF.erlang__bsl__2 [lop_38, rop_47]
  in let lop_51 = toErl 58
  in let rop_52 = toErl 35
  in let rop_50 = BIF.erlang__op_minus [lop_51, rop_52]
  in let rop_48 = BIF.erlang__bsr__2 [s1_a_4, rop_50]
  in let tail_36 = BIF.erlang__bor__2 [lop_37, rop_48]
  in ErlangCons head_5 tail_36
erlps__exrop_next_s__2 [arg_53, arg_54] =
  EXC.function_clause unit
erlps__exrop_next_s__2 args =
  EXC.badarity (ErlangFun 2 erlps__exrop_next_s__2) args

erlps__exrop_next__1 :: ErlangFun
erlps__exrop_next__1 [(ErlangCons s0_0 s1_1)] =
  let    lop_3 = BIF.erlang__op_plus [s0_0, s1_1]
  in let lop_8 = toErl 1
  in let rop_9 = toErl 58
  in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
  in let rop_10 = toErl 1
  in let rop_6 = BIF.erlang__op_minus [lop_7, rop_10]
  in let tup_el_2 = BIF.erlang__band__2 [lop_3, rop_6]
  in let s1_a_14 = BIF.erlang__bxor__2 [s1_1, s0_0]
  in let
    lop_23 = toErl 1
    lop_25 = toErl 58
    rop_26 = toErl 24
    rop_24 = BIF.erlang__op_minus [lop_25, rop_26]
    lop_22 = BIF.erlang__bsl__2 [lop_23, rop_24]
    rop_27 = toErl 1
    rop_21 = BIF.erlang__op_minus [lop_22, rop_27]
    lop_19 = BIF.erlang__band__2 [s0_0, rop_21]
    rop_28 = toErl 24
    lop_18 = BIF.erlang__bsl__2 [lop_19, rop_28]
    lop_32 = toErl 58
    rop_33 = toErl 24
    rop_31 = BIF.erlang__op_minus [lop_32, rop_33]
    rop_29 = BIF.erlang__bsr__2 [s0_0, rop_31]
    lop_17 = BIF.erlang__bor__2 [lop_18, rop_29]
    lop_16 = BIF.erlang__bxor__2 [lop_17, s1_a_14]
    lop_40 = toErl 1
    lop_42 = toErl 58
    rop_43 = toErl 2
    rop_41 = BIF.erlang__op_minus [lop_42, rop_43]
    lop_39 = BIF.erlang__bsl__2 [lop_40, rop_41]
    rop_44 = toErl 1
    rop_38 = BIF.erlang__op_minus [lop_39, rop_44]
    lop_36 = BIF.erlang__band__2 [s1_a_14, rop_38]
    rop_45 = toErl 2
    rop_35 = BIF.erlang__bsl__2 [lop_36, rop_45]
    head_15 = BIF.erlang__bxor__2 [lop_16, rop_35]
    lop_52 = toErl 1
    lop_54 = toErl 58
    rop_55 = toErl 35
    rop_53 = BIF.erlang__op_minus [lop_54, rop_55]
    lop_51 = BIF.erlang__bsl__2 [lop_52, rop_53]
    rop_56 = toErl 1
    rop_50 = BIF.erlang__op_minus [lop_51, rop_56]
    lop_48 = BIF.erlang__band__2 [s1_a_14, rop_50]
    rop_57 = toErl 35
    lop_47 = BIF.erlang__bsl__2 [lop_48, rop_57]
    lop_61 = toErl 58
    rop_62 = toErl 35
    rop_60 = BIF.erlang__op_minus [lop_61, rop_62]
    rop_58 = BIF.erlang__bsr__2 [s1_a_14, rop_60]
    tail_46 = BIF.erlang__bor__2 [lop_47, rop_58]
  in ErlangTuple [tup_el_2, ErlangCons head_15 tail_46]
erlps__exrop_next__1 [arg_63] = EXC.function_clause unit
erlps__exrop_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__exrop_next__1) args

erlps__exrop_uniform__1 :: ErlangFun
erlps__exrop_uniform__1 [(ErlangTuple [alg_0, r_1])] =
  let matchExpr_5 = erlps__exrop_next__1 [r_1]
  in
    case matchExpr_5 of
      (ErlangTuple [v_3, r1_4]) ->
        let    lop_10 = toErl 58
        in let rop_11 = toErl 53
        in let rop_9 = BIF.erlang__op_minus [lop_10, rop_11]
        in let lop_7 = BIF.erlang__bsr__2 [v_3, rop_9]
        in let rop_12 = ErlangFloat 1.11022302462515654042e-16
        in let tup_el_6 = BIF.erlang__op_mult [lop_7, rop_12]
        in let tup_el_13 = ErlangTuple [alg_0, r1_4]
        in ErlangTuple [tup_el_6, tup_el_13]
      _ -> EXC.badmatch matchExpr_5
erlps__exrop_uniform__1 [arg_16] = EXC.function_clause unit
erlps__exrop_uniform__1 args =
  EXC.badarity (ErlangFun 1 erlps__exrop_uniform__1) args

erlps__exrop_uniform__2 :: ErlangFun
erlps__exrop_uniform__2 [range_0, (ErlangTuple [alg_1, r_2])] =
  let matchExpr_6 = erlps__exrop_next__1 [r_2]
  in
    case matchExpr_6 of
      (ErlangTuple [v_4, r1_5]) ->
        let    lop_8 = toErl 1
        in let rop_9 = toErl 58
        in let lop_7 = BIF.erlang__bsl__2 [lop_8, rop_9]
        in let maxminusrange_11 = BIF.erlang__op_minus [lop_7, range_0]
        in
          case ErlangAtom "true" of
            _ | weakLeq (toErl 0) maxminusrange_11 ->
              case ErlangAtom "true" of
                _ | weakLt v_4 range_0 ->
                  let    rop_14 = toErl 1
                  in let tup_el_12 = BIF.erlang__op_plus [v_4, rop_14]
                  in let tup_el_15 = ErlangTuple [alg_1, r1_5]
                  in ErlangTuple [tup_el_12, tup_el_15]
                _ ->
                  let i_20 = BIF.erlang__op_rem_strict [v_4, range_0]
                  in
                    case ErlangAtom "true" of
                      _ | (ErlangAtom "true") ==
                            (falsifyErrors
                               (\ _ ->
                                  let lop_21 = BIF.erlang__op_minus [v_4, i_20]
                                  in
                                    BIF.erlang__op_lesserEq
                                      [lop_21, maxminusrange_11])) ->
                        let    rop_27 = toErl 1
                        in let tup_el_25 = BIF.erlang__op_plus [i_20, rop_27]
                        in let tup_el_28 = ErlangTuple [alg_1, r1_5]
                        in ErlangTuple [tup_el_25, tup_el_28]
                      _ ->
                        let arg_32 = ErlangTuple [alg_1, r1_5]
                        in erlps__exrop_uniform__2 [range_0, arg_32]
            _ -> erlps__uniform_range__4 [range_0, alg_1, r1_5, v_4]
      _ -> EXC.badmatch matchExpr_6
erlps__exrop_uniform__2 [arg_39, arg_40] =
  EXC.function_clause unit
erlps__exrop_uniform__2 args =
  EXC.badarity (ErlangFun 2 erlps__exrop_uniform__2) args

erlps__exrop_jump__1 :: ErlangFun
erlps__exrop_jump__1 [(ErlangTuple [alg_0, s_1])] =
  let    lop_4 = toErl 1
  in let rop_5 = toErl 58
  in let lop_3 = BIF.erlang__bsl__2 [lop_4, rop_5]
  in let
    lop_7 =
      toErl
        (unsafePartial
           (DM.fromJust
              (DBI.fromString "49452476321943384982939338509431082")))
  in let lop_10 = toErl 1
  in let rop_11 = toErl 58
  in let lop_9 = BIF.erlang__bsl__2 [lop_10, rop_11]
  in let rop_12 = toErl 1
  in let rop_8 = BIF.erlang__op_minus [lop_9, rop_12]
  in let rop_6 = BIF.erlang__band__2 [lop_7, rop_8]
  in let head_2 = BIF.erlang__bor__2 [lop_3, rop_6]
  in let
    lop_15 =
      toErl
        (unsafePartial
           (DM.fromJust
              (DBI.fromString "49452476321943384982939338509431082")))
  in let rop_16 = toErl 58
  in let head_14 = BIF.erlang__bsr__2 [lop_15, rop_16]
  in
    case ErlangCons head_2 (ErlangCons head_14 ErlangEmptyList) of
      (ErlangCons j_18 js_19) ->
        let    arg_24 = toErl 0
        in let arg_25 = toErl 0
        in let
          tup_el_22 =
            erlps__exrop_jump__5 [s_1, arg_24, arg_25, j_18, js_19]
        in ErlangTuple [alg_0, tup_el_22]
      _ ->
        EXC.badmatch
          (ErlangCons head_2 (ErlangCons head_14 ErlangEmptyList))
erlps__exrop_jump__1 [arg_28] = EXC.function_clause unit
erlps__exrop_jump__1 args =
  EXC.badarity (ErlangFun 1 erlps__exrop_jump__1) args

erlps__exrop_jump__5 :: ErlangFun
erlps__exrop_jump__5 [_s_0, s0_1, s1_2, (ErlangInt num_3),
                      (ErlangEmptyList)]
  | (ErlangInt num_3) == (toErl 0) =
  ErlangCons s0_1 s1_2
erlps__exrop_jump__5 [s_0, s0_1, s1_2, (ErlangInt num_3),
                      (ErlangCons j_4 js_5)]
  | (ErlangInt num_3) == (toErl 1) =
  erlps__exrop_jump__5 [s_0, s0_1, s1_2, j_4, js_5]
erlps__exrop_jump__5 [_s_2@(ErlangCons s__0_0 s__1_1), s0_3,
                      s1_4, j_5, js_6]
  =
  let    lop_11 = toErl 1
  in let rop_12 = toErl 1
  in let lop_10 = BIF.erlang__bsl__2 [lop_11, rop_12]
  in let rop_13 = toErl 1
  in let rop_9 = BIF.erlang__op_minus [lop_10, rop_13]
  in let case_7 = BIF.erlang__band__2 [j_5, rop_9]
  in
    case case_7 of
      (ErlangInt num_14) | (ErlangInt num_14) == (toErl 1) ->
        let    news_17 = erlps__exrop_next_s__2 [s__0_0, s__1_1]
        in let arg_19 = BIF.erlang__bxor__2 [s0_3, s__0_0]
        in let arg_22 = BIF.erlang__bxor__2 [s1_4, s__1_1]
        in let rop_27 = toErl 1
        in let arg_25 = BIF.erlang__bsr__2 [j_5, rop_27]
        in erlps__exrop_jump__5 [news_17, arg_19, arg_22, arg_25, js_6]
      (ErlangInt num_29) | (ErlangInt num_29) == (toErl 0) ->
        let    news_32 = erlps__exrop_next_s__2 [s__0_0, s__1_1]
        in let rop_38 = toErl 1
        in let arg_36 = BIF.erlang__bsr__2 [j_5, rop_38]
        in erlps__exrop_jump__5 [news_32, s0_3, s1_4, arg_36, js_6]
      something_else -> EXC.case_clause something_else
erlps__exrop_jump__5 [arg_40, arg_41, arg_42, arg_43, arg_44] =
  EXC.function_clause unit
erlps__exrop_jump__5 args =
  EXC.badarity (ErlangFun 5 erlps__exrop_jump__5) args

erlps__seed58_nz__2 :: ErlangFun
erlps__seed58_nz__2 [n_0, ss_1] =
  let arg_4 = toErl 58
  in erlps__seed_nz__4 [n_0, ss_1, arg_4, ErlangAtom "false"]
erlps__seed58_nz__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__seed58_nz__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed58_nz__2) args

erlps__seed64_nz__2 :: ErlangFun
erlps__seed64_nz__2 [n_0, ss_1] =
  let arg_4 = toErl 64
  in erlps__seed_nz__4 [n_0, ss_1, arg_4, ErlangAtom "false"]
erlps__seed64_nz__2 [arg_6, arg_7] = EXC.function_clause unit
erlps__seed64_nz__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed64_nz__2) args

erlps__seed_nz__4 :: ErlangFun
erlps__seed_nz__4 [_n_0, (ErlangEmptyList), _m_1,
                   (ErlangAtom "false")]
  =
  BIF.erlang__error__1 [ErlangAtom "zero_seed"]
erlps__seed_nz__4 [(ErlangInt num_0), (ErlangCons _ _), _m_1,
                   _nz_2]
  | (ErlangInt num_0) == (toErl 0) =
  BIF.erlang__error__1 [ErlangAtom "too_many_seed_integers"]
erlps__seed_nz__4 [(ErlangInt num_0), (ErlangEmptyList), _m_1,
                   _nz_2]
  | (ErlangInt num_0) == (toErl 0) =
  ErlangEmptyList
erlps__seed_nz__4 [n_0, (ErlangEmptyList), m_1,
                   (ErlangAtom "true")]
  =
  let    head_2 = toErl 0
  in let rop_6 = toErl 1
  in let arg_4 = BIF.erlang__op_minus [n_0, rop_6]
  in let
    tail_3 =
      erlps__seed_nz__4
        [arg_4, ErlangEmptyList, m_1, ErlangAtom "true"]
  in ErlangCons head_2 tail_3
erlps__seed_nz__4 [n_0, (ErlangCons s_1 ss_2), m_3, nz_4] =
  case ErlangAtom "true" of
    _ | isEInt s_1 ->
      let    lop_8 = toErl 1
      in let lop_7 = BIF.erlang__bsl__2 [lop_8, m_3]
      in let rop_10 = toErl 1
      in let rop_6 = BIF.erlang__op_minus [lop_7, rop_10]
      in let r_11 = BIF.erlang__band__2 [s_1, rop_6]
      in let rop_16 = toErl 1
      in let arg_14 = BIF.erlang__op_minus [n_0, rop_16]
      in let
        arg_19 =
          case nz_4 of
            (ErlangAtom "true") -> ErlangAtom "true"
            (ErlangAtom "false") ->
              let rop_22 = toErl 0
              in BIF.erlang__op_exactNeq [r_11, rop_22]
            _ -> EXC.badarg1 nz_4
      in let tail_13 = erlps__seed_nz__4 [arg_14, ss_2, m_3, arg_19]
      in ErlangCons r_11 tail_13
    _ -> BIF.erlang__error__1 [ErlangAtom "non_integer_seed"]
erlps__seed_nz__4 [arg_24, arg_25, arg_26, arg_27] =
  EXC.function_clause unit
erlps__seed_nz__4 args =
  EXC.badarity (ErlangFun 4 erlps__seed_nz__4) args

erlps__seed58__2 :: ErlangFun
erlps__seed58__2 [(ErlangInt num_0), _x_1]
  | (ErlangInt num_0) == (toErl 0) =
  ErlangEmptyList
erlps__seed58__2 [n_0, x_1] =
  let matchExpr_5 = erlps__seed58__1 [x_1]
  in
    case matchExpr_5 of
      (ErlangTuple [z_3, newx_4]) ->
        let    rop_10 = toErl 1
        in let arg_8 = BIF.erlang__op_minus [n_0, rop_10]
        in let tail_7 = erlps__seed58__2 [arg_8, newx_4]
        in ErlangCons z_3 tail_7
      _ -> EXC.badmatch matchExpr_5
erlps__seed58__2 [arg_12, arg_13] = EXC.function_clause unit
erlps__seed58__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed58__2) args

erlps__seed58__1 :: ErlangFun
erlps__seed58__1 [x_0_0] =
  let matchExpr_4 = erlps__splitmix64_next__1 [x_0_0]
  in
    case matchExpr_4 of
      (ErlangTuple [z0_2, x_3]) ->
        let    lop_9 = toErl 1
        in let rop_10 = toErl 58
        in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_10]
        in let rop_11 = toErl 1
        in let rop_7 = BIF.erlang__op_minus [lop_8, rop_11]
        in let case_5 = BIF.erlang__band__2 [z0_2, rop_7]
        in
          case case_5 of
            (ErlangInt num_12) | (ErlangInt num_12) == (toErl 0) ->
              erlps__seed58__1 [x_3]
            z_14 -> ErlangTuple [z_14, x_3]
      _ -> EXC.badmatch matchExpr_4
erlps__seed58__1 [arg_17] = EXC.function_clause unit
erlps__seed58__1 args =
  EXC.badarity (ErlangFun 1 erlps__seed58__1) args

erlps__seed64__2 :: ErlangFun
erlps__seed64__2 [(ErlangInt num_0), _x_1]
  | (ErlangInt num_0) == (toErl 0) =
  ErlangEmptyList
erlps__seed64__2 [n_0, x_1] =
  let matchExpr_5 = erlps__seed64__1 [x_1]
  in
    case matchExpr_5 of
      (ErlangTuple [z_3, newx_4]) ->
        let    rop_10 = toErl 1
        in let arg_8 = BIF.erlang__op_minus [n_0, rop_10]
        in let tail_7 = erlps__seed64__2 [arg_8, newx_4]
        in ErlangCons z_3 tail_7
      _ -> EXC.badmatch matchExpr_5
erlps__seed64__2 [arg_12, arg_13] = EXC.function_clause unit
erlps__seed64__2 args =
  EXC.badarity (ErlangFun 2 erlps__seed64__2) args

erlps__seed64__1 :: ErlangFun
erlps__seed64__1 [x_0_0] =
  let zx_2 = erlps__splitmix64_next__1 [x_0_0]
  in
    case zx_2 of
      (ErlangTuple [z_3, x_4]) ->
        case ErlangAtom "true" of
          _ | (==) z_3 (toErl 0) -> erlps__seed64__1 [x_4]
          _ -> zx_2
      _ -> EXC.badmatch zx_2
erlps__seed64__1 [arg_7] = EXC.function_clause unit
erlps__seed64__1 args =
  EXC.badarity (ErlangFun 1 erlps__seed64__1) args

erlps__splitmix64_next__1 :: ErlangFun
erlps__splitmix64_next__1 [x_0_0] =
  let   
    rop_3 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "11400714819323198485")))
  in let lop_1 = BIF.erlang__op_plus [x_0_0, rop_3]
  in let lop_6 = toErl 1
  in let rop_7 = toErl 64
  in let lop_5 = BIF.erlang__bsl__2 [lop_6, rop_7]
  in let rop_8 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_8]
  in let x_9 = BIF.erlang__band__2 [lop_1, rop_4]
  in let rop_15 = toErl 30
  in let rop_13 = BIF.erlang__bsr__2 [x_9, rop_15]
  in let lop_11 = BIF.erlang__bxor__2 [x_9, rop_13]
  in let
    rop_16 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "13787848793156543929")))
  in let lop_10 = BIF.erlang__op_mult [lop_11, rop_16]
  in let lop_19 = toErl 1
  in let rop_20 = toErl 64
  in let lop_18 = BIF.erlang__bsl__2 [lop_19, rop_20]
  in let rop_21 = toErl 1
  in let rop_17 = BIF.erlang__op_minus [lop_18, rop_21]
  in let z_0_22 = BIF.erlang__band__2 [lop_10, rop_17]
  in let rop_28 = toErl 27
  in let rop_26 = BIF.erlang__bsr__2 [z_0_22, rop_28]
  in let lop_24 = BIF.erlang__bxor__2 [z_0_22, rop_26]
  in let
    rop_29 =
      toErl
        (unsafePartial
           (DM.fromJust (DBI.fromString "10723151780598845931")))
  in let lop_23 = BIF.erlang__op_mult [lop_24, rop_29]
  in let lop_32 = toErl 1
  in let rop_33 = toErl 64
  in let lop_31 = BIF.erlang__bsl__2 [lop_32, rop_33]
  in let rop_34 = toErl 1
  in let rop_30 = BIF.erlang__op_minus [lop_31, rop_34]
  in let z_1_35 = BIF.erlang__band__2 [lop_23, rop_30]
  in let rop_41 = toErl 31
  in let rop_39 = BIF.erlang__bsr__2 [z_1_35, rop_41]
  in let lop_37 = BIF.erlang__bxor__2 [z_1_35, rop_39]
  in let lop_44 = toErl 1
  in let rop_45 = toErl 64
  in let lop_43 = BIF.erlang__bsl__2 [lop_44, rop_45]
  in let rop_46 = toErl 1
  in let rop_42 = BIF.erlang__op_minus [lop_43, rop_46]
  in let tup_el_36 = BIF.erlang__band__2 [lop_37, rop_42]
  in ErlangTuple [tup_el_36, x_9]
erlps__splitmix64_next__1 [arg_48] = EXC.function_clause unit
erlps__splitmix64_next__1 args =
  EXC.badarity (ErlangFun 1 erlps__splitmix64_next__1) args

erlps__polyjump__3 :: ErlangFun
erlps__polyjump__3 [sr_2@(ErlangTuple [ss_0, rs_1]), nextstate_3,
                    jumpconst_4]
  =
  let    lop_6 = BIF.erlang__length__1 [ss_0]
  in let rop_8 = BIF.erlang__length__1 [rs_1]
  in let arg_5 = BIF.erlang__op_plus [lop_6, rop_8]
  in let arg_10 = toErl 0
  in let
    ts_11 =
      BIF.do_remote_fun_call "Lists" "erlps__duplicate__2"
        [arg_5, arg_10]
  in erlps__polyjump__4 [sr_2, nextstate_3, jumpconst_4, ts_11]
erlps__polyjump__3 [arg_16, arg_17, arg_18] =
  EXC.function_clause unit
erlps__polyjump__3 args =
  EXC.badarity (ErlangFun 3 erlps__polyjump__3) args

erlps__polyjump__4 :: ErlangFun
erlps__polyjump__4 [_sr_0, _nextstate_1, (ErlangEmptyList), ts_2]
  =
  ErlangTuple [ts_2, ErlangEmptyList]
erlps__polyjump__4 [sr_0, nextstate_1, (ErlangCons j_2 js_3),
                    ts_4]
  =
  erlps__polyjump__5 [sr_0, nextstate_1, js_3, ts_4, j_2]
erlps__polyjump__4 [arg_10, arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__polyjump__4 args =
  EXC.badarity (ErlangFun 4 erlps__polyjump__4) args

erlps__polyjump__5 :: ErlangFun
erlps__polyjump__5 [sr_0, nextstate_1, js_2, ts_3,
                    (ErlangInt num_4)]
  | (ErlangInt num_4) == (toErl 1) =
  erlps__polyjump__4 [sr_0, nextstate_1, js_2, ts_3]
erlps__polyjump__5 [sr_2@(ErlangTuple [ss_0, rs_1]), nextstate_3,
                    js_4, ts_5, j_6]
  | (/=) j_6 (toErl 0) =
  let   
    newsr_9 =
      BIF.erlang__apply__2
        [nextstate_3, ErlangCons sr_2 ErlangEmptyList]
  in let rop_11 = toErl 1
  in let newj_12 = BIF.erlang__bsr__2 [j_6, rop_11]
  in let lop_17 = toErl 1
  in let rop_18 = toErl 1
  in let lop_16 = BIF.erlang__bsl__2 [lop_17, rop_18]
  in let rop_19 = toErl 1
  in let rop_15 = BIF.erlang__op_minus [lop_16, rop_19]
  in let case_13 = BIF.erlang__band__2 [j_6, rop_15]
  in
    case case_13 of
      (ErlangInt num_20) | (ErlangInt num_20) == (toErl 0) ->
        erlps__polyjump__5 [newsr_9, nextstate_3, js_4, ts_5, newj_12]
      (ErlangInt num_26) | (ErlangInt num_26) == (toErl 1) ->
        let arg_30 = erlps__xorzip_sr__3 [ts_5, ss_0, rs_1]
        in
          erlps__polyjump__5 [newsr_9, nextstate_3, js_4, arg_30, newj_12]
      something_else -> EXC.case_clause something_else
erlps__polyjump__5 [arg_35, arg_36, arg_37, arg_38, arg_39] =
  EXC.function_clause unit
erlps__polyjump__5 args =
  EXC.badarity (ErlangFun 5 erlps__polyjump__5) args

erlps__xorzip_sr__3 :: ErlangFun
erlps__xorzip_sr__3 [(ErlangEmptyList), (ErlangEmptyList),
                     (ErlangAtom "undefined")]
  =
  ErlangEmptyList
erlps__xorzip_sr__3 [ts_0, (ErlangEmptyList), rs_1] =
  let
    arg_3 = BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [rs_1]
  in erlps__xorzip_sr__3 [ts_0, arg_3, ErlangAtom "undefined"]
erlps__xorzip_sr__3 [(ErlangCons t_0 ts_1),
                     (ErlangCons s_2 ss_3), rs_4]
  =
  let    head_5 = BIF.erlang__bxor__2 [t_0, s_2]
  in let tail_8 = erlps__xorzip_sr__3 [ts_1, ss_3, rs_4]
  in ErlangCons head_5 tail_8
erlps__xorzip_sr__3 [arg_12, arg_13, arg_14] =
  EXC.function_clause unit
erlps__xorzip_sr__3 args =
  EXC.badarity (ErlangFun 3 erlps__xorzip_sr__3) args

erlps__format_jumpconst58__1 :: ErlangFun
erlps__format_jumpconst58__1 [string_0] =
  let   
    head_1 = ErlangTuple [ErlangAtom "newline", ErlangAtom "any"]
  in let
    head_5 =
      ErlangTuple
        [ErlangAtom "capture", ErlangAtom "all_but_first",
         ErlangAtom "binary"]
  in let arg_14 = toErl "0x([a-zA-Z0-9]+)"
  in let
    matchExpr_17 =
      BIF.do_remote_fun_call "Re" "erlps__run__3"
        [string_0, arg_14,
         ErlangCons head_1
           (ErlangCons head_5
              (ErlangCons (ErlangAtom "global") ErlangEmptyList))]
  in
    case matchExpr_17 of
      (ErlangTuple [(ErlangAtom "match"), matches_16]) ->
        let   
          arg_18 =
            BIF.do_remote_fun_call "Lists" "erlps__reverse__1" [matches_16]
        in let arg_20 = toErl 0
        in erlps__format_jumcons58_matches__2 [arg_18, arg_20]
      _ -> EXC.badmatch matchExpr_17
erlps__format_jumpconst58__1 [arg_21] = EXC.function_clause unit
erlps__format_jumpconst58__1 args =
  EXC.badarity (ErlangFun 1 erlps__format_jumpconst58__1) args

erlps__format_jumcons58_matches__2 :: ErlangFun
erlps__format_jumcons58_matches__2 [(ErlangEmptyList), j_0] =
  erlps__format_jumpconst58_value__1 [j_0]
erlps__format_jumcons58_matches__2 [(ErlangCons (ErlangCons bin_0 (ErlangEmptyList)) matches_1),
                                    j_2]
  =
  let    rop_5 = toErl 64
  in let lop_3 = BIF.erlang__bsl__2 [j_2, rop_5]
  in let arg_8 = toErl 16
  in let rop_6 = BIF.erlang__binary_to_integer__2 [bin_0, arg_8]
  in let newj_9 = BIF.erlang__bor__2 [lop_3, rop_6]
  in erlps__format_jumcons58_matches__2 [matches_1, newj_9]
erlps__format_jumcons58_matches__2 [arg_12, arg_13] =
  EXC.function_clause unit
erlps__format_jumcons58_matches__2 args =
  EXC.badarity (ErlangFun 2 erlps__format_jumcons58_matches__2)
    args

erlps__format_jumpconst58_value__1 :: ErlangFun
erlps__format_jumpconst58_value__1 [(ErlangInt num_0)]
  | (ErlangInt num_0) == (toErl 0) =
  ErlangAtom "ok"
erlps__format_jumpconst58_value__1 [j_0] =
  let    arg_1 = toErl "16#~s,~n"
  in let lop_9 = toErl 1
  in let rop_10 = toErl 58
  in let lop_8 = BIF.erlang__bsl__2 [lop_9, rop_10]
  in let rop_11 = toErl 1
  in let rop_7 = BIF.erlang__op_minus [lop_8, rop_11]
  in let lop_5 = BIF.erlang__band__2 [j_0, rop_7]
  in let lop_13 = toErl 1
  in let rop_14 = toErl 58
  in let rop_12 = BIF.erlang__bsl__2 [lop_13, rop_14]
  in let arg_4 = BIF.erlang__bor__2 [lop_5, rop_12]
  in let arg_15 = toErl 16
  in let head_3 = BIF.erlang__integer_to_list__2 [arg_4, arg_15]
  in let
    _ =
      BIF.do_remote_fun_call "Erlang.Io" "erlps__format__2"
        [arg_1, ErlangCons head_3 ErlangEmptyList]
  in let rop_19 = toErl 58
  in let arg_17 = BIF.erlang__bsr__2 [j_0, rop_19]
  in erlps__format_jumpconst58_value__1 [arg_17]
erlps__format_jumpconst58_value__1 [arg_20] =
  EXC.function_clause unit
erlps__format_jumpconst58_value__1 args =
  EXC.badarity (ErlangFun 1 erlps__format_jumpconst58_value__1)
    args

erlps__get_52__1 :: ErlangFun
erlps__get_52__1 [(ErlangTuple [alg_3@(ErlangMap map_0), s0_4])]
  | (DM.Just next_2) <- (Map.lookup (ErlangAtom "next") map_0)
  , (DM.Just bits_1) <- (Map.lookup (ErlangAtom "bits") map_0) =
  let
    matchExpr_9 =
      BIF.erlang__apply__2 [next_2, ErlangCons s0_4 ErlangEmptyList]
  in
    case matchExpr_9 of
      (ErlangTuple [int_7, s1_8]) ->
        let    lop_12 = toErl 1
        in let rop_16 = toErl 51
        in let lop_14 = BIF.erlang__op_minus [bits_1, rop_16]
        in let rop_17 = toErl 1
        in let rop_13 = BIF.erlang__op_minus [lop_14, rop_17]
        in let lop_11 = BIF.erlang__bsl__2 [lop_12, rop_13]
        in let tup_el_10 = BIF.erlang__band__2 [lop_11, int_7]
        in let rop_23 = toErl 51
        in let rop_21 = BIF.erlang__op_minus [bits_1, rop_23]
        in let tup_el_19 = BIF.erlang__bsr__2 [int_7, rop_21]
        in let tup_el_24 = ErlangTuple [alg_3, s1_8]
        in ErlangTuple [tup_el_10, tup_el_19, tup_el_24]
      _ -> EXC.badmatch matchExpr_9
erlps__get_52__1 [(ErlangTuple [alg_2@(ErlangMap map_0), s0_3])]
  | (DM.Just next_1) <- (Map.lookup (ErlangAtom "next") map_0) =
  let
    matchExpr_8 =
      BIF.erlang__apply__2 [next_1, ErlangCons s0_3 ErlangEmptyList]
  in
    case matchExpr_8 of
      (ErlangTuple [int_6, s1_7]) ->
        let    lop_11 = toErl 1
        in let rop_12 = toErl 51
        in let lop_10 = BIF.erlang__bsl__2 [lop_11, rop_12]
        in let tup_el_9 = BIF.erlang__band__2 [lop_10, int_6]
        in let lop_18 = toErl 1
        in let rop_19 = toErl 51
        in let lop_17 = BIF.erlang__bsl__2 [lop_18, rop_19]
        in let rop_20 = toErl 1
        in let rop_16 = BIF.erlang__op_minus [lop_17, rop_20]
        in let tup_el_14 = BIF.erlang__band__2 [int_6, rop_16]
        in let tup_el_21 = ErlangTuple [alg_2, s1_7]
        in ErlangTuple [tup_el_9, tup_el_14, tup_el_21]
      _ -> EXC.badmatch matchExpr_8
erlps__get_52__1 [arg_24] = EXC.function_clause unit
erlps__get_52__1 args =
  EXC.badarity (ErlangFun 1 erlps__get_52__1) args

erlps__normal_s__4 :: ErlangFun
erlps__normal_s__4 [(ErlangInt num_0), sign_1, x0_2, state0_3]
  | (ErlangInt num_0) == (toErl 0) =
  let matchExpr_7 = erlps__uniform_s__1 [state0_3]
  in
    case matchExpr_7 of
      (ErlangTuple [u0_5, s1_6]) ->
        let    op_arg_10 = toErl 1
        in let lop_9 = BIF.erlang__op_neg [op_arg_10]
        in let rop_11 = ErlangFloat 3.65415288536100879568e+0
        in let lop_8 = BIF.erlang__op_div [lop_9, rop_11]
        in let rop_12 = BIF.math__log__1 [u0_5]
        in let x_14 = BIF.erlang__op_mult [lop_8, rop_12]
        in let matchExpr_18 = erlps__uniform_s__1 [s1_6]
        in
          case matchExpr_18 of
            (ErlangTuple [u1_16, s2_17]) ->
              let    op_arg_19 = BIF.math__log__1 [u1_16]
              in let y_21 = BIF.erlang__op_neg [op_arg_19]
              in let lop_23 = BIF.erlang__op_plus [y_21, y_21]
              in let rop_26 = BIF.erlang__op_mult [x_14, x_14]
              in let case_22 = BIF.erlang__op_greater [lop_23, rop_26]
              in
                case case_22 of
                  (ErlangAtom "false") ->
                    let arg_29 = toErl 0
                    in erlps__normal_s__4 [arg_29, sign_1, x0_2, s2_17]
                  (ErlangAtom "true") | (==) sign_1 (toErl 0) ->
                    let    lop_34 = ErlangFloat 3.65415288536100879568e+0
                    in let tup_el_33 = BIF.erlang__op_plus [lop_34, x_14]
                    in ErlangTuple [tup_el_33, s2_17]
                  (ErlangAtom "true") ->
                    let    op_arg_39 = ErlangFloat 3.65415288536100879568e+0
                    in let lop_38 = BIF.erlang__op_neg [op_arg_39]
                    in let tup_el_37 = BIF.erlang__op_minus [lop_38, x_14]
                    in ErlangTuple [tup_el_37, s2_17]
                  something_else -> EXC.case_clause something_else
            _ -> EXC.badmatch matchExpr_18
      _ -> EXC.badmatch matchExpr_7
erlps__normal_s__4 [idx_0, _sign_1, x_2, state0_3] =
  let    rop_6 = toErl 1
  in let arg_4 = BIF.erlang__op_plus [idx_0, rop_6]
  in let fi2_7 = erlps__normal_fi__1 [arg_4]
  in let matchExpr_11 = erlps__uniform_s__1 [state0_3]
  in
    case matchExpr_11 of
      (ErlangTuple [u0_9, s1_10]) ->
        let    lop_16 = erlps__normal_fi__1 [idx_0]
        in let lop_15 = BIF.erlang__op_minus [lop_16, fi2_7]
        in let lop_14 = BIF.erlang__op_mult [lop_15, u0_9]
        in let lop_13 = BIF.erlang__op_plus [lop_14, fi2_7]
        in let op_arg_25 = ErlangFloat 5.00000000000000000000e-1
        in let lop_24 = BIF.erlang__op_neg [op_arg_25]
        in let lop_23 = BIF.erlang__op_mult [lop_24, x_2]
        in let arg_22 = BIF.erlang__op_mult [lop_23, x_2]
        in let rop_21 = BIF.math__exp__1 [arg_22]
        in let case_12 = BIF.erlang__op_lesser [lop_13, rop_21]
        in
          case case_12 of
            (ErlangAtom "true") -> ErlangTuple [x_2, s1_10]
            (ErlangAtom "false") -> erlps__normal_s__1 [s1_10]
            something_else -> EXC.case_clause something_else
      _ -> EXC.badmatch matchExpr_11
erlps__normal_s__4 [arg_31, arg_32, arg_33, arg_34] =
  EXC.function_clause unit
erlps__normal_s__4 args =
  EXC.badarity (ErlangFun 4 erlps__normal_s__4) args

erlps__normal_kiwi__1 :: ErlangFun
erlps__normal_kiwi__1 [indx_0] =
  let   
    tup_el_4 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2104047571236786")))
  in let tup_el_5 = ErlangFloat 1.73672541216026300829e-15
  in let tup_el_3 = ErlangTuple [tup_el_4, tup_el_5]
  in let tup_el_7 = toErl 0
  in let tup_el_8 = ErlangFloat 9.55866035145563388593e-17
  in let tup_el_6 = ErlangTuple [tup_el_7, tup_el_8]
  in let
    tup_el_10 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "1693657211986787")))
  in let tup_el_11 = ErlangFloat 1.27087048348106232125e-16
  in let tup_el_9 = ErlangTuple [tup_el_10, tup_el_11]
  in let
    tup_el_13 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "1919380038271141")))
  in let tup_el_14 = ErlangFloat 1.49097409624954739056e-16
  in let tup_el_12 = ErlangTuple [tup_el_13, tup_el_14]
  in let
    tup_el_16 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2015384402196343")))
  in let tup_el_17 = ErlangFloat 1.66587336315862684825e-16
  in let tup_el_15 = ErlangTuple [tup_el_16, tup_el_17]
  in let
    tup_el_19 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2068365869448128")))
  in let tup_el_20 = ErlangFloat 1.81361208101190286598e-16
  in let tup_el_18 = ErlangTuple [tup_el_19, tup_el_20]
  in let
    tup_el_22 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2101878624052573")))
  in let tup_el_23 = ErlangFloat 1.94297201531355877741e-16
  in let tup_el_21 = ErlangTuple [tup_el_22, tup_el_23]
  in let
    tup_el_25 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2124958784102998")))
  in let tup_el_26 = ErlangFloat 2.05895006284820926559e-16
  in let tup_el_24 = ErlangTuple [tup_el_25, tup_el_26]
  in let
    tup_el_28 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2141808670795147")))
  in let tup_el_29 = ErlangFloat 2.16468605768954222017e-16
  in let tup_el_27 = ErlangTuple [tup_el_28, tup_el_29]
  in let
    tup_el_31 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2154644611568301")))
  in let tup_el_32 = ErlangFloat 2.26229403922181158232e-16
  in let tup_el_30 = ErlangTuple [tup_el_31, tup_el_32]
  in let
    tup_el_34 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2164744887587275")))
  in let tup_el_35 = ErlangFloat 2.35327189140458915861e-16
  in let tup_el_33 = ErlangTuple [tup_el_34, tup_el_35]
  in let
    tup_el_37 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2172897953696594")))
  in let tup_el_38 = ErlangFloat 2.43872345574287710295e-16
  in let tup_el_36 = ErlangTuple [tup_el_37, tup_el_38]
  in let
    tup_el_40 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2179616279372365")))
  in let tup_el_41 = ErlangFloat 2.51948798292742250158e-16
  in let tup_el_39 = ErlangTuple [tup_el_40, tup_el_41]
  in let
    tup_el_43 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2185247251868649")))
  in let tup_el_44 = ErlangFloat 2.59621997725281025263e-16
  in let tup_el_42 = ErlangTuple [tup_el_43, tup_el_44]
  in let
    tup_el_46 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2190034623107822")))
  in let tup_el_47 = ErlangFloat 2.66944074736482849525e-16
  in let tup_el_45 = ErlangTuple [tup_el_46, tup_el_47]
  in let
    tup_el_49 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2194154434521197")))
  in let tup_el_50 = ErlangFloat 2.73957296851424460024e-16
  in let tup_el_48 = ErlangTuple [tup_el_49, tup_el_50]
  in let
    tup_el_52 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2197736978774660")))
  in let tup_el_53 = ErlangFloat 2.80696460024848035749e-16
  in let tup_el_51 = ErlangTuple [tup_el_52, tup_el_53]
  in let
    tup_el_55 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2200880740891961")))
  in let tup_el_56 = ErlangFloat 2.87190589041139304275e-16
  in let tup_el_54 = ErlangTuple [tup_el_55, tup_el_56]
  in let
    tup_el_58 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2203661538010620")))
  in let tup_el_59 = ErlangFloat 2.93464174847288832596e-16
  in let tup_el_57 = ErlangTuple [tup_el_58, tup_el_59]
  in let
    tup_el_61 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2206138681109102")))
  in let tup_el_62 = ErlangFloat 2.99538093367821129281e-16
  in let tup_el_60 = ErlangTuple [tup_el_61, tup_el_62]
  in let
    tup_el_64 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2208359231806599")))
  in let tup_el_65 = ErlangFloat 3.05430300071924403235e-16
  in let tup_el_63 = ErlangTuple [tup_el_64, tup_el_65]
  in let
    tup_el_67 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2210361007258210")))
  in let tup_el_68 = ErlangFloat 3.11156363389215722701e-16
  in let tup_el_66 = ErlangTuple [tup_el_67, tup_el_68]
  in let
    tup_el_70 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2212174742388539")))
  in let tup_el_71 = ErlangFloat 3.16729880185818151712e-16
  in let tup_el_69 = ErlangTuple [tup_el_70, tup_el_71]
  in let
    tup_el_73 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2213825672704646")))
  in let tup_el_74 = ErlangFloat 3.22162803505499051688e-16
  in let tup_el_72 = ErlangTuple [tup_el_73, tup_el_74]
  in let
    tup_el_76 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2215334711002614")))
  in let tup_el_77 = ErlangFloat 3.27465704079397507757e-16
  in let tup_el_75 = ErlangTuple [tup_el_76, tup_el_77]
  in let
    tup_el_79 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2216719334487595")))
  in let tup_el_80 = ErlangFloat 3.32647981168417099987e-16
  in let tup_el_78 = ErlangTuple [tup_el_79, tup_el_80]
  in let
    tup_el_82 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2217994262139172")))
  in let tup_el_83 = ErlangFloat 3.37718034173532322460e-16
  in let tup_el_81 = ErlangTuple [tup_el_82, tup_el_83]
  in let
    tup_el_85 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2219171977965032")))
  in let tup_el_86 = ErlangFloat 3.42683403531193559494e-16
  in let tup_el_84 = ErlangTuple [tup_el_85, tup_el_86]
  in let
    tup_el_88 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2220263139538712")))
  in let tup_el_89 = ErlangFloat 3.47550887317297581051e-16
  in let tup_el_87 = ErlangTuple [tup_el_88, tup_el_89]
  in let
    tup_el_91 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2221276900117330")))
  in let tup_el_92 = ErlangFloat 3.52326638460020314094e-16
  in let tup_el_90 = ErlangTuple [tup_el_91, tup_el_92]
  in let
    tup_el_94 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2222221164932930")))
  in let tup_el_95 = ErlangFloat 3.57016246339534940285e-16
  in let tup_el_93 = ErlangTuple [tup_el_94, tup_el_95]
  in let
    tup_el_97 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2223102796829069")))
  in let tup_el_98 = ErlangFloat 3.61624805715983390475e-16
  in let tup_el_96 = ErlangTuple [tup_el_97, tup_el_98]
  in let
    tup_el_100 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2223927782546658")))
  in let tup_el_101 = ErlangFloat 3.66156975296535397983e-16
  in let tup_el_99 = ErlangTuple [tup_el_100, tup_el_101]
  in let
    tup_el_103 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2224701368170060")))
  in let tup_el_104 = ErlangFloat 3.70617027772360773203e-16
  in let tup_el_102 = ErlangTuple [tup_el_103, tup_el_104]
  in let
    tup_el_106 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2225428170204312")))
  in let tup_el_107 = ErlangFloat 3.75008892787477978824e-16
  in let tup_el_105 = ErlangTuple [tup_el_106, tup_el_107]
  in let
    tup_el_109 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2226112267248242")))
  in let tup_el_110 = ErlangFloat 3.79336194015495537551e-16
  in let tup_el_108 = ErlangTuple [tup_el_109, tup_el_110]
  in let
    tup_el_112 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2226757276105256")))
  in let tup_el_113 = ErlangFloat 3.83602281296772790489e-16
  in let tup_el_111 = ErlangTuple [tup_el_112, tup_el_113]
  in let
    tup_el_115 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2227366415328399")))
  in let tup_el_116 = ErlangFloat 3.87810258612502468569e-16
  in let tup_el_114 = ErlangTuple [tup_el_115, tup_el_116]
  in let
    tup_el_118 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2227942558554684")))
  in let tup_el_119 = ErlangFloat 3.91963008532576783898e-16
  in let tup_el_117 = ErlangTuple [tup_el_118, tup_el_119]
  in let
    tup_el_121 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2228488279492521")))
  in let tup_el_122 = ErlangFloat 3.96063213662563775295e-16
  in let tup_el_120 = ErlangTuple [tup_el_121, tup_el_122]
  in let
    tup_el_124 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2229005890047222")))
  in let tup_el_125 = ErlangFloat 4.00113375525466896220e-16
  in let tup_el_123 = ErlangTuple [tup_el_124, tup_el_125]
  in let
    tup_el_127 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2229497472775193")))
  in let tup_el_128 = ErlangFloat 4.04115831241433324136e-16
  in let tup_el_126 = ErlangTuple [tup_el_127, tup_el_128]
  in let
    tup_el_130 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2229964908627060")))
  in let tup_el_131 = ErlangFloat 4.08072768309604483145e-16
  in let tup_el_129 = ErlangTuple [tup_el_130, tup_el_131]
  in let
    tup_el_133 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2230409900758597")))
  in let tup_el_134 = ErlangFloat 4.11986237748074422111e-16
  in let tup_el_132 = ErlangTuple [tup_el_133, tup_el_134]
  in let
    tup_el_136 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2230833995044585")))
  in let tup_el_137 = ErlangFloat 4.15858165808280641140e-16
  in let tup_el_135 = ErlangTuple [tup_el_136, tup_el_137]
  in let
    tup_el_139 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2231238597816133")))
  in let tup_el_140 = ErlangFloat 4.19690364447407329203e-16
  in let tup_el_138 = ErlangTuple [tup_el_139, tup_el_140]
  in let
    tup_el_142 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2231624991250191")))
  in let tup_el_143 = ErlangFloat 4.23484540715207084057e-16
  in let tup_el_141 = ErlangTuple [tup_el_142, tup_el_143]
  in let
    tup_el_145 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2231994346765928")))
  in let tup_el_146 = ErlangFloat 4.27242305188997608562e-16
  in let tup_el_144 = ErlangTuple [tup_el_145, tup_el_146]
  in let
    tup_el_148 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2232347736722750")))
  in let tup_el_149 = ErlangFloat 4.30965179571629408372e-16
  in let tup_el_147 = ErlangTuple [tup_el_148, tup_el_149]
  in let
    tup_el_151 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2232686144665934")))
  in let tup_el_152 = ErlangFloat 4.34654603551287596498e-16
  in let tup_el_150 = ErlangTuple [tup_el_151, tup_el_152]
  in let
    tup_el_154 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233010474325959")))
  in let tup_el_155 = ErlangFloat 4.38311941008545712860e-16
  in let tup_el_153 = ErlangTuple [tup_el_154, tup_el_155]
  in let
    tup_el_157 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233321557544881")))
  in let tup_el_158 = ErlangFloat 4.41938485644706647812e-16
  in let tup_el_156 = ErlangTuple [tup_el_157, tup_el_158]
  in let
    tup_el_160 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233620161276071")))
  in let tup_el_161 = ErlangFloat 4.45535466095791365718e-16
  in let tup_el_159 = ErlangTuple [tup_el_160, tup_el_161]
  in let
    tup_el_163 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233906993781271")))
  in let tup_el_164 = ErlangFloat 4.49104050588287499193e-16
  in let tup_el_162 = ErlangTuple [tup_el_163, tup_el_164]
  in let
    tup_el_166 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234182710130335")))
  in let tup_el_167 = ErlangFloat 4.52645351185713967562e-16
  in let tup_el_165 = ErlangTuple [tup_el_166, tup_el_167]
  in let
    tup_el_169 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234447917093496")))
  in let tup_el_170 = ErlangFloat 4.56160427669003807995e-16
  in let tup_el_168 = ErlangTuple [tup_el_169, tup_el_170]
  in let
    tup_el_172 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234703177503020")))
  in let tup_el_173 = ErlangFloat 4.59650291088494072552e-16
  in let tup_el_171 = ErlangTuple [tup_el_172, tup_el_173]
  in let
    tup_el_175 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234949014150181")))
  in let tup_el_176 = ErlangFloat 4.63115907020816468447e-16
  in let tup_el_174 = ErlangTuple [tup_el_175, tup_el_176]
  in let
    tup_el_178 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235185913274316")))
  in let tup_el_179 = ErlangFloat 4.66558198560087516686e-16
  in let tup_el_177 = ErlangTuple [tup_el_178, tup_el_179]
  in let
    tup_el_181 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235414327692884")))
  in let tup_el_182 = ErlangFloat 4.69978049069419496306e-16
  in let tup_el_180 = ErlangTuple [tup_el_181, tup_el_182]
  in let
    tup_el_184 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235634679614920")))
  in let tup_el_185 = ErlangFloat 4.73376304715832370759e-16
  in let tup_el_183 = ErlangTuple [tup_el_184, tup_el_185]
  in let
    tup_el_187 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235847363174595")))
  in let tup_el_188 = ErlangFloat 4.76753776809085264392e-16
  in let tup_el_186 = ErlangTuple [tup_el_187, tup_el_188]
  in let
    tup_el_190 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236052746716837")))
  in let tup_el_191 = ErlangFloat 4.80111243962701550521e-16
  in let tup_el_189 = ErlangTuple [tup_el_190, tup_el_191]
  in let
    tup_el_193 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236251174862869")))
  in let tup_el_194 = ErlangFloat 4.83449454093500800172e-16
  in let tup_el_192 = ErlangTuple [tup_el_193, tup_el_194]
  in let
    tup_el_196 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236442970379967")))
  in let tup_el_197 = ErlangFloat 4.86769126274220868624e-16
  in let tup_el_195 = ErlangTuple [tup_el_196, tup_el_197]
  in let
    tup_el_199 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236628435876762")))
  in let tup_el_200 = ErlangFloat 4.90070952452299375578e-16
  in let tup_el_198 = ErlangTuple [tup_el_199, tup_el_200]
  in let
    tup_el_202 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236807855342765")))
  in let tup_el_203 = ErlangFloat 4.93355599046541390746e-16
  in let tup_el_201 = ErlangTuple [tup_el_202, tup_el_203]
  in let
    tup_el_205 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236981495548562")))
  in let tup_el_206 = ErlangFloat 4.96623708432217831361e-16
  in let tup_el_204 = ErlangTuple [tup_el_205, tup_el_206]
  in let
    tup_el_208 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237149607321147")))
  in let tup_el_209 = ErlangFloat 4.99875900324090879179e-16
  in let tup_el_207 = ErlangTuple [tup_el_208, tup_el_209]
  in let
    tup_el_211 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237312426707209")))
  in let tup_el_212 = ErlangFloat 5.03112773065931868701e-16
  in let tup_el_210 = ErlangTuple [tup_el_211, tup_el_212]
  in let
    tup_el_214 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237470176035652")))
  in let tup_el_215 = ErlangFloat 5.06334904834271949789e-16
  in let tup_el_213 = ErlangTuple [tup_el_214, tup_el_215]
  in let
    tup_el_217 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237623064889403")))
  in let tup_el_218 = ErlangFloat 5.09542854763389229036e-16
  in let tup_el_216 = ErlangTuple [tup_el_217, tup_el_218]
  in let
    tup_el_220 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237771290995388")))
  in let tup_el_221 = ErlangFloat 5.12737163997879663320e-16
  in let tup_el_219 = ErlangTuple [tup_el_220, tup_el_221]
  in let
    tup_el_223 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237915041040597")))
  in let tup_el_224 = ErlangFloat 5.15918356678573644216e-16
  in let tup_el_222 = ErlangTuple [tup_el_223, tup_el_224]
  in let
    tup_el_226 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238054491421305")))
  in let tup_el_227 = ErlangFloat 5.19086940867034337507e-16
  in let tup_el_225 = ErlangTuple [tup_el_226, tup_el_227]
  in let
    tup_el_229 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238189808931712")))
  in let tup_el_230 = ErlangFloat 5.22243409413404174016e-16
  in let tup_el_228 = ErlangTuple [tup_el_229, tup_el_230]
  in let
    tup_el_232 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238321151397660")))
  in let tup_el_233 = ErlangFloat 5.25388240771945425068e-16
  in let tup_el_231 = ErlangTuple [tup_el_232, tup_el_233]
  in let
    tup_el_235 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238448668260432")))
  in let tup_el_236 = ErlangFloat 5.28521899768238198395e-16
  in let tup_el_234 = ErlangTuple [tup_el_235, tup_el_236]
  in let
    tup_el_238 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238572501115169")))
  in let tup_el_239 = ErlangFloat 5.31644838321661755014e-16
  in let tup_el_237 = ErlangTuple [tup_el_238, tup_el_239]
  in let
    tup_el_241 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238692784207942")))
  in let tup_el_242 = ErlangFloat 5.34757496126472954545e-16
  in let tup_el_240 = ErlangTuple [tup_el_241, tup_el_242]
  in let
    tup_el_244 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238809644895133")))
  in let tup_el_245 = ErlangFloat 5.37860301294523479377e-16
  in let tup_el_243 = ErlangTuple [tup_el_244, tup_el_245]
  in let
    tup_el_247 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238923204068402")))
  in let tup_el_248 = ErlangFloat 5.40953670962399333412e-16
  in let tup_el_246 = ErlangTuple [tup_el_247, tup_el_248]
  in let
    tup_el_250 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239033576548190")))
  in let tup_el_251 = ErlangFloat 5.44038011865546709133e-16
  in let tup_el_249 = ErlangTuple [tup_el_250, tup_el_251]
  in let
    tup_el_253 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239140871448443")))
  in let tup_el_254 = ErlangFloat 5.47113720881736113194e-16
  in let tup_el_252 = ErlangTuple [tup_el_253, tup_el_254]
  in let
    tup_el_256 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239245192514958")))
  in let tup_el_257 = ErlangFloat 5.50181185546033624966e-16
  in let tup_el_255 = ErlangTuple [tup_el_256, tup_el_257]
  in let
    tup_el_259 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239346638439541")))
  in let tup_el_260 = ErlangFloat 5.53240784539278360189e-16
  in let tup_el_258 = ErlangTuple [tup_el_259, tup_el_260]
  in let
    tup_el_262 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239445303151952")))
  in let tup_el_263 = ErlangFloat 5.56292888151909017422e-16
  in let tup_el_261 = ErlangTuple [tup_el_262, tup_el_263]
  in let
    tup_el_265 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239541276091442")))
  in let tup_el_266 = ErlangFloat 5.59337858724846207834e-16
  in let tup_el_264 = ErlangTuple [tup_el_265, tup_el_266]
  in let
    tup_el_268 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239634642459498")))
  in let tup_el_269 = ErlangFloat 5.62376051069004345873e-16
  in let tup_el_267 = ErlangTuple [tup_el_268, tup_el_269]
  in let
    tup_el_271 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239725483455293")))
  in let tup_el_272 = ErlangFloat 5.65407812864896043333e-16
  in let tup_el_270 = ErlangTuple [tup_el_271, tup_el_272]
  in let
    tup_el_274 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239813876495186")))
  in let tup_el_275 = ErlangFloat 5.68433485043681410254e-16
  in let tup_el_273 = ErlangTuple [tup_el_274, tup_el_275]
  in let
    tup_el_277 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239899895417494")))
  in let tup_el_278 = ErlangFloat 5.71453402150920397185e-16
  in let tup_el_276 = ErlangTuple [tup_el_277, tup_el_278]
  in let
    tup_el_280 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239983610673676")))
  in let tup_el_281 = ErlangFloat 5.74467892694196087369e-16
  in let tup_el_279 = ErlangTuple [tup_el_280, tup_el_281]
  in let
    tup_el_283 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240065089506935")))
  in let tup_el_284 = ErlangFloat 5.77477279475696482238e-16
  in let tup_el_282 = ErlangTuple [tup_el_283, tup_el_284]
  in let
    tup_el_286 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240144396119183")))
  in let tup_el_287 = ErlangFloat 5.80481879910768565067e-16
  in let tup_el_285 = ErlangTuple [tup_el_286, tup_el_287]
  in let
    tup_el_289 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240221591827230")))
  in let tup_el_290 = ErlangFloat 5.83482006333389205125e-16
  in let tup_el_288 = ErlangTuple [tup_el_289, tup_el_290]
  in let
    tup_el_292 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240296735208969")))
  in let tup_el_293 = ErlangFloat 5.86477966289436525146e-16
  in let tup_el_291 = ErlangTuple [tup_el_292, tup_el_293]
  in let
    tup_el_295 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240369882240293")))
  in let tup_el_296 = ErlangFloat 5.89470062818587176437e-16
  in let tup_el_294 = ErlangTuple [tup_el_295, tup_el_296]
  in let
    tup_el_298 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240441086423386")))
  in let tup_el_299 = ErlangFloat 5.92458594725613394191e-16
  in let tup_el_297 = ErlangTuple [tup_el_298, tup_el_299]
  in let
    tup_el_301 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240510398907004")))
  in let tup_el_302 = ErlangFloat 5.95443856841805979446e-16
  in let tup_el_300 = ErlangTuple [tup_el_301, tup_el_302]
  in let
    tup_el_304 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240577868599305")))
  in let tup_el_305 = ErlangFloat 5.98426140277202811378e-16
  in let tup_el_303 = ErlangTuple [tup_el_304, tup_el_305]
  in let
    tup_el_307 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240643542273726")))
  in let tup_el_308 = ErlangFloat 6.01405732664266403201e-16
  in let tup_el_306 = ErlangTuple [tup_el_307, tup_el_308]
  in let
    tup_el_310 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240707464668391")))
  in let tup_el_311 = ErlangFloat 6.04382918393612501158e-16
  in let tup_el_309 = ErlangTuple [tup_el_310, tup_el_311]
  in let
    tup_el_313 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240769678579486")))
  in let tup_el_314 = ErlangFloat 6.07357978842360566070e-16
  in let tup_el_312 = ErlangTuple [tup_el_313, tup_el_314]
  in let
    tup_el_316 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240830224948980")))
  in let tup_el_317 = ErlangFloat 6.10331192595643943370e-16
  in let tup_el_315 = ErlangTuple [tup_el_316, tup_el_317]
  in let
    tup_el_319 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240889142947082")))
  in let tup_el_320 = ErlangFloat 6.13302835661791100703e-16
  in let tup_el_318 = ErlangTuple [tup_el_319, tup_el_320]
  in let
    tup_el_322 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240946470049769")))
  in let tup_el_323 = ErlangFloat 6.16273181681659631279e-16
  in let tup_el_321 = ErlangTuple [tup_el_322, tup_el_323]
  in let
    tup_el_325 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241002242111691")))
  in let tup_el_326 = ErlangFloat 6.19242502132584703827e-16
  in let tup_el_324 = ErlangTuple [tup_el_325, tup_el_326]
  in let
    tup_el_328 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241056493434746")))
  in let tup_el_329 = ErlangFloat 6.22211066527378790876e-16
  in let tup_el_327 = ErlangTuple [tup_el_328, tup_el_329]
  in let
    tup_el_331 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241109256832602")))
  in let tup_el_332 = ErlangFloat 6.25179142608799982782e-16
  in let tup_el_330 = ErlangTuple [tup_el_331, tup_el_332]
  in let
    tup_el_334 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241160563691400")))
  in let tup_el_335 = ErlangFloat 6.28146996539889530228e-16
  in let tup_el_333 = ErlangTuple [tup_el_334, tup_el_335]
  in let
    tup_el_337 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241210444026879")))
  in let tup_el_338 = ErlangFloat 6.31114893090560423885e-16
  in let tup_el_336 = ErlangTuple [tup_el_337, tup_el_338]
  in let
    tup_el_340 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241258926538122")))
  in let tup_el_341 = ErlangFloat 6.34083095820806000914e-16
  in let tup_el_339 = ErlangTuple [tup_el_340, tup_el_341]
  in let
    tup_el_343 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241306038658137")))
  in let tup_el_344 = ErlangFloat 6.37051867260881494958e-16
  in let tup_el_342 = ErlangTuple [tup_el_343, tup_el_344]
  in let
    tup_el_346 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241351806601435")))
  in let tup_el_347 = ErlangFloat 6.40021469088802472988e-16
  in let tup_el_345 = ErlangTuple [tup_el_346, tup_el_347]
  in let
    tup_el_349 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241396255408788")))
  in let tup_el_350 = ErlangFloat 6.42992162305489607018e-16
  in let tup_el_348 = ErlangTuple [tup_el_349, tup_el_350]
  in let
    tup_el_352 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241439408989313")))
  in let tup_el_353 = ErlangFloat 6.45964207407883213683e-16
  in let tup_el_351 = ErlangTuple [tup_el_352, tup_el_353]
  in let
    tup_el_355 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241481290160038")))
  in let tup_el_356 = ErlangFloat 6.48937864560339654762e-16
  in let tup_el_354 = ErlangTuple [tup_el_355, tup_el_356]
  in let
    tup_el_358 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241521920683062")))
  in let tup_el_359 = ErlangFloat 6.51913393764615873896e-16
  in let tup_el_357 = ErlangTuple [tup_el_358, tup_el_359]
  in let
    tup_el_361 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241561321300462")))
  in let tup_el_362 = ErlangFloat 6.54891055028741540820e-16
  in let tup_el_360 = ErlangTuple [tup_el_361, tup_el_362]
  in let
    tup_el_364 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241599511767028")))
  in let tup_el_365 = ErlangFloat 6.57871108535074132917e-16
  in let tup_el_363 = ErlangTuple [tup_el_364, tup_el_365]
  in let
    tup_el_367 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241636510880960")))
  in let tup_el_368 = ErlangFloat 6.60853814807825874393e-16
  in let tup_el_366 = ErlangTuple [tup_el_367, tup_el_368]
  in let
    tup_el_370 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241672336512612")))
  in let tup_el_371 = ErlangFloat 6.63839434880350565911e-16
  in let tup_el_369 = ErlangTuple [tup_el_370, tup_el_371]
  in let
    tup_el_373 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241707005631362")))
  in let tup_el_374 = ErlangFloat 6.66828230462474590443e-16
  in let tup_el_372 = ErlangTuple [tup_el_373, tup_el_374]
  in let
    tup_el_376 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241740534330713")))
  in let tup_el_377 = ErlangFloat 6.69820464108155789432e-16
  in let tup_el_375 = ErlangTuple [tup_el_376, tup_el_377]
  in let
    tup_el_379 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241772937851689")))
  in let tup_el_380 = ErlangFloat 6.72816399383753114503e-16
  in let tup_el_378 = ErlangTuple [tup_el_379, tup_el_380]
  in let
    tup_el_382 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241804230604585")))
  in let tup_el_383 = ErlangFloat 6.75816301037190058595e-16
  in let tup_el_381 = ErlangTuple [tup_el_382, tup_el_383]
  in let
    tup_el_385 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241834426189161")))
  in let tup_el_386 = ErlangFloat 6.78820435168298025779e-16
  in let tup_el_384 = ErlangTuple [tup_el_385, tup_el_386]
  in let
    tup_el_388 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241863537413311")))
  in let tup_el_389 = ErlangFloat 6.81829069400625404640e-16
  in let tup_el_387 = ErlangTuple [tup_el_388, tup_el_389]
  in let
    tup_el_391 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241891576310281")))
  in let tup_el_392 = ErlangFloat 6.84842473055003829332e-16
  in let tup_el_390 = ErlangTuple [tup_el_391, tup_el_392]
  in let
    tup_el_394 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241918554154466")))
  in let tup_el_395 = ErlangFloat 6.87860917325166366447e-16
  in let tup_el_393 = ErlangTuple [tup_el_394, tup_el_395]
  in let
    tup_el_397 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241944481475843")))
  in let tup_el_398 = ErlangFloat 6.90884675455716901816e-16
  in let tup_el_396 = ErlangTuple [tup_el_397, tup_el_398]
  in let
    tup_el_400 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241969368073071")))
  in let tup_el_401 = ErlangFloat 6.93914022922756903880e-16
  in let tup_el_399 = ErlangTuple [tup_el_400, tup_el_401]
  in let
    tup_el_403 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241993223025298")))
  in let tup_el_404 = ErlangFloat 6.96949237617482938615e-16
  in let tup_el_402 = ErlangTuple [tup_el_403, tup_el_404]
  in let
    tup_el_406 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242016054702685")))
  in let tup_el_407 = ErlangFloat 6.99990600033076396841e-16
  in let tup_el_405 = ErlangTuple [tup_el_406, tup_el_407]
  in let
    tup_el_409 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242037870775710")))
  in let tup_el_410 = ErlangFloat 7.03038393455215079165e-16
  in let tup_el_408 = ErlangTuple [tup_el_409, tup_el_410]
  in let
    tup_el_412 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242058678223225")))
  in let tup_el_413 = ErlangFloat 7.06092904156548215323e-16
  in let tup_el_411 = ErlangTuple [tup_el_412, tup_el_413]
  in let
    tup_el_415 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242078483339331")))
  in let tup_el_416 = ErlangFloat 7.09154421595487341536e-16
  in let tup_el_414 = ErlangTuple [tup_el_415, tup_el_416]
  in let
    tup_el_418 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242097291739040")))
  in let tup_el_419 = ErlangFloat 7.12223238619677884046e-16
  in let tup_el_417 = ErlangTuple [tup_el_418, tup_el_419]
  in let
    tup_el_421 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242115108362774")))
  in let tup_el_422 = ErlangFloat 7.15299651674530299286e-16
  in let tup_el_420 = ErlangTuple [tup_el_421, tup_el_422]
  in let
    tup_el_424 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242131937479672")))
  in let tup_el_425 = ErlangFloat 7.18383961017206285811e-16
  in let tup_el_423 = ErlangTuple [tup_el_424, tup_el_425]
  in let
    tup_el_427 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242147782689725")))
  in let tup_el_428 = ErlangFloat 7.21476470936470670108e-16
  in let tup_el_426 = ErlangTuple [tup_el_427, tup_el_428]
  in let
    tup_el_430 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242162646924736")))
  in let tup_el_431 = ErlangFloat 7.24577489978838698238e-16
  in let tup_el_429 = ErlangTuple [tup_el_430, tup_el_431]
  in let
    tup_el_433 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242176532448092")))
  in let tup_el_434 = ErlangFloat 7.27687331181469271523e-16
  in let tup_el_432 = ErlangTuple [tup_el_433, tup_el_434]
  in let
    tup_el_436 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242189440853337")))
  in let tup_el_437 = ErlangFloat 7.30806312312274287356e-16
  in let tup_el_435 = ErlangTuple [tup_el_436, tup_el_437]
  in let
    tup_el_439 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242201373061537")))
  in let tup_el_440 = ErlangFloat 7.33934756117740475864e-16
  in let tup_el_438 = ErlangTuple [tup_el_439, tup_el_440]
  in let
    tup_el_442 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242212329317416")))
  in let tup_el_443 = ErlangFloat 7.37072990578983098735e-16
  in let tup_el_441 = ErlangTuple [tup_el_442, tup_el_443]
  in let
    tup_el_445 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242222309184237")))
  in let tup_el_446 = ErlangFloat 7.40221349176579965727e-16
  in let tup_el_444 = ErlangTuple [tup_el_445, tup_el_446]
  in let
    tup_el_448 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242231311537397")))
  in let tup_el_449 = ErlangFloat 7.43380171164764792799e-16
  in let tup_el_447 = ErlangTuple [tup_el_448, tup_el_449]
  in let
    tup_el_451 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242239334556717")))
  in let tup_el_452 = ErlangFloat 7.46549801855588902443e-16
  in let tup_el_450 = ErlangTuple [tup_el_451, tup_el_452]
  in let
    tup_el_454 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242246375717369")))
  in let tup_el_455 = ErlangFloat 7.49730592913697934980e-16
  in let tup_el_453 = ErlangTuple [tup_el_454, tup_el_455]
  in let
    tup_el_457 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242252431779415")))
  in let tup_el_458 = ErlangFloat 7.52922902662405836870e-16
  in let tup_el_456 = ErlangTuple [tup_el_457, tup_el_458]
  in let
    tup_el_460 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242257498775893")))
  in let tup_el_461 = ErlangFloat 7.56127096401792173910e-16
  in let tup_el_459 = ErlangTuple [tup_el_460, tup_el_461]
  in let
    tup_el_463 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242261571999416")))
  in let tup_el_464 = ErlangFloat 7.59343546739588950455e-16
  in let tup_el_462 = ErlangTuple [tup_el_463, tup_el_464]
  in let
    tup_el_466 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242264645987196")))
  in let tup_el_467 = ErlangFloat 7.62572633935675575083e-16
  in let tup_el_465 = ErlangTuple [tup_el_466, tup_el_467]
  in let
    tup_el_469 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242266714504453")))
  in let tup_el_470 = ErlangFloat 7.65814746261048733621e-16
  in let tup_el_468 = ErlangTuple [tup_el_469, tup_el_470]
  in let
    tup_el_472 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242267770526109")))
  in let tup_el_473 = ErlangFloat 7.69070280372191911716e-16
  in let tup_el_471 = ErlangTuple [tup_el_472, tup_el_473]
  in let
    tup_el_475 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242267806216711")))
  in let tup_el_476 = ErlangFloat 7.72339641701829854238e-16
  in let tup_el_474 = ErlangTuple [tup_el_475, tup_el_476]
  in let
    tup_el_478 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242266812908462")))
  in let tup_el_479 = ErlangFloat 7.75623244867117442328e-16
  in let tup_el_477 = ErlangTuple [tup_el_478, tup_el_479]
  in let
    tup_el_481 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242264781077289")))
  in let tup_el_482 = ErlangFloat 7.78921514096385241347e-16
  in let tup_el_480 = ErlangTuple [tup_el_481, tup_el_482]
  in let
    tup_el_484 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242261700316818")))
  in let tup_el_485 = ErlangFloat 7.82234883675641084120e-16
  in let tup_el_483 = ErlangTuple [tup_el_484, tup_el_485]
  in let
    tup_el_487 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242257559310145")))
  in let tup_el_488 = ErlangFloat 7.85563798416108405147e-16
  in let tup_el_486 = ErlangTuple [tup_el_487, tup_el_488]
  in let
    tup_el_490 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242252345799276")))
  in let tup_el_491 = ErlangFloat 7.88908714144175521500e-16
  in let tup_el_489 = ErlangTuple [tup_el_490, tup_el_491]
  in let
    tup_el_493 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242246046552082")))
  in let tup_el_494 = ErlangFloat 7.92270098215227085966e-16
  in let tup_el_492 = ErlangTuple [tup_el_493, tup_el_494]
  in let
    tup_el_496 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242238647326615")))
  in let tup_el_497 = ErlangFloat 7.95648430052936617556e-16
  in let tup_el_495 = ErlangTuple [tup_el_496, tup_el_497]
  in let
    tup_el_499 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242230132832625")))
  in let tup_el_500 = ErlangFloat 7.99044201715713004887e-16
  in let tup_el_498 = ErlangTuple [tup_el_499, tup_el_500]
  in let
    tup_el_502 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242220486690076")))
  in let tup_el_503 = ErlangFloat 8.02457918492125913510e-16
  in let tup_el_501 = ErlangTuple [tup_el_502, tup_el_503]
  in let
    tup_el_505 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242209691384458")))
  in let tup_el_506 = ErlangFloat 8.05890099527265683393e-16
  in let tup_el_504 = ErlangTuple [tup_el_505, tup_el_506]
  in let
    tup_el_508 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242197728218684")))
  in let tup_el_509 = ErlangFloat 8.09341278482150088838e-16
  in let tup_el_507 = ErlangTuple [tup_el_508, tup_el_509]
  in let
    tup_el_511 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242184577261310")))
  in let tup_el_512 = ErlangFloat 8.12812004228450077447e-16
  in let tup_el_510 = ErlangTuple [tup_el_511, tup_el_512]
  in let
    tup_el_514 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242170217290819")))
  in let tup_el_515 = ErlangFloat 8.16302841580987746960e-16
  in let tup_el_513 = ErlangTuple [tup_el_514, tup_el_515]
  in let
    tup_el_517 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242154625735679")))
  in let tup_el_518 = ErlangFloat 8.19814372070653286895e-16
  in let tup_el_516 = ErlangTuple [tup_el_517, tup_el_518]
  in let
    tup_el_520 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242137778609839")))
  in let tup_el_521 = ErlangFloat 8.23347194760605041733e-16
  in let tup_el_519 = ErlangTuple [tup_el_520, tup_el_521]
  in let
    tup_el_523 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242119650443327")))
  in let tup_el_524 = ErlangFloat 8.26901927108847002541e-16
  in let tup_el_522 = ErlangTuple [tup_el_523, tup_el_524]
  in let
    tup_el_526 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242100214207556")))
  in let tup_el_527 = ErlangFloat 8.30479205880537371959e-16
  in let tup_el_525 = ErlangTuple [tup_el_526, tup_el_527]
  in let
    tup_el_529 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242079441234906")))
  in let tup_el_530 = ErlangFloat 8.34079688113662879173e-16
  in let tup_el_528 = ErlangTuple [tup_el_529, tup_el_530]
  in let
    tup_el_532 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242057301132135")))
  in let tup_el_533 = ErlangFloat 8.37704052142022163322e-16
  in let tup_el_531 = ErlangTuple [tup_el_532, tup_el_533]
  in let
    tup_el_535 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242033761687079")))
  in let tup_el_536 = ErlangFloat 8.41352998679802824740e-16
  in let tup_el_534 = ErlangTuple [tup_el_535, tup_el_536]
  in let
    tup_el_538 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2242008788768107")))
  in let tup_el_539 = ErlangFloat 8.45027251972409677425e-16
  in let tup_el_537 = ErlangTuple [tup_el_538, tup_el_539]
  in let
    tup_el_541 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241982346215682")))
  in let tup_el_542 = ErlangFloat 8.48727561018615493666e-16
  in let tup_el_540 = ErlangTuple [tup_el_541, tup_el_542]
  in let
    tup_el_544 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241954395725356")))
  in let tup_el_545 = ErlangFloat 8.52454700869559619833e-16
  in let tup_el_543 = ErlangTuple [tup_el_544, tup_el_545]
  in let
    tup_el_547 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241924896721443")))
  in let tup_el_548 = ErlangFloat 8.56209474010623332794e-16
  in let tup_el_546 = ErlangTuple [tup_el_547, tup_el_548]
  in let
    tup_el_550 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241893806220517")))
  in let tup_el_551 = ErlangFloat 8.59992711832766460322e-16
  in let tup_el_549 = ErlangTuple [tup_el_550, tup_el_551]
  in let
    tup_el_553 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241861078683830")))
  in let tup_el_554 = ErlangFloat 8.63805276200525889234e-16
  in let tup_el_552 = ErlangTuple [tup_el_553, tup_el_554]
  in let
    tup_el_556 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241826665857598")))
  in let tup_el_557 = ErlangFloat 8.67648061124558160821e-16
  in let tup_el_555 = ErlangTuple [tup_el_556, tup_el_557]
  in let
    tup_el_559 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241790516600041")))
  in let tup_el_560 = ErlangFloat 8.71521994547369801105e-16
  in let tup_el_558 = ErlangTuple [tup_el_559, tup_el_560]
  in let
    tup_el_562 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241752576693881")))
  in let tup_el_563 = ErlangFloat 8.75428040251717494016e-16
  in let tup_el_561 = ErlangTuple [tup_el_562, tup_el_563]
  in let
    tup_el_565 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241712788642916")))
  in let tup_el_566 = ErlangFloat 8.79367199902104274846e-16
  in let tup_el_564 = ErlangTuple [tup_el_565, tup_el_566]
  in let
    tup_el_568 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241671091451078")))
  in let tup_el_569 = ErlangFloat 8.83340515230840795477e-16
  in let tup_el_567 = ErlangTuple [tup_el_568, tup_el_569]
  in let
    tup_el_571 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241627420382235")))
  in let tup_el_572 = ErlangFloat 8.87349070381313453209e-16
  in let tup_el_570 = ErlangTuple [tup_el_571, tup_el_572]
  in let
    tup_el_574 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241581706698773")))
  in let tup_el_575 = ErlangFloat 8.91393994422408613348e-16
  in let tup_el_573 = ErlangTuple [tup_el_574, tup_el_575]
  in let
    tup_el_577 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241533877376767")))
  in let tup_el_578 = ErlangFloat 8.95476464049506774624e-16
  in let tup_el_576 = ErlangTuple [tup_el_577, tup_el_578]
  in let
    tup_el_580 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241483854795281")))
  in let tup_el_581 = ErlangFloat 8.99597706489109936019e-16
  in let tup_el_579 = ErlangTuple [tup_el_580, tup_el_581]
  in let
    tup_el_583 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241431556397035")))
  in let tup_el_584 = ErlangFloat 9.03759002626011752555e-16
  in let tup_el_582 = ErlangTuple [tup_el_583, tup_el_584]
  in let
    tup_el_586 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241376894317345")))
  in let tup_el_587 = ErlangFloat 9.07961690374006801893e-16
  in let tup_el_585 = ErlangTuple [tup_el_586, tup_el_587]
  in let
    tup_el_589 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241319774977817")))
  in let tup_el_590 = ErlangFloat 9.12207168313484609982e-16
  in let tup_el_588 = ErlangTuple [tup_el_589, tup_el_590]
  in let
    tup_el_592 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241260098640860")))
  in let tup_el_593 = ErlangFloat 9.16496899621913531320e-16
  in let tup_el_591 = ErlangTuple [tup_el_592, tup_el_593]
  in let
    tup_el_595 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241197758920538")))
  in let tup_el_596 = ErlangFloat 9.20832416326230760072e-16
  in let tup_el_594 = ErlangTuple [tup_el_595, tup_el_596]
  in let
    tup_el_598 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241132642244704")))
  in let tup_el_599 = ErlangFloat 9.25215323909569332723e-16
  in let tup_el_597 = ErlangTuple [tup_el_598, tup_el_599]
  in let
    tup_el_601 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2241064627262652")))
  in let tup_el_602 = ErlangFloat 9.29647306308641672775e-16
  in let tup_el_600 = ErlangTuple [tup_el_601, tup_el_602]
  in let
    tup_el_604 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240993584191742")))
  in let tup_el_605 = ErlangFloat 9.34130131342526512592e-16
  in let tup_el_603 = ErlangTuple [tup_el_604, tup_el_605]
  in let
    tup_el_607 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240919374095536")))
  in let tup_el_608 = ErlangFloat 9.38665656618665978610e-16
  in let tup_el_606 = ErlangTuple [tup_el_607, tup_el_608]
  in let
    tup_el_610 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240841848084890")))
  in let tup_el_611 = ErlangFloat 9.43255835967670653963e-16
  in let tup_el_609 = ErlangTuple [tup_el_610, tup_el_611]
  in let
    tup_el_613 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240760846432232")))
  in let tup_el_614 = ErlangFloat 9.47902726465173824760e-16
  in let tup_el_612 = ErlangTuple [tup_el_613, tup_el_614]
  in let
    tup_el_616 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240676197587784")))
  in let tup_el_617 = ErlangFloat 9.52608496106627869756e-16
  in let tup_el_615 = ErlangTuple [tup_el_616, tup_el_617]
  in let
    tup_el_619 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240587717084782")))
  in let tup_el_620 = ErlangFloat 9.57375432209744962925e-16
  in let tup_el_618 = ErlangTuple [tup_el_619, tup_el_620]
  in let
    tup_el_622 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240495206318753")))
  in let tup_el_623 = ErlangFloat 9.62205950629483835507e-16
  in let tup_el_621 = ErlangTuple [tup_el_622, tup_el_623]
  in let
    tup_el_625 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240398451183567")))
  in let tup_el_626 = ErlangFloat 9.67102605882305424755e-16
  in let tup_el_624 = ErlangTuple [tup_el_625, tup_el_626]
  in let
    tup_el_628 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240297220544165")))
  in let tup_el_629 = ErlangFloat 9.72068102290162588019e-16
  in let tup_el_627 = ErlangTuple [tup_el_628, tup_el_629]
  in let
    tup_el_631 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240191264522612")))
  in let tup_el_632 = ErlangFloat 9.77105306270720883776e-16
  in let tup_el_630 = ErlangTuple [tup_el_631, tup_el_632]
  in let
    tup_el_634 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2240080312570155")))
  in let tup_el_635 = ErlangFloat 9.82217259919054108939e-16
  in let tup_el_633 = ErlangTuple [tup_el_634, tup_el_635]
  in let
    tup_el_637 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239964071293331")))
  in let tup_el_638 = ErlangFloat 9.87407196048067106672e-16
  in let tup_el_636 = ErlangTuple [tup_el_637, tup_el_638]
  in let
    tup_el_640 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239842221996530")))
  in let tup_el_641 = ErlangFloat 9.92678554880797648454e-16
  in let tup_el_639 = ErlangTuple [tup_el_640, tup_el_641]
  in let
    tup_el_643 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239714417896699")))
  in let tup_el_644 = ErlangFloat 9.98035002618364491509e-16
  in let tup_el_642 = ErlangTuple [tup_el_643, tup_el_644]
  in let
    tup_el_646 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239580280957725")))
  in let tup_el_647 = ErlangFloat 1.00348045214361808924e-15
  in let tup_el_645 = ErlangTuple [tup_el_646, tup_el_647]
  in let
    tup_el_649 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239439398282193")))
  in let tup_el_650 = ErlangFloat 1.00901908616374569449e-15
  in let tup_el_648 = ErlangTuple [tup_el_649, tup_el_650]
  in let
    tup_el_652 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239291317986196")))
  in let tup_el_653 = ErlangFloat 1.01465538314670861133e-15
  in let tup_el_651 = ErlangTuple [tup_el_652, tup_el_653]
  in let
    tup_el_655 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2239135544468203")))
  in let tup_el_656 = ErlangFloat 1.02039414646831236830e-15
  in let tup_el_654 = ErlangTuple [tup_el_655, tup_el_656]
  in let
    tup_el_658 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238971532964979")))
  in let tup_el_659 = ErlangFloat 1.02624053726135674640e-15
  in let tup_el_657 = ErlangTuple [tup_el_658, tup_el_659]
  in let
    tup_el_661 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238798683265269")))
  in let tup_el_662 = ErlangFloat 1.03220011154864564914e-15
  in let tup_el_660 = ErlangTuple [tup_el_661, tup_el_662]
  in let
    tup_el_664 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238616332424351")))
  in let tup_el_665 = ErlangFloat 1.03827886235153991696e-15
  in let tup_el_663 = ErlangTuple [tup_el_664, tup_el_665]
  in let
    tup_el_667 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238423746288095")))
  in let tup_el_668 = ErlangFloat 1.04448326760004705473e-15
  in let tup_el_666 = ErlangTuple [tup_el_667, tup_el_668]
  in let
    tup_el_670 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238220109591890")))
  in let tup_el_671 = ErlangFloat 1.05082034483551946539e-15
  in let tup_el_669 = ErlangTuple [tup_el_670, tup_el_671]
  in let
    tup_el_673 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2238004514345216")))
  in let tup_el_674 = ErlangFloat 1.05729771390098902296e-15
  in let tup_el_672 = ErlangTuple [tup_el_673, tup_el_674]
  in let
    tup_el_676 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237775946143212")))
  in let tup_el_677 = ErlangFloat 1.06392366906768007507e-15
  in let tup_el_675 = ErlangTuple [tup_el_676, tup_el_677]
  in let
    tup_el_679 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237533267957822")))
  in let tup_el_680 = ErlangFloat 1.07070726236329937629e-15
  in let tup_el_678 = ErlangTuple [tup_el_679, tup_el_680]
  in let
    tup_el_682 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237275200846753")))
  in let tup_el_683 = ErlangFloat 1.07765840026681064032e-15
  in let tup_el_681 = ErlangTuple [tup_el_682, tup_el_683]
  in let
    tup_el_685 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2237000300869952")))
  in let tup_el_686 = ErlangFloat 1.08478795644034246815e-15
  in let tup_el_684 = ErlangTuple [tup_el_685, tup_el_686]
  in let
    tup_el_688 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236706931309099")))
  in let tup_el_689 = ErlangFloat 1.09210790381495627955e-15
  in let tup_el_687 = ErlangTuple [tup_el_688, tup_el_689]
  in let
    tup_el_691 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236393229029147")))
  in let tup_el_692 = ErlangFloat 1.09963147017856282141e-15
  in let tup_el_690 = ErlangTuple [tup_el_691, tup_el_692]
  in let
    tup_el_694 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2236057063479501")))
  in let tup_el_695 = ErlangFloat 1.10737332249357520075e-15
  in let tup_el_693 = ErlangTuple [tup_el_694, tup_el_695]
  in let
    tup_el_697 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235695986373246")))
  in let tup_el_698 = ErlangFloat 1.11534978658531549289e-15
  in let tup_el_696 = ErlangTuple [tup_el_697, tup_el_698]
  in let
    tup_el_700 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2235307169458859")))
  in let tup_el_701 = ErlangFloat 1.12357911071108333166e-15
  in let tup_el_699 = ErlangTuple [tup_el_700, tup_el_701]
  in let
    tup_el_703 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234887326941578")))
  in let tup_el_704 = ErlangFloat 1.13208178401648463069e-15
  in let tup_el_702 = ErlangTuple [tup_el_703, tup_el_704]
  in let
    tup_el_706 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2234432617919447")))
  in let tup_el_707 = ErlangFloat 1.14088092425827801405e-15
  in let tup_el_705 = ErlangTuple [tup_el_706, tup_el_707]
  in let
    tup_el_709 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233938522519765")))
  in let tup_el_710 = ErlangFloat 1.15000275378397924458e-15
  in let tup_el_708 = ErlangTuple [tup_el_709, tup_el_710]
  in let
    tup_el_712 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2233399683022677")))
  in let tup_el_713 = ErlangFloat 1.15947718914491892724e-15
  in let tup_el_711 = ErlangTuple [tup_el_712, tup_el_713]
  in let
    tup_el_715 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2232809697779198")))
  in let tup_el_716 = ErlangFloat 1.16933857869109599762e-15
  in let tup_el_714 = ErlangTuple [tup_el_715, tup_el_716]
  in let
    tup_el_718 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2232160850599817")))
  in let tup_el_719 = ErlangFloat 1.17962663529558008258e-15
  in let tup_el_717 = ErlangTuple [tup_el_718, tup_el_719]
  in let
    tup_el_721 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2231443750584641")))
  in let tup_el_722 = ErlangFloat 1.19038762992828902828e-15
  in let tup_el_720 = ErlangTuple [tup_el_721, tup_el_722]
  in let
    tup_el_724 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2230646845562170")))
  in let tup_el_725 = ErlangFloat 1.20167593925438186168e-15
  in let tup_el_723 = ErlangTuple [tup_el_724, tup_el_725]
  in let
    tup_el_727 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2229755753817986")))
  in let tup_el_728 = ErlangFloat 1.21355608186668970279e-15
  in let tup_el_726 = ErlangTuple [tup_el_727, tup_el_728]
  in let
    tup_el_730 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2228752329126533")))
  in let tup_el_731 = ErlangFloat 1.22610544174505612103e-15
  in let tup_el_729 = ErlangTuple [tup_el_730, tup_el_731]
  in let
    tup_el_733 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2227613325162504")))
  in let tup_el_734 = ErlangFloat 1.23941797891632511077e-15
  in let tup_el_732 = ErlangTuple [tup_el_733, tup_el_734]
  in let
    tup_el_736 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2226308442121174")))
  in let tup_el_737 = ErlangFloat 1.25360939266025668161e-15
  in let tup_el_735 = ErlangTuple [tup_el_736, tup_el_737]
  in let
    tup_el_739 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2224797391720399")))
  in let tup_el_740 = ErlangFloat 1.26882448142550100004e-15
  in let tup_el_738 = ErlangTuple [tup_el_739, tup_el_740]
  in let
    tup_el_742 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2223025347823832")))
  in let tup_el_743 = ErlangFloat 1.28524793190961088468e-15
  in let tup_el_741 = ErlangTuple [tup_el_742, tup_el_743]
  in let
    tup_el_745 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2220915633329809")))
  in let tup_el_746 = ErlangFloat 1.30312066346899851655e-15
  in let tup_el_744 = ErlangTuple [tup_el_745, tup_el_746]
  in let
    tup_el_748 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2218357446087030")))
  in let tup_el_749 = ErlangFloat 1.32276557701953263307e-15
  in let tup_el_747 = ErlangTuple [tup_el_748, tup_el_749]
  in let
    tup_el_751 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2215184158448668")))
  in let tup_el_752 = ErlangFloat 1.34463009250111712861e-15
  in let tup_el_750 = ErlangTuple [tup_el_751, tup_el_752]
  in let
    tup_el_754 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2211132412537369")))
  in let tup_el_755 = ErlangFloat 1.36936068351285175171e-15
  in let tup_el_753 = ErlangTuple [tup_el_754, tup_el_755]
  in let
    tup_el_757 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2205758503851065")))
  in let tup_el_758 = ErlangFloat 1.39794366727752399083e-15
  in let tup_el_756 = ErlangTuple [tup_el_757, tup_el_758]
  in let
    tup_el_760 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2198248265654987")))
  in let tup_el_761 = ErlangFloat 1.43199898696613284312e-15
  in let tup_el_759 = ErlangTuple [tup_el_760, tup_el_761]
  in let
    tup_el_763 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2186916352102141")))
  in let tup_el_764 = ErlangFloat 1.47448486035975958423e-15
  in let tup_el_762 = ErlangTuple [tup_el_763, tup_el_764]
  in let
    tup_el_766 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2167562552481814")))
  in let tup_el_767 = ErlangFloat 1.53178727416111435375e-15
  in let tup_el_765 = ErlangTuple [tup_el_766, tup_el_767]
  in let
    tup_el_769 =
      toErl
        (unsafePartial (DM.fromJust (DBI.fromString "2125549880839716")))
  in let tup_el_770 = ErlangFloat 1.62276986753129683713e-15
  in let tup_el_768 = ErlangTuple [tup_el_769, tup_el_770]
  in let
    arg_2 =
      ErlangTuple
        [tup_el_3, tup_el_6, tup_el_9, tup_el_12, tup_el_15, tup_el_18,
         tup_el_21, tup_el_24, tup_el_27, tup_el_30, tup_el_33, tup_el_36,
         tup_el_39, tup_el_42, tup_el_45, tup_el_48, tup_el_51, tup_el_54,
         tup_el_57, tup_el_60, tup_el_63, tup_el_66, tup_el_69, tup_el_72,
         tup_el_75, tup_el_78, tup_el_81, tup_el_84, tup_el_87, tup_el_90,
         tup_el_93, tup_el_96, tup_el_99, tup_el_102, tup_el_105,
         tup_el_108, tup_el_111, tup_el_114, tup_el_117, tup_el_120,
         tup_el_123, tup_el_126, tup_el_129, tup_el_132, tup_el_135,
         tup_el_138, tup_el_141, tup_el_144, tup_el_147, tup_el_150,
         tup_el_153, tup_el_156, tup_el_159, tup_el_162, tup_el_165,
         tup_el_168, tup_el_171, tup_el_174, tup_el_177, tup_el_180,
         tup_el_183, tup_el_186, tup_el_189, tup_el_192, tup_el_195,
         tup_el_198, tup_el_201, tup_el_204, tup_el_207, tup_el_210,
         tup_el_213, tup_el_216, tup_el_219, tup_el_222, tup_el_225,
         tup_el_228, tup_el_231, tup_el_234, tup_el_237, tup_el_240,
         tup_el_243, tup_el_246, tup_el_249, tup_el_252, tup_el_255,
         tup_el_258, tup_el_261, tup_el_264, tup_el_267, tup_el_270,
         tup_el_273, tup_el_276, tup_el_279, tup_el_282, tup_el_285,
         tup_el_288, tup_el_291, tup_el_294, tup_el_297, tup_el_300,
         tup_el_303, tup_el_306, tup_el_309, tup_el_312, tup_el_315,
         tup_el_318, tup_el_321, tup_el_324, tup_el_327, tup_el_330,
         tup_el_333, tup_el_336, tup_el_339, tup_el_342, tup_el_345,
         tup_el_348, tup_el_351, tup_el_354, tup_el_357, tup_el_360,
         tup_el_363, tup_el_366, tup_el_369, tup_el_372, tup_el_375,
         tup_el_378, tup_el_381, tup_el_384, tup_el_387, tup_el_390,
         tup_el_393, tup_el_396, tup_el_399, tup_el_402, tup_el_405,
         tup_el_408, tup_el_411, tup_el_414, tup_el_417, tup_el_420,
         tup_el_423, tup_el_426, tup_el_429, tup_el_432, tup_el_435,
         tup_el_438, tup_el_441, tup_el_444, tup_el_447, tup_el_450,
         tup_el_453, tup_el_456, tup_el_459, tup_el_462, tup_el_465,
         tup_el_468, tup_el_471, tup_el_474, tup_el_477, tup_el_480,
         tup_el_483, tup_el_486, tup_el_489, tup_el_492, tup_el_495,
         tup_el_498, tup_el_501, tup_el_504, tup_el_507, tup_el_510,
         tup_el_513, tup_el_516, tup_el_519, tup_el_522, tup_el_525,
         tup_el_528, tup_el_531, tup_el_534, tup_el_537, tup_el_540,
         tup_el_543, tup_el_546, tup_el_549, tup_el_552, tup_el_555,
         tup_el_558, tup_el_561, tup_el_564, tup_el_567, tup_el_570,
         tup_el_573, tup_el_576, tup_el_579, tup_el_582, tup_el_585,
         tup_el_588, tup_el_591, tup_el_594, tup_el_597, tup_el_600,
         tup_el_603, tup_el_606, tup_el_609, tup_el_612, tup_el_615,
         tup_el_618, tup_el_621, tup_el_624, tup_el_627, tup_el_630,
         tup_el_633, tup_el_636, tup_el_639, tup_el_642, tup_el_645,
         tup_el_648, tup_el_651, tup_el_654, tup_el_657, tup_el_660,
         tup_el_663, tup_el_666, tup_el_669, tup_el_672, tup_el_675,
         tup_el_678, tup_el_681, tup_el_684, tup_el_687, tup_el_690,
         tup_el_693, tup_el_696, tup_el_699, tup_el_702, tup_el_705,
         tup_el_708, tup_el_711, tup_el_714, tup_el_717, tup_el_720,
         tup_el_723, tup_el_726, tup_el_729, tup_el_732, tup_el_735,
         tup_el_738, tup_el_741, tup_el_744, tup_el_747, tup_el_750,
         tup_el_753, tup_el_756, tup_el_759, tup_el_762, tup_el_765,
         tup_el_768]
  in BIF.erlang__element__2 [indx_0, arg_2]
erlps__normal_kiwi__1 [arg_771] = EXC.function_clause unit
erlps__normal_kiwi__1 args =
  EXC.badarity (ErlangFun 1 erlps__normal_kiwi__1) args

erlps__normal_fi__1 :: ErlangFun
erlps__normal_fi__1 [indx_0] =
  let    tup_el_3 = ErlangFloat 1.00000000000000000000e+0
  in let tup_el_4 = ErlangFloat 9.77101701267670819107e-1
  in let tup_el_5 = ErlangFloat 9.59879091800105999077e-1
  in let tup_el_6 = ErlangFloat 9.45198953442299094618e-1
  in let tup_el_7 = ErlangFloat 9.32060075959229905607e-1
  in let tup_el_8 = ErlangFloat 9.19991505039346457728e-1
  in let tup_el_9 = ErlangFloat 9.08726440052130324254e-1
  in let tup_el_10 = ErlangFloat 8.98095921898342974821e-1
  in let tup_el_11 = ErlangFloat 8.87984660755832821977e-1
  in let tup_el_12 = ErlangFloat 8.78309655808916844855e-1
  in let tup_el_13 = ErlangFloat 8.69008688036856491443e-1
  in let tup_el_14 = ErlangFloat 8.60033621196331088399e-1
  in let tup_el_15 = ErlangFloat 8.51346258458677507264e-1
  in let tup_el_16 = ErlangFloat 8.42915653112203733244e-1
  in let tup_el_17 = ErlangFloat 8.34716292986882990590e-1
  in let tup_el_18 = ErlangFloat 8.26726833946220929228e-1
  in let tup_el_19 = ErlangFloat 8.18929191603701922553e-1
  in let tup_el_20 = ErlangFloat 8.11307874312655719073e-1
  in let tup_el_21 = ErlangFloat 8.03849483170963829970e-1
  in let tup_el_22 = ErlangFloat 7.96542330422958411162e-1
  in let tup_el_23 = ErlangFloat 7.89376143566024035536e-1
  in let tup_el_24 = ErlangFloat 7.82341832654801949687e-1
  in let tup_el_25 = ErlangFloat 7.75431304981186619862e-1
  in let tup_el_26 = ErlangFloat 7.68637315798485709628e-1
  in let tup_el_27 = ErlangFloat 7.61953346836794831454e-1
  in let tup_el_28 = ErlangFloat 7.55373506507095671125e-1
  in let tup_el_29 = ErlangFloat 7.48892447219156376370e-1
  in let tup_el_30 = ErlangFloat 7.42505296340150611201e-1
  in let tup_el_31 = ErlangFloat 7.36207598126862095000e-1
  in let tup_el_32 = ErlangFloat 7.29995264561475676324e-1
  in let tup_el_33 = ErlangFloat 7.23864533468629667290e-1
  in let tup_el_34 = ErlangFloat 7.17811932630721516446e-1
  in let tup_el_35 = ErlangFloat 7.11834248878247977110e-1
  in let tup_el_36 = ErlangFloat 7.05928501332753755015e-1
  in let tup_el_37 = ErlangFloat 7.00091918136511170978e-1
  in let tup_el_38 = ErlangFloat 6.94321916126116267520e-1
  in let tup_el_39 = ErlangFloat 6.88616083004671364343e-1
  in let tup_el_40 = ErlangFloat 6.82972161644994302243e-1
  in let tup_el_41 = ErlangFloat 6.77388036218773081920e-1
  in let tup_el_42 = ErlangFloat 6.71861719897081655084e-1
  in let tup_el_43 = ErlangFloat 6.66391343908749766989e-1
  in let tup_el_44 = ErlangFloat 6.60975147776662774746e-1
  in let tup_el_45 = ErlangFloat 6.55611470579696931082e-1
  in let tup_el_46 = ErlangFloat 6.50298743110816368507e-1
  in let tup_el_47 = ErlangFloat 6.45035480820821960357e-1
  in let tup_el_48 = ErlangFloat 6.39820277453056140970e-1
  in let tup_el_49 = ErlangFloat 6.34651799287623274992e-1
  in let tup_el_50 = ErlangFloat 6.29528779924836245918e-1
  in let tup_el_51 = ErlangFloat 6.24450015547026060503e-1
  in let tup_el_52 = ErlangFloat 6.19414360605833991258e-1
  in let tup_el_53 = ErlangFloat 6.14420723888913444810e-1
  in let tup_el_54 = ErlangFloat 6.09468064925773100882e-1
  in let tup_el_55 = ErlangFloat 6.04555390697467331940e-1
  in let tup_el_56 = ErlangFloat 5.99681752619124819326e-1
  in let tup_el_57 = ErlangFloat 5.94846243767986893047e-1
  in let tup_el_58 = ErlangFloat 5.90047996332825452903e-1
  in let tup_el_59 = ErlangFloat 5.85286179263370898163e-1
  in let tup_el_60 = ErlangFloat 5.80559996100790343121e-1
  in let tup_el_61 = ErlangFloat 5.75868682972353163052e-1
  in let tup_el_62 = ErlangFloat 5.71211506735252672051e-1
  in let tup_el_63 = ErlangFloat 5.66587763256163889913e-1
  in let tup_el_64 = ErlangFloat 5.61996775814523896742e-1
  in let tup_el_65 = ErlangFloat 5.57437893618765500925e-1
  in let tup_el_66 = ErlangFloat 5.52910490425831846473e-1
  in let tup_el_67 = ErlangFloat 5.48413963255265368701e-1
  in let tup_el_68 = ErlangFloat 5.43947731190025818293e-1
  in let tup_el_69 = ErlangFloat 5.39511234256951577315e-1
  in let tup_el_70 = ErlangFloat 5.35103932380457170126e-1
  in let tup_el_71 = ErlangFloat 5.30725304403661501951e-1
  in let tup_el_72 = ErlangFloat 5.26374847171684034919e-1
  in let tup_el_73 = ErlangFloat 5.22052074672321397841e-1
  in let tup_el_74 = ErlangFloat 5.17756517229755908183e-1
  in let tup_el_75 = ErlangFloat 5.13487720747326514825e-1
  in let tup_el_76 = ErlangFloat 5.09245245995747608525e-1
  in let tup_el_77 = ErlangFloat 5.05028667943467901580e-1
  in let tup_el_78 = ErlangFloat 5.00837575126148348836e-1
  in let tup_el_79 = ErlangFloat 4.96671569052489325635e-1
  in let tup_el_80 = ErlangFloat 4.92530263643868149170e-1
  in let tup_el_81 = ErlangFloat 4.88413284705457584334e-1
  in let tup_el_82 = ErlangFloat 4.84320269426682881164e-1
  in let tup_el_83 = ErlangFloat 4.80250865909046420477e-1
  in let tup_el_84 = ErlangFloat 4.76204732719505474670e-1
  in let tup_el_85 = ErlangFloat 4.72181538467729755570e-1
  in let tup_el_86 = ErlangFloat 4.68180961405693207844e-1
  in let tup_el_87 = ErlangFloat 4.64202689048173910980e-1
  in let tup_el_88 = ErlangFloat 4.60246417812842478767e-1
  in let tup_el_89 = ErlangFloat 4.56311852678716101117e-1
  in let tup_el_90 = ErlangFloat 4.52398706861848243221e-1
  in let tup_el_91 = ErlangFloat 4.48506701507202731882e-1
  in let tup_el_92 = ErlangFloat 4.44635565395739118522e-1
  in let tup_el_93 = ErlangFloat 4.40785034665803765463e-1
  in let tup_el_94 = ErlangFloat 4.36954852547985328481e-1
  in let tup_el_95 = ErlangFloat 4.33144769112652094911e-1
  in let tup_el_96 = ErlangFloat 4.29354541029441261202e-1
  in let tup_el_97 = ErlangFloat 4.25583931338021803636e-1
  in let tup_el_98 = ErlangFloat 4.21832709229495728120e-1
  in let tup_el_99 = ErlangFloat 4.18100649837847948564e-1
  in let tup_el_100 = ErlangFloat 4.14387534040890903597e-1
  in let tup_el_101 = ErlangFloat 4.10693148270187990967e-1
  in let tup_el_102 = ErlangFloat 4.07017284329473150173e-1
  in let tup_el_103 = ErlangFloat 4.03359739221114288465e-1
  in let tup_el_104 = ErlangFloat 3.99720314980197000132e-1
  in let tup_el_105 = ErlangFloat 3.96098818515832229448e-1
  in let tup_el_106 = ErlangFloat 3.92495061459315397467e-1
  in let tup_el_107 = ErlangFloat 3.88908860018788549162e-1
  in let tup_el_108 = ErlangFloat 3.85340034840077061418e-1
  in let tup_el_109 = ErlangFloat 3.81788410873393435629e-1
  in let tup_el_110 = ErlangFloat 3.78253817245618961795e-1
  in let tup_el_111 = ErlangFloat 3.74736087137890860888e-1
  in let tup_el_112 = ErlangFloat 3.71235057668239221140e-1
  in let tup_el_113 = ErlangFloat 3.67750569779032254747e-1
  in let tup_el_114 = ErlangFloat 3.64282468129003722535e-1
  in let tup_el_115 = ErlangFloat 3.60830600989647753973e-1
  in let tup_el_116 = ErlangFloat 3.57394820145780223175e-1
  in let tup_el_117 = ErlangFloat 3.53974980800076555187e-1
  in let tup_el_118 = ErlangFloat 3.50570941481405884410e-1
  in let tup_el_119 = ErlangFloat 3.47182563956793477367e-1
  in let tup_el_120 = ErlangFloat 3.43809713146850548515e-1
  in let tup_el_121 = ErlangFloat 3.40452257044521644502e-1
  in let tup_el_122 = ErlangFloat 3.37110066637005878487e-1
  in let tup_el_123 = ErlangFloat 3.33783015830718232664e-1
  in let tup_el_124 = ErlangFloat 3.30470981379163419867e-1
  in let tup_el_125 = ErlangFloat 3.27173842813601289947e-1
  in let tup_el_126 = ErlangFloat 3.23891482376391037779e-1
  in let tup_el_127 = ErlangFloat 3.20623784956905300003e-1
  in let tup_el_128 = ErlangFloat 3.17370638029913498812e-1
  in let tup_el_129 = ErlangFloat 3.14131931596337066193e-1
  in let tup_el_130 = ErlangFloat 3.10907558126286343025e-1
  in let tup_el_131 = ErlangFloat 3.07697412504291889501e-1
  in let tup_el_132 = ErlangFloat 3.04501391976649826709e-1
  in let tup_el_133 = ErlangFloat 3.01319396100802883165e-1
  in let tup_el_134 = ErlangFloat 2.98151326696685314843e-1
  in let tup_el_135 = ErlangFloat 2.94997087799961643650e-1
  in let tup_el_136 = ErlangFloat 2.91856585617094987928e-1
  in let tup_el_137 = ErlangFloat 2.88729728482182701477e-1
  in let tup_el_138 = ErlangFloat 2.85616426815501589509e-1
  in let tup_el_139 = ErlangFloat 2.82516593083707412415e-1
  in let tup_el_140 = ErlangFloat 2.79430141761637718112e-1
  in let tup_el_141 = ErlangFloat 2.76356989295668098450e-1
  in let tup_el_142 = ErlangFloat 2.73297054068576905639e-1
  in let tup_el_143 = ErlangFloat 2.70250256365875185516e-1
  in let tup_el_144 = ErlangFloat 2.67216518343561137971e-1
  in let tup_el_145 = ErlangFloat 2.64195763997260801847e-1
  in let tup_el_146 = ErlangFloat 2.61187919132720824944e-1
  in let tup_el_147 = ErlangFloat 2.58192911337618902223e-1
  in let tup_el_148 = ErlangFloat 2.55210669954661684145e-1
  in let tup_el_149 = ErlangFloat 2.52241126055941899953e-1
  in let tup_el_150 = ErlangFloat 2.49284212418528244859e-1
  in let tup_el_151 = ErlangFloat 2.46339863501263633960e-1
  in let tup_el_152 = ErlangFloat 2.43408015422750118040e-1
  in let tup_el_153 = ErlangFloat 2.40488605940500393965e-1
  in let tup_el_154 = ErlangFloat 2.37581574431237951828e-1
  in let tup_el_155 = ErlangFloat 2.34686861872329899370e-1
  in let tup_el_156 = ErlangFloat 2.31804410824338585906e-1
  in let tup_el_157 = ErlangFloat 2.28934165414680229622e-1
  in let tup_el_158 = ErlangFloat 2.26076071322380195427e-1
  in let tup_el_159 = ErlangFloat 2.23230075763917457099e-1
  in let tup_el_160 = ErlangFloat 2.20396127480151943212e-1
  in let tup_el_161 = ErlangFloat 2.17574176724331130872e-1
  in let tup_el_162 = ErlangFloat 2.14764175251173583536e-1
  in let tup_el_163 = ErlangFloat 2.11966076307030154569e-1
  in let tup_el_164 = ErlangFloat 2.09179834621124993710e-1
  in let tup_el_165 = ErlangFloat 2.06405406397880714087e-1
  in let tup_el_166 = ErlangFloat 2.03642749310334852941e-1
  in let tup_el_167 = ErlangFloat 2.00891822494656563380e-1
  in let tup_el_168 = ErlangFloat 1.98152586545775111215e-1
  in let tup_el_169 = ErlangFloat 1.95425003514134276728e-1
  in let tup_el_170 = ErlangFloat 1.92709036903589120415e-1
  in let tup_el_171 = ErlangFloat 1.90004651670464957958e-1
  in let tup_el_172 = ErlangFloat 1.87311814223800249257e-1
  in let tup_el_173 = ErlangFloat 1.84630492426799269756e-1
  in let tup_el_174 = ErlangFloat 1.81960655599522541648e-1
  in let tup_el_175 = ErlangFloat 1.79302274522847665539e-1
  in let tup_el_176 = ErlangFloat 1.76655321443734997233e-1
  in let tup_el_177 = ErlangFloat 1.74019770081838748288e-1
  in let tup_el_178 = ErlangFloat 1.71395595637505948616e-1
  in let tup_el_179 = ErlangFloat 1.68782774801211510329e-1
  in let tup_el_180 = ErlangFloat 1.66181285764482045142e-1
  in let tup_el_181 = ErlangFloat 1.63591108232365695097e-1
  in let tup_el_182 = ErlangFloat 1.61012223437511065027e-1
  in let tup_el_183 = ErlangFloat 1.58444614155924312637e-1
  in let tup_el_184 = ErlangFloat 1.55888264724479197465e-1
  in let tup_el_185 = ErlangFloat 1.53343161060262828110e-1
  in let tup_el_186 = ErlangFloat 1.50809290681845675763e-1
  in let tup_el_187 = ErlangFloat 1.48286642732574525105e-1
  in let tup_el_188 = ErlangFloat 1.45775208005994028060e-1
  in let tup_el_189 = ErlangFloat 1.43274978973513406055e-1
  in let tup_el_190 = ErlangFloat 1.40785949814444699690e-1
  in let tup_el_191 = ErlangFloat 1.38308116448550705302e-1
  in let tup_el_192 = ErlangFloat 1.35841476571253727545e-1
  in let tup_el_193 = ErlangFloat 1.33386029691669127928e-1
  in let tup_el_194 = ErlangFloat 1.30941777173644302579e-1
  in let tup_el_195 = ErlangFloat 1.28508722279999515470e-1
  in let tup_el_196 = ErlangFloat 1.26086870220185859326e-1
  in let tup_el_197 = ErlangFloat 1.23676228201596544176e-1
  in let tup_el_198 = ErlangFloat 1.21276805484790209388e-1
  in let tup_el_199 = ErlangFloat 1.18888613442909976681e-1
  in let tup_el_200 = ErlangFloat 1.16511665625610799646e-1
  in let tup_el_201 = ErlangFloat 1.14145977827838349117e-1
  in let tup_el_202 = ErlangFloat 1.11791568163838006544e-1
  in let tup_el_203 = ErlangFloat 1.09448457146811631291e-1
  in let tup_el_204 = ErlangFloat 1.07116667774683635428e-1
  in let tup_el_205 = ErlangFloat 1.04796225622486902096e-1
  in let tup_el_206 = ErlangFloat 1.02487158941935080358e-1
  in let tup_el_207 = ErlangFloat 1.00189498768809809315e-1
  in let tup_el_208 = ErlangFloat 9.79032790388622842226e-2
  in let tup_el_209 = ErlangFloat 9.56285367130088187482e-2
  in let tup_el_210 = ErlangFloat 9.33653119126908598302e-2
  in let tup_el_211 = ErlangFloat 9.11136480663736342267e-2
  in let tup_el_212 = ErlangFloat 8.88735920682757890576e-2
  in let tup_el_213 = ErlangFloat 8.66451944505579607636e-2
  in let tup_el_214 = ErlangFloat 8.44285095703533744471e-2
  in let tup_el_215 = ErlangFloat 8.22235958132028627032e-2
  in let tup_el_216 = ErlangFloat 8.00305158146630557514e-2
  in let tup_el_217 = ErlangFloat 7.78493367020960391756e-2
  in let tup_el_218 = ErlangFloat 7.56801303589270668581e-2
  in let tup_el_219 = ErlangFloat 7.35229737139812683511e-2
  in let tup_el_220 = ErlangFloat 7.13779490588903747783e-2
  in let tup_el_221 = ErlangFloat 6.92451443970067692657e-2
  in let tup_el_222 = ErlangFloat 6.71246538277884968737e-2
  in let tup_el_223 = ErlangFloat 6.50165779712428421044e-2
  in let tup_el_224 = ErlangFloat 6.29210244377581134900e-2
  in let tup_el_225 = ErlangFloat 6.08381083495398641836e-2
  in let tup_el_226 = ErlangFloat 5.87679529209337581097e-2
  in let tup_el_227 = ErlangFloat 5.67106901062029017391e-2
  in let tup_el_228 = ErlangFloat 5.46664613248889139085e-2
  in let tup_el_229 = ErlangFloat 5.26354182767921757735e-2
  in let tup_el_230 = ErlangFloat 5.06177238609477608833e-2
  in let tup_el_231 = ErlangFloat 4.86135532158685212956e-2
  in let tup_el_232 = ErlangFloat 4.66230949019303675396e-2
  in let tup_el_233 = ErlangFloat 4.46465522512944426592e-2
  in let tup_el_234 = ErlangFloat 4.26841449164744313194e-2
  in let tup_el_235 = ErlangFloat 4.07361106559409325012e-2
  in let tup_el_236 = ErlangFloat 3.88027074045261127777e-2
  in let tup_el_237 = ErlangFloat 3.68842156885672844968e-2
  in let tup_el_238 = ErlangFloat 3.49809414617160835403e-2
  in let tup_el_239 = ErlangFloat 3.30932194585785224850e-2
  in let tup_el_240 = ErlangFloat 3.12214171919202448935e-2
  in let tup_el_241 = ErlangFloat 2.93659397581333136973e-2
  in let tup_el_242 = ErlangFloat 2.75272356696030819079e-2
  in let tup_el_243 = ErlangFloat 2.57058040085488964666e-2
  in let tup_el_244 = ErlangFloat 2.39022033057958820101e-2
  in let tup_el_245 = ErlangFloat 2.21170627073088640890e-2
  in let tup_el_246 = ErlangFloat 2.03510962300445172324e-2
  in let tup_el_247 = ErlangFloat 1.86051212757246432761e-2
  in let tup_el_248 = ErlangFloat 1.68800831525431661861e-2
  in let tup_el_249 = ErlangFloat 1.51770883079353248457e-2
  in let tup_el_250 = ErlangFloat 1.34974506017398795249e-2
  in let tup_el_251 = ErlangFloat 1.18427578579078877224e-2
  in let tup_el_252 = ErlangFloat 1.02149714397014711870e-2
  in let tup_el_253 = ErlangFloat 8.61658276939873159217e-3
  in let tup_el_254 = ErlangFloat 7.05087547137322676050e-3
  in let tup_el_255 = ErlangFloat 5.52240329925099675962e-3
  in let tup_el_256 = ErlangFloat 4.03797259336303050042e-3
  in let tup_el_257 = ErlangFloat 2.60907274610216273134e-3
  in let tup_el_258 = ErlangFloat 1.26028593049859753868e-3
  in let
    arg_2 =
      ErlangTuple
        [tup_el_3, tup_el_4, tup_el_5, tup_el_6, tup_el_7, tup_el_8,
         tup_el_9, tup_el_10, tup_el_11, tup_el_12, tup_el_13, tup_el_14,
         tup_el_15, tup_el_16, tup_el_17, tup_el_18, tup_el_19, tup_el_20,
         tup_el_21, tup_el_22, tup_el_23, tup_el_24, tup_el_25, tup_el_26,
         tup_el_27, tup_el_28, tup_el_29, tup_el_30, tup_el_31, tup_el_32,
         tup_el_33, tup_el_34, tup_el_35, tup_el_36, tup_el_37, tup_el_38,
         tup_el_39, tup_el_40, tup_el_41, tup_el_42, tup_el_43, tup_el_44,
         tup_el_45, tup_el_46, tup_el_47, tup_el_48, tup_el_49, tup_el_50,
         tup_el_51, tup_el_52, tup_el_53, tup_el_54, tup_el_55, tup_el_56,
         tup_el_57, tup_el_58, tup_el_59, tup_el_60, tup_el_61, tup_el_62,
         tup_el_63, tup_el_64, tup_el_65, tup_el_66, tup_el_67, tup_el_68,
         tup_el_69, tup_el_70, tup_el_71, tup_el_72, tup_el_73, tup_el_74,
         tup_el_75, tup_el_76, tup_el_77, tup_el_78, tup_el_79, tup_el_80,
         tup_el_81, tup_el_82, tup_el_83, tup_el_84, tup_el_85, tup_el_86,
         tup_el_87, tup_el_88, tup_el_89, tup_el_90, tup_el_91, tup_el_92,
         tup_el_93, tup_el_94, tup_el_95, tup_el_96, tup_el_97, tup_el_98,
         tup_el_99, tup_el_100, tup_el_101, tup_el_102, tup_el_103,
         tup_el_104, tup_el_105, tup_el_106, tup_el_107, tup_el_108,
         tup_el_109, tup_el_110, tup_el_111, tup_el_112, tup_el_113,
         tup_el_114, tup_el_115, tup_el_116, tup_el_117, tup_el_118,
         tup_el_119, tup_el_120, tup_el_121, tup_el_122, tup_el_123,
         tup_el_124, tup_el_125, tup_el_126, tup_el_127, tup_el_128,
         tup_el_129, tup_el_130, tup_el_131, tup_el_132, tup_el_133,
         tup_el_134, tup_el_135, tup_el_136, tup_el_137, tup_el_138,
         tup_el_139, tup_el_140, tup_el_141, tup_el_142, tup_el_143,
         tup_el_144, tup_el_145, tup_el_146, tup_el_147, tup_el_148,
         tup_el_149, tup_el_150, tup_el_151, tup_el_152, tup_el_153,
         tup_el_154, tup_el_155, tup_el_156, tup_el_157, tup_el_158,
         tup_el_159, tup_el_160, tup_el_161, tup_el_162, tup_el_163,
         tup_el_164, tup_el_165, tup_el_166, tup_el_167, tup_el_168,
         tup_el_169, tup_el_170, tup_el_171, tup_el_172, tup_el_173,
         tup_el_174, tup_el_175, tup_el_176, tup_el_177, tup_el_178,
         tup_el_179, tup_el_180, tup_el_181, tup_el_182, tup_el_183,
         tup_el_184, tup_el_185, tup_el_186, tup_el_187, tup_el_188,
         tup_el_189, tup_el_190, tup_el_191, tup_el_192, tup_el_193,
         tup_el_194, tup_el_195, tup_el_196, tup_el_197, tup_el_198,
         tup_el_199, tup_el_200, tup_el_201, tup_el_202, tup_el_203,
         tup_el_204, tup_el_205, tup_el_206, tup_el_207, tup_el_208,
         tup_el_209, tup_el_210, tup_el_211, tup_el_212, tup_el_213,
         tup_el_214, tup_el_215, tup_el_216, tup_el_217, tup_el_218,
         tup_el_219, tup_el_220, tup_el_221, tup_el_222, tup_el_223,
         tup_el_224, tup_el_225, tup_el_226, tup_el_227, tup_el_228,
         tup_el_229, tup_el_230, tup_el_231, tup_el_232, tup_el_233,
         tup_el_234, tup_el_235, tup_el_236, tup_el_237, tup_el_238,
         tup_el_239, tup_el_240, tup_el_241, tup_el_242, tup_el_243,
         tup_el_244, tup_el_245, tup_el_246, tup_el_247, tup_el_248,
         tup_el_249, tup_el_250, tup_el_251, tup_el_252, tup_el_253,
         tup_el_254, tup_el_255, tup_el_256, tup_el_257, tup_el_258]
  in BIF.erlang__element__2 [indx_0, arg_2]
erlps__normal_fi__1 [arg_259] = EXC.function_clause unit
erlps__normal_fi__1 args =
  EXC.badarity (ErlangFun 1 erlps__normal_fi__1) args

erlps__bc64__1 :: ErlangFun
erlps__bc64__1 [v_0] =
  let    lop_3 = toErl 1
  in let lop_5 = toErl 64
  in let rop_6 = toErl 1
  in let rop_4 = BIF.erlang__op_minus [lop_5, rop_6]
  in let arg_2 = BIF.erlang__bsl__2 [lop_3, rop_4]
  in let arg_7 = toErl 64
  in erlps__bc__3 [v_0, arg_2, arg_7]
erlps__bc64__1 [arg_8] = EXC.function_clause unit
erlps__bc64__1 args =
  EXC.badarity (ErlangFun 1 erlps__bc64__1) args

erlps__bc__3 :: ErlangFun
erlps__bc__3 [v_0, b_1, n_2] | weakLeq b_1 v_0 = n_2
erlps__bc__3 [v_0, b_1, n_2] =
  let    rop_6 = toErl 1
  in let arg_4 = BIF.erlang__bsr__2 [b_1, rop_6]
  in let rop_9 = toErl 1
  in let arg_7 = BIF.erlang__op_minus [n_2, rop_9]
  in erlps__bc__3 [v_0, arg_4, arg_7]
erlps__bc__3 [arg_10, arg_11, arg_12] = EXC.function_clause unit
erlps__bc__3 args = EXC.badarity (ErlangFun 3 erlps__bc__3) args

erlps__make_float__3 :: ErlangFun
erlps__make_float__3 [s_0, e_1, m_2] =
  let
    matchExpr_10 =
      ErlangBinary
        (BIN.concat
           [BIN.fromInt s_0 (toErl 1) 1 BIN.Big,
            BIN.fromInt e_1 (toErl 11) 1 BIN.Big,
            BIN.fromInt m_2 (toErl 52) 1 BIN.Big])
  in
    case matchExpr_10 of
      (ErlangBinary binSeg_6) | (ErlangInt size_7) <- (toErl 64)
                              , (BIN.Ok f_9 bin_8) <-
                                  (BIN.chopFloat binSeg_6 size_7 1 BIN.Big)
                              , BIN.empty bin_8 ->
        f_9
      _ -> EXC.badmatch matchExpr_10
erlps__make_float__3 [arg_11, arg_12, arg_13] =
  EXC.function_clause unit
erlps__make_float__3 args =
  EXC.badarity (ErlangFun 3 erlps__make_float__3) args

erlps__float2str__1 :: ErlangFun
erlps__float2str__1 [n_0] =
  let    bin_el_1 = BIF.erlang__float__1 [n_0]
  in let
    matchExpr_13 =
      ErlangBinary (BIN.fromFloat bin_el_1 (toErl 64) 1 BIN.Big)
  in
    case matchExpr_13 of
      (ErlangBinary binSeg_3) | (ErlangInt size_4) <- (toErl 1)
                              , (BIN.Ok s_6 bin_5) <-
                                  (BIN.chopInt binSeg_3 size_4 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_7) <- (toErl 11)
                              , (BIN.Ok e_9 bin_8) <-
                                  (BIN.chopInt bin_5 size_7 1 BIN.Big
                                     BIN.Unsigned)
                              , (ErlangInt size_10) <- (toErl 52)
                              , (BIN.Ok m_12 bin_11) <-
                                  (BIN.chopInt bin_8 size_10 1 BIN.Big
                                     BIN.Unsigned)
                              , BIN.empty bin_11 ->
        let    arg_15 = toErl "~c~c.~13.16.0bE~b"
        in let
          head_17 =
            case s_6 of
              (ErlangInt num_19) | (ErlangInt num_19) == (toErl 1) -> toErl 45
              (ErlangInt num_20) | (ErlangInt num_20) == (toErl 0) -> toErl 43
              something_else -> EXC.case_clause something_else
        in let
          head_22 =
            case e_9 of
              (ErlangInt num_24) | (ErlangInt num_24) == (toErl 0) -> toErl 48
              _ -> toErl 49
        in let rop_30 = toErl 1023
        in let head_28 = BIF.erlang__op_minus [e_9, rop_30]
        in let
          arg_14 =
            BIF.do_remote_fun_call "Io.Lib" "erlps__format__2"
              [arg_15,
               ErlangCons head_17
                 (ErlangCons head_22
                    (ErlangCons m_12 (ErlangCons head_28 ErlangEmptyList)))]
        in BIF.do_remote_fun_call "Lists" "erlps__flatten__1" [arg_14]
      _ -> EXC.badmatch matchExpr_13
erlps__float2str__1 [arg_32] = EXC.function_clause unit
erlps__float2str__1 args =
  EXC.badarity (ErlangFun 1 erlps__float2str__1) args